Prog "AbstractHaskellGoodies" ["AbstractHaskell","Char","Prelude"] [] [Func ("AbstractHaskellGoodies","lowerFirst") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Var 0)),Func ("AbstractHaskellGoodies","applyF") 2 Public (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("AbstractHaskell","Expr") []]) (TCons ("AbstractHaskell","Expr") []))) (Rule [] (Var 0)),Func ("AbstractHaskellGoodies","constF") 1 Public (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("AbstractHaskell","Expr") [])) (Rule [] (Var 0)),Func ("AbstractHaskellGoodies","applyV") 2 Public (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("AbstractHaskell","Expr") []]) (TCons ("AbstractHaskell","Expr") []))) (Rule [] (Var 0)),Func ("AbstractHaskellGoodies","tuplePat") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("AbstractHaskell","Pattern") []]) (TCons ("AbstractHaskell","Pattern") [])) (Rule [] (Var 0)),Func ("AbstractHaskellGoodies","tupleExpr") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("AbstractHaskell","Expr") []]) (TCons ("AbstractHaskell","Expr") [])) (Rule [] (Var 0)),Func ("AbstractHaskellGoodies","tuplePattern") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("AbstractHaskell","Pattern") []]) (TCons ("AbstractHaskell","Pattern") [])) (Rule [] (Var 0)),Func ("AbstractHaskellGoodies","~>") 2 Public (FuncType (TCons ("AbstractHaskell","TypeExpr") []) (FuncType (TCons ("AbstractHaskell","TypeExpr") []) (TCons ("AbstractHaskell","TypeExpr") []))) (Rule [] (Var 0)),Func ("AbstractHaskellGoodies","baseType") 1 Public (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("AbstractHaskell","TypeExpr") [])) (Rule [] (Var 0)),Func ("AbstractHaskellGoodies","listType") 1 Public (FuncType (TCons ("AbstractHaskell","TypeExpr") []) (TCons ("AbstractHaskell","TypeExpr") [])) (Rule [] (Var 0)),Func ("AbstractHaskellGoodies","tupleType") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("AbstractHaskell","TypeExpr") []]) (TCons ("AbstractHaskell","TypeExpr") [])) (Rule [] (Var 0)),Func ("AbstractHaskellGoodies","ioType") 1 Public (FuncType (TCons ("AbstractHaskell","TypeExpr") []) (TCons ("AbstractHaskell","TypeExpr") [])) (Rule [] (Var 0)),Func ("AbstractHaskellGoodies","maybeType") 1 Public (FuncType (TCons ("AbstractHaskell","TypeExpr") []) (TCons ("AbstractHaskell","TypeExpr") [])) (Rule [] (Var 0)),Func ("AbstractHaskellGoodies","stringType") 0 Public (TCons ("AbstractHaskell","TypeExpr") []) (Rule [] (Var 0)),Func ("AbstractHaskellGoodies","intType") 0 Public (TCons ("AbstractHaskell","TypeExpr") []) (Rule [] (Var 0)),Func ("AbstractHaskellGoodies","boolType") 0 Public (TCons ("AbstractHaskell","TypeExpr") []) (Rule [] (Var 0)),Func ("AbstractHaskellGoodies","dateType") 0 Public (TCons ("AbstractHaskell","TypeExpr") []) (Rule [] (Var 0)),Func ("AbstractHaskellGoodies","tfunc") 5 Public (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("AbstractHaskell","Visibility") []) (FuncType (TCons ("AbstractHaskell","TypeExpr") []) (FuncType (TCons ("Prelude","[]") [TCons ("AbstractHaskell","Rule") []]) (TCons ("AbstractHaskell","FuncDecl") [])))))) (Rule [] (Var 0)),Func ("AbstractHaskellGoodies","ctfunc") 6 Public (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("AbstractHaskell","Visibility") []) (FuncType (TCons ("Prelude","[]") [TCons ("AbstractHaskell","Context") []]) (FuncType (TCons ("AbstractHaskell","TypeExpr") []) (FuncType (TCons ("Prelude","[]") [TCons ("AbstractHaskell","Rule") []]) (TCons ("AbstractHaskell","FuncDecl") []))))))) (Rule [] (Var 0)),Func ("AbstractHaskellGoodies","ufunc") 4 Public (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("AbstractHaskell","Visibility") []) (FuncType (TCons ("Prelude","[]") [TCons ("AbstractHaskell","Rule") []]) (TCons ("AbstractHaskell","FuncDecl") []))))) (Rule [] (Var 0)),Func ("AbstractHaskellGoodies","cmtfunc") 7 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("AbstractHaskell","Visibility") []) (FuncType (TCons ("Prelude","[]") [TCons ("AbstractHaskell","Context") []]) (FuncType (TCons ("AbstractHaskell","TypeExpr") []) (FuncType (TCons ("Prelude","[]") [TCons ("AbstractHaskell","Rule") []]) (TCons ("AbstractHaskell","FuncDecl") [])))))))) (Rule [] (Var 0)),Func ("AbstractHaskellGoodies","string2ac") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("AbstractHaskell","Expr") [])) (Rule [] (Var 0)),Func ("AbstractHaskellGoodies","noGuard") 1 Public (FuncType (TCons ("AbstractHaskell","Expr") []) (TCons ("Prelude","(,)") [TCons ("AbstractHaskell","Expr") [],TCons ("AbstractHaskell","Expr") []])) (Rule [] (Var 0)),Func ("AbstractHaskellGoodies","pre") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [] (Var 0)),Func ("AbstractHaskellGoodies","cvar") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("AbstractHaskell","Expr") [])) (Rule [] (Var 0)),Func ("AbstractHaskellGoodies","clet") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("AbstractHaskell","LocalDecl") []]) (FuncType (TCons ("AbstractHaskell","Expr") []) (TCons ("AbstractHaskell","Expr") []))) (Rule [] (Var 0)),Func ("AbstractHaskellGoodies","ctvar") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("AbstractHaskell","TypeExpr") [])) (Rule [] (Var 0)),Func ("AbstractHaskellGoodies","list2ac") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("AbstractHaskell","Expr") []]) (TCons ("AbstractHaskell","Expr") [])) (Rule [] (Var 0)),Func ("AbstractHaskellGoodies","renameSymbolInProg") 2 Public (FuncType (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (FuncType (TCons ("AbstractHaskell","Prog") []) (TCons ("AbstractHaskell","Prog") []))) (Rule [] (Var 0)),Func ("AbstractHaskellGoodies","renameSymbolInTypeDecl") 2 Public (FuncType (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (FuncType (TCons ("AbstractHaskell","TypeDecl") []) (TCons ("AbstractHaskell","TypeDecl") []))) (Rule [] (Var 0)),Func ("AbstractHaskellGoodies","renameSymbolInConsDecl") 2 Public (FuncType (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (FuncType (TCons ("AbstractHaskell","ConsDecl") []) (TCons ("AbstractHaskell","ConsDecl") []))) (Rule [] (Var 0)),Func ("AbstractHaskellGoodies","renameSymbolInTypeExpr") 2 Public (FuncType (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (FuncType (TCons ("AbstractHaskell","TypeExpr") []) (TCons ("AbstractHaskell","TypeExpr") []))) (Rule [] (Var 0)),Func ("AbstractHaskellGoodies","renameSymbolInExpr") 2 Public (FuncType (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (FuncType (TCons ("AbstractHaskell","Expr") []) (TCons ("AbstractHaskell","Expr") []))) (Rule [] (Var 0)),Func ("AbstractHaskellGoodies","renameSymbolInPat") 2 Public (FuncType (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (FuncType (TCons ("AbstractHaskell","Pattern") []) (TCons ("AbstractHaskell","Pattern") []))) (Rule [] (Var 0)),Func ("AbstractHaskellGoodies","renameSymbolInBranch") 2 Public (FuncType (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (FuncType (TCons ("AbstractHaskell","BranchExpr") []) (TCons ("AbstractHaskell","BranchExpr") []))) (Rule [] (Var 0)),Func ("AbstractHaskellGoodies","renameSymbolInStat") 2 Public (FuncType (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (FuncType (TCons ("AbstractHaskell","Statement") []) (TCons ("AbstractHaskell","Statement") []))) (Rule [] (Var 0)),Func ("AbstractHaskellGoodies","renameSymbolInLocal") 2 Public (FuncType (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (FuncType (TCons ("AbstractHaskell","LocalDecl") []) (TCons ("AbstractHaskell","LocalDecl") []))) (Rule [] (Var 0)),Func ("AbstractHaskellGoodies","renameSymbolInTypeSig") 2 Public (FuncType (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (FuncType (TCons ("AbstractHaskell","TypeSig") []) (TCons ("AbstractHaskell","TypeSig") []))) (Rule [] (Var 0)),Func ("AbstractHaskellGoodies","renameSymbolInFunc") 2 Public (FuncType (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (FuncType (TCons ("AbstractHaskell","FuncDecl") []) (TCons ("AbstractHaskell","FuncDecl") []))) (Rule [] (Var 0)),Func ("AbstractHaskellGoodies","renameSymbolInRules") 2 Public (FuncType (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (FuncType (TCons ("AbstractHaskell","Rules") []) (TCons ("AbstractHaskell","Rules") []))) (Rule [] (Var 0)),Func ("AbstractHaskellGoodies","renameSymbolInRule") 2 Public (FuncType (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (FuncType (TCons ("AbstractHaskell","Rule") []) (TCons ("AbstractHaskell","Rule") []))) (Rule [] (Var 0)),Func ("AbstractHaskellGoodies","renameOpDecl") 2 Public (FuncType (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (FuncType (TCons ("AbstractHaskell","OpDecl") []) (TCons ("AbstractHaskell","OpDecl") []))) (Rule [] (Var 0)),Func ("AbstractHaskellGoodies","funcDecls") 1 Public (FuncType (TCons ("AbstractHaskell","Prog") []) (TCons ("Prelude","[]") [TCons ("AbstractHaskell","FuncDecl") []])) (Rule [] (Var 0)),Func ("AbstractHaskellGoodies","funcName") 1 Public (FuncType (TCons ("AbstractHaskell","FuncDecl") []) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [] (Var 0)),Func ("AbstractHaskellGoodies","typeOf") 1 Public (FuncType (TCons ("AbstractHaskell","FuncDecl") []) (TCons ("AbstractHaskell","TypeSig") [])) (Rule [] (Var 0)),Func ("AbstractHaskellGoodies","commentOf") 1 Public (FuncType (TCons ("AbstractHaskell","FuncDecl") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Var 0))] [Op ("AbstractHaskellGoodies","~>") InfixrOp 9]