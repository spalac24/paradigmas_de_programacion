Prog "AbstractHaskell" ["Prelude"] [TypeSyn ("AbstractHaskell","QName") Public [] (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]),TypeSyn ("AbstractHaskell","TVarIName") Public [] (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]),TypeSyn ("AbstractHaskell","VarIName") Public [] (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]),Type ("AbstractHaskell","Prog") Public [] [Cons ("AbstractHaskell","Prog") 5 Public [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","[]") [TCons ("AbstractHaskell","TypeDecl") []],TCons ("Prelude","[]") [TCons ("AbstractHaskell","FuncDecl") []],TCons ("Prelude","[]") [TCons ("AbstractHaskell","OpDecl") []]]],Type ("AbstractHaskell","Visibility") Public [] [Cons ("AbstractHaskell","Public") 0 Public [],Cons ("AbstractHaskell","Private") 0 Public []],Type ("AbstractHaskell","TypeDecl") Public [] [Cons ("AbstractHaskell","Type") 4 Public [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("AbstractHaskell","Visibility") [],TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]],TCons ("Prelude","[]") [TCons ("AbstractHaskell","ConsDecl") []]],Cons ("AbstractHaskell","TypeSyn") 4 Public [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("AbstractHaskell","Visibility") [],TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]],TCons ("AbstractHaskell","TypeExpr") []],Cons ("AbstractHaskell","Instance") 4 Public [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("AbstractHaskell","TypeExpr") [],TCons ("Prelude","[]") [TCons ("AbstractHaskell","Context") []],TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("AbstractHaskell","Rule") []]]]],Type ("AbstractHaskell","Context") Public [] [Cons ("AbstractHaskell","Context") 2 Public [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]]],Type ("AbstractHaskell","ConsDecl") Public [] [Cons ("AbstractHaskell","Cons") 4 Public [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","Int") [],TCons ("AbstractHaskell","Visibility") [],TCons ("Prelude","[]") [TCons ("AbstractHaskell","TypeExpr") []]]],Type ("AbstractHaskell","TypeExpr") Public [] [Cons ("AbstractHaskell","TVar") 1 Public [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]],Cons ("AbstractHaskell","FuncType") 2 Public [TCons ("AbstractHaskell","TypeExpr") [],TCons ("AbstractHaskell","TypeExpr") []],Cons ("AbstractHaskell","TCons") 2 Public [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","[]") [TCons ("AbstractHaskell","TypeExpr") []]]],Type ("AbstractHaskell","TypeSig") Public [] [Cons ("AbstractHaskell","Untyped") 0 Public [],Cons ("AbstractHaskell","FType") 1 Public [TCons ("AbstractHaskell","TypeExpr") []],Cons ("AbstractHaskell","CType") 2 Public [TCons ("Prelude","[]") [TCons ("AbstractHaskell","Context") []],TCons ("AbstractHaskell","TypeExpr") []]],Type ("AbstractHaskell","OpDecl") Public [] [Cons ("AbstractHaskell","Op") 3 Public [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("AbstractHaskell","Fixity") [],TCons ("Prelude","Int") []]],Type ("AbstractHaskell","Fixity") Public [] [Cons ("AbstractHaskell","InfixOp") 0 Public [],Cons ("AbstractHaskell","InfixlOp") 0 Public [],Cons ("AbstractHaskell","InfixrOp") 0 Public []],Type ("AbstractHaskell","FuncDecl") Public [] [Cons ("AbstractHaskell","Func") 6 Public [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","Int") [],TCons ("AbstractHaskell","Visibility") [],TCons ("AbstractHaskell","TypeSig") [],TCons ("AbstractHaskell","Rules") []]],Type ("AbstractHaskell","Rules") Public [] [Cons ("AbstractHaskell","Rules") 1 Public [TCons ("Prelude","[]") [TCons ("AbstractHaskell","Rule") []]],Cons ("AbstractHaskell","External") 1 Public [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]],Type ("AbstractHaskell","Rule") Public [] [Cons ("AbstractHaskell","Rule") 3 Public [TCons ("Prelude","[]") [TCons ("AbstractHaskell","Pattern") []],TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("AbstractHaskell","Expr") [],TCons ("AbstractHaskell","Expr") []]],TCons ("Prelude","[]") [TCons ("AbstractHaskell","LocalDecl") []]]],Type ("AbstractHaskell","LocalDecl") Public [] [Cons ("AbstractHaskell","LocalFunc") 1 Public [TCons ("AbstractHaskell","FuncDecl") []],Cons ("AbstractHaskell","LocalPat") 3 Public [TCons ("AbstractHaskell","Pattern") [],TCons ("AbstractHaskell","Expr") [],TCons ("Prelude","[]") [TCons ("AbstractHaskell","LocalDecl") []]],Cons ("AbstractHaskell","LocalVar") 1 Public [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]],Type ("AbstractHaskell","Expr") Public [] [Cons ("AbstractHaskell","Var") 1 Public [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]],Cons ("AbstractHaskell","Lit") 1 Public [TCons ("AbstractHaskell","Literal") []],Cons ("AbstractHaskell","Symbol") 1 Public [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]],Cons ("AbstractHaskell","Apply") 2 Public [TCons ("AbstractHaskell","Expr") [],TCons ("AbstractHaskell","Expr") []],Cons ("AbstractHaskell","Lambda") 2 Public [TCons ("Prelude","[]") [TCons ("AbstractHaskell","Pattern") []],TCons ("AbstractHaskell","Expr") []],Cons ("AbstractHaskell","Let") 2 Public [TCons ("Prelude","[]") [TCons ("AbstractHaskell","LocalDecl") []],TCons ("AbstractHaskell","Expr") []],Cons ("AbstractHaskell","DoExpr") 1 Public [TCons ("Prelude","[]") [TCons ("AbstractHaskell","Statement") []]],Cons ("AbstractHaskell","ListComp") 2 Public [TCons ("AbstractHaskell","Expr") [],TCons ("Prelude","[]") [TCons ("AbstractHaskell","Statement") []]],Cons ("AbstractHaskell","Case") 2 Public [TCons ("AbstractHaskell","Expr") [],TCons ("Prelude","[]") [TCons ("AbstractHaskell","BranchExpr") []]],Cons ("AbstractHaskell","Typed") 2 Public [TCons ("AbstractHaskell","Expr") [],TCons ("AbstractHaskell","TypeExpr") []]],Type ("AbstractHaskell","Statement") Public [] [Cons ("AbstractHaskell","SExpr") 1 Public [TCons ("AbstractHaskell","Expr") []],Cons ("AbstractHaskell","SPat") 2 Public [TCons ("AbstractHaskell","Pattern") [],TCons ("AbstractHaskell","Expr") []],Cons ("AbstractHaskell","SLet") 1 Public [TCons ("Prelude","[]") [TCons ("AbstractHaskell","LocalDecl") []]]],Type ("AbstractHaskell","Pattern") Public [] [Cons ("AbstractHaskell","PVar") 1 Public [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]],Cons ("AbstractHaskell","PLit") 1 Public [TCons ("AbstractHaskell","Literal") []],Cons ("AbstractHaskell","PComb") 2 Public [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","[]") [TCons ("AbstractHaskell","Pattern") []]],Cons ("AbstractHaskell","PAs") 2 Public [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("AbstractHaskell","Pattern") []],Cons ("AbstractHaskell","PFuncComb") 2 Public [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","[]") [TCons ("AbstractHaskell","Pattern") []]]],Type ("AbstractHaskell","BranchExpr") Public [] [Cons ("AbstractHaskell","Branch") 2 Public [TCons ("AbstractHaskell","Pattern") [],TCons ("AbstractHaskell","Expr") []]],Type ("AbstractHaskell","Literal") Public [] [Cons ("AbstractHaskell","Intc") 1 Public [TCons ("Prelude","Int") []],Cons ("AbstractHaskell","Floatc") 1 Public [TCons ("Prelude","Float") []],Cons ("AbstractHaskell","Charc") 1 Public [TCons ("Prelude","Char") []]]] [] []