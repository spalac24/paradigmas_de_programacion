Prog "AbstractHaskellPrinter" ["AbstractHaskell","Char","List","Names","Prelude","Maybe","Read"] [] [Func ("AbstractHaskellPrinter","showProg") 1 Public (FuncType (TCons ("AbstractHaskell","Prog") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Var 0)),Func ("AbstractHaskellPrinter","showModuleHeader") 4 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("AbstractHaskell","TypeDecl") []]) (FuncType (TCons ("Prelude","[]") [TCons ("AbstractHaskell","FuncDecl") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (Rule [] (Var 0)),Func ("AbstractHaskellPrinter","showDecls") 4 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("AbstractHaskell","OpDecl") []]) (FuncType (TCons ("Prelude","[]") [TCons ("AbstractHaskell","TypeDecl") []]) (FuncType (TCons ("Prelude","[]") [TCons ("AbstractHaskell","FuncDecl") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (Rule [] (Var 0)),Func ("AbstractHaskellPrinter","showTypeDecls") 2 Public (FuncType (TCons ("AbstractHaskellPrinter","Options") []) (FuncType (TCons ("Prelude","[]") [TCons ("AbstractHaskell","TypeDecl") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [] (Var 0)),Func ("AbstractHaskellPrinter","showTypeDecl") 2 Public (FuncType (TCons ("AbstractHaskellPrinter","Options") []) (FuncType (TCons ("AbstractHaskell","TypeDecl") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [] (Var 0)),Func ("AbstractHaskellPrinter","showTypeExpr") 3 Public (FuncType (TCons ("AbstractHaskellPrinter","Options") []) (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("AbstractHaskell","TypeExpr") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [] (Var 0)),Func ("AbstractHaskellPrinter","showFuncDecl") 0 Public (FuncType (TCons ("AbstractHaskell","FuncDecl") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Var 0)),Func ("AbstractHaskellPrinter","showExpr") 0 Public (FuncType (TCons ("AbstractHaskell","Expr") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Var 0)),Func ("AbstractHaskellPrinter","showPattern") 2 Public (FuncType (TCons ("AbstractHaskellPrinter","Options") []) (FuncType (TCons ("AbstractHaskell","Pattern") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [] (Var 0)),Func ("AbstractHaskellPrinter","showLiteral") 1 Public (FuncType (TCons ("AbstractHaskell","Literal") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Var 0)),Func ("AbstractHaskellPrinter","showInt") 1 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Var 0)),Func ("AbstractHaskellPrinter","showFloat") 1 Public (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Var 0))] []