Prog "TransTypes" ["AbstractHaskell","AbstractHaskellGoodies","Base","FiniteMap","FlatCurry","FlatCurry2AbstractHaskell","FlatCurryGoodies","List","Names","Prelude","Analysis"] [] [Func ("TransTypes","transTypes") 1 Public (FuncType (TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Base","HOClass") []]) (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","TypeDecl") []]) (TCons ("Prelude","[]") [TCons ("AbstractHaskell","TypeDecl") []]))) (Rule [1] (Comb FuncCall ("Prelude","concatMap") [Comb (FuncPartCall 1) ("TransTypes","genTypeDeclarations") [Var 1]])),Func ("TransTypes","genTypeDeclarations") 2 Private (FuncType (TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Base","HOClass") []]) (FuncType (TCons ("FlatCurry","TypeDecl") []) (TCons ("Prelude","[]") [TCons ("AbstractHaskell","TypeDecl") []]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("FlatCurry","TypeSyn") [3,4,5,6]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","TypeSyn") [Var 3,Comb FuncCall ("FlatCurry2AbstractHaskell","fcy2absVis") [Var 4],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("FlatCurry2AbstractHaskell","fcy2absTVar") [],Var 5],Comb FuncCall ("TransTypes","fcy2absTExp") [Var 6]],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("FlatCurry","Type") [7,8,9,10]) (Let [(11,Comb FuncCall ("FlatCurry2AbstractHaskell","fcy2absVis") [Var 8]),(12,Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("FlatCurry2AbstractHaskell","fcy2absTVar") [],Var 9]),(13,Comb ConsCall ("AbstractHaskell","TCons") [Var 7,Comb FuncCall ("Prelude","map") [Comb (ConsPartCall 1) ("AbstractHaskell","TVar") [],Var 12]]),(14,Comb FuncCall ("AbstractHaskellGoodies","listType") [Var 13]),(15,Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","concatMap") [Comb (FuncPartCall 1) ("TransTypes","fcy2absCDecl") [Var 1]],Var 10],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Cons") [Comb FuncCall ("Names","mkChoiceName") [Var 7],Lit (Intc  3),Var 11,Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransTypes","coverType") [],Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransTypes","idType") [],Comb ConsCall ("Prelude",":") [Var 13,Comb ConsCall ("Prelude",":") [Var 13,Comb ConsCall ("Prelude","[]") []]]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Cons") [Comb FuncCall ("Names","mkChoicesName") [Var 7],Lit (Intc  2),Var 11,Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransTypes","coverType") [],Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransTypes","idType") [],Comb ConsCall ("Prelude",":") [Var 14,Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Cons") [Comb FuncCall ("Names","mkFailName") [Var 7],Lit (Intc  2),Var 11,Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransTypes","coverType") [],Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransTypes","failInfoType") [],Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Cons") [Comb FuncCall ("Names","mkGuardName") [Var 7],Lit (Intc  2),Var 11,Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransTypes","coverType") [],Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransTypes","constraintType") [],Comb ConsCall ("Prelude",":") [Var 13,Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude","[]") []]]]]]),(16,Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Prelude","flip") [Comb (FuncPartCall 2) ("Prelude","$") [],Var 2],Comb ConsCall ("Prelude",":") [Comb (FuncPartCall 1) ("TransTypes","showInstance") [Var 1],Comb ConsCall ("Prelude",":") [Comb (FuncPartCall 1) ("TransTypes","readInstance") [],Comb ConsCall ("Prelude",":") [Comb (FuncPartCall 1) ("TransTypes","nondetInstance") [],Comb ConsCall ("Prelude",":") [Comb (FuncPartCall 1) ("TransTypes","generableInstance") [],Comb ConsCall ("Prelude",":") [Comb (FuncPartCall 1) ("TransTypes","normalformInstance") [Var 1],Comb ConsCall ("Prelude",":") [Comb (FuncPartCall 1) ("TransTypes","unifiableInstance") [Var 1],Comb ConsCall ("Prelude",":") [Comb (FuncPartCall 1) ("TransTypes","curryInstance") [Var 1],Comb ConsCall ("Prelude",":") [Comb (FuncPartCall 1) ("TransTypes","coverableInstance") [Var 1],Comb ConsCall ("Prelude","[]") []]]]]]]]]])] (Case  Rigid (Comb FuncCall ("Prelude","null") [Var 10]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Type") [Var 7,Comb ConsCall ("AbstractHaskell","Public") [],Var 12,Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Type") [Var 7,Comb ConsCall ("AbstractHaskell","Public") [],Var 12,Var 15],Var 16]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])]))])),Func ("TransTypes","fcy2absCDecl") 2 Private (FuncType (TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Base","HOClass") []]) (FuncType (TCons ("FlatCurry","ConsDecl") []) (TCons ("Prelude","[]") [TCons ("AbstractHaskell","ConsDecl") []]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("FlatCurry","Cons") [3,4,5,6]) (Let [(7,Comb FuncCall ("Prelude","==") [Comb FuncCall ("FiniteMap","lookupFM") [Var 1,Var 3],Comb ConsCall ("Prelude","Just") [Comb ConsCall ("Base","HO") []]]),(8,Comb FuncCall ("FlatCurry2AbstractHaskell","fcy2absVis") [Var 5]),(9,Comb ConsCall ("AbstractHaskell","Cons") [Comb FuncCall ("Names","mkFoConsName") [Var 3],Var 4,Var 8,Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("TransTypes","fcy2absTExp") [],Var 6]]),(10,Comb ConsCall ("AbstractHaskell","Cons") [Comb FuncCall ("Names","mkHoConsName") [Var 3],Var 4,Var 8,Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("TransTypes","fcy2absHOTExp") [],Var 6]])] (Case  Rigid (Var 7) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude","[]") []]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])]))])),Func ("TransTypes","fcy2absTExp") 1 Private (FuncType (TCons ("FlatCurry","TypeExpr") []) (TCons ("AbstractHaskell","TypeExpr") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","TVar") [2]) (Comb ConsCall ("AbstractHaskell","TVar") [Comb FuncCall ("FlatCurry2AbstractHaskell","fcy2absTVar") [Var 2]]),Branch (Pattern ("FlatCurry","TCons") [3,4]) (Comb ConsCall ("AbstractHaskell","TCons") [Var 3,Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("TransTypes","fcy2absTExp") [],Var 4]]),Branch (Pattern ("FlatCurry","FuncType") [5,6]) (Let [(7,Comb ConsCall ("AbstractHaskell","TCons") [Comb FuncCall ("TransTypes","basics") [Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'S'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]],Comb ConsCall ("Prelude","[]") []])] (Comb ConsCall ("AbstractHaskell","FuncType") [Comb FuncCall ("TransTypes","fcy2absTExp") [Var 5],Comb ConsCall ("AbstractHaskell","FuncType") [Var 7,Comb FuncCall ("TransTypes","fcy2absTExp") [Var 6]]]))])),Func ("TransTypes","fcy2absHOTExp") 1 Private (FuncType (TCons ("FlatCurry","TypeExpr") []) (TCons ("AbstractHaskell","TypeExpr") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","TVar") [2]) (Comb ConsCall ("AbstractHaskell","TVar") [Comb FuncCall ("FlatCurry2AbstractHaskell","fcy2absTVar") [Var 2]]),Branch (Pattern ("FlatCurry","TCons") [3,4]) (Comb ConsCall ("AbstractHaskell","TCons") [Var 3,Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("TransTypes","fcy2absHOTExp") [],Var 4]]),Branch (Pattern ("FlatCurry","FuncType") [5,6]) (Comb FuncCall ("TransTypes","fcy2absHOTExp.funcType.36") [Comb FuncCall ("TransTypes","fcy2absHOTExp") [Var 5],Comb FuncCall ("TransTypes","fcy2absHOTExp") [Var 6]])])),Func ("TransTypes","fcy2absHOTExp.funcType.36") 2 Private (FuncType (TCons ("AbstractHaskell","TypeExpr") []) (FuncType (TCons ("AbstractHaskell","TypeExpr") []) (TCons ("AbstractHaskell","TypeExpr") []))) (Rule [1,2] (Comb ConsCall ("AbstractHaskell","TCons") [Comb FuncCall ("TransTypes","basics") [Comb ConsCall ("Prelude",":") [Lit (Charc  'F'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude","[]") []]]]]],Comb ConsCall ("Prelude",":") [Var 1,Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude","[]") []]]])),Func ("TransTypes","showInstance") 2 Private (FuncType (TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Base","HOClass") []]) (FuncType (TCons ("FlatCurry","TypeDecl") []) (TCons ("AbstractHaskell","TypeDecl") []))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("FlatCurry","Type") [3,4,5,6]) (Let [(7,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("TransTypes","newVars") [],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude","[]") []]]]]]]]]]]),(8,Comb FuncCall ("TransTypes","showInstance._#selFP2#cd") [Var 7]),(9,Comb FuncCall ("TransTypes","showInstance._#selFP3#d") [Var 7]),(10,Comb FuncCall ("TransTypes","showInstance._#selFP4#i") [Var 7]),(11,Comb FuncCall ("TransTypes","showInstance._#selFP5#x") [Var 7]),(12,Comb FuncCall ("TransTypes","showInstance._#selFP6#y") [Var 7]),(13,Comb FuncCall ("TransTypes","showInstance._#selFP7#xs") [Var 7]),(14,Comb FuncCall ("TransTypes","showInstance._#selFP8#c") [Var 7]),(15,Comb FuncCall ("TransTypes","showInstance._#selFP9#e") [Var 7]),(16,Comb FuncCall ("TransTypes","showInstance._#selFP10#us") [Var 7]),(17,Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("FlatCurry2AbstractHaskell","fcy2absTVar") [],Var 5]),(18,Comb ConsCall ("AbstractHaskell","TCons") [Var 3,Comb FuncCall ("Prelude","map") [Comb (ConsPartCall 1) ("AbstractHaskell","TVar") [],Var 17]])] (Comb FuncCall ("Prelude","$") [Comb FuncCall ("TransTypes","mkInstance") [Comb FuncCall ("TransTypes","basics") [Comb ConsCall ("Prelude",":") [Lit (Charc  'S'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude","[]") []]]]]],Comb ConsCall ("Prelude","[]") [],Var 18,Var 17],Case  Rigid (Comb FuncCall ("TransTypes","isListType") [Var 3]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransTypes","showRule4List") [],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("AbstractHaskellGoodies","pre") [Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]],Comb FuncCall ("TransTypes","simpleRule") [Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","PVar") [Var 9],Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransTypes","mkChoicePattern") [Var 3,Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("AbstractHaskellGoodies","applyF") [Comb FuncCall ("TransTypes","basics") [Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Var") [Var 9],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Var") [Var 8],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Var") [Var 10],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Var") [Var 11],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Var") [Var 12],Comb ConsCall ("Prelude","[]") []]]]]]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("AbstractHaskellGoodies","pre") [Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]],Comb FuncCall ("TransTypes","simpleRule") [Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","PVar") [Var 9],Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransTypes","mkChoicesPattern") [Var 3],Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("AbstractHaskellGoodies","applyF") [Comb FuncCall ("TransTypes","basics") [Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Var") [Var 9],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Var") [Var 8],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Var") [Var 10],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Var") [Var 13],Comb ConsCall ("Prelude","[]") []]]]]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("AbstractHaskellGoodies","pre") [Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]],Comb FuncCall ("TransTypes","simpleRule") [Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","PVar") [Var 9],Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransTypes","mkGuardPattern") [Var 3],Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("AbstractHaskellGoodies","applyF") [Comb FuncCall ("TransTypes","basics") [Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'G'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Var") [Var 9],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Var") [Var 8],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Var") [Var 14],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Var") [Var 15],Comb ConsCall ("Prelude","[]") []]]]]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("AbstractHaskellGoodies","pre") [Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]],Comb FuncCall ("TransTypes","simpleRule") [Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","PVar") [Var 16],Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransTypes","mkFailPattern") [Var 3],Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("AbstractHaskellGoodies","applyF") [Comb FuncCall ("AbstractHaskellGoodies","pre") [Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude","[]") []]]]]]]]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransTypes","charc") [Lit (Charc  '!')],Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","concatMap") [Comb (FuncPartCall 1) ("TransTypes","showConsRule") [Var 1]],Var 6]])]]))])),Func ("TransTypes","showInstance._#selFP2#cd") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 5) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case  Flex (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case  Flex (Var 11) [Branch (Pattern ("Prelude",":") [12,13]) (Case  Flex (Var 13) [Branch (Pattern ("Prelude",":") [14,15]) (Case  Flex (Var 15) [Branch (Pattern ("Prelude",":") [16,17]) (Case  Flex (Var 17) [Branch (Pattern ("Prelude",":") [18,19]) (Case  Flex (Var 19) [Branch (Pattern ("Prelude","[]") []) (Var 2)])])])])])])])])])])),Func ("TransTypes","showInstance._#selFP3#d") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 5) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case  Flex (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case  Flex (Var 11) [Branch (Pattern ("Prelude",":") [12,13]) (Case  Flex (Var 13) [Branch (Pattern ("Prelude",":") [14,15]) (Case  Flex (Var 15) [Branch (Pattern ("Prelude",":") [16,17]) (Case  Flex (Var 17) [Branch (Pattern ("Prelude",":") [18,19]) (Case  Flex (Var 19) [Branch (Pattern ("Prelude","[]") []) (Var 4)])])])])])])])])])])),Func ("TransTypes","showInstance._#selFP4#i") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 5) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case  Flex (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case  Flex (Var 11) [Branch (Pattern ("Prelude",":") [12,13]) (Case  Flex (Var 13) [Branch (Pattern ("Prelude",":") [14,15]) (Case  Flex (Var 15) [Branch (Pattern ("Prelude",":") [16,17]) (Case  Flex (Var 17) [Branch (Pattern ("Prelude",":") [18,19]) (Case  Flex (Var 19) [Branch (Pattern ("Prelude","[]") []) (Var 6)])])])])])])])])])])),Func ("TransTypes","showInstance._#selFP5#x") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 5) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case  Flex (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case  Flex (Var 11) [Branch (Pattern ("Prelude",":") [12,13]) (Case  Flex (Var 13) [Branch (Pattern ("Prelude",":") [14,15]) (Case  Flex (Var 15) [Branch (Pattern ("Prelude",":") [16,17]) (Case  Flex (Var 17) [Branch (Pattern ("Prelude",":") [18,19]) (Case  Flex (Var 19) [Branch (Pattern ("Prelude","[]") []) (Var 8)])])])])])])])])])])),Func ("TransTypes","showInstance._#selFP6#y") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 5) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case  Flex (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case  Flex (Var 11) [Branch (Pattern ("Prelude",":") [12,13]) (Case  Flex (Var 13) [Branch (Pattern ("Prelude",":") [14,15]) (Case  Flex (Var 15) [Branch (Pattern ("Prelude",":") [16,17]) (Case  Flex (Var 17) [Branch (Pattern ("Prelude",":") [18,19]) (Case  Flex (Var 19) [Branch (Pattern ("Prelude","[]") []) (Var 10)])])])])])])])])])])),Func ("TransTypes","showInstance._#selFP7#xs") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 5) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case  Flex (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case  Flex (Var 11) [Branch (Pattern ("Prelude",":") [12,13]) (Case  Flex (Var 13) [Branch (Pattern ("Prelude",":") [14,15]) (Case  Flex (Var 15) [Branch (Pattern ("Prelude",":") [16,17]) (Case  Flex (Var 17) [Branch (Pattern ("Prelude",":") [18,19]) (Case  Flex (Var 19) [Branch (Pattern ("Prelude","[]") []) (Var 12)])])])])])])])])])])),Func ("TransTypes","showInstance._#selFP8#c") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 5) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case  Flex (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case  Flex (Var 11) [Branch (Pattern ("Prelude",":") [12,13]) (Case  Flex (Var 13) [Branch (Pattern ("Prelude",":") [14,15]) (Case  Flex (Var 15) [Branch (Pattern ("Prelude",":") [16,17]) (Case  Flex (Var 17) [Branch (Pattern ("Prelude",":") [18,19]) (Case  Flex (Var 19) [Branch (Pattern ("Prelude","[]") []) (Var 14)])])])])])])])])])])),Func ("TransTypes","showInstance._#selFP9#e") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 5) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case  Flex (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case  Flex (Var 11) [Branch (Pattern ("Prelude",":") [12,13]) (Case  Flex (Var 13) [Branch (Pattern ("Prelude",":") [14,15]) (Case  Flex (Var 15) [Branch (Pattern ("Prelude",":") [16,17]) (Case  Flex (Var 17) [Branch (Pattern ("Prelude",":") [18,19]) (Case  Flex (Var 19) [Branch (Pattern ("Prelude","[]") []) (Var 16)])])])])])])])])])])),Func ("TransTypes","showInstance._#selFP10#us") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 5) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case  Flex (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case  Flex (Var 11) [Branch (Pattern ("Prelude",":") [12,13]) (Case  Flex (Var 13) [Branch (Pattern ("Prelude",":") [14,15]) (Case  Flex (Var 15) [Branch (Pattern ("Prelude",":") [16,17]) (Case  Flex (Var 17) [Branch (Pattern ("Prelude",":") [18,19]) (Case  Flex (Var 19) [Branch (Pattern ("Prelude","[]") []) (Var 18)])])])])])])])])])])),Func ("TransTypes","showRule4List") 0 Private (TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("AbstractHaskell","Rule") []]) (Rule [] (Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("AbstractHaskellGoodies","pre") [Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]],Comb ConsCall ("AbstractHaskell","Rule") [Comb ConsCall ("Prelude","[]") [],Comb ConsCall ("Prelude",":") [Comb FuncCall ("AbstractHaskellGoodies","noGuard") [Comb FuncCall ("AbstractHaskellGoodies","constF") [Comb FuncCall ("AbstractHaskellGoodies","pre") [Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  '4'),Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  'L'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]],Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude","[]") []]])),Func ("TransTypes","showConsRule") 2 Private (FuncType (TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Base","HOClass") []]) (FuncType (TCons ("FlatCurry","ConsDecl") []) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("AbstractHaskell","Rule") []]]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("FlatCurry","Cons") [3,4,5,6]) (Let [(7,Comb FuncCall ("Prelude","==") [Comb FuncCall ("FiniteMap","lookupFM") [Var 1,Var 3],Comb ConsCall ("Prelude","Just") [Comb ConsCall ("Base","HO") []]])] (Case  Rigid (Var 7) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("TransTypes","showConsRule.rule.50") [Var 4,Var 3],Comb ConsCall ("Prelude",":") [Var 3,Comb ConsCall ("Prelude",":") [Comb FuncCall ("Names","mkHoConsName") [Var 3],Comb ConsCall ("Prelude","[]") []]]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransTypes","showConsRule.rule.50") [Var 4,Var 3,Var 3],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])]))])),Func ("TransTypes","showConsRule.showListCons.50") 2 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("AbstractHaskell","Rule") []))) (Rule [1,2] (Let [(3,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("TransTypes","newVars") [],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude",":") [Lit (Charc  '1'),Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude",":") [Lit (Charc  '2'),Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude","[]") []]]]]),(4,Comb FuncCall ("TransTypes","showConsRule.showListCons.50._#selFP12#d") [Var 3]),(5,Comb FuncCall ("TransTypes","showConsRule.showListCons.50._#selFP13#x1") [Var 3]),(6,Comb FuncCall ("TransTypes","showConsRule.showListCons.50._#selFP14#x2") [Var 3])] (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("TransTypes","simpleRule") [Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","PVar") [Var 4],Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransTypes","consPattern") [Var 2,Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude","[]") []],Var 1],Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("AbstractHaskellGoodies","applyF") [Comb FuncCall ("AbstractHaskellGoodies","pre") [Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("AbstractHaskellGoodies","applyF") [Comb FuncCall ("AbstractHaskellGoodies","pre") [Comb ConsCall ("Prelude",":") [Lit (Charc  '>'),Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Var") [Var 4],Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransTypes","intc") [Lit (Intc  5)],Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","foldr1") [Comb (FuncPartCall 2) ("TransTypes","showConsRule.showListCons.50._#lambda2") [],Comb ConsCall ("Prelude",":") [Comb FuncCall ("AbstractHaskellGoodies","applyF") [Comb FuncCall ("AbstractHaskellGoodies","pre") [Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransTypes","intc") [Lit (Intc  6)],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Var") [Var 5],Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("AbstractHaskellGoodies","applyF") [Comb FuncCall ("AbstractHaskellGoodies","pre") [Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude","[]") []]]]]]]]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransTypes","charc") [Lit (Charc  ':')],Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("AbstractHaskellGoodies","applyF") [Comb FuncCall ("AbstractHaskellGoodies","pre") [Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransTypes","intc") [Lit (Intc  5)],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Var") [Var 6],Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude","[]") []]]]]))),Func ("TransTypes","showConsRule.showListCons.50._#selFP12#d") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 5) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 7) [Branch (Pattern ("Prelude","[]") []) (Var 2)])])])])),Func ("TransTypes","showConsRule.showListCons.50._#selFP13#x1") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 5) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 7) [Branch (Pattern ("Prelude","[]") []) (Var 4)])])])])),Func ("TransTypes","showConsRule.showListCons.50._#selFP14#x2") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 5) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 7) [Branch (Pattern ("Prelude","[]") []) (Var 6)])])])])),Func ("TransTypes","showConsRule.showListCons.50._#lambda2") 2 Private (FuncType (TCons ("AbstractHaskell","Expr") []) (FuncType (TCons ("AbstractHaskell","Expr") []) (TCons ("AbstractHaskell","Expr") []))) (Rule [1,2] (Comb FuncCall ("AbstractHaskellGoodies","applyF") [Comb FuncCall ("AbstractHaskellGoodies","pre") [Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude",":") [Var 1,Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude","[]") []]]])),Func ("TransTypes","showConsRule.showTupleCons.50") 2 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("AbstractHaskell","Rule") []))) (Rule [1,2] (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("TransTypes","simpleRule") [Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","PVar") [Comb ConsCall ("Prelude","(,)") [Lit (Intc  0),Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransTypes","consPattern") [Var 2,Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude","[]") []],Var 1],Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("AbstractHaskellGoodies","applyF") [Comb FuncCall ("AbstractHaskellGoodies","pre") [Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("AbstractHaskellGoodies","applyF") [Comb FuncCall ("AbstractHaskellGoodies","pre") [Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude",":") [Lit (Charc  'S'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("AbstractHaskellGoodies","string2ac") [Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("TransTypes","showConsRule.showTupleCons.50._#lambda3") [],Comb FuncCall ("AbstractHaskellGoodies","applyF") [Comb FuncCall ("AbstractHaskellGoodies","pre") [Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude","[]") []]]]]]]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Lit") [Comb ConsCall ("AbstractHaskell","Charc") [Lit (Charc  ')')]],Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("List","intersperse") [Comb FuncCall ("AbstractHaskellGoodies","applyF") [Comb FuncCall ("AbstractHaskellGoodies","pre") [Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Lit") [Comb ConsCall ("AbstractHaskell","Charc") [Lit (Charc  ',')]],Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("TransTypes","showConsRule.showTupleCons.50._#lambda4") [],Comb FuncCall ("Prelude","enumFromTo") [Lit (Intc  1),Var 1]]]],Comb ConsCall ("Prelude","[]") []]]]])),Func ("TransTypes","showConsRule.showTupleCons.50._#lambda3") 2 Private (FuncType (TCons ("AbstractHaskell","Expr") []) (FuncType (TCons ("AbstractHaskell","Expr") []) (TCons ("AbstractHaskell","Expr") []))) (Rule [1,2] (Comb FuncCall ("AbstractHaskellGoodies","applyF") [Comb FuncCall ("AbstractHaskellGoodies","pre") [Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude",":") [Var 1,Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude","[]") []]]])),Func ("TransTypes","showConsRule.showTupleCons.50._#lambda4") 1 Private (FuncType (TCons ("Prelude","Int") []) (TCons ("AbstractHaskell","Expr") [])) (Rule [1] (Comb FuncCall ("AbstractHaskellGoodies","applyF") [Comb FuncCall ("AbstractHaskellGoodies","pre") [Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude","[]") []]]]]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransTypes","mkVar") [Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude","[]") []],Var 1],Comb ConsCall ("Prelude","[]") []]])),Func ("TransTypes","showConsRule.showBody.50") 3 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("AbstractHaskell","Rule") [])))) (Rule [1,2,3] (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("TransTypes","simpleRule") [Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","PVar") [Comb ConsCall ("Prelude","(,)") [Lit (Intc  0),Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransTypes","consPattern") [Var 3,Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude","[]") []],Var 1],Comb ConsCall ("Prelude","[]") []]]],Case  Rigid (Comb FuncCall ("Prelude","==") [Var 1,Lit (Intc  0)]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("AbstractHaskellGoodies","applyF") [Comb FuncCall ("AbstractHaskellGoodies","pre") [Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude",":") [Lit (Charc  'S'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("AbstractHaskellGoodies","string2ac") [Comb FuncCall ("Names","unGenRename") [Comb FuncCall ("Prelude","snd") [Var 2]]],Comb ConsCall ("Prelude","[]") []]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("AbstractHaskellGoodies","applyF") [Comb FuncCall ("AbstractHaskellGoodies","pre") [Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("AbstractHaskellGoodies","applyF") [Comb FuncCall ("AbstractHaskellGoodies","pre") [Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude",":") [Lit (Charc  'S'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("AbstractHaskellGoodies","string2ac") [Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb FuncCall ("Names","unGenRename") [Comb FuncCall ("Prelude","snd") [Var 2]]]],Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("TransTypes","showConsRule.showBody.50._#lambda5") [],Comb FuncCall ("AbstractHaskellGoodies","applyF") [Comb FuncCall ("AbstractHaskellGoodies","pre") [Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude","[]") []]]]]]]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Lit") [Comb ConsCall ("AbstractHaskell","Charc") [Lit (Charc  ')')]],Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("TransTypes","showConsRule.showBody.50._#lambda6") [],Comb FuncCall ("Prelude","enumFromTo") [Lit (Intc  1),Var 1]]],Comb ConsCall ("Prelude","[]") []]]])]])),Func ("TransTypes","showConsRule.showBody.50._#lambda5") 2 Private (FuncType (TCons ("AbstractHaskell","Expr") []) (FuncType (TCons ("AbstractHaskell","Expr") []) (TCons ("AbstractHaskell","Expr") []))) (Rule [1,2] (Comb FuncCall ("AbstractHaskellGoodies","applyF") [Comb FuncCall ("AbstractHaskellGoodies","pre") [Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("AbstractHaskellGoodies","applyF") [Comb FuncCall ("AbstractHaskellGoodies","pre") [Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude","[]") []]]]]]]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Lit") [Comb ConsCall ("AbstractHaskell","Charc") [Lit (Charc  ' ')]],Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("AbstractHaskellGoodies","applyF") [Comb FuncCall ("AbstractHaskellGoodies","pre") [Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude",":") [Var 1,Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude","[]") []]]])),Func ("TransTypes","showConsRule.showBody.50._#lambda6") 1 Private (FuncType (TCons ("Prelude","Int") []) (TCons ("AbstractHaskell","Expr") [])) (Rule [1] (Comb FuncCall ("AbstractHaskellGoodies","applyF") [Comb FuncCall ("AbstractHaskellGoodies","pre") [Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude","[]") []]]]]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransTypes","mkVar") [Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude","[]") []],Var 1],Comb ConsCall ("Prelude","[]") []]])),Func ("TransTypes","showConsRule.rule.50") 3 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("AbstractHaskell","Rule") []])))) (Rule [1,2,3] (Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("AbstractHaskellGoodies","pre") [Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]],Case  Rigid (Comb FuncCall ("Prelude","take") [Lit (Intc  8),Comb FuncCall ("Prelude","snd") [Var 3]]) [Branch (Pattern ("Prelude",":") [4,5]) (Let [(6,Var 4)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 6,Lit (Charc  'O')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 5) [Branch (Pattern ("Prelude",":") [7,8]) (Let [(9,Var 7)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 9,Lit (Charc  'P')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 8) [Branch (Pattern ("Prelude",":") [10,11]) (Let [(12,Var 10)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 12,Lit (Charc  '_')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 11) [Branch (Pattern ("Prelude",":") [13,14]) (Let [(15,Var 13)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 15,Lit (Charc  'C')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 14) [Branch (Pattern ("Prelude",":") [16,17]) (Let [(18,Var 16)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 18,Lit (Charc  'o')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 17) [Branch (Pattern ("Prelude",":") [19,20]) (Let [(21,Var 19)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 21,Lit (Charc  'n')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 20) [Branch (Pattern ("Prelude",":") [22,23]) (Let [(24,Var 22)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 24,Lit (Charc  's')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 23) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("TransTypes","showConsRule.showListCons.50") [Var 1,Var 3]),Branch (Pattern ("Prelude",":") [25,26]) (Comb FuncCall ("TransTypes","showConsRule.showBody.50") [Var 1,Var 2,Var 3])]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("TransTypes","showConsRule.showBody.50") [Var 1,Var 2,Var 3])])),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("TransTypes","showConsRule.showBody.50") [Var 1,Var 2,Var 3])]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("TransTypes","showConsRule.showBody.50") [Var 1,Var 2,Var 3])])),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("TransTypes","showConsRule.showBody.50") [Var 1,Var 2,Var 3])]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("TransTypes","showConsRule.showBody.50") [Var 1,Var 2,Var 3])])),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("TransTypes","showConsRule.showBody.50") [Var 1,Var 2,Var 3])]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 15,Lit (Charc  'T')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 14) [Branch (Pattern ("Prelude",":") [27,28]) (Let [(29,Var 27)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 29,Lit (Charc  'u')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 28) [Branch (Pattern ("Prelude",":") [30,31]) (Let [(32,Var 30)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 32,Lit (Charc  'p')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 31) [Branch (Pattern ("Prelude",":") [33,34]) (Let [(35,Var 33)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 35,Lit (Charc  'l')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 34) [Branch (Pattern ("Prelude",":") [36,37]) (Let [(38,Var 36)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 38,Lit (Charc  'e')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 37) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("TransTypes","showConsRule.showTupleCons.50") [Var 1,Var 3]),Branch (Pattern ("Prelude",":") [39,40]) (Comb FuncCall ("TransTypes","showConsRule.showBody.50") [Var 1,Var 2,Var 3])]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("TransTypes","showConsRule.showBody.50") [Var 1,Var 2,Var 3])])),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("TransTypes","showConsRule.showBody.50") [Var 1,Var 2,Var 3])]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("TransTypes","showConsRule.showBody.50") [Var 1,Var 2,Var 3])])),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("TransTypes","showConsRule.showBody.50") [Var 1,Var 2,Var 3])]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("TransTypes","showConsRule.showBody.50") [Var 1,Var 2,Var 3])])),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("TransTypes","showConsRule.showBody.50") [Var 1,Var 2,Var 3])]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("TransTypes","showConsRule.showBody.50") [Var 1,Var 2,Var 3])])),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("TransTypes","showConsRule.showBody.50") [Var 1,Var 2,Var 3])]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("TransTypes","showConsRule.showBody.50") [Var 1,Var 2,Var 3])])])),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("TransTypes","showConsRule.showBody.50") [Var 1,Var 2,Var 3])]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("TransTypes","showConsRule.showBody.50") [Var 1,Var 2,Var 3])])),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("TransTypes","showConsRule.showBody.50") [Var 1,Var 2,Var 3])]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("TransTypes","showConsRule.showBody.50") [Var 1,Var 2,Var 3])])),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("TransTypes","showConsRule.showBody.50") [Var 1,Var 2,Var 3])]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("TransTypes","showConsRule.showBody.50") [Var 1,Var 2,Var 3])])),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("TransTypes","showConsRule.showBody.50") [Var 1,Var 2,Var 3])]])),Func ("TransTypes","readInstance") 1 Private (FuncType (TCons ("FlatCurry","TypeDecl") []) (TCons ("AbstractHaskell","TypeDecl") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","Type") [2,3,4,5]) (Let [(6,Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("FlatCurry2AbstractHaskell","fcy2absTVar") [],Var 4]),(7,Comb ConsCall ("AbstractHaskell","TCons") [Var 2,Comb FuncCall ("Prelude","map") [Comb (ConsPartCall 1) ("AbstractHaskell","TVar") [],Var 6]]),(8,Case  Rigid (Comb FuncCall ("TransTypes","isListType") [Var 2]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("TransTypes","readListRule") [Var 2]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("TransTypes","isTupleType") [Var 2]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("TransTypes","readTupleRule") [Comb FuncCall ("Prelude","head") [Var 5]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("TransTypes","readRule") [Var 5]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("TransTypes","mkInstance") [Comb FuncCall ("AbstractHaskellGoodies","pre") [Comb ConsCall ("Prelude",":") [Lit (Charc  'R'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude","[]") []]]]]],Comb ConsCall ("Prelude","[]") [],Var 7,Var 6],Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude","[]") []]]))])),Func ("TransTypes","readListRule") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("AbstractHaskell","Rule") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Let [(4,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("TransTypes","newVars") [],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  '2'),Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude","[]") []]]]]]),(5,Comb FuncCall ("TransTypes","readListRule._#selFP16#d") [Var 4]),(6,Comb FuncCall ("TransTypes","readListRule._#selFP17#s") [Var 4]),(7,Comb FuncCall ("TransTypes","readListRule._#selFP18#xs") [Var 4]),(8,Comb FuncCall ("TransTypes","readListRule._#selFP19#s2") [Var 4])] (Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("AbstractHaskellGoodies","pre") [Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]],Comb ConsCall ("AbstractHaskell","Rule") [Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","PVar") [Var 5],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","PVar") [Var 6],Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("AbstractHaskellGoodies","noGuard") [],Comb FuncCall ("AbstractHaskellGoodies","applyF") [Comb FuncCall ("AbstractHaskellGoodies","pre") [Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("AbstractHaskellGoodies","constF") [Comb ConsCall ("Prelude","(,)") [Var 2,Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'L'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("AbstractHaskellGoodies","applyF") [Comb FuncCall ("AbstractHaskellGoodies","pre") [Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Var") [Var 5],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Var") [Var 6],Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","LocalFunc") [Comb FuncCall ("AbstractHaskellGoodies","ufunc") [Comb ConsCall ("Prelude","(,)") [Var 2,Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'L'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude","[]") []]]]]]]]]],Lit (Intc  1),Comb ConsCall ("AbstractHaskell","Private") [],Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransTypes","simpleRule") [Comb ConsCall ("Prelude",":") [Comb FuncCall ("AbstractHaskellGoodies","tuplePat") [Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","PVar") [Var 7],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","PVar") [Var 8],Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("AbstractHaskellGoodies","tupleExpr") [Comb ConsCall ("Prelude",":") [Comb FuncCall ("AbstractHaskellGoodies","applyF") [Comb FuncCall ("AbstractHaskellGoodies","pre") [Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude","[]") []]]]]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("AbstractHaskellGoodies","constF") [Comb ConsCall ("Prelude","(,)") [Var 2,Comb ConsCall ("Prelude",":") [Lit (Charc  'O'),Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude","[]") []]]]]]]]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("AbstractHaskellGoodies","constF") [Comb ConsCall ("Prelude","(,)") [Var 2,Comb ConsCall ("Prelude",":") [Lit (Charc  'O'),Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude",":") [Lit (Charc  'L'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude","[]") []]]]]]]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Var") [Var 7],Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Var") [Var 8],Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude","[]") []]]]))])),Func ("TransTypes","readListRule._#selFP16#d") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 5) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case  Flex (Var 9) [Branch (Pattern ("Prelude","[]") []) (Var 2)])])])])])),Func ("TransTypes","readListRule._#selFP17#s") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 5) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case  Flex (Var 9) [Branch (Pattern ("Prelude","[]") []) (Var 4)])])])])])),Func ("TransTypes","readListRule._#selFP18#xs") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 5) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case  Flex (Var 9) [Branch (Pattern ("Prelude","[]") []) (Var 6)])])])])])),Func ("TransTypes","readListRule._#selFP19#s2") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 5) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case  Flex (Var 9) [Branch (Pattern ("Prelude","[]") []) (Var 8)])])])])])),Func ("TransTypes","readTupleRule") 1 Private (FuncType (TCons ("FlatCurry","ConsDecl") []) (TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("AbstractHaskell","Rule") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","Cons") [2,3,4,5]) (Case  Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [6,7]) (Let [(8,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("TransTypes","newVars") [],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  '2'),Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude","[]") []]]]]),(9,Comb FuncCall ("TransTypes","readTupleRule._#selFP21#d") [Var 8]),(10,Comb FuncCall ("TransTypes","readTupleRule._#selFP22#s") [Var 8]),(11,Comb FuncCall ("TransTypes","readTupleRule._#selFP23#s2") [Var 8])] (Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("AbstractHaskellGoodies","pre") [Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]],Comb ConsCall ("AbstractHaskell","Rule") [Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","PVar") [Var 9],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","PVar") [Var 10],Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("AbstractHaskellGoodies","noGuard") [],Comb FuncCall ("AbstractHaskellGoodies","applyF") [Comb FuncCall ("AbstractHaskellGoodies","pre") [Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("AbstractHaskellGoodies","constF") [Comb ConsCall ("Prelude","(,)") [Var 6,Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'T'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude","[]") []]]]]]]]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("AbstractHaskellGoodies","applyF") [Comb FuncCall ("AbstractHaskellGoodies","pre") [Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Var") [Var 9],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Var") [Var 10],Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","LocalFunc") [Comb FuncCall ("AbstractHaskellGoodies","ufunc") [Comb ConsCall ("Prelude","(,)") [Var 6,Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'T'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude","[]") []]]]]]]]],Lit (Intc  1),Comb ConsCall ("AbstractHaskell","Private") [],Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransTypes","simpleRule") [Comb ConsCall ("Prelude",":") [Comb FuncCall ("AbstractHaskellGoodies","tuplePat") [Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("AbstractHaskellGoodies","tuplePat") [],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("TransTypes","mkPVar") [Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude","enumFromTo") [Lit (Intc  1),Var 3]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","PVar") [Var 11],Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("AbstractHaskellGoodies","tupleExpr") [Comb ConsCall ("Prelude",":") [Comb FuncCall ("AbstractHaskellGoodies","applyF") [Var 2,Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("TransTypes","mkVar") [Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude","enumFromTo") [Lit (Intc  1),Var 3]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Var") [Var 11],Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude","[]") []]]]))])])),Func ("TransTypes","readTupleRule._#selFP21#d") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 5) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 7) [Branch (Pattern ("Prelude","[]") []) (Var 2)])])])])),Func ("TransTypes","readTupleRule._#selFP22#s") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 5) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 7) [Branch (Pattern ("Prelude","[]") []) (Var 4)])])])])),Func ("TransTypes","readTupleRule._#selFP23#s2") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 5) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 7) [Branch (Pattern ("Prelude","[]") []) (Var 6)])])])])),Func ("TransTypes","readRule") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","ConsDecl") []]) (TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("AbstractHaskell","Rule") []])) (Rule [1] (Let [(2,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","or") [],Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("TransTypes","readRule._#lambda9") [],Comb ConsCall ("Prelude","[]") [],Var 1]]),(3,Case  Rigid (Var 2) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","(,)") [Lit (Intc  0),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude","[]") []]]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","(,)") [Lit (Intc  0),Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude","[]") []]])])] (Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("AbstractHaskellGoodies","pre") [Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]],Comb FuncCall ("TransTypes","simpleRule") [Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","PVar") [Var 3],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","PVar") [Comb ConsCall ("Prelude","(,)") [Lit (Intc  1),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Prelude","foldr1") [Comb (FuncPartCall 2) ("TransTypes","readRule._#lambda11") []],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("TransTypes","readParen") [],Var 1]]]]))),Func ("TransTypes","readRule._#lambda9") 2 Private (FuncType (TCons ("FlatCurry","ConsDecl") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Bool") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Bool") []]))) (Rule [1,2] (Case  Rigid (Var 1) [Branch (Pattern ("FlatCurry","Cons") [3,4,5,6]) (Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude",">") [Var 4,Lit (Intc  0)],Var 2])])),Func ("TransTypes","readRule._#lambda11") 2 Private (FuncType (TCons ("AbstractHaskell","Expr") []) (FuncType (TCons ("AbstractHaskell","Expr") []) (TCons ("AbstractHaskell","Expr") []))) (Rule [1,2] (Comb FuncCall ("AbstractHaskellGoodies","applyF") [Comb FuncCall ("AbstractHaskellGoodies","pre") [Comb ConsCall ("Prelude",":") [Lit (Charc  '+'),Comb ConsCall ("Prelude",":") [Lit (Charc  '+'),Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude",":") [Var 1,Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude","[]") []]]])),Func ("TransTypes","readParen") 1 Private (FuncType (TCons ("FlatCurry","ConsDecl") []) (TCons ("AbstractHaskell","Expr") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","Cons") [2,3,4,5]) (Case  Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [6,7]) (Comb FuncCall ("AbstractHaskellGoodies","applyF") [Comb FuncCall ("AbstractHaskellGoodies","pre") [Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]],Comb ConsCall ("Prelude",":") [Case  Rigid (Comb FuncCall ("Prelude","==") [Var 3,Lit (Intc  0)]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("AbstractHaskellGoodies","constF") [Comb FuncCall ("AbstractHaskellGoodies","pre") [Comb ConsCall ("Prelude",":") [Lit (Charc  'F'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("AbstractHaskellGoodies","applyF") [Comb FuncCall ("AbstractHaskellGoodies","pre") [Comb ConsCall ("Prelude",":") [Lit (Charc  '>'),Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Var") [Comb ConsCall ("Prelude","(,)") [Lit (Intc  0),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransTypes","intc") [Lit (Intc  10)],Comb ConsCall ("Prelude","[]") []]]])],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Lambda") [Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","PVar") [Comb ConsCall ("Prelude","(,)") [Lit (Intc  2),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("AbstractHaskell","ListComp") [Comb FuncCall ("AbstractHaskellGoodies","tupleExpr") [Comb ConsCall ("Prelude",":") [Comb FuncCall ("AbstractHaskellGoodies","applyF") [Var 2,Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("TransTypes","mkVar") [Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude","enumFromTo") [Lit (Intc  1),Var 3]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransTypes","mkVar") [Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude","[]") []],Var 3],Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","SPat") [Comb FuncCall ("AbstractHaskellGoodies","tuplePat") [Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","PVar") [Comb ConsCall ("Prelude","(,)") [Lit (Intc  0),Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","PVar") [Comb ConsCall ("Prelude","(,)") [Lit (Intc  1),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  '0'),Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("AbstractHaskellGoodies","applyF") [Comb FuncCall ("TransTypes","basics") [Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'Q'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("AbstractHaskellGoodies","string2ac") [Comb FuncCall ("Names","unRenameModule") [Var 6]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("AbstractHaskellGoodies","string2ac") [Comb FuncCall ("Names","unGenRename") [Comb FuncCall ("Prelude","snd") [Var 2]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Var") [Comb ConsCall ("Prelude","(,)") [Lit (Intc  2),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude","[]") []]]]]],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("TransTypes","readParen.genReadsPrec.119") [],Comb FuncCall ("Prelude","enumFromTo") [Lit (Intc  1),Var 3]]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Var") [Comb ConsCall ("Prelude","(,)") [Lit (Intc  1),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude","[]") []]]]])])])),Func ("TransTypes","readParen.genReadsPrec.119") 1 Private (FuncType (TCons ("Prelude","Int") []) (TCons ("AbstractHaskell","Statement") [])) (Rule [1] (Comb ConsCall ("AbstractHaskell","SPat") [Comb FuncCall ("AbstractHaskellGoodies","tuplePat") [Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransTypes","mkPVar") [Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude","[]") []],Var 1],Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransTypes","mkPVar") [Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude","[]") []],Var 1],Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("AbstractHaskellGoodies","applyF") [Comb FuncCall ("AbstractHaskellGoodies","pre") [Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Lit") [Comb ConsCall ("AbstractHaskell","Intc") [Lit (Intc  11)]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransTypes","mkVar") [Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","-") [Var 1,Lit (Intc  1)]],Comb ConsCall ("Prelude","[]") []]]]])),Func ("TransTypes","nondetInstance") 1 Private (FuncType (TCons ("FlatCurry","TypeDecl") []) (TCons ("AbstractHaskell","TypeDecl") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","Type") [2,3,4,5]) (Let [(6,Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("FlatCurry2AbstractHaskell","fcy2absTVar") [],Var 4]),(7,Comb ConsCall ("AbstractHaskell","TCons") [Var 2,Comb FuncCall ("Prelude","map") [Comb (ConsPartCall 1) ("AbstractHaskell","TVar") [],Var 6]])] (Comb FuncCall ("Prelude","$") [Comb FuncCall ("TransTypes","mkInstance") [Comb FuncCall ("TransTypes","basics") [Comb ConsCall ("Prelude",":") [Lit (Charc  'N'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'D'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb ConsCall ("Prelude","[]") [],Var 7,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Comb FuncCall ("TransTypes","specialConsRules") [Var 2],Comb FuncCall ("Prelude","++") [Comb FuncCall ("TransTypes","tryRules") [Var 2],Comb FuncCall ("TransTypes","matchRules") [Var 2]]]]))])),Func ("TransTypes","specialConsRules") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("AbstractHaskell","Rule") []]])) (Rule [1] (Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("TransTypes","specialConsRules.nameRule.141") [],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]],Comb FuncCall ("Names","mkChoiceName") [Var 1]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]],Comb FuncCall ("Names","mkChoicesName") [Var 1]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude","[]") []]]]]]]]],Comb FuncCall ("Names","mkFailName") [Var 1]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude","[]") []]]]]]]]]],Comb FuncCall ("Names","mkGuardName") [Var 1]],Comb ConsCall ("Prelude","[]") []]]]]])),Func ("TransTypes","specialConsRules.nameRule.141") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("AbstractHaskell","Rule") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("TransTypes","basics") [Var 2],Comb FuncCall ("TransTypes","simpleRule") [Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("AbstractHaskellGoodies","constF") [Var 3]]])])),Func ("TransTypes","tryRules") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("AbstractHaskell","Rule") []]])) (Rule [1] (Let [(2,Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Prelude","map") [Comb (ConsPartCall 1) ("AbstractHaskell","Var") []],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("TransTypes","newVars") [],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude","[]") []]]]]]]]]]]),(3,Comb FuncCall ("TransTypes","tryRules._#selFP25#i") [Var 2]),(4,Comb FuncCall ("TransTypes","tryRules._#selFP26#x") [Var 2]),(5,Comb FuncCall ("TransTypes","tryRules._#selFP27#y") [Var 2]),(6,Comb FuncCall ("TransTypes","tryRules._#selFP28#xs") [Var 2]),(7,Comb FuncCall ("TransTypes","tryRules._#selFP29#c") [Var 2]),(8,Comb FuncCall ("TransTypes","tryRules._#selFP30#e") [Var 2]),(9,Comb FuncCall ("TransTypes","tryRules._#selFP31#cd") [Var 2]),(10,Comb FuncCall ("TransTypes","tryRules._#selFP32#info") [Var 2])] (Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("TransTypes","tryRules.nameRule.145") [],Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("TransTypes","simpleRule") [Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransTypes","mkChoicePattern") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("AbstractHaskellGoodies","applyF") [Comb FuncCall ("TransTypes","basics") [Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]],Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude",":") [Var 3,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude","[]") []]]]]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("TransTypes","simpleRule") [Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransTypes","mkChoicesPattern") [Var 1],Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("AbstractHaskellGoodies","applyF") [Comb FuncCall ("TransTypes","basics") [Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]],Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude",":") [Var 3,Comb ConsCall ("Prelude",":") [Var 6,Comb ConsCall ("Prelude","[]") []]]]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("TransTypes","simpleRule") [Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransTypes","mkFailPattern") [Var 1],Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("AbstractHaskellGoodies","applyF") [Comb FuncCall ("TransTypes","basics") [Comb ConsCall ("Prelude",":") [Lit (Charc  'F'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude","[]") []]]]]],Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("TransTypes","simpleRule") [Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransTypes","mkGuardPattern") [Var 1],Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("AbstractHaskellGoodies","applyF") [Comb FuncCall ("TransTypes","basics") [Comb ConsCall ("Prelude",":") [Lit (Charc  'G'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude","[]") []]]]]]],Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude","[]") []]]]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("TransTypes","simpleRule") [Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","PVar") [Comb ConsCall ("Prelude","(,)") [Lit (Intc  2),Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("AbstractHaskellGoodies","applyF") [Comb FuncCall ("TransTypes","basics") [Comb ConsCall ("Prelude",":") [Lit (Charc  'V'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude","[]") []]]]]]]))),Func ("TransTypes","tryRules._#selFP25#i") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("AbstractHaskell","Expr") []]) (TCons ("AbstractHaskell","Expr") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 5) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case  Flex (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case  Flex (Var 11) [Branch (Pattern ("Prelude",":") [12,13]) (Case  Flex (Var 13) [Branch (Pattern ("Prelude",":") [14,15]) (Case  Flex (Var 15) [Branch (Pattern ("Prelude",":") [16,17]) (Case  Flex (Var 17) [Branch (Pattern ("Prelude","[]") []) (Var 2)])])])])])])])])])),Func ("TransTypes","tryRules._#selFP26#x") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("AbstractHaskell","Expr") []]) (TCons ("AbstractHaskell","Expr") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 5) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case  Flex (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case  Flex (Var 11) [Branch (Pattern ("Prelude",":") [12,13]) (Case  Flex (Var 13) [Branch (Pattern ("Prelude",":") [14,15]) (Case  Flex (Var 15) [Branch (Pattern ("Prelude",":") [16,17]) (Case  Flex (Var 17) [Branch (Pattern ("Prelude","[]") []) (Var 4)])])])])])])])])])),Func ("TransTypes","tryRules._#selFP27#y") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("AbstractHaskell","Expr") []]) (TCons ("AbstractHaskell","Expr") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 5) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case  Flex (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case  Flex (Var 11) [Branch (Pattern ("Prelude",":") [12,13]) (Case  Flex (Var 13) [Branch (Pattern ("Prelude",":") [14,15]) (Case  Flex (Var 15) [Branch (Pattern ("Prelude",":") [16,17]) (Case  Flex (Var 17) [Branch (Pattern ("Prelude","[]") []) (Var 6)])])])])])])])])])),Func ("TransTypes","tryRules._#selFP28#xs") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("AbstractHaskell","Expr") []]) (TCons ("AbstractHaskell","Expr") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 5) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case  Flex (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case  Flex (Var 11) [Branch (Pattern ("Prelude",":") [12,13]) (Case  Flex (Var 13) [Branch (Pattern ("Prelude",":") [14,15]) (Case  Flex (Var 15) [Branch (Pattern ("Prelude",":") [16,17]) (Case  Flex (Var 17) [Branch (Pattern ("Prelude","[]") []) (Var 8)])])])])])])])])])),Func ("TransTypes","tryRules._#selFP29#c") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("AbstractHaskell","Expr") []]) (TCons ("AbstractHaskell","Expr") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 5) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case  Flex (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case  Flex (Var 11) [Branch (Pattern ("Prelude",":") [12,13]) (Case  Flex (Var 13) [Branch (Pattern ("Prelude",":") [14,15]) (Case  Flex (Var 15) [Branch (Pattern ("Prelude",":") [16,17]) (Case  Flex (Var 17) [Branch (Pattern ("Prelude","[]") []) (Var 10)])])])])])])])])])),Func ("TransTypes","tryRules._#selFP30#e") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("AbstractHaskell","Expr") []]) (TCons ("AbstractHaskell","Expr") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 5) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case  Flex (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case  Flex (Var 11) [Branch (Pattern ("Prelude",":") [12,13]) (Case  Flex (Var 13) [Branch (Pattern ("Prelude",":") [14,15]) (Case  Flex (Var 15) [Branch (Pattern ("Prelude",":") [16,17]) (Case  Flex (Var 17) [Branch (Pattern ("Prelude","[]") []) (Var 12)])])])])])])])])])),Func ("TransTypes","tryRules._#selFP31#cd") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("AbstractHaskell","Expr") []]) (TCons ("AbstractHaskell","Expr") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 5) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case  Flex (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case  Flex (Var 11) [Branch (Pattern ("Prelude",":") [12,13]) (Case  Flex (Var 13) [Branch (Pattern ("Prelude",":") [14,15]) (Case  Flex (Var 15) [Branch (Pattern ("Prelude",":") [16,17]) (Case  Flex (Var 17) [Branch (Pattern ("Prelude","[]") []) (Var 14)])])])])])])])])])),Func ("TransTypes","tryRules._#selFP32#info") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("AbstractHaskell","Expr") []]) (TCons ("AbstractHaskell","Expr") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 5) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case  Flex (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case  Flex (Var 11) [Branch (Pattern ("Prelude",":") [12,13]) (Case  Flex (Var 13) [Branch (Pattern ("Prelude",":") [14,15]) (Case  Flex (Var 15) [Branch (Pattern ("Prelude",":") [16,17]) (Case  Flex (Var 17) [Branch (Pattern ("Prelude","[]") []) (Var 16)])])])])])])])])])),Func ("TransTypes","tryRules.nameRule.145") 1 Private (FuncType (TVar 0) (TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TVar 0])) (Rule [1] (Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("TransTypes","basics") [Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude","[]") []]]]],Var 1])),Func ("TransTypes","matchRules") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("AbstractHaskell","Rule") []]])) (Rule [1] (Let [(2,Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Prelude","map") [Comb (ConsPartCall 1) ("AbstractHaskell","PVar") []],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("TransTypes","newVars") [],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude","[]") []]]]]]]]),(3,Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Prelude","map") [Comb (ConsPartCall 1) ("AbstractHaskell","Var") []],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("TransTypes","newVars") [],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude","[]") []]]]]]]]]]]),(4,Comb FuncCall ("TransTypes","matchRules._#selFP34#i") [Var 3]),(5,Comb FuncCall ("TransTypes","matchRules._#selFP35#x") [Var 3]),(6,Comb FuncCall ("TransTypes","matchRules._#selFP36#y") [Var 3]),(7,Comb FuncCall ("TransTypes","matchRules._#selFP37#xs") [Var 3]),(8,Comb FuncCall ("TransTypes","matchRules._#selFP38#e") [Var 3]),(9,Comb FuncCall ("TransTypes","matchRules._#selFP39#c") [Var 3]),(10,Comb FuncCall ("TransTypes","matchRules._#selFP40#cd") [Var 3]),(11,Comb FuncCall ("TransTypes","matchRules._#selFP41#info") [Var 3]),(12,Comb ConsCall ("Prelude","(,)") [Lit (Intc  1),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude","[]") []]])] (Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("TransTypes","matchRules.nameRule.151") [],Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("TransTypes","simpleRule") [Comb FuncCall ("Prelude","++") [Comb FuncCall ("TransTypes","matchRules.matchAt.151") [Var 12,Var 2,Lit (Intc  0)],Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransTypes","mkChoicePattern") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("AbstractHaskellGoodies","applyV") [Var 12,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude",":") [Var 6,Comb ConsCall ("Prelude","[]") []]]]]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("TransTypes","simpleRule") [Comb FuncCall ("Prelude","++") [Comb FuncCall ("TransTypes","matchRules.matchAt.151") [Var 12,Var 2,Lit (Intc  1)],Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransTypes","mkNarrowedChoicesPattern") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("AbstractHaskellGoodies","applyV") [Var 12,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude","[]") []]]]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("TransTypes","simpleRule") [Comb FuncCall ("Prelude","++") [Comb FuncCall ("TransTypes","matchRules.matchAt.151") [Var 12,Var 2,Lit (Intc  2)],Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransTypes","mkFreeChoicesPattern") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("AbstractHaskellGoodies","applyV") [Var 12,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude","[]") []]]]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("TransTypes","simpleRule") [Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","PVar") [Comb ConsCall ("Prelude","(,)") [Lit (Intc  0),Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("Prelude","++") [Var 2,Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransTypes","mkVarChoicesPattern") [Var 1],Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("AbstractHaskellGoodies","applyF") [Comb FuncCall ("AbstractHaskellGoodies","pre") [Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude","[]") []]]]]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("AbstractHaskellGoodies","applyF") [Comb FuncCall ("AbstractHaskellGoodies","pre") [Comb ConsCall ("Prelude",":") [Lit (Charc  '+'),Comb ConsCall ("Prelude",":") [Lit (Charc  '+'),Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("AbstractHaskellGoodies","string2ac") [Comb FuncCall ("Prelude","++") [Comb FuncCall ("TransTypes","showQName") [Comb FuncCall ("Names","unRenameQName") [Var 1]],Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'I'),Comb ConsCall ("Prelude",":") [Lit (Charc  'D'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("AbstractHaskellGoodies","applyF") [Comb FuncCall ("AbstractHaskellGoodies","pre") [Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude","[]") []]]]]],Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("TransTypes","simpleRule") [Comb FuncCall ("Prelude","++") [Comb FuncCall ("TransTypes","matchRules.matchAt.151") [Var 12,Var 2,Lit (Intc  3)],Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransTypes","mkFailPattern") [Var 1],Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("AbstractHaskellGoodies","applyV") [Var 12,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("TransTypes","simpleRule") [Comb FuncCall ("Prelude","++") [Comb FuncCall ("TransTypes","matchRules.matchAt.151") [Var 12,Var 2,Lit (Intc  4)],Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransTypes","mkGuardPattern") [Var 1],Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("AbstractHaskellGoodies","applyV") [Var 12,Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude","[]") []]]]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("TransTypes","simpleRule") [Comb FuncCall ("Prelude","++") [Comb FuncCall ("TransTypes","matchRules.matchAt.151") [Var 12,Var 2,Lit (Intc  5)],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","PVar") [Comb ConsCall ("Prelude","(,)") [Lit (Intc  7),Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("AbstractHaskellGoodies","applyV") [Var 12,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude","[]") []]]]]]]]]))),Func ("TransTypes","matchRules._#selFP34#i") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("AbstractHaskell","Expr") []]) (TCons ("AbstractHaskell","Expr") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 5) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case  Flex (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case  Flex (Var 11) [Branch (Pattern ("Prelude",":") [12,13]) (Case  Flex (Var 13) [Branch (Pattern ("Prelude",":") [14,15]) (Case  Flex (Var 15) [Branch (Pattern ("Prelude",":") [16,17]) (Case  Flex (Var 17) [Branch (Pattern ("Prelude","[]") []) (Var 2)])])])])])])])])])),Func ("TransTypes","matchRules._#selFP35#x") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("AbstractHaskell","Expr") []]) (TCons ("AbstractHaskell","Expr") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 5) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case  Flex (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case  Flex (Var 11) [Branch (Pattern ("Prelude",":") [12,13]) (Case  Flex (Var 13) [Branch (Pattern ("Prelude",":") [14,15]) (Case  Flex (Var 15) [Branch (Pattern ("Prelude",":") [16,17]) (Case  Flex (Var 17) [Branch (Pattern ("Prelude","[]") []) (Var 4)])])])])])])])])])),Func ("TransTypes","matchRules._#selFP36#y") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("AbstractHaskell","Expr") []]) (TCons ("AbstractHaskell","Expr") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 5) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case  Flex (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case  Flex (Var 11) [Branch (Pattern ("Prelude",":") [12,13]) (Case  Flex (Var 13) [Branch (Pattern ("Prelude",":") [14,15]) (Case  Flex (Var 15) [Branch (Pattern ("Prelude",":") [16,17]) (Case  Flex (Var 17) [Branch (Pattern ("Prelude","[]") []) (Var 6)])])])])])])])])])),Func ("TransTypes","matchRules._#selFP37#xs") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("AbstractHaskell","Expr") []]) (TCons ("AbstractHaskell","Expr") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 5) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case  Flex (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case  Flex (Var 11) [Branch (Pattern ("Prelude",":") [12,13]) (Case  Flex (Var 13) [Branch (Pattern ("Prelude",":") [14,15]) (Case  Flex (Var 15) [Branch (Pattern ("Prelude",":") [16,17]) (Case  Flex (Var 17) [Branch (Pattern ("Prelude","[]") []) (Var 8)])])])])])])])])])),Func ("TransTypes","matchRules._#selFP38#e") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("AbstractHaskell","Expr") []]) (TCons ("AbstractHaskell","Expr") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 5) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case  Flex (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case  Flex (Var 11) [Branch (Pattern ("Prelude",":") [12,13]) (Case  Flex (Var 13) [Branch (Pattern ("Prelude",":") [14,15]) (Case  Flex (Var 15) [Branch (Pattern ("Prelude",":") [16,17]) (Case  Flex (Var 17) [Branch (Pattern ("Prelude","[]") []) (Var 10)])])])])])])])])])),Func ("TransTypes","matchRules._#selFP39#c") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("AbstractHaskell","Expr") []]) (TCons ("AbstractHaskell","Expr") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 5) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case  Flex (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case  Flex (Var 11) [Branch (Pattern ("Prelude",":") [12,13]) (Case  Flex (Var 13) [Branch (Pattern ("Prelude",":") [14,15]) (Case  Flex (Var 15) [Branch (Pattern ("Prelude",":") [16,17]) (Case  Flex (Var 17) [Branch (Pattern ("Prelude","[]") []) (Var 12)])])])])])])])])])),Func ("TransTypes","matchRules._#selFP40#cd") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("AbstractHaskell","Expr") []]) (TCons ("AbstractHaskell","Expr") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 5) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case  Flex (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case  Flex (Var 11) [Branch (Pattern ("Prelude",":") [12,13]) (Case  Flex (Var 13) [Branch (Pattern ("Prelude",":") [14,15]) (Case  Flex (Var 15) [Branch (Pattern ("Prelude",":") [16,17]) (Case  Flex (Var 17) [Branch (Pattern ("Prelude","[]") []) (Var 14)])])])])])])])])])),Func ("TransTypes","matchRules._#selFP41#info") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("AbstractHaskell","Expr") []]) (TCons ("AbstractHaskell","Expr") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 5) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case  Flex (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case  Flex (Var 11) [Branch (Pattern ("Prelude",":") [12,13]) (Case  Flex (Var 13) [Branch (Pattern ("Prelude",":") [14,15]) (Case  Flex (Var 15) [Branch (Pattern ("Prelude",":") [16,17]) (Case  Flex (Var 17) [Branch (Pattern ("Prelude","[]") []) (Var 16)])])])])])])])])])),Func ("TransTypes","matchRules.nameRule.151") 1 Private (FuncType (TVar 0) (TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TVar 0])) (Rule [1] (Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("TransTypes","basics") [Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude","[]") []]]]]]],Var 1])),Func ("TransTypes","matchRules.matchAt.151") 3 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("AbstractHaskell","Pattern") []]) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","[]") [TCons ("AbstractHaskell","Pattern") []])))) (Rule [1,2,3] (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","take") [Var 3,Var 2],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","PVar") [Var 1],Comb FuncCall ("Prelude","drop") [Var 3,Var 2]]])),Func ("TransTypes","generableInstance") 1 Private (FuncType (TCons ("FlatCurry","TypeDecl") []) (TCons ("AbstractHaskell","TypeDecl") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","Type") [2,3,4,5]) (Let [(6,Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("FlatCurry2AbstractHaskell","fcy2absTVar") [],Var 4]),(7,Comb ConsCall ("AbstractHaskell","TCons") [Var 2,Comb FuncCall ("Prelude","map") [Comb (ConsPartCall 1) ("AbstractHaskell","TVar") [],Var 6]]),(8,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("TransTypes","newVars") [],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude","[]") []]]),(9,Comb FuncCall ("TransTypes","generableInstance._#selFP43#s") [Var 8]),(10,Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("AbstractHaskellGoodies","list2ac") [],Comb FuncCall ("Prelude","map") [Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("TransTypes","intc") [],Comb FuncCall ("FlatCurryGoodies","consArity") []],Var 5]])] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("TransTypes","mkInstance") [Comb FuncCall ("TransTypes","basics") [Comb ConsCall ("Prelude",":") [Lit (Charc  'G'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'b'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]],Comb ConsCall ("Prelude","[]") [],Var 7,Var 6],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("TransTypes","basics") [Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]]]],Comb FuncCall ("TransTypes","simpleRule") [Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","PVar") [Var 9],Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("TransTypes","generableInstance.genBody.170") [Var 10,Var 5,Var 2,Comb ConsCall ("AbstractHaskell","Var") [Var 9]]]],Comb ConsCall ("Prelude","[]") []]]))])),Func ("TransTypes","generableInstance._#selFP43#s") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Var 2)])])),Func ("TransTypes","generableInstance.consArgs2gen.170") 2 Private (FuncType (TCons ("AbstractHaskell","Expr") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","[]") [TCons ("AbstractHaskell","Expr") []]))) (Rule [1,2] (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Prelude","map") [Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("AbstractHaskellGoodies","applyF") [Comb FuncCall ("TransTypes","basics") [Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]],Comb (FuncPartCall 1) ("Prelude","flip") [Comb (ConsPartCall 2) ("Prelude",":") [],Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("TransTypes","mkSuppList") [Var 2,Var 1]])),Func ("TransTypes","generableInstance.genCons.170") 2 Private (FuncType (TCons ("AbstractHaskell","Expr") []) (FuncType (TCons ("FlatCurry","ConsDecl") []) (TCons ("AbstractHaskell","Expr") []))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("FlatCurry","Cons") [3,4,5,6]) (Comb FuncCall ("AbstractHaskellGoodies","applyF") [Var 3,Comb FuncCall ("TransTypes","generableInstance.consArgs2gen.170") [Var 1,Var 4]])])),Func ("TransTypes","generableInstance.genBody.170") 4 Private (FuncType (TCons ("AbstractHaskell","Expr") []) (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","ConsDecl") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("AbstractHaskell","Expr") []) (TCons ("AbstractHaskell","Expr") []))))) (Rule [1,2,3,4] (Comb FuncCall ("AbstractHaskellGoodies","applyF") [Comb FuncCall ("Names","mkChoicesName") [Var 3],Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransTypes","defCover") [],Comb ConsCall ("Prelude",":") [Comb FuncCall ("AbstractHaskellGoodies","applyF") [Comb FuncCall ("TransTypes","basics") [Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'I'),Comb ConsCall ("Prelude",":") [Lit (Charc  'D'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb ConsCall ("Prelude",":") [Var 1,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("AbstractHaskellGoodies","list2ac") [],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("TransTypes","generableInstance.genCons.170") [Var 4],Var 2]],Comb ConsCall ("Prelude","[]") []]]]])),Func ("TransTypes","normalformInstance") 2 Private (FuncType (TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Base","HOClass") []]) (FuncType (TCons ("FlatCurry","TypeDecl") []) (TCons ("AbstractHaskell","TypeDecl") []))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("FlatCurry","Type") [3,4,5,6]) (Let [(7,Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("FlatCurry2AbstractHaskell","fcy2absTVar") [],Var 5]),(8,Comb ConsCall ("AbstractHaskell","TCons") [Var 3,Comb FuncCall ("Prelude","map") [Comb (ConsPartCall 1) ("AbstractHaskell","TVar") [],Var 7]])] (Comb FuncCall ("Prelude","$") [Comb FuncCall ("TransTypes","mkInstance") [Comb FuncCall ("TransTypes","basics") [Comb ConsCall ("Prelude",":") [Lit (Charc  'N'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'F'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]],Comb ConsCall ("Prelude","[]") [],Var 8,Var 7],Comb FuncCall ("Prelude","concat") [Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","concatMap") [Comb (FuncPartCall 1) ("TransTypes","normalformConsRule") [Var 1,Comb FuncCall ("TransTypes","basics") [Comb ConsCall ("Prelude",":") [Lit (Charc  '$'),Comb ConsCall ("Prelude",":") [Lit (Charc  '!'),Comb ConsCall ("Prelude",":") [Lit (Charc  '!'),Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude","True") []]],Var 6],Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransTypes","normalFormExtConsRules") [Var 3,Comb FuncCall ("TransTypes","basics") [Comb ConsCall ("Prelude",":") [Lit (Charc  '$'),Comb ConsCall ("Prelude",":") [Lit (Charc  '!'),Comb ConsCall ("Prelude",":") [Lit (Charc  '!'),Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("TransTypes","basics") [Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]]]],Comb FuncCall ("TransTypes","basics") [Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","concatMap") [Comb (FuncPartCall 1) ("TransTypes","normalformConsRule") [Var 1,Comb FuncCall ("TransTypes","basics") [Comb ConsCall ("Prelude",":") [Lit (Charc  '$'),Comb ConsCall ("Prelude",":") [Lit (Charc  '#'),Comb ConsCall ("Prelude",":") [Lit (Charc  '#'),Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude","True") []]],Var 6],Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransTypes","normalFormExtConsRules") [Var 3,Comb FuncCall ("TransTypes","basics") [Comb ConsCall ("Prelude",":") [Lit (Charc  '$'),Comb ConsCall ("Prelude",":") [Lit (Charc  '#'),Comb ConsCall ("Prelude",":") [Lit (Charc  '#'),Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("TransTypes","basics") [Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]],Comb FuncCall ("TransTypes","basics") [Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","concatMap") [Comb (FuncPartCall 1) ("TransTypes","searchNFConsRule") [Var 1]],Var 6],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransTypes","searchNFCatchRule") [Var 3],Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude","[]") []]]]]]]]]))])),Func ("TransTypes","normalformConsRule") 4 Private (FuncType (TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Base","HOClass") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("FlatCurry","ConsDecl") []) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("AbstractHaskell","Rule") []]]))))) (Rule [1,2,3,4] (Case  Flex (Var 4) [Branch (Pattern ("FlatCurry","Cons") [5,6,7,8]) (Let [(9,Comb FuncCall ("Prelude","==") [Comb FuncCall ("FiniteMap","lookupFM") [Var 1,Var 5],Comb ConsCall ("Prelude","Just") [Comb ConsCall ("Base","HO") []]]),(10,Comb FuncCall ("Prelude","length") [Var 8]),(11,Case  Rigid (Var 3) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","PVar") [Comb ConsCall ("Prelude","(,)") [Lit (Intc  3),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","[]") [])]),(12,Case  Rigid (Var 3) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Var") [Comb ConsCall ("Prelude","(,)") [Lit (Intc  3),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","[]") [])])] (Case  Rigid (Var 9) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("TransTypes","normalformConsRule.rule.191") [Var 10,Var 11,Var 12,Var 2],Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude",":") [Comb FuncCall ("Names","mkHoConsName") [Var 5],Comb ConsCall ("Prelude","[]") []]]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransTypes","normalformConsRule.rule.191") [Var 10,Var 11,Var 12,Var 2,Var 5],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])]))])),Func ("TransTypes","normalformConsRule.nfBody.191") 5 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("AbstractHaskell","Pattern") []]) (FuncType (TCons ("Prelude","[]") [TCons ("AbstractHaskell","Expr") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("AbstractHaskell","Expr") [])))))) (Rule [1,2,3,4,5] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("TransTypes","normalformConsRule.nfBody.191._#lambda13") [Var 2,Var 3,Var 4],Comb FuncCall ("AbstractHaskellGoodies","applyV") [Comb ConsCall ("Prelude","(,)") [Lit (Intc  1),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude","[]") []]]]]],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Comb FuncCall ("AbstractHaskellGoodies","applyF") [Var 5,Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("TransTypes","normalformConsRule.nfBody.191._#lambda14") [],Comb FuncCall ("Prelude","enumFromTo") [Lit (Intc  1),Var 1]]],Comb ConsCall ("Prelude","[]") []],Var 3]],Comb FuncCall ("Prelude","enumFromTo") [Lit (Intc  1),Var 1]])),Func ("TransTypes","normalformConsRule.nfBody.191._#lambda13") 5 Private (FuncType (TCons ("Prelude","[]") [TCons ("AbstractHaskell","Pattern") []]) (FuncType (TCons ("Prelude","[]") [TCons ("AbstractHaskell","Expr") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("AbstractHaskell","Expr") []) (TCons ("AbstractHaskell","Expr") [])))))) (Rule [1,2,3,4,5] (Comb FuncCall ("AbstractHaskellGoodies","applyF") [Var 3,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Lambda") [Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","PVar") [Comb ConsCall ("Prelude","(,)") [Var 4,Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb FuncCall ("Prelude","show") [Var 4]]]],Comb ConsCall ("Prelude","[]") []],Var 1],Var 5],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Var") [Comb ConsCall ("Prelude","(,)") [Var 4,Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb FuncCall ("Prelude","show") [Var 4]]]],Comb ConsCall ("Prelude","[]") []]],Var 2]])),Func ("TransTypes","normalformConsRule.nfBody.191._#lambda14") 1 Private (FuncType (TCons ("Prelude","Int") []) (TCons ("AbstractHaskell","Expr") [])) (Rule [1] (Comb ConsCall ("AbstractHaskell","Var") [Comb ConsCall ("Prelude","(,)") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb FuncCall ("Prelude","show") [Var 1]]]])),Func ("TransTypes","normalformConsRule.rule.191") 5 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("AbstractHaskell","Pattern") []]) (FuncType (TCons ("Prelude","[]") [TCons ("AbstractHaskell","Expr") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("AbstractHaskell","Rule") []])))))) (Rule [1,2,3,4,5] (Comb ConsCall ("Prelude","(,)") [Var 4,Comb FuncCall ("TransTypes","simpleRule") [Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","PVar") [Comb ConsCall ("Prelude","(,)") [Lit (Intc  1),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude","[]") []]]]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","PComb") [Var 5,Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("TransTypes","normalformConsRule.rule.191._#lambda12") [],Comb FuncCall ("Prelude","enumFromTo") [Lit (Intc  1),Var 1]]],Comb ConsCall ("Prelude","[]") []]],Var 2],Comb FuncCall ("TransTypes","normalformConsRule.nfBody.191") [Var 1,Var 2,Var 3,Var 4,Var 5]]])),Func ("TransTypes","normalformConsRule.rule.191._#lambda12") 1 Private (FuncType (TCons ("Prelude","Int") []) (TCons ("AbstractHaskell","Pattern") [])) (Rule [1] (Comb ConsCall ("AbstractHaskell","PVar") [Comb ConsCall ("Prelude","(,)") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb FuncCall ("Prelude","show") [Var 1]]]])),Func ("TransTypes","normalFormExtConsRules") 4 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("AbstractHaskell","Rule") []]]))))) (Rule [1,2,3,4] (Let [(5,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("TransTypes","newVars") [],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]),(6,Comb FuncCall ("TransTypes","normalFormExtConsRules._#selFP45#info") [Var 5]),(7,Comb FuncCall ("TransTypes","normalFormExtConsRules._#selFP46#c") [Var 5]),(8,Comb FuncCall ("TransTypes","normalFormExtConsRules._#selFP47#cs") [Var 5]),(9,Comb FuncCall ("TransTypes","normalFormExtConsRules._#selFP48#cd") [Var 5]),(10,Comb FuncCall ("TransTypes","normalFormExtConsRules._#selFP49#cont") [Var 5]),(11,Comb FuncCall ("TransTypes","normalFormExtConsRules._#selFP50#i") [Var 5]),(12,Comb FuncCall ("TransTypes","normalFormExtConsRules._#selFP51#x") [Var 5]),(13,Comb FuncCall ("TransTypes","normalFormExtConsRules._#selFP52#y") [Var 5]),(14,Comb FuncCall ("TransTypes","normalFormExtConsRules._#selFP53#e") [Var 5]),(15,Comb FuncCall ("TransTypes","normalFormExtConsRules._#selFP54#xs") [Var 5]),(16,Comb FuncCall ("TransTypes","normalFormExtConsRules._#selFP55#us") [Var 5])] (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Var 2,Comb FuncCall ("TransTypes","simpleRule") [Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","PVar") [Var 10],Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransTypes","mkChoicePattern") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","PVar") [Var 8],Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("AbstractHaskellGoodies","applyF") [Var 3,Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Var") [Var 10],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Var") [Var 9],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Var") [Var 11],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Var") [Var 12],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Var") [Var 13],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Var") [Var 8],Comb ConsCall ("Prelude","[]") []]]]]]]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Var 2,Comb FuncCall ("TransTypes","simpleRule") [Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","PVar") [Var 10],Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransTypes","mkChoicesPattern") [Var 1],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","PVar") [Var 8],Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("AbstractHaskellGoodies","applyF") [Var 4,Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Var") [Var 10],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Var") [Var 9],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Var") [Var 11],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Var") [Var 15],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Var") [Var 8],Comb ConsCall ("Prelude","[]") []]]]]]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Var 2,Comb FuncCall ("TransTypes","simpleRule") [Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","PVar") [Var 10],Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransTypes","mkGuardPattern") [Var 1],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","PVar") [Var 8],Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("AbstractHaskellGoodies","applyF") [Comb FuncCall ("TransTypes","basics") [Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Var") [Var 9],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Var") [Var 7],Comb ConsCall ("Prelude",":") [Comb FuncCall ("AbstractHaskellGoodies","applyF") [Var 2,Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Var") [Var 10],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Var") [Var 14],Comb ConsCall ("Prelude",":") [Comb FuncCall ("AbstractHaskellGoodies","applyF") [Comb FuncCall ("TransTypes","basics") [Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude","[]") []]]]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Var") [Var 7],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Var") [Var 8],Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude","[]") []]]]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Var 2,Comb FuncCall ("TransTypes","simpleRule") [Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","PVar") [Var 16],Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransTypes","mkFailPattern") [Var 1],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","PVar") [Var 16],Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("AbstractHaskellGoodies","applyF") [Comb FuncCall ("TransTypes","basics") [Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude","[]") []]]]]]]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Var") [Var 9],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Var") [Var 6],Comb ConsCall ("Prelude","[]") []]]]]],Comb ConsCall ("Prelude","[]") []]]]]))),Func ("TransTypes","normalFormExtConsRules._#selFP45#info") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 5) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case  Flex (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case  Flex (Var 11) [Branch (Pattern ("Prelude",":") [12,13]) (Case  Flex (Var 13) [Branch (Pattern ("Prelude",":") [14,15]) (Case  Flex (Var 15) [Branch (Pattern ("Prelude",":") [16,17]) (Case  Flex (Var 17) [Branch (Pattern ("Prelude",":") [18,19]) (Case  Flex (Var 19) [Branch (Pattern ("Prelude",":") [20,21]) (Case  Flex (Var 21) [Branch (Pattern ("Prelude",":") [22,23]) (Case  Flex (Var 23) [Branch (Pattern ("Prelude","[]") []) (Var 2)])])])])])])])])])])])])),Func ("TransTypes","normalFormExtConsRules._#selFP46#c") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 5) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case  Flex (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case  Flex (Var 11) [Branch (Pattern ("Prelude",":") [12,13]) (Case  Flex (Var 13) [Branch (Pattern ("Prelude",":") [14,15]) (Case  Flex (Var 15) [Branch (Pattern ("Prelude",":") [16,17]) (Case  Flex (Var 17) [Branch (Pattern ("Prelude",":") [18,19]) (Case  Flex (Var 19) [Branch (Pattern ("Prelude",":") [20,21]) (Case  Flex (Var 21) [Branch (Pattern ("Prelude",":") [22,23]) (Case  Flex (Var 23) [Branch (Pattern ("Prelude","[]") []) (Var 4)])])])])])])])])])])])])),Func ("TransTypes","normalFormExtConsRules._#selFP47#cs") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 5) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case  Flex (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case  Flex (Var 11) [Branch (Pattern ("Prelude",":") [12,13]) (Case  Flex (Var 13) [Branch (Pattern ("Prelude",":") [14,15]) (Case  Flex (Var 15) [Branch (Pattern ("Prelude",":") [16,17]) (Case  Flex (Var 17) [Branch (Pattern ("Prelude",":") [18,19]) (Case  Flex (Var 19) [Branch (Pattern ("Prelude",":") [20,21]) (Case  Flex (Var 21) [Branch (Pattern ("Prelude",":") [22,23]) (Case  Flex (Var 23) [Branch (Pattern ("Prelude","[]") []) (Var 6)])])])])])])])])])])])])),Func ("TransTypes","normalFormExtConsRules._#selFP48#cd") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 5) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case  Flex (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case  Flex (Var 11) [Branch (Pattern ("Prelude",":") [12,13]) (Case  Flex (Var 13) [Branch (Pattern ("Prelude",":") [14,15]) (Case  Flex (Var 15) [Branch (Pattern ("Prelude",":") [16,17]) (Case  Flex (Var 17) [Branch (Pattern ("Prelude",":") [18,19]) (Case  Flex (Var 19) [Branch (Pattern ("Prelude",":") [20,21]) (Case  Flex (Var 21) [Branch (Pattern ("Prelude",":") [22,23]) (Case  Flex (Var 23) [Branch (Pattern ("Prelude","[]") []) (Var 8)])])])])])])])])])])])])),Func ("TransTypes","normalFormExtConsRules._#selFP49#cont") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 5) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case  Flex (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case  Flex (Var 11) [Branch (Pattern ("Prelude",":") [12,13]) (Case  Flex (Var 13) [Branch (Pattern ("Prelude",":") [14,15]) (Case  Flex (Var 15) [Branch (Pattern ("Prelude",":") [16,17]) (Case  Flex (Var 17) [Branch (Pattern ("Prelude",":") [18,19]) (Case  Flex (Var 19) [Branch (Pattern ("Prelude",":") [20,21]) (Case  Flex (Var 21) [Branch (Pattern ("Prelude",":") [22,23]) (Case  Flex (Var 23) [Branch (Pattern ("Prelude","[]") []) (Var 10)])])])])])])])])])])])])),Func ("TransTypes","normalFormExtConsRules._#selFP50#i") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 5) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case  Flex (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case  Flex (Var 11) [Branch (Pattern ("Prelude",":") [12,13]) (Case  Flex (Var 13) [Branch (Pattern ("Prelude",":") [14,15]) (Case  Flex (Var 15) [Branch (Pattern ("Prelude",":") [16,17]) (Case  Flex (Var 17) [Branch (Pattern ("Prelude",":") [18,19]) (Case  Flex (Var 19) [Branch (Pattern ("Prelude",":") [20,21]) (Case  Flex (Var 21) [Branch (Pattern ("Prelude",":") [22,23]) (Case  Flex (Var 23) [Branch (Pattern ("Prelude","[]") []) (Var 12)])])])])])])])])])])])])),Func ("TransTypes","normalFormExtConsRules._#selFP51#x") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 5) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case  Flex (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case  Flex (Var 11) [Branch (Pattern ("Prelude",":") [12,13]) (Case  Flex (Var 13) [Branch (Pattern ("Prelude",":") [14,15]) (Case  Flex (Var 15) [Branch (Pattern ("Prelude",":") [16,17]) (Case  Flex (Var 17) [Branch (Pattern ("Prelude",":") [18,19]) (Case  Flex (Var 19) [Branch (Pattern ("Prelude",":") [20,21]) (Case  Flex (Var 21) [Branch (Pattern ("Prelude",":") [22,23]) (Case  Flex (Var 23) [Branch (Pattern ("Prelude","[]") []) (Var 14)])])])])])])])])])])])])),Func ("TransTypes","normalFormExtConsRules._#selFP52#y") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 5) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case  Flex (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case  Flex (Var 11) [Branch (Pattern ("Prelude",":") [12,13]) (Case  Flex (Var 13) [Branch (Pattern ("Prelude",":") [14,15]) (Case  Flex (Var 15) [Branch (Pattern ("Prelude",":") [16,17]) (Case  Flex (Var 17) [Branch (Pattern ("Prelude",":") [18,19]) (Case  Flex (Var 19) [Branch (Pattern ("Prelude",":") [20,21]) (Case  Flex (Var 21) [Branch (Pattern ("Prelude",":") [22,23]) (Case  Flex (Var 23) [Branch (Pattern ("Prelude","[]") []) (Var 16)])])])])])])])])])])])])),Func ("TransTypes","normalFormExtConsRules._#selFP53#e") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 5) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case  Flex (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case  Flex (Var 11) [Branch (Pattern ("Prelude",":") [12,13]) (Case  Flex (Var 13) [Branch (Pattern ("Prelude",":") [14,15]) (Case  Flex (Var 15) [Branch (Pattern ("Prelude",":") [16,17]) (Case  Flex (Var 17) [Branch (Pattern ("Prelude",":") [18,19]) (Case  Flex (Var 19) [Branch (Pattern ("Prelude",":") [20,21]) (Case  Flex (Var 21) [Branch (Pattern ("Prelude",":") [22,23]) (Case  Flex (Var 23) [Branch (Pattern ("Prelude","[]") []) (Var 18)])])])])])])])])])])])])),Func ("TransTypes","normalFormExtConsRules._#selFP54#xs") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 5) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case  Flex (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case  Flex (Var 11) [Branch (Pattern ("Prelude",":") [12,13]) (Case  Flex (Var 13) [Branch (Pattern ("Prelude",":") [14,15]) (Case  Flex (Var 15) [Branch (Pattern ("Prelude",":") [16,17]) (Case  Flex (Var 17) [Branch (Pattern ("Prelude",":") [18,19]) (Case  Flex (Var 19) [Branch (Pattern ("Prelude",":") [20,21]) (Case  Flex (Var 21) [Branch (Pattern ("Prelude",":") [22,23]) (Case  Flex (Var 23) [Branch (Pattern ("Prelude","[]") []) (Var 20)])])])])])])])])])])])])),Func ("TransTypes","normalFormExtConsRules._#selFP55#us") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 5) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case  Flex (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case  Flex (Var 11) [Branch (Pattern ("Prelude",":") [12,13]) (Case  Flex (Var 13) [Branch (Pattern ("Prelude",":") [14,15]) (Case  Flex (Var 15) [Branch (Pattern ("Prelude",":") [16,17]) (Case  Flex (Var 17) [Branch (Pattern ("Prelude",":") [18,19]) (Case  Flex (Var 19) [Branch (Pattern ("Prelude",":") [20,21]) (Case  Flex (Var 21) [Branch (Pattern ("Prelude",":") [22,23]) (Case  Flex (Var 23) [Branch (Pattern ("Prelude","[]") []) (Var 22)])])])])])])])])])])])])),Func ("TransTypes","searchNFConsRule") 2 Private (FuncType (TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Base","HOClass") []]) (FuncType (TCons ("FlatCurry","ConsDecl") []) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("AbstractHaskell","Rule") []]]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("FlatCurry","Cons") [3,4,5,6]) (Let [(7,Comb FuncCall ("Prelude","==") [Comb FuncCall ("FiniteMap","lookupFM") [Var 1,Var 3],Comb ConsCall ("Prelude","Just") [Comb ConsCall ("Base","HO") []]]),(8,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("TransTypes","newVars") [],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude","[]") []]]]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude","[]") []]]]]),(9,Comb FuncCall ("TransTypes","searchNFConsRule._#selFP57#search") [Var 8]),(10,Comb FuncCall ("TransTypes","searchNFConsRule._#selFP58#cont") [Var 8]),(11,Comb FuncCall ("TransTypes","searchNFConsRule._#selFP59#us") [Var 8]),(12,Case  Rigid (Comb FuncCall ("Prelude","==") [Var 4,Lit (Intc  0)]) [Branch (Pattern ("Prelude","True") []) (Var 11),Branch (Pattern ("Prelude","False") []) (Var 9)])] (Case  Rigid (Var 7) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("TransTypes","searchNFConsRule.rule.216") [Var 4,Var 10,Var 12,Var 9],Comb ConsCall ("Prelude",":") [Var 3,Comb ConsCall ("Prelude",":") [Comb FuncCall ("Names","mkHoConsName") [Var 3],Comb ConsCall ("Prelude","[]") []]]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransTypes","searchNFConsRule.rule.216") [Var 4,Var 10,Var 12,Var 9,Var 3],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])]))])),Func ("TransTypes","searchNFConsRule._#selFP57#search") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 5) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 7) [Branch (Pattern ("Prelude","[]") []) (Var 2)])])])])),Func ("TransTypes","searchNFConsRule._#selFP58#cont") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 5) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 7) [Branch (Pattern ("Prelude","[]") []) (Var 4)])])])])),Func ("TransTypes","searchNFConsRule._#selFP59#us") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 5) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 7) [Branch (Pattern ("Prelude","[]") []) (Var 6)])])])])),Func ("TransTypes","searchNFConsRule.nfBody.216") 4 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("AbstractHaskell","Expr") []))))) (Rule [1,2,3,4] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("TransTypes","searchNFConsRule.nfBody.216._#lambda15") [Var 3],Comb FuncCall ("AbstractHaskellGoodies","applyV") [Var 2,Comb ConsCall ("Prelude",":") [Comb FuncCall ("AbstractHaskellGoodies","applyF") [Var 4,Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("TransTypes","mkVar") [Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude","enumFromTo") [Lit (Intc  1),Var 1]]],Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude","enumFromTo") [Lit (Intc  1),Var 1]])),Func ("TransTypes","searchNFConsRule.nfBody.216._#lambda15") 3 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("AbstractHaskell","Expr") []) (TCons ("AbstractHaskell","Expr") [])))) (Rule [1,2,3] (Comb FuncCall ("AbstractHaskellGoodies","applyV") [Var 1,Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Lambda") [Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransTypes","mkPVar") [Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude","[]") []],Var 2],Comb ConsCall ("Prelude","[]") []],Var 3],Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransTypes","mkVar") [Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude","[]") []],Var 2],Comb ConsCall ("Prelude","[]") []]]])),Func ("TransTypes","searchNFConsRule.rule.216") 5 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("AbstractHaskell","Rule") []])))))) (Rule [1,2,3,4,5] (Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("TransTypes","basics") [Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'N'),Comb ConsCall ("Prelude",":") [Lit (Charc  'F'),Comb ConsCall ("Prelude","[]") []]]]]]]]]],Comb FuncCall ("TransTypes","simpleRule") [Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","PVar") [Var 3],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","PVar") [Var 2],Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransTypes","consPattern") [Var 5,Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude","[]") []],Var 1],Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("TransTypes","searchNFConsRule.nfBody.216") [Var 1,Var 2,Var 4,Var 5]]])),Func ("TransTypes","searchNFCatchRule") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("AbstractHaskell","Rule") []])) (Rule [1] (Let [(2,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("TransTypes","newVars") [],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude","[]") []]]]]),(3,Comb FuncCall ("TransTypes","searchNFCatchRule._#selFP61#us1") [Var 2]),(4,Comb FuncCall ("TransTypes","searchNFCatchRule._#selFP62#us2") [Var 2]),(5,Comb FuncCall ("TransTypes","searchNFCatchRule._#selFP63#x") [Var 2])] (Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("TransTypes","basics") [Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'N'),Comb ConsCall ("Prelude",":") [Lit (Charc  'F'),Comb ConsCall ("Prelude","[]") []]]]]]]]]],Comb FuncCall ("TransTypes","simpleRule") [Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","PVar") [Var 3],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","PVar") [Var 4],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","PVar") [Var 5],Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("AbstractHaskellGoodies","applyF") [Comb FuncCall ("AbstractHaskellGoodies","pre") [Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude","[]") []]]]]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("AbstractHaskellGoodies","applyF") [Comb FuncCall ("AbstractHaskellGoodies","pre") [Comb ConsCall ("Prelude",":") [Lit (Charc  '+'),Comb ConsCall ("Prelude",":") [Lit (Charc  '+'),Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("AbstractHaskellGoodies","string2ac") [Comb FuncCall ("Prelude","++") [Comb FuncCall ("TransTypes","showQName") [Comb FuncCall ("Names","unRenameQName") [Var 1]],Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'N'),Comb ConsCall ("Prelude",":") [Lit (Charc  'F'),Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("AbstractHaskellGoodies","applyF") [Comb FuncCall ("AbstractHaskellGoodies","pre") [Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude","[]") []]]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Var") [Var 5],Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude","[]") []]]]]))),Func ("TransTypes","searchNFCatchRule._#selFP61#us1") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 5) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 7) [Branch (Pattern ("Prelude","[]") []) (Var 2)])])])])),Func ("TransTypes","searchNFCatchRule._#selFP62#us2") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 5) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 7) [Branch (Pattern ("Prelude","[]") []) (Var 4)])])])])),Func ("TransTypes","searchNFCatchRule._#selFP63#x") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 5) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 7) [Branch (Pattern ("Prelude","[]") []) (Var 6)])])])])),Func ("TransTypes","unifiableInstance") 2 Private (FuncType (TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Base","HOClass") []]) (FuncType (TCons ("FlatCurry","TypeDecl") []) (TCons ("AbstractHaskell","TypeDecl") []))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("FlatCurry","Type") [3,4,5,6]) (Let [(7,Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("FlatCurry2AbstractHaskell","fcy2absTVar") [],Var 5]),(8,Comb ConsCall ("AbstractHaskell","TCons") [Var 3,Comb FuncCall ("Prelude","map") [Comb (ConsPartCall 1) ("AbstractHaskell","TVar") [],Var 7]]),(9,Comb FuncCall ("AbstractHaskellGoodies","applyF") [Comb FuncCall ("TransTypes","basics") [Comb ConsCall ("Prelude",":") [Lit (Charc  'F'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude",":") [Lit (Charc  'S'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransTypes","defCover") [],Comb ConsCall ("Prelude",":") [Comb FuncCall ("AbstractHaskellGoodies","applyF") [Comb FuncCall ("TransTypes","basics") [Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'F'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'I'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]],Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude","[]") []]]])] (Comb FuncCall ("Prelude","$") [Comb FuncCall ("TransTypes","mkInstance") [Comb FuncCall ("TransTypes","basics") [Comb ConsCall ("Prelude",":") [Lit (Charc  'U'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'b'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]],Comb ConsCall ("Prelude","[]") [],Var 8,Var 7],Comb FuncCall ("Prelude","concat") [Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","concatMap") [Comb (FuncPartCall 1) ("TransTypes","unifiableConsRule") [Var 1,Comb FuncCall ("TransTypes","basics") [Comb ConsCall ("Prelude",":") [Lit (Charc  '='),Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude",":") [Lit (Charc  '='),Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("TransTypes","basics") [Comb ConsCall ("Prelude",":") [Lit (Charc  '='),Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude",":") [Lit (Charc  '='),Comb ConsCall ("Prelude","[]") []]]]]]],Var 6],Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransTypes","catchAllCase") [Comb FuncCall ("TransTypes","basics") [Comb ConsCall ("Prelude",":") [Lit (Charc  '='),Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude",":") [Lit (Charc  '='),Comb ConsCall ("Prelude","[]") []]]]],Var 9],Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","concatMap") [Comb (FuncPartCall 1) ("TransTypes","unifiableConsRule") [Var 1,Comb FuncCall ("TransTypes","basics") [Comb ConsCall ("Prelude",":") [Lit (Charc  '='),Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude",":") [Lit (Charc  '<'),Comb ConsCall ("Prelude",":") [Lit (Charc  '='),Comb ConsCall ("Prelude","[]") []]]]]],Comb FuncCall ("TransTypes","basics") [Comb ConsCall ("Prelude",":") [Lit (Charc  '='),Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude",":") [Lit (Charc  '<'),Comb ConsCall ("Prelude",":") [Lit (Charc  '='),Comb ConsCall ("Prelude","[]") []]]]]]]],Var 6],Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransTypes","catchAllCase") [Comb FuncCall ("TransTypes","basics") [Comb ConsCall ("Prelude",":") [Lit (Charc  '='),Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude",":") [Lit (Charc  '<'),Comb ConsCall ("Prelude",":") [Lit (Charc  '='),Comb ConsCall ("Prelude","[]") []]]]]],Var 9],Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","concatMap") [Comb (FuncPartCall 1) ("TransTypes","bindConsRule") [Var 1,Comb FuncCall ("TransTypes","basics") [Comb ConsCall ("Prelude",":") [Lit (Charc  'b'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude","[]") []]]]]],Comb (FuncPartCall 2) ("TransTypes","unifiableInstance._#lambda16") [],Comb (FuncPartCall 1) ("AbstractHaskellGoodies","applyF") [Comb FuncCall ("AbstractHaskellGoodies","pre") [Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]],Comb FuncCall ("Prelude","zip") [Comb FuncCall ("Prelude","enumFrom") [Lit (Intc  0)],Var 6]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransTypes","bindChoiceRule") [Var 3,Comb FuncCall ("TransTypes","basics") [Comb ConsCall ("Prelude",":") [Lit (Charc  'b'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude","[]") []]]]]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransTypes","bindFreeRule") [Var 3,Comb FuncCall ("TransTypes","basics") [Comb ConsCall ("Prelude",":") [Lit (Charc  'b'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude","[]") []]]]]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransTypes","bindNarrowedRule") [Var 3,Comb FuncCall ("TransTypes","basics") [Comb ConsCall ("Prelude",":") [Lit (Charc  'b'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude","[]") []]]]]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransTypes","bindChoicesRule") [Var 3,Comb FuncCall ("TransTypes","basics") [Comb ConsCall ("Prelude",":") [Lit (Charc  'b'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude","[]") []]]]]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransTypes","bindFailRule") [Var 3,Comb FuncCall ("TransTypes","basics") [Comb ConsCall ("Prelude",":") [Lit (Charc  'b'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude","[]") []]]]]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransTypes","bindGuardRule") [Var 3,Comb ConsCall ("Prelude","False") []],Comb ConsCall ("Prelude","[]") []]]]]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","concatMap") [Comb (FuncPartCall 1) ("TransTypes","bindConsRule") [Var 1,Comb FuncCall ("TransTypes","basics") [Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'z'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  'B'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude","[]") []]]]]]]]]],Comb (FuncPartCall 2) ("TransTypes","unifiableInstance._#lambda17") [],Comb (FuncPartCall 1) ("Prelude","head") []]],Comb FuncCall ("Prelude","zip") [Comb FuncCall ("Prelude","enumFrom") [Lit (Intc  0)],Var 6]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransTypes","bindChoiceRule") [Var 3,Comb FuncCall ("TransTypes","basics") [Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'z'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  'B'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransTypes","bindFreeRule") [Var 3,Comb FuncCall ("TransTypes","basics") [Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'z'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  'B'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransTypes","bindNarrowedRule") [Var 3,Comb FuncCall ("TransTypes","basics") [Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'z'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  'B'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransTypes","bindChoicesRule") [Var 3,Comb FuncCall ("TransTypes","basics") [Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'z'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  'B'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransTypes","bindFailRule") [Var 3,Comb FuncCall ("TransTypes","basics") [Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'z'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  'B'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransTypes","bindGuardRule") [Var 3,Comb ConsCall ("Prelude","True") []],Comb ConsCall ("Prelude","[]") []]]]]]],Comb ConsCall ("Prelude","[]") []]]]]]]]]]]))])),Func ("TransTypes","unifiableInstance._#lambda16") 2 Private (FuncType (TCons ("AbstractHaskell","Expr") []) (FuncType (TCons ("AbstractHaskell","Expr") []) (TCons ("AbstractHaskell","Expr") []))) (Rule [1,2] (Comb FuncCall ("AbstractHaskellGoodies","applyF") [Comb FuncCall ("TransTypes","basics") [Comb ConsCall ("Prelude",":") [Lit (Charc  'b'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude","[]") []]]]]],Comb ConsCall ("Prelude",":") [Var 1,Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude","[]") []]]])),Func ("TransTypes","unifiableInstance._#lambda17") 2 Private (FuncType (TCons ("AbstractHaskell","Expr") []) (FuncType (TCons ("AbstractHaskell","Expr") []) (TCons ("AbstractHaskell","Expr") []))) (Rule [1,2] (Comb FuncCall ("AbstractHaskellGoodies","applyF") [Comb FuncCall ("TransTypes","basics") [Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude",":") [Lit (Charc  '='),Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude",":") [Var 1,Comb ConsCall ("Prelude",":") [Comb FuncCall ("AbstractHaskellGoodies","applyF") [Comb FuncCall ("TransTypes","basics") [Comb ConsCall ("Prelude",":") [Lit (Charc  'L'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'z'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  'B'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude","[]") []]]]]]]]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("AbstractHaskellGoodies","applyF") [Comb FuncCall ("TransTypes","basics") [Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'z'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  'B'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude","[]") []]]]]]]]]],Comb ConsCall ("Prelude",":") [Var 1,Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude","[]") []]]])),Func ("TransTypes","unifiableConsRule") 4 Private (FuncType (TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Base","HOClass") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("FlatCurry","ConsDecl") []) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("AbstractHaskell","Rule") []]]))))) (Rule [1,2,3,4] (Case  Flex (Var 4) [Branch (Pattern ("FlatCurry","Cons") [5,6,7,8]) (Let [(9,Comb FuncCall ("Prelude","==") [Comb FuncCall ("FiniteMap","lookupFM") [Var 1,Var 5],Comb ConsCall ("Prelude","Just") [Comb ConsCall ("Base","HO") []]]),(10,Comb FuncCall ("Prelude","length") [Var 8]),(11,Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Prelude","+") [Var 10,Lit (Intc  1)],Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude","[]") []]]])] (Case  Rigid (Var 9) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("TransTypes","unifiableConsRule.rule.244") [Var 10,Var 2,Var 11,Var 3],Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude",":") [Comb FuncCall ("Names","mkHoConsName") [Var 5],Comb ConsCall ("Prelude","[]") []]]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransTypes","unifiableConsRule.rule.244") [Var 10,Var 2,Var 11,Var 3,Var 5],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])]))])),Func ("TransTypes","unifiableConsRule.unifBody.244") 3 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("AbstractHaskell","Expr") [])))) (Rule [1,2,3] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 1,Lit (Intc  0)]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("AbstractHaskellGoodies","constF") [Comb FuncCall ("TransTypes","basics") [Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude",":") [Lit (Charc  'S'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","foldr1") [Comb (FuncPartCall 2) ("TransTypes","unifiableConsRule.unifBody.244._#lambda18") [Var 2],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("TransTypes","unifiableConsRule.unifBody.244._#lambda19") [Var 2,Var 3],Comb FuncCall ("Prelude","enumFromTo") [Lit (Intc  1),Var 1]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])),Func ("TransTypes","unifiableConsRule.unifBody.244._#lambda18") 3 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("AbstractHaskell","Expr") []) (FuncType (TCons ("AbstractHaskell","Expr") []) (TCons ("AbstractHaskell","Expr") [])))) (Rule [1,2,3] (Comb FuncCall ("AbstractHaskellGoodies","applyF") [Comb FuncCall ("TransTypes","basics") [Comb ConsCall ("Prelude",":") [Lit (Charc  '&'),Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude",":") [Var 3,Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Var") [Var 1],Comb ConsCall ("Prelude","[]") []]]]])),Func ("TransTypes","unifiableConsRule.unifBody.244._#lambda19") 3 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","Int") []) (TCons ("AbstractHaskell","Expr") [])))) (Rule [1,2,3] (Comb FuncCall ("AbstractHaskellGoodies","applyF") [Var 2,Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Var") [Comb ConsCall ("Prelude","(,)") [Var 3,Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb FuncCall ("Prelude","show") [Var 3]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Var") [Comb ConsCall ("Prelude","(,)") [Var 3,Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb FuncCall ("Prelude","show") [Var 3]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Var") [Var 1],Comb ConsCall ("Prelude","[]") []]]]])),Func ("TransTypes","unifiableConsRule.rule.244") 5 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("AbstractHaskell","Rule") []])))))) (Rule [1,2,3,4,5] (Comb ConsCall ("Prelude","(,)") [Var 2,Comb FuncCall ("TransTypes","simpleRule") [Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransTypes","consPattern") [Var 5,Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude","[]") []],Var 1],Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransTypes","consPattern") [Var 5,Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude","[]") []],Var 1],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","PVar") [Var 3],Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("TransTypes","unifiableConsRule.unifBody.244") [Var 1,Var 3,Var 4]]])),Func ("TransTypes","bindConsRule") 5 Private (FuncType (TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Base","HOClass") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (FuncType (TCons ("AbstractHaskell","Expr") []) (FuncType (TCons ("AbstractHaskell","Expr") []) (TCons ("AbstractHaskell","Expr") []))) (FuncType (FuncType (TCons ("Prelude","[]") [TCons ("AbstractHaskell","Expr") []]) (TCons ("AbstractHaskell","Expr") [])) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","ConsDecl") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("AbstractHaskell","Rule") []]])))))) (Rule [1,2,3,4,5] (Case  Flex (Var 5) [Branch (Pattern ("Prelude","(,)") [6,7]) (Case  Flex (Var 7) [Branch (Pattern ("FlatCurry","Cons") [8,9,10,11]) (Let [(12,Comb FuncCall ("Prelude","==") [Comb FuncCall ("FiniteMap","lookupFM") [Var 1,Var 8],Comb ConsCall ("Prelude","Just") [Comb ConsCall ("Base","HO") []]])] (Case  Rigid (Var 12) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("TransTypes","bindConsRule.rule.260") [Var 3,Var 4,Var 2,Var 6,Var 11],Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude",":") [Comb FuncCall ("Names","mkHoConsName") [Var 8],Comb ConsCall ("Prelude","[]") []]]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransTypes","bindConsRule.rule.260") [Var 3,Var 4,Var 2,Var 6,Var 11,Var 8],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])]))])])),Func ("TransTypes","bindConsRule.rule.260") 6 Private (FuncType (FuncType (TCons ("AbstractHaskell","Expr") []) (FuncType (TCons ("AbstractHaskell","Expr") []) (TCons ("AbstractHaskell","Expr") []))) (FuncType (FuncType (TCons ("Prelude","[]") [TCons ("AbstractHaskell","Expr") []]) (TCons ("AbstractHaskell","Expr") [])) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","TypeExpr") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("AbstractHaskell","Rule") []]))))))) (Rule [1,2,3,4,5,6] (Comb ConsCall ("Prelude","(,)") [Var 3,Comb FuncCall ("TransTypes","simpleRule") [Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","PVar") [Comb ConsCall ("Prelude","(,)") [Lit (Intc  1),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","$") [Comb (ConsPartCall 1) ("AbstractHaskell","PComb") [Var 6],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("TransTypes","bindConsRule.rule.260._#lambda20") [],Comb FuncCall ("Prelude","enumFromTo") [Lit (Intc  2),Comb FuncCall ("Prelude","+") [Comb FuncCall ("Prelude","length") [Var 5],Lit (Intc  1)]]]],Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("AbstractHaskellGoodies","applyF") [Comb FuncCall ("AbstractHaskellGoodies","pre") [Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("AbstractHaskellGoodies","applyF") [Comb FuncCall ("TransTypes","basics") [Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude",":") [Lit (Charc  '='),Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Var") [Comb ConsCall ("Prelude","(,)") [Lit (Intc  1),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("AbstractHaskellGoodies","applyF") [Comb FuncCall ("TransTypes","basics") [Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'N'),Comb ConsCall ("Prelude","[]") []]]]]]]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransTypes","intc") [Var 4],Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("TransTypes","intc") [],Comb FuncCall ("Prelude","length") [Var 5]],Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","apply") [Var 2,Comb ConsCall ("Prelude",":") [Comb FuncCall ("AbstractHaskellGoodies","list2ac") [Comb FuncCall ("Prelude","zipWith") [Var 1,Comb FuncCall ("TransTypes","mkIdList") [Comb FuncCall ("Prelude","length") [Var 5],Comb ConsCall ("AbstractHaskell","Var") [Comb ConsCall ("Prelude","(,)") [Lit (Intc  1),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("TransTypes","bindConsRule.rule.260._#lambda21") [],Comb FuncCall ("Prelude","enumFromTo") [Lit (Intc  2),Comb FuncCall ("Prelude","+") [Comb FuncCall ("Prelude","length") [Var 5],Lit (Intc  1)]]]]],Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude","[]") []]]]]])),Func ("TransTypes","bindConsRule.rule.260._#lambda20") 1 Private (FuncType (TCons ("Prelude","Int") []) (TCons ("AbstractHaskell","Pattern") [])) (Rule [1] (Comb ConsCall ("AbstractHaskell","PVar") [Comb ConsCall ("Prelude","(,)") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb FuncCall ("Prelude","show") [Var 1]]]])),Func ("TransTypes","bindConsRule.rule.260._#lambda21") 1 Private (FuncType (TCons ("Prelude","Int") []) (TCons ("AbstractHaskell","Expr") [])) (Rule [1] (Comb ConsCall ("AbstractHaskell","Var") [Comb ConsCall ("Prelude","(,)") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb FuncCall ("Prelude","show") [Var 1]]]])),Func ("TransTypes","bindChoiceRule") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("AbstractHaskell","Rule") []]))) (Rule [1,2] (Let [(3,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("TransTypes","newVars") [],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'j'),Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude","[]") []]]]]]]),(4,Comb FuncCall ("TransTypes","bindChoiceRule._#selFP65#i") [Var 3]),(5,Comb FuncCall ("TransTypes","bindChoiceRule._#selFP66#j") [Var 3]),(6,Comb FuncCall ("TransTypes","bindChoiceRule._#selFP67#x") [Var 3]),(7,Comb FuncCall ("TransTypes","bindChoiceRule._#selFP68#y") [Var 3]),(8,Comb FuncCall ("TransTypes","bindChoiceRule._#selFP69#cd") [Var 3])] (Comb ConsCall ("Prelude","(,)") [Var 2,Comb FuncCall ("TransTypes","simpleRule") [Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","PVar") [Var 4],Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransTypes","mkChoicePattern") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc  'j'),Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("AbstractHaskellGoodies","list2ac") [Comb ConsCall ("Prelude",":") [Comb FuncCall ("AbstractHaskellGoodies","applyF") [Comb FuncCall ("TransTypes","basics") [Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Var") [Var 8],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Var") [Var 5],Comb ConsCall ("Prelude",":") [Comb FuncCall ("AbstractHaskellGoodies","applyF") [Var 2,Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Var") [Var 4],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Var") [Var 6],Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("AbstractHaskellGoodies","applyF") [Var 2,Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Var") [Var 4],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Var") [Var 7],Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude","[]") []]]]]],Comb ConsCall ("Prelude","[]") []]]]]))),Func ("TransTypes","bindChoiceRule._#selFP65#i") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 5) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case  Flex (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case  Flex (Var 11) [Branch (Pattern ("Prelude","[]") []) (Var 2)])])])])])])),Func ("TransTypes","bindChoiceRule._#selFP66#j") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 5) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case  Flex (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case  Flex (Var 11) [Branch (Pattern ("Prelude","[]") []) (Var 4)])])])])])])),Func ("TransTypes","bindChoiceRule._#selFP67#x") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 5) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case  Flex (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case  Flex (Var 11) [Branch (Pattern ("Prelude","[]") []) (Var 6)])])])])])])),Func ("TransTypes","bindChoiceRule._#selFP68#y") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 5) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case  Flex (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case  Flex (Var 11) [Branch (Pattern ("Prelude","[]") []) (Var 8)])])])])])])),Func ("TransTypes","bindChoiceRule._#selFP69#cd") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 5) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case  Flex (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case  Flex (Var 11) [Branch (Pattern ("Prelude","[]") []) (Var 10)])])])])])])),Func ("TransTypes","bindFreeRule") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("AbstractHaskell","Rule") []]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [3,4]) (Let [(5,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("TransTypes","newVars") [],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'j'),Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude","[]") []]]]]]),(6,Comb FuncCall ("TransTypes","bindFreeRule._#selFP71#i") [Var 5]),(7,Comb FuncCall ("TransTypes","bindFreeRule._#selFP72#j") [Var 5]),(8,Comb FuncCall ("TransTypes","bindFreeRule._#selFP73#cd") [Var 5]),(9,Comb FuncCall ("TransTypes","bindFreeRule._#selFP74#xs") [Var 5])] (Comb ConsCall ("Prelude","(,)") [Var 2,Comb FuncCall ("TransTypes","simpleRule") [Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","PVar") [Var 6],Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransTypes","mkFreeChoicesPattern") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc  'j'),Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("AbstractHaskellGoodies","applyF") [Comb FuncCall ("AbstractHaskellGoodies","pre") [Comb FuncCall ("Prelude","++") [Var 4,Comb ConsCall ("Prelude",":") [Lit (Charc  'O'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'N'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Var") [Var 6],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Var") [Var 8],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Var") [Var 7],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Var") [Var 9],Comb ConsCall ("Prelude","[]") []]]]]]]]))])),Func ("TransTypes","bindFreeRule._#selFP71#i") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 5) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case  Flex (Var 9) [Branch (Pattern ("Prelude","[]") []) (Var 2)])])])])])),Func ("TransTypes","bindFreeRule._#selFP72#j") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 5) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case  Flex (Var 9) [Branch (Pattern ("Prelude","[]") []) (Var 4)])])])])])),Func ("TransTypes","bindFreeRule._#selFP73#cd") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 5) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case  Flex (Var 9) [Branch (Pattern ("Prelude","[]") []) (Var 6)])])])])])),Func ("TransTypes","bindFreeRule._#selFP74#xs") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 5) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case  Flex (Var 9) [Branch (Pattern ("Prelude","[]") []) (Var 8)])])])])])),Func ("TransTypes","bindNarrowedRule") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("AbstractHaskell","Rule") []]))) (Rule [1,2] (Let [(3,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("TransTypes","newVars") [],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'j'),Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude","[]") []]]]]]),(4,Comb FuncCall ("TransTypes","bindNarrowedRule._#selFP76#i") [Var 3]),(5,Comb FuncCall ("TransTypes","bindNarrowedRule._#selFP77#j") [Var 3]),(6,Comb FuncCall ("TransTypes","bindNarrowedRule._#selFP78#xs") [Var 3]),(7,Comb FuncCall ("TransTypes","bindNarrowedRule._#selFP79#cd") [Var 3])] (Comb ConsCall ("Prelude","(,)") [Var 2,Comb FuncCall ("TransTypes","simpleRule") [Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","PVar") [Var 4],Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransTypes","mkNarrowedChoicesPattern") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc  'j'),Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("AbstractHaskellGoodies","list2ac") [Comb ConsCall ("Prelude",":") [Comb FuncCall ("AbstractHaskellGoodies","applyF") [Comb FuncCall ("TransTypes","basics") [Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Var") [Var 7],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Var") [Var 5],Comb ConsCall ("Prelude",":") [Comb FuncCall ("AbstractHaskellGoodies","applyF") [Comb FuncCall ("AbstractHaskellGoodies","pre") [Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("AbstractHaskellGoodies","applyF") [Var 2,Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Var") [Var 4],Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Var") [Var 6],Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude","[]") []]]]]))),Func ("TransTypes","bindNarrowedRule._#selFP76#i") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 5) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case  Flex (Var 9) [Branch (Pattern ("Prelude","[]") []) (Var 2)])])])])])),Func ("TransTypes","bindNarrowedRule._#selFP77#j") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 5) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case  Flex (Var 9) [Branch (Pattern ("Prelude","[]") []) (Var 4)])])])])])),Func ("TransTypes","bindNarrowedRule._#selFP78#xs") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 5) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case  Flex (Var 9) [Branch (Pattern ("Prelude","[]") []) (Var 6)])])])])])),Func ("TransTypes","bindNarrowedRule._#selFP79#cd") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 5) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case  Flex (Var 9) [Branch (Pattern ("Prelude","[]") []) (Var 8)])])])])])),Func ("TransTypes","bindChoicesRule") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("AbstractHaskell","Rule") []]))) (Rule [1,2] (Let [(3,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("TransTypes","newVars") [],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude","[]") []]]]),(4,Comb FuncCall ("TransTypes","bindChoicesRule._#selFP81#us") [Var 3]),(5,Comb FuncCall ("TransTypes","bindChoicesRule._#selFP82#i") [Var 3])] (Comb ConsCall ("Prelude","(,)") [Var 2,Comb FuncCall ("TransTypes","simpleRule") [Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","PVar") [Var 4],Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransTypes","mkVarChoicesPattern") [Var 1],Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("AbstractHaskellGoodies","applyF") [Comb FuncCall ("AbstractHaskellGoodies","pre") [Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude","[]") []]]]]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("AbstractHaskellGoodies","applyF") [Comb FuncCall ("AbstractHaskellGoodies","pre") [Comb ConsCall ("Prelude",":") [Lit (Charc  '+'),Comb ConsCall ("Prelude",":") [Lit (Charc  '+'),Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("AbstractHaskellGoodies","string2ac") [Comb FuncCall ("Prelude","++") [Comb FuncCall ("TransTypes","showQName") [Comb FuncCall ("Names","unRenameQName") [Var 1]],Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","snd") [Var 2],Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'I'),Comb ConsCall ("Prelude",":") [Lit (Charc  'D'),Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("AbstractHaskellGoodies","applyF") [Comb FuncCall ("AbstractHaskellGoodies","pre") [Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude","[]") []]]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Var") [Var 5],Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude","[]") []]]]]))),Func ("TransTypes","bindChoicesRule._#selFP81#us") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 5) [Branch (Pattern ("Prelude","[]") []) (Var 2)])])])),Func ("TransTypes","bindChoicesRule._#selFP82#i") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 5) [Branch (Pattern ("Prelude","[]") []) (Var 4)])])])),Func ("TransTypes","bindFailRule") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("AbstractHaskell","Rule") []]))) (Rule [1,2] (Let [(3,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("TransTypes","newVars") [],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude","[]") []]]),(4,Comb FuncCall ("TransTypes","bindFailRule._#selFP84#info") [Var 3])] (Comb ConsCall ("Prelude","(,)") [Var 2,Comb FuncCall ("TransTypes","simpleRule") [Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","PVar") [Comb ConsCall ("Prelude","(,)") [Lit (Intc  1),Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransTypes","mkFailPattern") [Var 1],Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("AbstractHaskellGoodies","list2ac") [Comb ConsCall ("Prelude",":") [Comb FuncCall ("AbstractHaskellGoodies","applyF") [Comb FuncCall ("TransTypes","basics") [Comb ConsCall ("Prelude",":") [Lit (Charc  'U'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'v'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'b'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Var") [Var 4],Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude","[]") []]]]]))),Func ("TransTypes","bindFailRule._#selFP84#info") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Var 2)])])),Func ("TransTypes","bindGuardRule") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("AbstractHaskell","Rule") []]))) (Rule [1,2] (Let [(3,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("TransTypes","newVars") [],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude","[]") []]]]]),(4,Comb FuncCall ("TransTypes","bindGuardRule._#selFP86#i") [Var 3]),(5,Comb FuncCall ("TransTypes","bindGuardRule._#selFP87#c") [Var 3]),(6,Comb FuncCall ("TransTypes","bindGuardRule._#selFP88#e") [Var 3]),(7,Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("TransTypes","basics") [],Case  Rigid (Var 2) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'z'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  'B'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude","[]") []]]]]]]]]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  'b'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude","[]") []]]]])]]),(8,Case  Rigid (Var 2) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("AbstractHaskellGoodies","list2ac") [Comb ConsCall ("Prelude",":") [Comb FuncCall ("AbstractHaskellGoodies","applyF") [Comb FuncCall ("TransTypes","basics") [Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude",":") [Lit (Charc  '='),Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Var") [Var 4],Comb ConsCall ("Prelude",":") [Comb FuncCall ("AbstractHaskellGoodies","applyF") [Comb FuncCall ("TransTypes","basics") [Comb ConsCall ("Prelude",":") [Lit (Charc  'L'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'z'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  'B'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude","[]") []]]]]]]]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("AbstractHaskellGoodies","applyF") [Var 7,Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Var") [Var 4],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Var") [Var 6],Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude","[]") []]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("AbstractHaskellGoodies","applyF") [Var 7,Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Var") [Var 4],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Var") [Var 6],Comb ConsCall ("Prelude","[]") []]]])])] (Comb ConsCall ("Prelude","(,)") [Var 7,Comb FuncCall ("TransTypes","simpleRule") [Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","PVar") [Var 4],Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransTypes","mkGuardPattern") [Var 1],Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("AbstractHaskellGoodies","applyF") [Comb FuncCall ("AbstractHaskellGoodies","pre") [Comb ConsCall ("Prelude",":") [Lit (Charc  '+'),Comb ConsCall ("Prelude",":") [Lit (Charc  '+'),Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("AbstractHaskellGoodies","applyF") [Comb FuncCall ("TransTypes","basics") [Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'L'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Var") [Var 5],Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude","[]") []]]]]]))),Func ("TransTypes","bindGuardRule._#selFP86#i") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 5) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 7) [Branch (Pattern ("Prelude","[]") []) (Var 2)])])])])),Func ("TransTypes","bindGuardRule._#selFP87#c") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 5) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 7) [Branch (Pattern ("Prelude","[]") []) (Var 4)])])])])),Func ("TransTypes","bindGuardRule._#selFP88#e") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 5) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 7) [Branch (Pattern ("Prelude","[]") []) (Var 6)])])])])),Func ("TransTypes","curryInstance") 2 Private (FuncType (TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Base","HOClass") []]) (FuncType (TCons ("FlatCurry","TypeDecl") []) (TCons ("AbstractHaskell","TypeDecl") []))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("FlatCurry","Type") [3,4,5,6]) (Let [(7,Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("FlatCurry2AbstractHaskell","fcy2absTVar") [],Var 5]),(8,Comb ConsCall ("AbstractHaskell","TCons") [Var 3,Comb FuncCall ("Prelude","map") [Comb (ConsPartCall 1) ("AbstractHaskell","TVar") [],Var 7]])] (Comb FuncCall ("Prelude","$") [Comb FuncCall ("TransTypes","mkInstance") [Comb FuncCall ("TransTypes","curryPre") [Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude","[]") []]]]]]],Comb ConsCall ("Prelude","[]") [],Var 8,Var 7],Comb FuncCall ("Prelude","concat") [Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransTypes","extConsRules") [Comb FuncCall ("TransTypes","curryPre") [Comb ConsCall ("Prelude",":") [Lit (Charc  '='),Comb ConsCall ("Prelude",":") [Lit (Charc  '?'),Comb ConsCall ("Prelude",":") [Lit (Charc  '='),Comb ConsCall ("Prelude","[]") []]]]],Var 3],Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("TransTypes","eqConsRules") [Var 1],Var 6],Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransTypes","curryInstance.catchAllPattern.297") [Var 6,Comb FuncCall ("TransTypes","curryPre") [Comb ConsCall ("Prelude",":") [Lit (Charc  '='),Comb ConsCall ("Prelude",":") [Lit (Charc  '?'),Comb ConsCall ("Prelude",":") [Lit (Charc  '='),Comb ConsCall ("Prelude","[]") []]]]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransTypes","extConsRules") [Comb FuncCall ("TransTypes","curryPre") [Comb ConsCall ("Prelude",":") [Lit (Charc  '<'),Comb ConsCall ("Prelude",":") [Lit (Charc  '?'),Comb ConsCall ("Prelude",":") [Lit (Charc  '='),Comb ConsCall ("Prelude","[]") []]]]],Var 3],Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransTypes","ordConsRules") [Var 1,Var 6],Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransTypes","curryInstance.catchAllPattern.297") [Var 6,Comb FuncCall ("TransTypes","curryPre") [Comb ConsCall ("Prelude",":") [Lit (Charc  '<'),Comb ConsCall ("Prelude",":") [Lit (Charc  '?'),Comb ConsCall ("Prelude",":") [Lit (Charc  '='),Comb ConsCall ("Prelude","[]") []]]]]],Comb ConsCall ("Prelude","[]") []]]]]]]]]))])),Func ("TransTypes","curryInstance.catchAllPattern.297") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","ConsDecl") []]) (FuncType (TVar 0) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("AbstractHaskell","Rule") []]]))) (Rule [1,2] (Case  Rigid (Comb FuncCall ("Prelude",">") [Comb FuncCall ("Prelude","length") [Var 1],Lit (Intc  1)]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("TransTypes","catchAllCase") [Var 2,Comb FuncCall ("AbstractHaskellGoodies","constF") [Comb FuncCall ("TransTypes","curryPre") [Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude",":") [Lit (Charc  'F'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])),Func ("TransTypes","extConsRules") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("AbstractHaskell","Rule") []]]))) (Rule [1,2] (Let [(3,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("TransTypes","newVars") [],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'z'),Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]),(4,Comb FuncCall ("TransTypes","extConsRules._#selFP90#i") [Var 3]),(5,Comb FuncCall ("TransTypes","extConsRules._#selFP91#x") [Var 3]),(6,Comb FuncCall ("TransTypes","extConsRules._#selFP92#y") [Var 3]),(7,Comb FuncCall ("TransTypes","extConsRules._#selFP93#z") [Var 3]),(8,Comb FuncCall ("TransTypes","extConsRules._#selFP94#xs") [Var 3]),(9,Comb FuncCall ("TransTypes","extConsRules._#selFP95#c") [Var 3]),(10,Comb FuncCall ("TransTypes","extConsRules._#selFP96#e") [Var 3]),(11,Comb FuncCall ("TransTypes","extConsRules._#selFP97#cs") [Var 3]),(12,Comb FuncCall ("TransTypes","extConsRules._#selFP98#p") [Var 3]),(13,Comb FuncCall ("TransTypes","extConsRules._#selFP99#cd") [Var 3]),(14,Comb FuncCall ("TransTypes","extConsRules._#selFP100#info") [Var 3])] (Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("TransTypes","extConsRules.nameRule.304") [Var 1],Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransTypes","simpleRule") [Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransTypes","mkChoicePattern") [Var 2,Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","PVar") [Var 7],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","PVar") [Var 11],Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("AbstractHaskellGoodies","applyF") [Comb FuncCall ("TransTypes","narrow") [],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Var") [Var 13],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Var") [Var 4],Comb ConsCall ("Prelude",":") [Comb FuncCall ("AbstractHaskellGoodies","applyF") [Var 1,Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Var") [Var 5],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Var") [Var 7],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Var") [Var 11],Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("AbstractHaskellGoodies","applyF") [Var 1,Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Var") [Var 6],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Var") [Var 7],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Var") [Var 11],Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude","[]") []]]]]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransTypes","simpleRule") [Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransTypes","mkChoicesPattern") [Var 2],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","PVar") [Var 6],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","PVar") [Var 11],Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("AbstractHaskellGoodies","applyF") [Comb FuncCall ("TransTypes","narrows") [],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Var") [Var 11],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Var") [Var 13],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Var") [Var 4],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Lambda") [Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","PVar") [Var 5],Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("AbstractHaskellGoodies","applyF") [Var 1,Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Var") [Var 5],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Var") [Var 6],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Var") [Var 11],Comb ConsCall ("Prelude","[]") []]]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Var") [Var 8],Comb ConsCall ("Prelude","[]") []]]]]]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransTypes","simpleRule") [Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransTypes","mkGuardPattern") [Var 2],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","PVar") [Var 6],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","PVar") [Var 11],Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("AbstractHaskellGoodies","applyF") [Comb FuncCall ("TransTypes","basics") [Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Var") [Var 13],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Var") [Var 9],Comb ConsCall ("Prelude",":") [Comb FuncCall ("AbstractHaskellGoodies","applyF") [Var 1,Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Var") [Var 10],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Var") [Var 6],Comb ConsCall ("Prelude",":") [Comb FuncCall ("AbstractHaskellGoodies","applyF") [Comb FuncCall ("TransTypes","basics") [Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude","[]") []]]]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Var") [Var 9],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Var") [Var 11],Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude","[]") []]]]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransTypes","simpleRule") [Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransTypes","mkFailPattern") [Var 2],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","PVar") [Var 12],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","PVar") [Var 12],Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("AbstractHaskellGoodies","applyF") [Comb FuncCall ("TransTypes","basics") [Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude","[]") []]]]]]]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Var") [Var 13],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Var") [Var 14],Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransTypes","simpleRule") [Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","PVar") [Var 7],Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransTypes","mkChoicePattern") [Var 2,Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","PVar") [Var 11],Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("AbstractHaskellGoodies","applyF") [Comb FuncCall ("TransTypes","narrow") [],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Var") [Var 13],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Var") [Var 4],Comb ConsCall ("Prelude",":") [Comb FuncCall ("AbstractHaskellGoodies","applyF") [Var 1,Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Var") [Var 7],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Var") [Var 5],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Var") [Var 11],Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("AbstractHaskellGoodies","applyF") [Var 1,Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Var") [Var 7],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Var") [Var 6],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Var") [Var 11],Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude","[]") []]]]]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransTypes","simpleRule") [Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","PVar") [Var 6],Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransTypes","mkChoicesPattern") [Var 2],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","PVar") [Var 11],Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("AbstractHaskellGoodies","applyF") [Comb FuncCall ("TransTypes","narrows") [],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Var") [Var 11],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Var") [Var 13],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Var") [Var 4],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Lambda") [Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","PVar") [Var 5],Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("AbstractHaskellGoodies","applyF") [Var 1,Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Var") [Var 6],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Var") [Var 5],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Var") [Var 11],Comb ConsCall ("Prelude","[]") []]]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Var") [Var 8],Comb ConsCall ("Prelude","[]") []]]]]]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransTypes","simpleRule") [Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","PVar") [Var 6],Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransTypes","mkGuardPattern") [Var 2],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","PVar") [Var 11],Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("AbstractHaskellGoodies","applyF") [Comb FuncCall ("TransTypes","basics") [Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Var") [Var 13],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Var") [Var 9],Comb ConsCall ("Prelude",":") [Comb FuncCall ("AbstractHaskellGoodies","applyF") [Var 1,Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Var") [Var 6],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Var") [Var 10],Comb ConsCall ("Prelude",":") [Comb FuncCall ("AbstractHaskellGoodies","applyF") [Comb FuncCall ("TransTypes","basics") [Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude","[]") []]]]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Var") [Var 9],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Var") [Var 11],Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude","[]") []]]]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransTypes","simpleRule") [Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","PVar") [Var 12],Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransTypes","mkFailPattern") [Var 2],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","PVar") [Var 12],Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("AbstractHaskellGoodies","applyF") [Comb FuncCall ("TransTypes","basics") [Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude","[]") []]]]]]]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Var") [Var 13],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Var") [Var 14],Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude","[]") []]]]]]]]]]))),Func ("TransTypes","extConsRules.nameRule.304") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TVar 0) (TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TVar 0]))) (Rule [1,2] (Comb ConsCall ("Prelude","(,)") [Var 1,Var 2])),Func ("TransTypes","extConsRules._#selFP90#i") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 5) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case  Flex (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case  Flex (Var 11) [Branch (Pattern ("Prelude",":") [12,13]) (Case  Flex (Var 13) [Branch (Pattern ("Prelude",":") [14,15]) (Case  Flex (Var 15) [Branch (Pattern ("Prelude",":") [16,17]) (Case  Flex (Var 17) [Branch (Pattern ("Prelude",":") [18,19]) (Case  Flex (Var 19) [Branch (Pattern ("Prelude",":") [20,21]) (Case  Flex (Var 21) [Branch (Pattern ("Prelude",":") [22,23]) (Case  Flex (Var 23) [Branch (Pattern ("Prelude","[]") []) (Var 2)])])])])])])])])])])])])),Func ("TransTypes","extConsRules._#selFP91#x") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 5) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case  Flex (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case  Flex (Var 11) [Branch (Pattern ("Prelude",":") [12,13]) (Case  Flex (Var 13) [Branch (Pattern ("Prelude",":") [14,15]) (Case  Flex (Var 15) [Branch (Pattern ("Prelude",":") [16,17]) (Case  Flex (Var 17) [Branch (Pattern ("Prelude",":") [18,19]) (Case  Flex (Var 19) [Branch (Pattern ("Prelude",":") [20,21]) (Case  Flex (Var 21) [Branch (Pattern ("Prelude",":") [22,23]) (Case  Flex (Var 23) [Branch (Pattern ("Prelude","[]") []) (Var 4)])])])])])])])])])])])])),Func ("TransTypes","extConsRules._#selFP92#y") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 5) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case  Flex (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case  Flex (Var 11) [Branch (Pattern ("Prelude",":") [12,13]) (Case  Flex (Var 13) [Branch (Pattern ("Prelude",":") [14,15]) (Case  Flex (Var 15) [Branch (Pattern ("Prelude",":") [16,17]) (Case  Flex (Var 17) [Branch (Pattern ("Prelude",":") [18,19]) (Case  Flex (Var 19) [Branch (Pattern ("Prelude",":") [20,21]) (Case  Flex (Var 21) [Branch (Pattern ("Prelude",":") [22,23]) (Case  Flex (Var 23) [Branch (Pattern ("Prelude","[]") []) (Var 6)])])])])])])])])])])])])),Func ("TransTypes","extConsRules._#selFP93#z") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 5) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case  Flex (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case  Flex (Var 11) [Branch (Pattern ("Prelude",":") [12,13]) (Case  Flex (Var 13) [Branch (Pattern ("Prelude",":") [14,15]) (Case  Flex (Var 15) [Branch (Pattern ("Prelude",":") [16,17]) (Case  Flex (Var 17) [Branch (Pattern ("Prelude",":") [18,19]) (Case  Flex (Var 19) [Branch (Pattern ("Prelude",":") [20,21]) (Case  Flex (Var 21) [Branch (Pattern ("Prelude",":") [22,23]) (Case  Flex (Var 23) [Branch (Pattern ("Prelude","[]") []) (Var 8)])])])])])])])])])])])])),Func ("TransTypes","extConsRules._#selFP94#xs") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 5) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case  Flex (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case  Flex (Var 11) [Branch (Pattern ("Prelude",":") [12,13]) (Case  Flex (Var 13) [Branch (Pattern ("Prelude",":") [14,15]) (Case  Flex (Var 15) [Branch (Pattern ("Prelude",":") [16,17]) (Case  Flex (Var 17) [Branch (Pattern ("Prelude",":") [18,19]) (Case  Flex (Var 19) [Branch (Pattern ("Prelude",":") [20,21]) (Case  Flex (Var 21) [Branch (Pattern ("Prelude",":") [22,23]) (Case  Flex (Var 23) [Branch (Pattern ("Prelude","[]") []) (Var 10)])])])])])])])])])])])])),Func ("TransTypes","extConsRules._#selFP95#c") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 5) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case  Flex (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case  Flex (Var 11) [Branch (Pattern ("Prelude",":") [12,13]) (Case  Flex (Var 13) [Branch (Pattern ("Prelude",":") [14,15]) (Case  Flex (Var 15) [Branch (Pattern ("Prelude",":") [16,17]) (Case  Flex (Var 17) [Branch (Pattern ("Prelude",":") [18,19]) (Case  Flex (Var 19) [Branch (Pattern ("Prelude",":") [20,21]) (Case  Flex (Var 21) [Branch (Pattern ("Prelude",":") [22,23]) (Case  Flex (Var 23) [Branch (Pattern ("Prelude","[]") []) (Var 12)])])])])])])])])])])])])),Func ("TransTypes","extConsRules._#selFP96#e") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 5) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case  Flex (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case  Flex (Var 11) [Branch (Pattern ("Prelude",":") [12,13]) (Case  Flex (Var 13) [Branch (Pattern ("Prelude",":") [14,15]) (Case  Flex (Var 15) [Branch (Pattern ("Prelude",":") [16,17]) (Case  Flex (Var 17) [Branch (Pattern ("Prelude",":") [18,19]) (Case  Flex (Var 19) [Branch (Pattern ("Prelude",":") [20,21]) (Case  Flex (Var 21) [Branch (Pattern ("Prelude",":") [22,23]) (Case  Flex (Var 23) [Branch (Pattern ("Prelude","[]") []) (Var 14)])])])])])])])])])])])])),Func ("TransTypes","extConsRules._#selFP97#cs") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 5) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case  Flex (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case  Flex (Var 11) [Branch (Pattern ("Prelude",":") [12,13]) (Case  Flex (Var 13) [Branch (Pattern ("Prelude",":") [14,15]) (Case  Flex (Var 15) [Branch (Pattern ("Prelude",":") [16,17]) (Case  Flex (Var 17) [Branch (Pattern ("Prelude",":") [18,19]) (Case  Flex (Var 19) [Branch (Pattern ("Prelude",":") [20,21]) (Case  Flex (Var 21) [Branch (Pattern ("Prelude",":") [22,23]) (Case  Flex (Var 23) [Branch (Pattern ("Prelude","[]") []) (Var 16)])])])])])])])])])])])])),Func ("TransTypes","extConsRules._#selFP98#p") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 5) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case  Flex (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case  Flex (Var 11) [Branch (Pattern ("Prelude",":") [12,13]) (Case  Flex (Var 13) [Branch (Pattern ("Prelude",":") [14,15]) (Case  Flex (Var 15) [Branch (Pattern ("Prelude",":") [16,17]) (Case  Flex (Var 17) [Branch (Pattern ("Prelude",":") [18,19]) (Case  Flex (Var 19) [Branch (Pattern ("Prelude",":") [20,21]) (Case  Flex (Var 21) [Branch (Pattern ("Prelude",":") [22,23]) (Case  Flex (Var 23) [Branch (Pattern ("Prelude","[]") []) (Var 18)])])])])])])])])])])])])),Func ("TransTypes","extConsRules._#selFP99#cd") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 5) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case  Flex (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case  Flex (Var 11) [Branch (Pattern ("Prelude",":") [12,13]) (Case  Flex (Var 13) [Branch (Pattern ("Prelude",":") [14,15]) (Case  Flex (Var 15) [Branch (Pattern ("Prelude",":") [16,17]) (Case  Flex (Var 17) [Branch (Pattern ("Prelude",":") [18,19]) (Case  Flex (Var 19) [Branch (Pattern ("Prelude",":") [20,21]) (Case  Flex (Var 21) [Branch (Pattern ("Prelude",":") [22,23]) (Case  Flex (Var 23) [Branch (Pattern ("Prelude","[]") []) (Var 20)])])])])])])])])])])])])),Func ("TransTypes","extConsRules._#selFP100#info") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 5) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case  Flex (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case  Flex (Var 11) [Branch (Pattern ("Prelude",":") [12,13]) (Case  Flex (Var 13) [Branch (Pattern ("Prelude",":") [14,15]) (Case  Flex (Var 15) [Branch (Pattern ("Prelude",":") [16,17]) (Case  Flex (Var 17) [Branch (Pattern ("Prelude",":") [18,19]) (Case  Flex (Var 19) [Branch (Pattern ("Prelude",":") [20,21]) (Case  Flex (Var 21) [Branch (Pattern ("Prelude",":") [22,23]) (Case  Flex (Var 23) [Branch (Pattern ("Prelude","[]") []) (Var 22)])])])])])])])])])])])])),Func ("TransTypes","eqConsRules") 1 Private (FuncType (TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Base","HOClass") []]) (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","ConsDecl") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("AbstractHaskell","Rule") []]]))) (Rule [1] (Comb FuncCall ("Prelude","concatMap") [Comb (FuncPartCall 1) ("TransTypes","eqConsRule") [Var 1]])),Func ("TransTypes","eqConsRule") 2 Private (FuncType (TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Base","HOClass") []]) (FuncType (TCons ("FlatCurry","ConsDecl") []) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("AbstractHaskell","Rule") []]]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("FlatCurry","Cons") [3,4,5,6]) (Let [(7,Comb FuncCall ("Prelude","==") [Comb FuncCall ("FiniteMap","lookupFM") [Var 1,Var 3],Comb ConsCall ("Prelude","Just") [Comb ConsCall ("Base","HO") []]]),(8,Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Prelude","+") [Comb FuncCall ("Prelude","*") [Lit (Intc  2),Var 4],Lit (Intc  1)],Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude","[]") []]]]),(9,Case  Rigid (Comb FuncCall ("Prelude","==") [Var 4,Lit (Intc  0)]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("AbstractHaskellGoodies","constF") [Comb FuncCall ("TransTypes","curryPre") [Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude",":") [Lit (Charc  'T'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","foldr1") [Comb (FuncPartCall 2) ("TransTypes","eqConsRule._#lambda22") [Var 8],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("TransTypes","eqConsRule._#lambda23") [Var 8],Comb FuncCall ("Prelude","enumFromTo") [Lit (Intc  1),Var 4]]])])] (Case  Rigid (Var 7) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransTypes","eqConsRule.rule.313") [Var 4,Var 8,Var 9,Var 3],Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("TransTypes","eqConsRule.rule.313") [Var 4,Var 8,Var 9],Comb FuncCall ("Names","mkHoConsName") [Var 3]],Comb ConsCall ("Prelude","[]") []]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransTypes","eqConsRule.rule.313") [Var 4,Var 8,Var 9,Var 3],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])]))])),Func ("TransTypes","eqConsRule._#lambda22") 3 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("AbstractHaskell","Expr") []) (FuncType (TCons ("AbstractHaskell","Expr") []) (TCons ("AbstractHaskell","Expr") [])))) (Rule [1,2,3] (Comb FuncCall ("AbstractHaskellGoodies","applyF") [Comb FuncCall ("TransTypes","curryPre") [Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude",":") [Lit (Charc  'O'),Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]],Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude",":") [Var 3,Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Var") [Var 1],Comb ConsCall ("Prelude","[]") []]]]])),Func ("TransTypes","eqConsRule._#lambda23") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","Int") []) (TCons ("AbstractHaskell","Expr") []))) (Rule [1,2] (Comb FuncCall ("AbstractHaskellGoodies","applyF") [Comb FuncCall ("TransTypes","curryPre") [Comb ConsCall ("Prelude",":") [Lit (Charc  '='),Comb ConsCall ("Prelude",":") [Lit (Charc  '?'),Comb ConsCall ("Prelude",":") [Lit (Charc  '='),Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransTypes","mkVar") [Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude","[]") []],Var 2],Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransTypes","mkVar") [Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude","[]") []],Var 2],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Var") [Var 1],Comb ConsCall ("Prelude","[]") []]]]])),Func ("TransTypes","eqConsRule.rule.313") 4 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("AbstractHaskell","Expr") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("AbstractHaskell","Rule") []]))))) (Rule [1,2,3,4] (Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("TransTypes","curryPre") [Comb ConsCall ("Prelude",":") [Lit (Charc  '='),Comb ConsCall ("Prelude",":") [Lit (Charc  '?'),Comb ConsCall ("Prelude",":") [Lit (Charc  '='),Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("TransTypes","simpleRule") [Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransTypes","consPattern") [Var 4,Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude","[]") []],Var 1],Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransTypes","consPattern") [Var 4,Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude","[]") []],Var 1],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","PVar") [Var 2],Comb ConsCall ("Prelude","[]") []]]],Var 3]])),Func ("TransTypes","ordConsRules") 2 Private (FuncType (TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Base","HOClass") []]) (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","ConsDecl") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("AbstractHaskell","Rule") []]]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [3,4]) (Case  Flex (Var 3) [Branch (Pattern ("FlatCurry","Cons") [5,6,7,8]) (Let [(9,Comb FuncCall ("Prelude","==") [Comb FuncCall ("FiniteMap","lookupFM") [Var 1,Var 5],Comb ConsCall ("Prelude","Just") [Comb ConsCall ("Base","HO") []]]),(10,Comb ConsCall ("Prelude","(,)") [Lit (Intc  1),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude","[]") []]]])] (Case  Rigid (Var 9) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","concatMap") [Comb (FuncPartCall 1) ("TransTypes","ordConsRules.rule.331") [Var 6,Var 4,Var 10,Var 1]],Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude",":") [Comb FuncCall ("Names","mkHoConsName") [Var 5],Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("TransTypes","ordConsRules") [Var 1,Var 4]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("TransTypes","ordConsRules.rule.331") [Var 6,Var 4,Var 10,Var 1,Var 5],Comb FuncCall ("TransTypes","ordConsRules") [Var 1,Var 4]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])]))])])),Func ("TransTypes","ordConsRules.ordBody.331") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("AbstractHaskell","Expr") []))) (Rule [1,2] (Case  Rigid (Var 2) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("AbstractHaskellGoodies","constF") [Comb FuncCall ("TransTypes","curryPre") [Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude",":") [Lit (Charc  'T'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]]]),Branch (Pattern ("Prelude",":") [3,4]) (Case  Rigid (Var 4) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("AbstractHaskellGoodies","applyF") [Comb FuncCall ("TransTypes","curryPre") [Comb ConsCall ("Prelude",":") [Lit (Charc  '<'),Comb ConsCall ("Prelude",":") [Lit (Charc  '?'),Comb ConsCall ("Prelude",":") [Lit (Charc  '='),Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransTypes","mkVar") [Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude","[]") []],Var 3],Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransTypes","mkVar") [Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude","[]") []],Var 3],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Var") [Var 1],Comb ConsCall ("Prelude","[]") []]]]]),Branch (Pattern ("Prelude",":") [5,6]) (Let [(7,Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransTypes","mkVar") [Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude","[]") []],Var 3],Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransTypes","mkVar") [Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude","[]") []],Var 3],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Var") [Var 1],Comb ConsCall ("Prelude","[]") []]]])] (Comb FuncCall ("AbstractHaskellGoodies","applyF") [Comb FuncCall ("TransTypes","curryPre") [Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude",":") [Lit (Charc  'O'),Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude",":") [Lit (Charc  'b'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude",":") [Lit (Charc  'b'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("AbstractHaskellGoodies","applyF") [Comb FuncCall ("TransTypes","curryPre") [Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude",":") [Lit (Charc  'O'),Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude","[]") []]]]]]]]],Var 7],Comb ConsCall ("Prelude",":") [Comb FuncCall ("AbstractHaskellGoodies","applyF") [Comb FuncCall ("TransTypes","curryPre") [Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude",":") [Lit (Charc  'O'),Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("AbstractHaskellGoodies","applyF") [Comb FuncCall ("TransTypes","curryPre") [Comb ConsCall ("Prelude",":") [Lit (Charc  '='),Comb ConsCall ("Prelude",":") [Lit (Charc  '?'),Comb ConsCall ("Prelude",":") [Lit (Charc  '='),Comb ConsCall ("Prelude","[]") []]]]],Var 7],Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransTypes","ordConsRules.ordBody.331") [Var 1,Comb ConsCall ("Prelude",":") [Var 5,Var 6]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Var") [Var 1],Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Var") [Var 1],Comb ConsCall ("Prelude","[]") []]]]]))])])),Func ("TransTypes","ordConsRules.firstRule.331") 3 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("AbstractHaskell","Rule") []])))) (Rule [1,2,3] (Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("TransTypes","curryPre") [Comb ConsCall ("Prelude",":") [Lit (Charc  '<'),Comb ConsCall ("Prelude",":") [Lit (Charc  '?'),Comb ConsCall ("Prelude",":") [Lit (Charc  '='),Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("TransTypes","simpleRule") [Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransTypes","consPattern") [Var 3,Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude","[]") []],Var 1],Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransTypes","consPattern") [Var 3,Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude","[]") []],Var 1],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","PVar") [Var 2],Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("TransTypes","ordConsRules.ordBody.331") [Var 2,Comb FuncCall ("Prelude","enumFromTo") [Lit (Intc  1),Var 1]]]])),Func ("TransTypes","ordConsRules.rule.331") 5 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","ConsDecl") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Base","HOClass") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("AbstractHaskell","Rule") []]])))))) (Rule [1,2,3,4,5] (Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransTypes","ordConsRules.firstRule.331") [Var 1,Var 3,Var 5],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","concatMap") [Comb (FuncPartCall 1) ("TransTypes","ordCons2Rule") [Var 4,Comb ConsCall ("Prelude","(,)") [Var 5,Var 1]]],Var 2]])),Func ("TransTypes","ordCons2Rule") 3 Private (FuncType (TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Base","HOClass") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","Int") []]) (FuncType (TCons ("FlatCurry","ConsDecl") []) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("AbstractHaskell","Rule") []]])))) (Rule [1,2,3] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Case  Flex (Var 3) [Branch (Pattern ("FlatCurry","Cons") [6,7,8,9]) (Let [(10,Comb FuncCall ("Prelude","==") [Comb FuncCall ("FiniteMap","lookupFM") [Var 1,Var 6],Comb ConsCall ("Prelude","Just") [Comb ConsCall ("Base","HO") []]])] (Case  Rigid (Var 10) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransTypes","ordCons2Rule.rule.352") [Var 5,Var 7,Var 4,Var 6],Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("TransTypes","ordCons2Rule.rule.352") [Var 5,Var 7,Var 4],Comb FuncCall ("Names","mkHoConsName") [Var 6]],Comb ConsCall ("Prelude","[]") []]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransTypes","ordCons2Rule.rule.352") [Var 5,Var 7,Var 4,Var 6],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])]))])])),Func ("TransTypes","ordCons2Rule.rule.352") 4 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("AbstractHaskell","Rule") []]))))) (Rule [1,2,3,4] (Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("TransTypes","curryPre") [Comb ConsCall ("Prelude",":") [Lit (Charc  '<'),Comb ConsCall ("Prelude",":") [Lit (Charc  '?'),Comb ConsCall ("Prelude",":") [Lit (Charc  '='),Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("TransTypes","simpleRule") [Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransTypes","consPattern") [Var 3,Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude","[]") []],Var 1],Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransTypes","consPattern") [Var 4,Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude","[]") []],Var 2],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","PVar") [Comb ConsCall ("Prelude","(,)") [Lit (Intc  1),Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("AbstractHaskellGoodies","constF") [],Comb FuncCall ("TransTypes","curryPre") [Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude",":") [Lit (Charc  'T'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]])),Func ("TransTypes","coverableInstance") 2 Private (FuncType (TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Base","HOClass") []]) (FuncType (TCons ("FlatCurry","TypeDecl") []) (TCons ("AbstractHaskell","TypeDecl") []))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("FlatCurry","Type") [3,4,5,6]) (Let [(7,Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("FlatCurry2AbstractHaskell","fcy2absTVar") [],Var 5]),(8,Comb ConsCall ("AbstractHaskell","TCons") [Var 3,Comb FuncCall ("Prelude","map") [Comb (ConsPartCall 1) ("AbstractHaskell","TVar") [],Var 7]])] (Comb FuncCall ("Prelude","$") [Comb FuncCall ("TransTypes","mkInstance") [Comb FuncCall ("TransTypes","basics") [Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'v'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'b'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]],Comb ConsCall ("Prelude","[]") [],Var 8,Var 7],Comb FuncCall ("TransTypes","coverRules") [Var 1,Var 3,Var 6]]))])),Func ("TransTypes","coverRules") 3 Private (FuncType (TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Base","HOClass") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","ConsDecl") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("AbstractHaskell","Rule") []]])))) (Rule [1,2,3] (Let [(4,Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Prelude","map") [Comb (ConsPartCall 1) ("AbstractHaskell","Var") []],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("TransTypes","newVars") [],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude","[]") []]]]]]]]]]]),(5,Comb FuncCall ("TransTypes","coverRules._#selFP102#i") [Var 4]),(6,Comb FuncCall ("TransTypes","coverRules._#selFP103#x") [Var 4]),(7,Comb FuncCall ("TransTypes","coverRules._#selFP104#y") [Var 4]),(8,Comb FuncCall ("TransTypes","coverRules._#selFP105#xs") [Var 4]),(9,Comb FuncCall ("TransTypes","coverRules._#selFP106#c") [Var 4]),(10,Comb FuncCall ("TransTypes","coverRules._#selFP107#e") [Var 4]),(11,Comb FuncCall ("TransTypes","coverRules._#selFP108#cd") [Var 4]),(12,Comb FuncCall ("TransTypes","coverRules._#selFP109#info") [Var 4])] (Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("TransTypes","coverRules._#lambda25") [],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","concatMap") [Comb (FuncPartCall 1) ("TransTypes","mkCoverConsRule") [Var 1]],Var 3],Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransTypes","simpleRule") [Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransTypes","mkChoicePattern") [Var 2,Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("AbstractHaskellGoodies","applyF") [Comb FuncCall ("Names","mkChoiceName") [Var 2],Comb ConsCall ("Prelude",":") [Comb FuncCall ("AbstractHaskellGoodies","applyF") [Comb FuncCall ("TransTypes","incCover") [],Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude",":") [Comb FuncCall ("AbstractHaskellGoodies","applyF") [Comb FuncCall ("TransTypes","cover") [],Comb ConsCall ("Prelude",":") [Var 6,Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("AbstractHaskellGoodies","applyF") [Comb FuncCall ("TransTypes","cover") [],Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude","[]") []]]]]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransTypes","simpleRule") [Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransTypes","mkChoicesPattern") [Var 2],Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("AbstractHaskellGoodies","applyF") [Comb FuncCall ("Names","mkChoicesName") [Var 2],Comb ConsCall ("Prelude",":") [Comb FuncCall ("AbstractHaskellGoodies","applyF") [Comb FuncCall ("TransTypes","incCover") [],Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude",":") [Comb FuncCall ("AbstractHaskellGoodies","applyF") [Comb FuncCall ("AbstractHaskellGoodies","pre") [Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("AbstractHaskellGoodies","constF") [Comb FuncCall ("TransTypes","cover") []],Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude","[]") []]]]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransTypes","simpleRule") [Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransTypes","mkFailPattern") [Var 2],Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("AbstractHaskellGoodies","applyF") [Comb FuncCall ("Names","mkFailName") [Var 2],Comb ConsCall ("Prelude",":") [Comb FuncCall ("AbstractHaskellGoodies","applyF") [Comb FuncCall ("TransTypes","incCover") [],Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude",":") [Var 12,Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransTypes","simpleRule") [Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransTypes","mkGuardPattern") [Var 2],Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("AbstractHaskellGoodies","applyF") [Comb FuncCall ("Names","mkGuardName") [Var 2],Comb ConsCall ("Prelude",":") [Comb FuncCall ("AbstractHaskellGoodies","applyF") [Comb FuncCall ("TransTypes","incCover") [],Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude",":") [Comb FuncCall ("AbstractHaskellGoodies","applyF") [Comb FuncCall ("TransTypes","cover") [],Comb ConsCall ("Prelude",":") [Var 10,Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude","[]") []]]]]],Comb ConsCall ("Prelude","[]") []]]]]]]))),Func ("TransTypes","coverRules._#selFP102#i") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("AbstractHaskell","Expr") []]) (TCons ("AbstractHaskell","Expr") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 5) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case  Flex (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case  Flex (Var 11) [Branch (Pattern ("Prelude",":") [12,13]) (Case  Flex (Var 13) [Branch (Pattern ("Prelude",":") [14,15]) (Case  Flex (Var 15) [Branch (Pattern ("Prelude",":") [16,17]) (Case  Flex (Var 17) [Branch (Pattern ("Prelude","[]") []) (Var 2)])])])])])])])])])),Func ("TransTypes","coverRules._#selFP103#x") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("AbstractHaskell","Expr") []]) (TCons ("AbstractHaskell","Expr") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 5) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case  Flex (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case  Flex (Var 11) [Branch (Pattern ("Prelude",":") [12,13]) (Case  Flex (Var 13) [Branch (Pattern ("Prelude",":") [14,15]) (Case  Flex (Var 15) [Branch (Pattern ("Prelude",":") [16,17]) (Case  Flex (Var 17) [Branch (Pattern ("Prelude","[]") []) (Var 4)])])])])])])])])])),Func ("TransTypes","coverRules._#selFP104#y") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("AbstractHaskell","Expr") []]) (TCons ("AbstractHaskell","Expr") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 5) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case  Flex (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case  Flex (Var 11) [Branch (Pattern ("Prelude",":") [12,13]) (Case  Flex (Var 13) [Branch (Pattern ("Prelude",":") [14,15]) (Case  Flex (Var 15) [Branch (Pattern ("Prelude",":") [16,17]) (Case  Flex (Var 17) [Branch (Pattern ("Prelude","[]") []) (Var 6)])])])])])])])])])),Func ("TransTypes","coverRules._#selFP105#xs") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("AbstractHaskell","Expr") []]) (TCons ("AbstractHaskell","Expr") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 5) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case  Flex (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case  Flex (Var 11) [Branch (Pattern ("Prelude",":") [12,13]) (Case  Flex (Var 13) [Branch (Pattern ("Prelude",":") [14,15]) (Case  Flex (Var 15) [Branch (Pattern ("Prelude",":") [16,17]) (Case  Flex (Var 17) [Branch (Pattern ("Prelude","[]") []) (Var 8)])])])])])])])])])),Func ("TransTypes","coverRules._#selFP106#c") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("AbstractHaskell","Expr") []]) (TCons ("AbstractHaskell","Expr") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 5) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case  Flex (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case  Flex (Var 11) [Branch (Pattern ("Prelude",":") [12,13]) (Case  Flex (Var 13) [Branch (Pattern ("Prelude",":") [14,15]) (Case  Flex (Var 15) [Branch (Pattern ("Prelude",":") [16,17]) (Case  Flex (Var 17) [Branch (Pattern ("Prelude","[]") []) (Var 10)])])])])])])])])])),Func ("TransTypes","coverRules._#selFP107#e") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("AbstractHaskell","Expr") []]) (TCons ("AbstractHaskell","Expr") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 5) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case  Flex (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case  Flex (Var 11) [Branch (Pattern ("Prelude",":") [12,13]) (Case  Flex (Var 13) [Branch (Pattern ("Prelude",":") [14,15]) (Case  Flex (Var 15) [Branch (Pattern ("Prelude",":") [16,17]) (Case  Flex (Var 17) [Branch (Pattern ("Prelude","[]") []) (Var 12)])])])])])])])])])),Func ("TransTypes","coverRules._#selFP108#cd") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("AbstractHaskell","Expr") []]) (TCons ("AbstractHaskell","Expr") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 5) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case  Flex (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case  Flex (Var 11) [Branch (Pattern ("Prelude",":") [12,13]) (Case  Flex (Var 13) [Branch (Pattern ("Prelude",":") [14,15]) (Case  Flex (Var 15) [Branch (Pattern ("Prelude",":") [16,17]) (Case  Flex (Var 17) [Branch (Pattern ("Prelude","[]") []) (Var 14)])])])])])])])])])),Func ("TransTypes","coverRules._#selFP109#info") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("AbstractHaskell","Expr") []]) (TCons ("AbstractHaskell","Expr") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 5) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case  Flex (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case  Flex (Var 11) [Branch (Pattern ("Prelude",":") [12,13]) (Case  Flex (Var 13) [Branch (Pattern ("Prelude",":") [14,15]) (Case  Flex (Var 15) [Branch (Pattern ("Prelude",":") [16,17]) (Case  Flex (Var 17) [Branch (Pattern ("Prelude","[]") []) (Var 16)])])])])])])])])])),Func ("TransTypes","coverRules._#lambda25") 1 Private (FuncType (TCons ("AbstractHaskell","Rule") []) (TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("AbstractHaskell","Rule") []])) (Rule [1] (Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("TransTypes","cover") [],Var 1])),Func ("TransTypes","mkCoverConsRule") 2 Private (FuncType (TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Base","HOClass") []]) (FuncType (TCons ("FlatCurry","ConsDecl") []) (TCons ("Prelude","[]") [TCons ("AbstractHaskell","Rule") []]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("FlatCurry","Cons") [3,4,5,6]) (Case  Rigid (Comb FuncCall ("TransTypes","mkCoverConsRule.isHoCons.369") [Var 1,Var 3]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("TransTypes","mkCoverConsRule.rule.369") [Var 4],Comb ConsCall ("Prelude",":") [Var 3,Comb ConsCall ("Prelude",":") [Comb FuncCall ("Names","mkHoConsName") [Var 3],Comb ConsCall ("Prelude","[]") []]]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransTypes","mkCoverConsRule.rule.369") [Var 4,Var 3],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])),Func ("TransTypes","mkCoverConsRule.isHoCons.369") 2 Private (FuncType (TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Base","HOClass") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Comb FuncCall ("Prelude","==") [Comb FuncCall ("FiniteMap","lookupFM") [Var 1,Var 2],Comb ConsCall ("Prelude","Just") [Comb ConsCall ("Base","HO") []]])),Func ("TransTypes","mkCoverConsRule.rule.369") 2 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("AbstractHaskell","Rule") []))) (Rule [1,2] (Comb FuncCall ("TransTypes","simpleRule") [Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransTypes","consPattern") [Var 2,Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude","[]") []],Var 1],Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("AbstractHaskellGoodies","applyF") [Var 2,Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("TransTypes","mkCoverConsRule.rule.369._#lambda26") [],Comb FuncCall ("Prelude","enumFromTo") [Lit (Intc  1),Var 1]]]])),Func ("TransTypes","mkCoverConsRule.rule.369._#lambda26") 1 Private (FuncType (TCons ("Prelude","Int") []) (TCons ("AbstractHaskell","Expr") [])) (Rule [1] (Comb FuncCall ("AbstractHaskellGoodies","applyF") [Comb FuncCall ("TransTypes","cover") [],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Var") [Comb ConsCall ("Prelude","(,)") [Var 1,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","show") [Var 1]]]],Comb ConsCall ("Prelude","[]") []]])),Func ("TransTypes","mkChoicePattern") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("AbstractHaskell","Pattern") []))) (Rule [1,2] (Let [(3,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("TransTypes","newVars") [],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude","[]") []]]]]]),(4,Comb FuncCall ("TransTypes","mkChoicePattern._#selFP111#cd") [Var 3]),(5,Comb FuncCall ("TransTypes","mkChoicePattern._#selFP112#idVar") [Var 3]),(6,Comb FuncCall ("TransTypes","mkChoicePattern._#selFP113#x") [Var 3]),(7,Comb FuncCall ("TransTypes","mkChoicePattern._#selFP114#y") [Var 3])] (Comb ConsCall ("AbstractHaskell","PComb") [Comb FuncCall ("Names","mkChoiceName") [Var 1],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","PVar") [Var 4],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","PVar") [Var 5],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","PVar") [Var 6],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","PVar") [Var 7],Comb ConsCall ("Prelude","[]") []]]]]]))),Func ("TransTypes","mkChoicePattern._#selFP111#cd") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 5) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case  Flex (Var 9) [Branch (Pattern ("Prelude","[]") []) (Var 2)])])])])])),Func ("TransTypes","mkChoicePattern._#selFP112#idVar") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 5) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case  Flex (Var 9) [Branch (Pattern ("Prelude","[]") []) (Var 4)])])])])])),Func ("TransTypes","mkChoicePattern._#selFP113#x") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 5) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case  Flex (Var 9) [Branch (Pattern ("Prelude","[]") []) (Var 6)])])])])])),Func ("TransTypes","mkChoicePattern._#selFP114#y") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 5) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case  Flex (Var 9) [Branch (Pattern ("Prelude","[]") []) (Var 8)])])])])])),Func ("TransTypes","mkChoicesPattern") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("AbstractHaskell","Pattern") [])) (Rule [1] (Let [(2,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("TransTypes","newVars") [],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude","[]") []]]]]),(3,Comb FuncCall ("TransTypes","mkChoicesPattern._#selFP116#cd") [Var 2]),(4,Comb FuncCall ("TransTypes","mkChoicesPattern._#selFP117#i") [Var 2]),(5,Comb FuncCall ("TransTypes","mkChoicesPattern._#selFP118#xs") [Var 2])] (Comb ConsCall ("AbstractHaskell","PComb") [Comb FuncCall ("Names","mkChoicesName") [Var 1],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","PVar") [Var 3],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","PVar") [Var 4],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","PVar") [Var 5],Comb ConsCall ("Prelude","[]") []]]]]))),Func ("TransTypes","mkChoicesPattern._#selFP116#cd") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 5) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 7) [Branch (Pattern ("Prelude","[]") []) (Var 2)])])])])),Func ("TransTypes","mkChoicesPattern._#selFP117#i") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 5) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 7) [Branch (Pattern ("Prelude","[]") []) (Var 4)])])])])),Func ("TransTypes","mkChoicesPattern._#selFP118#xs") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 5) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 7) [Branch (Pattern ("Prelude","[]") []) (Var 6)])])])])),Func ("TransTypes","mkNarrowedChoicesPattern") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("AbstractHaskell","Pattern") []))) (Rule [1,2] (Let [(3,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("TransTypes","newVars") [],Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude","[]") []]]]]]]),(4,Comb FuncCall ("TransTypes","mkNarrowedChoicesPattern._#selFP120#i") [Var 3]),(5,Comb FuncCall ("TransTypes","mkNarrowedChoicesPattern._#selFP121#cd") [Var 3]),(6,Comb FuncCall ("TransTypes","mkNarrowedChoicesPattern._#selFP122#u1") [Var 3]),(7,Comb FuncCall ("TransTypes","mkNarrowedChoicesPattern._#selFP123#u2") [Var 3]),(8,Comb FuncCall ("TransTypes","mkNarrowedChoicesPattern._#selFP124#xs") [Var 3])] (Comb ConsCall ("AbstractHaskell","PComb") [Comb FuncCall ("Names","mkChoicesName") [Var 1],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","PVar") [Var 5],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","PAs") [Var 4,Comb ConsCall ("AbstractHaskell","PComb") [Comb FuncCall ("TransTypes","basics") [Comb ConsCall ("Prelude",":") [Lit (Charc  'N'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'I'),Comb ConsCall ("Prelude",":") [Lit (Charc  'D'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","PVar") [Var 6],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","PVar") [Var 7],Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","PVar") [Var 8],Comb ConsCall ("Prelude","[]") []]]]]))),Func ("TransTypes","mkNarrowedChoicesPattern._#selFP120#i") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 5) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case  Flex (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case  Flex (Var 11) [Branch (Pattern ("Prelude","[]") []) (Var 2)])])])])])])),Func ("TransTypes","mkNarrowedChoicesPattern._#selFP121#cd") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 5) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case  Flex (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case  Flex (Var 11) [Branch (Pattern ("Prelude","[]") []) (Var 4)])])])])])])),Func ("TransTypes","mkNarrowedChoicesPattern._#selFP122#u1") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 5) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case  Flex (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case  Flex (Var 11) [Branch (Pattern ("Prelude","[]") []) (Var 6)])])])])])])),Func ("TransTypes","mkNarrowedChoicesPattern._#selFP123#u2") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 5) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case  Flex (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case  Flex (Var 11) [Branch (Pattern ("Prelude","[]") []) (Var 8)])])])])])])),Func ("TransTypes","mkNarrowedChoicesPattern._#selFP124#xs") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 5) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case  Flex (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case  Flex (Var 11) [Branch (Pattern ("Prelude","[]") []) (Var 10)])])])])])])),Func ("TransTypes","mkFreeChoicesPattern") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("AbstractHaskell","Pattern") []))) (Rule [1,2] (Let [(3,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("TransTypes","newVars") [],Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude","[]") []]]]]]]),(4,Comb FuncCall ("TransTypes","mkFreeChoicesPattern._#selFP126#i") [Var 3]),(5,Comb FuncCall ("TransTypes","mkFreeChoicesPattern._#selFP127#cd") [Var 3]),(6,Comb FuncCall ("TransTypes","mkFreeChoicesPattern._#selFP128#u1") [Var 3]),(7,Comb FuncCall ("TransTypes","mkFreeChoicesPattern._#selFP129#u2") [Var 3]),(8,Comb FuncCall ("TransTypes","mkFreeChoicesPattern._#selFP130#xs") [Var 3])] (Comb ConsCall ("AbstractHaskell","PComb") [Comb FuncCall ("Names","mkChoicesName") [Var 1],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","PVar") [Var 5],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","PAs") [Var 4,Comb ConsCall ("AbstractHaskell","PComb") [Comb FuncCall ("TransTypes","basics") [Comb ConsCall ("Prelude",":") [Lit (Charc  'F'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'I'),Comb ConsCall ("Prelude",":") [Lit (Charc  'D'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","PVar") [Var 6],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","PVar") [Var 7],Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","PVar") [Var 8],Comb ConsCall ("Prelude","[]") []]]]]))),Func ("TransTypes","mkFreeChoicesPattern._#selFP126#i") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 5) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case  Flex (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case  Flex (Var 11) [Branch (Pattern ("Prelude","[]") []) (Var 2)])])])])])])),Func ("TransTypes","mkFreeChoicesPattern._#selFP127#cd") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 5) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case  Flex (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case  Flex (Var 11) [Branch (Pattern ("Prelude","[]") []) (Var 4)])])])])])])),Func ("TransTypes","mkFreeChoicesPattern._#selFP128#u1") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 5) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case  Flex (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case  Flex (Var 11) [Branch (Pattern ("Prelude","[]") []) (Var 6)])])])])])])),Func ("TransTypes","mkFreeChoicesPattern._#selFP129#u2") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 5) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case  Flex (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case  Flex (Var 11) [Branch (Pattern ("Prelude","[]") []) (Var 8)])])])])])])),Func ("TransTypes","mkFreeChoicesPattern._#selFP130#xs") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 5) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case  Flex (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case  Flex (Var 11) [Branch (Pattern ("Prelude","[]") []) (Var 10)])])])])])])),Func ("TransTypes","mkVarChoicesPattern") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("AbstractHaskell","Pattern") [])) (Rule [1] (Let [(2,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("TransTypes","newVars") [],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude","[]") []]]]]),(3,Comb FuncCall ("TransTypes","mkVarChoicesPattern._#selFP132#cd") [Var 2]),(4,Comb FuncCall ("TransTypes","mkVarChoicesPattern._#selFP133#i") [Var 2]),(5,Comb FuncCall ("TransTypes","mkVarChoicesPattern._#selFP134#xs") [Var 2])] (Comb ConsCall ("AbstractHaskell","PComb") [Comb FuncCall ("Names","mkChoicesName") [Var 1],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","PVar") [Var 3],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","PVar") [Var 4],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","PVar") [Var 5],Comb ConsCall ("Prelude","[]") []]]]]))),Func ("TransTypes","mkVarChoicesPattern._#selFP132#cd") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 5) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 7) [Branch (Pattern ("Prelude","[]") []) (Var 2)])])])])),Func ("TransTypes","mkVarChoicesPattern._#selFP133#i") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 5) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 7) [Branch (Pattern ("Prelude","[]") []) (Var 4)])])])])),Func ("TransTypes","mkVarChoicesPattern._#selFP134#xs") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 5) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 7) [Branch (Pattern ("Prelude","[]") []) (Var 6)])])])])),Func ("TransTypes","mkFailPattern") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("AbstractHaskell","Pattern") [])) (Rule [1] (Let [(2,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("TransTypes","newVars") [],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude","[]") []]]]),(3,Comb FuncCall ("TransTypes","mkFailPattern._#selFP136#cd") [Var 2]),(4,Comb FuncCall ("TransTypes","mkFailPattern._#selFP137#info") [Var 2])] (Comb ConsCall ("AbstractHaskell","PComb") [Comb FuncCall ("Names","mkFailName") [Var 1],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","PVar") [Var 3],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","PVar") [Var 4],Comb ConsCall ("Prelude","[]") []]]]))),Func ("TransTypes","mkFailPattern._#selFP136#cd") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 5) [Branch (Pattern ("Prelude","[]") []) (Var 2)])])])),Func ("TransTypes","mkFailPattern._#selFP137#info") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 5) [Branch (Pattern ("Prelude","[]") []) (Var 4)])])])),Func ("TransTypes","mkGuardPattern") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("AbstractHaskell","Pattern") [])) (Rule [1] (Let [(2,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("TransTypes","newVars") [],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude","[]") []]]]]),(3,Comb FuncCall ("TransTypes","mkGuardPattern._#selFP139#cd") [Var 2]),(4,Comb FuncCall ("TransTypes","mkGuardPattern._#selFP140#c") [Var 2]),(5,Comb FuncCall ("TransTypes","mkGuardPattern._#selFP141#e") [Var 2])] (Comb ConsCall ("AbstractHaskell","PComb") [Comb FuncCall ("Names","mkGuardName") [Var 1],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","PVar") [Var 3],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","PVar") [Var 4],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","PVar") [Var 5],Comb ConsCall ("Prelude","[]") []]]]]))),Func ("TransTypes","mkGuardPattern._#selFP139#cd") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 5) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 7) [Branch (Pattern ("Prelude","[]") []) (Var 2)])])])])),Func ("TransTypes","mkGuardPattern._#selFP140#c") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 5) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 7) [Branch (Pattern ("Prelude","[]") []) (Var 4)])])])])),Func ("TransTypes","mkGuardPattern._#selFP141#e") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 5) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 7) [Branch (Pattern ("Prelude","[]") []) (Var 6)])])])])),Func ("TransTypes","mkPVar") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","Int") []) (TCons ("AbstractHaskell","Pattern") []))) (Rule [1,2] (Comb FuncCall ("Prelude","$") [Comb (ConsPartCall 1) ("AbstractHaskell","PVar") [],Comb FuncCall ("TransTypes","mkVarName") [Var 1,Var 2]])),Func ("TransTypes","mkVar") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","Int") []) (TCons ("AbstractHaskell","Expr") []))) (Rule [1,2] (Comb FuncCall ("Prelude","$") [Comb (ConsPartCall 1) ("AbstractHaskell","Var") [],Comb FuncCall ("TransTypes","mkVarName") [Var 1,Var 2]])),Func ("TransTypes","mkVarName") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TVar 0) (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]))) (Rule [1,2] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude","[]") []]]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","(,)") [Var 2,Var 1]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","(,)") [Var 2,Comb FuncCall ("Prelude","++") [Var 1,Comb FuncCall ("Prelude","show") [Var 2]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])),Func ("TransTypes","newVars") 0 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Comb (FuncPartCall 1) ("Prelude","zip") [Comb FuncCall ("Prelude","enumFrom") [Lit (Intc  1)]])),Func ("TransTypes","mkInstance") 4 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (FuncType (TCons ("AbstractHaskell","TypeExpr") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("AbstractHaskell","Rule") []]]) (TCons ("AbstractHaskell","TypeDecl") [])))))) (Rule [1,2,3,4] (Comb FuncCall ("Prelude","$") [Comb (ConsPartCall 2) ("AbstractHaskell","Instance") [Var 1,Var 3],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","concatMap") [Comb (FuncPartCall 1) ("TransTypes","mkInstance._#lambda27") [Var 4]],Comb ConsCall ("Prelude",":") [Var 1,Var 2]]])),Func ("TransTypes","mkInstance._#lambda27") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("AbstractHaskell","Context") []]))) (Rule [1,2] (Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("TransTypes","mkInstance._#lambda27._#lambda28") [Var 2],Var 1])),Func ("TransTypes","mkInstance._#lambda27._#lambda28") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("AbstractHaskell","Context") []))) (Rule [1,2] (Comb ConsCall ("AbstractHaskell","Context") [Var 1,Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude","[]") []]])),Func ("TransTypes","consPattern") 3 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","Int") []) (TCons ("AbstractHaskell","Pattern") [])))) (Rule [1,2,3] (Comb FuncCall ("Prelude","$") [Comb (ConsPartCall 1) ("AbstractHaskell","PComb") [Var 1],Comb FuncCall ("Prelude","map") [Comb FuncCall ("Prelude",".") [Comb (ConsPartCall 1) ("AbstractHaskell","PVar") [],Comb (FuncPartCall 1) ("TransTypes","mkVarName") [Var 2]],Comb FuncCall ("Prelude","enumFromTo") [Lit (Intc  1),Var 3]]])),Func ("TransTypes","catchAllCase") 2 Private (FuncType (TVar 0) (FuncType (TCons ("AbstractHaskell","Expr") []) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("AbstractHaskell","Rule") []]]))) (Rule [1,2] (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Var 1,Comb FuncCall ("TransTypes","simpleRule") [Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","PVar") [Comb ConsCall ("Prelude","(,)") [Lit (Intc  1),Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","PVar") [Comb ConsCall ("Prelude","(,)") [Lit (Intc  2),Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","PVar") [Comb ConsCall ("Prelude","(,)") [Lit (Intc  3),Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude","[]") []]]],Var 2]],Comb ConsCall ("Prelude","[]") []])),Func ("TransTypes","simpleRule") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("AbstractHaskell","Pattern") []]) (FuncType (TCons ("AbstractHaskell","Expr") []) (TCons ("AbstractHaskell","Rule") []))) (Rule [1,2] (Comb ConsCall ("AbstractHaskell","Rule") [Var 1,Comb ConsCall ("Prelude",":") [Comb FuncCall ("AbstractHaskellGoodies","noGuard") [Var 2],Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude","[]") []])),Func ("TransTypes","intc") 1 Private (FuncType (TCons ("Prelude","Int") []) (TCons ("AbstractHaskell","Expr") [])) (Rule [1] (Comb FuncCall ("Prelude","$") [Comb (ConsPartCall 1) ("AbstractHaskell","Lit") [],Comb ConsCall ("AbstractHaskell","Intc") [Var 1]])),Func ("TransTypes","charc") 1 Private (FuncType (TCons ("Prelude","Char") []) (TCons ("AbstractHaskell","Expr") [])) (Rule [1] (Comb FuncCall ("Prelude","$") [Comb (ConsPartCall 1) ("AbstractHaskell","Lit") [],Comb ConsCall ("AbstractHaskell","Charc") [Var 1]])),Func ("TransTypes","mkIdList") 2 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("AbstractHaskell","Expr") []) (TCons ("Prelude","[]") [TCons ("AbstractHaskell","Expr") []]))) (Rule [1,2] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 1,Lit (Intc  0)]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 1,Lit (Intc  1)]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransTypes","left") [Var 2],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("TransTypes","mkIdList.mkIdList'.425") [Var 1,Var 2]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])),Func ("TransTypes","mkIdList.mkIdList'.425") 2 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("AbstractHaskell","Expr") []) (TCons ("Prelude","[]") [TCons ("AbstractHaskell","Expr") []]))) (Rule [1,2] (Let [(3,Comb FuncCall ("Prelude","div") [Var 1,Lit (Intc  2)])] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 1,Lit (Intc  1)]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("TransTypes","mkIdList.mkIdList'.425") [Comb FuncCall ("Prelude","-") [Var 1,Var 3],Comb FuncCall ("TransTypes","left") [Var 2]],Comb FuncCall ("TransTypes","mkIdList.mkIdList'.425") [Var 3,Comb FuncCall ("TransTypes","right") [Var 2]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])]))),Func ("TransTypes","mkSuppList") 2 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("AbstractHaskell","Expr") []) (TCons ("Prelude","[]") [TCons ("AbstractHaskell","Expr") []]))) (Rule [1,2] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 1,Lit (Intc  0)]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 1,Lit (Intc  1)]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransTypes","leftsupp") [Var 2],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("TransTypes","mkSuppList.mkSuppList'.434") [Var 1,Var 2]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])),Func ("TransTypes","mkSuppList.mkSuppList'.434") 2 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("AbstractHaskell","Expr") []) (TCons ("Prelude","[]") [TCons ("AbstractHaskell","Expr") []]))) (Rule [1,2] (Let [(3,Comb FuncCall ("Prelude","div") [Var 1,Lit (Intc  2)])] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 1,Lit (Intc  1)]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("TransTypes","mkSuppList.mkSuppList'.434") [Comb FuncCall ("Prelude","-") [Var 1,Var 3],Comb FuncCall ("TransTypes","leftsupp") [Var 2]],Comb FuncCall ("TransTypes","mkSuppList.mkSuppList'.434") [Var 3,Comb FuncCall ("TransTypes","rightsupp") [Var 2]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])]))),Func ("TransTypes","isListType") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","Bool") [])) (Rule [1] (Comb FuncCall ("Prelude","==") [Var 1,Comb FuncCall ("Names","renameQName") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb ConsCall ("Prelude",":") [Lit (Charc  '['),Comb ConsCall ("Prelude",":") [Lit (Charc  ']'),Comb ConsCall ("Prelude","[]") []]]]]])),Func ("TransTypes","isTupleType") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","Bool") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","==") [Var 2,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Names","renameModule") [],Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]]]],Comb FuncCall ("Prelude","==") [Comb FuncCall ("Prelude","take") [Lit (Intc  8),Var 3],Comb ConsCall ("Prelude",":") [Lit (Charc  'O'),Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude",":") [Lit (Charc  'T'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]])])),Func ("TransTypes","showQName") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Comb FuncCall ("Prelude","++") [Var 2,Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Var 3]])])),Func ("TransTypes","left") 1 Private (FuncType (TCons ("AbstractHaskell","Expr") []) (TCons ("AbstractHaskell","Expr") [])) (Rule [1] (Comb FuncCall ("AbstractHaskellGoodies","applyF") [Comb FuncCall ("TransTypes","basics") [Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'I'),Comb ConsCall ("Prelude",":") [Lit (Charc  'D'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb ConsCall ("Prelude",":") [Var 1,Comb ConsCall ("Prelude","[]") []]])),Func ("TransTypes","right") 1 Private (FuncType (TCons ("AbstractHaskell","Expr") []) (TCons ("AbstractHaskell","Expr") [])) (Rule [1] (Comb FuncCall ("AbstractHaskellGoodies","applyF") [Comb FuncCall ("TransTypes","basics") [Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'I'),Comb ConsCall ("Prelude",":") [Lit (Charc  'D'),Comb ConsCall ("Prelude","[]") []]]]]]]]],Comb ConsCall ("Prelude",":") [Var 1,Comb ConsCall ("Prelude","[]") []]])),Func ("TransTypes","leftsupp") 1 Private (FuncType (TCons ("AbstractHaskell","Expr") []) (TCons ("AbstractHaskell","Expr") [])) (Rule [1] (Comb FuncCall ("AbstractHaskellGoodies","applyF") [Comb FuncCall ("TransTypes","basics") [Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'S'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]],Comb ConsCall ("Prelude",":") [Var 1,Comb ConsCall ("Prelude","[]") []]])),Func ("TransTypes","rightsupp") 1 Private (FuncType (TCons ("AbstractHaskell","Expr") []) (TCons ("AbstractHaskell","Expr") [])) (Rule [1] (Comb FuncCall ("AbstractHaskellGoodies","applyF") [Comb FuncCall ("TransTypes","basics") [Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'S'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]],Comb ConsCall ("Prelude",":") [Var 1,Comb ConsCall ("Prelude","[]") []]])),Func ("TransTypes","idType") 0 Private (TCons ("AbstractHaskell","TypeExpr") []) (Rule [] (Comb FuncCall ("AbstractHaskellGoodies","baseType") [Comb FuncCall ("TransTypes","basics") [Comb ConsCall ("Prelude",":") [Lit (Charc  'I'),Comb ConsCall ("Prelude",":") [Lit (Charc  'D'),Comb ConsCall ("Prelude","[]") []]]]])),Func ("TransTypes","coverType") 0 Private (TCons ("AbstractHaskell","TypeExpr") []) (Rule [] (Comb FuncCall ("AbstractHaskellGoodies","baseType") [Comb FuncCall ("TransTypes","basics") [Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'v'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude","[]") []]]]]]]])),Func ("TransTypes","defCover") 0 Private (TCons ("AbstractHaskell","Expr") []) (Rule [] (Comb FuncCall ("AbstractHaskellGoodies","applyF") [Comb FuncCall ("TransTypes","basics") [Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'v'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude","[]") []]]]]]]]]],Comb ConsCall ("Prelude","[]") []])),Func ("TransTypes","failInfoType") 0 Private (TCons ("AbstractHaskell","TypeExpr") []) (Rule [] (Comb FuncCall ("AbstractHaskellGoodies","baseType") [Comb FuncCall ("TransTypes","basics") [Comb ConsCall ("Prelude",":") [Lit (Charc  'F'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'I'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]])),Func ("TransTypes","constraintType") 0 Private (TCons ("AbstractHaskell","TypeExpr") []) (Rule [] (Comb FuncCall ("AbstractHaskellGoodies","baseType") [Comb FuncCall ("TransTypes","basics") [Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]])),Func ("TransTypes","basics") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc  'B'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude","[]") []]]]]]],Var 1])),Func ("TransTypes","curryPre") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Names","renameModule") [],Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]]],Var 1])),Func ("TransTypes","narrow") 0 Private (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (Rule [] (Comb FuncCall ("TransTypes","basics") [Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude","[]") []]]]]]]])),Func ("TransTypes","narrows") 0 Private (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (Rule [] (Comb FuncCall ("TransTypes","basics") [Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude","[]") []]]]]]]]])),Func ("TransTypes","cover") 0 Private (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (Rule [] (Comb FuncCall ("TransTypes","basics") [Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'v'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude","[]") []]]]]]])),Func ("TransTypes","incCover") 0 Private (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (Rule [] (Comb FuncCall ("TransTypes","basics") [Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'v'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]))] []