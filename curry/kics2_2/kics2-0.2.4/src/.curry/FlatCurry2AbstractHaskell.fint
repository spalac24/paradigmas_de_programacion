Prog "FlatCurry2AbstractHaskell" ["AbstractHaskell","AbstractHaskellGoodies","FlatCurry","List","Names","Prelude"] [] [Func ("FlatCurry2AbstractHaskell","fcy2abs") 1 Public (FuncType (TCons ("FlatCurry","Prog") []) (TCons ("AbstractHaskell","Prog") [])) (Rule [] (Var 0)),Func ("FlatCurry2AbstractHaskell","fcy2absTDecl") 1 Public (FuncType (TCons ("FlatCurry","TypeDecl") []) (TCons ("AbstractHaskell","TypeDecl") [])) (Rule [] (Var 0)),Func ("FlatCurry2AbstractHaskell","fcy2absOp") 1 Public (FuncType (TCons ("FlatCurry","OpDecl") []) (TCons ("AbstractHaskell","OpDecl") [])) (Rule [] (Var 0)),Func ("FlatCurry2AbstractHaskell","fcy2absFix") 1 Public (FuncType (TCons ("FlatCurry","Fixity") []) (TCons ("AbstractHaskell","Fixity") [])) (Rule [] (Var 0)),Func ("FlatCurry2AbstractHaskell","fcy2absFDecl") 1 Public (FuncType (TCons ("FlatCurry","FuncDecl") []) (TCons ("AbstractHaskell","FuncDecl") [])) (Rule [] (Var 0)),Func ("FlatCurry2AbstractHaskell","fcy2absRule") 1 Public (FuncType (TCons ("FlatCurry","Rule") []) (TCons ("AbstractHaskell","Rules") [])) (Rule [] (Var 0)),Func ("FlatCurry2AbstractHaskell","fcy2absExpr") 1 Public (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("AbstractHaskell","Expr") [])) (Rule [] (Var 0)),Func ("FlatCurry2AbstractHaskell","applyLambdaHack") 2 Public (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","Expr") []]) (TCons ("AbstractHaskell","Expr") []))) (Rule [] (Var 0)),Func ("FlatCurry2AbstractHaskell","fcy2absBranch") 1 Public (FuncType (TCons ("FlatCurry","BranchExpr") []) (TCons ("AbstractHaskell","BranchExpr") [])) (Rule [] (Var 0)),Func ("FlatCurry2AbstractHaskell","fcy2absPattern") 1 Public (FuncType (TCons ("FlatCurry","Pattern") []) (TCons ("AbstractHaskell","Pattern") [])) (Rule [] (Var 0)),Func ("FlatCurry2AbstractHaskell","fcy2absVis") 1 Public (FuncType (TCons ("FlatCurry","Visibility") []) (TCons ("AbstractHaskell","Visibility") [])) (Rule [] (Var 0)),Func ("FlatCurry2AbstractHaskell","fcy2absTVar") 1 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [] (Var 0)),Func ("FlatCurry2AbstractHaskell","fcy2absCDecl") 1 Public (FuncType (TCons ("FlatCurry","ConsDecl") []) (TCons ("AbstractHaskell","ConsDecl") [])) (Rule [] (Var 0)),Func ("FlatCurry2AbstractHaskell","fcy2absTExp") 1 Public (FuncType (TCons ("FlatCurry","TypeExpr") []) (TCons ("AbstractHaskell","TypeExpr") [])) (Rule [] (Var 0)),Func ("FlatCurry2AbstractHaskell","fcy2absVar") 1 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [] (Var 0)),Func ("FlatCurry2AbstractHaskell","fcy2absLit") 1 Public (FuncType (TCons ("FlatCurry","Literal") []) (TCons ("AbstractHaskell","Literal") [])) (Rule [] (Var 0)),Func ("FlatCurry2AbstractHaskell","tvarsOf") 1 Public (FuncType (TCons ("FlatCurry","TypeExpr") []) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []])) (Rule [] (Var 0))] []