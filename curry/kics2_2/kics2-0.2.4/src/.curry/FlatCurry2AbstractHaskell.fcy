Prog "FlatCurry2AbstractHaskell" ["AbstractHaskell","AbstractHaskellGoodies","FlatCurry","List","Names","Prelude"] [] [Func ("FlatCurry2AbstractHaskell","fcy2abs") 1 Public (FuncType (TCons ("FlatCurry","Prog") []) (TCons ("AbstractHaskell","Prog") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","Prog") [2,3,4,5,6]) (Comb ConsCall ("AbstractHaskell","Prog") [Var 2,Var 3,Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("FlatCurry2AbstractHaskell","fcy2absTDecl") [],Var 4],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("FlatCurry2AbstractHaskell","fcy2absFDecl") [],Var 5],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("FlatCurry2AbstractHaskell","fcy2absOp") [],Var 6]])])),Func ("FlatCurry2AbstractHaskell","fcy2absTDecl") 1 Public (FuncType (TCons ("FlatCurry","TypeDecl") []) (TCons ("AbstractHaskell","TypeDecl") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","TypeSyn") [2,3,4,5]) (Comb ConsCall ("AbstractHaskell","TypeSyn") [Var 2,Comb FuncCall ("FlatCurry2AbstractHaskell","fcy2absVis") [Var 3],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("FlatCurry2AbstractHaskell","fcy2absTVar") [],Var 4],Comb FuncCall ("FlatCurry2AbstractHaskell","fcy2absTExp") [Var 5]]),Branch (Pattern ("FlatCurry","Type") [6,7,8,9]) (Comb ConsCall ("AbstractHaskell","Type") [Var 6,Comb FuncCall ("FlatCurry2AbstractHaskell","fcy2absVis") [Var 7],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("FlatCurry2AbstractHaskell","fcy2absTVar") [],Var 8],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("FlatCurry2AbstractHaskell","fcy2absCDecl") [],Var 9]])])),Func ("FlatCurry2AbstractHaskell","fcy2absOp") 1 Public (FuncType (TCons ("FlatCurry","OpDecl") []) (TCons ("AbstractHaskell","OpDecl") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","Op") [2,3,4]) (Comb ConsCall ("AbstractHaskell","Op") [Var 2,Comb FuncCall ("FlatCurry2AbstractHaskell","fcy2absFix") [Var 3],Var 4])])),Func ("FlatCurry2AbstractHaskell","fcy2absFix") 1 Public (FuncType (TCons ("FlatCurry","Fixity") []) (TCons ("AbstractHaskell","Fixity") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","InfixOp") []) (Comb ConsCall ("AbstractHaskell","InfixOp") []),Branch (Pattern ("FlatCurry","InfixlOp") []) (Comb ConsCall ("AbstractHaskell","InfixlOp") []),Branch (Pattern ("FlatCurry","InfixrOp") []) (Comb ConsCall ("AbstractHaskell","InfixrOp") [])])),Func ("FlatCurry2AbstractHaskell","fcy2absFDecl") 1 Public (FuncType (TCons ("FlatCurry","FuncDecl") []) (TCons ("AbstractHaskell","FuncDecl") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","Func") [2,3,4,5,6]) (Let [(7,Comb FuncCall ("FlatCurry2AbstractHaskell","tvarsOf") [Var 5]),(8,Case  Rigid (Comb FuncCall ("Prelude","null") [Var 7]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("AbstractHaskell","FType") [Comb FuncCall ("FlatCurry2AbstractHaskell","fcy2absTExp") [Var 5]]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("AbstractHaskell","CType") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","concatMap") [Comb (FuncPartCall 1) ("FlatCurry2AbstractHaskell","fcy2absFDecl._#lambda1") []],Var 7],Comb FuncCall ("FlatCurry2AbstractHaskell","fcy2absTExp") [Var 5]])])] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 5,Comb ConsCall ("FlatCurry","TVar") [Comb FuncCall ("Prelude","negate") [Lit (Intc  42)]]]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("AbstractHaskell","Func") [Comb ConsCall ("Prelude","[]") [],Var 2,Var 3,Comb FuncCall ("FlatCurry2AbstractHaskell","fcy2absVis") [Var 4],Comb ConsCall ("AbstractHaskell","Untyped") [],Comb FuncCall ("FlatCurry2AbstractHaskell","fcy2absRule") [Var 6]]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("AbstractHaskell","Func") [Comb ConsCall ("Prelude","[]") [],Var 2,Var 3,Comb FuncCall ("FlatCurry2AbstractHaskell","fcy2absVis") [Var 4],Var 8,Comb FuncCall ("FlatCurry2AbstractHaskell","fcy2absRule") [Var 6]])]))])),Func ("FlatCurry2AbstractHaskell","fcy2absFDecl._#lambda1") 1 Private (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","[]") [TCons ("AbstractHaskell","Context") []])) (Rule [1] (Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Context") [Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Names","curryPrelude") [],Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude","[]") []]]]]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("FlatCurry2AbstractHaskell","fcy2absTVar") [Var 1],Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude","[]") []])),Func ("FlatCurry2AbstractHaskell","fcy2absRule") 1 Public (FuncType (TCons ("FlatCurry","Rule") []) (TCons ("AbstractHaskell","Rules") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","Rule") [2,3]) (Comb ConsCall ("AbstractHaskell","Rules") [Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Rule") [Comb FuncCall ("Prelude","map") [Comb FuncCall ("Prelude",".") [Comb (ConsPartCall 1) ("AbstractHaskell","PVar") [],Comb (FuncPartCall 1) ("FlatCurry2AbstractHaskell","fcy2absVar") []],Var 2],Comb ConsCall ("Prelude",":") [Comb FuncCall ("AbstractHaskellGoodies","noGuard") [Comb FuncCall ("FlatCurry2AbstractHaskell","fcy2absExpr") [Var 3]],Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude","[]") []]]),Branch (Pattern ("FlatCurry","External") [4]) (Comb ConsCall ("AbstractHaskell","External") [Var 4])])),Func ("FlatCurry2AbstractHaskell","fcy2absExpr") 1 Public (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("AbstractHaskell","Expr") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","Var") [2]) (Comb ConsCall ("AbstractHaskell","Var") [Comb FuncCall ("FlatCurry2AbstractHaskell","fcy2absVar") [Var 2]]),Branch (Pattern ("FlatCurry","Lit") [3]) (Comb ConsCall ("AbstractHaskell","Lit") [Comb FuncCall ("FlatCurry2AbstractHaskell","fcy2absLit") [Var 3]]),Branch (Pattern ("FlatCurry","Comb") [4,5,6]) (Let [(7,Comb FuncCall ("Prelude","==") [Comb FuncCall ("Prelude","head") [Comb FuncCall ("Prelude","snd") [Var 5]],Lit (Charc  '\\')])] (Case  Rigid (Var 7) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("FlatCurry2AbstractHaskell","applyLambdaHack") [Var 5,Var 6]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("AbstractHaskellGoodies","applyF") [Var 5,Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("FlatCurry2AbstractHaskell","fcy2absExpr") [],Var 6]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])),Branch (Pattern ("FlatCurry","Let") [8,9]) (Comb ConsCall ("AbstractHaskell","Let") [Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("FlatCurry2AbstractHaskell","fcy2absExpr.ldecl.34") [],Var 8],Comb FuncCall ("FlatCurry2AbstractHaskell","fcy2absExpr") [Var 9]]),Branch (Pattern ("FlatCurry","Free") [10,11]) (Comb ConsCall ("AbstractHaskell","Let") [Comb FuncCall ("Prelude","map") [Comb FuncCall ("Prelude",".") [Comb (ConsPartCall 1) ("AbstractHaskell","LocalVar") [],Comb (FuncPartCall 1) ("FlatCurry2AbstractHaskell","fcy2absVar") []],Var 10],Comb FuncCall ("FlatCurry2AbstractHaskell","fcy2absExpr") [Var 11]]),Branch (Pattern ("FlatCurry","Or") [12,13]) (Comb FuncCall ("AbstractHaskellGoodies","applyF") [Comb FuncCall ("AbstractHaskellGoodies","pre") [Comb ConsCall ("Prelude",":") [Lit (Charc  '?'),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("FlatCurry2AbstractHaskell","fcy2absExpr") [],Comb ConsCall ("Prelude",":") [Var 12,Comb ConsCall ("Prelude",":") [Var 13,Comb ConsCall ("Prelude","[]") []]]]]),Branch (Pattern ("FlatCurry","Case") [14,15,16]) (Comb ConsCall ("AbstractHaskell","Case") [Comb FuncCall ("FlatCurry2AbstractHaskell","fcy2absExpr") [Var 15],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("FlatCurry2AbstractHaskell","fcy2absBranch") [],Var 16]]),Branch (Pattern ("FlatCurry","Typed") [17,18]) (Comb ConsCall ("AbstractHaskell","Typed") [Comb FuncCall ("FlatCurry2AbstractHaskell","fcy2absExpr") [Var 17],Comb FuncCall ("FlatCurry2AbstractHaskell","fcy2absTExp") [Var 18]])])),Func ("FlatCurry2AbstractHaskell","fcy2absExpr.ldecl.34") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","Expr") []]) (TCons ("AbstractHaskell","LocalDecl") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Comb ConsCall ("AbstractHaskell","LocalPat") [Comb ConsCall ("AbstractHaskell","PVar") [Comb FuncCall ("FlatCurry2AbstractHaskell","fcy2absVar") [Var 2]],Comb FuncCall ("FlatCurry2AbstractHaskell","fcy2absExpr") [Var 3],Comb ConsCall ("Prelude","[]") []])])),Func ("FlatCurry2AbstractHaskell","applyLambdaHack") 2 Public (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","Expr") []]) (TCons ("AbstractHaskell","Expr") []))) (Rule [1,2] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Let [(5,Comb ConsCall ("Prelude","(,)") [Var 3,Comb FuncCall ("Prelude","drop") [Lit (Intc  1),Var 4]])] (Comb ConsCall ("AbstractHaskell","Lambda") [Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","PVar") [Comb ConsCall ("Prelude","(,)") [Lit (Intc  1003),Comb ConsCall ("Prelude",":") [Lit (Charc  'z'),Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("AbstractHaskellGoodies","applyF") [Var 5,Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("FlatCurry2AbstractHaskell","applyLambdaHack.applyLambda.47") [],Var 2]]]))])),Func ("FlatCurry2AbstractHaskell","applyLambdaHack.applyLambda.47") 1 Private (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("AbstractHaskell","Expr") [])) (Rule [1] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 1,Comb ConsCall ("FlatCurry","Var") [Comb FuncCall ("Prelude","negate") [Lit (Intc  42)]]]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("AbstractHaskell","Var") [Comb ConsCall ("Prelude","(,)") [Lit (Intc  1003),Comb ConsCall ("Prelude",":") [Lit (Charc  'z'),Comb ConsCall ("Prelude","[]") []]]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("FlatCurry2AbstractHaskell","fcy2absExpr") [Var 1]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])),Func ("FlatCurry2AbstractHaskell","fcy2absBranch") 1 Public (FuncType (TCons ("FlatCurry","BranchExpr") []) (TCons ("AbstractHaskell","BranchExpr") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","Branch") [2,3]) (Comb ConsCall ("AbstractHaskell","Branch") [Comb FuncCall ("FlatCurry2AbstractHaskell","fcy2absPattern") [Var 2],Comb FuncCall ("FlatCurry2AbstractHaskell","fcy2absExpr") [Var 3]])])),Func ("FlatCurry2AbstractHaskell","fcy2absPattern") 1 Public (FuncType (TCons ("FlatCurry","Pattern") []) (TCons ("AbstractHaskell","Pattern") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","Pattern") [2,3]) (Comb ConsCall ("AbstractHaskell","PComb") [Var 2,Comb FuncCall ("Prelude","map") [Comb FuncCall ("Prelude",".") [Comb (ConsPartCall 1) ("AbstractHaskell","PVar") [],Comb (FuncPartCall 1) ("FlatCurry2AbstractHaskell","fcy2absVar") []],Var 3]]),Branch (Pattern ("FlatCurry","LPattern") [4]) (Comb ConsCall ("AbstractHaskell","PLit") [Comb FuncCall ("FlatCurry2AbstractHaskell","fcy2absLit") [Var 4]])])),Func ("FlatCurry2AbstractHaskell","fcy2absVis") 1 Public (FuncType (TCons ("FlatCurry","Visibility") []) (TCons ("AbstractHaskell","Visibility") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","Public") []) (Comb ConsCall ("AbstractHaskell","Public") []),Branch (Pattern ("FlatCurry","Private") []) (Comb ConsCall ("AbstractHaskell","Private") [])])),Func ("FlatCurry2AbstractHaskell","fcy2absTVar") 1 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Comb ConsCall ("Prelude","(,)") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb FuncCall ("Prelude","show") [Var 1]]])),Func ("FlatCurry2AbstractHaskell","fcy2absCDecl") 1 Public (FuncType (TCons ("FlatCurry","ConsDecl") []) (TCons ("AbstractHaskell","ConsDecl") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","Cons") [2,3,4,5]) (Comb ConsCall ("AbstractHaskell","Cons") [Var 2,Var 3,Comb FuncCall ("FlatCurry2AbstractHaskell","fcy2absVis") [Var 4],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("FlatCurry2AbstractHaskell","fcy2absTExp") [],Var 5]])])),Func ("FlatCurry2AbstractHaskell","fcy2absTExp") 1 Public (FuncType (TCons ("FlatCurry","TypeExpr") []) (TCons ("AbstractHaskell","TypeExpr") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","TVar") [2]) (Comb ConsCall ("AbstractHaskell","TVar") [Comb FuncCall ("FlatCurry2AbstractHaskell","fcy2absTVar") [Var 2]]),Branch (Pattern ("FlatCurry","FuncType") [3,4]) (Comb ConsCall ("AbstractHaskell","FuncType") [Comb FuncCall ("FlatCurry2AbstractHaskell","fcy2absTExp") [Var 3],Comb FuncCall ("FlatCurry2AbstractHaskell","fcy2absTExp") [Var 4]]),Branch (Pattern ("FlatCurry","TCons") [5,6]) (Comb ConsCall ("AbstractHaskell","TCons") [Var 5,Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("FlatCurry2AbstractHaskell","fcy2absTExp") [],Var 6]])])),Func ("FlatCurry2AbstractHaskell","fcy2absVar") 1 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Comb ConsCall ("Prelude","(,)") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb FuncCall ("Prelude","show") [Var 1]]])),Func ("FlatCurry2AbstractHaskell","fcy2absLit") 1 Public (FuncType (TCons ("FlatCurry","Literal") []) (TCons ("AbstractHaskell","Literal") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","Intc") [2]) (Comb ConsCall ("AbstractHaskell","Intc") [Var 2]),Branch (Pattern ("FlatCurry","Floatc") [3]) (Comb ConsCall ("AbstractHaskell","Floatc") [Var 3]),Branch (Pattern ("FlatCurry","Charc") [4]) (Comb ConsCall ("AbstractHaskell","Charc") [Var 4])])),Func ("FlatCurry2AbstractHaskell","tvarsOf") 1 Public (FuncType (TCons ("FlatCurry","TypeExpr") []) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","TVar") [2]) (Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("FlatCurry","FuncType") [3,4]) (Comb FuncCall ("List","union") [Comb FuncCall ("FlatCurry2AbstractHaskell","tvarsOf") [Var 3],Comb FuncCall ("FlatCurry2AbstractHaskell","tvarsOf") [Var 4]]),Branch (Pattern ("FlatCurry","TCons") [5,6]) (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("List","union") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("FlatCurry2AbstractHaskell","tvarsOf") [],Var 6]])]))] []