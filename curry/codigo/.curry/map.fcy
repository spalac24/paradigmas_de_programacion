Prog "map" ["Prelude"] [] [Func ("map","map") 2 Public (FuncType (FuncType (TVar 0) (TVar 1)) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 1]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [3,4]) (Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","apply") [Var 1,Var 3],Comb FuncCall ("map","map") [Var 1,Var 4]])])),Func ("map","min3") 0 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") [])) (Rule [] (Comb (FuncPartCall 1) ("map","min3._#lambda1") [])),Func ("map","min3._#lambda1") 1 Private (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") [])) (Rule [1] (Comb FuncCall ("Prelude","-") [Lit (Intc  3),Var 1]))] []