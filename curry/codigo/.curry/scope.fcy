Prog "scope" ["Prelude"] [] [Func ("scope","f") 2 Public (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude",":") [3,4]) (Or (Comb FuncCall ("Prelude","cond") [Comb FuncCall ("Prelude","=:=") [Var 1,Var 3],Comb ConsCall ("Prelude","True") []]) (Comb FuncCall ("scope","f") [Var 1,Var 4]))])),Func ("scope","pow") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (Rule [1,2] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 2,Lit (Intc  1)]) [Branch (Pattern ("Prelude","True") []) (Var 1),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","*") [Var 1,Comb FuncCall ("scope","pow") [Var 1,Comb FuncCall ("Prelude","-") [Var 2,Lit (Intc  1)]]])])),Func ("scope","fact") 1 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") [])) (Rule [1] (Comb FuncCall ("scope","fact.fact_aux.15") [Lit (Intc  1),Var 1])),Func ("scope","fact.fact_aux.15") 2 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (Rule [1,2] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 2,Lit (Intc  1)]) [Branch (Pattern ("Prelude","True") []) (Var 1),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("scope","fact.fact_aux.15") [Comb FuncCall ("Prelude","*") [Var 2,Var 1],Comb FuncCall ("Prelude","-") [Var 2,Lit (Intc  1)]])])),Func ("scope","fact_slow") 1 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") [])) (Rule [1] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 1,Lit (Intc  0)]) [Branch (Pattern ("Prelude","True") []) (Lit (Intc  1)),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","*") [Var 1,Comb FuncCall ("scope","fact_slow") [Comb FuncCall ("Prelude","-") [Var 1,Lit (Intc  1)]]])])),Func ("scope","zipp1") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") []]])) (Rule [1] (Comb FuncCall ("Prelude","zip") [Var 1,Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("scope","zipp1.f.27") [],Var 1]])),Func ("scope","zipp1.g.27") 1 Private (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") [])) (Rule [1] (Comb FuncCall ("Prelude","+") [Var 1,Lit (Intc  1)])),Func ("scope","zipp1.f.27") 1 Private (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") [])) (Rule [1] (Comb FuncCall ("scope","zipp1.g.27") [Var 1])),Func ("scope","zipp2") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") []]])) (Rule [1] (Comb FuncCall ("Prelude","zip") [Var 1,Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("scope","zipp2.f.35") [],Var 1]])),Func ("scope","zipp2.g.35") 1 Private (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") [])) (Rule [1] (Comb FuncCall ("Prelude","+") [Var 1,Lit (Intc  2)])),Func ("scope","zipp2.f.35") 1 Private (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") [])) (Rule [1] (Comb FuncCall ("scope","zipp2.g.35") [Var 1]))] []