Prog "firstprog" ["Prelude"] [] [Func ("firstprog","nine") 0 Public (TCons ("Prelude","Int") []) (Rule [] (Lit (Intc  9))),Func ("firstprog","square") 1 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") [])) (Rule [1] (Comb FuncCall ("Prelude","*") [Var 1,Var 1])),Func ("firstprog","loop") 0 Public (TCons ("Prelude","Int") []) (Rule [] (Comb FuncCall ("Prelude","+") [Lit (Intc  1),Comb FuncCall ("firstprog","loop") []])),Func ("firstprog","fac") 1 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") [])) (Rule [1] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 1,Lit (Intc  0)]) [Branch (Pattern ("Prelude","True") []) (Lit (Intc  1)),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","*") [Var 1,Comb FuncCall ("firstprog","fac") [Comb FuncCall ("Prelude","-") [Var 1,Lit (Intc  1)]]])])),Func ("firstprog",":-:") 2 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","True") []) (Case  Flex (Var 2) [Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Prelude","False") []) (Case  Flex (Var 2) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","False") [])])]))] []