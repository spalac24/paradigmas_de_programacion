Prog "AllSolutions" ["Prelude"] [Type ("AllSolutions","SearchTree") Public [0,1] [Cons ("AllSolutions","SearchBranch") 1 Public [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 1,TCons ("AllSolutions","SearchTree") [TVar 0,TVar 1]]]],Cons ("AllSolutions","Solutions") 1 Public [TCons ("Prelude","[]") [TVar 0]]]] [Func ("AllSolutions","getAllSolutions") 1 Public (FuncType (FuncType (TVar 0) (TCons ("Prelude","Success") [])) (TCons ("Prelude","IO") [TCons ("Prelude","[]") [TVar 0]])) (Rule [] (Var 0)),Func ("AllSolutions","getOneSolution") 1 Public (FuncType (FuncType (TVar 0) (TCons ("Prelude","Success") [])) (TCons ("Prelude","IO") [TCons ("Prelude","Maybe") [TVar 0]])) (Rule [] (Var 0)),Func ("AllSolutions","getOneValue") 1 Public (FuncType (TVar 0) (TCons ("Prelude","IO") [TCons ("Prelude","Maybe") [TVar 0]])) (Rule [] (Var 0)),Func ("AllSolutions","getAllFailures") 2 Public (FuncType (TVar 0) (FuncType (FuncType (TVar 0) (TCons ("Prelude","Success") [])) (TCons ("Prelude","IO") [TCons ("Prelude","[]") [TVar 0]]))) (Rule [] (Var 0)),Func ("AllSolutions","getSearchTree") 2 Public (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (FuncType (TVar 1) (TCons ("Prelude","Success") [])) (TCons ("Prelude","IO") [TCons ("AllSolutions","SearchTree") [TVar 1,TVar 0]]))) (Rule [] (Var 0))] []