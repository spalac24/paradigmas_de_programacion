CurryProg "KeyDB"
 ["Prelude","Dynamic","Integer","Sort","List"]
 []
 [CFunc ("KeyDB","existsDBKey") 2 Public (CFuncType (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTVar (0,"a")) (CTCons ("Dynamic","Dynamic") []))) (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("Prelude","IO") [CTCons ("Prelude","Bool") []]))) (CRules CFlex [CRule [CPVar (0,"db"),CPVar (1,"key")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","$")) (CApply (CSymbol ("Prelude","seq")) (CVar (0,"db")))) (CApply (CApply (CSymbol ("Prelude","$")) (CApply (CSymbol ("Prelude","seq")) (CVar (1,"key")))) (CDoExpr [CSPat (CPVar (3,"entries")) (CApply (CSymbol ("Dynamic","getDynamicSolution")) (CLambda [CPVar (2,"info")] (CApply (CApply (CVar (0,"db")) (CVar (1,"key"))) (CVar (2,"info"))))),CSExpr (CApply (CSymbol ("Prelude","return")) (CApply (CApply (CSymbol ("Prelude","/=")) (CVar (3,"entries"))) (CSymbol ("Prelude","Nothing"))))])))] []]),
  CFunc ("KeyDB","allDBKeys") 1 Public (CFuncType (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTVar (0,"a")) (CTCons ("Dynamic","Dynamic") []))) (CTCons ("Prelude","IO") [CTCons ("Prelude","[]") [CTCons ("Prelude","Int") []]])) (CRules CFlex [CRule [CPVar (0,"db")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","$")) (CApply (CSymbol ("Prelude","seq")) (CVar (0,"db")))) (CDoExpr [CSExpr (CApply (CSymbol ("Dynamic","getDynamicSolutions")) (CLambda [CPVar (1,"key")] (CApply (CApply (CVar (0,"db")) (CVar (1,"key"))) (CSymbol ("Prelude","unknown")))))]))] []]),
  CFunc ("KeyDB","getDBInfo") 2 Public (CFuncType (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTVar (0,"a")) (CTCons ("Dynamic","Dynamic") []))) (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("Prelude","IO") [CTVar (0,"a")]))) (CRules CFlex [CRule [CPVar (0,"db"),CPVar (1,"key")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","$")) (CApply (CSymbol ("Prelude","seq")) (CVar (0,"db")))) (CApply (CApply (CSymbol ("Prelude","$")) (CApply (CSymbol ("Prelude","seq")) (CVar (1,"key")))) (CDoExpr [CSPat (CPVar (3,"entries")) (CApply (CSymbol ("Dynamic","getDynamicSolutions")) (CLambda [CPVar (2,"info")] (CApply (CApply (CVar (0,"db")) (CVar (1,"key"))) (CVar (2,"info"))))),CSExpr (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CSymbol ("Prelude","null")) (CVar (3,"entries")))) (CApply (CSymbol ("Prelude","error")) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'g'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'D'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'B'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'I'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'f'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ':'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'y'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'f'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'k'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'y'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\''))) (CSymbol ("Prelude","[]")))))))))))))))))))))))))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("Prelude","show")) (CVar (1,"key")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\''))) (CSymbol ("Prelude","[]"))))))) (CApply (CSymbol ("Prelude","return")) (CApply (CSymbol ("Prelude","head")) (CVar (3,"entries")))))])))] []]),
  CFunc ("KeyDB","index") 2 Public (CFuncType (CTVar (0,"a")) (CFuncType (CTCons ("Prelude","[]") [CTVar (0,"a")]) (CTCons ("Prelude","Int") []))) (CRules CFlex [CRule [CPVar (0,"x"),CPVar (1,"xs")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("KeyDB","idx")) (CLit (CIntc 0))) (CVar (1,"xs")))] [CLocalFunc (CFunc ("KeyDB","idx") 2 Private (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Prelude","[]") [CTVar (1,"_69")]) (CTCons ("Prelude","Int") []))) (CRules CFlex [CRule [CPVar (2,"n"),CPComb ("Prelude",":") [CPVar (3,"y"),CPVar (4,"ys")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (0,"x"))) (CVar (3,"y")))) (CVar (2,"n"))) (CApply (CApply (CSymbol ("KeyDB","idx")) (CApply (CApply (CSymbol ("Prelude","+")) (CVar (2,"n"))) (CLit (CIntc 1)))) (CVar (4,"ys"))))] []]))]]),
  CFunc ("KeyDB","sortByIndex") 0 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","Int") [],CTVar (0,"a")]]) (CTCons ("Prelude","[]") [CTVar (0,"a")])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",".")) (CApply (CSymbol ("Prelude","map")) (CSymbol ("Prelude","snd")))) (CApply (CSymbol ("Sort","mergeSort")) (CLambda [CPVar (0,"x"),CPVar (1,"y")] (CApply (CApply (CSymbol ("Prelude","<")) (CApply (CSymbol ("Prelude","fst")) (CVar (0,"x")))) (CApply (CSymbol ("Prelude","fst")) (CVar (1,"y")))))))] []]),
  CFunc ("KeyDB","groupByIndex") 0 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","Int") [],CTVar (0,"a")]]) (CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTVar (0,"a")]])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",".")) (CApply (CSymbol ("KeyDB","addEmptyIdxs")) (CLit (CIntc 0)))) (CApply (CApply (CSymbol ("Prelude",".")) (CApply (CSymbol ("List","groupBy")) (CLambda [CPVar (0,"x"),CPVar (1,"y")] (CApply (CApply (CSymbol ("Prelude","==")) (CApply (CSymbol ("Prelude","fst")) (CVar (0,"x")))) (CApply (CSymbol ("Prelude","fst")) (CVar (1,"y"))))))) (CApply (CSymbol ("Sort","mergeSort")) (CLambda [CPVar (2,"x"),CPVar (3,"y")] (CApply (CApply (CSymbol ("Prelude","<")) (CApply (CSymbol ("Prelude","fst")) (CVar (2,"x")))) (CApply (CSymbol ("Prelude","fst")) (CVar (3,"y"))))))))] [CLocalFunc (CFunc ("KeyDB","addEmptyIdxs") 2 Private (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","Int") [],CTVar (0,"a")]]]) (CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTVar (0,"a")]]))) (CRules CFlex [CRule [CPVar (0,"_"),CPComb ("Prelude","[]") []] [(CSymbol ("Prelude","success"),CSymbol ("Prelude","[]"))] [],CRule [CPVar (1,"n"),CPComb ("Prelude",":") [CPComb ("Prelude",":") [CPComb ("Prelude","(,)") [CPVar (2,"m"),CPVar (3,"x")],CPVar (4,"xs")],CPVar (5,"ys")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (1,"n"))) (CVar (2,"m")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (3,"x"))) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("Prelude","snd"))) (CVar (4,"xs"))))) (CApply (CApply (CSymbol ("KeyDB","addEmptyIdxs")) (CApply (CApply (CSymbol ("Prelude","+")) (CVar (1,"n"))) (CLit (CIntc 1)))) (CVar (5,"ys"))))) (CApply (CApply (CSymbol ("Prelude",":")) (CSymbol ("Prelude","[]"))) (CApply (CApply (CSymbol ("KeyDB","addEmptyIdxs")) (CApply (CApply (CSymbol ("Prelude","+")) (CVar (1,"n"))) (CLit (CIntc 1)))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CVar (2,"m"))) (CVar (3,"x")))) (CVar (4,"xs")))) (CVar (5,"ys"))))))] []]))]]),
  CFunc ("KeyDB","getDBInfos") 2 Public (CFuncType (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTVar (0,"a")) (CTCons ("Dynamic","Dynamic") []))) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Int") []]) (CTCons ("Prelude","IO") [CTCons ("Prelude","[]") [CTVar (0,"a")]]))) (CRules CFlex [CRule [CPVar (0,"db"),CPVar (1,"keys")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","$")) (CApply (CSymbol ("Prelude","seq")) (CVar (0,"db")))) (CApply (CApply (CSymbol ("Prelude","$")) (CApply (CSymbol ("Prelude","seq")) (CApply (CSymbol ("Prelude","normalForm")) (CVar (1,"keys"))))) (CDoExpr [CSPat (CPVar (5,"entries")) (CApply (CSymbol ("Dynamic","getDynamicSolutions")) (CLambda [CPComb ("Prelude","(,)") [CPVar (2,"i"),CPVar (3,"info")]] (CLetDecl [CLocalVar (4,"key")] (CApply (CApply (CSymbol ("Dynamic","|&>")) (CApply (CApply (CVar (0,"db")) (CVar (4,"key"))) (CVar (3,"info")))) (CApply (CApply (CSymbol ("Prelude","=:=")) (CVar (2,"i"))) (CApply (CApply (CSymbol ("KeyDB","index")) (CVar (4,"key"))) (CVar (1,"keys")))))))),CSExpr (CApply (CSymbol ("Prelude","return")) (CApply (CSymbol ("KeyDB","sortByIndex")) (CVar (5,"entries"))))])))] []]),
  CFunc ("KeyDB","deleteDBEntry") 2 Public (CFuncType (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTVar (0,"a")) (CTCons ("Dynamic","Dynamic") []))) (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("Prelude","IO") [CTCons ("Prelude","()") []]))) (CRules CFlex [CRule [CPVar (0,"db"),CPVar (1,"key")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","$")) (CApply (CSymbol ("Prelude","seq")) (CVar (0,"db")))) (CApply (CApply (CSymbol ("Prelude","$")) (CApply (CSymbol ("Prelude","seq")) (CVar (1,"key")))) (CDoExpr [CSPat (CPVar (3,"entries")) (CApply (CSymbol ("Dynamic","getDynamicSolutions")) (CLambda [CPVar (2,"infos")] (CApply (CApply (CVar (0,"db")) (CVar (1,"key"))) (CVar (2,"infos"))))),CSExpr (CApply (CApply (CSymbol ("Prelude","mapIO_")) (CLambda [CPVar (4,"infos")] (CApply (CSymbol ("Dynamic","retract")) (CApply (CApply (CVar (0,"db")) (CVar (1,"key"))) (CVar (4,"infos")))))) (CVar (3,"entries")))])))] []]),
  CFunc ("KeyDB","updateDBEntry") 3 Public (CFuncType (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTVar (0,"a")) (CTCons ("Dynamic","Dynamic") []))) (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTVar (0,"a")) (CTCons ("Prelude","IO") [CTCons ("Prelude","()") []])))) (CRules CFlex [CRule [CPVar (0,"db"),CPVar (1,"key"),CPVar (2,"info")] [(CSymbol ("Prelude","success"),CDoExpr [CSExpr (CApply (CApply (CSymbol ("KeyDB","deleteDBEntry")) (CVar (0,"db"))) (CVar (1,"key"))),CSExpr (CApply (CSymbol ("Dynamic","assert")) (CApply (CApply (CVar (0,"db")) (CVar (1,"key"))) (CVar (2,"info"))))])] []]),
  CFunc ("KeyDB","newDBKey") 1 Private (CFuncType (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTVar (0,"a")) (CTCons ("Dynamic","Dynamic") []))) (CTCons ("Prelude","IO") [CTCons ("Prelude","Int") []])) (CRules CFlex [CRule [CPVar (0,"db")] [(CSymbol ("Prelude","success"),CDoExpr [CSPat (CPVar (2,"ids")) (CApply (CSymbol ("Dynamic","getDynamicSolutions")) (CLambda [CPVar (1,"i")] (CApply (CApply (CVar (0,"db")) (CVar (1,"i"))) (CSymbol ("Prelude","unknown"))))),CSExpr (CApply (CSymbol ("Prelude","return")) (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CSymbol ("Prelude","null")) (CVar (2,"ids")))) (CLit (CIntc 1))) (CApply (CApply (CSymbol ("Prelude","+")) (CApply (CSymbol ("Integer","maxlist")) (CVar (2,"ids")))) (CLit (CIntc 1)))))])] []]),
  CFunc ("KeyDB","newDBEntry") 2 Public (CFuncType (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTVar (0,"a")) (CTCons ("Dynamic","Dynamic") []))) (CFuncType (CTVar (0,"a")) (CTCons ("Prelude","IO") [CTCons ("Prelude","Int") []]))) (CRules CFlex [CRule [CPVar (0,"db"),CPVar (1,"info")] [(CSymbol ("Prelude","success"),CDoExpr [CSPat (CPVar (2,"i")) (CApply (CSymbol ("KeyDB","newDBKey")) (CVar (0,"db"))),CSExpr (CApply (CSymbol ("Dynamic","assert")) (CApply (CApply (CVar (0,"db")) (CVar (2,"i"))) (CVar (1,"info")))),CSExpr (CApply (CSymbol ("Prelude","return")) (CVar (2,"i")))])] []]),
  CFunc ("KeyDB","cleanDB") 1 Public (CFuncType (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTVar (0,"a")) (CTCons ("Dynamic","Dynamic") []))) (CTCons ("Prelude","IO") [CTCons ("Prelude","()") []])) (CRules CFlex [CRule [CPVar (0,"db")] [(CSymbol ("Prelude","success"),CDoExpr [CSPat (CPVar (2,"ids")) (CApply (CSymbol ("Dynamic","getDynamicSolutions")) (CLambda [CPVar (1,"i")] (CApply (CApply (CVar (0,"db")) (CVar (1,"i"))) (CSymbol ("Prelude","unknown"))))),CSExpr (CApply (CApply (CSymbol ("Prelude","mapIO_")) (CLambda [CPVar (3,"i")] (CApply (CApply (CSymbol ("KeyDB","deleteDBEntry")) (CVar (0,"db"))) (CVar (3,"i"))))) (CVar (2,"ids")))])] []])]
 []
