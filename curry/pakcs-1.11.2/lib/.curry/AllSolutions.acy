CurryProg "AllSolutions"
 ["Prelude"]
 [CType ("AllSolutions","SearchTree") Public [(0,"a"),(1,"b")] [CCons ("AllSolutions","SearchBranch") 1 Public [CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTVar (1,"b"),CTCons ("AllSolutions","SearchTree") [CTVar (0,"a"),CTVar (1,"b")]]]],CCons ("AllSolutions","Solutions") 1 Public [CTCons ("Prelude","[]") [CTVar (0,"a")]]]]
 [CFunc ("AllSolutions","getAllSolutions") 1 Public (CFuncType (CFuncType (CTVar (0,"a")) (CTCons ("Prelude","Success") [])) (CTCons ("Prelude","IO") [CTCons ("Prelude","[]") [CTVar (0,"a")]])) (CRules CFlex [CRule [CPVar (0,"c")] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Prelude","return")) (CApply (CSymbol ("Prelude","findall")) (CVar (0,"c"))))] []]),
  CFunc ("AllSolutions","getAllValues") 1 Private (CFuncType (CTVar (0,"a")) (CTCons ("Prelude","IO") [CTCons ("Prelude","[]") [CTVar (0,"a")]])) (CRules CFlex [CRule [CPVar (0,"e")] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Prelude","return")) (CApply (CSymbol ("Prelude","findall")) (CLambda [CPVar (1,"x0")] (CApply (CApply (CSymbol ("Prelude","=:=")) (CVar (1,"x0"))) (CVar (0,"e"))))))] []]),
  CFunc ("AllSolutions","getOneSolution") 1 Public (CFuncType (CFuncType (CTVar (0,"a")) (CTCons ("Prelude","Success") [])) (CTCons ("Prelude","IO") [CTCons ("Prelude","Maybe") [CTVar (0,"a")]])) (CRules CFlex [CRule [CPVar (0,"c")] [(CSymbol ("Prelude","success"),CDoExpr [CSPat (CPVar (1,"sols")) (CApply (CSymbol ("AllSolutions","getAllSolutions")) (CVar (0,"c"))),CSExpr (CApply (CSymbol ("Prelude","return")) (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CSymbol ("Prelude","null")) (CVar (1,"sols")))) (CSymbol ("Prelude","Nothing"))) (CApply (CSymbol ("Prelude","Just")) (CApply (CSymbol ("Prelude","head")) (CVar (1,"sols"))))))])] []]),
  CFunc ("AllSolutions","getOneValue") 1 Public (CFuncType (CTVar (0,"a")) (CTCons ("Prelude","IO") [CTCons ("Prelude","Maybe") [CTVar (0,"a")]])) (CRules CFlex [CRule [CPVar (0,"x")] [(CSymbol ("Prelude","success"),CApply (CSymbol ("AllSolutions","getOneSolution")) (CLambda [CPVar (1,"x0")] (CApply (CApply (CSymbol ("Prelude","=:=")) (CVar (0,"x"))) (CVar (1,"x0")))))] []]),
  CFunc ("AllSolutions","getAllFailures") 2 Public (CFuncType (CTVar (0,"a")) (CFuncType (CFuncType (CTVar (0,"a")) (CTCons ("Prelude","Success") [])) (CTCons ("Prelude","IO") [CTCons ("Prelude","[]") [CTVar (0,"a")]]))) (CRules CFlex [CRule [CPVar (0,"generator"),CPVar (1,"test")] [(CSymbol ("Prelude","success"),CDoExpr [CSPat (CPVar (3,"xs")) (CApply (CSymbol ("AllSolutions","getAllSolutions")) (CLambda [CPVar (2,"x0")] (CApply (CApply (CSymbol ("Prelude","=:=")) (CVar (2,"x0"))) (CVar (0,"generator"))))),CSPat (CPVar (4,"failures")) (CApply (CApply (CSymbol ("Prelude","mapIO")) (CApply (CSymbol ("AllSolutions","naf")) (CVar (1,"test")))) (CVar (3,"xs"))),CSExpr (CApply (CApply (CSymbol ("Prelude","$")) (CSymbol ("Prelude","return"))) (CApply (CSymbol ("Prelude","concat")) (CVar (4,"failures"))))])] [CLocalFunc (CFunc ("AllSolutions","naf") 2 Private (CFuncType (CFuncType (CTVar (0,"a")) (CTCons ("Prelude","Success") [])) (CFuncType (CTVar (0,"a")) (CTCons ("Prelude","IO") [CTCons ("Prelude","[]") [CTVar (0,"a")]]))) (CRules CFlex [CRule [CPVar (2,"c"),CPVar (3,"x")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",">>=")) (CApply (CSymbol ("AllSolutions","getOneSolution")) (CLambda [CPVar (4,"_")] (CApply (CVar (2,"c")) (CVar (3,"x")))))) (CLambda [CPVar (5,"mbl")] (CApply (CSymbol ("Prelude","return")) (CApply (CApply (CApply (CSymbol ("Prelude","maybe")) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (3,"x"))) (CSymbol ("Prelude","[]")))) (CApply (CSymbol ("Prelude","const")) (CSymbol ("Prelude","[]")))) (CVar (5,"mbl"))))))] []]))]]),
  CFunc ("AllSolutions","getSearchTree") 2 Public (CFuncType (CTCons ("Prelude","[]") [CTVar (0,"a")]) (CFuncType (CFuncType (CTVar (1,"b")) (CTCons ("Prelude","Success") [])) (CTCons ("Prelude","IO") [CTCons ("AllSolutions","SearchTree") [CTVar (1,"b"),CTVar (0,"a")]]))) (CRules CFlex [CRule [CPVar (0,"cs"),CPVar (1,"goal")] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Prelude","return")) (CApply (CApply (CSymbol ("AllSolutions","getSearchTreeUnsafe")) (CVar (0,"cs"))) (CVar (1,"goal"))))] []]),
  CFunc ("AllSolutions","getSearchTreeUnsafe") 2 Private (CFuncType (CTCons ("Prelude","[]") [CTVar (0,"a")]) (CFuncType (CFuncType (CTVar (1,"b")) (CTCons ("Prelude","Success") [])) (CTCons ("AllSolutions","SearchTree") [CTVar (1,"b"),CTVar (0,"a")]))) (CRules CFlex [CRule [CPComb ("Prelude","[]") [],CPVar (0,"goal")] [(CSymbol ("Prelude","success"),CApply (CSymbol ("AllSolutions","Solutions")) (CApply (CSymbol ("Prelude","findall")) (CVar (0,"goal"))))] [],CRule [CPComb ("Prelude",":") [CPVar (1,"c"),CPVar (2,"cs")],CPVar (3,"goal")] [(CSymbol ("Prelude","success"),CApply (CSymbol ("AllSolutions","SearchBranch")) (CApply (CSymbol ("Prelude","findall")) (CLambda [CPVar (4,"x0")] (CApply (CApply (CSymbol ("Prelude","=:=")) (CVar (4,"x0"))) (CApply (CApply (CApply (CSymbol ("AllSolutions","solve")) (CVar (1,"c"))) (CVar (2,"cs"))) (CVar (3,"goal")))))))] []]),
  CFunc ("AllSolutions","solve") 3 Private (CFuncType (CTVar (0,"a")) (CFuncType (CTCons ("Prelude","[]") [CTVar (0,"a")]) (CFuncType (CFuncType (CTVar (1,"b")) (CTCons ("Prelude","Success") [])) (CTCons ("Prelude","(,)") [CTVar (0,"a"),CTCons ("AllSolutions","SearchTree") [CTVar (1,"b"),CTVar (0,"a")]])))) (CRules CFlex [CRule [CPVar (0,"c"),CPVar (1,"cs"),CPVar (2,"goal")] [(CApply (CApply (CSymbol ("Prelude","=:=")) (CVar (0,"c"))) (CVar (3,"y")),CApply (CApply (CSymbol ("Prelude","(,)")) (CVar (3,"y"))) (CApply (CApply (CSymbol ("AllSolutions","getSearchTreeUnsafe")) (CVar (1,"cs"))) (CVar (2,"goal"))))] [CLocalVar (3,"y")]])]
 []
