Prog "CLPB" ["Prelude"] [Type ("CLPB","Boolean") Public [] [Cons ("CLPB","B") 1 Private [TCons ("Prelude","Int") []]]] [Func ("CLPB","true") 0 Public (TCons ("CLPB","Boolean") []) (Rule [] (Comb ConsCall ("CLPB","B") [Lit (Intc  1)])),Func ("CLPB","false") 0 Public (TCons ("CLPB","Boolean") []) (Rule [] (Comb ConsCall ("CLPB","B") [Lit (Intc  0)])),Func ("CLPB","neg") 1 Public (FuncType (TCons ("CLPB","Boolean") []) (TCons ("CLPB","Boolean") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("CLPB","B") [2]) (Comb ConsCall ("CLPB","B") [Comb FuncCall ("Prelude","$!") [Comb (FuncPartCall 1) ("CLPB","prim_neg") [],Var 2]])])),Func ("CLPB","prim_neg") 1 Private (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") [])) (External "CLPB.prim_neg"),Func ("CLPB",".&&") 2 Public (FuncType (TCons ("CLPB","Boolean") []) (FuncType (TCons ("CLPB","Boolean") []) (TCons ("CLPB","Boolean") []))) (Rule [1,2] (Case  Flex (Var 1) [Branch (Pattern ("CLPB","B") [3]) (Case  Flex (Var 2) [Branch (Pattern ("CLPB","B") [4]) (Comb ConsCall ("CLPB","B") [Comb FuncCall ("Prelude","$!") [Comb FuncCall ("Prelude","$!") [Comb (FuncPartCall 2) ("CLPB","prim_and") [],Var 4],Var 3]])])])),Func ("CLPB","prim_and") 2 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (External "CLPB.prim_and"),Func ("CLPB",".||") 2 Public (FuncType (TCons ("CLPB","Boolean") []) (FuncType (TCons ("CLPB","Boolean") []) (TCons ("CLPB","Boolean") []))) (Rule [1,2] (Case  Flex (Var 1) [Branch (Pattern ("CLPB","B") [3]) (Case  Flex (Var 2) [Branch (Pattern ("CLPB","B") [4]) (Comb ConsCall ("CLPB","B") [Comb FuncCall ("Prelude","$!") [Comb FuncCall ("Prelude","$!") [Comb (FuncPartCall 2) ("CLPB","prim_or") [],Var 4],Var 3]])])])),Func ("CLPB","prim_or") 2 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (External "CLPB.prim_or"),Func ("CLPB","./=") 2 Public (FuncType (TCons ("CLPB","Boolean") []) (FuncType (TCons ("CLPB","Boolean") []) (TCons ("CLPB","Boolean") []))) (Rule [1,2] (Case  Flex (Var 1) [Branch (Pattern ("CLPB","B") [3]) (Case  Flex (Var 2) [Branch (Pattern ("CLPB","B") [4]) (Comb ConsCall ("CLPB","B") [Comb FuncCall ("Prelude","$!") [Comb FuncCall ("Prelude","$!") [Comb (FuncPartCall 2) ("CLPB","prim_xor") [],Var 4],Var 3]])])])),Func ("CLPB","prim_xor") 2 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (External "CLPB.prim_xor"),Func ("CLPB",".==") 2 Public (FuncType (TCons ("CLPB","Boolean") []) (FuncType (TCons ("CLPB","Boolean") []) (TCons ("CLPB","Boolean") []))) (Rule [1,2] (Comb FuncCall ("CLPB","./=") [Comb FuncCall ("CLPB","neg") [Var 1],Var 2])),Func ("CLPB",".<=") 2 Public (FuncType (TCons ("CLPB","Boolean") []) (FuncType (TCons ("CLPB","Boolean") []) (TCons ("CLPB","Boolean") []))) (Rule [1,2] (Comb FuncCall ("CLPB",".||") [Comb FuncCall ("CLPB","neg") [Var 1],Var 2])),Func ("CLPB",".>=") 2 Public (FuncType (TCons ("CLPB","Boolean") []) (FuncType (TCons ("CLPB","Boolean") []) (TCons ("CLPB","Boolean") []))) (Rule [1,2] (Comb FuncCall ("CLPB",".<=") [Var 2,Var 1])),Func ("CLPB",".<") 2 Public (FuncType (TCons ("CLPB","Boolean") []) (FuncType (TCons ("CLPB","Boolean") []) (TCons ("CLPB","Boolean") []))) (Rule [1,2] (Comb FuncCall ("CLPB",".&&") [Comb FuncCall ("CLPB","neg") [Var 1],Var 2])),Func ("CLPB",".>") 2 Public (FuncType (TCons ("CLPB","Boolean") []) (FuncType (TCons ("CLPB","Boolean") []) (TCons ("CLPB","Boolean") []))) (Rule [1,2] (Comb FuncCall ("CLPB",".<") [Var 2,Var 1])),Func ("CLPB","count") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("CLPB","Boolean") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("CLPB","Boolean") []))) (Rule [1,2] (Comb ConsCall ("CLPB","B") [Comb FuncCall ("Prelude","$!!") [Comb FuncCall ("Prelude","$!!") [Comb (FuncPartCall 2) ("CLPB","card") [],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Prelude","ensureNotFree") [],Comb FuncCall ("Prelude","ensureSpine") [Var 2]]],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("CLPB","int") [],Comb FuncCall ("Prelude","ensureSpine") [Var 1]]]])),Func ("CLPB","card") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","Int") []))) (External "CLPB.card"),Func ("CLPB","exists") 2 Public (FuncType (TCons ("CLPB","Boolean") []) (FuncType (TCons ("CLPB","Boolean") []) (TCons ("CLPB","Boolean") []))) (Rule [1,2] (Case  Flex (Var 1) [Branch (Pattern ("CLPB","B") [3]) (Case  Flex (Var 2) [Branch (Pattern ("CLPB","B") [4]) (Comb ConsCall ("CLPB","B") [Comb FuncCall ("Prelude","$!!") [Comb FuncCall ("Prelude","$!!") [Comb (FuncPartCall 2) ("CLPB","prim_exists") [],Var 3],Var 4]])])])),Func ("CLPB","prim_exists") 2 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (External "CLPB.prim_exists"),Func ("CLPB","satisfied") 1 Public (FuncType (TCons ("CLPB","Boolean") []) (TCons ("Prelude","Success") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("CLPB","B") [2]) (Comb FuncCall ("Prelude","$!!") [Comb (FuncPartCall 1) ("CLPB","sat") [],Var 2])])),Func ("CLPB","sat") 1 Private (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Success") [])) (External "CLPB.sat"),Func ("CLPB","check") 1 Public (FuncType (TCons ("CLPB","Boolean") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("CLPB","B") [2]) (Comb FuncCall ("Prelude","==") [Comb FuncCall ("Prelude","$!!") [Comb (FuncPartCall 1) ("CLPB","prim_check") [],Var 2],Lit (Intc  1)])])),Func ("CLPB","prim_check") 1 Private (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") [])) (External "CLPB.prim_check"),Func ("CLPB","bound") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("CLPB","Boolean") []]) (TCons ("Prelude","Success") [])) (Rule [1] (Comb FuncCall ("Prelude","$!!") [Comb (FuncPartCall 1) ("CLPB","labeling") [],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("CLPB","int") [],Comb FuncCall ("Prelude","ensureSpine") [Var 1]]])),Func ("CLPB","labeling") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","Success") [])) (External "CLPB.labeling"),Func ("CLPB","simplify") 1 Public (FuncType (TCons ("CLPB","Boolean") []) (TCons ("CLPB","Boolean") [])) (Rule [1] (Free [2] (Comb FuncCall ("Prelude","cond") [Comb FuncCall ("CLPB","satisfied") [Comb FuncCall ("CLPB",".==") [Var 2,Var 1]],Var 2]))),Func ("CLPB","evaluate") 1 Public (FuncType (TCons ("CLPB","Boolean") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Let [(2,Comb FuncCall ("CLPB","simplify") [Var 1])] (Comb FuncCall ("Prelude","cond") [Comb FuncCall ("CLPB","bound") [Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude","==") [Comb FuncCall ("CLPB","int") [Var 2],Lit (Intc  1)]]))),Func ("CLPB","int") 1 Private (FuncType (TCons ("CLPB","Boolean") []) (TCons ("Prelude","Int") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("CLPB","B") [2]) (Var 2)]))] [Op ("CLPB",".&&") InfixrOp 3,Op ("CLPB",".||") InfixrOp 2,Op ("CLPB","./=") InfixOp 1,Op ("CLPB",".==") InfixOp 1]