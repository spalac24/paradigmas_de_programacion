Prog "CLPFD" ["Prelude"] [Type ("CLPFD","Constraint") Public [] [],Type ("CLPFD","LabelingOption") Public [] [Cons ("CLPFD","LeftMost") 0 Public [],Cons ("CLPFD","FirstFail") 0 Public [],Cons ("CLPFD","FirstFailConstrained") 0 Public [],Cons ("CLPFD","Min") 0 Public [],Cons ("CLPFD","Max") 0 Public [],Cons ("CLPFD","Step") 0 Public [],Cons ("CLPFD","Enum") 0 Public [],Cons ("CLPFD","Bisect") 0 Public [],Cons ("CLPFD","Up") 0 Public [],Cons ("CLPFD","Down") 0 Public [],Cons ("CLPFD","All") 0 Public [],Cons ("CLPFD","Minimize") 1 Public [TCons ("Prelude","Int") []],Cons ("CLPFD","Maximize") 1 Public [TCons ("Prelude","Int") []],Cons ("CLPFD","Assumptions") 1 Public [TCons ("Prelude","Int") []]]] [Func ("CLPFD","domain") 3 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Success") [])))) (Rule [] (Var 0)),Func ("CLPFD","+#") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (Rule [] (Var 0)),Func ("CLPFD","-#") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (Rule [] (Var 0)),Func ("CLPFD","*#") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (Rule [] (Var 0)),Func ("CLPFD","=#") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Success") []))) (Rule [] (Var 0)),Func ("CLPFD","/=#") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Success") []))) (Rule [] (Var 0)),Func ("CLPFD","<#") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Success") []))) (Rule [] (Var 0)),Func ("CLPFD","<=#") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Success") []))) (Rule [] (Var 0)),Func ("CLPFD",">#") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Success") []))) (Rule [] (Var 0)),Func ("CLPFD",">=#") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Success") []))) (Rule [] (Var 0)),Func ("CLPFD","#=#") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("CLPFD","Constraint") []))) (Rule [] (Var 0)),Func ("CLPFD","#/=#") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("CLPFD","Constraint") []))) (Rule [] (Var 0)),Func ("CLPFD","#<#") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("CLPFD","Constraint") []))) (Rule [] (Var 0)),Func ("CLPFD","#<=#") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("CLPFD","Constraint") []))) (Rule [] (Var 0)),Func ("CLPFD","#>#") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("CLPFD","Constraint") []))) (Rule [] (Var 0)),Func ("CLPFD","#>=#") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("CLPFD","Constraint") []))) (Rule [] (Var 0)),Func ("CLPFD","neg") 1 Public (FuncType (TCons ("CLPFD","Constraint") []) (TCons ("CLPFD","Constraint") [])) (Rule [] (Var 0)),Func ("CLPFD","#/\\#") 2 Public (FuncType (TCons ("CLPFD","Constraint") []) (FuncType (TCons ("CLPFD","Constraint") []) (TCons ("CLPFD","Constraint") []))) (Rule [] (Var 0)),Func ("CLPFD","#\\/#") 2 Public (FuncType (TCons ("CLPFD","Constraint") []) (FuncType (TCons ("CLPFD","Constraint") []) (TCons ("CLPFD","Constraint") []))) (Rule [] (Var 0)),Func ("CLPFD","#=>#") 2 Public (FuncType (TCons ("CLPFD","Constraint") []) (FuncType (TCons ("CLPFD","Constraint") []) (TCons ("CLPFD","Constraint") []))) (Rule [] (Var 0)),Func ("CLPFD","#<=>#") 2 Public (FuncType (TCons ("CLPFD","Constraint") []) (FuncType (TCons ("CLPFD","Constraint") []) (TCons ("CLPFD","Constraint") []))) (Rule [] (Var 0)),Func ("CLPFD","solve") 1 Public (FuncType (TCons ("CLPFD","Constraint") []) (TCons ("Prelude","Success") [])) (Rule [] (Var 0)),Func ("CLPFD","sum") 3 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Success") []))) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Success") [])))) (Rule [] (Var 0)),Func ("CLPFD","scalarProduct") 4 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Success") []))) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Success") []))))) (Rule [] (Var 0)),Func ("CLPFD","count") 4 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Success") []))) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Success") []))))) (Rule [] (Var 0)),Func ("CLPFD","allDifferent") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","Success") [])) (Rule [] (Var 0)),Func ("CLPFD","all_different") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","Success") [])) (Rule [] (Var 0)),Func ("CLPFD","indomain") 1 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Success") [])) (Rule [] (Var 0)),Func ("CLPFD","labeling") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("CLPFD","LabelingOption") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","Success") []))) (Rule [] (Var 0))] [Op ("CLPFD","*#") InfixlOp 7,Op ("CLPFD","+#") InfixlOp 6,Op ("CLPFD","-#") InfixlOp 6,Op ("CLPFD","=#") InfixOp 4,Op ("CLPFD","/=#") InfixOp 4,Op ("CLPFD","<#") InfixOp 4,Op ("CLPFD","<=#") InfixOp 4,Op ("CLPFD",">#") InfixOp 4,Op ("CLPFD",">=#") InfixOp 4,Op ("CLPFD","#=#") InfixOp 4,Op ("CLPFD","#/=#") InfixOp 4,Op ("CLPFD","#<#") InfixOp 4,Op ("CLPFD","#<=#") InfixOp 4,Op ("CLPFD","#>#") InfixOp 4,Op ("CLPFD","#>=#") InfixOp 4,Op ("CLPFD","#/\\#") InfixrOp 3,Op ("CLPFD","#\\/#") InfixrOp 2,Op ("CLPFD","#=>#") InfixrOp 1,Op ("CLPFD","#<=>#") InfixrOp 1]