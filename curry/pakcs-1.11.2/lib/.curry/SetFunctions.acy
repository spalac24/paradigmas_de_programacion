CurryProg "SetFunctions"
 ["Prelude","Sort","List"]
 [CType ("SetFunctions","Values") Public [(0,"a")] [CCons ("SetFunctions","Values") 2 Public [CTCons ("Prelude","Bool") [],CTCons ("Prelude","[]") [CTVar (0,"a")]]]]
 [CFunc ("SetFunctions","set0") 1 Public (CFuncType (CTVar (0,"a")) (CTCons ("SetFunctions","Values") [CTVar (0,"a")])) (CRules CFlex [CRule [CPVar (0,"f")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("SetFunctions","Values")) (CApply (CSymbol ("SetFunctions","hasNoValue")) (CVar (0,"f")))) (CApply (CSymbol ("Prelude","findall")) (CLambda [CPVar (1,"x0")] (CApply (CApply (CSymbol ("Prelude","=:=")) (CVar (1,"x0"))) (CVar (0,"f"))))))] []]),
  CFunc ("SetFunctions","set1") 2 Public (CFuncType (CFuncType (CTVar (0,"a")) (CTVar (1,"b"))) (CFuncType (CTVar (0,"a")) (CTCons ("SetFunctions","Values") [CTVar (1,"b")]))) (CRules CFlex [CRule [CPVar (0,"f"),CPVar (1,"x")] [(CApply (CApply (CSymbol ("Prelude","=:=")) (CVar (1,"x"))) (CVar (1,"x")),CApply (CApply (CSymbol ("SetFunctions","Values")) (CApply (CSymbol ("SetFunctions","hasNoValue")) (CApply (CVar (0,"f")) (CVar (1,"x"))))) (CApply (CSymbol ("Prelude","findall")) (CLambda [CPVar (2,"x0")] (CApply (CApply (CSymbol ("Prelude","=:=")) (CVar (2,"x0"))) (CApply (CVar (0,"f")) (CVar (1,"x")))))))] []]),
  CFunc ("SetFunctions","set2") 3 Public (CFuncType (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (1,"b")) (CTVar (2,"c")))) (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (1,"b")) (CTCons ("SetFunctions","Values") [CTVar (2,"c")])))) (CRules CFlex [CRule [CPVar (0,"f"),CPVar (1,"x1"),CPVar (2,"x2")] [(CApply (CApply (CSymbol ("Prelude","&")) (CApply (CApply (CSymbol ("Prelude","=:=")) (CVar (1,"x1"))) (CVar (1,"x1")))) (CApply (CApply (CSymbol ("Prelude","=:=")) (CVar (2,"x2"))) (CVar (2,"x2"))),CApply (CApply (CSymbol ("SetFunctions","Values")) (CApply (CSymbol ("SetFunctions","hasNoValue")) (CApply (CApply (CVar (0,"f")) (CVar (1,"x1"))) (CVar (2,"x2"))))) (CApply (CSymbol ("Prelude","findall")) (CLambda [CPVar (3,"x0")] (CApply (CApply (CSymbol ("Prelude","=:=")) (CVar (3,"x0"))) (CApply (CApply (CVar (0,"f")) (CVar (1,"x1"))) (CVar (2,"x2")))))))] []]),
  CFunc ("SetFunctions","set3") 4 Public (CFuncType (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (1,"b")) (CFuncType (CTVar (2,"c")) (CTVar (3,"d"))))) (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (1,"b")) (CFuncType (CTVar (2,"c")) (CTCons ("SetFunctions","Values") [CTVar (3,"d")]))))) (CRules CFlex [CRule [CPVar (0,"f"),CPVar (1,"x1"),CPVar (2,"x2"),CPVar (3,"x3")] [(CApply (CApply (CSymbol ("Prelude","&")) (CApply (CApply (CSymbol ("Prelude","=:=")) (CVar (1,"x1"))) (CVar (1,"x1")))) (CApply (CApply (CSymbol ("Prelude","&")) (CApply (CApply (CSymbol ("Prelude","=:=")) (CVar (2,"x2"))) (CVar (2,"x2")))) (CApply (CApply (CSymbol ("Prelude","=:=")) (CVar (3,"x3"))) (CVar (3,"x3")))),CApply (CApply (CSymbol ("SetFunctions","Values")) (CApply (CSymbol ("SetFunctions","hasNoValue")) (CApply (CApply (CApply (CVar (0,"f")) (CVar (1,"x1"))) (CVar (2,"x2"))) (CVar (3,"x3"))))) (CApply (CSymbol ("Prelude","findall")) (CLambda [CPVar (4,"x0")] (CApply (CApply (CSymbol ("Prelude","=:=")) (CVar (4,"x0"))) (CApply (CApply (CApply (CVar (0,"f")) (CVar (1,"x1"))) (CVar (2,"x2"))) (CVar (3,"x3")))))))] []]),
  CFunc ("SetFunctions","set4") 5 Public (CFuncType (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (1,"b")) (CFuncType (CTVar (2,"c")) (CFuncType (CTVar (3,"d")) (CTVar (4,"e")))))) (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (1,"b")) (CFuncType (CTVar (2,"c")) (CFuncType (CTVar (3,"d")) (CTCons ("SetFunctions","Values") [CTVar (4,"e")])))))) (CRules CFlex [CRule [CPVar (0,"f"),CPVar (1,"x1"),CPVar (2,"x2"),CPVar (3,"x3"),CPVar (4,"x4")] [(CApply (CApply (CSymbol ("Prelude","&")) (CApply (CApply (CSymbol ("Prelude","=:=")) (CVar (1,"x1"))) (CVar (1,"x1")))) (CApply (CApply (CSymbol ("Prelude","&")) (CApply (CApply (CSymbol ("Prelude","=:=")) (CVar (2,"x2"))) (CVar (2,"x2")))) (CApply (CApply (CSymbol ("Prelude","&")) (CApply (CApply (CSymbol ("Prelude","=:=")) (CVar (3,"x3"))) (CVar (3,"x3")))) (CApply (CApply (CSymbol ("Prelude","=:=")) (CVar (4,"x4"))) (CVar (4,"x4"))))),CApply (CApply (CSymbol ("SetFunctions","Values")) (CApply (CSymbol ("SetFunctions","hasNoValue")) (CApply (CApply (CApply (CApply (CVar (0,"f")) (CVar (1,"x1"))) (CVar (2,"x2"))) (CVar (3,"x3"))) (CVar (4,"x4"))))) (CApply (CSymbol ("Prelude","findall")) (CLambda [CPVar (5,"x0")] (CApply (CApply (CSymbol ("Prelude","=:=")) (CVar (5,"x0"))) (CApply (CApply (CApply (CApply (CVar (0,"f")) (CVar (1,"x1"))) (CVar (2,"x2"))) (CVar (3,"x3"))) (CVar (4,"x4")))))))] []]),
  CFunc ("SetFunctions","set5") 6 Public (CFuncType (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (1,"b")) (CFuncType (CTVar (2,"c")) (CFuncType (CTVar (3,"d")) (CFuncType (CTVar (4,"e")) (CTVar (5,"f"))))))) (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (1,"b")) (CFuncType (CTVar (2,"c")) (CFuncType (CTVar (3,"d")) (CFuncType (CTVar (4,"e")) (CTCons ("SetFunctions","Values") [CTVar (5,"f")]))))))) (CRules CFlex [CRule [CPVar (0,"f"),CPVar (1,"x1"),CPVar (2,"x2"),CPVar (3,"x3"),CPVar (4,"x4"),CPVar (5,"x5")] [(CApply (CApply (CSymbol ("Prelude","&")) (CApply (CApply (CSymbol ("Prelude","=:=")) (CVar (1,"x1"))) (CVar (1,"x1")))) (CApply (CApply (CSymbol ("Prelude","&")) (CApply (CApply (CSymbol ("Prelude","=:=")) (CVar (2,"x2"))) (CVar (2,"x2")))) (CApply (CApply (CSymbol ("Prelude","&")) (CApply (CApply (CSymbol ("Prelude","=:=")) (CVar (3,"x3"))) (CVar (3,"x3")))) (CApply (CApply (CSymbol ("Prelude","&")) (CApply (CApply (CSymbol ("Prelude","=:=")) (CVar (4,"x4"))) (CVar (4,"x4")))) (CApply (CApply (CSymbol ("Prelude","=:=")) (CVar (5,"x5"))) (CVar (5,"x5")))))),CApply (CApply (CSymbol ("SetFunctions","Values")) (CApply (CSymbol ("SetFunctions","hasNoValue")) (CApply (CApply (CApply (CApply (CApply (CVar (0,"f")) (CVar (1,"x1"))) (CVar (2,"x2"))) (CVar (3,"x3"))) (CVar (4,"x4"))) (CVar (5,"x5"))))) (CApply (CSymbol ("Prelude","findall")) (CLambda [CPVar (6,"x0")] (CApply (CApply (CSymbol ("Prelude","=:=")) (CVar (6,"x0"))) (CApply (CApply (CApply (CApply (CApply (CVar (0,"f")) (CVar (1,"x1"))) (CVar (2,"x2"))) (CVar (3,"x3"))) (CVar (4,"x4"))) (CVar (5,"x5")))))))] []]),
  CFunc ("SetFunctions","set6") 7 Public (CFuncType (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (1,"b")) (CFuncType (CTVar (2,"c")) (CFuncType (CTVar (3,"d")) (CFuncType (CTVar (4,"e")) (CFuncType (CTVar (5,"f")) (CTVar (6,"g")))))))) (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (1,"b")) (CFuncType (CTVar (2,"c")) (CFuncType (CTVar (3,"d")) (CFuncType (CTVar (4,"e")) (CFuncType (CTVar (5,"f")) (CTCons ("SetFunctions","Values") [CTVar (6,"g")])))))))) (CRules CFlex [CRule [CPVar (0,"f"),CPVar (1,"x1"),CPVar (2,"x2"),CPVar (3,"x3"),CPVar (4,"x4"),CPVar (5,"x5"),CPVar (6,"x6")] [(CApply (CApply (CSymbol ("Prelude","&")) (CApply (CApply (CSymbol ("Prelude","=:=")) (CVar (1,"x1"))) (CVar (1,"x1")))) (CApply (CApply (CSymbol ("Prelude","&")) (CApply (CApply (CSymbol ("Prelude","=:=")) (CVar (2,"x2"))) (CVar (2,"x2")))) (CApply (CApply (CSymbol ("Prelude","&")) (CApply (CApply (CSymbol ("Prelude","=:=")) (CVar (3,"x3"))) (CVar (3,"x3")))) (CApply (CApply (CSymbol ("Prelude","&")) (CApply (CApply (CSymbol ("Prelude","=:=")) (CVar (4,"x4"))) (CVar (4,"x4")))) (CApply (CApply (CSymbol ("Prelude","&")) (CApply (CApply (CSymbol ("Prelude","=:=")) (CVar (5,"x5"))) (CVar (5,"x5")))) (CApply (CApply (CSymbol ("Prelude","=:=")) (CVar (6,"x6"))) (CVar (6,"x6"))))))),CApply (CApply (CSymbol ("SetFunctions","Values")) (CApply (CSymbol ("SetFunctions","hasNoValue")) (CApply (CApply (CApply (CApply (CApply (CApply (CVar (0,"f")) (CVar (1,"x1"))) (CVar (2,"x2"))) (CVar (3,"x3"))) (CVar (4,"x4"))) (CVar (5,"x5"))) (CVar (6,"x6"))))) (CApply (CSymbol ("Prelude","findall")) (CLambda [CPVar (7,"x0")] (CApply (CApply (CSymbol ("Prelude","=:=")) (CVar (7,"x0"))) (CApply (CApply (CApply (CApply (CApply (CApply (CVar (0,"f")) (CVar (1,"x1"))) (CVar (2,"x2"))) (CVar (3,"x3"))) (CVar (4,"x4"))) (CVar (5,"x5"))) (CVar (6,"x6")))))))] []]),
  CFunc ("SetFunctions","set7") 8 Public (CFuncType (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (1,"b")) (CFuncType (CTVar (2,"c")) (CFuncType (CTVar (3,"d")) (CFuncType (CTVar (4,"e")) (CFuncType (CTVar (5,"f")) (CFuncType (CTVar (6,"g")) (CTVar (7,"h"))))))))) (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (1,"b")) (CFuncType (CTVar (2,"c")) (CFuncType (CTVar (3,"d")) (CFuncType (CTVar (4,"e")) (CFuncType (CTVar (5,"f")) (CFuncType (CTVar (6,"g")) (CTCons ("SetFunctions","Values") [CTVar (7,"h")]))))))))) (CRules CFlex [CRule [CPVar (0,"f"),CPVar (1,"x1"),CPVar (2,"x2"),CPVar (3,"x3"),CPVar (4,"x4"),CPVar (5,"x5"),CPVar (6,"x6"),CPVar (7,"x7")] [(CApply (CApply (CSymbol ("Prelude","&")) (CApply (CApply (CSymbol ("Prelude","=:=")) (CVar (1,"x1"))) (CVar (1,"x1")))) (CApply (CApply (CSymbol ("Prelude","&")) (CApply (CApply (CSymbol ("Prelude","=:=")) (CVar (2,"x2"))) (CVar (2,"x2")))) (CApply (CApply (CSymbol ("Prelude","&")) (CApply (CApply (CSymbol ("Prelude","=:=")) (CVar (3,"x3"))) (CVar (3,"x3")))) (CApply (CApply (CSymbol ("Prelude","&")) (CApply (CApply (CSymbol ("Prelude","=:=")) (CVar (4,"x4"))) (CVar (4,"x4")))) (CApply (CApply (CSymbol ("Prelude","&")) (CApply (CApply (CSymbol ("Prelude","=:=")) (CVar (5,"x5"))) (CVar (5,"x5")))) (CApply (CApply (CSymbol ("Prelude","&")) (CApply (CApply (CSymbol ("Prelude","=:=")) (CVar (6,"x6"))) (CVar (6,"x6")))) (CApply (CApply (CSymbol ("Prelude","=:=")) (CVar (7,"x7"))) (CVar (7,"x7")))))))),CApply (CApply (CSymbol ("SetFunctions","Values")) (CApply (CSymbol ("SetFunctions","hasNoValue")) (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CVar (0,"f")) (CVar (1,"x1"))) (CVar (2,"x2"))) (CVar (3,"x3"))) (CVar (4,"x4"))) (CVar (5,"x5"))) (CVar (6,"x6"))) (CVar (7,"x7"))))) (CApply (CSymbol ("Prelude","findall")) (CLambda [CPVar (8,"x0")] (CApply (CApply (CSymbol ("Prelude","=:=")) (CVar (8,"x0"))) (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CVar (0,"f")) (CVar (1,"x1"))) (CVar (2,"x2"))) (CVar (3,"x3"))) (CVar (4,"x4"))) (CVar (5,"x5"))) (CVar (6,"x6"))) (CVar (7,"x7")))))))] []]),
  CFunc ("SetFunctions","hasNoValue") 1 Private (CFuncType (CTVar (0,"a")) (CTCons ("Prelude","Bool") [])) (CRules CFlex [CRule [CPVar (0,"e")] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Prelude","null")) (CApply (CSymbol ("Prelude","findall")) (CLambda [CPVar (1,"x0")] (CApply (CApply (CSymbol ("Prelude","=:=")) (CVar (1,"x0"))) (CApply (CSymbol ("Prelude","findfirst")) (CLambda [CPVar (2,"x1")] (CApply (CApply (CSymbol ("Prelude","=:=")) (CVar (2,"x1"))) (CVar (0,"e")))))))))] []]),
  CFunc ("SetFunctions","isEmpty") 1 Public (CFuncType (CTCons ("SetFunctions","Values") [CTVar (0,"a")]) (CTCons ("Prelude","Bool") [])) (CRules CFlex [CRule [CPComb ("SetFunctions","Values") [CPVar (0,"empty"),CPVar (1,"_")]] [(CSymbol ("Prelude","success"),CVar (0,"empty"))] []]),
  CFunc ("SetFunctions","valueOf") 2 Public (CFuncType (CTVar (0,"a")) (CFuncType (CTCons ("SetFunctions","Values") [CTVar (0,"a")]) (CTCons ("Prelude","Bool") []))) (CRules CFlex [CRule [CPVar (0,"e"),CPComb ("SetFunctions","Values") [CPVar (1,"_"),CPVar (2,"s")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","elem")) (CVar (0,"e"))) (CVar (2,"s")))] []]),
  CFunc ("SetFunctions","contains") 0 Public (CFuncType (CTVar (0,"a")) (CFuncType (CTCons ("SetFunctions","Values") [CTVar (0,"a")]) (CTCons ("Prelude","Bool") []))) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CSymbol ("SetFunctions","valueOf"))] []]),
  CFunc ("SetFunctions","choose") 1 Public (CFuncType (CTCons ("SetFunctions","Values") [CTVar (0,"a")]) (CTCons ("Prelude","(,)") [CTVar (0,"a"),CTCons ("SetFunctions","Values") [CTVar (0,"a")]])) (CRules CFlex [CRule [CPComb ("SetFunctions","Values") [CPVar (0,"_"),CPVar (1,"vs")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","(,)")) (CVar (2,"x"))) (CApply (CApply (CSymbol ("SetFunctions","Values")) (CApply (CSymbol ("Prelude","null")) (CVar (3,"xs")))) (CVar (3,"xs"))))] [CLocalPat (CPVar (2,"x")) (CApply (CApply (CSymbol ("Prelude","foldr1")) (CSymbol ("Prelude","?"))) (CVar (1,"vs"))) [],CLocalPat (CPVar (3,"xs")) (CApply (CApply (CSymbol ("List","delete")) (CVar (2,"x"))) (CVar (1,"vs"))) []]]),
  CFunc ("SetFunctions","chooseValue") 1 Public (CFuncType (CTCons ("SetFunctions","Values") [CTVar (0,"a")]) (CTVar (0,"a"))) (CRules CFlex [CRule [CPVar (0,"s")] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Prelude","fst")) (CApply (CSymbol ("SetFunctions","choose")) (CVar (0,"s"))))] []]),
  CFunc ("SetFunctions","select") 1 Public (CFuncType (CTCons ("SetFunctions","Values") [CTVar (0,"a")]) (CTCons ("Prelude","(,)") [CTVar (0,"a"),CTCons ("SetFunctions","Values") [CTVar (0,"a")]])) (CRules CFlex [CRule [CPComb ("SetFunctions","Values") [CPVar (0,"_"),CPComb ("Prelude",":") [CPVar (1,"x"),CPVar (2,"xs")]]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","(,)")) (CVar (1,"x"))) (CApply (CApply (CSymbol ("SetFunctions","Values")) (CApply (CSymbol ("Prelude","null")) (CVar (2,"xs")))) (CVar (2,"xs"))))] []]),
  CFunc ("SetFunctions","selectValue") 1 Public (CFuncType (CTCons ("SetFunctions","Values") [CTVar (0,"a")]) (CTVar (0,"a"))) (CRules CFlex [CRule [CPVar (0,"s")] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Prelude","fst")) (CApply (CSymbol ("SetFunctions","select")) (CVar (0,"s"))))] []]),
  CFunc ("SetFunctions","mapValues") 2 Public (CFuncType (CFuncType (CTVar (0,"a")) (CTVar (1,"b"))) (CFuncType (CTCons ("SetFunctions","Values") [CTVar (0,"a")]) (CTCons ("SetFunctions","Values") [CTVar (1,"b")]))) (CRules CFlex [CRule [CPVar (0,"f"),CPComb ("SetFunctions","Values") [CPVar (1,"empty"),CPVar (2,"s")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("SetFunctions","Values")) (CVar (1,"empty"))) (CApply (CApply (CSymbol ("Prelude","map")) (CVar (0,"f"))) (CVar (2,"s"))))] []]),
  CFunc ("SetFunctions","foldValues") 3 Public (CFuncType (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (0,"a")) (CTVar (0,"a")))) (CFuncType (CTVar (0,"a")) (CFuncType (CTCons ("SetFunctions","Values") [CTVar (0,"a")]) (CTVar (0,"a"))))) (CRules CFlex [CRule [CPVar (0,"f"),CPVar (1,"z"),CPComb ("SetFunctions","Values") [CPVar (2,"_"),CPVar (3,"s")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","foldr")) (CVar (0,"f"))) (CVar (1,"z"))) (CVar (3,"s")))] []]),
  CFunc ("SetFunctions","minValue") 2 Public (CFuncType (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (0,"a")) (CTCons ("Prelude","Bool") []))) (CFuncType (CTCons ("SetFunctions","Values") [CTVar (0,"a")]) (CTVar (0,"a")))) (CRules CFlex [CRule [CPVar (0,"leq"),CPComb ("SetFunctions","Values") [CPVar (1,"_"),CPVar (2,"s")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("SetFunctions","minOf")) (CVar (2,"s")))] [CLocalFunc (CFunc ("SetFunctions","minOf") 1 Private (CFuncType (CTCons ("Prelude","[]") [CTVar (1,"_270")]) (CTVar (1,"_270"))) (CRules CFlex [CRule [CPComb ("Prelude",":") [CPVar (3,"x"),CPComb ("Prelude","[]") []]] [(CSymbol ("Prelude","success"),CVar (3,"x"))] [],CRule [CPComb ("Prelude",":") [CPVar (4,"x"),CPComb ("Prelude",":") [CPVar (5,"y"),CPVar (6,"ys")]]] [(CSymbol ("Prelude","success"),CLetDecl [CLocalPat (CPVar (7,"m1")) (CApply (CSymbol ("SetFunctions","minOf")) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (5,"y"))) (CVar (6,"ys")))) []] (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CVar (0,"leq")) (CVar (4,"x"))) (CVar (7,"m1")))) (CVar (4,"x"))) (CVar (7,"m1"))))] []]))]]),
  CFunc ("SetFunctions","maxValue") 2 Public (CFuncType (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (0,"a")) (CTCons ("Prelude","Bool") []))) (CFuncType (CTCons ("SetFunctions","Values") [CTVar (0,"a")]) (CTVar (0,"a")))) (CRules CFlex [CRule [CPVar (0,"leq"),CPComb ("SetFunctions","Values") [CPVar (1,"_"),CPVar (2,"s")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("SetFunctions","maxOf")) (CVar (2,"s")))] [CLocalFunc (CFunc ("SetFunctions","maxOf") 1 Private (CFuncType (CTCons ("Prelude","[]") [CTVar (1,"_291")]) (CTVar (1,"_291"))) (CRules CFlex [CRule [CPComb ("Prelude",":") [CPVar (3,"x"),CPComb ("Prelude","[]") []]] [(CSymbol ("Prelude","success"),CVar (3,"x"))] [],CRule [CPComb ("Prelude",":") [CPVar (4,"x"),CPComb ("Prelude",":") [CPVar (5,"y"),CPVar (6,"ys")]]] [(CSymbol ("Prelude","success"),CLetDecl [CLocalPat (CPVar (7,"m1")) (CApply (CSymbol ("SetFunctions","maxOf")) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (5,"y"))) (CVar (6,"ys")))) []] (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CVar (0,"leq")) (CVar (4,"x"))) (CVar (7,"m1")))) (CVar (7,"m1"))) (CVar (4,"x"))))] []]))]]),
  CFunc ("SetFunctions","values2list") 1 Public (CFuncType (CTCons ("SetFunctions","Values") [CTVar (0,"a")]) (CTCons ("Prelude","IO") [CTCons ("Prelude","[]") [CTVar (0,"a")]])) (CRules CFlex [CRule [CPComb ("SetFunctions","Values") [CPVar (0,"_"),CPVar (1,"s")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Prelude","return")) (CVar (1,"s")))] []]),
  CFunc ("SetFunctions","printValues") 1 Public (CFuncType (CTCons ("SetFunctions","Values") [CTVar (0,"a")]) (CTCons ("Prelude","IO") [CTCons ("Prelude","()") []])) (CRules CFlex [CRule [CPVar (0,"s")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",">>=")) (CApply (CSymbol ("SetFunctions","values2list")) (CVar (0,"s")))) (CApply (CSymbol ("Prelude","mapIO_")) (CSymbol ("Prelude","print"))))] []]),
  CFunc ("SetFunctions","sortValues") 0 Public (CFuncType (CTCons ("SetFunctions","Values") [CTVar (0,"a")]) (CTCons ("Prelude","[]") [CTVar (0,"a")])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("SetFunctions","sortValuesBy")) (CSymbol ("Prelude","<=")))] []]),
  CFunc ("SetFunctions","sortValuesBy") 2 Public (CFuncType (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (0,"a")) (CTCons ("Prelude","Bool") []))) (CFuncType (CTCons ("SetFunctions","Values") [CTVar (0,"a")]) (CTCons ("Prelude","[]") [CTVar (0,"a")]))) (CRules CFlex [CRule [CPVar (0,"leq"),CPComb ("SetFunctions","Values") [CPVar (1,"_"),CPVar (2,"s")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Sort","mergeSort")) (CVar (0,"leq"))) (CVar (2,"s")))] []])]
 []
