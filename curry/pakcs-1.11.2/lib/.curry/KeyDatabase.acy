CurryProg "KeyDatabase"
 ["Prelude","Database","Integer","Sort","List","Maybe"]
 [CTypeSyn ("KeyDatabase","Key") Private [] (CTCons ("Prelude","Int") []),
  CTypeSyn ("KeyDatabase","KeyPred") Private [(0,"a")] (CFuncType (CTCons ("KeyDatabase","Key") []) (CFuncType (CTVar (0,"a")) (CTCons ("Dynamic","Dynamic") [])))]
 [CFunc ("KeyDatabase","existsDBKey") 2 Public (CFuncType (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTVar (0,"a")) (CTCons ("Dynamic","Dynamic") []))) (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("Database","Query") [CTCons ("Prelude","Bool") []]))) (CRules CFlex [CRule [CPVar (0,"db"),CPVar (1,"key")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","$")) (CApply (CSymbol ("Prelude","seq")) (CVar (0,"db")))) (CApply (CApply (CSymbol ("Prelude","$")) (CApply (CSymbol ("Prelude","seq")) (CVar (1,"key")))) (CApply (CApply (CSymbol ("Database","transformQ")) (CLambda [CPVar (2,"x0")] (CApply (CApply (CSymbol ("Prelude","/=")) (CVar (2,"x0"))) (CSymbol ("Prelude","Nothing"))))) (CApply (CSymbol ("Database","queryOne")) (CApply (CVar (0,"db")) (CVar (1,"key")))))))] []]),
  CFunc ("KeyDatabase","allDBKeys") 1 Public (CFuncType (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTVar (0,"a")) (CTCons ("Dynamic","Dynamic") []))) (CTCons ("Database","Query") [CTCons ("Prelude","[]") [CTCons ("Prelude","Int") []]])) (CRules CFlex [CRule [CPVar (0,"db")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","$")) (CApply (CSymbol ("Prelude","seq")) (CVar (0,"db")))) (CApply (CSymbol ("Database","queryAll")) (CLambda [CPVar (1,"key")] (CApply (CApply (CVar (0,"db")) (CVar (1,"key"))) (CSymbol ("Prelude","unknown"))))))] []]),
  CFunc ("KeyDatabase","allDBInfos") 1 Public (CFuncType (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTVar (0,"a")) (CTCons ("Dynamic","Dynamic") []))) (CTCons ("Database","Query") [CTCons ("Prelude","[]") [CTVar (0,"a")]])) (CRules CFlex [CRule [CPVar (0,"db")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","$")) (CApply (CSymbol ("Prelude","seq")) (CVar (0,"db")))) (CApply (CSymbol ("Database","queryAll")) (CApply (CVar (0,"db")) (CSymbol ("Prelude","unknown")))))] []]),
  CFunc ("KeyDatabase","allDBKeyInfos") 1 Public (CFuncType (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTVar (0,"a")) (CTCons ("Dynamic","Dynamic") []))) (CTCons ("Database","Query") [CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","Int") [],CTVar (0,"a")]]])) (CRules CFlex [CRule [CPVar (0,"db")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","$")) (CApply (CSymbol ("Prelude","seq")) (CVar (0,"db")))) (CApply (CSymbol ("Database","queryAll")) (CLambda [CPComb ("Prelude","(,)") [CPVar (1,"key"),CPVar (2,"info")]] (CApply (CApply (CVar (0,"db")) (CVar (1,"key"))) (CVar (2,"info"))))))] []]),
  CFunc ("KeyDatabase","getDBInfo") 2 Public (CFuncType (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTVar (0,"a")) (CTCons ("Dynamic","Dynamic") []))) (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("Database","Query") [CTCons ("Prelude","Maybe") [CTVar (0,"a")]]))) (CRules CFlex [CRule [CPVar (0,"db"),CPVar (1,"key")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","$")) (CApply (CSymbol ("Prelude","seq")) (CVar (0,"db")))) (CApply (CApply (CSymbol ("Prelude","$")) (CApply (CSymbol ("Prelude","seq")) (CVar (1,"key")))) (CApply (CSymbol ("Database","queryOne")) (CLambda [CPVar (2,"info")] (CApply (CApply (CVar (0,"db")) (CVar (1,"key"))) (CVar (2,"info")))))))] []]),
  CFunc ("KeyDatabase","index") 2 Public (CFuncType (CTVar (0,"a")) (CFuncType (CTCons ("Prelude","[]") [CTVar (0,"a")]) (CTCons ("Prelude","Int") []))) (CRules CFlex [CRule [CPVar (0,"x"),CPVar (1,"xs")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("KeyDatabase","idx")) (CLit (CIntc 0))) (CVar (1,"xs")))] [CLocalFunc (CFunc ("KeyDatabase","idx") 2 Private (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Prelude","[]") [CTVar (1,"_78")]) (CTCons ("Prelude","Int") []))) (CRules CFlex [CRule [CPVar (2,"n"),CPComb ("Prelude",":") [CPVar (3,"y"),CPVar (4,"ys")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (0,"x"))) (CVar (3,"y")))) (CVar (2,"n"))) (CApply (CApply (CSymbol ("KeyDatabase","idx")) (CApply (CApply (CSymbol ("Prelude","+")) (CVar (2,"n"))) (CLit (CIntc 1)))) (CVar (4,"ys"))))] []]))]]),
  CFunc ("KeyDatabase","sortByIndex") 0 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","Int") [],CTVar (0,"a")]]) (CTCons ("Prelude","[]") [CTVar (0,"a")])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",".")) (CApply (CSymbol ("Prelude","map")) (CSymbol ("Prelude","snd")))) (CApply (CSymbol ("Sort","mergeSort")) (CLambda [CPVar (0,"x"),CPVar (1,"y")] (CApply (CApply (CSymbol ("Prelude","<")) (CApply (CSymbol ("Prelude","fst")) (CVar (0,"x")))) (CApply (CSymbol ("Prelude","fst")) (CVar (1,"y")))))))] []]),
  CFunc ("KeyDatabase","groupByIndex") 0 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","Int") [],CTVar (0,"a")]]) (CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTVar (0,"a")]])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",".")) (CApply (CSymbol ("KeyDatabase","addEmptyIdxs")) (CLit (CIntc 0)))) (CApply (CApply (CSymbol ("Prelude",".")) (CApply (CSymbol ("List","groupBy")) (CLambda [CPVar (0,"x"),CPVar (1,"y")] (CApply (CApply (CSymbol ("Prelude","==")) (CApply (CSymbol ("Prelude","fst")) (CVar (0,"x")))) (CApply (CSymbol ("Prelude","fst")) (CVar (1,"y"))))))) (CApply (CSymbol ("Sort","mergeSort")) (CLambda [CPVar (2,"x"),CPVar (3,"y")] (CApply (CApply (CSymbol ("Prelude","<")) (CApply (CSymbol ("Prelude","fst")) (CVar (2,"x")))) (CApply (CSymbol ("Prelude","fst")) (CVar (3,"y"))))))))] [CLocalFunc (CFunc ("KeyDatabase","addEmptyIdxs") 2 Private (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","Int") [],CTVar (0,"a")]]]) (CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTVar (0,"a")]]))) (CRules CFlex [CRule [CPVar (0,"_"),CPComb ("Prelude","[]") []] [(CSymbol ("Prelude","success"),CSymbol ("Prelude","[]"))] [],CRule [CPVar (1,"n"),CPComb ("Prelude",":") [CPComb ("Prelude",":") [CPComb ("Prelude","(,)") [CPVar (2,"m"),CPVar (3,"x")],CPVar (4,"xs")],CPVar (5,"ys")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (1,"n"))) (CVar (2,"m")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (3,"x"))) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("Prelude","snd"))) (CVar (4,"xs"))))) (CApply (CApply (CSymbol ("KeyDatabase","addEmptyIdxs")) (CApply (CApply (CSymbol ("Prelude","+")) (CVar (1,"n"))) (CLit (CIntc 1)))) (CVar (5,"ys"))))) (CApply (CApply (CSymbol ("Prelude",":")) (CSymbol ("Prelude","[]"))) (CApply (CApply (CSymbol ("KeyDatabase","addEmptyIdxs")) (CApply (CApply (CSymbol ("Prelude","+")) (CVar (1,"n"))) (CLit (CIntc 1)))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CVar (2,"m"))) (CVar (3,"x")))) (CVar (4,"xs")))) (CVar (5,"ys"))))))] []]))]]),
  CFunc ("KeyDatabase","getDBInfos") 2 Public (CFuncType (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTVar (0,"a")) (CTCons ("Dynamic","Dynamic") []))) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Int") []]) (CTCons ("Database","Query") [CTCons ("Prelude","Maybe") [CTCons ("Prelude","[]") [CTVar (0,"a")]]]))) (CRules CFlex [CRule [CPVar (0,"db"),CPVar (1,"keys")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","$")) (CApply (CSymbol ("Prelude","seq")) (CVar (0,"db")))) (CApply (CApply (CSymbol ("Prelude","$")) (CApply (CSymbol ("Prelude","seq")) (CApply (CSymbol ("Prelude","normalForm")) (CVar (1,"keys"))))) (CApply (CApply (CSymbol ("Database","transformQ")) (CSymbol ("KeyDatabase","sortByKeys"))) (CApply (CSymbol ("Database","queryAll")) (CLambda [CPComb ("Prelude","(,)") [CPVar (2,"key"),CPVar (3,"info")]] (CApply (CApply (CSymbol ("Dynamic","|>")) (CApply (CApply (CVar (0,"db")) (CVar (2,"key"))) (CVar (3,"info")))) (CApply (CApply (CSymbol ("Prelude","elem")) (CVar (2,"key"))) (CVar (1,"keys")))))))))] [CLocalFunc (CFunc ("KeyDatabase","sortByKeys") 1 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","Int") [],CTVar (0,"a")]]) (CTCons ("Prelude","Maybe") [CTCons ("Prelude","[]") [CTVar (0,"a")]])) (CRules CFlex [CRule [CPVar (2,"keyinfos")] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Maybe","sequenceMaybe")) (CApply (CApply (CSymbol ("Prelude","map")) (CLambda [CPVar (3,"k")] (CApply (CApply (CSymbol ("Prelude","lookup")) (CVar (3,"k"))) (CVar (2,"keyinfos"))))) (CVar (1,"keys"))))] []]))]]),
  CFunc ("KeyDatabase","deleteDBEntry") 2 Public (CFuncType (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTVar (0,"a")) (CTCons ("Dynamic","Dynamic") []))) (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("Database","Transaction") [CTCons ("Prelude","()") []]))) (CRules CFlex [CRule [CPVar (0,"db"),CPVar (1,"key")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","$")) (CApply (CSymbol ("Prelude","seq")) (CVar (0,"db")))) (CApply (CApply (CSymbol ("Prelude","$")) (CApply (CSymbol ("Prelude","seq")) (CVar (1,"key")))) (CApply (CApply (CSymbol ("Database","|>>=")) (CApply (CSymbol ("Database","getDB")) (CApply (CSymbol ("Database","queryAll")) (CLambda [CPVar (2,"infos")] (CApply (CApply (CVar (0,"db")) (CVar (1,"key"))) (CVar (2,"infos"))))))) (CLambda [CPVar (3,"entries")] (CApply (CApply (CSymbol ("Database","mapT_")) (CLambda [CPVar (4,"infos")] (CApply (CSymbol ("Database","deleteDB")) (CApply (CApply (CVar (0,"db")) (CVar (1,"key"))) (CVar (4,"infos")))))) (CVar (3,"entries")))))))] []]),
  CFunc ("KeyDatabase","deleteDBEntries") 2 Public (CFuncType (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTVar (0,"a")) (CTCons ("Dynamic","Dynamic") []))) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Int") []]) (CTCons ("Database","Transaction") [CTCons ("Prelude","()") []]))) (CRules CFlex [CRule [CPVar (0,"db"),CPVar (1,"keys")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","$")) (CApply (CSymbol ("Prelude","seq")) (CVar (0,"db")))) (CApply (CApply (CSymbol ("Prelude","$")) (CApply (CSymbol ("Prelude","seq")) (CVar (1,"keys")))) (CApply (CApply (CSymbol ("Database","mapT_")) (CApply (CSymbol ("KeyDatabase","deleteDBEntry")) (CVar (0,"db")))) (CVar (1,"keys")))))] []]),
  CFunc ("KeyDatabase","updateDBEntry") 3 Public (CFuncType (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTVar (0,"a")) (CTCons ("Dynamic","Dynamic") []))) (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTVar (0,"a")) (CTCons ("Database","Transaction") [CTCons ("Prelude","()") []])))) (CRules CFlex [CRule [CPVar (0,"db"),CPVar (1,"key"),CPVar (2,"info")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Database","|>>=")) (CApply (CSymbol ("Database","getDB")) (CApply (CApply (CSymbol ("KeyDatabase","existsDBKey")) (CVar (0,"db"))) (CVar (1,"key"))))) (CLambda [CPVar (3,"b")] (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CVar (3,"b"))) (CApply (CApply (CSymbol ("Database","|>>")) (CApply (CApply (CSymbol ("KeyDatabase","deleteDBEntry")) (CVar (0,"db"))) (CVar (1,"key")))) (CApply (CSymbol ("Database","addDB")) (CApply (CApply (CVar (0,"db")) (CVar (1,"key"))) (CVar (2,"info")))))) (CApply (CSymbol ("Database","errorT")) (CApply (CApply (CSymbol ("Database","TError")) (CSymbol ("Database","KeyNotExistsError"))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'D'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'B'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'E'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'y'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ':'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'k'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'y'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]")))))))))))))))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("Prelude","show")) (CVar (1,"key")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'x'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CSymbol ("Prelude","[]"))))))))))))))))))))))))] []]),
  CFunc ("KeyDatabase","newDBKey") 1 Private (CFuncType (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTVar (0,"a")) (CTCons ("Dynamic","Dynamic") []))) (CTCons ("Database","Query") [CTCons ("Prelude","Int") []])) (CRules CFlex [CRule [CPVar (0,"db")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Database","transformQ")) (CLambda [CPVar (1,"ids")] (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CSymbol ("Prelude","null")) (CVar (1,"ids")))) (CLit (CIntc 1))) (CApply (CApply (CSymbol ("Prelude","+")) (CApply (CSymbol ("Integer","maxlist")) (CVar (1,"ids")))) (CLit (CIntc 1)))))) (CApply (CSymbol ("Database","queryAll")) (CLambda [CPVar (2,"i")] (CApply (CApply (CVar (0,"db")) (CVar (2,"i"))) (CSymbol ("Prelude","unknown"))))))] []]),
  CFunc ("KeyDatabase","newDBEntry") 2 Public (CFuncType (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTVar (0,"a")) (CTCons ("Dynamic","Dynamic") []))) (CFuncType (CTVar (0,"a")) (CTCons ("Database","Transaction") [CTCons ("Prelude","Int") []]))) (CRules CFlex [CRule [CPVar (0,"db"),CPVar (1,"info")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Database","|>>=")) (CApply (CSymbol ("Database","getDB")) (CApply (CSymbol ("KeyDatabase","newDBKey")) (CVar (0,"db"))))) (CLambda [CPVar (2,"i")] (CApply (CApply (CSymbol ("Database","|>>")) (CApply (CSymbol ("Database","addDB")) (CApply (CApply (CVar (0,"db")) (CVar (2,"i"))) (CVar (1,"info"))))) (CApply (CSymbol ("Database","returnT")) (CVar (2,"i"))))))] []]),
  CFunc ("KeyDatabase","newDBKeyEntry") 3 Public (CFuncType (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTVar (0,"a")) (CTCons ("Dynamic","Dynamic") []))) (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTVar (0,"a")) (CTCons ("Database","Transaction") [CTCons ("Prelude","()") []])))) (CRules CFlex [CRule [CPVar (0,"db"),CPVar (1,"key"),CPVar (2,"info")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Database","|>>=")) (CApply (CSymbol ("Database","getDB")) (CApply (CApply (CSymbol ("KeyDatabase","existsDBKey")) (CVar (0,"db"))) (CVar (1,"key"))))) (CLambda [CPVar (3,"b")] (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CVar (3,"b"))) (CApply (CSymbol ("Database","errorT")) (CApply (CApply (CSymbol ("Database","TError")) (CSymbol ("Database","DuplicateKeyError"))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'b'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'y'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'y'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'w'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'h'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'k'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'y'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ':'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]"))))))))))))))))))))))))))))))))))))))))))))) (CApply (CSymbol ("Prelude","show")) (CVar (1,"key"))))))) (CApply (CApply (CSymbol ("Database","|>>")) (CApply (CSymbol ("Database","addDB")) (CApply (CApply (CVar (0,"db")) (CVar (1,"key"))) (CVar (2,"info"))))) (CSymbol ("Database","doneT"))))))] []]),
  CFunc ("KeyDatabase","cleanDB") 1 Public (CFuncType (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTVar (0,"a")) (CTCons ("Dynamic","Dynamic") []))) (CTCons ("Database","Transaction") [CTCons ("Prelude","()") []])) (CRules CFlex [CRule [CPVar (0,"db")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Database","|>>=")) (CApply (CSymbol ("Database","getDB")) (CApply (CSymbol ("Database","queryAll")) (CLambda [CPVar (1,"i")] (CApply (CApply (CVar (0,"db")) (CVar (1,"i"))) (CSymbol ("Prelude","unknown"))))))) (CApply (CSymbol ("KeyDatabase","deleteDBEntries")) (CVar (0,"db"))))] []])]
 []
