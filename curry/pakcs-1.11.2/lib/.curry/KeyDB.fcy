Prog "KeyDB" ["Dynamic","Integer","List","Prelude","Sort"] [] [Func ("KeyDB","existsDBKey") 2 Public (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (TCons ("Dynamic","Dynamic") []))) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","IO") [TCons ("Prelude","Bool") []]))) (Rule [1,2] (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Prelude","seq") [Var 1],Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Prelude","seq") [Var 2],Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Dynamic","getDynamicSolution") [Comb (FuncPartCall 1) ("KeyDB","existsDBKey._#lambda1") [Var 1,Var 2]],Comb (FuncPartCall 1) ("KeyDB","existsDBKey._#lambda2") []]]])),Func ("KeyDB","existsDBKey._#lambda1") 3 Private (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 22) (TCons ("Dynamic","Dynamic") []))) (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 22) (TCons ("Dynamic","Dynamic") [])))) (Rule [1,2,3] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 1,Var 2],Var 3])),Func ("KeyDB","existsDBKey._#lambda2") 1 Private (FuncType (TCons ("Prelude","Maybe") [TVar 22]) (TCons ("Prelude","IO") [TCons ("Prelude","Bool") []])) (Rule [1] (Comb FuncCall ("Prelude","return") [Comb FuncCall ("Prelude","/=") [Var 1,Comb ConsCall ("Prelude","Nothing") []]])),Func ("KeyDB","allDBKeys") 1 Public (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (TCons ("Dynamic","Dynamic") []))) (TCons ("Prelude","IO") [TCons ("Prelude","[]") [TCons ("Prelude","Int") []]])) (Rule [1] (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Prelude","seq") [Var 1],Comb FuncCall ("Dynamic","getDynamicSolutions") [Comb (FuncPartCall 1) ("KeyDB","allDBKeys._#lambda3") [Var 1]]])),Func ("KeyDB","allDBKeys._#lambda3") 2 Private (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 34) (TCons ("Dynamic","Dynamic") []))) (FuncType (TCons ("Prelude","Int") []) (TCons ("Dynamic","Dynamic") []))) (Rule [1,2] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 1,Var 2],Comb FuncCall ("Prelude","unknown") []])),Func ("KeyDB","getDBInfo") 2 Public (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (TCons ("Dynamic","Dynamic") []))) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","IO") [TVar 0]))) (Rule [1,2] (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Prelude","seq") [Var 1],Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Prelude","seq") [Var 2],Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Dynamic","getDynamicSolutions") [Comb (FuncPartCall 1) ("KeyDB","getDBInfo._#lambda4") [Var 1,Var 2]],Comb (FuncPartCall 1) ("KeyDB","getDBInfo._#lambda5") [Var 2]]]])),Func ("KeyDB","getDBInfo._#lambda4") 3 Private (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 50) (TCons ("Dynamic","Dynamic") []))) (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 50) (TCons ("Dynamic","Dynamic") [])))) (Rule [1,2,3] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 1,Var 2],Var 3])),Func ("KeyDB","getDBInfo._#lambda5") 2 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TVar 50]) (TCons ("Prelude","IO") [TVar 50]))) (Rule [1,2] (Case  Rigid (Comb FuncCall ("Prelude","null") [Var 2]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","error") [Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'D'),Comb ConsCall ("Prelude",":") [Lit (Charc  'B'),Comb ConsCall ("Prelude",":") [Lit (Charc  'I'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'k'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '\''),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","show") [Var 1],Comb ConsCall ("Prelude",":") [Lit (Charc  '\''),Comb ConsCall ("Prelude","[]") []]]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","return") [Comb FuncCall ("Prelude","head") [Var 2]])])),Func ("KeyDB","index") 2 Public (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","Int") []))) (Rule [1,2] (Comb FuncCall ("KeyDB","index.idx.13") [Var 1,Lit (Intc  0),Var 2])),Func ("KeyDB","index.idx.13") 3 Private (FuncType (TVar 69) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TVar 69]) (TCons ("Prelude","Int") [])))) (Rule [1,2,3] (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 1,Var 4]) [Branch (Pattern ("Prelude","True") []) (Var 2),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("KeyDB","index.idx.13") [Var 1,Comb FuncCall ("Prelude","+") [Var 2,Lit (Intc  1)],Var 5])])])),Func ("KeyDB","sortByIndex") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TVar 0]]) (TCons ("Prelude","[]") [TVar 0])) (Rule [] (Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","map") [Comb (FuncPartCall 1) ("Prelude","snd") []],Comb (FuncPartCall 1) ("Sort","mergeSort") [Comb (FuncPartCall 2) ("KeyDB","sortByIndex._#lambda6") []]])),Func ("KeyDB","sortByIndex._#lambda6") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TVar 91]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TVar 91]) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Comb FuncCall ("Prelude","<") [Comb FuncCall ("Prelude","fst") [Var 1],Comb FuncCall ("Prelude","fst") [Var 2]])),Func ("KeyDB","groupByIndex") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TVar 0]]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 0]])) (Rule [] (Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("KeyDB","groupByIndex.addEmptyIdxs.22") [Lit (Intc  0)],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("List","groupBy") [Comb (FuncPartCall 2) ("KeyDB","groupByIndex._#lambda7") []],Comb (FuncPartCall 1) ("Sort","mergeSort") [Comb (FuncPartCall 2) ("KeyDB","groupByIndex._#lambda8") []]]])),Func ("KeyDB","groupByIndex.addEmptyIdxs.22") 2 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TVar 0]]]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 0]]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [3,4]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [5,6]) (Case  Flex (Var 5) [Branch (Pattern ("Prelude","(,)") [7,8]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 1,Var 7]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Var 8,Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Prelude","snd") [],Var 6]],Comb FuncCall ("KeyDB","groupByIndex.addEmptyIdxs.22") [Comb FuncCall ("Prelude","+") [Var 1,Lit (Intc  1)],Var 4]]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("KeyDB","groupByIndex.addEmptyIdxs.22") [Comb FuncCall ("Prelude","+") [Var 1,Lit (Intc  1)],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Var 7,Var 8],Var 6],Var 4]]])])])])])),Func ("KeyDB","groupByIndex._#lambda7") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TVar 144]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TVar 144]) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Comb FuncCall ("Prelude","==") [Comb FuncCall ("Prelude","fst") [Var 1],Comb FuncCall ("Prelude","fst") [Var 2]])),Func ("KeyDB","groupByIndex._#lambda8") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TVar 144]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TVar 144]) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Comb FuncCall ("Prelude","<") [Comb FuncCall ("Prelude","fst") [Var 1],Comb FuncCall ("Prelude","fst") [Var 2]])),Func ("KeyDB","getDBInfos") 2 Public (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (TCons ("Dynamic","Dynamic") []))) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","IO") [TCons ("Prelude","[]") [TVar 0]]))) (Rule [1,2] (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Prelude","seq") [Var 1],Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Prelude","seq") [Comb FuncCall ("Prelude","normalForm") [Var 2]],Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Dynamic","getDynamicSolutions") [Comb (FuncPartCall 1) ("KeyDB","getDBInfos._#lambda9") [Var 1,Var 2]],Comb (FuncPartCall 1) ("KeyDB","getDBInfos._#lambda10") []]]])),Func ("KeyDB","getDBInfos._#lambda9") 3 Private (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 162) (TCons ("Dynamic","Dynamic") []))) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TVar 162]) (TCons ("Dynamic","Dynamic") [])))) (Rule [1,2,3] (Case  Flex (Var 3) [Branch (Pattern ("Prelude","(,)") [4,5]) (Free [6] (Comb FuncCall ("Dynamic","|&>") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 1,Var 6],Var 5],Comb FuncCall ("Prelude","=:=") [Var 4,Comb FuncCall ("KeyDB","index") [Var 6,Var 2]]]))])),Func ("KeyDB","getDBInfos._#lambda10") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TVar 162]]) (TCons ("Prelude","IO") [TCons ("Prelude","[]") [TVar 162]])) (Rule [1] (Comb FuncCall ("Prelude","return") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("KeyDB","sortByIndex") [],Var 1]])),Func ("KeyDB","deleteDBEntry") 2 Public (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (TCons ("Dynamic","Dynamic") []))) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","IO") [TCons ("Prelude","()") []]))) (Rule [1,2] (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Prelude","seq") [Var 1],Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Prelude","seq") [Var 2],Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Dynamic","getDynamicSolutions") [Comb (FuncPartCall 1) ("KeyDB","deleteDBEntry._#lambda11") [Var 1,Var 2]],Comb (FuncPartCall 1) ("KeyDB","deleteDBEntry._#lambda12") [Var 1,Var 2]]]])),Func ("KeyDB","deleteDBEntry._#lambda11") 3 Private (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 194) (TCons ("Dynamic","Dynamic") []))) (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 194) (TCons ("Dynamic","Dynamic") [])))) (Rule [1,2,3] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 1,Var 2],Var 3])),Func ("KeyDB","deleteDBEntry._#lambda12") 3 Private (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 194) (TCons ("Dynamic","Dynamic") []))) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TVar 194]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []])))) (Rule [1,2,3] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","mapIO_") [Comb (FuncPartCall 1) ("KeyDB","deleteDBEntry._#lambda12._#lambda13") [Var 1,Var 2]],Var 3])),Func ("KeyDB","deleteDBEntry._#lambda12._#lambda13") 3 Private (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 194) (TCons ("Dynamic","Dynamic") []))) (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 194) (TCons ("Prelude","IO") [TCons ("Prelude","Bool") []])))) (Rule [1,2,3] (Comb FuncCall ("Dynamic","retract") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 1,Var 2],Var 3]])),Func ("KeyDB","updateDBEntry") 3 Public (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (TCons ("Dynamic","Dynamic") []))) (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (TCons ("Prelude","IO") [TCons ("Prelude","()") []])))) (Rule [1,2,3] (Comb FuncCall ("Prelude",">>") [Comb FuncCall ("KeyDB","deleteDBEntry") [Var 1,Var 2],Comb FuncCall ("Dynamic","assert") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 1,Var 2],Var 3]]])),Func ("KeyDB","newDBKey") 1 Private (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (TCons ("Dynamic","Dynamic") []))) (TCons ("Prelude","IO") [TCons ("Prelude","Int") []])) (Rule [1] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Dynamic","getDynamicSolutions") [Comb (FuncPartCall 1) ("KeyDB","newDBKey._#lambda14") [Var 1]],Comb (FuncPartCall 1) ("KeyDB","newDBKey._#lambda15") []])),Func ("KeyDB","newDBKey._#lambda14") 2 Private (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 209) (TCons ("Dynamic","Dynamic") []))) (FuncType (TCons ("Prelude","Int") []) (TCons ("Dynamic","Dynamic") []))) (Rule [1,2] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 1,Var 2],Comb FuncCall ("Prelude","unknown") []])),Func ("KeyDB","newDBKey._#lambda15") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","IO") [TCons ("Prelude","Int") []])) (Rule [1] (Comb FuncCall ("Prelude","return") [Case  Rigid (Comb FuncCall ("Prelude","null") [Var 1]) [Branch (Pattern ("Prelude","True") []) (Lit (Intc  1)),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","+") [Comb FuncCall ("Integer","maxlist") [Var 1],Lit (Intc  1)])]])),Func ("KeyDB","newDBEntry") 2 Public (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (TCons ("Dynamic","Dynamic") []))) (FuncType (TVar 0) (TCons ("Prelude","IO") [TCons ("Prelude","Int") []]))) (Rule [1,2] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("KeyDB","newDBKey") [Var 1],Comb (FuncPartCall 1) ("KeyDB","newDBEntry._#lambda16") [Var 1,Var 2]])),Func ("KeyDB","newDBEntry._#lambda16") 3 Private (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 220) (TCons ("Dynamic","Dynamic") []))) (FuncType (TVar 220) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","IO") [TCons ("Prelude","Int") []])))) (Rule [1,2,3] (Comb FuncCall ("Prelude",">>") [Comb FuncCall ("Dynamic","assert") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 1,Var 3],Var 2]],Comb FuncCall ("Prelude","return") [Var 3]])),Func ("KeyDB","cleanDB") 1 Public (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (TCons ("Dynamic","Dynamic") []))) (TCons ("Prelude","IO") [TCons ("Prelude","()") []])) (Rule [1] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Dynamic","getDynamicSolutions") [Comb (FuncPartCall 1) ("KeyDB","cleanDB._#lambda17") [Var 1]],Comb (FuncPartCall 1) ("KeyDB","cleanDB._#lambda18") [Var 1]])),Func ("KeyDB","cleanDB._#lambda17") 2 Private (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 233) (TCons ("Dynamic","Dynamic") []))) (FuncType (TCons ("Prelude","Int") []) (TCons ("Dynamic","Dynamic") []))) (Rule [1,2] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 1,Var 2],Comb FuncCall ("Prelude","unknown") []])),Func ("KeyDB","cleanDB._#lambda18") 2 Private (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 233) (TCons ("Dynamic","Dynamic") []))) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []]))) (Rule [1,2] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","mapIO_") [Comb (FuncPartCall 1) ("KeyDB","cleanDB._#lambda18._#lambda19") [Var 1]],Var 2])),Func ("KeyDB","cleanDB._#lambda18._#lambda19") 2 Private (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 233) (TCons ("Dynamic","Dynamic") []))) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","IO") [TCons ("Prelude","()") []]))) (Rule [1,2] (Comb FuncCall ("KeyDB","deleteDBEntry") [Var 1,Var 2]))] []