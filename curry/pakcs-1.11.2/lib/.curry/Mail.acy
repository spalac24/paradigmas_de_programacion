CurryProg "Mail"
 ["Prelude","List","IOExts","IO"]
 [CType ("Mail","MailOption") Public [] [CCons ("Mail","CC") 1 Public [CTCons ("Prelude","String") []],CCons ("Mail","BCC") 1 Public [CTCons ("Prelude","String") []],CCons ("Mail","TO") 1 Public [CTCons ("Prelude","String") []]]]
 [CFunc ("Mail","sendMail") 3 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","IO") [CTCons ("Prelude","()") []]))))) (CRules CFlex [CRule [CPVar (0,"from"),CPVar (1,"to"),CPVar (2,"subject")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Mail","sendMailWithOptions")) (CVar (0,"from"))) (CVar (2,"subject"))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("Mail","TO")) (CVar (1,"to")))) (CSymbol ("Prelude","[]"))))] []]),
  CFunc ("Mail","sendMailWithOptions") 4 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Mail","MailOption") []]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","IO") [CTCons ("Prelude","()") []]))))) (CRules CFlex [CRule [CPVar (0,"from"),CPVar (1,"subject"),CPVar (2,"options"),CPVar (3,"contents")] [(CSymbol ("Prelude","success"),CDoExpr [CSExpr (CApply (CApply (CSymbol ("Mail","execMailCmd")) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'x'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '-'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '-'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '"'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'F'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ':'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]")))))))))))))))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (0,"from"))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '"'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '-'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '"'))) (CSymbol ("Prelude","[]"))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (1,"subject"))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '"'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]"))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CSymbol ("Prelude","null")) (CVar (6,"bccs")))) (CSymbol ("Prelude","[]"))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '-'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'b'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '"'))) (CSymbol ("Prelude","[]"))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (6,"bccs"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '"'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]")))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CSymbol ("Prelude","null")) (CVar (5,"ccs")))) (CSymbol ("Prelude","[]"))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '-'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '"'))) (CSymbol ("Prelude","[]"))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (5,"ccs"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '"'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]")))))))) (CVar (4,"tos")))))))))) (CVar (3,"contents")))])] [CLocalPat (CPVar (4,"tos")) (CApply (CSymbol ("Prelude","concat")) (CApply (CApply (CSymbol ("List","intersperse")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]")))) (CListComp (CVar (7,"s")) [CSPat (CPComb ("Mail","TO") [CPVar (7,"s")]) (CVar (2,"options"))]))) [],CLocalPat (CPVar (5,"ccs")) (CApply (CSymbol ("Prelude","concat")) (CApply (CApply (CSymbol ("List","intersperse")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]")))) (CListComp (CVar (8,"s")) [CSPat (CPComb ("Mail","CC") [CPVar (8,"s")]) (CVar (2,"options"))]))) [],CLocalPat (CPVar (6,"bccs")) (CApply (CSymbol ("Prelude","concat")) (CApply (CApply (CSymbol ("List","intersperse")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]")))) (CListComp (CVar (9,"s")) [CSPat (CPComb ("Mail","BCC") [CPVar (9,"s")]) (CVar (2,"options"))]))) []]]),
  CFunc ("Mail","execMailCmd") 2 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","IO") [CTCons ("Prelude","()") []]))) (CRules CFlex [CRule [CPVar (0,"cmd"),CPVar (1,"contents")] [(CSymbol ("Prelude","success"),CDoExpr [CSPat (CPComb ("Prelude","(,,)") [CPVar (2,"sin"),CPVar (3,"_"),CPVar (4,"_")]) (CApply (CSymbol ("IOExts","execCmd")) (CVar (0,"cmd"))),CSExpr (CApply (CApply (CSymbol ("IO","hPutStrLn")) (CVar (2,"sin"))) (CApply (CApply (CSymbol ("Prelude","filter")) (CSymbol ("Mail","isUnixChar"))) (CVar (1,"contents")))),CSExpr (CApply (CSymbol ("IO","hClose")) (CVar (2,"sin")))])] [CLocalFunc (CFunc ("Mail","isUnixChar") 1 Private (CFuncType (CTCons ("Prelude","Char") []) (CTCons ("Prelude","Bool") [])) (CRules CFlex [CRule [CPVar (2,"c")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","/=")) (CVar (2,"c"))) (CLit (CCharc '\r')))] []]))]])]
 []
