CurryProg "Markdown"
 ["Prelude","List","Char","HTML","HtmlParser","System","IO"]
 [CTypeSyn ("Markdown","MarkdownDoc") Public [] (CTCons ("Prelude","[]") [CTCons ("Markdown","MarkdownElem") []]),
  CType ("Markdown","MarkdownElem") Public [] [CCons ("Markdown","Text") 1 Public [CTCons ("Prelude","String") []],CCons ("Markdown","Emph") 1 Public [CTCons ("Prelude","String") []],CCons ("Markdown","Strong") 1 Public [CTCons ("Prelude","String") []],CCons ("Markdown","Code") 1 Public [CTCons ("Prelude","String") []],CCons ("Markdown","HRef") 2 Public [CTCons ("Prelude","String") [],CTCons ("Prelude","String") []],CCons ("Markdown","Par") 1 Public [CTCons ("Markdown","MarkdownDoc") []],CCons ("Markdown","CodeBlock") 1 Public [CTCons ("Prelude","String") []],CCons ("Markdown","UList") 1 Public [CTCons ("Prelude","[]") [CTCons ("Markdown","MarkdownDoc") []]],CCons ("Markdown","OList") 1 Public [CTCons ("Prelude","[]") [CTCons ("Markdown","MarkdownDoc") []]],CCons ("Markdown","Quote") 1 Public [CTCons ("Markdown","MarkdownDoc") []],CCons ("Markdown","HRule") 0 Public [],CCons ("Markdown","Header") 2 Public [CTCons ("Prelude","Int") [],CTCons ("Prelude","String") []]],
  CType ("Markdown","SourceMDElem") Private [] [CCons ("Markdown","SMDText") 1 Private [CTCons ("Prelude","String") []],CCons ("Markdown","SMDEmph") 1 Private [CTCons ("Prelude","String") []],CCons ("Markdown","SMDStrong") 1 Private [CTCons ("Prelude","String") []],CCons ("Markdown","SMDCode") 1 Private [CTCons ("Prelude","String") []],CCons ("Markdown","SMDHRef") 2 Private [CTCons ("Prelude","String") [],CTCons ("Prelude","String") []],CCons ("Markdown","SMDPar") 1 Private [CTCons ("Markdown","MarkdownDoc") []],CCons ("Markdown","SMDCodeBlock") 1 Private [CTCons ("Prelude","String") []],CCons ("Markdown","SMDUItem") 1 Private [CTCons ("Prelude","String") []],CCons ("Markdown","SMDOItem") 1 Private [CTCons ("Prelude","String") []],CCons ("Markdown","SMDQuote") 1 Private [CTCons ("Markdown","MarkdownDoc") []],CCons ("Markdown","SMDHRule") 0 Private [],CCons ("Markdown","SMDHeader") 2 Private [CTCons ("Prelude","Int") [],CTCons ("Prelude","String") []]]]
 [CFunc ("Markdown","isSMDUItem") 1 Private (CFuncType (CTCons ("Markdown","SourceMDElem") []) (CTCons ("Prelude","Bool") [])) (CRules CFlex [CRule [CPVar (0,"md")] [(CSymbol ("Prelude","success"),CCase (CVar (0,"md")) [CBranch (CPComb ("Markdown","SMDUItem") [CPVar (1,"_")]) (CSymbol ("Prelude","True")),CBranch (CPVar (2,"_")) (CSymbol ("Prelude","False"))])] []]),
  CFunc ("Markdown","isSMDOItem") 1 Private (CFuncType (CTCons ("Markdown","SourceMDElem") []) (CTCons ("Prelude","Bool") [])) (CRules CFlex [CRule [CPVar (0,"md")] [(CSymbol ("Prelude","success"),CCase (CVar (0,"md")) [CBranch (CPComb ("Markdown","SMDOItem") [CPVar (1,"_")]) (CSymbol ("Prelude","True")),CBranch (CPVar (2,"_")) (CSymbol ("Prelude","False"))])] []]),
  CFunc ("Markdown","textOfItem") 1 Private (CFuncType (CTCons ("Markdown","SourceMDElem") []) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CRules CFlex [CRule [CPComb ("Markdown","SMDUItem") [CPVar (0,"txt")]] [(CSymbol ("Prelude","success"),CVar (0,"txt"))] [],CRule [CPComb ("Markdown","SMDOItem") [CPVar (1,"txt")]] [(CSymbol ("Prelude","success"),CVar (1,"txt"))] []]),
  CFunc ("Markdown","fromMarkdownText") 0 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","[]") [CTCons ("Markdown","MarkdownElem") []])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Markdown","groupMarkDownElems"))) (CSymbol ("Markdown","markdownText")))] []]),
  CFunc ("Markdown","groupMarkDownElems") 1 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Markdown","SourceMDElem") []]) (CTCons ("Prelude","[]") [CTCons ("Markdown","MarkdownElem") []])) (CRules CFlex [CRule [CPComb ("Prelude","[]") []] [(CSymbol ("Prelude","success"),CSymbol ("Prelude","[]"))] [],CRule [CPComb ("Prelude",":") [CPComb ("Markdown","SMDUItem") [CPVar (0,"itxt")],CPVar (1,"mds")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CSymbol ("Markdown","joinItems")) (CSymbol ("Markdown","UList"))) (CSymbol ("Markdown","isSMDUItem"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (0,"itxt"))) (CSymbol ("Prelude","[]")))) (CVar (1,"mds")))] [],CRule [CPComb ("Prelude",":") [CPComb ("Markdown","SMDOItem") [CPVar (2,"itxt")],CPVar (3,"mds")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CSymbol ("Markdown","joinItems")) (CSymbol ("Markdown","OList"))) (CSymbol ("Markdown","isSMDOItem"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (2,"itxt"))) (CSymbol ("Prelude","[]")))) (CVar (3,"mds")))] [],CRule [CPComb ("Prelude",":") [CPComb ("Markdown","SMDText") [CPVar (4,"s")],CPVar (5,"mds")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("Markdown","Text")) (CVar (4,"s")))) (CApply (CSymbol ("Markdown","groupMarkDownElems")) (CVar (5,"mds"))))] [],CRule [CPComb ("Prelude",":") [CPComb ("Markdown","SMDEmph") [CPVar (6,"s")],CPVar (7,"mds")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("Markdown","Emph")) (CVar (6,"s")))) (CApply (CSymbol ("Markdown","groupMarkDownElems")) (CVar (7,"mds"))))] [],CRule [CPComb ("Prelude",":") [CPComb ("Markdown","SMDStrong") [CPVar (8,"s")],CPVar (9,"mds")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("Markdown","Strong")) (CVar (8,"s")))) (CApply (CSymbol ("Markdown","groupMarkDownElems")) (CVar (9,"mds"))))] [],CRule [CPComb ("Prelude",":") [CPComb ("Markdown","SMDCode") [CPVar (10,"s")],CPVar (11,"mds")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("Markdown","Code")) (CVar (10,"s")))) (CApply (CSymbol ("Markdown","groupMarkDownElems")) (CVar (11,"mds"))))] [],CRule [CPComb ("Prelude",":") [CPComb ("Markdown","SMDHRef") [CPVar (12,"s"),CPVar (13,"u")],CPVar (14,"mds")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Markdown","HRef")) (CVar (12,"s"))) (CVar (13,"u")))) (CApply (CSymbol ("Markdown","groupMarkDownElems")) (CVar (14,"mds"))))] [],CRule [CPComb ("Prelude",":") [CPComb ("Markdown","SMDPar") [CPVar (15,"md")],CPVar (16,"mds")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("Markdown","Par")) (CVar (15,"md")))) (CApply (CSymbol ("Markdown","groupMarkDownElems")) (CVar (16,"mds"))))] [],CRule [CPComb ("Prelude",":") [CPComb ("Markdown","SMDCodeBlock") [CPVar (17,"s")],CPVar (18,"mds")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("Markdown","CodeBlock")) (CVar (17,"s")))) (CApply (CSymbol ("Markdown","groupMarkDownElems")) (CVar (18,"mds"))))] [],CRule [CPComb ("Prelude",":") [CPComb ("Markdown","SMDQuote") [CPVar (19,"md")],CPVar (20,"mds")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("Markdown","Quote")) (CVar (19,"md")))) (CApply (CSymbol ("Markdown","groupMarkDownElems")) (CVar (20,"mds"))))] [],CRule [CPComb ("Prelude",":") [CPComb ("Markdown","SMDHRule") [],CPVar (21,"mds")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",":")) (CSymbol ("Markdown","HRule"))) (CApply (CSymbol ("Markdown","groupMarkDownElems")) (CVar (21,"mds"))))] [],CRule [CPComb ("Prelude",":") [CPComb ("Markdown","SMDHeader") [CPVar (22,"l"),CPVar (23,"s")],CPVar (24,"mds")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Markdown","Header")) (CVar (22,"l"))) (CVar (23,"s")))) (CApply (CSymbol ("Markdown","groupMarkDownElems")) (CVar (24,"mds"))))] []]),
  CFunc ("Markdown","joinItems") 4 Private (CFuncType (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTCons ("Markdown","MarkdownElem") []]]) (CTCons ("Markdown","MarkdownElem") [])) (CFuncType (CFuncType (CTCons ("Markdown","SourceMDElem") []) (CTCons ("Prelude","Bool") [])) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Markdown","SourceMDElem") []]) (CTCons ("Prelude","[]") [CTCons ("Markdown","MarkdownElem") []]))))) (CRules CFlex [CRule [CPVar (0,"mdlcons"),CPVar (1,"_"),CPVar (2,"items"),CPComb ("Prelude","[]") []] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",":")) (CApply (CVar (0,"mdlcons")) (CApply (CSymbol ("Prelude","reverse")) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("Markdown","fromMarkdownText"))) (CVar (2,"items")))))) (CSymbol ("Prelude","[]")))] [],CRule [CPVar (3,"mdlcons"),CPVar (4,"isitem"),CPVar (5,"items"),CPComb ("Prelude",":") [CPVar (6,"md"),CPVar (7,"mds")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CVar (4,"isitem")) (CVar (6,"md")))) (CApply (CApply (CApply (CApply (CSymbol ("Markdown","joinItems")) (CVar (3,"mdlcons"))) (CVar (4,"isitem"))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("Markdown","textOfItem")) (CVar (6,"md")))) (CVar (5,"items")))) (CVar (7,"mds")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CVar (3,"mdlcons")) (CApply (CSymbol ("Prelude","reverse")) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("Markdown","fromMarkdownText"))) (CVar (5,"items")))))) (CApply (CSymbol ("Markdown","groupMarkDownElems")) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (6,"md"))) (CVar (7,"mds"))))))] []]),
  CFunc ("Markdown","markdownText") 1 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","[]") [CTCons ("Markdown","SourceMDElem") []])) (CRules CFlex [CRule [CPComb ("Prelude","[]") []] [(CSymbol ("Prelude","success"),CSymbol ("Prelude","[]"))] [],CRule [CPAs (2,"txt") (CPComb ("Prelude",":") [CPVar (0,"_"),CPVar (1,"_")])] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Markdown","markdownLine")) (CVar (3,"fstline"))) (CApply (CSymbol ("Markdown","dropFirst")) (CVar (4,"remtxt"))))] [CLocalPat (CPComb ("Prelude","(,)") [CPVar (3,"fstline"),CPVar (4,"remtxt")]) (CApply (CApply (CSymbol ("Prelude","break")) (CLambda [CPVar (5,"x0")] (CApply (CApply (CSymbol ("Prelude","==")) (CVar (5,"x0"))) (CLit (CCharc '\n'))))) (CVar (2,"txt"))) []]]),
  CFunc ("Markdown","markdownLine") 2 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","[]") [CTCons ("Markdown","SourceMDElem") []]))) (CRules CFlex [CRule [CPVar (0,"fstline"),CPVar (1,"remtxt")] [(CApply (CApply (CSymbol ("Prelude","all")) (CSymbol ("Char","isSpace"))) (CVar (0,"fstline")),CApply (CSymbol ("Markdown","markdownText")) (CVar (1,"remtxt"))),(CVar (4,"isLevel1Line"),CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Markdown","SMDHeader")) (CLit (CIntc 1))) (CVar (0,"fstline")))) (CApply (CSymbol ("Markdown","markdownText")) (CApply (CSymbol ("Markdown","dropFirst")) (CVar (3,"furtherlines"))))),(CVar (5,"isLevel2Line"),CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Markdown","SMDHeader")) (CLit (CIntc 2))) (CVar (0,"fstline")))) (CApply (CSymbol ("Markdown","markdownText")) (CApply (CSymbol ("Markdown","dropFirst")) (CVar (3,"furtherlines"))))),(CApply (CApply (CSymbol ("Prelude","==")) (CApply (CApply (CSymbol ("Prelude","take")) (CLit (CIntc 1))) (CVar (0,"fstline")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '#'))) (CSymbol ("Prelude","[]"))),CApply (CApply (CSymbol ("Markdown","tryMDHeader")) (CVar (0,"fstline"))) (CVar (1,"remtxt"))),(CApply (CSymbol ("Markdown","isHRule")) (CVar (0,"fstline")),CApply (CApply (CSymbol ("Prelude",":")) (CSymbol ("Markdown","SMDHRule"))) (CApply (CSymbol ("Markdown","markdownText")) (CVar (1,"remtxt")))),(CApply (CApply (CSymbol ("Prelude","==")) (CApply (CApply (CSymbol ("Prelude","take")) (CLit (CIntc 2))) (CVar (0,"fstline")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '>'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]")))),CApply (CApply (CSymbol ("Markdown","markdownQuote")) (CApply (CApply (CSymbol ("Prelude","drop")) (CLit (CIntc 2))) (CVar (0,"fstline")))) (CVar (1,"remtxt"))),(CApply (CApply (CSymbol ("Prelude",">")) (CVar (8,"blanklen"))) (CLit (CIntc 0)),CApply (CApply (CApply (CSymbol ("Markdown","markdownCodeBlock")) (CVar (8,"blanklen"))) (CApply (CSymbol ("Markdown","removeEscapes")) (CApply (CApply (CSymbol ("Prelude","drop")) (CVar (8,"blanklen"))) (CVar (0,"fstline"))))) (CVar (1,"remtxt"))),(CApply (CApply (CSymbol ("Prelude",">")) (CVar (7,"uitemlen"))) (CLit (CIntc 0)),CApply (CApply (CApply (CApply (CSymbol ("Markdown","markdownItem")) (CSymbol ("Markdown","SMDUItem"))) (CVar (7,"uitemlen"))) (CApply (CApply (CSymbol ("Prelude","drop")) (CVar (7,"uitemlen"))) (CVar (0,"fstline")))) (CVar (1,"remtxt"))),(CApply (CApply (CSymbol ("Prelude",">")) (CVar (6,"nitemlen"))) (CLit (CIntc 0)),CApply (CApply (CApply (CApply (CSymbol ("Markdown","markdownItem")) (CSymbol ("Markdown","SMDOItem"))) (CVar (6,"nitemlen"))) (CApply (CApply (CSymbol ("Prelude","drop")) (CVar (6,"nitemlen"))) (CVar (0,"fstline")))) (CVar (1,"remtxt"))),(CSymbol ("Prelude","otherwise"),CApply (CApply (CSymbol ("Markdown","markdownPar")) (CVar (0,"fstline"))) (CVar (1,"remtxt")))] [CLocalPat (CPComb ("Prelude","(,)") [CPVar (2,"sndline"),CPVar (3,"furtherlines")]) (CApply (CApply (CSymbol ("Prelude","break")) (CLambda [CPVar (9,"x0")] (CApply (CApply (CSymbol ("Prelude","==")) (CVar (9,"x0"))) (CLit (CCharc '\n'))))) (CVar (1,"remtxt"))) [],CLocalPat (CPVar (4,"isLevel1Line")) (CApply (CApply (CSymbol ("Prelude","&&")) (CApply (CSymbol ("Prelude","not")) (CApply (CSymbol ("Prelude","null")) (CVar (2,"sndline"))))) (CApply (CApply (CSymbol ("Prelude","all")) (CLambda [CPVar (10,"x0")] (CApply (CApply (CSymbol ("Prelude","==")) (CVar (10,"x0"))) (CLit (CCharc '='))))) (CVar (2,"sndline")))) [],CLocalPat (CPVar (5,"isLevel2Line")) (CApply (CApply (CSymbol ("Prelude","&&")) (CApply (CSymbol ("Prelude","not")) (CApply (CSymbol ("Prelude","null")) (CVar (2,"sndline"))))) (CApply (CApply (CSymbol ("Prelude","all")) (CLambda [CPVar (11,"x0")] (CApply (CApply (CSymbol ("Prelude","==")) (CVar (11,"x0"))) (CLit (CCharc '-'))))) (CVar (2,"sndline")))) [],CLocalPat (CPVar (6,"nitemlen")) (CApply (CSymbol ("Markdown","isNumberedItemLine")) (CVar (0,"fstline"))) [],CLocalPat (CPVar (7,"uitemlen")) (CApply (CSymbol ("Markdown","isUnorderedItemLine")) (CVar (0,"fstline"))) [],CLocalPat (CPVar (8,"blanklen")) (CApply (CSymbol ("Markdown","isCodeLine")) (CVar (0,"fstline"))) []]]),
  CFunc ("Markdown","dropFirst") 1 Private (CFuncType (CTCons ("Prelude","[]") [CTVar (0,"a")]) (CTCons ("Prelude","[]") [CTVar (0,"a")])) (CRules CFlex [CRule [CPVar (0,"s")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CSymbol ("Prelude","null")) (CVar (0,"s")))) (CSymbol ("Prelude","[]"))) (CApply (CSymbol ("Prelude","tail")) (CVar (0,"s"))))] []]),
  CFunc ("Markdown","tryMDHeader") 2 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","[]") [CTCons ("Markdown","SourceMDElem") []]))) (CRules CFlex [CRule [CPVar (0,"s"),CPVar (1,"rtxt")] [(CSymbol ("Prelude","success"),CLetDecl [CLocalPat (CPComb ("Prelude","(,)") [CPVar (2,"sharps"),CPVar (3,"htxt")]) (CApply (CApply (CSymbol ("Prelude","break")) (CLambda [CPVar (5,"x0")] (CApply (CApply (CSymbol ("Prelude","==")) (CVar (5,"x0"))) (CLit (CCharc ' '))))) (CVar (0,"s"))) [],CLocalPat (CPVar (4,"level")) (CApply (CSymbol ("Prelude","length")) (CVar (2,"sharps"))) []] (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","||")) (CApply (CSymbol ("Prelude","null")) (CVar (3,"htxt")))) (CApply (CApply (CSymbol ("Prelude",">")) (CVar (4,"level"))) (CLit (CIntc 6))))) (CApply (CApply (CSymbol ("Markdown","markdownPar")) (CVar (0,"s"))) (CVar (1,"rtxt")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Markdown","SMDHeader")) (CVar (4,"level"))) (CApply (CSymbol ("Markdown","dropFirst")) (CVar (3,"htxt"))))) (CApply (CSymbol ("Markdown","markdownText")) (CVar (1,"rtxt"))))))] []]),
  CFunc ("Markdown","isHRule") 1 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","Bool") [])) (CRules CFlex [CRule [CPVar (0,"l")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","||")) (CApply (CApply (CSymbol ("Prelude","&&")) (CApply (CApply (CSymbol ("Prelude","all")) (CLambda [CPVar (1,"c")] (CApply (CApply (CSymbol ("Prelude","||")) (CApply (CSymbol ("Char","isSpace")) (CVar (1,"c")))) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (1,"c"))) (CLit (CCharc '-')))))) (CVar (0,"l")))) (CApply (CApply (CSymbol ("Prelude",">")) (CApply (CSymbol ("Prelude","length")) (CApply (CApply (CSymbol ("Prelude","filter")) (CLambda [CPVar (2,"x0")] (CApply (CApply (CSymbol ("Prelude","==")) (CVar (2,"x0"))) (CLit (CCharc '-'))))) (CVar (0,"l"))))) (CLit (CIntc 3))))) (CApply (CApply (CSymbol ("Prelude","&&")) (CApply (CApply (CSymbol ("Prelude","all")) (CLambda [CPVar (3,"c")] (CApply (CApply (CSymbol ("Prelude","||")) (CApply (CSymbol ("Char","isSpace")) (CVar (3,"c")))) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (3,"c"))) (CLit (CCharc '*')))))) (CVar (0,"l")))) (CApply (CApply (CSymbol ("Prelude",">")) (CApply (CSymbol ("Prelude","length")) (CApply (CApply (CSymbol ("Prelude","filter")) (CLambda [CPVar (4,"x0")] (CApply (CApply (CSymbol ("Prelude","==")) (CVar (4,"x0"))) (CLit (CCharc '*'))))) (CVar (0,"l"))))) (CLit (CIntc 3)))))] []]),
  CFunc ("Markdown","isUnorderedItemLine") 1 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","Int") [])) (CRules CFlex [CRule [CPVar (0,"s")] [(CSymbol ("Prelude","success"),CLetDecl [CLocalPat (CPComb ("Prelude","(,)") [CPVar (1,"blanks"),CPVar (2,"nonblanks")]) (CApply (CApply (CSymbol ("Prelude","span")) (CLambda [CPVar (3,"x0")] (CApply (CApply (CSymbol ("Prelude","==")) (CVar (3,"x0"))) (CLit (CCharc ' '))))) (CVar (0,"s"))) []] (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","elem")) (CApply (CApply (CSymbol ("Prelude","take")) (CLit (CIntc 2))) (CVar (2,"nonblanks")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '*'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]"))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '-'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]"))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '+'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]"))))) (CSymbol ("Prelude","[]"))))))) (CApply (CApply (CSymbol ("Prelude","+")) (CApply (CSymbol ("Prelude","length")) (CVar (1,"blanks")))) (CLit (CIntc 2)))) (CLit (CIntc 0))))] []]),
  CFunc ("Markdown","isNumberedItemLine") 1 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","Int") [])) (CRules CFlex [CRule [CPVar (0,"s")] [(CSymbol ("Prelude","success"),CLetDecl [CLocalPat (CPComb ("Prelude","(,)") [CPVar (1,"blanks"),CPVar (2,"nonblanks")]) (CApply (CApply (CSymbol ("Prelude","span")) (CLambda [CPVar (4,"x0")] (CApply (CApply (CSymbol ("Prelude","==")) (CVar (4,"x0"))) (CLit (CCharc ' '))))) (CVar (0,"s"))) [],CLocalPat (CPVar (3,"numblanks")) (CApply (CSymbol ("Prelude","length")) (CVar (1,"blanks"))) []] (CApply (CApply (CSymbol ("Markdown","checkNumber")) (CVar (3,"numblanks"))) (CVar (2,"nonblanks"))))] [CLocalFunc (CFunc ("Markdown","checkNumber") 2 Private (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","Int") []))) (CRules CFlex [CRule [CPVar (1,"indt"),CPVar (2,"numtxt")] [(CSymbol ("Prelude","success"),CLetDecl [CLocalPat (CPComb ("Prelude","(,)") [CPVar (3,"ns"),CPVar (4,"brt")]) (CApply (CApply (CSymbol ("Prelude","break")) (CLambda [CPVar (8,"x0")] (CApply (CApply (CSymbol ("Prelude","==")) (CVar (8,"x0"))) (CLit (CCharc ' '))))) (CVar (2,"numtxt"))) [],CLocalPat (CPComb ("Prelude","(,)") [CPVar (5,"blanks"),CPVar (6,"rtxt")]) (CApply (CApply (CSymbol ("Prelude","break")) (CLambda [CPVar (9,"x0")] (CApply (CApply (CSymbol ("Prelude","/=")) (CVar (9,"x0"))) (CLit (CCharc ' '))))) (CVar (4,"brt"))) [],CLocalPat (CPVar (7,"nsl")) (CApply (CSymbol ("Prelude","length")) (CVar (3,"ns"))) []] (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","&&")) (CApply (CApply (CSymbol ("Prelude",">")) (CVar (7,"nsl"))) (CLit (CIntc 0)))) (CApply (CApply (CSymbol ("Prelude","&&")) (CApply (CApply (CSymbol ("Prelude","all")) (CSymbol ("Char","isDigit"))) (CApply (CApply (CSymbol ("Prelude","take")) (CApply (CApply (CSymbol ("Prelude","-")) (CVar (7,"nsl"))) (CLit (CIntc 1)))) (CVar (3,"ns"))))) (CApply (CApply (CSymbol ("Prelude","&&")) (CApply (CApply (CSymbol ("Prelude","==")) (CApply (CApply (CSymbol ("Prelude","!!")) (CVar (3,"ns"))) (CApply (CApply (CSymbol ("Prelude","-")) (CVar (7,"nsl"))) (CLit (CIntc 1))))) (CLit (CCharc '.')))) (CApply (CApply (CSymbol ("Prelude","&&")) (CApply (CSymbol ("Prelude","not")) (CApply (CSymbol ("Prelude","null")) (CVar (5,"blanks"))))) (CApply (CSymbol ("Prelude","not")) (CApply (CSymbol ("Prelude","null")) (CVar (6,"rtxt"))))))))) (CApply (CApply (CSymbol ("Prelude","+")) (CApply (CApply (CSymbol ("Prelude","+")) (CVar (1,"indt"))) (CVar (7,"nsl")))) (CApply (CSymbol ("Prelude","length")) (CVar (5,"blanks"))))) (CLit (CIntc 0))))] []]))]]),
  CFunc ("Markdown","isCodeLine") 1 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","Int") [])) (CRules CFlex [CRule [CPVar (0,"s")] [(CSymbol ("Prelude","success"),CLetDecl [CLocalPat (CPComb ("Prelude","(,)") [CPVar (1,"blanks"),CPVar (2,"nonblanks")]) (CApply (CApply (CSymbol ("Prelude","span")) (CLambda [CPVar (4,"x0")] (CApply (CApply (CSymbol ("Prelude","==")) (CVar (4,"x0"))) (CLit (CCharc ' '))))) (CVar (0,"s"))) [],CLocalPat (CPVar (3,"numblanks")) (CApply (CSymbol ("Prelude","length")) (CVar (1,"blanks"))) []] (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","&&")) (CApply (CSymbol ("Prelude","not")) (CApply (CSymbol ("Prelude","null")) (CVar (2,"nonblanks"))))) (CApply (CApply (CSymbol ("Prelude",">=")) (CVar (3,"numblanks"))) (CLit (CIntc 4))))) (CVar (3,"numblanks"))) (CLit (CIntc 0))))] []]),
  CFunc ("Markdown","markdownPar") 2 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","[]") [CTCons ("Markdown","SourceMDElem") []]))) (CRules CFlex [CRule [CPVar (0,"ptxt"),CPVar (1,"txt")] [(CApply (CApply (CSymbol ("Prelude","||")) (CApply (CSymbol ("Prelude","null")) (CVar (1,"txt")))) (CApply (CApply (CSymbol ("Prelude","||")) (CApply (CApply (CSymbol ("Prelude","elem")) (CApply (CSymbol ("Prelude","head")) (CVar (1,"txt")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CSymbol ("Prelude","[]"))))) (CApply (CApply (CSymbol ("Prelude","||")) (CApply (CApply (CSymbol ("Prelude",">")) (CVar (5,"uitemlen"))) (CLit (CIntc 0)))) (CApply (CApply (CSymbol ("Prelude",">")) (CVar (4,"nitemlen"))) (CLit (CIntc 0))))),CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("Markdown","SMDPar")) (CApply (CSymbol ("Markdown","groupMarkDownElems")) (CApply (CApply (CSymbol ("Markdown","outsideMarkdownElem")) (CSymbol ("Prelude","[]"))) (CVar (0,"ptxt")))))) (CApply (CSymbol ("Markdown","markdownText")) (CVar (1,"txt")))),(CApply (CSymbol ("Prelude","null")) (CVar (3,"remtxt")),CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("Markdown","SMDPar")) (CApply (CSymbol ("Markdown","groupMarkDownElems")) (CApply (CApply (CSymbol ("Markdown","outsideMarkdownElem")) (CSymbol ("Prelude","[]"))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (0,"ptxt"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CVar (2,"fstline")))))))) (CSymbol ("Prelude","[]"))),(CSymbol ("Prelude","otherwise"),CApply (CApply (CSymbol ("Markdown","markdownPar")) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (0,"ptxt"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CVar (2,"fstline"))))) (CApply (CSymbol ("Prelude","tail")) (CVar (3,"remtxt"))))] [CLocalPat (CPComb ("Prelude","(,)") [CPVar (2,"fstline"),CPVar (3,"remtxt")]) (CApply (CApply (CSymbol ("Prelude","break")) (CLambda [CPVar (6,"x0")] (CApply (CApply (CSymbol ("Prelude","==")) (CVar (6,"x0"))) (CLit (CCharc '\n'))))) (CVar (1,"txt"))) [],CLocalPat (CPVar (4,"nitemlen")) (CApply (CSymbol ("Markdown","isNumberedItemLine")) (CVar (2,"fstline"))) [],CLocalPat (CPVar (5,"uitemlen")) (CApply (CSymbol ("Markdown","isUnorderedItemLine")) (CVar (2,"fstline"))) []]]),
  CFunc ("Markdown","markdownQuote") 2 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","[]") [CTCons ("Markdown","SourceMDElem") []]))) (CRules CFlex [CRule [CPVar (0,"qtxt"),CPVar (1,"alltxt")] [(CSymbol ("Prelude","success"),CLetDecl [CLocalPat (CPVar (2,"txt")) (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","==")) (CApply (CApply (CSymbol ("Prelude","take")) (CLit (CIntc 2))) (CVar (1,"alltxt")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '>'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CSymbol ("Prelude","[]")))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '>'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]"))))) (CApply (CApply (CSymbol ("Prelude","drop")) (CLit (CIntc 1))) (CVar (1,"alltxt"))))) (CVar (1,"alltxt"))) []] (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","==")) (CApply (CApply (CSymbol ("Prelude","take")) (CLit (CIntc 2))) (CVar (2,"txt")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '>'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]")))))) (CLetDecl [CLocalPat (CPComb ("Prelude","(,)") [CPVar (3,"fstline"),CPVar (4,"remtxt")]) (CApply (CApply (CSymbol ("Prelude","break")) (CLambda [CPVar (5,"x0")] (CApply (CApply (CSymbol ("Prelude","==")) (CVar (5,"x0"))) (CLit (CCharc '\n'))))) (CApply (CApply (CSymbol ("Prelude","drop")) (CLit (CIntc 2))) (CVar (2,"txt")))) []] (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CSymbol ("Prelude","null")) (CVar (4,"remtxt")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("Markdown","SMDQuote")) (CApply (CSymbol ("Markdown","fromMarkdownText")) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (0,"qtxt"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CVar (3,"fstline"))))))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Markdown","markdownQuote")) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (0,"qtxt"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CVar (3,"fstline"))))) (CApply (CSymbol ("Prelude","tail")) (CVar (4,"remtxt"))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("Markdown","SMDQuote")) (CApply (CSymbol ("Markdown","fromMarkdownText")) (CVar (0,"qtxt"))))) (CApply (CSymbol ("Markdown","markdownText")) (CVar (2,"txt"))))))] []]),
  CFunc ("Markdown","markdownCodeBlock") 3 Private (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","[]") [CTCons ("Markdown","SourceMDElem") []])))) (CRules CFlex [CRule [CPVar (0,"n"),CPVar (1,"ctxt"),CPVar (2,"txt")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","==")) (CApply (CApply (CSymbol ("Prelude","take")) (CVar (0,"n"))) (CVar (2,"txt")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]")))))))) (CLetDecl [CLocalPat (CPComb ("Prelude","(,)") [CPVar (3,"fstline"),CPVar (4,"remtxt")]) (CApply (CApply (CSymbol ("Prelude","break")) (CLambda [CPVar (5,"x0")] (CApply (CApply (CSymbol ("Prelude","==")) (CVar (5,"x0"))) (CLit (CCharc '\n'))))) (CApply (CApply (CSymbol ("Prelude","drop")) (CVar (0,"n"))) (CVar (2,"txt")))) []] (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CSymbol ("Prelude","null")) (CVar (4,"remtxt")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("Markdown","SMDCodeBlock")) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (1,"ctxt"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CApply (CSymbol ("Markdown","removeEscapes")) (CVar (3,"fstline"))))))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CApply (CSymbol ("Markdown","markdownCodeBlock")) (CVar (0,"n"))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (1,"ctxt"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CApply (CSymbol ("Markdown","removeEscapes")) (CVar (3,"fstline")))))) (CApply (CSymbol ("Prelude","tail")) (CVar (4,"remtxt"))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("Markdown","SMDCodeBlock")) (CVar (1,"ctxt")))) (CApply (CSymbol ("Markdown","markdownText")) (CVar (2,"txt")))))] []]),
  CFunc ("Markdown","markdownItem") 4 Private (CFuncType (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Markdown","SourceMDElem") [])) (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","[]") [CTCons ("Markdown","SourceMDElem") []]))))) (CRules CFlex [CRule [CPVar (0,"icons"),CPVar (1,"n"),CPVar (2,"itxt"),CPVar (3,"txt")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","==")) (CApply (CApply (CSymbol ("Prelude","take")) (CVar (1,"n"))) (CVar (3,"txt")))) (CApply (CApply (CSymbol ("Prelude","take")) (CVar (1,"n"))) (CApply (CSymbol ("Prelude","repeat")) (CLit (CCharc ' ')))))) (CLetDecl [CLocalPat (CPComb ("Prelude","(,)") [CPVar (4,"fstline"),CPVar (5,"remtxt")]) (CApply (CApply (CSymbol ("Prelude","break")) (CLambda [CPVar (6,"x0")] (CApply (CApply (CSymbol ("Prelude","==")) (CVar (6,"x0"))) (CLit (CCharc '\n'))))) (CApply (CApply (CSymbol ("Prelude","drop")) (CVar (1,"n"))) (CVar (3,"txt")))) []] (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CSymbol ("Prelude","null")) (CVar (5,"remtxt")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CVar (0,"icons")) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (2,"itxt"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CVar (4,"fstline")))))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CApply (CApply (CSymbol ("Markdown","markdownItem")) (CVar (0,"icons"))) (CVar (1,"n"))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (2,"itxt"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CVar (4,"fstline"))))) (CApply (CSymbol ("Prelude","tail")) (CVar (5,"remtxt"))))))) (CLetDecl [CLocalPat (CPComb ("Prelude","(,)") [CPVar (7,"fstline"),CPVar (8,"remtxt")]) (CApply (CApply (CSymbol ("Prelude","break")) (CLambda [CPVar (9,"x0")] (CApply (CApply (CSymbol ("Prelude","==")) (CVar (9,"x0"))) (CLit (CCharc '\n'))))) (CVar (3,"txt"))) []] (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","all")) (CSymbol ("Char","isSpace"))) (CVar (7,"fstline")))) (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CSymbol ("Prelude","null")) (CVar (8,"remtxt")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CVar (0,"icons")) (CVar (2,"itxt")))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CApply (CApply (CSymbol ("Markdown","markdownItem")) (CVar (0,"icons"))) (CVar (1,"n"))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (2,"itxt"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CSymbol ("Prelude","[]"))))) (CApply (CSymbol ("Prelude","tail")) (CVar (8,"remtxt")))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CVar (0,"icons")) (CVar (2,"itxt")))) (CApply (CSymbol ("Markdown","markdownText")) (CVar (3,"txt")))))))] []]),
  CFunc ("Markdown","removeEscapes") 1 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CRules CFlex [CRule [CPVar (0,"s")] [(CSymbol ("Prelude","success"),CCase (CVar (0,"s")) [CBranch (CPComb ("Prelude","[]") []) (CSymbol ("Prelude","[]")),CBranch (CPComb ("Prelude",":") [CPLit (CCharc '\\'),CPComb ("Prelude",":") [CPVar (1,"c"),CPVar (2,"cs")]]) (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","elem")) (CVar (1,"c"))) (CSymbol ("Markdown","markdownEscapeChars")))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (1,"c"))) (CApply (CSymbol ("Markdown","removeEscapes")) (CVar (2,"cs"))))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\\'))) (CApply (CSymbol ("Markdown","removeEscapes")) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (1,"c"))) (CVar (2,"cs")))))),CBranch (CPComb ("Prelude",":") [CPVar (3,"c"),CPVar (4,"cs")]) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (3,"c"))) (CApply (CSymbol ("Markdown","removeEscapes")) (CVar (4,"cs"))))])] []]),
  CFunc ("Markdown","markdownEscapeChars") 0 Private (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\\'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '`'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '*'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '_'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '{'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '}'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '['))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ']'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '('))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ')'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '#'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '+'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '-'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '.'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '!'))) (CSymbol ("Prelude","[]"))))))))))))))))))] []]),
  CFunc ("Markdown","outsideMarkdownElem") 2 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","[]") [CTCons ("Markdown","SourceMDElem") []]))) (CRules CFlex [CRule [CPVar (0,"txt"),CPVar (1,"s")] [(CSymbol ("Prelude","success"),CCase (CVar (1,"s")) [CBranch (CPComb ("Prelude","[]") []) (CApply (CApply (CSymbol ("Markdown","addPrevious")) (CVar (0,"txt"))) (CSymbol ("Prelude","[]"))),CBranch (CPComb ("Prelude",":") [CPLit (CCharc '\\'),CPComb ("Prelude",":") [CPVar (2,"c"),CPVar (3,"cs")]]) (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","elem")) (CVar (2,"c"))) (CSymbol ("Markdown","markdownEscapeChars")))) (CApply (CApply (CSymbol ("Markdown","outsideMarkdownElem")) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (2,"c"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\\'))) (CVar (0,"txt"))))) (CVar (3,"cs")))) (CApply (CApply (CSymbol ("Markdown","outsideMarkdownElem")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\\'))) (CVar (0,"txt")))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (2,"c"))) (CVar (3,"cs"))))),CBranch (CPComb ("Prelude",":") [CPLit (CCharc '*'),CPComb ("Prelude",":") [CPLit (CCharc '*'),CPVar (4,"cs")]]) (CApply (CApply (CSymbol ("Prelude","$")) (CApply (CSymbol ("Markdown","addPrevious")) (CVar (0,"txt")))) (CApply (CApply (CApply (CSymbol ("Markdown","insideMarkdownElem")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '*'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '*'))) (CSymbol ("Prelude","[]"))))) (CSymbol ("Prelude","[]"))) (CVar (4,"cs")))),CBranch (CPComb ("Prelude",":") [CPLit (CCharc '_'),CPComb ("Prelude",":") [CPLit (CCharc '_'),CPVar (5,"cs")]]) (CApply (CApply (CSymbol ("Prelude","$")) (CApply (CSymbol ("Markdown","addPrevious")) (CVar (0,"txt")))) (CApply (CApply (CApply (CSymbol ("Markdown","insideMarkdownElem")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '_'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '_'))) (CSymbol ("Prelude","[]"))))) (CSymbol ("Prelude","[]"))) (CVar (5,"cs")))),CBranch (CPComb ("Prelude",":") [CPLit (CCharc '*'),CPVar (6,"cs")]) (CApply (CApply (CSymbol ("Prelude","$")) (CApply (CSymbol ("Markdown","addPrevious")) (CVar (0,"txt")))) (CApply (CApply (CApply (CSymbol ("Markdown","insideMarkdownElem")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '*'))) (CSymbol ("Prelude","[]")))) (CSymbol ("Prelude","[]"))) (CVar (6,"cs")))),CBranch (CPComb ("Prelude",":") [CPLit (CCharc '_'),CPVar (7,"cs")]) (CApply (CApply (CSymbol ("Prelude","$")) (CApply (CSymbol ("Markdown","addPrevious")) (CVar (0,"txt")))) (CApply (CApply (CApply (CSymbol ("Markdown","insideMarkdownElem")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '_'))) (CSymbol ("Prelude","[]")))) (CSymbol ("Prelude","[]"))) (CVar (7,"cs")))),CBranch (CPComb ("Prelude",":") [CPLit (CCharc '`'),CPVar (8,"cs")]) (CApply (CApply (CSymbol ("Prelude","$")) (CApply (CSymbol ("Markdown","addPrevious")) (CVar (0,"txt")))) (CApply (CApply (CApply (CSymbol ("Markdown","insideMarkdownElem")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '`'))) (CSymbol ("Prelude","[]")))) (CSymbol ("Prelude","[]"))) (CVar (8,"cs")))),CBranch (CPComb ("Prelude",":") [CPLit (CCharc '['),CPVar (9,"cs")]) (CApply (CApply (CSymbol ("Prelude","$")) (CApply (CSymbol ("Markdown","addPrevious")) (CVar (0,"txt")))) (CApply (CSymbol ("Markdown","tryParseLink")) (CVar (9,"cs")))),CBranch (CPComb ("Prelude",":") [CPLit (CCharc '<'),CPVar (10,"cs")]) (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","==")) (CApply (CApply (CSymbol ("Prelude","take")) (CLit (CIntc 4))) (CVar (10,"cs")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'h'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CSymbol ("Prelude","[]")))))))) (CApply (CApply (CSymbol ("Prelude","$")) (CApply (CSymbol ("Markdown","addPrevious")) (CVar (0,"txt")))) (CApply (CSymbol ("Markdown","markdownHRef")) (CVar (10,"cs"))))) (CApply (CApply (CSymbol ("Markdown","outsideMarkdownElem")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '<'))) (CVar (0,"txt")))) (CVar (10,"cs")))),CBranch (CPComb ("Prelude",":") [CPVar (11,"c"),CPVar (12,"cs")]) (CApply (CApply (CSymbol ("Markdown","outsideMarkdownElem")) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (11,"c"))) (CVar (0,"txt")))) (CVar (12,"cs")))])] []]),
  CFunc ("Markdown","addPrevious") 2 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Markdown","SourceMDElem") []]) (CTCons ("Prelude","[]") [CTCons ("Markdown","SourceMDElem") []]))) (CRules CFlex [CRule [CPVar (0,"ptxt"),CPVar (1,"xs")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CSymbol ("Prelude","null")) (CVar (0,"ptxt")))) (CVar (1,"xs"))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("Markdown","SMDText")) (CApply (CSymbol ("Prelude","reverse")) (CVar (0,"ptxt"))))) (CVar (1,"xs"))))] []]),
  CFunc ("Markdown","tryParseLink") 1 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","[]") [CTCons ("Markdown","SourceMDElem") []])) (CRules CFlex [CRule [CPVar (0,"txt")] [(CSymbol ("Prelude","success"),CLetDecl [CLocalPat (CPComb ("Prelude","(,)") [CPVar (1,"linktxt"),CPVar (2,"rtxt")]) (CApply (CApply (CSymbol ("Prelude","break")) (CLambda [CPVar (3,"x0")] (CApply (CApply (CSymbol ("Prelude","==")) (CVar (3,"x0"))) (CLit (CCharc ']'))))) (CVar (0,"txt"))) []] (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","||")) (CApply (CSymbol ("Prelude","null")) (CVar (2,"rtxt")))) (CApply (CApply (CSymbol ("Prelude","||")) (CApply (CSymbol ("Prelude","null")) (CApply (CSymbol ("Prelude","tail")) (CVar (2,"rtxt"))))) (CApply (CApply (CSymbol ("Prelude","/=")) (CApply (CApply (CSymbol ("Prelude","!!")) (CVar (2,"rtxt"))) (CLit (CIntc 1)))) (CLit (CCharc '(')))))) (CApply (CApply (CSymbol ("Markdown","outsideMarkdownElem")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '['))) (CSymbol ("Prelude","[]")))) (CVar (0,"txt")))) (CLetDecl [CLocalPat (CPComb ("Prelude","(,)") [CPVar (4,"url"),CPVar (5,"mtxt")]) (CApply (CApply (CSymbol ("Prelude","break")) (CLambda [CPVar (6,"x0")] (CApply (CApply (CSymbol ("Prelude","==")) (CVar (6,"x0"))) (CLit (CCharc ')'))))) (CApply (CApply (CSymbol ("Prelude","drop")) (CLit (CIntc 2))) (CVar (2,"rtxt")))) []] (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CSymbol ("Prelude","null")) (CVar (5,"mtxt")))) (CApply (CApply (CSymbol ("Markdown","outsideMarkdownElem")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '['))) (CSymbol ("Prelude","[]")))) (CVar (0,"txt")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Markdown","SMDHRef")) (CVar (1,"linktxt"))) (CVar (4,"url")))) (CApply (CApply (CSymbol ("Markdown","outsideMarkdownElem")) (CSymbol ("Prelude","[]"))) (CApply (CSymbol ("Prelude","tail")) (CVar (5,"mtxt")))))))))] []]),
  CFunc ("Markdown","markdownHRef") 1 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","[]") [CTCons ("Markdown","SourceMDElem") []])) (CRules CFlex [CRule [CPVar (0,"txt")] [(CSymbol ("Prelude","success"),CLetDecl [CLocalPat (CPComb ("Prelude","(,)") [CPVar (1,"url"),CPVar (2,"rtxt")]) (CApply (CApply (CSymbol ("Prelude","break")) (CLambda [CPVar (3,"x0")] (CApply (CApply (CSymbol ("Prelude","==")) (CVar (3,"x0"))) (CLit (CCharc '>'))))) (CVar (0,"txt"))) []] (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CSymbol ("Prelude","null")) (CVar (2,"rtxt")))) (CApply (CApply (CSymbol ("Markdown","outsideMarkdownElem")) (CSymbol ("Prelude","[]"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '<'))) (CVar (0,"txt"))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Markdown","SMDHRef")) (CVar (1,"url"))) (CVar (1,"url")))) (CApply (CApply (CSymbol ("Markdown","outsideMarkdownElem")) (CSymbol ("Prelude","[]"))) (CApply (CSymbol ("Markdown","dropFirst")) (CVar (2,"rtxt")))))))] []]),
  CFunc ("Markdown","insideMarkdownElem") 3 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","[]") [CTCons ("Markdown","SourceMDElem") []])))) (CRules CFlex [CRule [CPVar (0,"marker"),CPVar (1,"etext"),CPVar (2,"s")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("List","isPrefixOf")) (CVar (0,"marker"))) (CVar (2,"s")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Markdown","text2MDElem")) (CVar (0,"marker"))) (CApply (CSymbol ("Prelude","reverse")) (CVar (1,"etext"))))) (CApply (CApply (CSymbol ("Markdown","outsideMarkdownElem")) (CSymbol ("Prelude","[]"))) (CApply (CApply (CSymbol ("Prelude","drop")) (CApply (CSymbol ("Prelude","length")) (CVar (0,"marker")))) (CVar (2,"s")))))) (CCase (CVar (2,"s")) [CBranch (CPComb ("Prelude","[]") []) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("Markdown","SMDText")) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (0,"marker"))) (CApply (CSymbol ("Prelude","reverse")) (CVar (1,"etext")))))) (CSymbol ("Prelude","[]"))),CBranch (CPComb ("Prelude",":") [CPLit (CCharc '\\'),CPComb ("Prelude",":") [CPVar (3,"c"),CPVar (4,"cs")]]) (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","elem")) (CVar (3,"c"))) (CSymbol ("Markdown","markdownEscapeChars")))) (CApply (CApply (CApply (CSymbol ("Markdown","insideMarkdownElem")) (CVar (0,"marker"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (3,"c"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\\'))) (CVar (1,"etext"))))) (CVar (4,"cs")))) (CApply (CApply (CApply (CSymbol ("Markdown","insideMarkdownElem")) (CVar (0,"marker"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\\'))) (CVar (1,"etext")))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (3,"c"))) (CVar (4,"cs"))))),CBranch (CPComb ("Prelude",":") [CPVar (5,"c"),CPVar (6,"cs")]) (CApply (CApply (CApply (CSymbol ("Markdown","insideMarkdownElem")) (CVar (0,"marker"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (5,"c"))) (CVar (1,"etext")))) (CVar (6,"cs")))]))] []]),
  CFunc ("Markdown","text2MDElem") 2 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Markdown","SourceMDElem") []))) (CRules CFlex [CRule [CPVar (0,"marker"),CPVar (1,"txt")] [(CSymbol ("Prelude","success"),CCase (CVar (0,"marker")) [CBranch (CPComb ("Prelude",":") [CPLit (CCharc '*'),CPComb ("Prelude",":") [CPLit (CCharc '*'),CPComb ("Prelude","[]") []]]) (CApply (CSymbol ("Markdown","SMDStrong")) (CVar (1,"txt"))),CBranch (CPComb ("Prelude",":") [CPLit (CCharc '_'),CPComb ("Prelude",":") [CPLit (CCharc '_'),CPComb ("Prelude","[]") []]]) (CApply (CSymbol ("Markdown","SMDStrong")) (CVar (1,"txt"))),CBranch (CPComb ("Prelude",":") [CPLit (CCharc '*'),CPComb ("Prelude","[]") []]) (CApply (CSymbol ("Markdown","SMDEmph")) (CVar (1,"txt"))),CBranch (CPComb ("Prelude",":") [CPLit (CCharc '_'),CPComb ("Prelude","[]") []]) (CApply (CSymbol ("Markdown","SMDEmph")) (CVar (1,"txt"))),CBranch (CPComb ("Prelude",":") [CPLit (CCharc '`'),CPComb ("Prelude","[]") []]) (CApply (CSymbol ("Markdown","SMDCode")) (CVar (1,"txt"))),CBranch (CPVar (2,"_")) (CApply (CApply (CSymbol ("Prelude","$")) (CSymbol ("Prelude","error"))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'M'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'k'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'w'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '.'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'x'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '2'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'M'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'D'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'E'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ':'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'k'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'w'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'k'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '"'))) (CSymbol ("Prelude","[]"))))))))))))))))))))))))))))))))))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (0,"marker"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '"'))) (CSymbol ("Prelude","[]"))))))])] []]),
  CFunc ("Markdown","mdDoc2html") 0 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Markdown","MarkdownElem") []]) (CTCons ("Prelude","[]") [CTCons ("HTML","HtmlExp") []])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Prelude","map")) (CSymbol ("Markdown","mdElem2html")))] []]),
  CFunc ("Markdown","mdtxt2html") 1 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("HTML","HtmlExp") [])) (CRules CFlex [CRule [CPVar (0,"s")] [(CSymbol ("Prelude","success"),CApply (CSymbol ("HTML","HtmlText")) (CApply (CSymbol ("Markdown","removeEscapes")) (CVar (0,"s"))))] []]),
  CFunc ("Markdown","mdElem2html") 1 Private (CFuncType (CTCons ("Markdown","MarkdownElem") []) (CTCons ("HTML","HtmlExp") [])) (CRules CFlex [CRule [CPComb ("Markdown","Text") [CPVar (0,"s")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Markdown","mdtxt2html")) (CVar (0,"s")))] [],CRule [CPComb ("Markdown","Emph") [CPVar (1,"s")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("HTML","emphasize")) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("Markdown","mdtxt2html")) (CVar (1,"s")))) (CSymbol ("Prelude","[]"))))] [],CRule [CPComb ("Markdown","Strong") [CPVar (2,"s")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("HTML","HtmlStruct")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'g'))) (CSymbol ("Prelude","[]"))))))))) (CSymbol ("Prelude","[]"))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("Markdown","mdtxt2html")) (CVar (2,"s")))) (CSymbol ("Prelude","[]"))))] [],CRule [CPComb ("Markdown","HRef") [CPVar (3,"s"),CPVar (4,"url")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (3,"s"))) (CVar (4,"url")))) (CApply (CApply (CSymbol ("HTML","href")) (CVar (4,"url"))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("HTML","code")) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("Markdown","mdtxt2html")) (CVar (3,"s")))) (CSymbol ("Prelude","[]"))))) (CSymbol ("Prelude","[]"))))) (CApply (CApply (CSymbol ("HTML","href")) (CVar (4,"url"))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("Markdown","mdtxt2html")) (CVar (3,"s")))) (CSymbol ("Prelude","[]")))))] [],CRule [CPComb ("Markdown","Code") [CPVar (5,"s")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("HTML","code")) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("HTML","HtmlText")) (CVar (5,"s")))) (CSymbol ("Prelude","[]"))))] [],CRule [CPComb ("Markdown","CodeBlock") [CPVar (6,"s")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("HTML","verbatim")) (CVar (6,"s")))] [],CRule [CPComb ("Markdown","Quote") [CPVar (7,"md")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("HTML","HtmlStruct")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'b'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'k'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'q'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]"))))))))))))) (CSymbol ("Prelude","[]"))) (CApply (CSymbol ("Markdown","mdDoc2html")) (CVar (7,"md"))))] [],CRule [CPComb ("Markdown","Par") [CPVar (8,"md")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("HTML","par")) (CApply (CSymbol ("Markdown","mdDoc2html")) (CVar (8,"md"))))] [],CRule [CPComb ("Markdown","UList") [CPVar (9,"mds")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("HTML","ulist")) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("Markdown","mdDoc2htmlWithoutPar"))) (CVar (9,"mds"))))] [],CRule [CPComb ("Markdown","OList") [CPVar (10,"mds")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("HTML","olist")) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("Markdown","mdDoc2htmlWithoutPar"))) (CVar (10,"mds"))))] [],CRule [CPComb ("Markdown","HRule") []] [(CSymbol ("Prelude","success"),CSymbol ("HTML","hrule"))] [],CRule [CPComb ("Markdown","Header") [CPVar (11,"l"),CPVar (12,"s")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("HTML","HtmlStruct")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'h'))) (CApply (CSymbol ("Prelude","show")) (CVar (11,"l"))))) (CSymbol ("Prelude","[]"))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("Markdown","mdtxt2html")) (CVar (12,"s")))) (CSymbol ("Prelude","[]"))))] []]),
  CFunc ("Markdown","mdDoc2htmlWithoutPar") 1 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Markdown","MarkdownElem") []]) (CTCons ("Prelude","[]") [CTCons ("HTML","HtmlExp") []])) (CRules CFlex [CRule [CPVar (0,"mdoc")] [(CSymbol ("Prelude","success"),CCase (CVar (0,"mdoc")) [CBranch (CPComb ("Prelude","[]") []) (CSymbol ("Prelude","[]")),CBranch (CPComb ("Prelude",":") [CPComb ("Markdown","Par") [CPVar (1,"md")],CPComb ("Prelude","[]") []]) (CApply (CSymbol ("Markdown","mdDoc2html")) (CVar (1,"md"))),CBranch (CPComb ("Prelude",":") [CPVar (2,"md"),CPComb ("Prelude","[]") []]) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("Markdown","mdElem2html")) (CVar (2,"md")))) (CSymbol ("Prelude","[]"))),CBranch (CPComb ("Prelude",":") [CPComb ("Markdown","Par") [CPVar (3,"md1")],CPComb ("Prelude",":") [CPVar (4,"md2"),CPVar (5,"mds")]]) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("Markdown","mdDoc2html")) (CVar (3,"md1")))) (CApply (CApply (CSymbol ("Prelude",":")) (CSymbol ("HTML","breakline"))) (CApply (CSymbol ("Markdown","mdDoc2htmlWithoutPar")) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (4,"md2"))) (CVar (5,"mds")))))),CBranch (CPComb ("Prelude",":") [CPVar (6,"md1"),CPComb ("Prelude",":") [CPVar (7,"md2"),CPVar (8,"mds")]]) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("Markdown","mdElem2html")) (CVar (6,"md1")))) (CApply (CSymbol ("Markdown","mdDoc2htmlWithoutPar")) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (7,"md2"))) (CVar (8,"mds")))))])] []]),
  CFunc ("Markdown","markdownText2HTML") 0 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","[]") [CTCons ("HTML","HtmlExp") []])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Markdown","mdDoc2html"))) (CSymbol ("Markdown","fromMarkdownText")))] []]),
  CFunc ("Markdown","markdownText2CompleteHTML") 2 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]))) (CRules CFlex [CRule [CPVar (0,"title"),CPVar (1,"mdtxt")] [(CSymbol ("Prelude","success"),CApply (CSymbol ("HTML","showHtmlPage")) (CApply (CApply (CSymbol ("HTML","page")) (CVar (0,"title"))) (CApply (CSymbol ("Markdown","markdownText2HTML")) (CVar (1,"mdtxt")))))] []]),
  CFunc ("Markdown","mdDoc2latex") 1 Private (CFuncType (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Markdown","MarkdownElem") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]))) (CRules CFlex [CRule [CPVar (0,"txt2latex")] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Prelude","concatMap")) (CApply (CSymbol ("Markdown","mdElem2latex")) (CVar (0,"txt2latex"))))] []]),
  CFunc ("Markdown","mdElem2latex") 2 Private (CFuncType (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CFuncType (CTCons ("Markdown","MarkdownElem") []) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]))) (CRules CFlex [CRule [CPVar (0,"txt2latex"),CPComb ("Markdown","Text") [CPVar (1,"s")]] [(CSymbol ("Prelude","success"),CApply (CVar (0,"txt2latex")) (CVar (1,"s")))] [],CRule [CPVar (2,"txt2latex"),CPComb ("Markdown","Emph") [CPVar (3,"s")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\\'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'h'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '{'))) (CSymbol ("Prelude","[]"))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CVar (2,"txt2latex")) (CVar (3,"s")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '}'))) (CSymbol ("Prelude","[]")))))] [],CRule [CPVar (4,"txt2latex"),CPComb ("Markdown","Strong") [CPVar (5,"s")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\\'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'x'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'b'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'f'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '{'))) (CSymbol ("Prelude","[]"))))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CVar (4,"txt2latex")) (CVar (5,"s")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '}'))) (CSymbol ("Prelude","[]")))))] [],CRule [CPVar (6,"txt2latex"),CPComb ("Markdown","HRef") [CPVar (7,"s"),CPVar (8,"url")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (7,"s"))) (CVar (8,"url")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\\'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '{'))) (CSymbol ("Prelude","[]")))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (8,"url"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '}'))) (CSymbol ("Prelude","[]")))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\\'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'h'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'f'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '{'))) (CSymbol ("Prelude","[]"))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (8,"url"))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '}'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '{'))) (CSymbol ("Prelude","[]"))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CVar (6,"txt2latex")) (CVar (7,"s")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '}'))) (CSymbol ("Prelude","[]"))))))))] [],CRule [CPVar (9,"txt2latex"),CPComb ("Markdown","Code") [CPVar (10,"s")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\\'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'x'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '{'))) (CSymbol ("Prelude","[]"))))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CVar (9,"txt2latex")) (CVar (10,"s")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '}'))) (CSymbol ("Prelude","[]")))))] [],CRule [CPVar (11,"_"),CPComb ("Markdown","CodeBlock") [CPVar (12,"s")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\\'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'b'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'g'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '{'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'v'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'b'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '}'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CSymbol ("Prelude","[]")))))))))))))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (12,"s"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\\'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '{'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'v'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'b'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '}'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CSymbol ("Prelude","[]"))))))))))))))))))))] [],CRule [CPVar (13,"txt2latex"),CPComb ("Markdown","Quote") [CPVar (14,"md")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\\'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'b'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'g'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '{'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'q'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '}'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CSymbol ("Prelude","[]"))))))))))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Markdown","mdDoc2latex")) (CVar (13,"txt2latex"))) (CVar (14,"md")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\\'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '{'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'q'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '}'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CSymbol ("Prelude","[]"))))))))))))))))] [],CRule [CPVar (15,"txt2latex"),CPComb ("Markdown","Par") [CPVar (16,"md")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Markdown","mdDoc2latex")) (CVar (15,"txt2latex"))) (CVar (16,"md")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CSymbol ("Prelude","[]")))))] [],CRule [CPVar (17,"txt2latex"),CPComb ("Markdown","UList") [CPVar (18,"s")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\\'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'b'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'g'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '{'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'z'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '}'))) (CSymbol ("Prelude","[]")))))))))))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude","concatMap")) (CLambda [CPVar (19,"i")] (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\\'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CSymbol ("Prelude","[]")))))))))) (CApply (CApply (CSymbol ("Markdown","mdDoc2latex")) (CVar (17,"txt2latex"))) (CVar (19,"i")))))) (CVar (18,"s")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\\'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '{'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'z'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '}'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CSymbol ("Prelude","[]"))))))))))))))))))] [],CRule [CPVar (20,"txt2latex"),CPComb ("Markdown","OList") [CPVar (21,"s")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\\'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'b'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'g'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '{'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '}'))) (CSymbol ("Prelude","[]")))))))))))))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude","concatMap")) (CLambda [CPVar (22,"i")] (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\\'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CSymbol ("Prelude","[]")))))))))) (CApply (CApply (CSymbol ("Markdown","mdDoc2latex")) (CVar (20,"txt2latex"))) (CVar (22,"i")))))) (CVar (21,"s")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\\'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '{'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '}'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CSymbol ("Prelude","[]"))))))))))))))))))))] [],CRule [CPVar (23,"_"),CPComb ("Markdown","HRule") []] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\\'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'b'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'g'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '{'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '}'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\\'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '{'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '3'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '}'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '{'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '0'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '.'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '4'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '}'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\\'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '{'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '}'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CSymbol ("Prelude","[]")))))))))))))))))))))))))))))))))))))))))))))))] [],CRule [CPVar (24,"txt2latex"),CPComb ("Markdown","Header") [CPVar (25,"l"),CPVar (26,"s")]] [(CSymbol ("Prelude","success"),CCase (CVar (25,"l")) [CBranch (CPLit (CIntc 1)) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\\'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '{'))) (CSymbol ("Prelude","[]")))))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CVar (24,"txt2latex")) (CVar (26,"s")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '}'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CSymbol ("Prelude","[]"))))))),CBranch (CPLit (CIntc 2)) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\\'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'b'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '{'))) (CSymbol ("Prelude","[]"))))))))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CVar (24,"txt2latex")) (CVar (26,"s")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '}'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CSymbol ("Prelude","[]"))))))),CBranch (CPLit (CIntc 3)) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\\'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'b'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'b'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '{'))) (CSymbol ("Prelude","[]")))))))))))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CVar (24,"txt2latex")) (CVar (26,"s")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '}'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CSymbol ("Prelude","[]"))))))),CBranch (CPLit (CIntc 4)) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\\'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'g'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'h'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '{'))) (CSymbol ("Prelude","[]")))))))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CVar (24,"txt2latex")) (CVar (26,"s")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '}'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CSymbol ("Prelude","[]"))))))),CBranch (CPLit (CIntc 5)) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\\'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'x'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'b'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'f'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '{'))) (CSymbol ("Prelude","[]"))))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CVar (24,"txt2latex")) (CVar (26,"s")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '}'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CSymbol ("Prelude","[]"))))))),CBranch (CPVar (27,"_")) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\\'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'h'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '{'))) (CSymbol ("Prelude","[]"))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CVar (24,"txt2latex")) (CVar (26,"s")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '}'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CSymbol ("Prelude","[]")))))))])] []]),
  CFunc ("Markdown","html2latex") 0 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("HTML","showLatexExps"))) (CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("HtmlParser","parseHtmlString"))) (CSymbol ("Markdown","removeEscapes"))))] []]),
  CFunc ("Markdown","markdownText2LaTeX") 0 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",".")) (CApply (CSymbol ("Markdown","mdDoc2latex")) (CSymbol ("Markdown","html2latex")))) (CSymbol ("Markdown","fromMarkdownText")))] []]),
  CFunc ("Markdown","markdownText2LaTeXWithFormat") 1 Public (CFuncType (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]))) (CRules CFlex [CRule [CPVar (0,"txt2latex")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",".")) (CApply (CSymbol ("Markdown","mdDoc2latex")) (CVar (0,"txt2latex")))) (CSymbol ("Markdown","fromMarkdownText")))] []]),
  CFunc ("Markdown","markdownText2CompleteLaTeX") 1 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CRules CFlex [CRule [CPVar (0,"mds")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CSymbol ("Markdown","latexHeader"))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Markdown","mdDoc2latex")) (CSymbol ("Markdown","html2latex"))) (CApply (CSymbol ("Markdown","fromMarkdownText")) (CVar (0,"mds"))))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\\'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '{'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '}'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CSymbol ("Prelude","[]")))))))))))))))))))] []]),
  CFunc ("Markdown","latexHeader") 0 Private (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\\'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '{'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '}'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CSymbol ("Prelude","[]"))))))))))))))))))))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\\'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'k'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'g'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '['))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'f'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '8'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'x'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ']'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '{'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '}'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CSymbol ("Prelude","[]")))))))))))))))))))))))))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\\'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'k'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'g'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '{'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '}'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CSymbol ("Prelude","[]")))))))))))))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\\'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'k'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'g'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '['))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'b'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'k'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'k'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '='))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ','))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '='))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ']'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '{'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'h'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'y'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'f'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '}'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CSymbol ("Prelude","[]"))))))))))))))))))))))))))))))))))))))))))))))))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\\'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'g'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'h'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '{'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\\'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '}'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '{'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '0'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '}'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CSymbol ("Prelude","[]"))))))))))))))))))))))))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\\'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'g'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'h'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '{'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\\'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'k'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '}'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '{'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '6'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '2'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '1'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '}'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CSymbol ("Prelude","[]")))))))))))))))))))))))))))))))))))))))))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\\'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '{'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'h'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '}'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '{'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '0'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '}'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CSymbol ("Prelude","[]"))))))))))))))))))))))))))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\\'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'b'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'g'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '{'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '}'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CSymbol ("Prelude","[]"))))))))))))))))))))))))))] []]),
  CFunc ("Markdown","formatMarkdownInputAsPDF") 0 Public (CTCons ("Prelude","IO") [CTCons ("Prelude","()") []]) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",">>=")) (CSymbol ("IO","getContents"))) (CSymbol ("Markdown","formatMarkdownAsPDF")))] []]),
  CFunc ("Markdown","formatMarkdownFileAsPDF") 1 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","IO") [CTCons ("Prelude","()") []])) (CRules CFlex [CRule [CPVar (0,"fname")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",">>=")) (CApply (CSymbol ("Prelude","readFile")) (CVar (0,"fname")))) (CSymbol ("Markdown","formatMarkdownAsPDF")))] []]),
  CFunc ("Markdown","formatMarkdownAsPDF") 1 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","IO") [CTCons ("Prelude","()") []])) (CRules CFlex [CRule [CPVar (0,"mdstr")] [(CSymbol ("Prelude","success"),CDoExpr [CSPat (CPVar (1,"pid")) (CSymbol ("System","getPID")),CSLet [CLocalPat (CPVar (2,"tmp")) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '_'))) (CSymbol ("Prelude","[]"))))))) (CApply (CSymbol ("Prelude","show")) (CVar (1,"pid")))) []],CSExpr (CApply (CApply (CSymbol ("Prelude","writeFile")) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (2,"tmp"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '.'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'x'))) (CSymbol ("Prelude","[]")))))))) (CApply (CSymbol ("Markdown","markdownText2CompleteLaTeX")) (CVar (0,"mdstr")))),CSExpr (CApply (CSymbol ("Markdown","pdflatexFile")) (CVar (2,"tmp")))])] []]),
  CFunc ("Markdown","pdflatexFile") 1 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","IO") [CTCons ("Prelude","()") []])) (CRules CFlex [CRule [CPVar (0,"tmp")] [(CSymbol ("Prelude","success"),CDoExpr [CSExpr (CApply (CApply (CSymbol ("Prelude","$")) (CSymbol ("System","system"))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'f'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'x'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\''))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\\'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\\'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '{'))) (CSymbol ("Prelude","[]")))))))))))))))))))))))))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (0,"tmp"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '.'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'x'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '}'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\''))) (CSymbol ("Prelude","[]"))))))))))),CSExpr (CApply (CApply (CSymbol ("Prelude","$")) (CSymbol ("System","system"))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '/'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'b'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '/'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '-'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'f'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]")))))))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (0,"tmp"))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '.'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'x'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]")))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (0,"tmp"))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '.'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'x'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]")))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (0,"tmp"))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '.'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'g'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]")))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (0,"tmp"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '.'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CSymbol ("Prelude","[]"))))))))))))))),CSExpr (CApply (CApply (CSymbol ("Prelude","$")) (CSymbol ("System","system"))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'v'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]")))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (0,"tmp"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '.'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'f'))) (CSymbol ("Prelude","[]"))))))))),CSExpr (CApply (CApply (CSymbol ("Prelude","$")) (CSymbol ("System","system"))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '/'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'b'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '/'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '-'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'f'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]")))))))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (0,"tmp"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '.'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'f'))) (CSymbol ("Prelude","[]"))))))))),CSExpr (CSymbol ("Prelude","done"))])] []])]
 []
