CurryProg "CLPFD"
 ["Prelude"]
 [CType ("CLPFD","Constraint") Public [] [CCons ("CLPFD","FDEqual") 2 Private [CTCons ("Prelude","Int") [],CTCons ("Prelude","Int") []],CCons ("CLPFD","FDNotEqual") 2 Private [CTCons ("Prelude","Int") [],CTCons ("Prelude","Int") []],CCons ("CLPFD","FDGreater") 2 Private [CTCons ("Prelude","Int") [],CTCons ("Prelude","Int") []],CCons ("CLPFD","FDGreaterOrEqual") 2 Private [CTCons ("Prelude","Int") [],CTCons ("Prelude","Int") []],CCons ("CLPFD","FDLess") 2 Private [CTCons ("Prelude","Int") [],CTCons ("Prelude","Int") []],CCons ("CLPFD","FDLessOrEqual") 2 Private [CTCons ("Prelude","Int") [],CTCons ("Prelude","Int") []],CCons ("CLPFD","FDNeg") 1 Private [CTCons ("CLPFD","Constraint") []],CCons ("CLPFD","FDAnd") 2 Private [CTCons ("CLPFD","Constraint") [],CTCons ("CLPFD","Constraint") []],CCons ("CLPFD","FDOr") 2 Private [CTCons ("CLPFD","Constraint") [],CTCons ("CLPFD","Constraint") []],CCons ("CLPFD","FDImply") 2 Private [CTCons ("CLPFD","Constraint") [],CTCons ("CLPFD","Constraint") []],CCons ("CLPFD","FDEquiv") 2 Private [CTCons ("CLPFD","Constraint") [],CTCons ("CLPFD","Constraint") []]],
  CType ("CLPFD","LabelingOption") Public [] [CCons ("CLPFD","LeftMost") 0 Public [],CCons ("CLPFD","FirstFail") 0 Public [],CCons ("CLPFD","FirstFailConstrained") 0 Public [],CCons ("CLPFD","Min") 0 Public [],CCons ("CLPFD","Max") 0 Public [],CCons ("CLPFD","Step") 0 Public [],CCons ("CLPFD","Enum") 0 Public [],CCons ("CLPFD","Bisect") 0 Public [],CCons ("CLPFD","Up") 0 Public [],CCons ("CLPFD","Down") 0 Public [],CCons ("CLPFD","All") 0 Public [],CCons ("CLPFD","Minimize") 1 Public [CTCons ("Prelude","Int") []],CCons ("CLPFD","Maximize") 1 Public [CTCons ("Prelude","Int") []],CCons ("CLPFD","Assumptions") 1 Public [CTCons ("Prelude","Int") []]]]
 [CFunc ("CLPFD","domain") 3 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Int") []]) (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("Prelude","Success") [])))) (CRules CFlex [CRule [CPVar (0,"vs"),CPVar (1,"l"),CPVar (2,"u")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","$#")) (CApply (CApply (CSymbol ("Prelude","$#")) (CApply (CApply (CSymbol ("Prelude","$!!")) (CSymbol ("CLPFD","prim_domain"))) (CApply (CSymbol ("Prelude","ensureSpine")) (CVar (0,"vs"))))) (CVar (1,"l")))) (CVar (2,"u")))] []]),
  CFunc ("CLPFD","prim_domain") 3 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Int") []]) (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("Prelude","Success") [])))) (CExternal "prim_domain"),
  CFunc ("CLPFD","+#") 2 Public (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("Prelude","Int") []))) (CRules CFlex [CRule [CPVar (0,"x"),CPVar (1,"y")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","$!")) (CApply (CApply (CSymbol ("Prelude","$!")) (CSymbol ("CLPFD","prim_FD_plus"))) (CVar (1,"y")))) (CVar (0,"x")))] []]),
  CFunc ("CLPFD","prim_FD_plus") 2 Private (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("Prelude","Int") []))) (CExternal "prim_FD_plus"),
  CFunc ("CLPFD","-#") 2 Public (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("Prelude","Int") []))) (CRules CFlex [CRule [CPVar (0,"x"),CPVar (1,"y")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","$!")) (CApply (CApply (CSymbol ("Prelude","$!")) (CSymbol ("CLPFD","prim_FD_minus"))) (CVar (1,"y")))) (CVar (0,"x")))] []]),
  CFunc ("CLPFD","prim_FD_minus") 2 Private (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("Prelude","Int") []))) (CExternal "prim_FD_minus"),
  CFunc ("CLPFD","*#") 2 Public (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("Prelude","Int") []))) (CRules CFlex [CRule [CPVar (0,"x"),CPVar (1,"y")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","$!")) (CApply (CApply (CSymbol ("Prelude","$!")) (CSymbol ("CLPFD","prim_FD_times"))) (CVar (1,"y")))) (CVar (0,"x")))] []]),
  CFunc ("CLPFD","prim_FD_times") 2 Private (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("Prelude","Int") []))) (CExternal "prim_FD_times"),
  CFunc ("CLPFD","=#") 2 Public (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("Prelude","Success") []))) (CRules CFlex [CRule [CPVar (0,"x"),CPVar (1,"y")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","$!")) (CApply (CApply (CSymbol ("Prelude","$!")) (CSymbol ("CLPFD","prim_FD_equal"))) (CVar (1,"y")))) (CVar (0,"x")))] []]),
  CFunc ("CLPFD","prim_FD_equal") 2 Private (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("Prelude","Success") []))) (CExternal "prim_FD_equal"),
  CFunc ("CLPFD","/=#") 2 Public (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("Prelude","Success") []))) (CRules CFlex [CRule [CPVar (0,"x"),CPVar (1,"y")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","$!")) (CApply (CApply (CSymbol ("Prelude","$!")) (CSymbol ("CLPFD","prim_FD_notequal"))) (CVar (1,"y")))) (CVar (0,"x")))] []]),
  CFunc ("CLPFD","prim_FD_notequal") 2 Private (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("Prelude","Success") []))) (CExternal "prim_FD_notequal"),
  CFunc ("CLPFD","<#") 2 Public (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("Prelude","Success") []))) (CRules CFlex [CRule [CPVar (0,"x"),CPVar (1,"y")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","$!")) (CApply (CApply (CSymbol ("Prelude","$!")) (CSymbol ("CLPFD","prim_FD_le"))) (CVar (1,"y")))) (CVar (0,"x")))] []]),
  CFunc ("CLPFD","prim_FD_le") 2 Private (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("Prelude","Success") []))) (CExternal "prim_FD_le"),
  CFunc ("CLPFD","<=#") 2 Public (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("Prelude","Success") []))) (CRules CFlex [CRule [CPVar (0,"x"),CPVar (1,"y")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","$!")) (CApply (CApply (CSymbol ("Prelude","$!")) (CSymbol ("CLPFD","prim_FD_leq"))) (CVar (1,"y")))) (CVar (0,"x")))] []]),
  CFunc ("CLPFD","prim_FD_leq") 2 Private (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("Prelude","Success") []))) (CExternal "prim_FD_leq"),
  CFunc ("CLPFD",">#") 2 Public (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("Prelude","Success") []))) (CRules CFlex [CRule [CPVar (0,"x"),CPVar (1,"y")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","$!")) (CApply (CApply (CSymbol ("Prelude","$!")) (CSymbol ("CLPFD","prim_FD_ge"))) (CVar (1,"y")))) (CVar (0,"x")))] []]),
  CFunc ("CLPFD","prim_FD_ge") 2 Private (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("Prelude","Success") []))) (CExternal "prim_FD_ge"),
  CFunc ("CLPFD",">=#") 2 Public (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("Prelude","Success") []))) (CRules CFlex [CRule [CPVar (0,"x"),CPVar (1,"y")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","$!")) (CApply (CApply (CSymbol ("Prelude","$!")) (CSymbol ("CLPFD","prim_FD_geq"))) (CVar (1,"y")))) (CVar (0,"x")))] []]),
  CFunc ("CLPFD","prim_FD_geq") 2 Private (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("Prelude","Success") []))) (CExternal "prim_FD_geq"),
  CFunc ("CLPFD","#=#") 2 Public (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("CLPFD","Constraint") []))) (CRules CFlex [CRule [CPVar (0,"x"),CPVar (1,"y")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("CLPFD","FDEqual")) (CVar (0,"x"))) (CVar (1,"y")))] []]),
  CFunc ("CLPFD","#/=#") 2 Public (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("CLPFD","Constraint") []))) (CRules CFlex [CRule [CPVar (0,"x"),CPVar (1,"y")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("CLPFD","FDNotEqual")) (CVar (0,"x"))) (CVar (1,"y")))] []]),
  CFunc ("CLPFD","#<#") 2 Public (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("CLPFD","Constraint") []))) (CRules CFlex [CRule [CPVar (0,"x"),CPVar (1,"y")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("CLPFD","FDLess")) (CVar (0,"x"))) (CVar (1,"y")))] []]),
  CFunc ("CLPFD","#<=#") 2 Public (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("CLPFD","Constraint") []))) (CRules CFlex [CRule [CPVar (0,"x"),CPVar (1,"y")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("CLPFD","FDLessOrEqual")) (CVar (0,"x"))) (CVar (1,"y")))] []]),
  CFunc ("CLPFD","#>#") 2 Public (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("CLPFD","Constraint") []))) (CRules CFlex [CRule [CPVar (0,"x"),CPVar (1,"y")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("CLPFD","FDGreater")) (CVar (0,"x"))) (CVar (1,"y")))] []]),
  CFunc ("CLPFD","#>=#") 2 Public (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("CLPFD","Constraint") []))) (CRules CFlex [CRule [CPVar (0,"x"),CPVar (1,"y")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("CLPFD","FDGreaterOrEqual")) (CVar (0,"x"))) (CVar (1,"y")))] []]),
  CFunc ("CLPFD","neg") 1 Public (CFuncType (CTCons ("CLPFD","Constraint") []) (CTCons ("CLPFD","Constraint") [])) (CRules CFlex [CRule [CPVar (0,"x")] [(CSymbol ("Prelude","success"),CApply (CSymbol ("CLPFD","FDNeg")) (CVar (0,"x")))] []]),
  CFunc ("CLPFD","#/\\#") 2 Public (CFuncType (CTCons ("CLPFD","Constraint") []) (CFuncType (CTCons ("CLPFD","Constraint") []) (CTCons ("CLPFD","Constraint") []))) (CRules CFlex [CRule [CPVar (0,"x"),CPVar (1,"y")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("CLPFD","FDAnd")) (CVar (0,"x"))) (CVar (1,"y")))] []]),
  CFunc ("CLPFD","#\\/#") 2 Public (CFuncType (CTCons ("CLPFD","Constraint") []) (CFuncType (CTCons ("CLPFD","Constraint") []) (CTCons ("CLPFD","Constraint") []))) (CRules CFlex [CRule [CPVar (0,"x"),CPVar (1,"y")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("CLPFD","FDOr")) (CVar (0,"x"))) (CVar (1,"y")))] []]),
  CFunc ("CLPFD","#=>#") 2 Public (CFuncType (CTCons ("CLPFD","Constraint") []) (CFuncType (CTCons ("CLPFD","Constraint") []) (CTCons ("CLPFD","Constraint") []))) (CRules CFlex [CRule [CPVar (0,"x"),CPVar (1,"y")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("CLPFD","FDImply")) (CVar (0,"x"))) (CVar (1,"y")))] []]),
  CFunc ("CLPFD","#<=>#") 2 Public (CFuncType (CTCons ("CLPFD","Constraint") []) (CFuncType (CTCons ("CLPFD","Constraint") []) (CTCons ("CLPFD","Constraint") []))) (CRules CFlex [CRule [CPVar (0,"x"),CPVar (1,"y")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("CLPFD","FDEquiv")) (CVar (0,"x"))) (CVar (1,"y")))] []]),
  CFunc ("CLPFD","solve") 1 Public (CFuncType (CTCons ("CLPFD","Constraint") []) (CTCons ("Prelude","Success") [])) (CRules CFlex [CRule [CPVar (0,"c")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","$!!")) (CSymbol ("CLPFD","prim_solve_reify"))) (CVar (0,"c")))] []]),
  CFunc ("CLPFD","prim_solve_reify") 1 Private (CFuncType (CTCons ("CLPFD","Constraint") []) (CTCons ("Prelude","Success") [])) (CExternal "prim_solve_reify"),
  CFunc ("CLPFD","sum") 3 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Int") []]) (CFuncType (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("Prelude","Success") []))) (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("Prelude","Success") [])))) (CRules CFlex [CRule [CPVar (0,"vs"),CPVar (1,"rel"),CPVar (2,"v")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","seq")) (CApply (CSymbol ("Prelude","normalForm")) (CApply (CSymbol ("Prelude","ensureSpine")) (CVar (0,"vs"))))) (CApply (CApply (CSymbol ("Prelude","seq")) (CApply (CSymbol ("Prelude","ensureNotFree")) (CVar (1,"rel")))) (CApply (CApply (CSymbol ("Prelude","seq")) (CVar (2,"v"))) (CApply (CApply (CApply (CSymbol ("CLPFD","prim_sum")) (CVar (0,"vs"))) (CVar (1,"rel"))) (CVar (2,"v"))))))] []]),
  CFunc ("CLPFD","prim_sum") 3 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Int") []]) (CFuncType (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("Prelude","Success") []))) (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("Prelude","Success") [])))) (CExternal "prim_sum"),
  CFunc ("CLPFD","scalarProduct") 4 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Int") []]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Int") []]) (CFuncType (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("Prelude","Success") []))) (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("Prelude","Success") []))))) (CRules CFlex [CRule [CPVar (0,"cs"),CPVar (1,"vs"),CPVar (2,"rel"),CPVar (3,"v")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","seq")) (CApply (CSymbol ("Prelude","groundNormalForm")) (CVar (0,"cs")))) (CApply (CApply (CSymbol ("Prelude","seq")) (CApply (CSymbol ("Prelude","normalForm")) (CApply (CSymbol ("Prelude","ensureSpine")) (CVar (1,"vs"))))) (CApply (CApply (CSymbol ("Prelude","seq")) (CApply (CSymbol ("Prelude","ensureNotFree")) (CVar (2,"rel")))) (CApply (CApply (CSymbol ("Prelude","seq")) (CVar (3,"v"))) (CApply (CApply (CApply (CApply (CSymbol ("CLPFD","prim_scalarProduct")) (CVar (0,"cs"))) (CVar (1,"vs"))) (CVar (2,"rel"))) (CVar (3,"v")))))))] []]),
  CFunc ("CLPFD","prim_scalarProduct") 4 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Int") []]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Int") []]) (CFuncType (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("Prelude","Success") []))) (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("Prelude","Success") []))))) (CExternal "prim_scalarProduct"),
  CFunc ("CLPFD","count") 4 Public (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Int") []]) (CFuncType (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("Prelude","Success") []))) (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("Prelude","Success") []))))) (CRules CFlex [CRule [CPVar (0,"v"),CPVar (1,"vs"),CPVar (2,"rel"),CPVar (3,"c")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","seq")) (CApply (CSymbol ("Prelude","ensureNotFree")) (CVar (0,"v")))) (CApply (CApply (CSymbol ("Prelude","seq")) (CApply (CSymbol ("Prelude","normalForm")) (CApply (CSymbol ("Prelude","ensureSpine")) (CVar (1,"vs"))))) (CApply (CApply (CSymbol ("Prelude","seq")) (CApply (CSymbol ("Prelude","ensureNotFree")) (CVar (2,"rel")))) (CApply (CApply (CSymbol ("Prelude","seq")) (CVar (3,"c"))) (CApply (CApply (CApply (CApply (CSymbol ("CLPFD","prim_count")) (CVar (0,"v"))) (CVar (1,"vs"))) (CVar (2,"rel"))) (CVar (3,"c")))))))] []]),
  CFunc ("CLPFD","prim_count") 4 Private (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Int") []]) (CFuncType (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("Prelude","Success") []))) (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("Prelude","Success") []))))) (CExternal "prim_count"),
  CFunc ("CLPFD","allDifferent") 1 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Int") []]) (CTCons ("Prelude","Success") [])) (CRules CFlex [CRule [CPVar (0,"vs")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","seq")) (CApply (CSymbol ("Prelude","normalForm")) (CApply (CSymbol ("Prelude","ensureSpine")) (CVar (0,"vs"))))) (CApply (CSymbol ("CLPFD","prim_allDifferent")) (CVar (0,"vs"))))] []]),
  CFunc ("CLPFD","all_different") 0 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Int") []]) (CTCons ("Prelude","Success") [])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CSymbol ("CLPFD","allDifferent"))] []]),
  CFunc ("CLPFD","prim_allDifferent") 1 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Int") []]) (CTCons ("Prelude","Success") [])) (CExternal "prim_allDifferent"),
  CFunc ("CLPFD","indomain") 1 Public (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("Prelude","Success") [])) (CRules CFlex [CRule [CPVar (0,"x")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","seq")) (CVar (0,"x"))) (CApply (CSymbol ("CLPFD","prim_indomain")) (CVar (0,"x"))))] []]),
  CFunc ("CLPFD","prim_indomain") 1 Private (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("Prelude","Success") [])) (CExternal "prim_indomain"),
  CFunc ("CLPFD","labeling") 2 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("CLPFD","LabelingOption") []]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Int") []]) (CTCons ("Prelude","Success") []))) (CRules CFlex [CRule [CPVar (0,"options"),CPVar (1,"vs")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","seq")) (CApply (CSymbol ("Prelude","normalForm")) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("Prelude","ensureNotFree"))) (CApply (CSymbol ("Prelude","ensureSpine")) (CVar (0,"options")))))) (CApply (CApply (CSymbol ("Prelude","seq")) (CApply (CSymbol ("Prelude","normalForm")) (CApply (CSymbol ("Prelude","ensureSpine")) (CVar (1,"vs"))))) (CApply (CApply (CSymbol ("CLPFD","prim_labeling")) (CVar (0,"options"))) (CVar (1,"vs")))))] []]),
  CFunc ("CLPFD","prim_labeling") 2 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("CLPFD","LabelingOption") []]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Int") []]) (CTCons ("Prelude","Success") []))) (CExternal "prim_labeling")]
 [COp ("CLPFD","*#") CInfixlOp 7,COp ("CLPFD","-#") CInfixlOp 6,COp ("CLPFD","+#") CInfixlOp 6,COp ("CLPFD",">=#") CInfixOp 4,COp ("CLPFD",">#") CInfixOp 4,COp ("CLPFD","<=#") CInfixOp 4,COp ("CLPFD","<#") CInfixOp 4,COp ("CLPFD","/=#") CInfixOp 4,COp ("CLPFD","=#") CInfixOp 4,COp ("CLPFD","#>=#") CInfixOp 4,COp ("CLPFD","#>#") CInfixOp 4,COp ("CLPFD","#<=#") CInfixOp 4,COp ("CLPFD","#<#") CInfixOp 4,COp ("CLPFD","#/=#") CInfixOp 4,COp ("CLPFD","#=#") CInfixOp 4,COp ("CLPFD","#/\\#") CInfixrOp 3,COp ("CLPFD","#\\/#") CInfixrOp 2,COp ("CLPFD","#<=>#") CInfixrOp 1,COp ("CLPFD","#=>#") CInfixrOp 1]
