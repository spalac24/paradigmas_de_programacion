Prog "KeyDatabase" ["Database","Dynamic","Integer","List","Maybe","Prelude","Sort"] [TypeSyn ("KeyDatabase","Key") Private [] (TCons ("Prelude","Int") []),TypeSyn ("KeyDatabase","KeyPred") Private [0] (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (TCons ("Dynamic","Dynamic") [])))] [Func ("KeyDatabase","existsDBKey") 2 Public (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (TCons ("Dynamic","Dynamic") []))) (FuncType (TCons ("Prelude","Int") []) (TCons ("Database","Query") [TCons ("Prelude","Bool") []]))) (Rule [1,2] (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Prelude","seq") [Var 1],Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Prelude","seq") [Var 2],Comb FuncCall ("Database","transformQ") [Comb (FuncPartCall 1) ("Prelude","flip") [Comb (FuncPartCall 2) ("Prelude","/=") [],Comb ConsCall ("Prelude","Nothing") []],Comb FuncCall ("Database","queryOne") [Comb FuncCall ("Prelude","apply") [Var 1,Var 2]]]]])),Func ("KeyDatabase","allDBKeys") 1 Public (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (TCons ("Dynamic","Dynamic") []))) (TCons ("Database","Query") [TCons ("Prelude","[]") [TCons ("Prelude","Int") []]])) (Rule [1] (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Prelude","seq") [Var 1],Comb FuncCall ("Database","queryAll") [Comb (FuncPartCall 1) ("KeyDatabase","allDBKeys._#lambda1") [Var 1]]])),Func ("KeyDatabase","allDBKeys._#lambda1") 2 Private (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 29) (TCons ("Dynamic","Dynamic") []))) (FuncType (TCons ("Prelude","Int") []) (TCons ("Dynamic","Dynamic") []))) (Rule [1,2] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 1,Var 2],Comb FuncCall ("Prelude","unknown") []])),Func ("KeyDatabase","allDBInfos") 1 Public (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (TCons ("Dynamic","Dynamic") []))) (TCons ("Database","Query") [TCons ("Prelude","[]") [TVar 0]])) (Rule [1] (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Prelude","seq") [Var 1],Comb FuncCall ("Database","queryAll") [Comb FuncCall ("Prelude","apply") [Var 1,Comb FuncCall ("Prelude","unknown") []]]])),Func ("KeyDatabase","allDBKeyInfos") 1 Public (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (TCons ("Dynamic","Dynamic") []))) (TCons ("Database","Query") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TVar 0]]])) (Rule [1] (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Prelude","seq") [Var 1],Comb FuncCall ("Database","queryAll") [Comb (FuncPartCall 1) ("KeyDatabase","allDBKeyInfos._#lambda2") [Var 1]]])),Func ("KeyDatabase","allDBKeyInfos._#lambda2") 2 Private (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 50) (TCons ("Dynamic","Dynamic") []))) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TVar 50]) (TCons ("Dynamic","Dynamic") []))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 1,Var 3],Var 4])])),Func ("KeyDatabase","getDBInfo") 2 Public (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (TCons ("Dynamic","Dynamic") []))) (FuncType (TCons ("Prelude","Int") []) (TCons ("Database","Query") [TCons ("Prelude","Maybe") [TVar 0]]))) (Rule [1,2] (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Prelude","seq") [Var 1],Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Prelude","seq") [Var 2],Comb FuncCall ("Database","queryOne") [Comb (FuncPartCall 1) ("KeyDatabase","getDBInfo._#lambda3") [Var 1,Var 2]]]])),Func ("KeyDatabase","getDBInfo._#lambda3") 3 Private (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 67) (TCons ("Dynamic","Dynamic") []))) (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 67) (TCons ("Dynamic","Dynamic") [])))) (Rule [1,2,3] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 1,Var 2],Var 3])),Func ("KeyDatabase","index") 2 Public (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","Int") []))) (Rule [1,2] (Comb FuncCall ("KeyDatabase","index.idx.15") [Var 1,Lit (Intc  0),Var 2])),Func ("KeyDatabase","index.idx.15") 3 Private (FuncType (TVar 78) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TVar 78]) (TCons ("Prelude","Int") [])))) (Rule [1,2,3] (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 1,Var 4]) [Branch (Pattern ("Prelude","True") []) (Var 2),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("KeyDatabase","index.idx.15") [Var 1,Comb FuncCall ("Prelude","+") [Var 2,Lit (Intc  1)],Var 5])])])),Func ("KeyDatabase","sortByIndex") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TVar 0]]) (TCons ("Prelude","[]") [TVar 0])) (Rule [] (Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","map") [Comb (FuncPartCall 1) ("Prelude","snd") []],Comb (FuncPartCall 1) ("Sort","mergeSort") [Comb (FuncPartCall 2) ("KeyDatabase","sortByIndex._#lambda4") []]])),Func ("KeyDatabase","sortByIndex._#lambda4") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TVar 100]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TVar 100]) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Comb FuncCall ("Prelude","<") [Comb FuncCall ("Prelude","fst") [Var 1],Comb FuncCall ("Prelude","fst") [Var 2]])),Func ("KeyDatabase","groupByIndex") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TVar 0]]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 0]])) (Rule [] (Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("KeyDatabase","groupByIndex.addEmptyIdxs.24") [Lit (Intc  0)],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("List","groupBy") [Comb (FuncPartCall 2) ("KeyDatabase","groupByIndex._#lambda5") []],Comb (FuncPartCall 1) ("Sort","mergeSort") [Comb (FuncPartCall 2) ("KeyDatabase","groupByIndex._#lambda6") []]]])),Func ("KeyDatabase","groupByIndex.addEmptyIdxs.24") 2 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TVar 0]]]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 0]]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [3,4]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [5,6]) (Case  Flex (Var 5) [Branch (Pattern ("Prelude","(,)") [7,8]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 1,Var 7]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Var 8,Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Prelude","snd") [],Var 6]],Comb FuncCall ("KeyDatabase","groupByIndex.addEmptyIdxs.24") [Comb FuncCall ("Prelude","+") [Var 1,Lit (Intc  1)],Var 4]]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("KeyDatabase","groupByIndex.addEmptyIdxs.24") [Comb FuncCall ("Prelude","+") [Var 1,Lit (Intc  1)],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Var 7,Var 8],Var 6],Var 4]]])])])])])),Func ("KeyDatabase","groupByIndex._#lambda5") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TVar 153]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TVar 153]) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Comb FuncCall ("Prelude","==") [Comb FuncCall ("Prelude","fst") [Var 1],Comb FuncCall ("Prelude","fst") [Var 2]])),Func ("KeyDatabase","groupByIndex._#lambda6") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TVar 153]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TVar 153]) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Comb FuncCall ("Prelude","<") [Comb FuncCall ("Prelude","fst") [Var 1],Comb FuncCall ("Prelude","fst") [Var 2]])),Func ("KeyDatabase","getDBInfos") 2 Public (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (TCons ("Dynamic","Dynamic") []))) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Database","Query") [TCons ("Prelude","Maybe") [TCons ("Prelude","[]") [TVar 0]]]))) (Rule [1,2] (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Prelude","seq") [Var 1],Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Prelude","seq") [Comb FuncCall ("Prelude","normalForm") [Var 2]],Comb FuncCall ("Database","transformQ") [Comb (FuncPartCall 1) ("KeyDatabase","getDBInfos.sortByKeys.36") [Var 2],Comb FuncCall ("Database","queryAll") [Comb (FuncPartCall 1) ("KeyDatabase","getDBInfos._#lambda8") [Var 1,Var 2]]]]])),Func ("KeyDatabase","getDBInfos.sortByKeys.36") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TVar 0]]) (TCons ("Prelude","Maybe") [TCons ("Prelude","[]") [TVar 0]]))) (Rule [1,2] (Comb FuncCall ("Maybe","sequenceMaybe") [Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("KeyDatabase","getDBInfos.sortByKeys.36._#lambda7") [Var 2],Var 1]])),Func ("KeyDatabase","getDBInfos.sortByKeys.36._#lambda7") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TVar 166]]) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Maybe") [TVar 166]))) (Rule [1,2] (Comb FuncCall ("Prelude","lookup") [Var 2,Var 1])),Func ("KeyDatabase","getDBInfos._#lambda8") 3 Private (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 181) (TCons ("Dynamic","Dynamic") []))) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TVar 181]) (TCons ("Dynamic","Dynamic") [])))) (Rule [1,2,3] (Case  Flex (Var 3) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb FuncCall ("Dynamic","|>") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 1,Var 4],Var 5],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","elem") [Var 4],Var 2]])])),Func ("KeyDatabase","deleteDBEntry") 2 Public (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (TCons ("Dynamic","Dynamic") []))) (FuncType (TCons ("Prelude","Int") []) (TCons ("Database","Transaction") [TCons ("Prelude","()") []]))) (Rule [1,2] (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Prelude","seq") [Var 1],Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Prelude","seq") [Var 2],Comb FuncCall ("Database","|>>=") [Comb FuncCall ("Database","getDB") [Comb FuncCall ("Database","queryAll") [Comb (FuncPartCall 1) ("KeyDatabase","deleteDBEntry._#lambda9") [Var 1,Var 2]]],Comb (FuncPartCall 1) ("KeyDatabase","deleteDBEntry._#lambda10") [Var 1,Var 2]]]])),Func ("KeyDatabase","deleteDBEntry._#lambda9") 3 Private (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 210) (TCons ("Dynamic","Dynamic") []))) (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 210) (TCons ("Dynamic","Dynamic") [])))) (Rule [1,2,3] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 1,Var 2],Var 3])),Func ("KeyDatabase","deleteDBEntry._#lambda10") 3 Private (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 210) (TCons ("Dynamic","Dynamic") []))) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TVar 210]) (TCons ("Database","Transaction") [TCons ("Prelude","()") []])))) (Rule [1,2,3] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Database","mapT_") [Comb (FuncPartCall 1) ("KeyDatabase","deleteDBEntry._#lambda10._#lambda11") [Var 1,Var 2]],Var 3])),Func ("KeyDatabase","deleteDBEntry._#lambda10._#lambda11") 3 Private (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 210) (TCons ("Dynamic","Dynamic") []))) (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 210) (TCons ("Database","Transaction") [TCons ("Prelude","()") []])))) (Rule [1,2,3] (Comb FuncCall ("Database","deleteDB") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 1,Var 2],Var 3]])),Func ("KeyDatabase","deleteDBEntries") 2 Public (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (TCons ("Dynamic","Dynamic") []))) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Database","Transaction") [TCons ("Prelude","()") []]))) (Rule [1,2] (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Prelude","seq") [Var 1],Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Prelude","seq") [Var 2],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Database","mapT_") [Comb (FuncPartCall 1) ("KeyDatabase","deleteDBEntry") [Var 1]],Var 2]]])),Func ("KeyDatabase","updateDBEntry") 3 Public (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (TCons ("Dynamic","Dynamic") []))) (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (TCons ("Database","Transaction") [TCons ("Prelude","()") []])))) (Rule [1,2,3] (Comb FuncCall ("Database","|>>=") [Comb FuncCall ("Database","getDB") [Comb FuncCall ("KeyDatabase","existsDBKey") [Var 1,Var 2]],Comb (FuncPartCall 1) ("KeyDatabase","updateDBEntry._#lambda12") [Var 1,Var 3,Var 2]])),Func ("KeyDatabase","updateDBEntry._#lambda12") 4 Private (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 228) (TCons ("Dynamic","Dynamic") []))) (FuncType (TVar 228) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Database","Transaction") [TCons ("Prelude","()") []]))))) (Rule [1,2,3,4] (Case  Rigid (Var 4) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Database","|>>") [Comb FuncCall ("KeyDatabase","deleteDBEntry") [Var 1,Var 3],Comb FuncCall ("Database","addDB") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 1,Var 3],Var 2]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Database","errorT") [Comb ConsCall ("Database","TError") [Comb ConsCall ("Database","KeyNotExistsError") [],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'D'),Comb ConsCall ("Prelude",":") [Lit (Charc  'B'),Comb ConsCall ("Prelude",":") [Lit (Charc  'E'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'k'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","show") [Var 3],Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]])])),Func ("KeyDatabase","newDBKey") 1 Private (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (TCons ("Dynamic","Dynamic") []))) (TCons ("Database","Query") [TCons ("Prelude","Int") []])) (Rule [1] (Comb FuncCall ("Database","transformQ") [Comb (FuncPartCall 1) ("KeyDatabase","newDBKey._#lambda13") [],Comb FuncCall ("Database","queryAll") [Comb (FuncPartCall 1) ("KeyDatabase","newDBKey._#lambda14") [Var 1]]])),Func ("KeyDatabase","newDBKey._#lambda13") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","Int") [])) (Rule [1] (Case  Rigid (Comb FuncCall ("Prelude","null") [Var 1]) [Branch (Pattern ("Prelude","True") []) (Lit (Intc  1)),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","+") [Comb FuncCall ("Integer","maxlist") [Var 1],Lit (Intc  1)])])),Func ("KeyDatabase","newDBKey._#lambda14") 2 Private (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 254) (TCons ("Dynamic","Dynamic") []))) (FuncType (TCons ("Prelude","Int") []) (TCons ("Dynamic","Dynamic") []))) (Rule [1,2] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 1,Var 2],Comb FuncCall ("Prelude","unknown") []])),Func ("KeyDatabase","newDBEntry") 2 Public (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (TCons ("Dynamic","Dynamic") []))) (FuncType (TVar 0) (TCons ("Database","Transaction") [TCons ("Prelude","Int") []]))) (Rule [1,2] (Comb FuncCall ("Database","|>>=") [Comb FuncCall ("Database","getDB") [Comb FuncCall ("KeyDatabase","newDBKey") [Var 1]],Comb (FuncPartCall 1) ("KeyDatabase","newDBEntry._#lambda15") [Var 1,Var 2]])),Func ("KeyDatabase","newDBEntry._#lambda15") 3 Private (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 259) (TCons ("Dynamic","Dynamic") []))) (FuncType (TVar 259) (FuncType (TCons ("Prelude","Int") []) (TCons ("Database","Transaction") [TCons ("Prelude","Int") []])))) (Rule [1,2,3] (Comb FuncCall ("Database","|>>") [Comb FuncCall ("Database","addDB") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 1,Var 3],Var 2]],Comb FuncCall ("Database","returnT") [Var 3]])),Func ("KeyDatabase","newDBKeyEntry") 3 Public (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (TCons ("Dynamic","Dynamic") []))) (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (TCons ("Database","Transaction") [TCons ("Prelude","()") []])))) (Rule [1,2,3] (Comb FuncCall ("Database","|>>=") [Comb FuncCall ("Database","getDB") [Comb FuncCall ("KeyDatabase","existsDBKey") [Var 1,Var 2]],Comb (FuncPartCall 1) ("KeyDatabase","newDBKeyEntry._#lambda16") [Var 1,Var 3,Var 2]])),Func ("KeyDatabase","newDBKeyEntry._#lambda16") 4 Private (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 271) (TCons ("Dynamic","Dynamic") []))) (FuncType (TVar 271) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Database","Transaction") [TCons ("Prelude","()") []]))))) (Rule [1,2,3,4] (Case  Rigid (Var 4) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Database","errorT") [Comb ConsCall ("Database","TError") [Comb ConsCall ("Database","DuplicateKeyError") [],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'b'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'k'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],Comb FuncCall ("Prelude","show") [Var 3]]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Database","|>>") [Comb FuncCall ("Database","addDB") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 1,Var 3],Var 2]],Comb FuncCall ("Database","doneT") []])])),Func ("KeyDatabase","cleanDB") 1 Public (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (TCons ("Dynamic","Dynamic") []))) (TCons ("Database","Transaction") [TCons ("Prelude","()") []])) (Rule [1] (Comb FuncCall ("Database","|>>=") [Comb FuncCall ("Database","getDB") [Comb FuncCall ("Database","queryAll") [Comb (FuncPartCall 1) ("KeyDatabase","cleanDB._#lambda17") [Var 1]]],Comb (FuncPartCall 1) ("KeyDatabase","deleteDBEntries") [Var 1]])),Func ("KeyDatabase","cleanDB._#lambda17") 2 Private (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 291) (TCons ("Dynamic","Dynamic") []))) (FuncType (TCons ("Prelude","Int") []) (TCons ("Dynamic","Dynamic") []))) (Rule [1,2] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 1,Var 2],Comb FuncCall ("Prelude","unknown") []]))] []