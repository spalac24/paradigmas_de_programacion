Prog "FilePath" ["Char","List","Maybe","Prelude","System"] [TypeSyn ("FilePath","FilePath") Public [] (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])] [Func ("FilePath","pathSeparator") 0 Public (TCons ("Prelude","Char") []) (Rule [] (Case  Rigid (Comb FuncCall ("System","isWindows") []) [Branch (Pattern ("Prelude","True") []) (Lit (Charc  '\\')),Branch (Pattern ("Prelude","False") []) (Lit (Charc  '/'))])),Func ("FilePath","pathSeparators") 0 Public (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (Rule [] (Case  Rigid (Comb FuncCall ("System","isWindows") []) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  '\\'),Comb ConsCall ("Prelude",":") [Lit (Charc  '/'),Comb ConsCall ("Prelude","[]") []]]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  '/'),Comb ConsCall ("Prelude","[]") []])])),Func ("FilePath","isPathSeparator") 0 Public (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") [])) (Rule [] (Comb (FuncPartCall 1) ("Prelude","flip") [Comb (FuncPartCall 1) ("Prelude","elem") [],Comb FuncCall ("FilePath","pathSeparators") []])),Func ("FilePath","searchPathSeparator") 0 Public (TCons ("Prelude","Char") []) (Rule [] (Case  Rigid (Comb FuncCall ("System","isWindows") []) [Branch (Pattern ("Prelude","True") []) (Lit (Charc  ';')),Branch (Pattern ("Prelude","False") []) (Lit (Charc  ':'))])),Func ("FilePath","isSearchPathSeparator") 0 Public (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") [])) (Rule [] (Comb (FuncPartCall 1) ("Prelude","flip") [Comb (FuncPartCall 2) ("Prelude","==") [],Comb FuncCall ("FilePath","searchPathSeparator") []])),Func ("FilePath","extSeparator") 0 Public (TCons ("Prelude","Char") []) (Rule [] (Lit (Charc  '.'))),Func ("FilePath","isExtSeparator") 0 Public (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") [])) (Rule [] (Comb (FuncPartCall 1) ("Prelude","flip") [Comb (FuncPartCall 2) ("Prelude","==") [],Comb FuncCall ("FilePath","extSeparator") []])),Func ("FilePath","splitSearchPath") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [] (Comb (FuncPartCall 1) ("FilePath","splitSearchPath.f.16") [])),Func ("FilePath","splitSearchPath.g.16") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Case  Rigid (Comb FuncCall ("System","isPosix") []) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","[]") [])]),Branch (Pattern ("Prelude",":") [2,3]) (Comb ConsCall ("Prelude",":") [Var 1,Comb ConsCall ("Prelude","[]") []])])),Func ("FilePath","splitSearchPath.f.16") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","break") [Comb FuncCall ("FilePath","isSearchPathSeparator") []],Var 1]) [Branch (Pattern ("Prelude","(,)") [2,3]) (Case  Rigid (Var 3) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("FilePath","splitSearchPath.g.16") [Var 2]),Branch (Pattern ("Prelude",":") [4,5]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("FilePath","splitSearchPath.g.16") [Var 2],Comb FuncCall ("FilePath","splitSearchPath.f.16") [Var 5]])])])),Func ("FilePath","getSearchPath") 0 Public (TCons ("Prelude","IO") [TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (Rule [] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("System","getEnviron") [Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  'A'),Comb ConsCall ("Prelude",":") [Lit (Charc  'T'),Comb ConsCall ("Prelude",":") [Lit (Charc  'H'),Comb ConsCall ("Prelude","[]") []]]]]],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","return") [],Comb FuncCall ("FilePath","splitSearchPath") []]])),Func ("FilePath","splitExtension") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Let [(2,Comb FuncCall ("FilePath","splitFileName_") [Var 1]),(3,Comb FuncCall ("FilePath","splitExtension._#selFP5#a") [Var 2]),(4,Comb FuncCall ("FilePath","splitExtension._#selFP6#b") [Var 2]),(5,Comb FuncCall ("Prelude","$") [Comb FuncCall ("Prelude","break") [Comb FuncCall ("FilePath","isExtSeparator") []],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","reverse") [],Var 4]]),(6,Comb FuncCall ("FilePath","splitExtension._#selFP3#c") [Var 5]),(7,Comb FuncCall ("FilePath","splitExtension._#selFP4#d") [Var 5])] (Case  Rigid (Var 7) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","(,)") [Var 1,Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude",":") [8,9]) (Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Prelude","++") [Var 3,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","reverse") [],Var 9]],Comb ConsCall ("Prelude",":") [Var 8,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","reverse") [],Var 6]]])]))),Func ("FilePath","splitExtension._#selFP5#a") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("FilePath","splitExtension._#selFP6#b") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("FilePath","splitExtension._#selFP3#c") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("FilePath","splitExtension._#selFP4#d") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("FilePath","takeExtension") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","snd") [],Comb (FuncPartCall 1) ("FilePath","splitExtension") []])),Func ("FilePath","replaceExtension") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1,2] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FilePath","<.>") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FilePath","dropExtension") [],Var 1]],Var 2])),Func ("FilePath","<.>") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [] (Comb (FuncPartCall 2) ("FilePath","addExtension") [])),Func ("FilePath","dropExtension") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","fst") [],Comb (FuncPartCall 1) ("FilePath","splitExtension") []])),Func ("FilePath","addExtension") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Var 1),Branch (Pattern ("Prelude",":") [3,4]) (Let [(5,Comb FuncCall ("FilePath","splitDrive") [Var 1]),(6,Comb FuncCall ("FilePath","addExtension._#selFP8#a") [Var 5]),(7,Comb FuncCall ("FilePath","addExtension._#selFP9#b") [Var 5]),(8,Case  Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FilePath","isExtSeparator") [],Var 3]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","++") [Var 7,Var 2]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","++") [Var 7,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Comb FuncCall ("FilePath","extSeparator") [],Comb ConsCall ("Prelude","[]") []],Var 2]])])] (Comb FuncCall ("FilePath","joinDrive") [Var 6,Var 8]))])),Func ("FilePath","addExtension._#selFP8#a") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("FilePath","addExtension._#selFP9#b") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("FilePath","hasExtension") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","Bool") [])) (Rule [] (Comb FuncCall ("Prelude",".") [Comb FuncCall ("Prelude","any") [Comb FuncCall ("FilePath","isExtSeparator") []],Comb FuncCall ("FilePath","takeFileName") []])),Func ("FilePath","splitExtensions") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Let [(2,Comb FuncCall ("FilePath","splitFileName_") [Var 1]),(3,Comb FuncCall ("FilePath","splitExtensions._#selFP14#a") [Var 2]),(4,Comb FuncCall ("FilePath","splitExtensions._#selFP15#b") [Var 2]),(5,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","break") [Comb FuncCall ("FilePath","isExtSeparator") []],Var 4]),(6,Comb FuncCall ("FilePath","splitExtensions._#selFP12#c") [Var 5]),(7,Comb FuncCall ("FilePath","splitExtensions._#selFP13#d") [Var 5])] (Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Prelude","++") [Var 3,Var 6],Var 7]))),Func ("FilePath","splitExtensions._#selFP14#a") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("FilePath","splitExtensions._#selFP15#b") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("FilePath","splitExtensions._#selFP12#c") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("FilePath","splitExtensions._#selFP13#d") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("FilePath","dropExtensions") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","fst") [],Comb (FuncPartCall 1) ("FilePath","splitExtensions") []])),Func ("FilePath","takeExtensions") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","snd") [],Comb (FuncPartCall 1) ("FilePath","splitExtensions") []])),Func ("FilePath","isLetter") 1 Private (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Comb FuncCall ("Prelude","||") [Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude",">=") [Var 1,Lit (Charc  'a')],Comb FuncCall ("Prelude","<=") [Var 1,Lit (Charc  'z')]],Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude",">=") [Var 1,Lit (Charc  'A')],Comb FuncCall ("Prelude","<=") [Var 1,Lit (Charc  'Z')]]])),Func ("FilePath","splitDrive") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Let [(2,Comb FuncCall ("FilePath","readDriveLetter") [Var 1]),(3,Comb FuncCall ("FilePath","readDriveUNC") [Var 1]),(4,Comb FuncCall ("FilePath","readDriveShare") [Var 1])] (Case  Rigid (Comb FuncCall ("System","isPosix") []) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","span") [Comb (FuncPartCall 1) ("Prelude","flip") [Comb (FuncPartCall 2) ("Prelude","==") [],Lit (Charc  '/')],Var 1]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Maybe","isJust") [Var 2]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Maybe","fromJust") [Var 2]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Maybe","isJust") [Var 3]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Maybe","fromJust") [Var 3]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Maybe","isJust") [Var 4]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Maybe","fromJust") [Var 4]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","[]") [],Var 1]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])])]))),Func ("FilePath","addSlash") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]))) (Rule [1,2] (Let [(3,Comb FuncCall ("Prelude","span") [Comb FuncCall ("FilePath","isPathSeparator") [],Var 2]),(4,Comb FuncCall ("FilePath","addSlash._#selFP17#c") [Var 3]),(5,Comb FuncCall ("FilePath","addSlash._#selFP18#d") [Var 3])] (Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Prelude","++") [Var 1,Var 4],Var 5]))),Func ("FilePath","addSlash._#selFP17#c") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("FilePath","addSlash._#selFP18#d") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("FilePath","readDriveUNC") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","Maybe") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Case  Rigid (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Rigid (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case  Rigid (Var 5) [Branch (Pattern ("Prelude",":") [6,7]) (Let [(8,Var 6)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 8,Lit (Charc  '?')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 7) [Branch (Pattern ("Prelude",":") [9,10]) (Case  Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","all") [Comb FuncCall ("FilePath","isPathSeparator") []],Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude",":") [Var 9,Comb ConsCall ("Prelude","[]") []]]]]) [Branch (Pattern ("Prelude","True") []) (Let [(11,Case  Rigid (Comb FuncCall ("FilePath","readDriveLetter") [Var 10]) [Branch (Pattern ("Prelude","Just") [12]) (Case  Rigid (Var 12) [Branch (Pattern ("Prelude","(,)") [13,14]) (Comb ConsCall ("Prelude","Just") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude",":") [Lit (Charc  '?'),Comb ConsCall ("Prelude",":") [Var 9,Var 13]]]],Var 14]])]),Branch (Pattern ("Prelude","Nothing") []) (Comb ConsCall ("Prelude","Nothing") [])])] (Case  Rigid (Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Char","toUpper") [],Var 10]) [Branch (Pattern ("Prelude",":") [15,16]) (Let [(17,Var 15)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 17,Lit (Charc  'U')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 16) [Branch (Pattern ("Prelude",":") [18,19]) (Let [(20,Var 18)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 20,Lit (Charc  'N')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 19) [Branch (Pattern ("Prelude",":") [21,22]) (Let [(23,Var 21)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 23,Lit (Charc  'C')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 22) [Branch (Pattern ("Prelude",":") [24,25]) (Case  Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FilePath","isPathSeparator") [],Var 24]) [Branch (Pattern ("Prelude","True") []) (Let [(26,Comb FuncCall ("FilePath","readDriveShareName") [Comb FuncCall ("Prelude","drop") [Lit (Intc  4),Var 10]]),(27,Comb FuncCall ("FilePath","readDriveUNC._#selFP20#a") [Var 26]),(28,Comb FuncCall ("FilePath","readDriveUNC._#selFP21#b") [Var 26])] (Comb ConsCall ("Prelude","Just") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude",":") [Lit (Charc  '?'),Comb ConsCall ("Prelude",":") [Var 9,Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","take") [Lit (Intc  4),Var 10],Var 27]]]]],Var 28]])),Branch (Pattern ("Prelude","False") []) (Var 11)]),Branch (Pattern ("Prelude","[]") []) (Var 11)]),Branch (Pattern ("Prelude","False") []) (Var 11)])),Branch (Pattern ("Prelude","[]") []) (Var 11)]),Branch (Pattern ("Prelude","False") []) (Var 11)])),Branch (Pattern ("Prelude","[]") []) (Var 11)]),Branch (Pattern ("Prelude","False") []) (Var 11)])),Branch (Pattern ("Prelude","[]") []) (Var 11)])),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","Nothing") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","Nothing") [])])),Func ("FilePath","readDriveUNC._#selFP20#a") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("FilePath","readDriveUNC._#selFP21#b") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("FilePath","readDriveLetter") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","Maybe") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Case  Rigid (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Rigid (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Let [(6,Var 4)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 6,Lit (Charc  ':')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 5) [Branch (Pattern ("Prelude",":") [7,8]) (Case  Rigid (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("FilePath","isLetter") [Var 2],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FilePath","isPathSeparator") [],Var 7]]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","$") [Comb (ConsPartCall 1) ("Prelude","Just") [],Comb FuncCall ("FilePath","addSlash") [Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude",":") [Var 7,Var 8]]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("FilePath","isLetter") [Var 2]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","Just") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude",":") [Var 7,Var 8]]]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","Nothing") [])])]),Branch (Pattern ("Prelude","[]") []) (Case  Rigid (Comb FuncCall ("FilePath","isLetter") [Var 2]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","Just") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude","[]") []]]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","Nothing") [])])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","Nothing") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","Nothing") [])])),Func ("FilePath","readDriveShare") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","Maybe") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Case  Rigid (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Rigid (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case  Rigid (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FilePath","isPathSeparator") [],Var 2],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FilePath","isPathSeparator") [],Var 4]]) [Branch (Pattern ("Prelude","True") []) (Let [(6,Comb FuncCall ("FilePath","readDriveShareName") [Var 5]),(7,Comb FuncCall ("FilePath","readDriveShare._#selFP23#a") [Var 6]),(8,Comb FuncCall ("FilePath","readDriveShare._#selFP24#b") [Var 6])] (Comb ConsCall ("Prelude","Just") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude",":") [Var 4,Var 7]],Var 8]])),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","Nothing") [])])),Func ("FilePath","readDriveShare._#selFP23#a") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("FilePath","readDriveShare._#selFP24#b") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("FilePath","readDriveShareName") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Let [(2,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","break") [Comb FuncCall ("FilePath","isPathSeparator") []],Var 1]),(3,Comb FuncCall ("FilePath","readDriveShareName._#selFP26#a") [Var 2]),(4,Comb FuncCall ("FilePath","readDriveShareName._#selFP27#b") [Var 2])] (Comb FuncCall ("FilePath","addSlash") [Var 3,Var 4]))),Func ("FilePath","readDriveShareName._#selFP26#a") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("FilePath","readDriveShareName._#selFP27#b") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("FilePath","joinDrive") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1,2] (Case  Rigid (Comb FuncCall ("System","isPosix") []) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","++") [Var 1,Var 2]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","null") [Var 1]) [Branch (Pattern ("Prelude","True") []) (Var 2),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","null") [Var 2]) [Branch (Pattern ("Prelude","True") []) (Var 1),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FilePath","isPathSeparator") [],Comb FuncCall ("List","last") [Var 1]]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","++") [Var 1,Var 2]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 1) [Branch (Pattern ("Prelude",":") [3,4]) (Case  Rigid (Var 4) [Branch (Pattern ("Prelude",":") [5,6]) (Let [(7,Var 5)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 7,Lit (Charc  ':')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 6) [Branch (Pattern ("Prelude","[]") []) (Case  Rigid (Comb FuncCall ("FilePath","isLetter") [Var 3]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","++") [Var 1,Var 2]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","++") [Var 1,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Comb FuncCall ("FilePath","pathSeparator") [],Comb ConsCall ("Prelude","[]") []],Var 2]])]),Branch (Pattern ("Prelude",":") [8,9]) (Comb FuncCall ("Prelude","++") [Var 1,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Comb FuncCall ("FilePath","pathSeparator") [],Comb ConsCall ("Prelude","[]") []],Var 2]])]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","++") [Var 1,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Comb FuncCall ("FilePath","pathSeparator") [],Comb ConsCall ("Prelude","[]") []],Var 2]])])),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Var 1,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Comb FuncCall ("FilePath","pathSeparator") [],Comb ConsCall ("Prelude","[]") []],Var 2]])]),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Var 1,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Comb FuncCall ("FilePath","pathSeparator") [],Comb ConsCall ("Prelude","[]") []],Var 2]])]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])])])),Func ("FilePath","takeDrive") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","fst") [],Comb (FuncPartCall 1) ("FilePath","splitDrive") []])),Func ("FilePath","dropDrive") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","snd") [],Comb (FuncPartCall 1) ("FilePath","splitDrive") []])),Func ("FilePath","hasDrive") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","Bool") [])) (Rule [] (Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","not") [],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","null") [],Comb FuncCall ("FilePath","takeDrive") []]])),Func ("FilePath","isDrive") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","Bool") [])) (Rule [] (Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","null") [],Comb FuncCall ("FilePath","dropDrive") []])),Func ("FilePath","splitFileName") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Let [(2,Comb FuncCall ("FilePath","splitFileName_") [Var 1]),(3,Comb FuncCall ("FilePath","splitFileName._#selFP29#dir") [Var 2]),(4,Comb FuncCall ("FilePath","splitFileName._#selFP30#name") [Var 2])] (Comb ConsCall ("Prelude","(,)") [Case  Rigid (Comb FuncCall ("Prelude","null") [Var 3]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude",":") [Lit (Charc  '/'),Comb ConsCall ("Prelude","[]") []]]),Branch (Pattern ("Prelude","False") []) (Var 3)],Var 4]))),Func ("FilePath","splitFileName._#selFP29#dir") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("FilePath","splitFileName._#selFP30#name") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("FilePath","splitFileName_") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Let [(2,Comb FuncCall ("FilePath","splitDrive") [Var 1]),(3,Comb FuncCall ("FilePath","splitFileName_._#selFP35#c") [Var 2]),(4,Comb FuncCall ("FilePath","splitFileName_._#selFP36#d") [Var 2]),(5,Comb FuncCall ("Prelude","$") [Comb FuncCall ("Prelude","break") [Comb FuncCall ("FilePath","isPathSeparator") []],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","reverse") [],Var 4]]),(6,Comb FuncCall ("FilePath","splitFileName_._#selFP33#a") [Var 5]),(7,Comb FuncCall ("FilePath","splitFileName_._#selFP34#b") [Var 5])] (Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Prelude","++") [Var 3,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","reverse") [],Var 7]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","reverse") [],Var 6]]))),Func ("FilePath","splitFileName_._#selFP35#c") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("FilePath","splitFileName_._#selFP36#d") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("FilePath","splitFileName_._#selFP33#a") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("FilePath","splitFileName_._#selFP34#b") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("FilePath","replaceFileName") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1,2] (Let [(3,Comb FuncCall ("FilePath","splitFileName_") [Var 1]),(4,Comb FuncCall ("FilePath","replaceFileName._#selFP38#a") [Var 3])] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FilePath","</>") [],Var 4],Var 2]))),Func ("FilePath","replaceFileName._#selFP38#a") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("FilePath","dropFileName") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","fst") [],Comb (FuncPartCall 1) ("FilePath","splitFileName") []])),Func ("FilePath","takeFileName") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","snd") [],Comb (FuncPartCall 1) ("FilePath","splitFileName") []])),Func ("FilePath","takeBaseName") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Comb FuncCall ("Prelude",".") [Comb FuncCall ("FilePath","dropExtension") [],Comb FuncCall ("FilePath","takeFileName") []])),Func ("FilePath","replaceBaseName") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1,2] (Let [(3,Comb FuncCall ("FilePath","splitFileName_") [Var 1]),(4,Comb FuncCall ("FilePath","replaceBaseName._#selFP40#a") [Var 3]),(5,Comb FuncCall ("FilePath","replaceBaseName._#selFP41#b") [Var 3]),(6,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FilePath","takeExtension") [],Var 5])] (Comb FuncCall ("FilePath","combineAlways") [Var 4,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FilePath","<.>") [],Var 2],Var 6]]))),Func ("FilePath","replaceBaseName._#selFP40#a") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("FilePath","replaceBaseName._#selFP41#b") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("FilePath","hasTrailingPathSeparator") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","Bool") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude",":") [2,3]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FilePath","isPathSeparator") [],Comb FuncCall ("List","last") [Var 1]])])),Func ("FilePath","addTrailingPathSeparator") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Rigid (Comb FuncCall ("FilePath","hasTrailingPathSeparator") [Var 1]) [Branch (Pattern ("Prelude","True") []) (Var 1),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","++") [Var 1,Comb ConsCall ("Prelude",":") [Comb FuncCall ("FilePath","pathSeparator") [],Comb ConsCall ("Prelude","[]") []]])])),Func ("FilePath","dropTrailingPathSeparator") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Rigid (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("FilePath","hasTrailingPathSeparator") [Var 1],Comb FuncCall ("Prelude","not") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FilePath","isDrive") [],Var 1]]]) [Branch (Pattern ("Prelude","True") []) (Let [(2,Comb FuncCall ("Prelude","$") [Comb FuncCall ("Prelude","reverse") [],Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Prelude","dropWhile") [Comb FuncCall ("FilePath","isPathSeparator") []],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","reverse") [],Var 1]]])] (Case  Rigid (Comb FuncCall ("Prelude","null") [Var 2]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Comb FuncCall ("FilePath","pathSeparator") [],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude","False") []) (Var 2)])),Branch (Pattern ("Prelude","False") []) (Var 1)])),Func ("FilePath","takeDirectory") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Let [(2,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FilePath","dropFileName") [],Var 1]),(3,Comb FuncCall ("Prelude","$") [Comb FuncCall ("Prelude","reverse") [],Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Prelude","dropWhile") [Comb FuncCall ("FilePath","isPathSeparator") []],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","reverse") [],Var 2]]])] (Case  Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FilePath","isDrive") [],Var 2]) [Branch (Pattern ("Prelude","True") []) (Var 2),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","null") [Var 3],Comb FuncCall ("Prelude","not") [Comb FuncCall ("Prelude","null") [Var 2]]]) [Branch (Pattern ("Prelude","True") []) (Var 2),Branch (Pattern ("Prelude","False") []) (Var 3)])]))),Func ("FilePath","replaceDirectory") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1,2] (Comb FuncCall ("FilePath","combineAlways") [Var 2,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FilePath","takeFileName") [],Var 1]])),Func ("FilePath","combine") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1,2] (Case  Rigid (Comb FuncCall ("Prelude","||") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FilePath","hasDrive") [],Var 2],Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","not") [Comb FuncCall ("Prelude","null") [Var 2]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FilePath","isPathSeparator") [],Comb FuncCall ("Prelude","head") [Var 2]]]]) [Branch (Pattern ("Prelude","True") []) (Var 2),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("FilePath","combineAlways") [Var 1,Var 2]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])),Func ("FilePath","combineAlways") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1,2] (Case  Rigid (Comb FuncCall ("Prelude","null") [Var 1]) [Branch (Pattern ("Prelude","True") []) (Var 2),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","null") [Var 2]) [Branch (Pattern ("Prelude","True") []) (Var 1),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FilePath","isPathSeparator") [],Comb FuncCall ("List","last") [Var 1]]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","++") [Var 1,Var 2]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FilePath","isDrive") [],Var 1]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("FilePath","joinDrive") [Var 1,Var 2]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","++") [Var 1,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Comb FuncCall ("FilePath","pathSeparator") [],Comb ConsCall ("Prelude","[]") []],Var 2]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])])])),Func ("FilePath","</>") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [] (Comb (FuncPartCall 2) ("FilePath","combine") [])),Func ("FilePath","splitPath") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Let [(2,Comb FuncCall ("FilePath","splitDrive") [Var 1]),(3,Comb FuncCall ("FilePath","splitPath._#selFP49#drive") [Var 2]),(4,Comb FuncCall ("FilePath","splitPath._#selFP50#path") [Var 2])] (Comb FuncCall ("Prelude","++") [Case  Rigid (Comb FuncCall ("Prelude","/=") [Var 3,Comb ConsCall ("Prelude","[]") []]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Var 3,Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","[]") [])],Comb FuncCall ("FilePath","splitPath.f.182") [Var 4]]))),Func ("FilePath","splitPath._#selFP49#drive") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("FilePath","splitPath._#selFP50#path") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("FilePath","splitPath.f.182") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [2,3]) (Let [(4,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","break") [Comb FuncCall ("FilePath","isPathSeparator") []],Var 1]),(5,Comb FuncCall ("FilePath","splitPath.f.182._#selFP47#a") [Var 4]),(6,Comb FuncCall ("FilePath","splitPath.f.182._#selFP48#b") [Var 4]),(7,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","break") [Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","not") [],Comb FuncCall ("FilePath","isPathSeparator") []]],Var 6]),(8,Comb FuncCall ("FilePath","splitPath.f.182._#selFP45#c") [Var 7]),(9,Comb FuncCall ("FilePath","splitPath.f.182._#selFP46#d") [Var 7])] (Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","++") [Var 5,Var 8],Comb FuncCall ("FilePath","splitPath.f.182") [Var 9]]))])),Func ("FilePath","splitPath.f.182._#selFP47#a") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("FilePath","splitPath.f.182._#selFP48#b") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("FilePath","splitPath.f.182._#selFP45#c") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("FilePath","splitPath.f.182._#selFP46#d") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("FilePath","splitDirectories") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Let [(2,Comb FuncCall ("FilePath","splitPath") [Var 1])] (Case  Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FilePath","hasDrive") [],Var 1]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","head") [Var 2],Comb FuncCall ("FilePath","splitDirectories.f.193") [Comb FuncCall ("Prelude","tail") [Var 2]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("FilePath","splitDirectories.f.193") [Var 2])]))),Func ("FilePath","splitDirectories.g.193") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Let [(2,Comb FuncCall ("Prelude","takeWhile") [Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","not") [],Comb FuncCall ("FilePath","isPathSeparator") []],Var 1])] (Case  Rigid (Comb FuncCall ("Prelude","null") [Var 2]) [Branch (Pattern ("Prelude","True") []) (Var 1),Branch (Pattern ("Prelude","False") []) (Var 2)]))),Func ("FilePath","splitDirectories.f.193") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("FilePath","splitDirectories.g.193") [],Var 1])),Func ("FilePath","joinPath") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("FilePath","combine") [],Comb ConsCall ("Prelude","[]") [],Var 1])),Func ("FilePath","equalFilePath") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Comb FuncCall ("Prelude","==") [Comb FuncCall ("FilePath","equalFilePath.f.203") [Var 1],Comb FuncCall ("FilePath","equalFilePath.f.203") [Var 2]])),Func ("FilePath","equalFilePath.dropTrailSlash.203") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Rigid (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude",">=") [Comb FuncCall ("Prelude","length") [Var 1],Lit (Intc  2)],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FilePath","isPathSeparator") [],Comb FuncCall ("List","last") [Var 1]]]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("List","init") [Var 1]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Var 1),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])),Func ("FilePath","equalFilePath.f.203") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Rigid (Comb FuncCall ("System","isWindows") []) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("FilePath","equalFilePath.dropTrailSlash.203") [],Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Prelude","map") [Comb (FuncPartCall 1) ("Char","toLower") []],Comb FuncCall ("FilePath","normalise") [Var 1]]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("FilePath","equalFilePath.dropTrailSlash.203") [],Comb FuncCall ("FilePath","normalise") [Var 1]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])),Func ("FilePath","makeRelative") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1,2] (Case  Rigid (Comb FuncCall ("FilePath","equalFilePath") [Var 1,Var 2]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","/=") [Comb FuncCall ("FilePath","makeRelative.takeAbs.210") [Var 1],Comb FuncCall ("FilePath","makeRelative.takeAbs.210") [Var 2]]) [Branch (Pattern ("Prelude","True") []) (Var 2),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("FilePath","makeRelative.f.210") [Var 2,Comb FuncCall ("FilePath","makeRelative.dropAbs.210") [Var 1],Comb FuncCall ("FilePath","makeRelative.dropAbs.210") [Var 2]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])),Func ("FilePath","makeRelative.g.210") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Let [(2,Comb FuncCall ("Prelude","$") [Comb FuncCall ("Prelude","break") [Comb FuncCall ("FilePath","isPathSeparator") []],Comb FuncCall ("Prelude","dropWhile") [Comb FuncCall ("FilePath","isPathSeparator") [],Var 1]]),(3,Comb FuncCall ("FilePath","makeRelative.g.210._#selFP52#a") [Var 2]),(4,Comb FuncCall ("FilePath","makeRelative.g.210._#selFP53#b") [Var 2])] (Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Prelude","dropWhile") [Comb FuncCall ("FilePath","isPathSeparator") [],Var 3],Comb FuncCall ("Prelude","dropWhile") [Comb FuncCall ("FilePath","isPathSeparator") [],Var 4]]))),Func ("FilePath","makeRelative.g.210._#selFP52#a") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("FilePath","makeRelative.g.210._#selFP53#b") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("FilePath","makeRelative.f.210") 3 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1,2,3] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","dropWhile") [Comb FuncCall ("FilePath","isPathSeparator") [],Var 3]),Branch (Pattern ("Prelude",":") [4,5]) (Let [(6,Comb FuncCall ("FilePath","makeRelative.g.210") [Var 2]),(7,Comb FuncCall ("FilePath","makeRelative.f.210._#selFP58#x1") [Var 6]),(8,Comb FuncCall ("FilePath","makeRelative.f.210._#selFP59#x2") [Var 6]),(9,Comb FuncCall ("FilePath","makeRelative.g.210") [Var 3]),(10,Comb FuncCall ("FilePath","makeRelative.f.210._#selFP56#y1") [Var 9]),(11,Comb FuncCall ("FilePath","makeRelative.f.210._#selFP57#y2") [Var 9])] (Case  Rigid (Comb FuncCall ("FilePath","equalFilePath") [Var 7,Var 10]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("FilePath","makeRelative.f.210") [Var 1,Var 8,Var 11]),Branch (Pattern ("Prelude","False") []) (Var 1)]))])),Func ("FilePath","makeRelative.f.210._#selFP58#x1") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("FilePath","makeRelative.f.210._#selFP59#x2") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("FilePath","makeRelative.f.210._#selFP56#y1") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("FilePath","makeRelative.f.210._#selFP57#y2") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("FilePath","makeRelative.dropAbs.210") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FilePath","dropDrive") [],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude",":") [2,3]) (Case  Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FilePath","isPathSeparator") [],Var 2]) [Branch (Pattern ("Prelude","True") []) (Var 3),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FilePath","dropDrive") [],Comb ConsCall ("Prelude",":") [Var 2,Var 3]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])),Func ("FilePath","makeRelative.takeAbs.210") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Prelude","map") [Comb (FuncPartCall 1) ("FilePath","makeRelative.takeAbs.210._#lambda9") []],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FilePath","takeDrive") [],Comb ConsCall ("Prelude","[]") []]]),Branch (Pattern ("Prelude",":") [2,3]) (Case  Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FilePath","isPathSeparator") [],Var 2]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Comb FuncCall ("FilePath","pathSeparator") [],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Prelude","map") [Comb (FuncPartCall 1) ("FilePath","makeRelative.takeAbs.210._#lambda10") []],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FilePath","takeDrive") [],Var 1]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])),Func ("FilePath","makeRelative.takeAbs.210._#lambda9") 1 Private (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Char") [])) (Rule [1] (Case  Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FilePath","isPathSeparator") [],Var 1]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("FilePath","pathSeparator") []),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Char","toLower") [Var 1])])),Func ("FilePath","makeRelative.takeAbs.210._#lambda10") 1 Private (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Char") [])) (Rule [1] (Case  Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FilePath","isPathSeparator") [],Var 1]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("FilePath","pathSeparator") []),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Char","toLower") [Var 1])])),Func ("FilePath","normalise") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Let [(2,Comb FuncCall ("FilePath","splitDrive") [Var 1]),(3,Comb FuncCall ("FilePath","normalise._#selFP61#drv") [Var 2]),(4,Comb FuncCall ("FilePath","normalise._#selFP62#pth") [Var 2]),(5,Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("FilePath","joinPath") [],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("FilePath","normalise.dropDots.235") [],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("FilePath","splitDirectories") [],Comb (FuncPartCall 1) ("FilePath","normalise.propSep.235") []]]])] (Comb FuncCall ("Prelude","++") [Comb FuncCall ("FilePath","joinDrive") [Comb FuncCall ("FilePath","normaliseDrive") [Var 3],Comb FuncCall ("Prelude","apply") [Var 5,Var 4]],Case  Rigid (Comb FuncCall ("FilePath","normalise.isDirPath.235") [Var 4]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Comb FuncCall ("FilePath","pathSeparator") [],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","[]") [])]]))),Func ("FilePath","normalise._#selFP61#drv") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("FilePath","normalise._#selFP62#pth") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("FilePath","normalise.lastSep.235") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","Bool") [])) (Rule [1] (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","not") [Comb FuncCall ("Prelude","null") [Var 1]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FilePath","isPathSeparator") [],Comb FuncCall ("List","last") [Var 1]]])),Func ("FilePath","normalise.isDirPath.235") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","Bool") [])) (Rule [1] (Comb FuncCall ("Prelude","||") [Comb FuncCall ("FilePath","normalise.lastSep.235") [Var 1],Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","not") [Comb FuncCall ("Prelude","null") [Var 1]],Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","==") [Comb FuncCall ("List","last") [Var 1],Lit (Charc  '.')],Comb FuncCall ("FilePath","normalise.lastSep.235") [Comb FuncCall ("List","init") [Var 1]]]]])),Func ("FilePath","normalise.propSep.235") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Case  Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FilePath","isPathSeparator") [],Var 2]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Comb FuncCall ("FilePath","pathSeparator") [],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Var 1),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])]),Branch (Pattern ("Prelude",":") [4,5]) (Case  Rigid (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FilePath","isPathSeparator") [],Var 2],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FilePath","isPathSeparator") [],Var 4]]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("FilePath","normalise.propSep.235") [Comb ConsCall ("Prelude",":") [Var 2,Var 5]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FilePath","isPathSeparator") [],Var 2]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Comb FuncCall ("FilePath","pathSeparator") [],Comb FuncCall ("FilePath","normalise.propSep.235") [Comb ConsCall ("Prelude",":") [Var 4,Var 5]]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Var 2,Comb FuncCall ("FilePath","normalise.propSep.235") [Comb ConsCall ("Prelude",":") [Var 4,Var 5]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])])])),Func ("FilePath","normalise.dropDots'.235") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","reverse") [],Var 1]),Branch (Pattern ("Prelude",":") [3,4]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 3,Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude","[]") []]]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("FilePath","normalise.dropDots'.235") [Var 1,Var 4]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("FilePath","normalise.dropDots'.235") [Comb ConsCall ("Prelude",":") [Var 3,Var 1],Var 4]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])),Func ("FilePath","normalise.dropDots.235") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","all") [Comb (FuncPartCall 1) ("Prelude","flip") [Comb (FuncPartCall 2) ("Prelude","==") [],Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude","[]") []]]],Var 1]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("FilePath","normalise.dropDots'.235") [Comb ConsCall ("Prelude","[]") [],Var 1]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])),Func ("FilePath","normaliseDrive") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Let [(2,Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("FilePath","normaliseDrive.repSlash.255") [],Var 1])] (Case  Rigid (Comb FuncCall ("System","isPosix") []) [Branch (Pattern ("Prelude","True") []) (Var 1),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Maybe","isJust") [],Comb FuncCall ("FilePath","readDriveLetter") [Var 2]]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Char","toUpper") [],Var 2]),Branch (Pattern ("Prelude","False") []) (Var 1)]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])]))),Func ("FilePath","normaliseDrive.repSlash.255") 1 Private (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Char") [])) (Rule [1] (Case  Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FilePath","isPathSeparator") [],Var 1]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("FilePath","pathSeparator") []),Branch (Pattern ("Prelude","False") []) (Var 1)])),Func ("FilePath","badCharacters") 0 Private (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (Rule [] (Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude",":") [Lit (Charc  '*'),Comb ConsCall ("Prelude",":") [Lit (Charc  '?'),Comb ConsCall ("Prelude",":") [Lit (Charc  '>'),Comb ConsCall ("Prelude",":") [Lit (Charc  '<'),Comb ConsCall ("Prelude",":") [Lit (Charc  '|'),Comb ConsCall ("Prelude",":") [Lit (Charc  '"'),Comb ConsCall ("Prelude","[]") []]]]]]]])),Func ("FilePath","badElements") 0 Private (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (Rule [] (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'O'),Comb ConsCall ("Prelude",":") [Lit (Charc  'N'),Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  'R'),Comb ConsCall ("Prelude",":") [Lit (Charc  'N'),Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'A'),Comb ConsCall ("Prelude",":") [Lit (Charc  'U'),Comb ConsCall ("Prelude",":") [Lit (Charc  'X'),Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'N'),Comb ConsCall ("Prelude",":") [Lit (Charc  'U'),Comb ConsCall ("Prelude",":") [Lit (Charc  'L'),Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'O'),Comb ConsCall ("Prelude",":") [Lit (Charc  'M'),Comb ConsCall ("Prelude",":") [Lit (Charc  '1'),Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'O'),Comb ConsCall ("Prelude",":") [Lit (Charc  'M'),Comb ConsCall ("Prelude",":") [Lit (Charc  '2'),Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'O'),Comb ConsCall ("Prelude",":") [Lit (Charc  'M'),Comb ConsCall ("Prelude",":") [Lit (Charc  '3'),Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'O'),Comb ConsCall ("Prelude",":") [Lit (Charc  'M'),Comb ConsCall ("Prelude",":") [Lit (Charc  '4'),Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'O'),Comb ConsCall ("Prelude",":") [Lit (Charc  'M'),Comb ConsCall ("Prelude",":") [Lit (Charc  '5'),Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'O'),Comb ConsCall ("Prelude",":") [Lit (Charc  'M'),Comb ConsCall ("Prelude",":") [Lit (Charc  '6'),Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'O'),Comb ConsCall ("Prelude",":") [Lit (Charc  'M'),Comb ConsCall ("Prelude",":") [Lit (Charc  '7'),Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'O'),Comb ConsCall ("Prelude",":") [Lit (Charc  'M'),Comb ConsCall ("Prelude",":") [Lit (Charc  '8'),Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'O'),Comb ConsCall ("Prelude",":") [Lit (Charc  'M'),Comb ConsCall ("Prelude",":") [Lit (Charc  '9'),Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'L'),Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  'T'),Comb ConsCall ("Prelude",":") [Lit (Charc  '1'),Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'L'),Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  'T'),Comb ConsCall ("Prelude",":") [Lit (Charc  '2'),Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'L'),Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  'T'),Comb ConsCall ("Prelude",":") [Lit (Charc  '3'),Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'L'),Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  'T'),Comb ConsCall ("Prelude",":") [Lit (Charc  '4'),Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'L'),Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  'T'),Comb ConsCall ("Prelude",":") [Lit (Charc  '5'),Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'L'),Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  'T'),Comb ConsCall ("Prelude",":") [Lit (Charc  '6'),Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'L'),Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  'T'),Comb ConsCall ("Prelude",":") [Lit (Charc  '7'),Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'L'),Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  'T'),Comb ConsCall ("Prelude",":") [Lit (Charc  '8'),Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'L'),Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  'T'),Comb ConsCall ("Prelude",":") [Lit (Charc  '9'),Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'L'),Comb ConsCall ("Prelude",":") [Lit (Charc  'O'),Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'K'),Comb ConsCall ("Prelude",":") [Lit (Charc  '$'),Comb ConsCall ("Prelude","[]") []]]]]]],Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]])),Func ("FilePath","isValid") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","Bool") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude",":") [2,3]) (Let [(4,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FilePath","dropDrive") [],Var 1])] (Case  Rigid (Comb FuncCall ("System","isPosix") []) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","not") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","any") [Comb (FuncPartCall 1) ("Prelude","flip") [Comb (FuncPartCall 1) ("Prelude","elem") [],Comb FuncCall ("FilePath","badCharacters") []]],Var 4]],Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","not") [Comb FuncCall ("Prelude","$") [Comb FuncCall ("Prelude","any") [Comb (FuncPartCall 1) ("FilePath","isValid.f.268") []],Comb FuncCall ("FilePath","splitDirectories") [Var 4]]],Comb FuncCall ("Prelude","not") [Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude",">=") [Comb FuncCall ("Prelude","length") [Var 1],Lit (Intc  2)],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","all") [Comb FuncCall ("FilePath","isPathSeparator") []],Var 1]]]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])]))])),Func ("FilePath","isValid.f.268") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","Bool") [])) (Rule [1] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","elem") [Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Char","toUpper") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FilePath","dropExtensions") [],Var 1]]],Comb FuncCall ("FilePath","badElements") []])),Func ("FilePath","makeValid") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude",":") [2,3]) (Let [(4,Comb FuncCall ("FilePath","splitDrive") [Var 1]),(5,Comb FuncCall ("FilePath","makeValid._#selFP70#drv") [Var 4]),(6,Comb FuncCall ("FilePath","makeValid._#selFP71#pth") [Var 4])] (Case  Rigid (Comb FuncCall ("System","isPosix") []) [Branch (Pattern ("Prelude","True") []) (Var 1),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude",">=") [Comb FuncCall ("Prelude","length") [Var 1],Lit (Intc  2)],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","all") [Comb FuncCall ("FilePath","isPathSeparator") []],Var 1]]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","take") [Lit (Intc  2),Var 1],Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'v'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("FilePath","joinDrive") [Var 5],Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("FilePath","makeValid.validElements.278") [],Comb FuncCall ("FilePath","makeValid.validChars.278") [Var 6]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])]))])),Func ("FilePath","makeValid._#selFP70#drv") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("FilePath","makeValid._#selFP71#pth") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("FilePath","makeValid.f.278") 1 Private (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Char") [])) (Rule [1] (Case  Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","elem") [Var 1],Comb FuncCall ("FilePath","badCharacters") []]) [Branch (Pattern ("Prelude","True") []) (Lit (Charc  '_')),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Var 1),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])),Func ("FilePath","makeValid.validChars.278") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("FilePath","makeValid.f.278") [],Var 1])),Func ("FilePath","makeValid.h.278") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Let [(2,Comb FuncCall ("FilePath","splitExtensions") [Var 1]),(3,Comb FuncCall ("FilePath","makeValid.h.278._#selFP65#a") [Var 2]),(4,Comb FuncCall ("FilePath","makeValid.h.278._#selFP66#b") [Var 2])] (Case  Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","elem") [Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Char","toUpper") [],Var 3]],Comb FuncCall ("FilePath","badElements") []]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","++") [Var 3,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FilePath","<.>") [],Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude","[]") []]],Var 4]]),Branch (Pattern ("Prelude","False") []) (Var 1)]))),Func ("FilePath","makeValid.h.278._#selFP65#a") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("FilePath","makeValid.h.278._#selFP66#b") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("FilePath","makeValid.g.278") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Let [(2,Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Prelude","span") [Comb FuncCall ("FilePath","isPathSeparator") []],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","reverse") [],Var 1]]),(3,Comb FuncCall ("FilePath","makeValid.g.278._#selFP68#a") [Var 2]),(4,Comb FuncCall ("FilePath","makeValid.g.278._#selFP69#b") [Var 2])] (Comb FuncCall ("Prelude","++") [Comb FuncCall ("FilePath","makeValid.h.278") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","reverse") [],Var 4]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","reverse") [],Var 3]]))),Func ("FilePath","makeValid.g.278._#selFP68#a") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("FilePath","makeValid.g.278._#selFP69#b") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("FilePath","makeValid.validElements.278") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("FilePath","joinPath") [],Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Prelude","map") [Comb (FuncPartCall 1) ("FilePath","makeValid.g.278") []],Comb FuncCall ("FilePath","splitPath") [Var 1]]])),Func ("FilePath","isRelative") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","Bool") [])) (Rule [] (Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("FilePath","isRelativeDrive") [],Comb FuncCall ("FilePath","takeDrive") []])),Func ("FilePath","isRelativeDrive") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","Bool") [])) (Rule [1] (Comb FuncCall ("Prelude","||") [Comb FuncCall ("Prelude","null") [Var 1],Comb FuncCall ("Prelude","maybe") [Comb ConsCall ("Prelude","False") [],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","not") [],Comb FuncCall ("Prelude",".") [Comb FuncCall ("FilePath","isPathSeparator") [],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("List","last") [],Comb (FuncPartCall 1) ("Prelude","fst") []]]],Comb FuncCall ("FilePath","readDriveLetter") [Var 1]]])),Func ("FilePath","isAbsolute") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","Bool") [])) (Rule [] (Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","not") [],Comb FuncCall ("FilePath","isRelative") []]))] [Op ("FilePath","<.>") InfixrOp 7,Op ("FilePath","</>") InfixrOp 5]