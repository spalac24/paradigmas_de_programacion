Prog "AllSolutions" ["Prelude"] [Type ("AllSolutions","SearchTree") Public [0,1] [Cons ("AllSolutions","SearchBranch") 1 Public [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 1,TCons ("AllSolutions","SearchTree") [TVar 0,TVar 1]]]],Cons ("AllSolutions","Solutions") 1 Public [TCons ("Prelude","[]") [TVar 0]]]] [Func ("AllSolutions","getAllSolutions") 1 Public (FuncType (FuncType (TVar 0) (TCons ("Prelude","Success") [])) (TCons ("Prelude","IO") [TCons ("Prelude","[]") [TVar 0]])) (Rule [1] (Comb FuncCall ("Prelude","return") [Comb FuncCall ("Prelude","findall") [Var 1]])),Func ("AllSolutions","getAllValues") 1 Private (FuncType (TVar 0) (TCons ("Prelude","IO") [TCons ("Prelude","[]") [TVar 0]])) (Rule [1] (Comb FuncCall ("Prelude","return") [Comb FuncCall ("Prelude","findall") [Comb (FuncPartCall 1) ("Prelude","flip") [Comb (FuncPartCall 2) ("Prelude","=:=") [],Var 1]]])),Func ("AllSolutions","getOneSolution") 1 Public (FuncType (FuncType (TVar 0) (TCons ("Prelude","Success") [])) (TCons ("Prelude","IO") [TCons ("Prelude","Maybe") [TVar 0]])) (Rule [1] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("AllSolutions","getAllSolutions") [Var 1],Comb (FuncPartCall 1) ("AllSolutions","getOneSolution._#lambda1") []])),Func ("AllSolutions","getOneSolution._#lambda1") 1 Private (FuncType (TCons ("Prelude","[]") [TVar 13]) (TCons ("Prelude","IO") [TCons ("Prelude","Maybe") [TVar 13]])) (Rule [1] (Comb FuncCall ("Prelude","return") [Case  Rigid (Comb FuncCall ("Prelude","null") [Var 1]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","Just") [Comb FuncCall ("Prelude","head") [Var 1]])]])),Func ("AllSolutions","getOneValue") 1 Public (FuncType (TVar 0) (TCons ("Prelude","IO") [TCons ("Prelude","Maybe") [TVar 0]])) (Rule [1] (Comb FuncCall ("AllSolutions","getOneSolution") [Comb (FuncPartCall 1) ("Prelude","=:=") [Var 1]])),Func ("AllSolutions","getAllFailures") 2 Public (FuncType (TVar 0) (FuncType (FuncType (TVar 0) (TCons ("Prelude","Success") [])) (TCons ("Prelude","IO") [TCons ("Prelude","[]") [TVar 0]]))) (Rule [1,2] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("AllSolutions","getAllSolutions") [Comb (FuncPartCall 1) ("Prelude","flip") [Comb (FuncPartCall 2) ("Prelude","=:=") [],Var 1]],Comb (FuncPartCall 1) ("AllSolutions","getAllFailures._#lambda4") [Var 2]])),Func ("AllSolutions","getAllFailures.naf.11") 2 Private (FuncType (FuncType (TVar 0) (TCons ("Prelude","Success") [])) (FuncType (TVar 0) (TCons ("Prelude","IO") [TCons ("Prelude","[]") [TVar 0]]))) (Rule [1,2] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("AllSolutions","getOneSolution") [Comb (FuncPartCall 1) ("AllSolutions","getAllFailures.naf.11._#lambda2") [Var 1,Var 2]],Comb (FuncPartCall 1) ("AllSolutions","getAllFailures.naf.11._#lambda3") [Var 2]])),Func ("AllSolutions","getAllFailures.naf.11._#lambda2") 3 Private (FuncType (FuncType (TVar 43) (TCons ("Prelude","Success") [])) (FuncType (TVar 43) (FuncType (TVar 42) (TCons ("Prelude","Success") [])))) (Rule [1,2,3] (Comb FuncCall ("Prelude","apply") [Var 1,Var 2])),Func ("AllSolutions","getAllFailures.naf.11._#lambda3") 2 Private (FuncType (TVar 43) (FuncType (TCons ("Prelude","Maybe") [TVar 42]) (TCons ("Prelude","IO") [TCons ("Prelude","[]") [TVar 43]]))) (Rule [1,2] (Comb FuncCall ("Prelude","return") [Comb FuncCall ("Prelude","maybe") [Comb ConsCall ("Prelude",":") [Var 1,Comb ConsCall ("Prelude","[]") []],Comb (FuncPartCall 1) ("Prelude","const") [Comb ConsCall ("Prelude","[]") []],Var 2]])),Func ("AllSolutions","getAllFailures._#lambda4") 2 Private (FuncType (FuncType (TVar 25) (TCons ("Prelude","Success") [])) (FuncType (TCons ("Prelude","[]") [TVar 25]) (TCons ("Prelude","IO") [TCons ("Prelude","[]") [TVar 25]]))) (Rule [1,2] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","mapIO") [Comb (FuncPartCall 1) ("AllSolutions","getAllFailures.naf.11") [Var 1]],Var 2],Comb (FuncPartCall 1) ("AllSolutions","getAllFailures._#lambda4._#lambda5") []])),Func ("AllSolutions","getAllFailures._#lambda4._#lambda5") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 25]]) (TCons ("Prelude","IO") [TCons ("Prelude","[]") [TVar 25]])) (Rule [1] (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Prelude","return") [],Comb FuncCall ("Prelude","concat") [Var 1]])),Func ("AllSolutions","getSearchTree") 2 Public (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (FuncType (TVar 1) (TCons ("Prelude","Success") [])) (TCons ("Prelude","IO") [TCons ("AllSolutions","SearchTree") [TVar 1,TVar 0]]))) (Rule [1,2] (Comb FuncCall ("Prelude","return") [Comb FuncCall ("AllSolutions","getSearchTreeUnsafe") [Var 1,Var 2]])),Func ("AllSolutions","getSearchTreeUnsafe") 2 Private (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (FuncType (TVar 1) (TCons ("Prelude","Success") [])) (TCons ("AllSolutions","SearchTree") [TVar 1,TVar 0]))) (Rule [1,2] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("AllSolutions","Solutions") [Comb FuncCall ("Prelude","findall") [Var 2]]),Branch (Pattern ("Prelude",":") [3,4]) (Comb ConsCall ("AllSolutions","SearchBranch") [Comb FuncCall ("Prelude","findall") [Comb (FuncPartCall 1) ("Prelude","flip") [Comb (FuncPartCall 2) ("Prelude","=:=") [],Comb FuncCall ("AllSolutions","solve") [Var 3,Var 4,Var 2]]]])])),Func ("AllSolutions","solve") 3 Private (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (FuncType (TVar 1) (TCons ("Prelude","Success") [])) (TCons ("Prelude","(,)") [TVar 0,TCons ("AllSolutions","SearchTree") [TVar 1,TVar 0]])))) (Rule [1,2,3] (Free [4] (Comb FuncCall ("Prelude","cond") [Comb FuncCall ("Prelude","=:=") [Var 1,Var 4],Comb ConsCall ("Prelude","(,)") [Var 4,Comb FuncCall ("AllSolutions","getSearchTreeUnsafe") [Var 2,Var 3]]])))] []