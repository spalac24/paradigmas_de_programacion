Prog "Ports" ["CPNS","Prelude","System","Time"] [Type ("Ports","Port") Public [0] [Cons ("Ports","internalPort") 4 Private [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","Int") [],TCons ("Prelude","Int") [],TVar 0]],Type ("Ports","SP_Msg") Public [] [Cons ("Ports","SP_Put") 1 Public [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],Cons ("Ports","SP_GetLine") 1 Public [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],Cons ("Ports","SP_GetChar") 1 Public [TCons ("Prelude","Char") []],Cons ("Ports","SP_EOF") 1 Public [TCons ("Prelude","Bool") []],Cons ("Ports","SP_Close") 0 Public []]] [Func ("Ports","openPort") 2 Public (FuncType (TCons ("Ports","Port") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","Success") []))) (Rule [1,2] (Comb FuncCall ("Prelude","$!!") [Comb FuncCall ("Prelude","$!") [Comb (FuncPartCall 2) ("Ports","prim_openPort") [],Var 1],Var 2])),Func ("Ports","prim_openPort") 2 Private (FuncType (TCons ("Ports","Port") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","Success") []))) (External "Ports.prim_openPort"),Func ("Ports","send") 2 Public (FuncType (TVar 0) (FuncType (TCons ("Ports","Port") [TVar 0]) (TCons ("Prelude","Success") []))) (Rule [1,2] (Comb FuncCall ("Prelude","$#") [Comb FuncCall ("Prelude","$!!") [Comb (FuncPartCall 2) ("Ports","prim_send") [],Comb FuncCall ("Prelude","ensureNotFree") [Var 1]],Var 2])),Func ("Ports","prim_send") 2 Private (FuncType (TVar 0) (FuncType (TCons ("Ports","Port") [TVar 0]) (TCons ("Prelude","Success") []))) (External "Ports.prim_send"),Func ("Ports","doSend") 2 Public (FuncType (TVar 0) (FuncType (TCons ("Ports","Port") [TVar 0]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []]))) (Rule [1,2] (Comb FuncCall ("Prelude","doSolve") [Comb FuncCall ("Ports","send") [Var 1,Var 2]])),Func ("Ports","after") 1 Private (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Success") [])) (External "Ports.after"),Func ("Ports","ping") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Ports","Port") [TVar 0]) (TCons ("Prelude","IO") [TCons ("Prelude","Maybe") [TCons ("Prelude","Int") []]]))) (Rule [1,2] (Comb FuncCall ("Prelude","$#") [Comb FuncCall ("Prelude","$#") [Comb (FuncPartCall 2) ("Ports","prim_ping") [],Var 1],Var 2])),Func ("Ports","prim_ping") 2 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Ports","Port") [TVar 0]) (TCons ("Prelude","IO") [TCons ("Prelude","Maybe") [TCons ("Prelude","Int") []]]))) (External "Ports.prim_ping"),Func ("Ports","timeoutOnStream") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","Maybe") [TCons ("Prelude","[]") [TVar 0]]))) (Rule [1,2] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","$#") [Comb (FuncPartCall 2) ("Ports","prim_timeoutOnStream") [],Var 1],Var 2])),Func ("Ports","prim_timeoutOnStream") 2 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","Maybe") [TCons ("Prelude","[]") [TVar 0]]))) (External "Ports.prim_timeoutOnStream"),Func ("Ports","openProcessPort") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Ports","Port") [TCons ("Ports","SP_Msg") []]])) (Rule [1] (Comb FuncCall ("Prelude","$##") [Comb (FuncPartCall 1) ("Ports","prim_openProcessPort") [],Var 1])),Func ("Ports","prim_openProcessPort") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Ports","Port") [TCons ("Ports","SP_Msg") []]])) (External "Ports.prim_openProcessPort"),Func ("Ports","openNamedPort") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","[]") [TVar 0]])) (Rule [1] (Free [2,3] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Ports","openPortOnSocket") [Var 2,Var 3],Comb (FuncPartCall 1) ("Ports","openNamedPort._#lambda1") [Var 1,Var 3,Var 2]]))),Func ("Ports","openNamedPort._#lambda1") 4 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TVar 52]) (TCons ("Prelude","IO") [TCons ("Prelude","[]") [TVar 52]]))))) (Rule [1,2,3,4] (Comb FuncCall ("Prelude",">>") [Comb FuncCall ("CPNS","registerPort") [Var 1,Var 3,Var 2],Comb FuncCall ("Prelude","return") [Var 4]])),Func ("Ports","connectPortRepeat") 4 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","IO") [TVar 0]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","Maybe") [TCons ("Ports","Port") [TVar 1]]]))))) (Rule [1,2,3,4] (Let [(5,Case  Rigid (Comb FuncCall ("Prelude","==") [Var 3,Lit (Intc  0)]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","return") [Comb ConsCall ("Prelude","Nothing") []]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude",">>") [Var 2,Comb FuncCall ("Prelude",">>") [Comb FuncCall ("System","sleep") [Comb FuncCall ("Ports","connectPortRepeat.ms2s.17") [Var 1]],Comb FuncCall ("Ports","connectPortRepeat") [Var 1,Var 2,Comb FuncCall ("Ports","connectPortRepeat.decr.17") [Var 3],Var 4]]])]),(6,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","break") [Comb (FuncPartCall 1) ("Prelude","flip") [Comb (FuncPartCall 2) ("Prelude","==") [],Lit (Charc  '@')]],Var 4]),(7,Comb FuncCall ("Ports","connectPortRepeat._#selFP2#name") [Var 6]),(8,Comb FuncCall ("Ports","connectPortRepeat._#selFP3#atHost") [Var 6]),(9,Case  Rigid (Comb FuncCall ("Prelude","==") [Var 8,Comb ConsCall ("Prelude","[]") []]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","tail") [Var 8])])] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("CPNS","cpnsAlive") [Var 1,Var 9],Comb (FuncPartCall 1) ("Ports","connectPortRepeat._#lambda2") [Var 9,Var 7,Var 5]]))),Func ("Ports","connectPortRepeat.ms2s.17") 1 Private (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") [])) (Rule [1] (Let [(2,Comb FuncCall ("Prelude","div") [Var 1,Lit (Intc  1000)])] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 2,Lit (Intc  0)]) [Branch (Pattern ("Prelude","True") []) (Lit (Intc  1)),Branch (Pattern ("Prelude","False") []) (Var 2)]))),Func ("Ports","connectPortRepeat.decr.17") 1 Private (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") [])) (Rule [1] (Case  Rigid (Comb FuncCall ("Prelude","<") [Var 1,Lit (Intc  0)]) [Branch (Pattern ("Prelude","True") []) (Var 1),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","-") [Var 1,Lit (Intc  1)])])),Func ("Ports","connectPortRepeat._#selFP2#name") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("Ports","connectPortRepeat._#selFP3#atHost") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("Ports","connectPortRepeat._#lambda2") 4 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","IO") [TCons ("Prelude","Maybe") [TCons ("Ports","Port") [TVar 111]]]) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","IO") [TCons ("Prelude","Maybe") [TCons ("Ports","Port") [TVar 111]]]))))) (Rule [1,2,3,4] (Case  Rigid (Comb FuncCall ("Prelude","not") [Var 4]) [Branch (Pattern ("Prelude","True") []) (Var 3),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("CPNS","getPortInfo") [Var 2,Var 1],Comb (FuncPartCall 1) ("Ports","connectPortRepeat._#lambda2._#lambda3") [Var 1,Var 3]])])),Func ("Ports","connectPortRepeat._#lambda2._#lambda3") 3 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","IO") [TCons ("Prelude","Maybe") [TCons ("Ports","Port") [TVar 111]]]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") []]) (TCons ("Prelude","IO") [TCons ("Prelude","Maybe") [TCons ("Ports","Port") [TVar 111]]])))) (Rule [1,2,3] (Case  Flex (Var 3) [Branch (Pattern ("Prelude","(,)") [4,5]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 4,Lit (Intc  0)]) [Branch (Pattern ("Prelude","True") []) (Var 2),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Ports","connectPortAtSocket") [Var 4,Var 5,Var 1],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","return") [],Comb (ConsPartCall 1) ("Prelude","Just") []]])])])),Func ("Ports","connectPortWait") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Ports","Port") [TVar 0]])) (Rule [1] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Ports","connectPortRepeat") [Lit (Intc  1000),Comb FuncCall ("Prelude","done") [],Comb FuncCall ("Prelude","negate") [Lit (Intc  1)],Var 1],Comb (FuncPartCall 1) ("Ports","connectPortWait._#lambda4") []])),Func ("Ports","connectPortWait._#lambda4") 1 Private (FuncType (TCons ("Prelude","Maybe") [TCons ("Ports","Port") [TVar 122]]) (TCons ("Prelude","IO") [TCons ("Ports","Port") [TVar 122]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","Just") [2]) (Comb FuncCall ("Prelude","return") [Var 2])])),Func ("Ports","connectPort") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Ports","Port") [TVar 0]])) (Rule [1] (Let [(2,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","break") [Comb (FuncPartCall 1) ("Prelude","flip") [Comb (FuncPartCall 2) ("Prelude","==") [],Lit (Charc  '@')]],Var 1]),(3,Comb FuncCall ("Ports","connectPort._#selFP5#name") [Var 2]),(4,Comb FuncCall ("Ports","connectPort._#selFP6#atHost") [Var 2]),(5,Case  Rigid (Comb FuncCall ("Prelude","==") [Var 4,Comb ConsCall ("Prelude","[]") []]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","tail") [Var 4])])] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("CPNS","getPortInfo") [Var 3,Var 5],Comb (FuncPartCall 1) ("Ports","connectPort._#lambda5") [Var 5,Var 3]]))),Func ("Ports","connectPort._#selFP5#name") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("Ports","connectPort._#selFP6#atHost") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("Ports","connectPort._#lambda5") 3 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") []]) (TCons ("Prelude","IO") [TCons ("Ports","Port") [TVar 190]])))) (Rule [1,2,3] (Case  Flex (Var 3) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb FuncCall ("Prelude",">>") [Case  Rigid (Comb FuncCall ("Prelude","==") [Var 4,Lit (Intc  0)]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","error") [Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '"'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]],Comb FuncCall ("Prelude","++") [Var 2,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '@'),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc  '"'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  '!'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","done") [])],Comb FuncCall ("Ports","connectPortAtSocket") [Var 4,Var 5,Var 1]])])),Func ("Ports","choiceSPEP") 2 Public (FuncType (TCons ("Ports","Port") [TCons ("Ports","SP_Msg") []]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","Either") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TVar 0]]))) (Rule [1,2] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","$#") [Comb (FuncPartCall 2) ("Ports","prim_choiceSPEP") [],Var 1],Var 2])),Func ("Ports","prim_choiceSPEP") 2 Private (FuncType (TCons ("Ports","Port") [TCons ("Ports","SP_Msg") []]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","Either") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TVar 0]]))) (External "Ports.prim_choiceSPEP"),Func ("Ports","newObject") 3 Public (FuncType (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TVar 1]) (TCons ("Prelude","Success") []))) (FuncType (TVar 0) (FuncType (TCons ("Ports","Port") [TVar 1]) (TCons ("Prelude","Success") [])))) (Rule [1,2,3] (Free [4] (Comb FuncCall ("Prelude","&>") [Comb FuncCall ("Ports","openPort") [Var 3,Var 4],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 1,Var 2],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Prelude","ensureNotFree") [],Comb FuncCall ("Prelude","ensureSpine") [Var 4]]]]))),Func ("Ports","newNamedObject") 3 Public (FuncType (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TVar 1]) (TCons ("Prelude","Success") []))) (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []])))) (Rule [1,2,3] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Ports","openNamedPort") [Var 3],Comb (FuncPartCall 1) ("Ports","newNamedObject._#lambda6") [Var 1,Var 2]])),Func ("Ports","newNamedObject._#lambda6") 3 Private (FuncType (FuncType (TVar 174) (FuncType (TCons ("Prelude","[]") [TVar 177]) (TCons ("Prelude","Success") []))) (FuncType (TVar 174) (FuncType (TCons ("Prelude","[]") [TVar 177]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []])))) (Rule [1,2,3] (Comb FuncCall ("Prelude","doSolve") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 1,Var 2],Var 3]])),Func ("Ports","runNamedServer") 2 Public (FuncType (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","IO") [TVar 1])) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TVar 1]))) (Rule [1,2] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Ports","openNamedPort") [Var 2],Comb (FuncPartCall 1) ("Ports","runNamedServer._#lambda7") [Var 1]])),Func ("Ports","runNamedServer._#lambda7") 2 Private (FuncType (FuncType (TCons ("Prelude","[]") [TVar 188]) (TCons ("Prelude","IO") [TVar 189])) (FuncType (TCons ("Prelude","[]") [TVar 188]) (TCons ("Prelude","IO") [TVar 189]))) (Rule [1,2] (Comb FuncCall ("Prelude","apply") [Var 1,Var 2])),Func ("Ports","openPortOnSocket") 2 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","IO") [TCons ("Prelude","[]") [TVar 0]]))) (Rule [1,2] (Comb FuncCall ("Prelude","$!") [Comb FuncCall ("Prelude","$!") [Comb (FuncPartCall 2) ("Ports","prim_openPortOnSocket") [],Var 1],Var 2])),Func ("Ports","prim_openPortOnSocket") 2 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","IO") [TCons ("Prelude","[]") [TVar 0]]))) (External "Ports.prim_openPortOnSocket"),Func ("Ports","basicServerLoop") 1 Private (FuncType (TCons ("Ports","Port") [TVar 0]) (TCons ("Prelude","[]") [TVar 0])) (External "Ports.basicServerLoop"),Func ("Ports","connectPortAtSocket") 3 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Ports","Port") [TVar 0]])))) (Rule [1,2,3] (Comb FuncCall ("Prelude","$##") [Comb FuncCall ("Prelude","$#") [Comb FuncCall ("Prelude","$#") [Comb (FuncPartCall 3) ("Ports","prim_connectPortAtSocket") [],Var 1],Var 2],Var 3])),Func ("Ports","prim_connectPortAtSocket") 3 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Ports","Port") [TVar 0]])))) (External "Ports.prim_connectPortAtSocket")] []