CurryProg "CLPB"
 ["Prelude"]
 [CType ("CLPB","Boolean") Public [] [CCons ("CLPB","B") 1 Private [CTCons ("Prelude","Int") []]]]
 [CFunc ("CLPB","true") 0 Public (CTCons ("CLPB","Boolean") []) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("CLPB","B")) (CLit (CIntc 1)))] []]),
  CFunc ("CLPB","false") 0 Public (CTCons ("CLPB","Boolean") []) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("CLPB","B")) (CLit (CIntc 0)))] []]),
  CFunc ("CLPB","neg") 1 Public (CFuncType (CTCons ("CLPB","Boolean") []) (CTCons ("CLPB","Boolean") [])) (CRules CFlex [CRule [CPComb ("CLPB","B") [CPVar (0,"x")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("CLPB","B")) (CApply (CApply (CSymbol ("Prelude","$!")) (CSymbol ("CLPB","prim_neg"))) (CVar (0,"x"))))] []]),
  CFunc ("CLPB","prim_neg") 1 Private (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("Prelude","Int") [])) (CExternal "prim_neg"),
  CFunc ("CLPB",".&&") 2 Public (CFuncType (CTCons ("CLPB","Boolean") []) (CFuncType (CTCons ("CLPB","Boolean") []) (CTCons ("CLPB","Boolean") []))) (CRules CFlex [CRule [CPComb ("CLPB","B") [CPVar (0,"x")],CPComb ("CLPB","B") [CPVar (1,"y")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("CLPB","B")) (CApply (CApply (CSymbol ("Prelude","$!")) (CApply (CApply (CSymbol ("Prelude","$!")) (CSymbol ("CLPB","prim_and"))) (CVar (1,"y")))) (CVar (0,"x"))))] []]),
  CFunc ("CLPB","prim_and") 2 Private (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("Prelude","Int") []))) (CExternal "prim_and"),
  CFunc ("CLPB",".||") 2 Public (CFuncType (CTCons ("CLPB","Boolean") []) (CFuncType (CTCons ("CLPB","Boolean") []) (CTCons ("CLPB","Boolean") []))) (CRules CFlex [CRule [CPComb ("CLPB","B") [CPVar (0,"x")],CPComb ("CLPB","B") [CPVar (1,"y")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("CLPB","B")) (CApply (CApply (CSymbol ("Prelude","$!")) (CApply (CApply (CSymbol ("Prelude","$!")) (CSymbol ("CLPB","prim_or"))) (CVar (1,"y")))) (CVar (0,"x"))))] []]),
  CFunc ("CLPB","prim_or") 2 Private (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("Prelude","Int") []))) (CExternal "prim_or"),
  CFunc ("CLPB","./=") 2 Public (CFuncType (CTCons ("CLPB","Boolean") []) (CFuncType (CTCons ("CLPB","Boolean") []) (CTCons ("CLPB","Boolean") []))) (CRules CFlex [CRule [CPComb ("CLPB","B") [CPVar (0,"x")],CPComb ("CLPB","B") [CPVar (1,"y")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("CLPB","B")) (CApply (CApply (CSymbol ("Prelude","$!")) (CApply (CApply (CSymbol ("Prelude","$!")) (CSymbol ("CLPB","prim_xor"))) (CVar (1,"y")))) (CVar (0,"x"))))] []]),
  CFunc ("CLPB","prim_xor") 2 Private (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("Prelude","Int") []))) (CExternal "prim_xor"),
  CFunc ("CLPB",".==") 2 Public (CFuncType (CTCons ("CLPB","Boolean") []) (CFuncType (CTCons ("CLPB","Boolean") []) (CTCons ("CLPB","Boolean") []))) (CRules CFlex [CRule [CPVar (0,"x"),CPVar (1,"y")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("CLPB","./=")) (CApply (CSymbol ("CLPB","neg")) (CVar (0,"x")))) (CVar (1,"y")))] []]),
  CFunc ("CLPB",".<=") 2 Public (CFuncType (CTCons ("CLPB","Boolean") []) (CFuncType (CTCons ("CLPB","Boolean") []) (CTCons ("CLPB","Boolean") []))) (CRules CFlex [CRule [CPVar (0,"x"),CPVar (1,"y")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("CLPB",".||")) (CApply (CSymbol ("CLPB","neg")) (CVar (0,"x")))) (CVar (1,"y")))] []]),
  CFunc ("CLPB",".>=") 2 Public (CFuncType (CTCons ("CLPB","Boolean") []) (CFuncType (CTCons ("CLPB","Boolean") []) (CTCons ("CLPB","Boolean") []))) (CRules CFlex [CRule [CPVar (0,"x"),CPVar (1,"y")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("CLPB",".<=")) (CVar (1,"y"))) (CVar (0,"x")))] []]),
  CFunc ("CLPB",".<") 2 Public (CFuncType (CTCons ("CLPB","Boolean") []) (CFuncType (CTCons ("CLPB","Boolean") []) (CTCons ("CLPB","Boolean") []))) (CRules CFlex [CRule [CPVar (0,"x"),CPVar (1,"y")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("CLPB",".&&")) (CApply (CSymbol ("CLPB","neg")) (CVar (0,"x")))) (CVar (1,"y")))] []]),
  CFunc ("CLPB",".>") 2 Public (CFuncType (CTCons ("CLPB","Boolean") []) (CFuncType (CTCons ("CLPB","Boolean") []) (CTCons ("CLPB","Boolean") []))) (CRules CFlex [CRule [CPVar (0,"x"),CPVar (1,"y")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("CLPB",".<")) (CVar (1,"y"))) (CVar (0,"x")))] []]),
  CFunc ("CLPB","count") 2 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("CLPB","Boolean") []]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Int") []]) (CTCons ("CLPB","Boolean") []))) (CRules CFlex [CRule [CPVar (0,"bs"),CPVar (1,"ns")] [(CSymbol ("Prelude","success"),CApply (CSymbol ("CLPB","B")) (CApply (CApply (CSymbol ("Prelude","$!!")) (CApply (CApply (CSymbol ("Prelude","$!!")) (CSymbol ("CLPB","card"))) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("Prelude","ensureNotFree"))) (CApply (CSymbol ("Prelude","ensureSpine")) (CVar (1,"ns")))))) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("CLPB","int"))) (CApply (CSymbol ("Prelude","ensureSpine")) (CVar (0,"bs"))))))] []]),
  CFunc ("CLPB","card") 2 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Int") []]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Int") []]) (CTCons ("Prelude","Int") []))) (CExternal "card"),
  CFunc ("CLPB","exists") 2 Public (CFuncType (CTCons ("CLPB","Boolean") []) (CFuncType (CTCons ("CLPB","Boolean") []) (CTCons ("CLPB","Boolean") []))) (CRules CFlex [CRule [CPComb ("CLPB","B") [CPVar (0,"v")],CPComb ("CLPB","B") [CPVar (1,"b")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("CLPB","B")) (CApply (CApply (CSymbol ("Prelude","$!!")) (CApply (CApply (CSymbol ("Prelude","$!!")) (CSymbol ("CLPB","prim_exists"))) (CVar (0,"v")))) (CVar (1,"b"))))] []]),
  CFunc ("CLPB","prim_exists") 2 Private (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("Prelude","Int") []))) (CExternal "prim_exists"),
  CFunc ("CLPB","satisfied") 1 Public (CFuncType (CTCons ("CLPB","Boolean") []) (CTCons ("Prelude","Success") [])) (CRules CFlex [CRule [CPComb ("CLPB","B") [CPVar (0,"b")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","$!!")) (CSymbol ("CLPB","sat"))) (CVar (0,"b")))] []]),
  CFunc ("CLPB","sat") 1 Private (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("Prelude","Success") [])) (CExternal "sat"),
  CFunc ("CLPB","check") 1 Public (CFuncType (CTCons ("CLPB","Boolean") []) (CTCons ("Prelude","Bool") [])) (CRules CFlex [CRule [CPComb ("CLPB","B") [CPVar (0,"b")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","==")) (CApply (CApply (CSymbol ("Prelude","$!!")) (CSymbol ("CLPB","prim_check"))) (CVar (0,"b")))) (CLit (CIntc 1)))] []]),
  CFunc ("CLPB","prim_check") 1 Private (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("Prelude","Int") [])) (CExternal "prim_check"),
  CFunc ("CLPB","bound") 1 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("CLPB","Boolean") []]) (CTCons ("Prelude","Success") [])) (CRules CFlex [CRule [CPVar (0,"bs")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","$!!")) (CSymbol ("CLPB","labeling"))) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("CLPB","int"))) (CApply (CSymbol ("Prelude","ensureSpine")) (CVar (0,"bs")))))] []]),
  CFunc ("CLPB","labeling") 1 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Int") []]) (CTCons ("Prelude","Success") [])) (CExternal "labeling"),
  CFunc ("CLPB","simplify") 1 Public (CFuncType (CTCons ("CLPB","Boolean") []) (CTCons ("CLPB","Boolean") [])) (CRules CFlex [CRule [CPVar (0,"b")] [(CApply (CSymbol ("CLPB","satisfied")) (CApply (CApply (CSymbol ("CLPB",".==")) (CVar (1,"a"))) (CVar (0,"b"))),CVar (1,"a"))] [CLocalVar (1,"a")]]),
  CFunc ("CLPB","evaluate") 1 Public (CFuncType (CTCons ("CLPB","Boolean") []) (CTCons ("Prelude","Bool") [])) (CRules CFlex [CRule [CPVar (0,"x")] [(CApply (CSymbol ("CLPB","bound")) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (1,"y"))) (CSymbol ("Prelude","[]"))),CApply (CApply (CSymbol ("Prelude","==")) (CApply (CSymbol ("CLPB","int")) (CVar (1,"y")))) (CLit (CIntc 1)))] [CLocalPat (CPVar (1,"y")) (CApply (CSymbol ("CLPB","simplify")) (CVar (0,"x"))) []]]),
  CFunc ("CLPB","int") 1 Private (CFuncType (CTCons ("CLPB","Boolean") []) (CTCons ("Prelude","Int") [])) (CRules CFlex [CRule [CPComb ("CLPB","B") [CPVar (0,"x")]] [(CSymbol ("Prelude","success"),CVar (0,"x"))] []])]
 [COp ("CLPB",".&&") CInfixrOp 3,COp ("CLPB",".||") CInfixrOp 2,COp ("CLPB",".==") CInfixOp 1,COp ("CLPB","./=") CInfixOp 1]
