CurryProg "Database"
 ["Prelude","Dynamic","Global"]
 [CType ("Database","Query") Public [(0,"a")] [CCons ("Database","QueryDB") 1 Private [CTCons ("Prelude","IO") [CTVar (0,"a")]]],
  CType ("Database","TError") Public [] [CCons ("Database","TError") 2 Public [CTCons ("Database","TErrorKind") [],CTCons ("Prelude","String") []]],
  CType ("Database","TErrorKind") Public [] [CCons ("Database","KeyNotExistsError") 0 Public [],CCons ("Database","NoRelationshipError") 0 Public [],CCons ("Database","DuplicateKeyError") 0 Public [],CCons ("Database","KeyRequiredError") 0 Public [],CCons ("Database","UniqueError") 0 Public [],CCons ("Database","MinError") 0 Public [],CCons ("Database","MaxError") 0 Public [],CCons ("Database","UserDefinedError") 0 Public [],CCons ("Database","ExecutionError") 0 Public []],
  CType ("Database","Transaction") Public [(0,"a")] [CCons ("Database","TransDB") 1 Private [CTCons ("Prelude","IO") [CTCons ("Database","TransResult") [CTVar (0,"a")]]]],
  CType ("Database","TransResult") Private [(0,"a")] [CCons ("Database","OK") 1 Private [CTVar (0,"a")],CCons ("Database","Error") 1 Private [CTCons ("Database","TError") []]]]
 [CFunc ("Database","queryAll") 1 Public (CFuncType (CFuncType (CTVar (0,"a")) (CTCons ("Dynamic","Dynamic") [])) (CTCons ("Database","Query") [CTCons ("Prelude","[]") [CTVar (0,"a")]])) (CRules CFlex [CRule [CPVar (0,"dynq")] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Database","QueryDB")) (CApply (CSymbol ("Dynamic","getDynamicSolutions")) (CVar (0,"dynq"))))] []]),
  CFunc ("Database","queryOne") 1 Public (CFuncType (CFuncType (CTVar (0,"a")) (CTCons ("Dynamic","Dynamic") [])) (CTCons ("Database","Query") [CTCons ("Prelude","Maybe") [CTVar (0,"a")]])) (CRules CFlex [CRule [CPVar (0,"dynq")] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Database","QueryDB")) (CApply (CSymbol ("Dynamic","getDynamicSolution")) (CVar (0,"dynq"))))] []]),
  CFunc ("Database","queryOneWithDefault") 2 Public (CFuncType (CTVar (0,"a")) (CFuncType (CFuncType (CTVar (0,"a")) (CTCons ("Dynamic","Dynamic") [])) (CTCons ("Database","Query") [CTVar (0,"a")]))) (CRules CFlex [CRule [CPVar (0,"d"),CPVar (1,"dynq")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Database","transformQ")) (CApply (CApply (CSymbol ("Prelude","maybe")) (CVar (0,"d"))) (CSymbol ("Prelude","id")))) (CApply (CSymbol ("Database","queryOne")) (CVar (1,"dynq"))))] []]),
  CFunc ("Database","queryJustOne") 0 Public (CFuncType (CFuncType (CTVar (0,"a")) (CTCons ("Dynamic","Dynamic") [])) (CTCons ("Database","Query") [CTVar (0,"a")])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Database","queryOneWithDefault")) (CSymbol ("Prelude","failed")))] []]),
  CFunc ("Database","dynamicExists") 1 Public (CFuncType (CTCons ("Dynamic","Dynamic") []) (CTCons ("Database","Query") [CTCons ("Prelude","Bool") []])) (CRules CFlex [CRule [CPVar (0,"dyn")] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Database","QueryDB")) (CApply (CSymbol ("Dynamic","isKnown")) (CVar (0,"dyn"))))] []]),
  CFunc ("Database","transformQ") 2 Public (CFuncType (CFuncType (CTVar (0,"a")) (CTVar (1,"b"))) (CFuncType (CTCons ("Database","Query") [CTVar (0,"a")]) (CTCons ("Database","Query") [CTVar (1,"b")]))) (CRules CFlex [CRule [CPVar (0,"f"),CPComb ("Database","QueryDB") [CPVar (1,"a")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Database","QueryDB")) (CApply (CApply (CSymbol ("Prelude",">>=")) (CVar (1,"a"))) (CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Prelude","return"))) (CVar (0,"f")))))] []]),
  CFunc ("Database","runQ") 1 Public (CFuncType (CTCons ("Database","Query") [CTVar (0,"a")]) (CTCons ("Prelude","IO") [CTVar (0,"a")])) (CRules CFlex [CRule [CPComb ("Database","QueryDB") [CPVar (0,"q")]] [(CSymbol ("Prelude","success"),CVar (0,"q"))] []]),
  CFunc ("Database","showTError") 1 Public (CFuncType (CTCons ("Database","TError") []) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CRules CFlex [CRule [CPComb ("Database","TError") [CPVar (0,"k"),CPVar (1,"s")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'T'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]"))))))))))))))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("Prelude","show")) (CVar (0,"k")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ':'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]"))))) (CVar (1,"s")))))] []]),
  CFunc ("Database","addDB") 1 Public (CFuncType (CTCons ("Dynamic","Dynamic") []) (CTCons ("Database","Transaction") [CTCons ("Prelude","()") []])) (CRules CFlex [CRule [CPVar (0,"dyn")] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Database","TransDB")) (CApply (CApply (CSymbol ("Prelude",">>")) (CApply (CSymbol ("Dynamic","assert")) (CVar (0,"dyn")))) (CApply (CSymbol ("Prelude","return")) (CApply (CSymbol ("Database","OK")) (CSymbol ("Prelude","()"))))))] []]),
  CFunc ("Database","deleteDB") 1 Public (CFuncType (CTCons ("Dynamic","Dynamic") []) (CTCons ("Database","Transaction") [CTCons ("Prelude","()") []])) (CRules CFlex [CRule [CPVar (0,"dyn")] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Database","TransDB")) (CApply (CApply (CSymbol ("Prelude",">>")) (CApply (CSymbol ("Dynamic","retract")) (CVar (0,"dyn")))) (CApply (CSymbol ("Prelude","return")) (CApply (CSymbol ("Database","OK")) (CSymbol ("Prelude","()"))))))] []]),
  CFunc ("Database","getDB") 1 Public (CFuncType (CTCons ("Database","Query") [CTVar (0,"a")]) (CTCons ("Database","Transaction") [CTVar (0,"a")])) (CRules CFlex [CRule [CPComb ("Database","QueryDB") [CPVar (0,"q")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Database","TransDB")) (CApply (CApply (CSymbol ("Prelude",">>=")) (CVar (0,"q"))) (CLambda [CPVar (1,"qresult")] (CApply (CSymbol ("Prelude","return")) (CApply (CSymbol ("Database","OK")) (CVar (1,"qresult")))))))] []]),
  CFunc ("Database","returnT") 1 Public (CFuncType (CTVar (0,"a")) (CTCons ("Database","Transaction") [CTVar (0,"a")])) (CRules CFlex [CRule [CPVar (0,"x")] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Database","TransDB")) (CApply (CSymbol ("Prelude","return")) (CApply (CSymbol ("Database","OK")) (CVar (0,"x")))))] []]),
  CFunc ("Database","doneT") 0 Public (CTCons ("Database","Transaction") [CTCons ("Prelude","()") []]) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Database","returnT")) (CSymbol ("Prelude","()")))] []]),
  CFunc ("Database","errorT") 1 Public (CFuncType (CTCons ("Database","TError") []) (CTCons ("Database","Transaction") [CTVar (0,"a")])) (CRules CFlex [CRule [CPVar (0,"e")] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Database","TransDB")) (CApply (CSymbol ("Prelude","return")) (CApply (CSymbol ("Database","Error")) (CVar (0,"e")))))] []]),
  CFunc ("Database","failT") 1 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Database","Transaction") [CTVar (0,"a")])) (CRules CFlex [CRule [CPVar (0,"s")] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Database","errorT")) (CApply (CApply (CSymbol ("Database","TError")) (CSymbol ("Database","UserDefinedError"))) (CVar (0,"s"))))] []]),
  CFunc ("Database","|>>=") 2 Public (CFuncType (CTCons ("Database","Transaction") [CTVar (0,"a")]) (CFuncType (CFuncType (CTVar (0,"a")) (CTCons ("Database","Transaction") [CTVar (1,"b")])) (CTCons ("Database","Transaction") [CTVar (1,"b")]))) (CRules CFlex [CRule [CPComb ("Database","TransDB") [CPVar (0,"t1")],CPVar (1,"ft")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","$")) (CSymbol ("Database","TransDB"))) (CDoExpr [CSPat (CPVar (2,"r1")) (CVar (0,"t1")),CSExpr (CCase (CVar (2,"r1")) [CBranch (CPComb ("Database","Error") [CPVar (3,"e")]) (CApply (CSymbol ("Prelude","return")) (CApply (CSymbol ("Database","Error")) (CVar (3,"e")))),CBranch (CPComb ("Database","OK") [CPVar (4,"t1value")]) (CLetDecl [CLocalPat (CPComb ("Database","TransDB") [CPVar (5,"t2")]) (CApply (CVar (1,"ft")) (CVar (4,"t1value"))) []] (CVar (5,"t2")))])]))] []]),
  CFunc ("Database","|>>") 2 Public (CFuncType (CTCons ("Database","Transaction") [CTVar (0,"a")]) (CFuncType (CTCons ("Database","Transaction") [CTVar (1,"b")]) (CTCons ("Database","Transaction") [CTVar (1,"b")]))) (CRules CFlex [CRule [CPVar (0,"t1"),CPVar (1,"t2")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Database","|>>=")) (CVar (0,"t1"))) (CLambda [CPVar (2,"_")] (CVar (1,"t2"))))] []]),
  CFunc ("Database","sequenceT") 1 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Database","Transaction") [CTVar (0,"a")]]) (CTCons ("Database","Transaction") [CTCons ("Prelude","[]") [CTVar (0,"a")]])) (CRules CFlex [CRule [CPComb ("Prelude","[]") []] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Database","returnT")) (CSymbol ("Prelude","[]")))] [],CRule [CPComb ("Prelude",":") [CPVar (0,"t"),CPVar (1,"ts")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Database","|>>=")) (CVar (0,"t"))) (CLambda [CPVar (2,"x")] (CApply (CApply (CSymbol ("Database","|>>=")) (CApply (CSymbol ("Database","sequenceT")) (CVar (1,"ts")))) (CLambda [CPVar (3,"xs")] (CApply (CSymbol ("Database","returnT")) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (2,"x"))) (CVar (3,"xs"))))))))] []]),
  CFunc ("Database","sequenceT_") 0 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Database","Transaction") [CTVar (0,"a")]]) (CTCons ("Database","Transaction") [CTCons ("Prelude","()") []])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","foldr")) (CSymbol ("Database","|>>"))) (CSymbol ("Database","doneT")))] []]),
  CFunc ("Database","mapT") 1 Public (CFuncType (CFuncType (CTVar (0,"a")) (CTCons ("Database","Transaction") [CTVar (1,"b")])) (CFuncType (CTCons ("Prelude","[]") [CTVar (0,"a")]) (CTCons ("Database","Transaction") [CTCons ("Prelude","[]") [CTVar (1,"b")]]))) (CRules CFlex [CRule [CPVar (0,"f")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Database","sequenceT"))) (CApply (CSymbol ("Prelude","map")) (CVar (0,"f"))))] []]),
  CFunc ("Database","mapT_") 1 Public (CFuncType (CFuncType (CTVar (0,"a")) (CTCons ("Database","Transaction") [CTVar (1,"b")])) (CFuncType (CTCons ("Prelude","[]") [CTVar (0,"a")]) (CTCons ("Database","Transaction") [CTCons ("Prelude","()") []]))) (CRules CFlex [CRule [CPVar (0,"f")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Database","sequenceT_"))) (CApply (CSymbol ("Prelude","map")) (CVar (0,"f"))))] []]),
  CFunc ("Database","runT") 1 Public (CFuncType (CTCons ("Database","Transaction") [CTVar (0,"a")]) (CTCons ("Prelude","IO") [CTCons ("Prelude","Either") [CTVar (0,"a"),CTCons ("Database","TError") []]])) (CRules CFlex [CRule [CPVar (0,"t")] [(CSymbol ("Prelude","success"),CDoExpr [CSExpr (CApply (CApply (CSymbol ("Global","writeGlobal")) (CSymbol ("Database","currentTransError"))) (CSymbol ("Database","execError"))),CSPat (CPVar (5,"etr")) (CApply (CSymbol ("Dynamic","transactionWithErrorCatch")) (CLetDecl [CLocalPat (CPComb ("Database","TransDB") [CPVar (1,"trans")]) (CVar (0,"t")) []] (CApply (CApply (CSymbol ("Prelude",">>=")) (CVar (1,"trans"))) (CLambda [CPVar (2,"tresult")] (CCase (CVar (2,"tresult")) [CBranch (CPComb ("Database","OK") [CPVar (3,"_")]) (CApply (CSymbol ("Prelude","return")) (CVar (2,"tresult"))),CBranch (CPComb ("Database","Error") [CPVar (4,"e")]) (CApply (CApply (CSymbol ("Prelude",">>")) (CApply (CApply (CSymbol ("Global","writeGlobal")) (CSymbol ("Database","currentTransError"))) (CVar (4,"e")))) (CSymbol ("Prelude","failed")))]))))),CSExpr (CApply (CApply (CApply (CSymbol ("Prelude","either")) (CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Prelude","return"))) (CSymbol ("Database","transformResult")))) (CLambda [CPVar (6,"re")] (CApply (CApply (CSymbol ("Prelude",">>=")) (CApply (CSymbol ("Global","readGlobal")) (CSymbol ("Database","currentTransError")))) (CLambda [CPVar (7,"e")] (CApply (CSymbol ("Prelude","return")) (CApply (CSymbol ("Prelude","Right")) (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (7,"e"))) (CSymbol ("Database","execError")))) (CApply (CApply (CSymbol ("Database","TError")) (CSymbol ("Database","ExecutionError"))) (CApply (CSymbol ("Prelude","showError")) (CVar (6,"re"))))) (CVar (7,"e"))))))))) (CVar (5,"etr")))])] [CLocalFunc (CFunc ("Database","transformResult") 1 Private (CFuncType (CTCons ("Database","TransResult") [CTVar (0,"a")]) (CTCons ("Prelude","Either") [CTVar (0,"a"),CTCons ("Database","TError") []])) (CRules CFlex [CRule [CPComb ("Database","OK") [CPVar (1,"x")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Prelude","Left")) (CVar (1,"x")))] [],CRule [CPComb ("Database","Error") [CPVar (2,"e")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Prelude","Right")) (CVar (2,"e")))] []]))]]),
  CFunc ("Database","runJustT") 1 Public (CFuncType (CTCons ("Database","Transaction") [CTVar (0,"a")]) (CTCons ("Prelude","IO") [CTVar (0,"a")])) (CRules CFlex [CRule [CPVar (0,"t")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",">>=")) (CApply (CSymbol ("Database","runT")) (CVar (0,"t")))) (CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Prelude","return"))) (CApply (CApply (CSymbol ("Prelude","either")) (CSymbol ("Prelude","id"))) (CLambda [CPVar (1,"e")] (CApply (CSymbol ("Prelude","error")) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'T'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'f'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ':'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]"))))))))))))))))))))))) (CApply (CSymbol ("Database","showTError")) (CVar (1,"e")))))))))] []]),
  CFunc ("Database","runTNA") 1 Public (CFuncType (CTCons ("Database","Transaction") [CTVar (0,"a")]) (CTCons ("Prelude","IO") [CTCons ("Prelude","Either") [CTVar (0,"a"),CTCons ("Database","TError") []]])) (CRules CFlex [CRule [CPVar (0,"t")] [(CSymbol ("Prelude","success"),CDoExpr [CSExpr (CApply (CApply (CSymbol ("Global","writeGlobal")) (CSymbol ("Database","currentTransError"))) (CSymbol ("Database","execError"))),CSPat (CPVar (5,"etr")) (CApply (CSymbol ("Database","safeExecIO")) (CLetDecl [CLocalPat (CPComb ("Database","TransDB") [CPVar (1,"trans")]) (CVar (0,"t")) []] (CApply (CApply (CSymbol ("Prelude",">>=")) (CVar (1,"trans"))) (CLambda [CPVar (2,"tresult")] (CCase (CVar (2,"tresult")) [CBranch (CPComb ("Database","OK") [CPVar (3,"_")]) (CApply (CSymbol ("Prelude","return")) (CVar (2,"tresult"))),CBranch (CPComb ("Database","Error") [CPVar (4,"e")]) (CApply (CApply (CSymbol ("Prelude",">>")) (CApply (CApply (CSymbol ("Global","writeGlobal")) (CSymbol ("Database","currentTransError"))) (CVar (4,"e")))) (CSymbol ("Prelude","failed")))]))))),CSExpr (CApply (CApply (CApply (CSymbol ("Prelude","either")) (CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Prelude","return"))) (CSymbol ("Database","transformResult")))) (CLambda [CPVar (6,"re")] (CApply (CApply (CSymbol ("Prelude",">>=")) (CApply (CSymbol ("Global","readGlobal")) (CSymbol ("Database","currentTransError")))) (CLambda [CPVar (7,"e")] (CApply (CSymbol ("Prelude","return")) (CApply (CSymbol ("Prelude","Right")) (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (7,"e"))) (CSymbol ("Database","execError")))) (CApply (CApply (CSymbol ("Database","TError")) (CSymbol ("Database","ExecutionError"))) (CApply (CSymbol ("Prelude","showError")) (CVar (6,"re"))))) (CVar (7,"e"))))))))) (CVar (5,"etr")))])] [CLocalFunc (CFunc ("Database","transformResult") 1 Private (CFuncType (CTCons ("Database","TransResult") [CTVar (0,"a")]) (CTCons ("Prelude","Either") [CTVar (0,"a"),CTCons ("Database","TError") []])) (CRules CFlex [CRule [CPComb ("Database","OK") [CPVar (1,"x")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Prelude","Left")) (CVar (1,"x")))] [],CRule [CPComb ("Database","Error") [CPVar (2,"e")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Prelude","Right")) (CVar (2,"e")))] []])),CLocalFunc (CFunc ("Database","safeExecIO") 1 Private (CFuncType (CTCons ("Prelude","IO") [CTVar (0,"a")]) (CTCons ("Prelude","IO") [CTCons ("Prelude","Either") [CTVar (0,"a"),CTCons ("Prelude","IOError") []]])) (CRules CFlex [CRule [CPVar (1,"action")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","catch")) (CApply (CApply (CSymbol ("Prelude",">>=")) (CVar (1,"action"))) (CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Prelude","return"))) (CSymbol ("Prelude","Left"))))) (CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Prelude","return"))) (CSymbol ("Prelude","Right"))))] []]))]]),
  CFunc ("Database","currentTransError") 0 Private (CTCons ("Global","Global") [CTCons ("Database","TError") []]) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Global","global")) (CSymbol ("Database","execError"))) (CSymbol ("Global","Temporary")))] []]),
  CFunc ("Database","execError") 0 Private (CTCons ("Database","TError") []) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Database","TError")) (CSymbol ("Database","ExecutionError"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '-'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'g'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'x'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CSymbol ("Prelude","[]"))))))))))))))))))))))))))))))))))))))))))))))] []])]
 [COp ("Database","|>>=") CInfixlOp 1,COp ("Database","|>>") CInfixlOp 1]
