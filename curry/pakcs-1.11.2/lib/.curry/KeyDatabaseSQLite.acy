CurryProg "KeyDatabaseSQLite"
 ["Prelude","Global","IO","IOExts","List","ReadNumeric","ReadShowTerm","Maybe"]
 [CType ("KeyDatabaseSQLite","Query") Public [(0,"a")] [CCons ("KeyDatabaseSQLite","Query") 1 Public [CTCons ("Prelude","IO") [CTVar (0,"a")]]],
  CType ("KeyDatabaseSQLite","Transaction") Public [(0,"a")] [CCons ("KeyDatabaseSQLite","Trans") 1 Private [CTCons ("Prelude","IO") [CTCons ("KeyDatabaseSQLite","TransResult") [CTVar (0,"a")]]]],
  CType ("KeyDatabaseSQLite","TransResult") Private [(0,"a")] [CCons ("KeyDatabaseSQLite","OK") 1 Private [CTVar (0,"a")],CCons ("KeyDatabaseSQLite","Error") 1 Private [CTCons ("KeyDatabaseSQLite","TError") []]],
  CTypeSyn ("KeyDatabaseSQLite","DBFile") Private [] (CTCons ("Prelude","String") []),
  CTypeSyn ("KeyDatabaseSQLite","TableName") Private [] (CTCons ("Prelude","String") []),
  CTypeSyn ("KeyDatabaseSQLite","ColName") Private [] (CTCons ("Prelude","String") []),
  CType ("KeyDatabaseSQLite","Dynamic") Public [] [CCons ("KeyDatabaseSQLite","DBInfo") 3 Private [CTCons ("KeyDatabaseSQLite","DBFile") [],CTCons ("KeyDatabaseSQLite","TableName") [],CTCons ("Prelude","[]") [CTCons ("KeyDatabaseSQLite","ColName") []]]],
  CTypeSyn ("KeyDatabaseSQLite","Key") Private [] (CTCons ("Prelude","Int") []),
  CTypeSyn ("KeyDatabaseSQLite","KeyPred") Private [(0,"a")] (CFuncType (CTCons ("KeyDatabaseSQLite","Key") []) (CFuncType (CTVar (0,"a")) (CTCons ("KeyDatabaseSQLite","Dynamic") []))),
  CType ("KeyDatabaseSQLite","ColVal") Public [] [CCons ("KeyDatabaseSQLite","ColVal") 2 Public [CTCons ("Prelude","Int") [],CTCons ("Prelude","String") []]],
  CTypeSyn ("KeyDatabaseSQLite","Row") Private [] (CTCons ("Prelude","String") []),
  CTypeSyn ("KeyDatabaseSQLite","Stack") Private [] (CTCons ("Prelude","String") []),
  CType ("KeyDatabaseSQLite","TError") Public [] [CCons ("KeyDatabaseSQLite","TError") 2 Public [CTCons ("KeyDatabaseSQLite","TErrorKind") [],CTCons ("Prelude","String") []]],
  CType ("KeyDatabaseSQLite","TErrorKind") Public [] [CCons ("KeyDatabaseSQLite","KeyNotExistsError") 0 Public [],CCons ("KeyDatabaseSQLite","NoRelationshipError") 0 Public [],CCons ("KeyDatabaseSQLite","DuplicateKeyError") 0 Public [],CCons ("KeyDatabaseSQLite","KeyRequiredError") 0 Public [],CCons ("KeyDatabaseSQLite","UniqueError") 0 Public [],CCons ("KeyDatabaseSQLite","MinError") 0 Public [],CCons ("KeyDatabaseSQLite","MaxError") 0 Public [],CCons ("KeyDatabaseSQLite","UserDefinedError") 0 Public [],CCons ("KeyDatabaseSQLite","ExecutionError") 0 Public []]]
 [CFunc ("KeyDatabaseSQLite","path'to'sqlite3") 0 Private (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'q'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '3'))) (CSymbol ("Prelude","[]")))))))))] []]),
  CFunc ("KeyDatabaseSQLite","runQ") 1 Public (CFuncType (CTCons ("KeyDatabaseSQLite","Query") [CTVar (0,"a")]) (CTCons ("Prelude","IO") [CTVar (0,"a")])) (CRules CFlex [CRule [CPComb ("KeyDatabaseSQLite","Query") [CPVar (0,"a")]] [(CSymbol ("Prelude","success"),CVar (0,"a"))] []]),
  CFunc ("KeyDatabaseSQLite","transformQ") 2 Public (CFuncType (CFuncType (CTVar (0,"a")) (CTVar (1,"b"))) (CFuncType (CTCons ("KeyDatabaseSQLite","Query") [CTVar (0,"a")]) (CTCons ("KeyDatabaseSQLite","Query") [CTVar (1,"b")]))) (CRules CFlex [CRule [CPVar (0,"f"),CPVar (1,"query")] [(CSymbol ("Prelude","success"),CApply (CSymbol ("KeyDatabaseSQLite","Query")) (CApply (CApply (CSymbol ("Prelude",">>=")) (CApply (CSymbol ("KeyDatabaseSQLite","runQ")) (CVar (1,"query")))) (CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Prelude","return"))) (CVar (0,"f")))))] []]),
  CFunc ("KeyDatabaseSQLite","unTrans") 1 Private (CFuncType (CTCons ("KeyDatabaseSQLite","Transaction") [CTVar (0,"a")]) (CTCons ("Prelude","IO") [CTCons ("KeyDatabaseSQLite","TransResult") [CTVar (0,"a")]])) (CRules CFlex [CRule [CPComb ("KeyDatabaseSQLite","Trans") [CPVar (0,"action")]] [(CSymbol ("Prelude","success"),CVar (0,"action"))] []]),
  CFunc ("KeyDatabaseSQLite","runT") 1 Public (CFuncType (CTCons ("KeyDatabaseSQLite","Transaction") [CTVar (0,"a")]) (CTCons ("Prelude","IO") [CTCons ("Prelude","Either") [CTVar (0,"a"),CTCons ("KeyDatabaseSQLite","TError") []]])) (CRules CFlex [CRule [CPVar (0,"trans")] [(CSymbol ("Prelude","success"),CDoExpr [CSExpr (CSymbol ("KeyDatabaseSQLite","beginTransaction")),CSPat (CPVar (1,"result")) (CApply (CApply (CSymbol ("Prelude","$")) (CSymbol ("KeyDatabaseSQLite","catchTrans"))) (CApply (CSymbol ("KeyDatabaseSQLite","unTrans")) (CVar (0,"trans")))),CSExpr (CCase (CVar (1,"result")) [CBranch (CPComb ("KeyDatabaseSQLite","Error") [CPVar (2,"err")]) (CDoExpr [CSExpr (CSymbol ("KeyDatabaseSQLite","rollbackTransaction")),CSExpr (CApply (CSymbol ("Prelude","return")) (CApply (CSymbol ("Prelude","Right")) (CVar (2,"err"))))]),CBranch (CPComb ("KeyDatabaseSQLite","OK") [CPVar (3,"res")]) (CDoExpr [CSExpr (CSymbol ("KeyDatabaseSQLite","commitTransaction")),CSExpr (CApply (CSymbol ("Prelude","return")) (CApply (CSymbol ("Prelude","Left")) (CVar (3,"res"))))])])])] []]),
  CFunc ("KeyDatabaseSQLite","catchTrans") 1 Private (CFuncType (CTCons ("Prelude","IO") [CTCons ("KeyDatabaseSQLite","TransResult") [CTVar (0,"a")]]) (CTCons ("Prelude","IO") [CTCons ("KeyDatabaseSQLite","TransResult") [CTVar (0,"a")]])) (CRules CFlex [CRule [CPVar (0,"action")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","catch")) (CVar (0,"action"))) (CLambda [CPComb ("Prelude","IOError") [CPVar (1,"msg")]] (CDoExpr [CSPat (CPVar (2,"err")) (CApply (CSymbol ("Global","readGlobal")) (CSymbol ("KeyDatabaseSQLite","lastQueryError"))),CSExpr (CApply (CApply (CSymbol ("Global","writeGlobal")) (CSymbol ("KeyDatabaseSQLite","lastQueryError"))) (CSymbol ("Prelude","Nothing"))),CSExpr (CApply (CApply (CSymbol ("Prelude","$")) (CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Prelude","return"))) (CSymbol ("KeyDatabaseSQLite","Error")))) (CApply (CApply (CApply (CSymbol ("Prelude","maybe")) (CApply (CApply (CSymbol ("KeyDatabaseSQLite","TError")) (CSymbol ("KeyDatabaseSQLite","ExecutionError"))) (CVar (1,"msg")))) (CSymbol ("Prelude","id"))) (CVar (2,"err"))))])))] []]),
  CFunc ("KeyDatabaseSQLite","runJustT") 1 Public (CFuncType (CTCons ("KeyDatabaseSQLite","Transaction") [CTVar (0,"a")]) (CTCons ("Prelude","IO") [CTVar (0,"a")])) (CRules CFlex [CRule [CPVar (0,"t")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",">>=")) (CApply (CSymbol ("KeyDatabaseSQLite","runT")) (CVar (0,"t")))) (CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Prelude","return"))) (CApply (CApply (CSymbol ("Prelude","either")) (CSymbol ("Prelude","id"))) (CLambda [CPVar (1,"e")] (CApply (CSymbol ("Prelude","error")) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'T'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'f'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ':'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]"))))))))))))))))))))))) (CApply (CSymbol ("KeyDatabaseSQLite","showTError")) (CVar (1,"e")))))))))] []]),
  CFunc ("KeyDatabaseSQLite","getDB") 1 Public (CFuncType (CTCons ("KeyDatabaseSQLite","Query") [CTVar (0,"a")]) (CTCons ("KeyDatabaseSQLite","Transaction") [CTVar (0,"a")])) (CRules CFlex [CRule [CPVar (0,"query")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","$")) (CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("KeyDatabaseSQLite","Trans"))) (CSymbol ("KeyDatabaseSQLite","catchTrans")))) (CApply (CApply (CSymbol ("Prelude",">>=")) (CApply (CSymbol ("KeyDatabaseSQLite","runQ")) (CVar (0,"query")))) (CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Prelude","return"))) (CSymbol ("KeyDatabaseSQLite","OK")))))] []]),
  CFunc ("KeyDatabaseSQLite","transIO") 1 Private (CFuncType (CTCons ("Prelude","IO") [CTVar (0,"a")]) (CTCons ("KeyDatabaseSQLite","Transaction") [CTVar (0,"a")])) (CRules CFlex [CRule [CPVar (0,"action")] [(CSymbol ("Prelude","success"),CApply (CSymbol ("KeyDatabaseSQLite","Trans")) (CApply (CApply (CSymbol ("Prelude",">>=")) (CVar (0,"action"))) (CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Prelude","return"))) (CSymbol ("KeyDatabaseSQLite","OK")))))] []]),
  CFunc ("KeyDatabaseSQLite","returnT") 0 Public (CFuncType (CTVar (0,"a")) (CTCons ("KeyDatabaseSQLite","Transaction") [CTVar (0,"a")])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("KeyDatabaseSQLite","transIO"))) (CSymbol ("Prelude","return")))] []]),
  CFunc ("KeyDatabaseSQLite","doneT") 0 Public (CTCons ("KeyDatabaseSQLite","Transaction") [CTCons ("Prelude","()") []]) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("KeyDatabaseSQLite","transIO")) (CSymbol ("Prelude","done")))] []]),
  CFunc ("KeyDatabaseSQLite","errorT") 0 Public (CFuncType (CTCons ("KeyDatabaseSQLite","TError") []) (CTCons ("KeyDatabaseSQLite","Transaction") [CTVar (0,"a")])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("KeyDatabaseSQLite","Trans"))) (CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Prelude","return"))) (CSymbol ("KeyDatabaseSQLite","Error"))))] []]),
  CFunc ("KeyDatabaseSQLite","failT") 0 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("KeyDatabaseSQLite","Transaction") [CTVar (0,"a")])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("KeyDatabaseSQLite","errorT"))) (CApply (CSymbol ("KeyDatabaseSQLite","TError")) (CSymbol ("KeyDatabaseSQLite","UserDefinedError"))))] []]),
  CFunc ("KeyDatabaseSQLite","|>>=") 2 Public (CFuncType (CTCons ("KeyDatabaseSQLite","Transaction") [CTVar (0,"a")]) (CFuncType (CFuncType (CTVar (0,"a")) (CTCons ("KeyDatabaseSQLite","Transaction") [CTVar (1,"b")])) (CTCons ("KeyDatabaseSQLite","Transaction") [CTVar (1,"b")]))) (CRules CFlex [CRule [CPComb ("KeyDatabaseSQLite","Trans") [CPVar (0,"action")],CPVar (1,"f")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","$")) (CSymbol ("KeyDatabaseSQLite","Trans"))) (CDoExpr [CSPat (CPVar (2,"result")) (CVar (0,"action")),CSExpr (CCase (CVar (2,"result")) [CBranch (CPComb ("KeyDatabaseSQLite","Error") [CPVar (3,"err")]) (CApply (CApply (CSymbol ("Prelude","$")) (CSymbol ("Prelude","return"))) (CApply (CSymbol ("KeyDatabaseSQLite","Error")) (CVar (3,"err")))),CBranch (CPComb ("KeyDatabaseSQLite","OK") [CPVar (4,"res")]) (CApply (CApply (CSymbol ("Prelude","$")) (CSymbol ("KeyDatabaseSQLite","unTrans"))) (CApply (CVar (1,"f")) (CVar (4,"res"))))])]))] []]),
  CFunc ("KeyDatabaseSQLite","|>>") 2 Public (CFuncType (CTCons ("KeyDatabaseSQLite","Transaction") [CTVar (0,"a")]) (CFuncType (CTCons ("KeyDatabaseSQLite","Transaction") [CTVar (1,"b")]) (CTCons ("KeyDatabaseSQLite","Transaction") [CTVar (1,"b")]))) (CRules CFlex [CRule [CPVar (0,"t1"),CPVar (1,"t2")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("KeyDatabaseSQLite","|>>=")) (CVar (0,"t1"))) (CApply (CSymbol ("Prelude","const")) (CVar (1,"t2"))))] []]),
  CFunc ("KeyDatabaseSQLite","sequenceT") 0 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("KeyDatabaseSQLite","Transaction") [CTVar (0,"a")]]) (CTCons ("KeyDatabaseSQLite","Transaction") [CTCons ("Prelude","[]") [CTVar (0,"a")]])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","foldr")) (CSymbol ("KeyDatabaseSQLite","seqT"))) (CApply (CSymbol ("KeyDatabaseSQLite","returnT")) (CSymbol ("Prelude","[]"))))] [CLocalFunc (CFunc ("KeyDatabaseSQLite","seqT") 2 Private (CFuncType (CTCons ("KeyDatabaseSQLite","Transaction") [CTVar (0,"a")]) (CFuncType (CTCons ("KeyDatabaseSQLite","Transaction") [CTCons ("Prelude","[]") [CTVar (0,"a")]]) (CTCons ("KeyDatabaseSQLite","Transaction") [CTCons ("Prelude","[]") [CTVar (0,"a")]]))) (CRules CFlex [CRule [CPVar (0,"t"),CPVar (1,"ts")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("KeyDatabaseSQLite","|>>=")) (CVar (0,"t"))) (CLambda [CPVar (2,"x")] (CApply (CApply (CSymbol ("KeyDatabaseSQLite","|>>=")) (CVar (1,"ts"))) (CLambda [CPVar (3,"xs")] (CApply (CSymbol ("KeyDatabaseSQLite","returnT")) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (2,"x"))) (CVar (3,"xs"))))))))] []]))]]),
  CFunc ("KeyDatabaseSQLite","sequenceT_") 0 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("KeyDatabaseSQLite","Transaction") [CTVar (0,"a")]]) (CTCons ("KeyDatabaseSQLite","Transaction") [CTCons ("Prelude","()") []])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","foldr")) (CSymbol ("KeyDatabaseSQLite","|>>"))) (CSymbol ("KeyDatabaseSQLite","doneT")))] []]),
  CFunc ("KeyDatabaseSQLite","mapT") 1 Public (CFuncType (CFuncType (CTVar (0,"a")) (CTCons ("KeyDatabaseSQLite","Transaction") [CTVar (1,"b")])) (CFuncType (CTCons ("Prelude","[]") [CTVar (0,"a")]) (CTCons ("KeyDatabaseSQLite","Transaction") [CTCons ("Prelude","[]") [CTVar (1,"b")]]))) (CRules CFlex [CRule [CPVar (0,"f")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("KeyDatabaseSQLite","sequenceT"))) (CApply (CSymbol ("Prelude","map")) (CVar (0,"f"))))] []]),
  CFunc ("KeyDatabaseSQLite","mapT_") 1 Public (CFuncType (CFuncType (CTVar (0,"a")) (CTCons ("KeyDatabaseSQLite","Transaction") [CTVar (1,"b")])) (CFuncType (CTCons ("Prelude","[]") [CTVar (0,"a")]) (CTCons ("KeyDatabaseSQLite","Transaction") [CTCons ("Prelude","()") []]))) (CRules CFlex [CRule [CPVar (0,"f")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("KeyDatabaseSQLite","sequenceT_"))) (CApply (CSymbol ("Prelude","map")) (CVar (0,"f"))))] []]),
  CFunc ("KeyDatabaseSQLite","dbInfo") 1 Private (CFuncType (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTVar (0,"a")) (CTCons ("KeyDatabaseSQLite","Dynamic") []))) (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]]])) (CRules CFlex [CRule [CPVar (0,"keyPred")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","(,)")) (CVar (1,"db"))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CVar (2,"table"))) (CVar (3,"cols"))))] [CLocalPat (CPComb ("KeyDatabaseSQLite","DBInfo") [CPVar (1,"db"),CPVar (2,"table"),CPVar (3,"cols")]) (CApply (CApply (CVar (0,"keyPred")) (CSymbol ("KeyDatabaseSQLite","ignored"))) (CSymbol ("KeyDatabaseSQLite","ignored"))) []]]),
  CFunc ("KeyDatabaseSQLite","ignored") 0 Private (CTVar (0,"a")) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Prelude","error")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'x'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'g'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'f'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'b'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]"))))))))))))))))))))))))))))))))))))))))))))))))))))))] []]),
  CFunc ("KeyDatabaseSQLite","dbFile") 0 Private (CFuncType (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTVar (0,"a")) (CTCons ("KeyDatabaseSQLite","Dynamic") []))) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Prelude","fst"))) (CSymbol ("KeyDatabaseSQLite","dbInfo")))] []]),
  CFunc ("KeyDatabaseSQLite","tableName") 0 Private (CFuncType (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTVar (0,"a")) (CTCons ("KeyDatabaseSQLite","Dynamic") []))) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Prelude","fst"))) (CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Prelude","snd"))) (CSymbol ("KeyDatabaseSQLite","dbInfo"))))] []]),
  CFunc ("KeyDatabaseSQLite","colNames") 0 Private (CFuncType (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTVar (0,"a")) (CTCons ("KeyDatabaseSQLite","Dynamic") []))) (CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Prelude","snd"))) (CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Prelude","snd"))) (CSymbol ("KeyDatabaseSQLite","dbInfo"))))] []]),
  CFunc ("KeyDatabaseSQLite","persistentSQLite") 5 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]) (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTVar (0,"a")) (CTCons ("KeyDatabaseSQLite","Dynamic") [])))))) (CRules CFlex [CRule [CPVar (0,"db"),CPVar (1,"table"),CPVar (2,"cols"),CPVar (3,"_"),CPVar (4,"_")] [(CApply (CSymbol ("Prelude","null")) (CVar (2,"cols")),CApply (CApply (CApply (CSymbol ("KeyDatabaseSQLite","DBInfo")) (CVar (0,"db"))) (CVar (1,"table"))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'f'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CSymbol ("Prelude","[]"))))))) (CSymbol ("Prelude","[]")))),(CApply (CApply (CSymbol ("Prelude","elem")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '_'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'w'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '_'))) (CSymbol ("Prelude","[]")))))))))) (CVar (2,"cols")),CApply (CSymbol ("Prelude","error")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'b'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '_'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'w'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '_'))) (CSymbol ("Prelude","[]"))))))))))))))))))))))))))))))))))))),(CSymbol ("Prelude","otherwise"),CApply (CApply (CApply (CSymbol ("KeyDatabaseSQLite","DBInfo")) (CVar (0,"db"))) (CVar (1,"table"))) (CVar (2,"cols")))] []]),
  CFunc ("KeyDatabaseSQLite","existsDBKey") 2 Public (CFuncType (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTVar (0,"a")) (CTCons ("KeyDatabaseSQLite","Dynamic") []))) (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("KeyDatabaseSQLite","Query") [CTCons ("Prelude","Bool") []]))) (CRules CFlex [CRule [CPVar (0,"keyPred"),CPVar (1,"key")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","$")) (CSymbol ("KeyDatabaseSQLite","Query"))) (CDoExpr [CSPat (CPVar (2,"n")) (CApply (CApply (CSymbol ("Prelude","$")) (CApply (CApply (CSymbol ("KeyDatabaseSQLite","selectInt")) (CVar (0,"keyPred"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '('))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '*'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ')'))) (CSymbol ("Prelude","[]")))))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'w'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'h'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '_'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'w'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '_'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '='))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]"))))))))))))))))))) (CApply (CSymbol ("Prelude","show")) (CVar (1,"key"))))),CSExpr (CApply (CApply (CSymbol ("Prelude","$!")) (CSymbol ("Prelude","return"))) (CApply (CApply (CSymbol ("Prelude",">")) (CVar (2,"n"))) (CLit (CIntc 0))))]))] []]),
  CFunc ("KeyDatabaseSQLite","allDBKeys") 1 Public (CFuncType (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTVar (0,"a")) (CTCons ("KeyDatabaseSQLite","Dynamic") []))) (CTCons ("KeyDatabaseSQLite","Query") [CTCons ("Prelude","[]") [CTCons ("Prelude","Int") []]])) (CRules CFlex [CRule [CPVar (0,"keyPred")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","$")) (CSymbol ("KeyDatabaseSQLite","Query"))) (CDoExpr [CSPat (CPVar (1,"rows")) (CApply (CApply (CApply (CSymbol ("KeyDatabaseSQLite","selectRows")) (CVar (0,"keyPred"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '_'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'w'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '_'))) (CSymbol ("Prelude","[]")))))))))) (CSymbol ("Prelude","[]"))),CSExpr (CApply (CApply (CSymbol ("Prelude","mapIO")) (CSymbol ("KeyDatabaseSQLite","readIntOrExit"))) (CVar (1,"rows")))]))] []]),
  CFunc ("KeyDatabaseSQLite","allDBInfos") 1 Public (CFuncType (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTVar (0,"a")) (CTCons ("KeyDatabaseSQLite","Dynamic") []))) (CTCons ("KeyDatabaseSQLite","Query") [CTCons ("Prelude","[]") [CTVar (0,"a")]])) (CRules CFlex [CRule [CPVar (0,"keyPred")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","$")) (CSymbol ("KeyDatabaseSQLite","Query"))) (CDoExpr [CSPat (CPVar (1,"rows")) (CApply (CApply (CApply (CSymbol ("KeyDatabaseSQLite","selectRows")) (CVar (0,"keyPred"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '*'))) (CSymbol ("Prelude","[]")))) (CSymbol ("Prelude","[]"))),CSExpr (CApply (CApply (CSymbol ("Prelude","$!!")) (CSymbol ("Prelude","return"))) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("KeyDatabaseSQLite","readInfo"))) (CVar (1,"rows"))))]))] []]),
  CFunc ("KeyDatabaseSQLite","readInfo") 1 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTVar (0,"a"))) (CRules CFlex [CRule [CPVar (0,"str")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","$")) (CSymbol ("ReadShowTerm","readQTerm"))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '('))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (0,"str"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ')'))) (CSymbol ("Prelude","[]"))))))] []]),
  CFunc ("KeyDatabaseSQLite","allDBKeyInfos") 1 Public (CFuncType (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTVar (0,"a")) (CTCons ("KeyDatabaseSQLite","Dynamic") []))) (CTCons ("KeyDatabaseSQLite","Query") [CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","Int") [],CTVar (0,"a")]]])) (CRules CFlex [CRule [CPVar (0,"keyPred")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","$")) (CSymbol ("KeyDatabaseSQLite","Query"))) (CDoExpr [CSPat (CPVar (1,"rows")) (CApply (CApply (CApply (CSymbol ("KeyDatabaseSQLite","selectRows")) (CVar (0,"keyPred"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '_'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'w'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '_'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ','))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '*'))) (CSymbol ("Prelude","[]")))))))))))) (CSymbol ("Prelude","[]"))),CSExpr (CApply (CApply (CSymbol ("Prelude","mapIO")) (CSymbol ("KeyDatabaseSQLite","readKeyInfo"))) (CVar (1,"rows")))]))] []]),
  CFunc ("KeyDatabaseSQLite","readKeyInfo") 1 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","IO") [CTCons ("Prelude","(,)") [CTCons ("Prelude","Int") [],CTVar (0,"a")]])) (CRules CFlex [CRule [CPVar (0,"row")] [(CSymbol ("Prelude","success"),CDoExpr [CSPat (CPVar (5,"key")) (CApply (CSymbol ("KeyDatabaseSQLite","readIntOrExit")) (CVar (1,"keyStr"))),CSExpr (CApply (CApply (CSymbol ("Prelude","$!!")) (CSymbol ("Prelude","return"))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CVar (5,"key"))) (CApply (CSymbol ("KeyDatabaseSQLite","readInfo")) (CVar (3,"infoStr")))))])] [CLocalPat (CPComb ("Prelude","(,)") [CPVar (1,"keyStr"),CPComb ("Prelude",":") [CPVar (2,"_"),CPVar (3,"infoStr")]]) (CApply (CApply (CSymbol ("Prelude","break")) (CLambda [CPVar (4,"x0")] (CApply (CApply (CSymbol ("Prelude","==")) (CLit (CCharc ','))) (CVar (4,"x0"))))) (CVar (0,"row"))) []]]),
  CFunc ("KeyDatabaseSQLite","@=") 2 Public (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTVar (0,"a")) (CTCons ("KeyDatabaseSQLite","ColVal") []))) (CRules CFlex [CRule [CPVar (0,"n"),CPVar (1,"x")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","$")) (CApply (CApply (CSymbol ("Prelude",".")) (CApply (CSymbol ("KeyDatabaseSQLite","ColVal")) (CVar (0,"n")))) (CSymbol ("KeyDatabaseSQLite","quote")))) (CApply (CSymbol ("ReadShowTerm","showQTerm")) (CVar (1,"x"))))] []]),
  CFunc ("KeyDatabaseSQLite","someDBKeys") 2 Public (CFuncType (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTVar (0,"a")) (CTCons ("KeyDatabaseSQLite","Dynamic") []))) (CFuncType (CTCons ("Prelude","[]") [CTCons ("KeyDatabaseSQLite","ColVal") []]) (CTCons ("KeyDatabaseSQLite","Query") [CTCons ("Prelude","[]") [CTCons ("Prelude","Int") []]]))) (CRules CFlex [CRule [CPVar (0,"keyPred"),CPVar (1,"cvs")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","$")) (CSymbol ("KeyDatabaseSQLite","Query"))) (CDoExpr [CSPat (CPVar (2,"rows")) (CApply (CApply (CApply (CSymbol ("KeyDatabaseSQLite","selectSomeRows")) (CVar (0,"keyPred"))) (CVar (1,"cvs"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '_'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'w'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '_'))) (CSymbol ("Prelude","[]")))))))))),CSExpr (CApply (CApply (CSymbol ("Prelude","mapIO")) (CSymbol ("KeyDatabaseSQLite","readIntOrExit"))) (CVar (2,"rows")))]))] []]),
  CFunc ("KeyDatabaseSQLite","someDBInfos") 2 Public (CFuncType (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTVar (0,"a")) (CTCons ("KeyDatabaseSQLite","Dynamic") []))) (CFuncType (CTCons ("Prelude","[]") [CTCons ("KeyDatabaseSQLite","ColVal") []]) (CTCons ("KeyDatabaseSQLite","Query") [CTCons ("Prelude","[]") [CTVar (0,"a")]]))) (CRules CFlex [CRule [CPVar (0,"keyPred"),CPVar (1,"cvs")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","$")) (CSymbol ("KeyDatabaseSQLite","Query"))) (CDoExpr [CSPat (CPVar (2,"rows")) (CApply (CApply (CApply (CSymbol ("KeyDatabaseSQLite","selectSomeRows")) (CVar (0,"keyPred"))) (CVar (1,"cvs"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '*'))) (CSymbol ("Prelude","[]")))),CSExpr (CApply (CApply (CSymbol ("Prelude","$!!")) (CSymbol ("Prelude","return"))) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("KeyDatabaseSQLite","readInfo"))) (CVar (2,"rows"))))]))] []]),
  CFunc ("KeyDatabaseSQLite","someDBKeyInfos") 2 Public (CFuncType (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTVar (0,"a")) (CTCons ("KeyDatabaseSQLite","Dynamic") []))) (CFuncType (CTCons ("Prelude","[]") [CTCons ("KeyDatabaseSQLite","ColVal") []]) (CTCons ("KeyDatabaseSQLite","Query") [CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","Int") [],CTVar (0,"a")]]]))) (CRules CFlex [CRule [CPVar (0,"keyPred"),CPVar (1,"cvs")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","$")) (CSymbol ("KeyDatabaseSQLite","Query"))) (CDoExpr [CSPat (CPVar (2,"rows")) (CApply (CApply (CApply (CSymbol ("KeyDatabaseSQLite","selectSomeRows")) (CVar (0,"keyPred"))) (CVar (1,"cvs"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '_'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'w'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '_'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ','))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '*'))) (CSymbol ("Prelude","[]")))))))))))),CSExpr (CApply (CApply (CSymbol ("Prelude","mapIO")) (CSymbol ("KeyDatabaseSQLite","readKeyInfo"))) (CVar (2,"rows")))]))] []]),
  CFunc ("KeyDatabaseSQLite","someDBKeyProjections") 3 Public (CFuncType (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTVar (0,"a")) (CTCons ("KeyDatabaseSQLite","Dynamic") []))) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Int") []]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("KeyDatabaseSQLite","ColVal") []]) (CTCons ("KeyDatabaseSQLite","Query") [CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","Int") [],CTVar (1,"b")]]])))) (CRules CFlex [CRule [CPVar (0,"keyPred"),CPVar (1,"cols"),CPVar (2,"cvs")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","$")) (CSymbol ("KeyDatabaseSQLite","Query"))) (CDoExpr [CSLet [CLocalPat (CPVar (3,"colnames")) (CApply (CSymbol ("KeyDatabaseSQLite","commaSep")) (CApply (CApply (CSymbol ("Prelude","map")) (CLambda [CPVar (4,"x0")] (CApply (CApply (CSymbol ("Prelude","!!")) (CApply (CSymbol ("KeyDatabaseSQLite","colNames")) (CVar (0,"keyPred")))) (CVar (4,"x0"))))) (CVar (1,"cols")))) []],CSPat (CPVar (5,"rows")) (CApply (CApply (CApply (CSymbol ("KeyDatabaseSQLite","selectSomeRows")) (CVar (0,"keyPred"))) (CVar (2,"cvs"))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '_'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'w'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '_'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ','))) (CSymbol ("Prelude","[]"))))))))))) (CVar (3,"colnames")))),CSExpr (CApply (CApply (CSymbol ("Prelude","mapIO")) (CSymbol ("KeyDatabaseSQLite","readKeyInfo"))) (CVar (5,"rows")))]))] []]),
  CFunc ("KeyDatabaseSQLite","getDBInfo") 2 Public (CFuncType (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTVar (0,"a")) (CTCons ("KeyDatabaseSQLite","Dynamic") []))) (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("KeyDatabaseSQLite","Query") [CTCons ("Prelude","Maybe") [CTVar (0,"a")]]))) (CRules CFlex [CRule [CPVar (0,"keyPred"),CPVar (1,"key")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","$")) (CSymbol ("KeyDatabaseSQLite","Query"))) (CDoExpr [CSPat (CPVar (2,"rows")) (CApply (CApply (CSymbol ("Prelude","$")) (CApply (CApply (CSymbol ("KeyDatabaseSQLite","selectRows")) (CVar (0,"keyPred"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '*'))) (CSymbol ("Prelude","[]"))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'w'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'h'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '_'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'w'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '_'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '='))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]"))))))))))))))))))) (CApply (CSymbol ("Prelude","show")) (CVar (1,"key"))))),CSExpr (CApply (CSymbol ("KeyDatabaseSQLite","readHeadIfExists")) (CVar (2,"rows")))]))] [CLocalFunc (CFunc ("KeyDatabaseSQLite","readHeadIfExists") 1 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]) (CTCons ("Prelude","IO") [CTCons ("Prelude","Maybe") [CTVar (0,"a")]])) (CRules CFlex [CRule [CPComb ("Prelude","[]") []] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Prelude","return")) (CSymbol ("Prelude","Nothing")))] [],CRule [CPComb ("Prelude",":") [CPVar (2,"x"),CPVar (3,"_")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","$!!")) (CSymbol ("Prelude","return"))) (CApply (CSymbol ("Prelude","Just")) (CApply (CSymbol ("KeyDatabaseSQLite","readInfo")) (CVar (2,"x")))))] []]))]]),
  CFunc ("KeyDatabaseSQLite","getDBInfos") 2 Public (CFuncType (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTVar (0,"a")) (CTCons ("KeyDatabaseSQLite","Dynamic") []))) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Int") []]) (CTCons ("KeyDatabaseSQLite","Query") [CTCons ("Prelude","Maybe") [CTCons ("Prelude","[]") [CTVar (0,"a")]]]))) (CRules CFlex [CRule [CPVar (0,"keyPred"),CPVar (1,"keys")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","$")) (CSymbol ("KeyDatabaseSQLite","Query"))) (CDoExpr [CSPat (CPVar (2,"rows")) (CApply (CApply (CSymbol ("Prelude","$")) (CApply (CApply (CSymbol ("KeyDatabaseSQLite","selectRows")) (CVar (0,"keyPred"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '_'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'w'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '_'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ','))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '*'))) (CSymbol ("Prelude","[]"))))))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'w'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'h'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '_'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'w'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '_'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '('))) (CSymbol ("Prelude","[]"))))))))))))))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("KeyDatabaseSQLite","commaSep")) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("Prelude","show"))) (CVar (1,"keys"))))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ')'))) (CSymbol ("Prelude","[]")))))),CSExpr (CApply (CSymbol ("KeyDatabaseSQLite","sortByIndexInGivenList")) (CVar (2,"rows")))]))] [CLocalFunc (CFunc ("KeyDatabaseSQLite","sortByIndexInGivenList") 1 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]) (CTCons ("Prelude","IO") [CTCons ("Prelude","Maybe") [CTCons ("Prelude","[]") [CTVar (0,"a")]]])) (CRules CFlex [CRule [CPVar (2,"rows")] [(CSymbol ("Prelude","success"),CDoExpr [CSPat (CPVar (3,"keyInfos")) (CApply (CApply (CSymbol ("Prelude","mapIO")) (CSymbol ("KeyDatabaseSQLite","readKeyInfo"))) (CVar (2,"rows"))),CSExpr (CApply (CApply (CSymbol ("Prelude","$")) (CSymbol ("Prelude","return"))) (CApply (CApply (CSymbol ("Maybe","mapMMaybe")) (CLambda [CPVar (4,"key")] (CApply (CApply (CSymbol ("Prelude","lookup")) (CVar (4,"key"))) (CVar (3,"keyInfos"))))) (CVar (1,"keys"))))])] []]))]]),
  CFunc ("KeyDatabaseSQLite","commaSep") 0 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Prelude","concat"))) (CApply (CSymbol ("List","intersperse")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ','))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]"))))))] []]),
  CFunc ("KeyDatabaseSQLite","deleteDBEntry") 2 Public (CFuncType (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTVar (0,"a")) (CTCons ("KeyDatabaseSQLite","Dynamic") []))) (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("KeyDatabaseSQLite","Transaction") [CTCons ("Prelude","()") []]))) (CRules CFlex [CRule [CPVar (0,"keyPred"),CPVar (1,"key")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","$")) (CApply (CApply (CSymbol ("KeyDatabaseSQLite","modify")) (CVar (0,"keyPred"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'f'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CSymbol ("Prelude","[]"))))))))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'w'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'h'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '_'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'w'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '_'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '='))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]"))))))))))))))))))) (CApply (CSymbol ("Prelude","show")) (CVar (1,"key")))))] []]),
  CFunc ("KeyDatabaseSQLite","deleteDBEntries") 2 Public (CFuncType (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTVar (0,"a")) (CTCons ("KeyDatabaseSQLite","Dynamic") []))) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Int") []]) (CTCons ("KeyDatabaseSQLite","Transaction") [CTCons ("Prelude","()") []]))) (CRules CFlex [CRule [CPVar (0,"keyPred"),CPVar (1,"keys")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","$")) (CApply (CApply (CSymbol ("KeyDatabaseSQLite","modify")) (CVar (0,"keyPred"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'f'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CSymbol ("Prelude","[]"))))))))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'w'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'h'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '_'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'w'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '_'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '('))) (CSymbol ("Prelude","[]"))))))))))))))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("KeyDatabaseSQLite","commaSep")) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("Prelude","show"))) (CVar (1,"keys"))))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ')'))) (CSymbol ("Prelude","[]"))))))] []]),
  CFunc ("KeyDatabaseSQLite","updateDBEntry") 3 Public (CFuncType (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTVar (0,"a")) (CTCons ("KeyDatabaseSQLite","Dynamic") []))) (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTVar (0,"a")) (CTCons ("KeyDatabaseSQLite","Transaction") [CTCons ("Prelude","()") []])))) (CRules CFlex [CRule [CPVar (0,"keyPred"),CPVar (1,"key"),CPVar (2,"info")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("KeyDatabaseSQLite","|>>")) (CApply (CApply (CApply (CSymbol ("KeyDatabaseSQLite","errorUnlessKeyExists")) (CVar (0,"keyPred"))) (CVar (1,"key"))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'D'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'B'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'E'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'y'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ','))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]")))))))))))))))))) (CApply (CSymbol ("Prelude","show")) (CVar (1,"key")))))) (CApply (CApply (CApply (CSymbol ("KeyDatabaseSQLite","modify")) (CVar (0,"keyPred"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]"))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]"))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("KeyDatabaseSQLite","commaSep")) (CApply (CApply (CSymbol ("KeyDatabaseSQLite","colVals")) (CVar (0,"keyPred"))) (CVar (2,"info"))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'w'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'h'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '_'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'w'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '_'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '='))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]")))))))))))))))))))) (CApply (CSymbol ("Prelude","show")) (CVar (1,"key"))))))))] []]),
  CFunc ("KeyDatabaseSQLite","errorUnlessKeyExists") 3 Private (CFuncType (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTVar (0,"a")) (CTCons ("KeyDatabaseSQLite","Dynamic") []))) (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("KeyDatabaseSQLite","Transaction") [CTCons ("Prelude","()") []])))) (CRules CFlex [CRule [CPVar (0,"keyPred"),CPVar (1,"key"),CPVar (2,"msg")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("KeyDatabaseSQLite","|>>=")) (CApply (CSymbol ("KeyDatabaseSQLite","getDB")) (CApply (CApply (CSymbol ("KeyDatabaseSQLite","existsDBKey")) (CVar (0,"keyPred"))) (CVar (1,"key"))))) (CLambda [CPVar (3,"exists")] (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CSymbol ("Prelude","not")) (CVar (3,"exists")))) (CApply (CApply (CSymbol ("Prelude","$")) (CSymbol ("KeyDatabaseSQLite","errorT"))) (CApply (CApply (CSymbol ("KeyDatabaseSQLite","TError")) (CSymbol ("KeyDatabaseSQLite","KeyNotExistsError"))) (CVar (2,"msg"))))) (CSymbol ("KeyDatabaseSQLite","doneT")))))] []]),
  CFunc ("KeyDatabaseSQLite","colVals") 2 Private (CFuncType (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTVar (0,"a")) (CTCons ("KeyDatabaseSQLite","Dynamic") []))) (CFuncType (CTVar (0,"a")) (CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]))) (CRules CFlex [CRule [CPVar (0,"keyPred"),CPVar (1,"info")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","zipWith")) (CLambda [CPVar (2,"c"),CPVar (3,"v")] (CApply (CApply (CSymbol ("Prelude","++")) (CVar (2,"c"))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '='))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]")))))) (CVar (3,"v")))))) (CApply (CSymbol ("KeyDatabaseSQLite","colNames")) (CVar (0,"keyPred")))) (CApply (CApply (CSymbol ("KeyDatabaseSQLite","infoVals")) (CVar (0,"keyPred"))) (CVar (1,"info"))))] []]),
  CFunc ("KeyDatabaseSQLite","infoVals") 2 Private (CFuncType (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTVar (0,"a")) (CTCons ("KeyDatabaseSQLite","Dynamic") []))) (CFuncType (CTVar (0,"a")) (CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]))) (CRules CFlex [CRule [CPVar (0,"keyPred"),CPVar (1,"info")] [(CApply (CApply (CSymbol ("Prelude","$")) (CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Prelude","null"))) (CSymbol ("Prelude","tail")))) (CApply (CSymbol ("KeyDatabaseSQLite","colNames")) (CVar (0,"keyPred"))),CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude","$")) (CSymbol ("KeyDatabaseSQLite","quote"))) (CApply (CSymbol ("ReadShowTerm","showQTerm")) (CVar (1,"info"))))) (CSymbol ("Prelude","[]"))),(CSymbol ("Prelude","otherwise"),CApply (CApply (CSymbol ("Prelude","$")) (CApply (CSymbol ("Prelude","map")) (CSymbol ("KeyDatabaseSQLite","quote")))) (CApply (CSymbol ("KeyDatabaseSQLite","showTupleArgs")) (CVar (1,"info"))))] []]),
  CFunc ("KeyDatabaseSQLite","quote") 1 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CRules CFlex [CRule [CPVar (0,"s")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\''))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude","concatMap")) (CSymbol ("KeyDatabaseSQLite","quoteChar"))) (CVar (0,"s")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\''))) (CSymbol ("Prelude","[]")))))] [CLocalFunc (CFunc ("KeyDatabaseSQLite","quoteChar") 1 Private (CFuncType (CTCons ("Prelude","Char") []) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CRules CFlex [CRule [CPVar (1,"c")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (1,"c"))) (CLit (CCharc '\'')))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\''))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\''))) (CSymbol ("Prelude","[]"))))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (1,"c"))) (CSymbol ("Prelude","[]"))))] []]))]]),
  CFunc ("KeyDatabaseSQLite","newDBEntry") 2 Public (CFuncType (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTVar (0,"a")) (CTCons ("KeyDatabaseSQLite","Dynamic") []))) (CFuncType (CTVar (0,"a")) (CTCons ("KeyDatabaseSQLite","Transaction") [CTCons ("Prelude","Int") []]))) (CRules CFlex [CRule [CPVar (0,"keyPred"),CPVar (1,"info")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("KeyDatabaseSQLite","|>>")) (CApply (CApply (CApply (CSymbol ("KeyDatabaseSQLite","modify")) (CVar (0,"keyPred"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CSymbol ("Prelude","[]")))))))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'v'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '('))) (CSymbol ("Prelude","[]"))))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("KeyDatabaseSQLite","commaSep")) (CApply (CApply (CSymbol ("KeyDatabaseSQLite","infoVals")) (CVar (0,"keyPred"))) (CVar (1,"info"))))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ')'))) (CSymbol ("Prelude","[]"))))))) (CApply (CSymbol ("KeyDatabaseSQLite","getDB")) (CApply (CApply (CSymbol ("Prelude","$")) (CSymbol ("KeyDatabaseSQLite","Query"))) (CApply (CApply (CApply (CSymbol ("KeyDatabaseSQLite","selectInt")) (CVar (0,"keyPred"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '_'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '_'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'w'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '('))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ')'))) (CSymbol ("Prelude","[]")))))))))))))))))))))) (CSymbol ("Prelude","[]"))))))] []]),
  CFunc ("KeyDatabaseSQLite","newDBKeyEntry") 3 Public (CFuncType (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTVar (0,"a")) (CTCons ("KeyDatabaseSQLite","Dynamic") []))) (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTVar (0,"a")) (CTCons ("KeyDatabaseSQLite","Transaction") [CTCons ("Prelude","()") []])))) (CRules CFlex [CRule [CPVar (0,"keyPred"),CPVar (1,"key"),CPVar (2,"info")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("KeyDatabaseSQLite","|>>=")) (CApply (CSymbol ("KeyDatabaseSQLite","getDB")) (CApply (CApply (CSymbol ("KeyDatabaseSQLite","existsDBKey")) (CVar (0,"keyPred"))) (CVar (1,"key"))))) (CLambda [CPVar (3,"b")] (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CVar (3,"b"))) (CApply (CApply (CSymbol ("Prelude","$")) (CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("KeyDatabaseSQLite","errorT"))) (CApply (CSymbol ("KeyDatabaseSQLite","TError")) (CSymbol ("KeyDatabaseSQLite","DuplicateKeyError"))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'b'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'y'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'y'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'w'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'h'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'k'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'y'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ':'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]"))))))))))))))))))))))))))))))))))))))))))))) (CApply (CSymbol ("Prelude","show")) (CVar (1,"key")))))) (CApply (CApply (CSymbol ("KeyDatabaseSQLite","|>>=")) (CApply (CApply (CSymbol ("KeyDatabaseSQLite","|>>")) (CApply (CApply (CApply (CSymbol ("KeyDatabaseSQLite","modify")) (CVar (0,"keyPred"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CSymbol ("Prelude","[]")))))))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'v'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '('))) (CSymbol ("Prelude","[]"))))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("KeyDatabaseSQLite","commaSep")) (CApply (CApply (CSymbol ("KeyDatabaseSQLite","infoVals")) (CVar (0,"keyPred"))) (CVar (2,"info"))))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ')'))) (CSymbol ("Prelude","[]"))))))) (CApply (CSymbol ("KeyDatabaseSQLite","getDB")) (CApply (CApply (CSymbol ("Prelude","$")) (CSymbol ("KeyDatabaseSQLite","Query"))) (CApply (CApply (CApply (CSymbol ("KeyDatabaseSQLite","selectInt")) (CVar (0,"keyPred"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '_'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '_'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'w'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '('))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ')'))) (CSymbol ("Prelude","[]")))))))))))))))))))))) (CSymbol ("Prelude","[]"))))))) (CLambda [CPVar (4,"k")] (CApply (CApply (CSymbol ("Prelude","$")) (CApply (CApply (CSymbol ("KeyDatabaseSQLite","modify")) (CVar (0,"keyPred"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]")))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '_'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'w'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '_'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '='))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]"))))))))))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("Prelude","show")) (CVar (1,"key")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'w'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'h'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '_'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'w'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '_'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '='))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]")))))))))))))))))))) (CApply (CSymbol ("Prelude","show")) (CVar (4,"k"))))))))))))] []]),
  CFunc ("KeyDatabaseSQLite","cleanDB") 1 Public (CFuncType (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTVar (0,"a")) (CTCons ("KeyDatabaseSQLite","Dynamic") []))) (CTCons ("KeyDatabaseSQLite","Transaction") [CTCons ("Prelude","()") []])) (CRules CFlex [CRule [CPVar (0,"keyPred")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("KeyDatabaseSQLite","modify")) (CVar (0,"keyPred"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'f'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CSymbol ("Prelude","[]")))))))))))))) (CSymbol ("Prelude","[]")))] []]),
  CFunc ("KeyDatabaseSQLite","sqlite3") 2 Private (CFuncType (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTVar (0,"a")) (CTCons ("KeyDatabaseSQLite","Dynamic") []))) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","IO") [CTCons ("IO","Handle") []]))) (CRules CFlex [CRule [CPVar (0,"keyPred"),CPVar (1,"sql")] [(CSymbol ("Prelude","success"),CDoExpr [CSPat (CPVar (2,"h")) (CApply (CSymbol ("KeyDatabaseSQLite","getDBHandle")) (CVar (0,"keyPred"))),CSExpr (CApply (CApply (CSymbol ("Prelude","$")) (CApply (CSymbol ("KeyDatabaseSQLite","hPutAndFlush")) (CVar (2,"h")))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (1,"sql"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ';'))) (CSymbol ("Prelude","[]"))))),CSExpr (CApply (CSymbol ("Prelude","return")) (CVar (2,"h")))])] []]),
  CFunc ("KeyDatabaseSQLite","hPutAndFlush") 2 Private (CFuncType (CTCons ("IO","Handle") []) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","IO") [CTCons ("Prelude","()") []]))) (CRules CFlex [CRule [CPVar (0,"h"),CPVar (1,"s")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",">>")) (CApply (CApply (CSymbol ("IO","hPutStrLn")) (CVar (0,"h"))) (CVar (1,"s")))) (CApply (CSymbol ("IO","hFlush")) (CVar (0,"h"))))] []]),
  CFunc ("KeyDatabaseSQLite","modify") 3 Private (CFuncType (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTVar (0,"a")) (CTCons ("KeyDatabaseSQLite","Dynamic") []))) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("KeyDatabaseSQLite","Transaction") [CTCons ("Prelude","()") []])))) (CRules CFlex [CRule [CPVar (0,"keyPred"),CPVar (1,"before"),CPVar (2,"after")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","$")) (CSymbol ("KeyDatabaseSQLite","transIO"))) (CDoExpr [CSExpr (CApply (CApply (CSymbol ("Prelude","$")) (CApply (CSymbol ("KeyDatabaseSQLite","sqlite3")) (CVar (0,"keyPred")))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (1,"before"))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("KeyDatabaseSQLite","tableName")) (CVar (0,"keyPred")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]")))) (CVar (2,"after"))))))),CSExpr (CSymbol ("Prelude","done"))]))] []]),
  CFunc ("KeyDatabaseSQLite","selectInt") 3 Private (CFuncType (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTVar (0,"a")) (CTCons ("KeyDatabaseSQLite","Dynamic") []))) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","IO") [CTCons ("Prelude","Int") []])))) (CRules CFlex [CRule [CPVar (0,"keyPred"),CPVar (1,"aggr"),CPVar (2,"cond")] [(CSymbol ("Prelude","success"),CDoExpr [CSPat (CPVar (3,"h")) (CApply (CApply (CSymbol ("Prelude","$")) (CApply (CSymbol ("KeyDatabaseSQLite","sqlite3")) (CVar (0,"keyPred")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]"))))))))))))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (1,"aggr"))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'f'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]"))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("KeyDatabaseSQLite","tableName")) (CVar (0,"keyPred")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]")))) (CVar (2,"cond")))))))),CSExpr (CApply (CApply (CSymbol ("Prelude",">>=")) (CApply (CSymbol ("IO","hGetLine")) (CVar (3,"h")))) (CSymbol ("KeyDatabaseSQLite","readIntOrExit")))])] []]),
  CFunc ("KeyDatabaseSQLite","readIntOrExit") 1 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","IO") [CTCons ("Prelude","Int") []])) (CRules CFlex [CRule [CPVar (0,"s")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","$")) (CApply (CApply (CSymbol ("Prelude","maybe")) (CVar (1,"err"))) (CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Prelude","return"))) (CSymbol ("Prelude","fst"))))) (CApply (CSymbol ("ReadNumeric","readInt")) (CVar (0,"s"))))] [CLocalPat (CPVar (1,"err")) (CApply (CApply (CSymbol ("Prelude","$")) (CApply (CSymbol ("KeyDatabaseSQLite","dbError")) (CSymbol ("KeyDatabaseSQLite","ExecutionError")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'I'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'O'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'E'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'x'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ':'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'g'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'f'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'g'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\''))) (CSymbol ("Prelude","[]")))))))))))))))))))))))))))))))))))))))))))))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("Prelude","show")) (CVar (0,"s")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\''))) (CSymbol ("Prelude","[]")))))) []]]),
  CFunc ("KeyDatabaseSQLite","selectRows") 3 Private (CFuncType (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTVar (0,"a")) (CTCons ("KeyDatabaseSQLite","Dynamic") []))) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","IO") [CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]])))) (CRules CFlex [CRule [CPVar (0,"keyPred"),CPVar (1,"cols"),CPVar (2,"cond")] [(CSymbol ("Prelude","success"),CDoExpr [CSPat (CPVar (3,"h")) (CApply (CApply (CSymbol ("KeyDatabaseSQLite","sqlite3")) (CVar (0,"keyPred"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'h'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'x'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '('))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'b'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'b'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '('))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '8'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ')'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ')'))) (CSymbol ("Prelude","[]")))))))))))))))))))))))))))),CSPat (CPVar (4,"rnd")) (CApply (CSymbol ("IO","hGetLine")) (CVar (3,"h"))),CSExpr (CApply (CApply (CSymbol ("Prelude","$")) (CApply (CSymbol ("KeyDatabaseSQLite","hPutAndFlush")) (CVar (3,"h")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]")))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (1,"cols"))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'f'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]"))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("KeyDatabaseSQLite","tableName")) (CVar (0,"keyPred")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (2,"cond"))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ';'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]")))))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("KeyDatabaseSQLite","quote")) (CVar (4,"rnd")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ';'))) (CSymbol ("Prelude","[]")))))))))))),CSExpr (CApply (CApply (CSymbol ("KeyDatabaseSQLite","hGetLinesBefore")) (CVar (3,"h"))) (CVar (4,"rnd")))])] []]),
  CFunc ("KeyDatabaseSQLite","hGetLinesBefore") 2 Private (CFuncType (CTCons ("IO","Handle") []) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","IO") [CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]]))) (CRules CFlex [CRule [CPVar (0,"h"),CPVar (1,"stop")] [(CSymbol ("Prelude","success"),CDoExpr [CSPat (CPVar (2,"line")) (CApply (CSymbol ("IO","hGetLine")) (CVar (0,"h"))),CSExpr (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (2,"line"))) (CVar (1,"stop")))) (CApply (CSymbol ("Prelude","return")) (CSymbol ("Prelude","[]")))) (CDoExpr [CSPat (CPVar (3,"rest")) (CApply (CApply (CSymbol ("KeyDatabaseSQLite","hGetLinesBefore")) (CVar (0,"h"))) (CVar (1,"stop"))),CSExpr (CApply (CSymbol ("Prelude","return")) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (2,"line"))) (CVar (3,"rest"))))]))])] []]),
  CFunc ("KeyDatabaseSQLite","selectSomeRows") 3 Private (CFuncType (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTVar (0,"a")) (CTCons ("KeyDatabaseSQLite","Dynamic") []))) (CFuncType (CTCons ("Prelude","[]") [CTCons ("KeyDatabaseSQLite","ColVal") []]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","IO") [CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]])))) (CRules CFlex [CRule [CPVar (0,"keyPred"),CPVar (1,"cvs"),CPVar (2,"cols")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","$")) (CApply (CApply (CSymbol ("KeyDatabaseSQLite","selectRows")) (CVar (0,"keyPred"))) (CVar (2,"cols")))) (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CSymbol ("Prelude","null")) (CVar (1,"cvs")))) (CSymbol ("Prelude","[]"))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'w'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'h'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]"))))))))) (CApply (CApply (CSymbol ("KeyDatabaseSQLite","showColVals")) (CVar (0,"keyPred"))) (CVar (1,"cvs"))))))] []]),
  CFunc ("KeyDatabaseSQLite","showColVals") 2 Private (CFuncType (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTVar (0,"a")) (CTCons ("KeyDatabaseSQLite","Dynamic") []))) (CFuncType (CTCons ("Prelude","[]") [CTCons ("KeyDatabaseSQLite","ColVal") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]))) (CRules CFlex [CRule [CPVar (0,"_"),CPComb ("Prelude","[]") []] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '1'))) (CSymbol ("Prelude","[]")))] [],CRule [CPVar (1,"keyPred"),CPComb ("Prelude",":") [CPVar (2,"c"),CPVar (3,"vs")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","$")) (CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Prelude","concat"))) (CApply (CSymbol ("List","intersperse")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'A'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'N'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'D'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]")))))))))) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("KeyDatabaseSQLite","showCV"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (2,"c"))) (CVar (3,"vs")))))] [CLocalFunc (CFunc ("KeyDatabaseSQLite","showCV") 1 Private (CFuncType (CTCons ("KeyDatabaseSQLite","ColVal") []) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CRules CFlex [CRule [CPComb ("KeyDatabaseSQLite","ColVal") [CPVar (4,"n"),CPVar (5,"s")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude","!!")) (CApply (CSymbol ("KeyDatabaseSQLite","colNames")) (CVar (1,"keyPred")))) (CVar (4,"n")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '='))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]")))))) (CVar (5,"s"))))] []]))]]),
  CFunc ("KeyDatabaseSQLite","closeDBHandles") 0 Public (CTCons ("Prelude","IO") [CTCons ("Prelude","()") []]) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CDoExpr [CSExpr (CApply (CSymbol ("KeyDatabaseSQLite","withAllDBHandles")) (CSymbol ("IO","hClose"))),CSExpr (CApply (CApply (CSymbol ("Global","writeGlobal")) (CSymbol ("KeyDatabaseSQLite","openDBHandles"))) (CSymbol ("Prelude","[]")))])] []]),
  CFunc ("KeyDatabaseSQLite","dbError") 2 Private (CFuncType (CTCons ("KeyDatabaseSQLite","TErrorKind") []) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","IO") [CTVar (0,"a")]))) (CRules CFlex [CRule [CPVar (0,"kind"),CPVar (1,"msg")] [(CSymbol ("Prelude","success"),CDoExpr [CSExpr (CApply (CApply (CSymbol ("Prelude","$")) (CApply (CApply (CSymbol ("Prelude",".")) (CApply (CSymbol ("Global","writeGlobal")) (CSymbol ("KeyDatabaseSQLite","lastQueryError")))) (CSymbol ("Prelude","Just")))) (CApply (CApply (CSymbol ("KeyDatabaseSQLite","TError")) (CVar (0,"kind"))) (CVar (1,"msg")))),CSExpr (CApply (CSymbol ("Prelude","error")) (CVar (1,"msg")))])] []]),
  CFunc ("KeyDatabaseSQLite","lastQueryError") 0 Private (CTCons ("Global","Global") [CTCons ("Prelude","Maybe") [CTCons ("KeyDatabaseSQLite","TError") []]]) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Global","global")) (CSymbol ("Prelude","Nothing"))) (CSymbol ("Global","Temporary")))] []]),
  CFunc ("KeyDatabaseSQLite","getDBHandle") 1 Private (CFuncType (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTVar (0,"a")) (CTCons ("KeyDatabaseSQLite","Dynamic") []))) (CTCons ("Prelude","IO") [CTCons ("IO","Handle") []])) (CRules CFlex [CRule [CPVar (0,"keyPred")] [(CSymbol ("Prelude","success"),CDoExpr [CSExpr (CApply (CSymbol ("KeyDatabaseSQLite","ensureDBFor")) (CVar (0,"keyPred"))),CSExpr (CApply (CApply (CSymbol ("Prelude","$")) (CSymbol ("KeyDatabaseSQLite","readDBHandle"))) (CApply (CSymbol ("KeyDatabaseSQLite","dbFile")) (CVar (0,"keyPred"))))])] []]),
  CFunc ("KeyDatabaseSQLite","ensureDBFor") 1 Private (CFuncType (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTVar (0,"a")) (CTCons ("KeyDatabaseSQLite","Dynamic") []))) (CTCons ("Prelude","IO") [CTCons ("Prelude","()") []])) (CRules CFlex [CRule [CPVar (0,"keyPred")] [(CSymbol ("Prelude","success"),CDoExpr [CSExpr (CApply (CSymbol ("KeyDatabaseSQLite","ensureDBHandle")) (CVar (1,"db"))),CSExpr (CApply (CApply (CApply (CSymbol ("KeyDatabaseSQLite","ensureDBTable")) (CVar (1,"db"))) (CVar (2,"table"))) (CVar (3,"cols")))])] [CLocalPat (CPComb ("Prelude","(,)") [CPVar (1,"db"),CPComb ("Prelude","(,)") [CPVar (2,"table"),CPVar (3,"cols")]]) (CApply (CSymbol ("KeyDatabaseSQLite","dbInfo")) (CVar (0,"keyPred"))) []]]),
  CFunc ("KeyDatabaseSQLite","readDBHandle") 1 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","IO") [CTCons ("IO","Handle") []])) (CRules CFlex [CRule [CPVar (0,"db")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",">>=")) (CApply (CSymbol ("Global","readGlobal")) (CSymbol ("KeyDatabaseSQLite","openDBHandles")))) (CApply (CApply (CSymbol ("Prelude",".")) (CApply (CApply (CSymbol ("Prelude","maybe")) (CVar (1,"err"))) (CSymbol ("Prelude","return")))) (CApply (CSymbol ("Prelude","lookup")) (CVar (0,"db")))))] [CLocalPat (CPVar (1,"err")) (CApply (CApply (CSymbol ("Prelude","$")) (CApply (CSymbol ("KeyDatabaseSQLite","dbError")) (CSymbol ("KeyDatabaseSQLite","ExecutionError")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'D'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'B'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'H'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ':'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'h'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'f'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\''))) (CSymbol ("Prelude","[]")))))))))))))))))))))))))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (0,"db"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\''))) (CSymbol ("Prelude","[]")))))) []]]),
  CFunc ("KeyDatabaseSQLite","openDBHandles") 0 Private (CTCons ("Global","Global") [CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("IO","Handle") []]]]) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Global","global")) (CSymbol ("Prelude","[]"))) (CSymbol ("Global","Temporary")))] []]),
  CFunc ("KeyDatabaseSQLite","withAllDBHandles") 1 Private (CFuncType (CFuncType (CTCons ("IO","Handle") []) (CTCons ("Prelude","IO") [CTVar (0,"a")])) (CTCons ("Prelude","IO") [CTCons ("Prelude","()") []])) (CRules CFlex [CRule [CPVar (0,"f")] [(CSymbol ("Prelude","success"),CDoExpr [CSPat (CPVar (1,"dbHandles")) (CApply (CSymbol ("Global","readGlobal")) (CSymbol ("KeyDatabaseSQLite","openDBHandles"))),CSExpr (CApply (CApply (CSymbol ("Prelude","mapIO_")) (CApply (CApply (CSymbol ("Prelude",".")) (CVar (0,"f"))) (CSymbol ("Prelude","snd")))) (CVar (1,"dbHandles")))])] []]),
  CFunc ("KeyDatabaseSQLite","ensureDBHandle") 1 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","IO") [CTCons ("Prelude","()") []])) (CRules CFlex [CRule [CPVar (0,"db")] [(CSymbol ("Prelude","success"),CDoExpr [CSPat (CPVar (1,"dbHandles")) (CApply (CSymbol ("Global","readGlobal")) (CSymbol ("KeyDatabaseSQLite","openDBHandles"))),CSExpr (CApply (CApply (CSymbol ("Prelude","$")) (CApply (CSymbol ("KeyDatabaseSQLite","unless")) (CApply (CApply (CSymbol ("Prelude","elem")) (CVar (0,"db"))) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("Prelude","fst"))) (CVar (1,"dbHandles")))))) (CApply (CSymbol ("KeyDatabaseSQLite","addNewDBHandle")) (CVar (1,"dbHandles"))))])] [CLocalFunc (CFunc ("KeyDatabaseSQLite","addNewDBHandle") 1 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("IO","Handle") []]]) (CTCons ("Prelude","IO") [CTCons ("Prelude","()") []])) (CRules CFlex [CRule [CPVar (1,"dbHandles")] [(CSymbol ("Prelude","success"),CDoExpr [CSPat (CPVar (2,"h")) (CApply (CApply (CSymbol ("Prelude","$")) (CSymbol ("IOExts","connectToCommand"))) (CApply (CApply (CSymbol ("Prelude","++")) (CSymbol ("KeyDatabaseSQLite","path'to'sqlite3"))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]")))) (CVar (0,"db"))))),CSExpr (CApply (CApply (CSymbol ("KeyDatabaseSQLite","hPutAndFlush")) (CVar (2,"h"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '.'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\''))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ','))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\''))) (CSymbol ("Prelude","[]"))))))))))))))))),CSExpr (CApply (CApply (CSymbol ("Prelude","$")) (CApply (CSymbol ("Global","writeGlobal")) (CSymbol ("KeyDatabaseSQLite","openDBHandles")))) (CApply (CApply (CApply (CSymbol ("List","insertBy")) (CApply (CApply (CSymbol ("KeyDatabaseSQLite","on")) (CSymbol ("Prelude","<="))) (CSymbol ("Prelude","fst")))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CVar (0,"db"))) (CVar (2,"h")))) (CVar (1,"dbHandles")))),CSPat (CPVar (3,"isTrans")) (CApply (CSymbol ("Global","readGlobal")) (CSymbol ("KeyDatabaseSQLite","currentlyInTransaction"))),CSExpr (CApply (CApply (CSymbol ("Prelude","$")) (CApply (CSymbol ("KeyDatabaseSQLite","unless")) (CApply (CSymbol ("Prelude","not")) (CVar (3,"isTrans"))))) (CApply (CApply (CSymbol ("IO","hPutStrLn")) (CVar (2,"h"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'b'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'g'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ';'))) (CSymbol ("Prelude","[]"))))))))))))))))))))])] []]))]]),
  CFunc ("KeyDatabaseSQLite","unless") 2 Private (CFuncType (CTCons ("Prelude","Bool") []) (CFuncType (CTCons ("Prelude","IO") [CTCons ("Prelude","()") []]) (CTCons ("Prelude","IO") [CTCons ("Prelude","()") []]))) (CRules CFlex [CRule [CPComb ("Prelude","False") [],CPVar (0,"action")] [(CSymbol ("Prelude","success"),CVar (0,"action"))] [],CRule [CPComb ("Prelude","True") [],CPVar (1,"_")] [(CSymbol ("Prelude","success"),CSymbol ("Prelude","done"))] []]),
  CFunc ("KeyDatabaseSQLite","on") 4 Private (CFuncType (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (0,"a")) (CTVar (1,"b")))) (CFuncType (CFuncType (CTVar (2,"c")) (CTVar (0,"a"))) (CFuncType (CTVar (2,"c")) (CFuncType (CTVar (2,"c")) (CTVar (1,"b")))))) (CRules CFlex [CRule [CPVar (0,"f"),CPVar (1,"g"),CPVar (2,"x"),CPVar (3,"y")] [(CSymbol ("Prelude","success"),CApply (CApply (CVar (0,"f")) (CApply (CVar (1,"g")) (CVar (2,"x")))) (CApply (CVar (1,"g")) (CVar (3,"y"))))] []]),
  CFunc ("KeyDatabaseSQLite","ensureDBTable") 3 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]) (CTCons ("Prelude","IO") [CTCons ("Prelude","()") []])))) (CRules CFlex [CRule [CPVar (0,"db"),CPVar (1,"table"),CPVar (2,"cols")] [(CSymbol ("Prelude","success"),CDoExpr [CSPat (CPVar (3,"dbTables")) (CApply (CSymbol ("Global","readGlobal")) (CSymbol ("KeyDatabaseSQLite","knownDBTables"))),CSExpr (CApply (CApply (CSymbol ("Prelude","$")) (CApply (CSymbol ("KeyDatabaseSQLite","unless")) (CApply (CApply (CSymbol ("Prelude","elem")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CVar (0,"db"))) (CVar (1,"table")))) (CVar (3,"dbTables"))))) (CDoExpr [CSPat (CPVar (4,"h")) (CApply (CSymbol ("KeyDatabaseSQLite","readDBHandle")) (CVar (0,"db"))),CSExpr (CApply (CApply (CSymbol ("Prelude","$")) (CApply (CSymbol ("KeyDatabaseSQLite","hPutAndFlush")) (CVar (4,"h")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'b'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'f'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'x'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]")))))))))))))))))))))))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (1,"table"))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '('))) (CSymbol ("Prelude","[]"))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("KeyDatabaseSQLite","commaSep")) (CVar (2,"cols")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ')'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ';'))) (CSymbol ("Prelude","[]"))))))))),CSExpr (CApply (CApply (CSymbol ("Prelude","$")) (CApply (CSymbol ("Global","writeGlobal")) (CSymbol ("KeyDatabaseSQLite","knownDBTables")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CVar (0,"db"))) (CVar (1,"table")))) (CVar (3,"dbTables"))))]))])] []]),
  CFunc ("KeyDatabaseSQLite","knownDBTables") 0 Private (CTCons ("Global","Global") [CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]]]) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Global","global")) (CSymbol ("Prelude","[]"))) (CSymbol ("Global","Temporary")))] []]),
  CFunc ("KeyDatabaseSQLite","beginTransaction") 0 Private (CTCons ("Prelude","IO") [CTCons ("Prelude","()") []]) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CDoExpr [CSExpr (CApply (CApply (CSymbol ("Global","writeGlobal")) (CSymbol ("KeyDatabaseSQLite","currentlyInTransaction"))) (CSymbol ("Prelude","True"))),CSExpr (CApply (CSymbol ("KeyDatabaseSQLite","withAllDBHandles")) (CLambda [CPVar (0,"x0")] (CApply (CApply (CSymbol ("KeyDatabaseSQLite","hPutAndFlush")) (CVar (0,"x0"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'b'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'g'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ';'))) (CSymbol ("Prelude","[]")))))))))))))))))))))])] []]),
  CFunc ("KeyDatabaseSQLite","commitTransaction") 0 Private (CTCons ("Prelude","IO") [CTCons ("Prelude","()") []]) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CDoExpr [CSExpr (CApply (CSymbol ("KeyDatabaseSQLite","withAllDBHandles")) (CLambda [CPVar (0,"x0")] (CApply (CApply (CSymbol ("KeyDatabaseSQLite","hPutAndFlush")) (CVar (0,"x0"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ';'))) (CSymbol ("Prelude","[]")))))))))))),CSExpr (CApply (CApply (CSymbol ("Global","writeGlobal")) (CSymbol ("KeyDatabaseSQLite","currentlyInTransaction"))) (CSymbol ("Prelude","False")))])] []]),
  CFunc ("KeyDatabaseSQLite","rollbackTransaction") 0 Private (CTCons ("Prelude","IO") [CTCons ("Prelude","()") []]) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CDoExpr [CSExpr (CApply (CSymbol ("KeyDatabaseSQLite","withAllDBHandles")) (CLambda [CPVar (0,"x0")] (CApply (CApply (CSymbol ("KeyDatabaseSQLite","hPutAndFlush")) (CVar (0,"x0"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'b'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'k'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ';'))) (CSymbol ("Prelude","[]")))))))))))))),CSExpr (CApply (CApply (CSymbol ("Global","writeGlobal")) (CSymbol ("KeyDatabaseSQLite","currentlyInTransaction"))) (CSymbol ("Prelude","False")))])] []]),
  CFunc ("KeyDatabaseSQLite","currentlyInTransaction") 0 Private (CTCons ("Global","Global") [CTCons ("Prelude","Bool") []]) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Global","global")) (CSymbol ("Prelude","False"))) (CSymbol ("Global","Temporary")))] []]),
  CFunc ("KeyDatabaseSQLite","showTupleArgs") 0 Private (CFuncType (CTVar (0,"a")) (CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("KeyDatabaseSQLite","splitTLC"))) (CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("KeyDatabaseSQLite","removeOuterParens"))) (CSymbol ("ReadShowTerm","showQTerm"))))] []]),
  CFunc ("KeyDatabaseSQLite","removeOuterParens") 1 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CRules CFlex [CRule [CPComb ("Prelude",":") [CPLit (CCharc '('),CPVar (0,"cs")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("KeyDatabaseSQLite","init")) (CVar (0,"cs")))] []]),
  CFunc ("KeyDatabaseSQLite","init") 0 Private (CFuncType (CTCons ("Prelude","[]") [CTVar (0,"a")]) (CTCons ("Prelude","[]") [CTVar (0,"a")])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Prelude","reverse"))) (CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Prelude","tail"))) (CSymbol ("Prelude","reverse"))))] []]),
  CFunc ("KeyDatabaseSQLite","splitTLC") 0 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("KeyDatabaseSQLite","parse")) (CSymbol ("Prelude","[]")))] []]),
  CFunc ("KeyDatabaseSQLite","parse") 2 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]))) (CRules CFlex [CRule [CPVar (0,"_"),CPComb ("Prelude","[]") []] [(CSymbol ("Prelude","success"),CSymbol ("Prelude","[]"))] [],CRule [CPVar (1,"st"),CPComb ("Prelude",":") [CPVar (2,"c"),CPVar (3,"cs")]] [(CSymbol ("Prelude","success"),CCase (CApply (CApply (CSymbol ("Prelude","(,)")) (CVar (1,"st"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (2,"c"))) (CVar (3,"cs")))) [CBranch (CPComb ("Prelude","(,)") [CPComb ("Prelude",":") [CPLit (CCharc '\''),CPVar (4,"xs")],CPComb ("Prelude",":") [CPLit (CCharc '\''),CPComb ("Prelude",":") [CPLit (CCharc '\''),CPVar (5,"ys")]]]) (CApply (CApply (CSymbol ("KeyDatabaseSQLite","<:")) (CLit (CCharc '\''))) (CApply (CApply (CSymbol ("KeyDatabaseSQLite","<:")) (CLit (CCharc '\''))) (CApply (CApply (CSymbol ("KeyDatabaseSQLite","parse")) (CVar (4,"xs"))) (CVar (5,"ys"))))),CBranch (CPVar (6,"_")) (CApply (CApply (CSymbol ("Prelude","$")) (CApply (CApply (CSymbol ("KeyDatabaseSQLite","next")) (CVar (2,"c"))) (CVar (1,"st")))) (CApply (CApply (CSymbol ("KeyDatabaseSQLite","parse")) (CApply (CApply (CSymbol ("KeyDatabaseSQLite","updStack")) (CVar (2,"c"))) (CVar (1,"st")))) (CVar (3,"cs"))))])] []]),
  CFunc ("KeyDatabaseSQLite","next") 3 Private (CFuncType (CTCons ("Prelude","Char") []) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]) (CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]])))) (CRules CFlex [CRule [CPVar (0,"c"),CPComb ("Prelude","[]") [],CPVar (1,"xs")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (0,"c"))) (CLit (CCharc ',')))) (CApply (CApply (CSymbol ("Prelude",":")) (CSymbol ("Prelude","[]"))) (CVar (1,"xs")))) (CApply (CApply (CSymbol ("KeyDatabaseSQLite","<:")) (CVar (0,"c"))) (CVar (1,"xs"))))] [],CRule [CPVar (2,"c"),CPComb ("Prelude",":") [CPVar (3,"_"),CPVar (4,"_")],CPVar (5,"xs")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("KeyDatabaseSQLite","<:")) (CVar (2,"c"))) (CVar (5,"xs")))] []]),
  CFunc ("KeyDatabaseSQLite","<:") 2 Private (CFuncType (CTCons ("Prelude","Char") []) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]) (CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]))) (CRules CFlex [CRule [CPVar (0,"c"),CPComb ("Prelude","[]") []] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (0,"c"))) (CSymbol ("Prelude","[]")))) (CSymbol ("Prelude","[]")))] [],CRule [CPVar (1,"c"),CPComb ("Prelude",":") [CPVar (2,"x"),CPVar (3,"xs")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (1,"c"))) (CVar (2,"x")))) (CVar (3,"xs")))] []]),
  CFunc ("KeyDatabaseSQLite","updStack") 2 Private (CFuncType (CTCons ("Prelude","Char") []) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]))) (CRules CFlex [CRule [CPVar (0,"char"),CPVar (1,"stack")] [(CSymbol ("Prelude","success"),CCase (CApply (CApply (CSymbol ("Prelude","(,)")) (CVar (0,"char"))) (CVar (1,"stack"))) [CBranch (CPComb ("Prelude","(,)") [CPVar (2,"_"),CPComb ("Prelude",":") [CPLit (CCharc '\\'),CPVar (3,"xs")]]) (CVar (3,"xs")),CBranch (CPComb ("Prelude","(,)") [CPLit (CCharc '\\'),CPVar (4,"xs")]) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\\'))) (CVar (4,"xs"))),CBranch (CPComb ("Prelude","(,)") [CPLit (CCharc '"'),CPComb ("Prelude",":") [CPLit (CCharc '"'),CPVar (5,"xs")]]) (CVar (5,"xs")),CBranch (CPComb ("Prelude","(,)") [CPLit (CCharc '"'),CPComb ("Prelude",":") [CPLit (CCharc '\''),CPVar (6,"xs")]]) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\''))) (CVar (6,"xs"))),CBranch (CPComb ("Prelude","(,)") [CPLit (CCharc '"'),CPVar (7,"xs")]) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '"'))) (CVar (7,"xs"))),CBranch (CPComb ("Prelude","(,)") [CPLit (CCharc '\''),CPComb ("Prelude",":") [CPLit (CCharc '\''),CPVar (8,"xs")]]) (CVar (8,"xs")),CBranch (CPComb ("Prelude","(,)") [CPLit (CCharc '\''),CPComb ("Prelude",":") [CPLit (CCharc '"'),CPVar (9,"xs")]]) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '"'))) (CVar (9,"xs"))),CBranch (CPComb ("Prelude","(,)") [CPLit (CCharc '\''),CPVar (10,"xs")]) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\''))) (CVar (10,"xs"))),CBranch (CPComb ("Prelude","(,)") [CPVar (11,"_"),CPComb ("Prelude",":") [CPLit (CCharc '"'),CPVar (12,"xs")]]) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '"'))) (CVar (12,"xs"))),CBranch (CPComb ("Prelude","(,)") [CPVar (13,"_"),CPComb ("Prelude",":") [CPLit (CCharc '\''),CPVar (14,"xs")]]) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\''))) (CVar (14,"xs"))),CBranch (CPComb ("Prelude","(,)") [CPLit (CCharc '('),CPVar (15,"xs")]) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '('))) (CVar (15,"xs"))),CBranch (CPComb ("Prelude","(,)") [CPLit (CCharc ')'),CPComb ("Prelude",":") [CPLit (CCharc '('),CPVar (16,"xs")]]) (CVar (16,"xs")),CBranch (CPComb ("Prelude","(,)") [CPLit (CCharc '['),CPVar (17,"xs")]) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '['))) (CVar (17,"xs"))),CBranch (CPComb ("Prelude","(,)") [CPLit (CCharc ']'),CPComb ("Prelude",":") [CPLit (CCharc '['),CPVar (18,"xs")]]) (CVar (18,"xs")),CBranch (CPComb ("Prelude","(,)") [CPVar (19,"_"),CPVar (20,"xs")]) (CVar (20,"xs"))])] []]),
  CFunc ("KeyDatabaseSQLite","showTError") 1 Public (CFuncType (CTCons ("KeyDatabaseSQLite","TError") []) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CRules CFlex [CRule [CPComb ("KeyDatabaseSQLite","TError") [CPVar (0,"k"),CPVar (1,"s")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'T'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]"))))))))))))))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("Prelude","show")) (CVar (0,"k")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ':'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]"))))) (CVar (1,"s")))))] []])]
 [COp ("KeyDatabaseSQLite","|>>=") CInfixlOp 1,COp ("KeyDatabaseSQLite","|>>") CInfixlOp 1]
