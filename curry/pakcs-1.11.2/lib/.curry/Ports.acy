CurryProg "Ports"
 ["Prelude","Time","System","CPNS"]
 [CType ("Ports","Port") Public [(0,"a")] [CCons ("Ports","internalPort") 4 Private [CTCons ("Prelude","String") [],CTCons ("Prelude","Int") [],CTCons ("Prelude","Int") [],CTVar (0,"a")]],
  CType ("Ports","SP_Msg") Public [] [CCons ("Ports","SP_Put") 1 Public [CTCons ("Prelude","String") []],CCons ("Ports","SP_GetLine") 1 Public [CTCons ("Prelude","String") []],CCons ("Ports","SP_GetChar") 1 Public [CTCons ("Prelude","Char") []],CCons ("Ports","SP_EOF") 1 Public [CTCons ("Prelude","Bool") []],CCons ("Ports","SP_Close") 0 Public []]]
 [CFunc ("Ports","openPort") 2 Public (CFuncType (CTCons ("Ports","Port") [CTVar (0,"a")]) (CFuncType (CTCons ("Prelude","[]") [CTVar (0,"a")]) (CTCons ("Prelude","Success") []))) (CRules CFlex [CRule [CPVar (0,"p"),CPVar (1,"ms")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","$!!")) (CApply (CApply (CSymbol ("Prelude","$!")) (CSymbol ("Ports","prim_openPort"))) (CVar (0,"p")))) (CVar (1,"ms")))] []]),
  CFunc ("Ports","prim_openPort") 2 Private (CFuncType (CTCons ("Ports","Port") [CTVar (0,"a")]) (CFuncType (CTCons ("Prelude","[]") [CTVar (0,"a")]) (CTCons ("Prelude","Success") []))) (CExternal "prim_openPort"),
  CFunc ("Ports","send") 2 Public (CFuncType (CTVar (0,"a")) (CFuncType (CTCons ("Ports","Port") [CTVar (0,"a")]) (CTCons ("Prelude","Success") []))) (CRules CFlex [CRule [CPVar (0,"msg"),CPVar (1,"p")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","$#")) (CApply (CApply (CSymbol ("Prelude","$!!")) (CSymbol ("Ports","prim_send"))) (CApply (CSymbol ("Prelude","ensureNotFree")) (CVar (0,"msg"))))) (CVar (1,"p")))] []]),
  CFunc ("Ports","prim_send") 2 Private (CFuncType (CTVar (0,"a")) (CFuncType (CTCons ("Ports","Port") [CTVar (0,"a")]) (CTCons ("Prelude","Success") []))) (CExternal "prim_send"),
  CFunc ("Ports","doSend") 2 Public (CFuncType (CTVar (0,"a")) (CFuncType (CTCons ("Ports","Port") [CTVar (0,"a")]) (CTCons ("Prelude","IO") [CTCons ("Prelude","()") []]))) (CRules CFlex [CRule [CPVar (0,"msg"),CPVar (1,"p")] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Prelude","doSolve")) (CApply (CApply (CSymbol ("Ports","send")) (CVar (0,"msg"))) (CVar (1,"p"))))] []]),
  CFunc ("Ports","after") 1 Private (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("Prelude","Success") [])) (CExternal "after"),
  CFunc ("Ports","ping") 2 Public (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Ports","Port") [CTVar (0,"a")]) (CTCons ("Prelude","IO") [CTCons ("Prelude","Maybe") [CTCons ("Prelude","Int") []]]))) (CRules CFlex [CRule [CPVar (0,"n"),CPVar (1,"p")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","$#")) (CApply (CApply (CSymbol ("Prelude","$#")) (CSymbol ("Ports","prim_ping"))) (CVar (0,"n")))) (CVar (1,"p")))] []]),
  CFunc ("Ports","prim_ping") 2 Private (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Ports","Port") [CTVar (0,"a")]) (CTCons ("Prelude","IO") [CTCons ("Prelude","Maybe") [CTCons ("Prelude","Int") []]]))) (CExternal "prim_ping"),
  CFunc ("Ports","timeoutOnStream") 2 Public (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Prelude","[]") [CTVar (0,"a")]) (CTCons ("Prelude","Maybe") [CTCons ("Prelude","[]") [CTVar (0,"a")]]))) (CRules CFlex [CRule [CPVar (0,"n"),CPVar (1,"str")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","$#")) (CSymbol ("Ports","prim_timeoutOnStream"))) (CVar (0,"n"))) (CVar (1,"str")))] []]),
  CFunc ("Ports","prim_timeoutOnStream") 2 Private (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Prelude","[]") [CTVar (0,"a")]) (CTCons ("Prelude","Maybe") [CTCons ("Prelude","[]") [CTVar (0,"a")]]))) (CExternal "prim_timeoutOnStream"),
  CFunc ("Ports","openProcessPort") 1 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","IO") [CTCons ("Ports","Port") [CTCons ("Ports","SP_Msg") []]])) (CRules CFlex [CRule [CPVar (0,"cmd")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","$##")) (CSymbol ("Ports","prim_openProcessPort"))) (CVar (0,"cmd")))] []]),
  CFunc ("Ports","prim_openProcessPort") 1 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","IO") [CTCons ("Ports","Port") [CTCons ("Ports","SP_Msg") []]])) (CExternal "prim_openProcessPort"),
  CFunc ("Ports","openNamedPort") 1 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","IO") [CTCons ("Prelude","[]") [CTVar (0,"a")]])) (CRules CFlex [CRule [CPVar (0,"name")] [(CSymbol ("Prelude","success"),CDoExpr [CSPat (CPVar (3,"stream")) (CApply (CApply (CSymbol ("Ports","openPortOnSocket")) (CVar (1,"socketnr"))) (CVar (2,"portnr"))),CSExpr (CApply (CApply (CApply (CSymbol ("CPNS","registerPort")) (CVar (0,"name"))) (CVar (1,"socketnr"))) (CVar (2,"portnr"))),CSExpr (CApply (CSymbol ("Prelude","return")) (CVar (3,"stream")))])] [CLocalVar (1,"socketnr"),CLocalVar (2,"portnr")]]),
  CFunc ("Ports","connectPortRepeat") 4 Public (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Prelude","IO") [CTVar (0,"a")]) (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","IO") [CTCons ("Prelude","Maybe") [CTCons ("Ports","Port") [CTVar (1,"b")]]]))))) (CRules CFlex [CRule [CPVar (0,"waittime"),CPVar (1,"action"),CPVar (2,"retries"),CPVar (3,"nameAtHost")] [(CSymbol ("Prelude","success"),CDoExpr [CSLet [CLocalPat (CPComb ("Prelude","(,)") [CPVar (5,"name"),CPVar (6,"atHost")]) (CApply (CApply (CSymbol ("Prelude","break")) (CLambda [CPVar (8,"x0")] (CApply (CApply (CSymbol ("Prelude","==")) (CVar (8,"x0"))) (CLit (CCharc '@'))))) (CVar (3,"nameAtHost"))) [],CLocalPat (CPVar (7,"host")) (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (6,"atHost"))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'h'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CSymbol ("Prelude","[]")))))))))))) (CApply (CSymbol ("Prelude","tail")) (CVar (6,"atHost")))) []],CSPat (CPVar (9,"alive")) (CApply (CApply (CSymbol ("CPNS","cpnsAlive")) (CVar (0,"waittime"))) (CVar (7,"host"))),CSExpr (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CSymbol ("Prelude","not")) (CVar (9,"alive")))) (CVar (4,"tryAgain"))) (CDoExpr [CSPat (CPComb ("Prelude","(,)") [CPVar (10,"snr"),CPVar (11,"pnr")]) (CApply (CApply (CSymbol ("CPNS","getPortInfo")) (CVar (5,"name"))) (CVar (7,"host"))),CSExpr (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (10,"snr"))) (CLit (CIntc 0)))) (CVar (4,"tryAgain"))) (CApply (CApply (CSymbol ("Prelude",">>=")) (CApply (CApply (CApply (CSymbol ("Ports","connectPortAtSocket")) (CVar (10,"snr"))) (CVar (11,"pnr"))) (CVar (7,"host")))) (CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Prelude","return"))) (CSymbol ("Prelude","Just")))))]))])] [CLocalPat (CPVar (4,"tryAgain")) (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (2,"retries"))) (CLit (CIntc 0)))) (CApply (CSymbol ("Prelude","return")) (CSymbol ("Prelude","Nothing")))) (CDoExpr [CSExpr (CVar (1,"action")),CSExpr (CApply (CSymbol ("System","sleep")) (CApply (CSymbol ("Ports","ms2s")) (CVar (0,"waittime")))),CSExpr (CApply (CApply (CApply (CApply (CSymbol ("Ports","connectPortRepeat")) (CVar (0,"waittime"))) (CVar (1,"action"))) (CApply (CSymbol ("Ports","decr")) (CVar (2,"retries")))) (CVar (3,"nameAtHost")))])) [],CLocalFunc (CFunc ("Ports","ms2s") 1 Private (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("Prelude","Int") [])) (CRules CFlex [CRule [CPVar (5,"n")] [(CSymbol ("Prelude","success"),CLetDecl [CLocalPat (CPVar (6,"mn")) (CApply (CApply (CSymbol ("Prelude","div")) (CVar (5,"n"))) (CLit (CIntc 1000))) []] (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (6,"mn"))) (CLit (CIntc 0)))) (CLit (CIntc 1))) (CVar (6,"mn"))))] []])),CLocalFunc (CFunc ("Ports","decr") 1 Private (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("Prelude","Int") [])) (CRules CFlex [CRule [CPVar (5,"n")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","<")) (CVar (5,"n"))) (CLit (CIntc 0)))) (CVar (5,"n"))) (CApply (CApply (CSymbol ("Prelude","-")) (CVar (5,"n"))) (CLit (CIntc 1))))] []]))]]),
  CFunc ("Ports","connectPortWait") 1 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","IO") [CTCons ("Ports","Port") [CTVar (0,"a")]])) (CRules CFlex [CRule [CPVar (0,"nameAtHost")] [(CSymbol ("Prelude","success"),CDoExpr [CSPat (CPComb ("Prelude","Just") [CPVar (1,"port")]) (CApply (CApply (CApply (CApply (CSymbol ("Ports","connectPortRepeat")) (CLit (CIntc 1000))) (CSymbol ("Prelude","done"))) (CApply (CSymbol ("Prelude","negate")) (CLit (CIntc 1)))) (CVar (0,"nameAtHost"))),CSExpr (CApply (CSymbol ("Prelude","return")) (CVar (1,"port")))])] []]),
  CFunc ("Ports","connectPort") 1 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","IO") [CTCons ("Ports","Port") [CTVar (0,"a")]])) (CRules CFlex [CRule [CPVar (0,"nameAtHost")] [(CSymbol ("Prelude","success"),CDoExpr [CSLet [CLocalPat (CPComb ("Prelude","(,)") [CPVar (1,"name"),CPVar (2,"atHost")]) (CApply (CApply (CSymbol ("Prelude","break")) (CLambda [CPVar (4,"x0")] (CApply (CApply (CSymbol ("Prelude","==")) (CVar (4,"x0"))) (CLit (CCharc '@'))))) (CVar (0,"nameAtHost"))) [],CLocalPat (CPVar (3,"host")) (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (2,"atHost"))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'h'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CSymbol ("Prelude","[]")))))))))))) (CApply (CSymbol ("Prelude","tail")) (CVar (2,"atHost")))) []],CSPat (CPComb ("Prelude","(,)") [CPVar (5,"snr"),CPVar (6,"pnr")]) (CApply (CApply (CSymbol ("CPNS","getPortInfo")) (CVar (1,"name"))) (CVar (3,"host"))),CSExpr (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (5,"snr"))) (CLit (CIntc 0)))) (CApply (CSymbol ("Prelude","error")) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'P'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ':'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'P'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '"'))) (CSymbol ("Prelude","[]")))))))))))))))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (1,"name"))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '@'))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (3,"host"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '"'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'g'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '!'))) (CSymbol ("Prelude","[]")))))))))))))))))))))))))))) (CSymbol ("Prelude","done"))),CSExpr (CApply (CApply (CApply (CSymbol ("Ports","connectPortAtSocket")) (CVar (5,"snr"))) (CVar (6,"pnr"))) (CVar (3,"host")))])] []]),
  CFunc ("Ports","choiceSPEP") 2 Public (CFuncType (CTCons ("Ports","Port") [CTCons ("Ports","SP_Msg") []]) (CFuncType (CTCons ("Prelude","[]") [CTVar (0,"a")]) (CTCons ("Prelude","Either") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTVar (0,"a")]]))) (CRules CFlex [CRule [CPVar (0,"p"),CPVar (1,"ms")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","$#")) (CSymbol ("Ports","prim_choiceSPEP"))) (CVar (0,"p"))) (CVar (1,"ms")))] []]),
  CFunc ("Ports","prim_choiceSPEP") 2 Private (CFuncType (CTCons ("Ports","Port") [CTCons ("Ports","SP_Msg") []]) (CFuncType (CTCons ("Prelude","[]") [CTVar (0,"a")]) (CTCons ("Prelude","Either") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTVar (0,"a")]]))) (CExternal "prim_choiceSPEP"),
  CFunc ("Ports","newObject") 3 Public (CFuncType (CFuncType (CTVar (0,"a")) (CFuncType (CTCons ("Prelude","[]") [CTVar (1,"b")]) (CTCons ("Prelude","Success") []))) (CFuncType (CTVar (0,"a")) (CFuncType (CTCons ("Ports","Port") [CTVar (1,"b")]) (CTCons ("Prelude","Success") [])))) (CRules CFlex [CRule [CPVar (0,"object"),CPVar (1,"state"),CPVar (2,"port")] [(CSymbol ("Prelude","success"),CLetDecl [CLocalVar (3,"msgs")] (CApply (CApply (CSymbol ("Prelude","&>")) (CApply (CApply (CSymbol ("Ports","openPort")) (CVar (2,"port"))) (CVar (3,"msgs")))) (CApply (CApply (CVar (0,"object")) (CVar (1,"state"))) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("Prelude","ensureNotFree"))) (CApply (CSymbol ("Prelude","ensureSpine")) (CVar (3,"msgs")))))))] []]),
  CFunc ("Ports","newNamedObject") 3 Public (CFuncType (CFuncType (CTVar (0,"a")) (CFuncType (CTCons ("Prelude","[]") [CTVar (1,"b")]) (CTCons ("Prelude","Success") []))) (CFuncType (CTVar (0,"a")) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","IO") [CTCons ("Prelude","()") []])))) (CRules CFlex [CRule [CPVar (0,"object"),CPVar (1,"state"),CPVar (2,"portname")] [(CSymbol ("Prelude","success"),CDoExpr [CSPat (CPVar (3,"msgs")) (CApply (CSymbol ("Ports","openNamedPort")) (CVar (2,"portname"))),CSExpr (CApply (CSymbol ("Prelude","doSolve")) (CApply (CApply (CVar (0,"object")) (CVar (1,"state"))) (CVar (3,"msgs"))))])] []]),
  CFunc ("Ports","runNamedServer") 2 Public (CFuncType (CFuncType (CTCons ("Prelude","[]") [CTVar (0,"a")]) (CTCons ("Prelude","IO") [CTVar (1,"b")])) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","IO") [CTVar (1,"b")]))) (CRules CFlex [CRule [CPVar (0,"server"),CPVar (1,"portname")] [(CSymbol ("Prelude","success"),CDoExpr [CSPat (CPVar (2,"msgs")) (CApply (CSymbol ("Ports","openNamedPort")) (CVar (1,"portname"))),CSExpr (CApply (CVar (0,"server")) (CVar (2,"msgs")))])] []]),
  CFunc ("Ports","openPortOnSocket") 2 Private (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("Prelude","IO") [CTCons ("Prelude","[]") [CTVar (0,"a")]]))) (CRules CFlex [CRule [CPVar (0,"snr"),CPVar (1,"pnr")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","$!")) (CApply (CApply (CSymbol ("Prelude","$!")) (CSymbol ("Ports","prim_openPortOnSocket"))) (CVar (0,"snr")))) (CVar (1,"pnr")))] []]),
  CFunc ("Ports","prim_openPortOnSocket") 2 Private (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("Prelude","IO") [CTCons ("Prelude","[]") [CTVar (0,"a")]]))) (CExternal "prim_openPortOnSocket"),
  CFunc ("Ports","basicServerLoop") 1 Private (CFuncType (CTCons ("Ports","Port") [CTVar (0,"a")]) (CTCons ("Prelude","[]") [CTVar (0,"a")])) (CExternal "basicServerLoop"),
  CFunc ("Ports","connectPortAtSocket") 3 Private (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","IO") [CTCons ("Ports","Port") [CTVar (0,"a")]])))) (CRules CFlex [CRule [CPVar (0,"snr"),CPVar (1,"pnr"),CPVar (2,"host")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","$##")) (CApply (CApply (CSymbol ("Prelude","$#")) (CApply (CApply (CSymbol ("Prelude","$#")) (CSymbol ("Ports","prim_connectPortAtSocket"))) (CVar (0,"snr")))) (CVar (1,"pnr")))) (CVar (2,"host")))] []]),
  CFunc ("Ports","prim_connectPortAtSocket") 3 Private (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","IO") [CTCons ("Ports","Port") [CTVar (0,"a")]])))) (CExternal "prim_connectPortAtSocket")]
 []
