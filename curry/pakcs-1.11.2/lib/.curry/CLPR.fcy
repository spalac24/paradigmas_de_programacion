Prog "CLPR" ["Prelude"] [] [Func ("CLPR","+.") 2 Public (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") []))) (Rule [1,2] (Comb FuncCall ("Prelude","$!") [Comb FuncCall ("Prelude","$!") [Comb (FuncPartCall 2) ("CLPR","prim_CLPR_plus") [],Var 2],Var 1])),Func ("CLPR","prim_CLPR_plus") 2 Private (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") []))) (External "CLPR.prim_CLPR_plus"),Func ("CLPR","-.") 2 Public (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") []))) (Rule [1,2] (Comb FuncCall ("Prelude","$!") [Comb FuncCall ("Prelude","$!") [Comb (FuncPartCall 2) ("CLPR","prim_CLPR_minus") [],Var 2],Var 1])),Func ("CLPR","prim_CLPR_minus") 2 Private (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") []))) (External "CLPR.prim_CLPR_minus"),Func ("CLPR","*.") 2 Public (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") []))) (Rule [1,2] (Comb FuncCall ("Prelude","$!") [Comb FuncCall ("Prelude","$!") [Comb (FuncPartCall 2) ("CLPR","prim_CLPR_times") [],Var 2],Var 1])),Func ("CLPR","prim_CLPR_times") 2 Private (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") []))) (External "CLPR.prim_CLPR_times"),Func ("CLPR","/.") 2 Public (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") []))) (Rule [1,2] (Comb FuncCall ("Prelude","$!") [Comb FuncCall ("Prelude","$!") [Comb (FuncPartCall 2) ("CLPR","prim_CLPR_div") [],Var 2],Var 1])),Func ("CLPR","prim_CLPR_div") 2 Private (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") []))) (External "CLPR.prim_CLPR_div"),Func ("CLPR","<.") 2 Public (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Success") []))) (Rule [1,2] (Comb FuncCall ("Prelude","$!") [Comb FuncCall ("Prelude","$!") [Comb (FuncPartCall 2) ("CLPR","prim_CLPR_le") [],Var 2],Var 1])),Func ("CLPR","prim_CLPR_le") 2 Private (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Success") []))) (External "CLPR.prim_CLPR_le"),Func ("CLPR",">.") 2 Public (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Success") []))) (Rule [1,2] (Comb FuncCall ("Prelude","$!") [Comb FuncCall ("Prelude","$!") [Comb (FuncPartCall 2) ("CLPR","prim_CLPR_ge") [],Var 2],Var 1])),Func ("CLPR","prim_CLPR_ge") 2 Private (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Success") []))) (External "CLPR.prim_CLPR_ge"),Func ("CLPR","<=.") 2 Public (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Success") []))) (Rule [1,2] (Comb FuncCall ("Prelude","$!") [Comb FuncCall ("Prelude","$!") [Comb (FuncPartCall 2) ("CLPR","prim_CLPR_leq") [],Var 2],Var 1])),Func ("CLPR","prim_CLPR_leq") 2 Private (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Success") []))) (External "CLPR.prim_CLPR_leq"),Func ("CLPR",">=.") 2 Public (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Success") []))) (Rule [1,2] (Comb FuncCall ("Prelude","$!") [Comb FuncCall ("Prelude","$!") [Comb (FuncPartCall 2) ("CLPR","prim_CLPR_geq") [],Var 2],Var 1])),Func ("CLPR","prim_CLPR_geq") 2 Private (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Success") []))) (External "CLPR.prim_CLPR_geq"),Func ("CLPR","i2f") 1 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Float") [])) (Rule [1] (Comb FuncCall ("Prelude","$#") [Comb (FuncPartCall 1) ("CLPR","prim_CLPR_i2f") [],Var 1])),Func ("CLPR","prim_CLPR_i2f") 1 Private (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Float") [])) (External "CLPR.prim_CLPR_i2f"),Func ("CLPR","minimumFor") 2 Public (FuncType (FuncType (TVar 0) (TCons ("Prelude","Success") [])) (FuncType (FuncType (TVar 0) (TCons ("Prelude","Float") [])) (TVar 0))) (External "CLPR.minimumFor"),Func ("CLPR","minimize") 3 Public (FuncType (FuncType (TVar 0) (TCons ("Prelude","Success") [])) (FuncType (FuncType (TVar 0) (TCons ("Prelude","Float") [])) (FuncType (TVar 0) (TCons ("Prelude","Success") [])))) (Rule [1,2,3] (Comb FuncCall ("Prelude","=:=") [Comb FuncCall ("CLPR","minimumFor") [Var 1,Var 2],Var 3])),Func ("CLPR","maximumFor") 2 Public (FuncType (FuncType (TVar 0) (TCons ("Prelude","Success") [])) (FuncType (FuncType (TVar 0) (TCons ("Prelude","Float") [])) (TVar 0))) (External "CLPR.maximumFor"),Func ("CLPR","maximize") 3 Public (FuncType (FuncType (TVar 0) (TCons ("Prelude","Success") [])) (FuncType (FuncType (TVar 0) (TCons ("Prelude","Float") [])) (FuncType (TVar 0) (TCons ("Prelude","Success") [])))) (Rule [1,2,3] (Comb FuncCall ("Prelude","=:=") [Comb FuncCall ("CLPR","maximumFor") [Var 1,Var 2],Var 3]))] [Op ("CLPR","*.") InfixlOp 7,Op ("CLPR","/.") InfixlOp 7,Op ("CLPR","+.") InfixlOp 6,Op ("CLPR","-.") InfixlOp 6,Op ("CLPR","<.") InfixOp 4,Op ("CLPR",">.") InfixOp 4,Op ("CLPR","<=.") InfixOp 4,Op ("CLPR",">=.") InfixOp 4]