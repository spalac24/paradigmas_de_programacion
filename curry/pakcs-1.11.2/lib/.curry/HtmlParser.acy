CurryProg "HtmlParser"
 ["Prelude","HTML","Char"]
 [CType ("HtmlParser","HtmlToken") Private [] [CCons ("HtmlParser","HText") 1 Private [CTCons ("Prelude","String") []],CCons ("HtmlParser","HElem") 2 Private [CTCons ("Prelude","String") [],CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","String") [],CTCons ("Prelude","String") []]]]]]
 [CFunc ("HtmlParser","readHtmlFile") 1 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","IO") [CTCons ("Prelude","[]") [CTCons ("HTML","HtmlExp") []]])) (CRules CFlex [CRule [CPVar (0,"file")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",">>=")) (CApply (CSymbol ("Prelude","readFile")) (CVar (0,"file")))) (CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Prelude","return"))) (CSymbol ("HtmlParser","parseHtmlString"))))] []]),
  CFunc ("HtmlParser","parseHtmlString") 1 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","[]") [CTCons ("HTML","HtmlExp") []])) (CRules CFlex [CRule [CPVar (0,"s")] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Prelude","reverse")) (CApply (CApply (CSymbol ("HtmlParser","parseHtmlTokens")) (CSymbol ("Prelude","[]"))) (CApply (CSymbol ("HtmlParser","scanHtmlString")) (CVar (0,"s")))))] []]),
  CFunc ("HtmlParser","parseHtmlTokens") 2 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("HTML","HtmlExp") []]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("HtmlParser","HtmlToken") []]) (CTCons ("Prelude","[]") [CTCons ("HTML","HtmlExp") []]))) (CRules CFlex [CRule [CPVar (0,"helems"),CPComb ("Prelude","[]") []] [(CSymbol ("Prelude","success"),CVar (0,"helems"))] [],CRule [CPVar (1,"helems"),CPComb ("Prelude",":") [CPComb ("HtmlParser","HText") [CPVar (2,"s")],CPVar (3,"hs")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("HtmlParser","parseHtmlTokens")) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("HTML","HtmlText")) (CVar (2,"s")))) (CVar (1,"helems")))) (CVar (3,"hs")))] [],CRule [CPVar (4,"helems"),CPComb ("Prelude",":") [CPComb ("HtmlParser","HElem") [CPComb ("Prelude",":") [CPVar (5,"t"),CPVar (6,"ts")],CPVar (7,"args")],CPVar (8,"hs")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (5,"t"))) (CLit (CCharc '/')))) (CLetDecl [CLocalPat (CPComb ("Prelude","(,,)") [CPVar (9,"structargs"),CPVar (10,"elems"),CPVar (11,"rest")]) (CApply (CApply (CSymbol ("HtmlParser","splitHtmlElems")) (CVar (6,"ts"))) (CVar (4,"helems"))) []] (CApply (CApply (CSymbol ("HtmlParser","parseHtmlTokens")) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CApply (CSymbol ("HTML","HtmlStruct")) (CVar (6,"ts"))) (CVar (9,"structargs"))) (CVar (10,"elems")))) (CSymbol ("Prelude","[]")))) (CVar (11,"rest")))) (CVar (8,"hs"))))) (CApply (CApply (CSymbol ("HtmlParser","parseHtmlTokens")) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CApply (CSymbol ("HTML","HtmlStruct")) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (5,"t"))) (CVar (6,"ts")))) (CVar (7,"args"))) (CSymbol ("Prelude","[]")))) (CVar (4,"helems")))) (CVar (8,"hs"))))] []]),
  CFunc ("HtmlParser","splitHtmlElems") 2 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("HTML","HtmlExp") []]) (CTCons ("Prelude","(,,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]],CTCons ("Prelude","[]") [CTCons ("HTML","HtmlExp") []],CTCons ("Prelude","[]") [CTCons ("HTML","HtmlExp") []]]))) (CRules CFlex [CRule [CPVar (0,"_"),CPComb ("Prelude","[]") []] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","(,,)")) (CSymbol ("Prelude","[]"))) (CSymbol ("Prelude","[]"))) (CSymbol ("Prelude","[]")))] [],CRule [CPVar (1,"tag"),CPComb ("Prelude",":") [CPComb ("HTML","HtmlText") [CPVar (2,"s")],CPVar (3,"hs")]] [(CSymbol ("Prelude","success"),CLetDecl [CLocalPat (CPComb ("Prelude","(,,)") [CPVar (4,"largs"),CPVar (5,"elems"),CPVar (6,"rest")]) (CApply (CApply (CSymbol ("HtmlParser","splitHtmlElems")) (CVar (1,"tag"))) (CVar (3,"hs"))) []] (CApply (CApply (CApply (CSymbol ("Prelude","(,,)")) (CVar (4,"largs"))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (5,"elems"))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("HTML","HtmlText")) (CVar (2,"s")))) (CSymbol ("Prelude","[]"))))) (CVar (6,"rest"))))] [],CRule [CPVar (7,"tag"),CPComb ("Prelude",":") [CPComb ("HTML","HtmlStruct") [CPVar (8,"s"),CPVar (9,"args"),CPAs (12,"cont") (CPComb ("Prelude",":") [CPVar (10,"_"),CPVar (11,"_")])],CPVar (13,"hs")]] [(CSymbol ("Prelude","success"),CLetDecl [CLocalPat (CPComb ("Prelude","(,,)") [CPVar (14,"largs"),CPVar (15,"elems"),CPVar (16,"rest")]) (CApply (CApply (CSymbol ("HtmlParser","splitHtmlElems")) (CVar (7,"tag"))) (CVar (13,"hs"))) []] (CApply (CApply (CApply (CSymbol ("Prelude","(,,)")) (CVar (14,"largs"))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (15,"elems"))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CApply (CSymbol ("HTML","HtmlStruct")) (CVar (8,"s"))) (CVar (9,"args"))) (CVar (12,"cont")))) (CSymbol ("Prelude","[]"))))) (CVar (16,"rest"))))] [],CRule [CPVar (17,"tag"),CPComb ("Prelude",":") [CPComb ("HTML","HtmlStruct") [CPVar (18,"s"),CPVar (19,"args"),CPComb ("Prelude","[]") []],CPVar (20,"hs")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (17,"tag"))) (CVar (18,"s")))) (CApply (CApply (CApply (CSymbol ("Prelude","(,,)")) (CVar (19,"args"))) (CSymbol ("Prelude","[]"))) (CVar (20,"hs")))) (CLetDecl [CLocalPat (CPComb ("Prelude","(,,)") [CPVar (21,"largs"),CPVar (22,"elems"),CPVar (23,"rest")]) (CApply (CApply (CSymbol ("HtmlParser","splitHtmlElems")) (CVar (17,"tag"))) (CVar (20,"hs"))) []] (CApply (CApply (CApply (CSymbol ("Prelude","(,,)")) (CVar (21,"largs"))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (22,"elems"))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CApply (CSymbol ("HTML","HtmlStruct")) (CVar (18,"s"))) (CVar (19,"args"))) (CSymbol ("Prelude","[]")))) (CSymbol ("Prelude","[]"))))) (CVar (23,"rest")))))] []]),
  CFunc ("HtmlParser","scanHtmlString") 1 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","[]") [CTCons ("HtmlParser","HtmlToken") []])) (CRules CFlex [CRule [CPVar (0,"s")] [(CSymbol ("Prelude","success"),CApply (CSymbol ("HtmlParser","scanHtml")) (CVar (0,"s")))] [CLocalFunc (CFunc ("HtmlParser","scanHtml") 1 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","[]") [CTCons ("HtmlParser","HtmlToken") []])) (CRules CFlex [CRule [CPComb ("Prelude","[]") []] [(CSymbol ("Prelude","success"),CSymbol ("Prelude","[]"))] [],CRule [CPComb ("Prelude",":") [CPVar (1,"c"),CPVar (2,"cs")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (1,"c"))) (CLit (CCharc '<')))) (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","==")) (CApply (CApply (CSymbol ("Prelude","take")) (CLit (CIntc 3))) (CVar (2,"cs")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '!'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '-'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '-'))) (CSymbol ("Prelude","[]"))))))) (CApply (CSymbol ("HtmlParser","scanHtmlComment")) (CVar (2,"cs")))) (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","==")) (CApply (CApply (CSymbol ("Prelude","take")) (CLit (CIntc 4))) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("Char","toLower"))) (CVar (2,"cs"))))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '>'))) (CSymbol ("Prelude","[]")))))))) (CApply (CApply (CSymbol ("HtmlParser","scanHtmlPre")) (CSymbol ("Prelude","[]"))) (CApply (CSymbol ("HtmlParser","skipFirstNewLine")) (CApply (CApply (CSymbol ("Prelude","drop")) (CLit (CIntc 4))) (CVar (2,"cs")))))) (CApply (CApply (CSymbol ("HtmlParser","scanHtmlElem")) (CSymbol ("Prelude","[]"))) (CVar (2,"cs")))))) (CLetDecl [CLocalPat (CPComb ("Prelude","(,)") [CPVar (3,"initxt"),CPVar (4,"remtag")]) (CApply (CApply (CSymbol ("Prelude","break")) (CLambda [CPVar (5,"x0")] (CApply (CApply (CSymbol ("Prelude","==")) (CVar (5,"x0"))) (CLit (CCharc '<'))))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (1,"c"))) (CVar (2,"cs")))) []] (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("HtmlParser","HText")) (CVar (3,"initxt")))) (CApply (CSymbol ("HtmlParser","scanHtml")) (CVar (4,"remtag"))))))] []]))]]),
  CFunc ("HtmlParser","scanHtmlElem") 2 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","[]") [CTCons ("HtmlParser","HtmlToken") []]))) (CRules CFlex [CRule [CPVar (0,"ct"),CPComb ("Prelude","[]") []] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("HtmlParser","HText")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '<'))) (CVar (0,"ct"))))) (CSymbol ("Prelude","[]")))] [],CRule [CPVar (1,"ct"),CPComb ("Prelude",":") [CPVar (2,"c"),CPVar (3,"cs")]] [(CApply (CApply (CSymbol ("Prelude","==")) (CVar (2,"c"))) (CLit (CCharc '>')),CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("HtmlParser","HElem")) (CVar (1,"ct"))) (CSymbol ("Prelude","[]")))) (CApply (CSymbol ("HtmlParser","scanHtmlString")) (CVar (3,"cs")))),(CApply (CSymbol ("Char","isSpace")) (CVar (2,"c")),CLetDecl [CLocalPat (CPComb ("Prelude","(,)") [CPVar (4,"args"),CPVar (5,"rest")]) (CApply (CApply (CSymbol ("HtmlParser","splitAtElement")) (CLambda [CPVar (7,"x0")] (CApply (CApply (CSymbol ("Prelude","==")) (CVar (7,"x0"))) (CLit (CCharc '>'))))) (CApply (CApply (CSymbol ("Prelude","dropWhile")) (CSymbol ("Char","isSpace"))) (CVar (3,"cs")))) [],CLocalPat (CPVar (6,"revargs")) (CApply (CSymbol ("Prelude","reverse")) (CVar (4,"args"))) []] (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","||")) (CApply (CSymbol ("Prelude","null")) (CVar (4,"args")))) (CApply (CApply (CSymbol ("Prelude","/=")) (CApply (CSymbol ("Prelude","head")) (CVar (6,"revargs")))) (CLit (CCharc '/'))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("HtmlParser","HElem")) (CVar (1,"ct"))) (CApply (CSymbol ("HtmlParser","string2args")) (CVar (4,"args"))))) (CApply (CSymbol ("HtmlParser","scanHtmlString")) (CVar (5,"rest"))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("HtmlParser","HElem")) (CVar (1,"ct"))) (CApply (CSymbol ("HtmlParser","string2args")) (CApply (CSymbol ("Prelude","reverse")) (CApply (CSymbol ("Prelude","tail")) (CVar (6,"revargs"))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("HtmlParser","HElem")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '/'))) (CVar (1,"ct")))) (CSymbol ("Prelude","[]")))) (CApply (CSymbol ("HtmlParser","scanHtmlString")) (CVar (5,"rest"))))))),(CApply (CApply (CSymbol ("Prelude","&&")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (2,"c"))) (CLit (CCharc '/')))) (CApply (CApply (CSymbol ("Prelude","==")) (CApply (CSymbol ("Prelude","head")) (CVar (3,"cs")))) (CLit (CCharc '>'))),CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("HtmlParser","HElem")) (CVar (1,"ct"))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("HtmlParser","HElem")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '/'))) (CVar (1,"ct")))) (CSymbol ("Prelude","[]")))) (CApply (CSymbol ("HtmlParser","scanHtmlString")) (CApply (CSymbol ("Prelude","tail")) (CVar (3,"cs")))))),(CSymbol ("Prelude","otherwise"),CApply (CApply (CSymbol ("HtmlParser","scanHtmlElem")) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (1,"ct"))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("Char","toLower")) (CVar (2,"c")))) (CSymbol ("Prelude","[]"))))) (CVar (3,"cs")))] []]),
  CFunc ("HtmlParser","scanHtmlComment") 1 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","[]") [CTCons ("HtmlParser","HtmlToken") []])) (CRules CFlex [CRule [CPComb ("Prelude","[]") []] [(CSymbol ("Prelude","success"),CSymbol ("Prelude","[]"))] [],CRule [CPComb ("Prelude",":") [CPVar (0,"c"),CPVar (1,"cs")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","&&")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (0,"c"))) (CLit (CCharc '-')))) (CApply (CApply (CSymbol ("Prelude","==")) (CApply (CApply (CSymbol ("Prelude","take")) (CLit (CIntc 2))) (CVar (1,"cs")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '-'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '>'))) (CSymbol ("Prelude","[]"))))))) (CApply (CSymbol ("HtmlParser","scanHtmlString")) (CApply (CApply (CSymbol ("Prelude","drop")) (CLit (CIntc 2))) (CVar (1,"cs"))))) (CApply (CSymbol ("HtmlParser","scanHtmlComment")) (CVar (1,"cs"))))] []]),
  CFunc ("HtmlParser","scanHtmlPre") 2 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","[]") [CTCons ("HtmlParser","HtmlToken") []]))) (CRules CFlex [CRule [CPVar (0,"_"),CPComb ("Prelude","[]") []] [(CSymbol ("Prelude","success"),CSymbol ("Prelude","[]"))] [],CRule [CPVar (1,"pre"),CPComb ("Prelude",":") [CPVar (2,"c"),CPVar (3,"cs")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","&&")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (2,"c"))) (CLit (CCharc '<')))) (CApply (CApply (CSymbol ("Prelude","==")) (CApply (CApply (CSymbol ("Prelude","take")) (CLit (CIntc 5))) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("Char","toLower"))) (CVar (3,"cs"))))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '/'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '>'))) (CSymbol ("Prelude","[]")))))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("HtmlParser","HElem")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]")))))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("HtmlParser","HText")) (CApply (CSymbol ("Prelude","reverse")) (CVar (1,"pre"))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("HtmlParser","HElem")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '/'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]"))))))) (CSymbol ("Prelude","[]")))) (CApply (CSymbol ("HtmlParser","scanHtmlString")) (CApply (CApply (CSymbol ("Prelude","drop")) (CLit (CIntc 5))) (CVar (3,"cs")))))))) (CApply (CApply (CSymbol ("HtmlParser","scanHtmlPre")) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (2,"c"))) (CVar (1,"pre")))) (CVar (3,"cs"))))] []]),
  CFunc ("HtmlParser","string2args") 1 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]])) (CRules CFlex [CRule [CPComb ("Prelude","[]") []] [(CSymbol ("Prelude","success"),CSymbol ("Prelude","[]"))] [],CRule [CPComb ("Prelude",":") [CPVar (0,"c"),CPVar (1,"cs")]] [(CSymbol ("Prelude","success"),CLetDecl [CLocalPat (CPComb ("Prelude","(,)") [CPVar (2,"arg1"),CPVar (3,"rest")]) (CApply (CApply (CSymbol ("HtmlParser","splitAtElement")) (CSymbol ("Char","isSpace"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (0,"c"))) (CVar (1,"cs")))) []] (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("HtmlParser","deleteApo")) (CApply (CApply (CSymbol ("HtmlParser","splitAtElement")) (CLambda [CPVar (4,"x0")] (CApply (CApply (CSymbol ("Prelude","==")) (CVar (4,"x0"))) (CLit (CCharc '='))))) (CVar (2,"arg1"))))) (CApply (CSymbol ("HtmlParser","string2args")) (CApply (CApply (CSymbol ("Prelude","dropWhile")) (CSymbol ("Char","isSpace"))) (CVar (3,"rest"))))))] []]),
  CFunc ("HtmlParser","deleteApo") 1 Private (CFuncType (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]) (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]])) (CRules CFlex [CRule [CPComb ("Prelude","(,)") [CPVar (0,"tag"),CPComb ("Prelude","[]") []]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("Char","toLower"))) (CVar (0,"tag")))) (CSymbol ("Prelude","[]")))] [],CRule [CPComb ("Prelude","(,)") [CPVar (1,"tag"),CPComb ("Prelude",":") [CPVar (2,"c"),CPVar (3,"cs")]]] [(CApply (CApply (CSymbol ("Prelude","==")) (CVar (2,"c"))) (CLit (CCharc '"')),CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("Char","toLower"))) (CVar (1,"tag")))) (CApply (CSymbol ("HtmlParser","deleteLastApo")) (CVar (3,"cs")))),(CApply (CApply (CSymbol ("Prelude","==")) (CVar (2,"c"))) (CLit (CCharc '\'')),CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("Char","toLower"))) (CVar (1,"tag")))) (CApply (CSymbol ("HtmlParser","deleteLastApo")) (CVar (3,"cs")))),(CSymbol ("Prelude","otherwise"),CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("Char","toLower"))) (CVar (1,"tag")))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (2,"c"))) (CVar (3,"cs"))))] []]),
  CFunc ("HtmlParser","deleteLastApo") 1 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CRules CFlex [CRule [CPComb ("Prelude","[]") []] [(CSymbol ("Prelude","success"),CSymbol ("Prelude","[]"))] [],CRule [CPComb ("Prelude",":") [CPVar (0,"c"),CPComb ("Prelude","[]") []]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","||")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (0,"c"))) (CLit (CCharc '"')))) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (0,"c"))) (CLit (CCharc '\''))))) (CSymbol ("Prelude","[]"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (0,"c"))) (CSymbol ("Prelude","[]"))))] [],CRule [CPComb ("Prelude",":") [CPVar (1,"c1"),CPComb ("Prelude",":") [CPVar (2,"c2"),CPVar (3,"cs")]]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",":")) (CVar (1,"c1"))) (CApply (CSymbol ("HtmlParser","deleteLastApo")) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (2,"c2"))) (CVar (3,"cs")))))] []]),
  CFunc ("HtmlParser","splitAtElement") 2 Private (CFuncType (CFuncType (CTVar (0,"a")) (CTCons ("Prelude","Bool") [])) (CFuncType (CTCons ("Prelude","[]") [CTVar (0,"a")]) (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTVar (0,"a")],CTCons ("Prelude","[]") [CTVar (0,"a")]]))) (CRules CFlex [CRule [CPVar (0,"_"),CPComb ("Prelude","[]") []] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","(,)")) (CSymbol ("Prelude","[]"))) (CSymbol ("Prelude","[]")))] [],CRule [CPVar (1,"p"),CPComb ("Prelude",":") [CPVar (2,"c"),CPVar (3,"cs")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CVar (1,"p")) (CVar (2,"c")))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CSymbol ("Prelude","[]"))) (CVar (3,"cs")))) (CLetDecl [CLocalPat (CPComb ("Prelude","(,)") [CPVar (4,"first"),CPVar (5,"rest")]) (CApply (CApply (CSymbol ("HtmlParser","splitAtElement")) (CVar (1,"p"))) (CVar (3,"cs"))) []] (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (2,"c"))) (CVar (4,"first")))) (CVar (5,"rest")))))] []]),
  CFunc ("HtmlParser","skipFirstNewLine") 1 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CRules CFlex [CRule [CPComb ("Prelude","[]") []] [(CSymbol ("Prelude","success"),CSymbol ("Prelude","[]"))] [],CRule [CPComb ("Prelude",":") [CPVar (0,"c"),CPVar (1,"cs")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (0,"c"))) (CLit (CCharc '\n')))) (CVar (1,"cs"))) (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CSymbol ("Char","isSpace")) (CVar (0,"c")))) (CApply (CSymbol ("HtmlParser","skipFirstNewLine")) (CVar (1,"cs")))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (0,"c"))) (CVar (1,"cs")))))] []])]
 []
