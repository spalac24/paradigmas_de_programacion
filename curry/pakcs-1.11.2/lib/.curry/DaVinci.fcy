Prog "DaVinci" ["List","Ports","Prelude"] [TypeSyn ("DaVinci","DvType") Private [] (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]),TypeSyn ("DaVinci","DvWindow") Public [] (TCons ("Ports","Port") [TCons ("DaVinci","DvScheduleMsg") []]),Type ("DaVinci","DvId") Public [] [Cons ("DaVinci","DvId") 1 Private [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]],Type ("DaVinci","DvCmd") Private [] [Cons ("DaVinci","DvGraphCmd") 1 Private [TCons ("DaVinci","DvGraphCmd") []],Cons ("DaVinci","DvMenuCmd") 1 Private [TCons ("DaVinci","DvMenuCmd") []],Cons ("DaVinci","DvNothing") 0 Private []],Type ("DaVinci","DvGraphCmd") Private [] [Cons ("DaVinci","DvNewGraph") 1 Private [TCons ("DaVinci","DvGraph") []],Cons ("DaVinci","DvNewPlaced") 1 Private [TCons ("DaVinci","DvGraph") []],Cons ("DaVinci","DvUpdate") 2 Private [TCons ("Prelude","[]") [TCons ("DaVinci","DvNodeUpdate") []],TCons ("Prelude","[]") [TCons ("DaVinci","DvEdgeUpdate") []]],Cons ("DaVinci","DvChangeAttr") 1 Private [TCons ("Prelude","[]") [TCons ("DaVinci","DvAttrChange") []]],Cons ("DaVinci","DvUpdateChangeAttr") 3 Private [TCons ("Prelude","[]") [TCons ("DaVinci","DvNodeUpdate") []],TCons ("Prelude","[]") [TCons ("DaVinci","DvEdgeUpdate") []],TCons ("Prelude","[]") [TCons ("DaVinci","DvAttrChange") []]]],Type ("DaVinci","DvMenuCmd") Private [] [Cons ("DaVinci","DvFile") 1 Private [TCons ("DaVinci","DvFileCmd") []]],Type ("DaVinci","DvFileCmd") Private [] [Cons ("DaVinci","DvNew") 0 Private [],Cons ("DaVinci","DvOpenGraph") 1 Private [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],Cons ("DaVinci","DvOpenGraphPlaced") 1 Private [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],Cons ("DaVinci","DvOpenStatus") 1 Private [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],Cons ("DaVinci","DvSaveGraph") 1 Private [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],Cons ("DaVinci","DvSaveStatus") 1 Private [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],Cons ("DaVinci","DvPrint") 1 Private [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],Cons ("DaVinci","DvPrintNoName") 0 Private [],Cons ("DaVinci","DvClose") 0 Private [],Cons ("DaVinci","DvExit") 0 Private []],Type ("DaVinci","DvGraph") Public [] [Cons ("DaVinci","DvGraph") 1 Private [TCons ("Prelude","[]") [TCons ("DaVinci","DvNode") []]]],Type ("DaVinci","DvNode") Public [] [Cons ("DaVinci","DvNode") 5 Private [TCons ("DaVinci","DvId") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("DaVinci","DvAttribute") []],TCons ("Prelude","[]") [TCons ("DaVinci","DvEdge") []],TCons ("Prelude","[]") [TCons ("DaVinci","DvEventH") []]],Cons ("DaVinci","DvNodeRef") 1 Private [TCons ("DaVinci","DvId") []]],Type ("DaVinci","DvEdge") Public [] [Cons ("DaVinci","DvEdge") 5 Private [TCons ("DaVinci","DvId") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("DaVinci","DvAttribute") []],TCons ("DaVinci","DvNode") [],TCons ("Prelude","[]") [TCons ("DaVinci","DvEventH") []]]],Type ("DaVinci","DvEventH") Private [] [Cons ("DaVinci","DvClick") 1 Private [FuncType (TCons ("Ports","Port") [TCons ("DaVinci","DvScheduleMsg") []]) (TCons ("Prelude","Success") [])]],Type ("DaVinci","DvAttribute") Private [] [Cons ("DaVinci","DvAttribute") 2 Private [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]],Type ("DaVinci","DvNodeUpdate") Private [] [Cons ("DaVinci","DvDeleteNode") 1 Private [TCons ("DaVinci","DvId") []],Cons ("DaVinci","DvNewNode") 4 Private [TCons ("DaVinci","DvId") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("DaVinci","DvAttribute") []],TCons ("Prelude","[]") [TCons ("DaVinci","DvEventH") []]]],Type ("DaVinci","DvEdgeUpdate") Private [] [Cons ("DaVinci","DvDeleteEdge") 1 Private [TCons ("DaVinci","DvId") []],Cons ("DaVinci","DvNewEdge") 6 Private [TCons ("DaVinci","DvId") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("DaVinci","DvAttribute") []],TCons ("DaVinci","DvId") [],TCons ("DaVinci","DvId") [],TCons ("Prelude","[]") [TCons ("DaVinci","DvEventH") []]],Cons ("DaVinci","DvNewEdgeBehind") 6 Private [TCons ("DaVinci","DvId") [],TCons ("DaVinci","DvId") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("DaVinci","DvAttribute") []],TCons ("DaVinci","DvId") [],TCons ("DaVinci","DvId") []]],Type ("DaVinci","DvAttrChange") Private [] [Cons ("DaVinci","DvNodeAttrChange") 2 Private [TCons ("DaVinci","DvId") [],TCons ("Prelude","[]") [TCons ("DaVinci","DvAttribute") []]],Cons ("DaVinci","DvEdgeAttrChange") 2 Private [TCons ("DaVinci","DvId") [],TCons ("Prelude","[]") [TCons ("DaVinci","DvAttribute") []]]],Type ("DaVinci","DvScheduleMsg") Public [] [Cons ("DaVinci","DvAnswer") 1 Private [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],Cons ("DaVinci","DvCmdMsg") 1 Private [TCons ("DaVinci","DvCmd") []],Cons ("DaVinci","DvSetEvent") 2 Private [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("DaVinci","DvEventH") []]]] [Func ("DaVinci","dvStartCmd") 0 Private (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (Rule [] (Let [(1,Comb ConsCall ("Prelude",":") [Lit (Charc  '/'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  '/'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'V'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  '3'),Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude",":") [Lit (Charc  '0'),Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude",":") [Lit (Charc  '2'),Comb ConsCall ("Prelude",":") [Lit (Charc  '/'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]])] (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'D'),Comb ConsCall ("Prelude",":") [Lit (Charc  'A'),Comb ConsCall ("Prelude",":") [Lit (Charc  'V'),Comb ConsCall ("Prelude",":") [Lit (Charc  'I'),Comb ConsCall ("Prelude",":") [Lit (Charc  'N'),Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'I'),Comb ConsCall ("Prelude",":") [Lit (Charc  'H'),Comb ConsCall ("Prelude",":") [Lit (Charc  'O'),Comb ConsCall ("Prelude",":") [Lit (Charc  'M'),Comb ConsCall ("Prelude",":") [Lit (Charc  'E'),Comb ConsCall ("Prelude",":") [Lit (Charc  '='),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]],Comb FuncCall ("Prelude","++") [Var 1,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '&'),Comb ConsCall ("Prelude",":") [Lit (Charc  '&'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'D'),Comb ConsCall ("Prelude",":") [Lit (Charc  'A'),Comb ConsCall ("Prelude",":") [Lit (Charc  'V'),Comb ConsCall ("Prelude",":") [Lit (Charc  'I'),Comb ConsCall ("Prelude",":") [Lit (Charc  'N'),Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'I'),Comb ConsCall ("Prelude",":") [Lit (Charc  'H'),Comb ConsCall ("Prelude",":") [Lit (Charc  'O'),Comb ConsCall ("Prelude",":") [Lit (Charc  'M'),Comb ConsCall ("Prelude",":") [Lit (Charc  'E'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '&'),Comb ConsCall ("Prelude",":") [Lit (Charc  '&'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("Prelude","++") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc  '/'),Comb ConsCall ("Prelude",":") [Lit (Charc  'b'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  '/'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'V'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]))),Func ("DaVinci","dvDisplay") 1 Public (FuncType (TCons ("DaVinci","DvGraph") []) (TCons ("Prelude","IO") [TCons ("Prelude","()") []])) (Rule [1] (Comb FuncCall ("DaVinci","dvDisplayInit") [Var 1,Comb (FuncPartCall 1) ("DaVinci","dvDisplay._#lambda1") []])),Func ("DaVinci","dvDisplay._#lambda1") 1 Private (FuncType (TCons ("Ports","Port") [TCons ("DaVinci","DvScheduleMsg") []]) (TCons ("Prelude","Success") [])) (Rule [1] (Comb FuncCall ("Prelude","success") [])),Func ("DaVinci","dvDisplayInit") 2 Public (FuncType (TCons ("DaVinci","DvGraph") []) (FuncType (FuncType (TCons ("Ports","Port") [TCons ("DaVinci","DvScheduleMsg") []]) (TCons ("Prelude","Success") [])) (TCons ("Prelude","IO") [TCons ("Prelude","()") []]))) (Rule [1,2] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("DaVinci","openDV") [],Comb (FuncPartCall 1) ("DaVinci","dvDisplayInit.display.10") [Var 2,Var 1]])),Func ("DaVinci","dvDisplayInit.display.10") 3 Private (FuncType (FuncType (TCons ("Ports","Port") [TCons ("DaVinci","DvScheduleMsg") []]) (TCons ("Prelude","Success") [])) (FuncType (TCons ("DaVinci","DvGraph") []) (FuncType (TCons ("Ports","Port") [TCons ("Ports","SP_Msg") []]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []])))) (Rule [1,2,3] (Comb FuncCall ("Prelude","cond") [Comb FuncCall ("DaVinci","initDvSchedule") [Var 2,Var 3,Var 1],Comb FuncCall ("Prelude","done") []])),Func ("DaVinci","dvNewGraph") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("DaVinci","DvNode") []]) (TCons ("DaVinci","DvGraph") [])) (Rule [1] (Comb ConsCall ("DaVinci","DvGraph") [Var 1])),Func ("DaVinci","dvSimpleNode") 3 Public (FuncType (TCons ("DaVinci","DvId") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (FuncType (TCons ("Ports","Port") [TCons ("DaVinci","DvScheduleMsg") []]) (TCons ("Prelude","Success") [])) (TCons ("DaVinci","DvNode") [])))) (Rule [1,2,3] (Comb ConsCall ("DaVinci","DvNode") [Var 1,Comb ConsCall ("Prelude","[]") [],Comb ConsCall ("Prelude",":") [Comb ConsCall ("DaVinci","DvAttribute") [Comb ConsCall ("Prelude",":") [Lit (Charc  'O'),Comb ConsCall ("Prelude",":") [Lit (Charc  'B'),Comb ConsCall ("Prelude",":") [Lit (Charc  'J'),Comb ConsCall ("Prelude",":") [Lit (Charc  'E'),Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'T'),Comb ConsCall ("Prelude","[]") []]]]]]],Var 2],Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude","[]") [],Comb ConsCall ("Prelude",":") [Comb ConsCall ("DaVinci","DvClick") [Var 3],Comb ConsCall ("Prelude","[]") []]])),Func ("DaVinci","dvNodeWithEdges") 4 Public (FuncType (TCons ("DaVinci","DvId") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("DaVinci","DvEdge") []]) (FuncType (FuncType (TCons ("Ports","Port") [TCons ("DaVinci","DvScheduleMsg") []]) (TCons ("Prelude","Success") [])) (TCons ("DaVinci","DvNode") []))))) (Rule [1,2,3,4] (Comb ConsCall ("DaVinci","DvNode") [Var 1,Comb ConsCall ("Prelude","[]") [],Comb ConsCall ("Prelude",":") [Comb ConsCall ("DaVinci","DvAttribute") [Comb ConsCall ("Prelude",":") [Lit (Charc  'O'),Comb ConsCall ("Prelude",":") [Lit (Charc  'B'),Comb ConsCall ("Prelude",":") [Lit (Charc  'J'),Comb ConsCall ("Prelude",":") [Lit (Charc  'E'),Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'T'),Comb ConsCall ("Prelude","[]") []]]]]]],Var 2],Comb ConsCall ("Prelude","[]") []],Var 3,Comb ConsCall ("Prelude",":") [Comb ConsCall ("DaVinci","DvClick") [Var 4],Comb ConsCall ("Prelude","[]") []]])),Func ("DaVinci","dvSimpleEdge") 3 Public (FuncType (TCons ("DaVinci","DvId") []) (FuncType (TCons ("DaVinci","DvId") []) (FuncType (FuncType (TCons ("Ports","Port") [TCons ("DaVinci","DvScheduleMsg") []]) (TCons ("Prelude","Success") [])) (TCons ("DaVinci","DvEdge") [])))) (Rule [1,2,3] (Comb FuncCall ("Prelude","cond") [Free [4] (Comb FuncCall ("Prelude","=:=") [Var 2,Comb ConsCall ("DaVinci","DvId") [Var 4]]),Comb ConsCall ("DaVinci","DvEdge") [Var 1,Comb ConsCall ("Prelude","[]") [],Comb ConsCall ("Prelude","[]") [],Comb ConsCall ("DaVinci","DvNodeRef") [Var 2],Comb ConsCall ("Prelude",":") [Comb ConsCall ("DaVinci","DvClick") [Var 3],Comb ConsCall ("Prelude","[]") []]]])),Func ("DaVinci","dvSetNodeColor") 3 Public (FuncType (TCons ("DaVinci","DvId") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Ports","Port") [TCons ("DaVinci","DvScheduleMsg") []]) (TCons ("Prelude","Success") [])))) (Rule [1,2,3] (Comb FuncCall ("Ports","send") [Comb ConsCall ("DaVinci","DvCmdMsg") [Comb ConsCall ("DaVinci","DvGraphCmd") [Comb ConsCall ("DaVinci","DvChangeAttr") [Comb ConsCall ("Prelude",":") [Comb ConsCall ("DaVinci","DvNodeAttrChange") [Var 1,Comb ConsCall ("Prelude",":") [Comb ConsCall ("DaVinci","DvAttribute") [Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'O'),Comb ConsCall ("Prelude",":") [Lit (Charc  'L'),Comb ConsCall ("Prelude",":") [Lit (Charc  'O'),Comb ConsCall ("Prelude",":") [Lit (Charc  'R'),Comb ConsCall ("Prelude","[]") []]]]]],Var 2],Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude","[]") []]]]],Var 3])),Func ("DaVinci","dvAddNode") 4 Public (FuncType (TCons ("DaVinci","DvId") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (FuncType (TCons ("Ports","Port") [TCons ("DaVinci","DvScheduleMsg") []]) (TCons ("Prelude","Success") [])) (FuncType (TCons ("Ports","Port") [TCons ("DaVinci","DvScheduleMsg") []]) (TCons ("Prelude","Success") []))))) (Rule [1,2,3,4] (Comb FuncCall ("Ports","send") [Comb ConsCall ("DaVinci","DvCmdMsg") [Comb ConsCall ("DaVinci","DvGraphCmd") [Comb ConsCall ("DaVinci","DvUpdate") [Comb ConsCall ("Prelude",":") [Comb ConsCall ("DaVinci","DvNewNode") [Var 1,Comb ConsCall ("Prelude","[]") [],Comb ConsCall ("Prelude",":") [Comb ConsCall ("DaVinci","DvAttribute") [Comb ConsCall ("Prelude",":") [Lit (Charc  'O'),Comb ConsCall ("Prelude",":") [Lit (Charc  'B'),Comb ConsCall ("Prelude",":") [Lit (Charc  'J'),Comb ConsCall ("Prelude",":") [Lit (Charc  'E'),Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'T'),Comb ConsCall ("Prelude","[]") []]]]]]],Var 2],Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude",":") [Comb ConsCall ("DaVinci","DvClick") [Var 3],Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude","[]") []]]],Var 4])),Func ("DaVinci","dvSetEdgeColor") 3 Public (FuncType (TCons ("DaVinci","DvId") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Ports","Port") [TCons ("DaVinci","DvScheduleMsg") []]) (TCons ("Prelude","Success") [])))) (Rule [1,2,3] (Comb FuncCall ("Ports","send") [Comb ConsCall ("DaVinci","DvCmdMsg") [Comb ConsCall ("DaVinci","DvGraphCmd") [Comb ConsCall ("DaVinci","DvChangeAttr") [Comb ConsCall ("Prelude",":") [Comb ConsCall ("DaVinci","DvEdgeAttrChange") [Var 1,Comb ConsCall ("Prelude",":") [Comb ConsCall ("DaVinci","DvAttribute") [Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'O'),Comb ConsCall ("Prelude",":") [Lit (Charc  'L'),Comb ConsCall ("Prelude",":") [Lit (Charc  'O'),Comb ConsCall ("Prelude",":") [Lit (Charc  'R'),Comb ConsCall ("Prelude","[]") []]]]]],Var 2],Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude","[]") []]]]],Var 3])),Func ("DaVinci","dvAddEdge") 5 Public (FuncType (TCons ("DaVinci","DvId") []) (FuncType (TCons ("DaVinci","DvId") []) (FuncType (TCons ("DaVinci","DvId") []) (FuncType (FuncType (TCons ("Ports","Port") [TCons ("DaVinci","DvScheduleMsg") []]) (TCons ("Prelude","Success") [])) (FuncType (TCons ("Ports","Port") [TCons ("DaVinci","DvScheduleMsg") []]) (TCons ("Prelude","Success") [])))))) (Rule [1,2,3,4,5] (Comb FuncCall ("Ports","send") [Comb ConsCall ("DaVinci","DvCmdMsg") [Comb ConsCall ("DaVinci","DvGraphCmd") [Comb ConsCall ("DaVinci","DvUpdate") [Comb ConsCall ("Prelude","[]") [],Comb ConsCall ("Prelude",":") [Comb ConsCall ("DaVinci","DvNewEdge") [Var 1,Comb ConsCall ("Prelude","[]") [],Comb ConsCall ("Prelude","[]") [],Var 2,Var 3,Comb ConsCall ("Prelude",":") [Comb ConsCall ("DaVinci","DvClick") [Var 4],Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude","[]") []]]]],Var 5])),Func ("DaVinci","dvDelEdge") 2 Public (FuncType (TCons ("DaVinci","DvId") []) (FuncType (TCons ("Ports","Port") [TCons ("DaVinci","DvScheduleMsg") []]) (TCons ("Prelude","Success") []))) (Rule [1,2] (Comb FuncCall ("Ports","send") [Comb ConsCall ("DaVinci","DvCmdMsg") [Comb ConsCall ("DaVinci","DvGraphCmd") [Comb ConsCall ("DaVinci","DvUpdate") [Comb ConsCall ("Prelude","[]") [],Comb ConsCall ("Prelude",":") [Comb ConsCall ("DaVinci","DvDeleteEdge") [Var 1],Comb ConsCall ("Prelude","[]") []]]]],Var 2])),Func ("DaVinci","dvSetClickHandler") 3 Public (FuncType (TCons ("DaVinci","DvId") []) (FuncType (FuncType (TCons ("Ports","Port") [TCons ("DaVinci","DvScheduleMsg") []]) (TCons ("Prelude","Success") [])) (FuncType (TCons ("Ports","Port") [TCons ("DaVinci","DvScheduleMsg") []]) (TCons ("Prelude","Success") [])))) (Rule [1,2,3] (Case  Flex (Var 1) [Branch (Pattern ("DaVinci","DvId") [4]) (Comb FuncCall ("Ports","send") [Comb ConsCall ("DaVinci","DvSetEvent") [Var 4,Comb ConsCall ("DaVinci","DvClick") [Var 2]],Var 3])])),Func ("DaVinci","dvEmptyH") 1 Public (FuncType (TCons ("Ports","Port") [TCons ("DaVinci","DvScheduleMsg") []]) (TCons ("Prelude","Success") [])) (Rule [1] (Comb FuncCall ("Prelude","success") [])),Func ("DaVinci","dvCmd2DaVinci") 2 Private (FuncType (TCons ("DaVinci","DvCmd") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("DaVinci","DvEventH") []]],TCons ("Prelude","Int") []]))) (Rule [1,2] (Case  Flex (Var 1) [Branch (Pattern ("DaVinci","DvGraphCmd") [3]) (Let [(4,Comb FuncCall ("DaVinci","dvGraphCmd2DaVinci") [Var 3,Var 2]),(5,Comb FuncCall ("DaVinci","dvCmd2DaVinci._#selFP2#ncmd") [Var 4]),(6,Comb FuncCall ("DaVinci","dvCmd2DaVinci._#selFP3#evs") [Var 4]),(7,Comb FuncCall ("DaVinci","dvCmd2DaVinci._#selFP4#nidindex") [Var 4])] (Comb ConsCall ("Prelude","(,,)") [Case  Rigid (Comb FuncCall ("Prelude","==") [Var 5,Comb ConsCall ("Prelude","[]") []]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb ConsCall ("Prelude","[]") []]]]]]],Comb FuncCall ("Prelude","++") [Var 5,Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude","[]") []]]])],Var 6,Var 7])),Branch (Pattern ("DaVinci","DvNothing") []) (Comb ConsCall ("Prelude","(,,)") [Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb ConsCall ("Prelude","[]") [],Var 2])])),Func ("DaVinci","dvCmd2DaVinci._#selFP2#ncmd") 1 Private (FuncType (TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("DaVinci","DvEventH") []]],TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,)") [2,3,4]) (Var 2)])),Func ("DaVinci","dvCmd2DaVinci._#selFP3#evs") 1 Private (FuncType (TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("DaVinci","DvEventH") []]],TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("DaVinci","DvEventH") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,)") [2,3,4]) (Var 3)])),Func ("DaVinci","dvCmd2DaVinci._#selFP4#nidindex") 1 Private (FuncType (TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("DaVinci","DvEventH") []]],TCons ("Prelude","Int") []]) (TCons ("Prelude","Int") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,)") [2,3,4]) (Var 4)])),Func ("DaVinci","dvGraphCmd2DaVinci") 2 Private (FuncType (TCons ("DaVinci","DvGraphCmd") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("DaVinci","DvEventH") []]],TCons ("Prelude","Int") []]))) (Rule [1,2] (Case  Flex (Var 1) [Branch (Pattern ("DaVinci","DvChangeAttr") [3]) (Comb ConsCall ("Prelude","(,,)") [Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]],Comb FuncCall ("Prelude","++") [Comb FuncCall ("DaVinci","dvChangeAttrs2DaVinci") [Var 3],Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude","[]") [],Var 2]),Branch (Pattern ("DaVinci","DvUpdate") [4,5]) (Let [(6,Comb FuncCall ("DaVinci","dvNodeUpdates2DaVinci") [Var 4,Var 2]),(7,Comb FuncCall ("DaVinci","dvGraphCmd2DaVinci._#selFP10#nnups") [Var 6]),(8,Comb FuncCall ("DaVinci","dvGraphCmd2DaVinci._#selFP11#nidindex") [Var 6]),(9,Comb FuncCall ("DaVinci","dvEdgeUpdates2DaVinci") [Var 5,Var 8]),(10,Comb FuncCall ("DaVinci","dvGraphCmd2DaVinci._#selFP7#neups") [Var 9]),(11,Comb FuncCall ("DaVinci","dvGraphCmd2DaVinci._#selFP8#nevs2") [Var 9]),(12,Comb FuncCall ("DaVinci","dvGraphCmd2DaVinci._#selFP9#nidindex2") [Var 9]),(13,Case  Rigid (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","==") [Var 7,Comb ConsCall ("Prelude",":") [Lit (Charc  '['),Comb ConsCall ("Prelude",":") [Lit (Charc  ']'),Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("Prelude","==") [Var 10,Comb ConsCall ("Prelude",":") [Lit (Charc  '['),Comb ConsCall ("Prelude",":") [Lit (Charc  ']'),Comb ConsCall ("Prelude","[]") []]]]]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb FuncCall ("Prelude","++") [Var 7,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ','),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Var 10,Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude","[]") []]]]]])])] (Comb ConsCall ("Prelude","(,,)") [Var 13,Var 11,Var 12]))])),Func ("DaVinci","dvGraphCmd2DaVinci._#selFP10#nnups") 1 Private (FuncType (TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("DaVinci","DvEventH") []]],TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,)") [2,3,4]) (Var 2)])),Func ("DaVinci","dvGraphCmd2DaVinci._#selFP11#nidindex") 1 Private (FuncType (TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("DaVinci","DvEventH") []]],TCons ("Prelude","Int") []]) (TCons ("Prelude","Int") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,)") [2,3,4]) (Var 4)])),Func ("DaVinci","dvGraphCmd2DaVinci._#selFP7#neups") 1 Private (FuncType (TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("DaVinci","DvEventH") []]],TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,)") [2,3,4]) (Var 2)])),Func ("DaVinci","dvGraphCmd2DaVinci._#selFP8#nevs2") 1 Private (FuncType (TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("DaVinci","DvEventH") []]],TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("DaVinci","DvEventH") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,)") [2,3,4]) (Var 3)])),Func ("DaVinci","dvGraphCmd2DaVinci._#selFP9#nidindex2") 1 Private (FuncType (TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("DaVinci","DvEventH") []]],TCons ("Prelude","Int") []]) (TCons ("Prelude","Int") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,)") [2,3,4]) (Var 4)])),Func ("DaVinci","dvChangeAttrs2DaVinci") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("DaVinci","DvAttrChange") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '['),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","concat") [Comb FuncCall ("List","intersperse") [Comb ConsCall ("Prelude",":") [Lit (Charc  ','),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("DaVinci","dvChangeAttr2DaVinci") [],Var 1]]],Comb ConsCall ("Prelude",":") [Lit (Charc  ']'),Comb ConsCall ("Prelude","[]") []]]])),Func ("DaVinci","dvChangeAttr2DaVinci") 1 Private (FuncType (TCons ("DaVinci","DvAttrChange") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("DaVinci","DvNodeAttrChange") [2,3]) (Case  Flex (Var 2) [Branch (Pattern ("DaVinci","DvId") [4]) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb ConsCall ("Prelude",":") [Lit (Charc  '"'),Comb ConsCall ("Prelude","[]") []]]]]]],Comb FuncCall ("Prelude","++") [Var 4,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '"'),Comb ConsCall ("Prelude",":") [Lit (Charc  ','),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude","++") [Comb FuncCall ("DaVinci","dvAttrs2DaVinci") [Var 3],Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude","[]") []]]]]])]),Branch (Pattern ("DaVinci","DvEdgeAttrChange") [5,6]) (Case  Flex (Var 5) [Branch (Pattern ("DaVinci","DvId") [7]) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb ConsCall ("Prelude",":") [Lit (Charc  '"'),Comb ConsCall ("Prelude","[]") []]]]]]],Comb FuncCall ("Prelude","++") [Var 7,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '"'),Comb ConsCall ("Prelude",":") [Lit (Charc  ','),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude","++") [Comb FuncCall ("DaVinci","dvAttrs2DaVinci") [Var 6],Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude","[]") []]]]]])])])),Func ("DaVinci","dvAttrs2DaVinci") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("DaVinci","DvAttribute") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '['),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","concat") [Comb FuncCall ("List","intersperse") [Comb ConsCall ("Prelude",":") [Lit (Charc  ','),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("DaVinci","dvAttrs2DaVinci.dvAttr2DaVinci.58") [],Var 1]]],Comb ConsCall ("Prelude",":") [Lit (Charc  ']'),Comb ConsCall ("Prelude","[]") []]]])),Func ("DaVinci","dvAttrs2DaVinci.dvAttr2DaVinci.58") 1 Private (FuncType (TCons ("DaVinci","DvAttribute") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("DaVinci","DvAttribute") [2,3]) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb ConsCall ("Prelude",":") [Lit (Charc  '"'),Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("Prelude","++") [Var 2,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '"'),Comb ConsCall ("Prelude",":") [Lit (Charc  ','),Comb ConsCall ("Prelude",":") [Lit (Charc  '"'),Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("Prelude","++") [Var 3,Comb ConsCall ("Prelude",":") [Lit (Charc  '"'),Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude","[]") []]]]]]])])),Func ("DaVinci","dvNodeUpdates2DaVinci") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("DaVinci","DvNodeUpdate") []]) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("DaVinci","DvEventH") []]],TCons ("Prelude","Int") []]))) (Rule [1,2] (Comb FuncCall ("DaVinci","dvList2DaVinci") [Var 1,Comb (FuncPartCall 2) ("DaVinci","dvNodeUpdate2DaVinci") [],Var 2])),Func ("DaVinci","dvNodeUpdate2DaVinci") 2 Private (FuncType (TCons ("DaVinci","DvNodeUpdate") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("DaVinci","DvEventH") []]],TCons ("Prelude","Int") []]))) (Rule [1,2] (Case  Flex (Var 1) [Branch (Pattern ("DaVinci","DvDeleteNode") [3]) (Case  Flex (Var 3) [Branch (Pattern ("DaVinci","DvId") [4]) (Comb ConsCall ("Prelude","(,,)") [Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb ConsCall ("Prelude",":") [Lit (Charc  '"'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]],Comb FuncCall ("Prelude","++") [Var 4,Comb ConsCall ("Prelude",":") [Lit (Charc  '"'),Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude","[]") [],Var 2])]),Branch (Pattern ("DaVinci","DvNewNode") [5,6,7,8]) (Comb FuncCall ("Prelude","cond") [Comb FuncCall ("Prelude","=:=") [Var 5,Comb ConsCall ("DaVinci","DvId") [Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("Prelude","show") [Var 2]]]],Comb ConsCall ("Prelude","(,,)") [Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb ConsCall ("Prelude",":") [Lit (Charc  '"'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("Prelude","show") [Var 2]],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '"'),Comb ConsCall ("Prelude",":") [Lit (Charc  ','),Comb ConsCall ("Prelude",":") [Lit (Charc  '"'),Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("Prelude","++") [Var 6,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '"'),Comb ConsCall ("Prelude",":") [Lit (Charc  ','),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude","++") [Comb FuncCall ("DaVinci","dvAttrs2DaVinci") [Var 7],Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb FuncCall ("DaVinci","dvEvents2DaVinci") [Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("Prelude","show") [Var 2]],Var 8],Comb FuncCall ("Prelude","+") [Var 2,Lit (Intc  1)]]])])),Func ("DaVinci","dvEdgeUpdates2DaVinci") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("DaVinci","DvEdgeUpdate") []]) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("DaVinci","DvEventH") []]],TCons ("Prelude","Int") []]))) (Rule [1,2] (Comb FuncCall ("DaVinci","dvList2DaVinci") [Var 1,Comb (FuncPartCall 2) ("DaVinci","dvEdgeUpdate2DaVinci") [],Var 2])),Func ("DaVinci","dvEdgeUpdate2DaVinci") 2 Private (FuncType (TCons ("DaVinci","DvEdgeUpdate") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("DaVinci","DvEventH") []]],TCons ("Prelude","Int") []]))) (Rule [1,2] (Case  Flex (Var 1) [Branch (Pattern ("DaVinci","DvDeleteEdge") [3]) (Case  Flex (Var 3) [Branch (Pattern ("DaVinci","DvId") [4]) (Comb ConsCall ("Prelude","(,,)") [Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb ConsCall ("Prelude",":") [Lit (Charc  '"'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]],Comb FuncCall ("Prelude","++") [Var 4,Comb ConsCall ("Prelude",":") [Lit (Charc  '"'),Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude","[]") [],Var 2])]),Branch (Pattern ("DaVinci","DvNewEdge") [5,6,7,8,9,10]) (Case  Flex (Var 8) [Branch (Pattern ("DaVinci","DvId") [11]) (Case  Flex (Var 9) [Branch (Pattern ("DaVinci","DvId") [12]) (Let [(13,Comb ConsCall ("Prelude","(,,)") [Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb ConsCall ("Prelude",":") [Lit (Charc  '"'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("Prelude","show") [Var 2]],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '"'),Comb ConsCall ("Prelude",":") [Lit (Charc  ','),Comb ConsCall ("Prelude",":") [Lit (Charc  '"'),Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("Prelude","++") [Var 6,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '"'),Comb ConsCall ("Prelude",":") [Lit (Charc  ','),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude","++") [Comb FuncCall ("DaVinci","dvAttrs2DaVinci") [Var 7],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ','),Comb ConsCall ("Prelude",":") [Lit (Charc  '"'),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude","++") [Var 11,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '"'),Comb ConsCall ("Prelude",":") [Lit (Charc  ','),Comb ConsCall ("Prelude",":") [Lit (Charc  '"'),Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("Prelude","++") [Var 12,Comb ConsCall ("Prelude",":") [Lit (Charc  '"'),Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]],Comb FuncCall ("DaVinci","dvEvents2DaVinci") [Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("Prelude","show") [Var 2]],Var 10],Comb FuncCall ("Prelude","+") [Var 2,Lit (Intc  1)]])] (Comb FuncCall ("Prelude","cond") [Comb FuncCall ("Prelude","=:=") [Var 5,Comb ConsCall ("DaVinci","DvId") [Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("Prelude","show") [Var 2]]]],Var 13]))])])])),Func ("DaVinci","dvGraph2DaVinci") 2 Private (FuncType (TCons ("DaVinci","DvGraph") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("DaVinci","DvEventH") []]],TCons ("Prelude","Int") []]))) (Rule [1,2] (Case  Flex (Var 1) [Branch (Pattern ("DaVinci","DvGraph") [3]) (Comb FuncCall ("DaVinci","dvNodes2DaVinci") [Var 3,Var 2])])),Func ("DaVinci","dvNodes2DaVinci") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("DaVinci","DvNode") []]) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("DaVinci","DvEventH") []]],TCons ("Prelude","Int") []]))) (Rule [1,2] (Comb FuncCall ("DaVinci","dvList2DaVinci") [Var 1,Comb (FuncPartCall 2) ("DaVinci","dvNode2DaVinci") [],Var 2])),Func ("DaVinci","dvNode2DaVinci") 2 Private (FuncType (TCons ("DaVinci","DvNode") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("DaVinci","DvEventH") []]],TCons ("Prelude","Int") []]))) (Rule [1,2] (Case  Flex (Var 1) [Branch (Pattern ("DaVinci","DvNode") [3,4,5,6,7]) (Let [(8,Comb FuncCall ("DaVinci","dvEdges2DaVinci") [Var 6,Comb FuncCall ("Prelude","+") [Var 2,Lit (Intc  1)]]),(9,Comb FuncCall ("DaVinci","dvNode2DaVinci._#selFP13#ncmd") [Var 8]),(10,Comb FuncCall ("DaVinci","dvNode2DaVinci._#selFP14#nevs") [Var 8]),(11,Comb FuncCall ("DaVinci","dvNode2DaVinci._#selFP15#nidindex") [Var 8]),(12,Comb ConsCall ("Prelude","(,,)") [Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb ConsCall ("Prelude",":") [Lit (Charc  '"'),Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("Prelude","show") [Var 2]],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '"'),Comb ConsCall ("Prelude",":") [Lit (Charc  ','),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb ConsCall ("Prelude",":") [Lit (Charc  '"'),Comb ConsCall ("Prelude","[]") []]]]]],Comb FuncCall ("Prelude","++") [Var 4,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '"'),Comb ConsCall ("Prelude",":") [Lit (Charc  ','),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude","++") [Comb FuncCall ("DaVinci","dvAttrs2DaVinci") [Var 5],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ','),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Var 9,Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]],Comb FuncCall ("Prelude","++") [Comb FuncCall ("DaVinci","dvEvents2DaVinci") [Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("Prelude","show") [Var 2]],Var 7],Var 10],Var 11])] (Comb FuncCall ("Prelude","cond") [Comb FuncCall ("Prelude","=:=") [Var 3,Comb ConsCall ("DaVinci","DvId") [Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("Prelude","show") [Var 2]]]],Var 12])),Branch (Pattern ("DaVinci","DvNodeRef") [13]) (Case  Flex (Var 13) [Branch (Pattern ("DaVinci","DvId") [14]) (Comb ConsCall ("Prelude","(,,)") [Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb ConsCall ("Prelude",":") [Lit (Charc  '"'),Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("Prelude","++") [Var 14,Comb ConsCall ("Prelude",":") [Lit (Charc  '"'),Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude","[]") [],Var 2])])])),Func ("DaVinci","dvNode2DaVinci._#selFP13#ncmd") 1 Private (FuncType (TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("DaVinci","DvEventH") []]],TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,)") [2,3,4]) (Var 2)])),Func ("DaVinci","dvNode2DaVinci._#selFP14#nevs") 1 Private (FuncType (TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("DaVinci","DvEventH") []]],TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("DaVinci","DvEventH") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,)") [2,3,4]) (Var 3)])),Func ("DaVinci","dvNode2DaVinci._#selFP15#nidindex") 1 Private (FuncType (TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("DaVinci","DvEventH") []]],TCons ("Prelude","Int") []]) (TCons ("Prelude","Int") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,)") [2,3,4]) (Var 4)])),Func ("DaVinci","dvEdges2DaVinci") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("DaVinci","DvEdge") []]) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("DaVinci","DvEventH") []]],TCons ("Prelude","Int") []]))) (Rule [1,2] (Comb FuncCall ("DaVinci","dvList2DaVinci") [Var 1,Comb (FuncPartCall 2) ("DaVinci","dvEdge2DaVinci") [],Var 2])),Func ("DaVinci","dvEdge2DaVinci") 2 Private (FuncType (TCons ("DaVinci","DvEdge") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("DaVinci","DvEventH") []]],TCons ("Prelude","Int") []]))) (Rule [1,2] (Case  Flex (Var 1) [Branch (Pattern ("DaVinci","DvEdge") [3,4,5,6,7]) (Let [(8,Comb FuncCall ("DaVinci","dvNode2DaVinci") [Var 6,Comb FuncCall ("Prelude","+") [Var 2,Lit (Intc  1)]]),(9,Comb FuncCall ("DaVinci","dvEdge2DaVinci._#selFP17#ncmd") [Var 8]),(10,Comb FuncCall ("DaVinci","dvEdge2DaVinci._#selFP18#nidindex") [Var 8]),(11,Comb ConsCall ("Prelude","(,,)") [Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb ConsCall ("Prelude",":") [Lit (Charc  '"'),Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("Prelude","show") [Var 2]],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '"'),Comb ConsCall ("Prelude",":") [Lit (Charc  ','),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb ConsCall ("Prelude",":") [Lit (Charc  '"'),Comb ConsCall ("Prelude","[]") []]]]]],Comb FuncCall ("Prelude","++") [Var 4,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '"'),Comb ConsCall ("Prelude",":") [Lit (Charc  ','),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude","++") [Comb FuncCall ("DaVinci","dvAttrs2DaVinci") [Var 5],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ','),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Var 9,Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]],Comb FuncCall ("DaVinci","dvEvents2DaVinci") [Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("Prelude","show") [Var 2]],Var 7],Var 10])] (Comb FuncCall ("Prelude","cond") [Comb FuncCall ("Prelude","=:=") [Var 3,Comb ConsCall ("DaVinci","DvId") [Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("Prelude","show") [Var 2]]]],Var 11]))])),Func ("DaVinci","dvEdge2DaVinci._#selFP17#ncmd") 1 Private (FuncType (TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("DaVinci","DvEventH") []]],TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,)") [2,3,4]) (Var 2)])),Func ("DaVinci","dvEdge2DaVinci._#selFP18#nidindex") 1 Private (FuncType (TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("DaVinci","DvEventH") []]],TCons ("Prelude","Int") []]) (TCons ("Prelude","Int") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,)") [2,3,4]) (Var 4)])),Func ("DaVinci","dvEvents2DaVinci") 2 Private (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TVar 1]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TVar 1]]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [3,4]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Var 1,Var 3],Comb FuncCall ("DaVinci","dvEvents2DaVinci") [Var 1,Var 4]])])),Func ("DaVinci","dvList2DaVinci") 3 Private (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (FuncType (TVar 0) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("DaVinci","DvEventH") []]],TCons ("Prelude","Int") []]))) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("DaVinci","DvEventH") []]],TCons ("Prelude","Int") []])))) (Rule [1,2,3] (Comb FuncCall ("DaVinci","dvList2DaVinci.aux.101") [Var 2,Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc  '['),Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude","[]") [],Var 3])),Func ("DaVinci","dvList2DaVinci.aux.101") 5 Private (FuncType (FuncType (TVar 48) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("DaVinci","DvEventH") []]],TCons ("Prelude","Int") []]))) (FuncType (TCons ("Prelude","[]") [TVar 48]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("DaVinci","DvEventH") []]]) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("DaVinci","DvEventH") []]],TCons ("Prelude","Int") []])))))) (Rule [1,2,3,4,5] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","(,,)") [Comb FuncCall ("Prelude","++") [Var 3,Comb ConsCall ("Prelude",":") [Lit (Charc  ']'),Comb ConsCall ("Prelude","[]") []]],Var 4,Var 5]),Branch (Pattern ("Prelude",":") [6,7]) (Let [(8,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 1,Var 6],Var 5]),(9,Comb FuncCall ("DaVinci","dvList2DaVinci.aux.101._#selFP20#ncmd") [Var 8]),(10,Comb FuncCall ("DaVinci","dvList2DaVinci.aux.101._#selFP21#nevs") [Var 8]),(11,Comb FuncCall ("DaVinci","dvList2DaVinci.aux.101._#selFP22#nidindex") [Var 8]),(12,Case  Rigid (Comb FuncCall ("Prelude","||") [Comb FuncCall ("Prelude","==") [Var 3,Comb ConsCall ("Prelude",":") [Lit (Charc  '['),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude","==") [Var 9,Comb ConsCall ("Prelude","[]") []]]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","++") [Var 3,Var 9]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","++") [Var 3,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ','),Comb ConsCall ("Prelude","[]") []],Var 9]])])] (Comb FuncCall ("DaVinci","dvList2DaVinci.aux.101") [Var 1,Var 7,Var 12,Comb FuncCall ("Prelude","++") [Var 4,Var 10],Var 11]))])),Func ("DaVinci","dvList2DaVinci.aux.101._#selFP20#ncmd") 1 Private (FuncType (TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("DaVinci","DvEventH") []]],TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,)") [2,3,4]) (Var 2)])),Func ("DaVinci","dvList2DaVinci.aux.101._#selFP21#nevs") 1 Private (FuncType (TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("DaVinci","DvEventH") []]],TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("DaVinci","DvEventH") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,)") [2,3,4]) (Var 3)])),Func ("DaVinci","dvList2DaVinci.aux.101._#selFP22#nidindex") 1 Private (FuncType (TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("DaVinci","DvEventH") []]],TCons ("Prelude","Int") []]) (TCons ("Prelude","Int") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,)") [2,3,4]) (Var 4)])),Func ("DaVinci","openDV") 0 Private (TCons ("Prelude","IO") [TCons ("Ports","Port") [TCons ("Ports","SP_Msg") []]]) (Rule [] (Comb FuncCall ("Ports","openProcessPort") [Comb FuncCall ("DaVinci","dvStartCmd") []])),Func ("DaVinci","initDvSchedule") 3 Private (FuncType (TCons ("DaVinci","DvGraph") []) (FuncType (TCons ("Ports","Port") [TCons ("Ports","SP_Msg") []]) (FuncType (FuncType (TCons ("Ports","Port") [TCons ("DaVinci","DvScheduleMsg") []]) (TCons ("Prelude","Success") [])) (TCons ("Prelude","Success") [])))) (Rule [1,2,3] (Let [(4,Comb FuncCall ("DaVinci","dvGraph2DaVinci") [Var 1,Lit (Intc  0)]),(5,Comb FuncCall ("DaVinci","initDvSchedule._#selFP24#cmd") [Var 4]),(6,Comb FuncCall ("DaVinci","initDvSchedule._#selFP25#evs") [Var 4]),(7,Comb FuncCall ("DaVinci","initDvSchedule._#selFP26#idindex") [Var 4])] (Free [8,9,10,11] (Comb FuncCall ("Prelude","&>") [Comb FuncCall ("Ports","send") [Comb ConsCall ("Ports","SP_GetLine") [Var 10],Var 2],Comb FuncCall ("Prelude","&>") [Comb FuncCall ("Ports","send") [Comb ConsCall ("Ports","SP_Put") [Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb ConsCall ("Prelude","[]") []]]]]]]]]]],Comb FuncCall ("Prelude","++") [Var 5,Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude","[]") []]]]]],Var 2],Comb FuncCall ("Prelude","&>") [Comb FuncCall ("Ports","send") [Comb ConsCall ("Ports","SP_GetLine") [Var 11],Var 2],Comb FuncCall ("Prelude","&>") [Comb FuncCall ("Ports","openPort") [Var 8,Var 9],Comb FuncCall ("Prelude","&>") [Comb FuncCall ("Prelude","apply") [Var 3,Var 8],Comb FuncCall ("Prelude","&") [Comb FuncCall ("DaVinci","dvSchedule") [Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Prelude","ensureNotFree") [],Comb FuncCall ("Prelude","ensureSpine") [Var 9]],Var 6,Var 7,Var 8,Var 2],Comb FuncCall ("DaVinci","dvAdaptor") [Var 8,Var 2]]]]]]])))),Func ("DaVinci","initDvSchedule._#selFP24#cmd") 1 Private (FuncType (TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("DaVinci","DvEventH") []]],TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,)") [2,3,4]) (Var 2)])),Func ("DaVinci","initDvSchedule._#selFP25#evs") 1 Private (FuncType (TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("DaVinci","DvEventH") []]],TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("DaVinci","DvEventH") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,)") [2,3,4]) (Var 3)])),Func ("DaVinci","initDvSchedule._#selFP26#idindex") 1 Private (FuncType (TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("DaVinci","DvEventH") []]],TCons ("Prelude","Int") []]) (TCons ("Prelude","Int") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,)") [2,3,4]) (Var 4)])),Func ("DaVinci","dvSchedule") 5 Private (FuncType (TCons ("Prelude","[]") [TCons ("DaVinci","DvScheduleMsg") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("DaVinci","DvEventH") []]]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Ports","Port") [TCons ("DaVinci","DvScheduleMsg") []]) (FuncType (TCons ("Ports","Port") [TCons ("Ports","SP_Msg") []]) (TCons ("Prelude","Success") [])))))) (Rule [1,2,3,4,5] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 6) [Branch (Pattern ("DaVinci","DvCmdMsg") [8]) (Let [(9,Comb FuncCall ("DaVinci","dvCmd2DaVinci") [Var 8,Var 3]),(10,Comb FuncCall ("DaVinci","dvSchedule._#selFP28#ncmd") [Var 9]),(11,Comb FuncCall ("DaVinci","dvSchedule._#selFP29#nevs") [Var 9]),(12,Comb FuncCall ("DaVinci","dvSchedule._#selFP30#nidindex") [Var 9])] (Comb FuncCall ("Prelude","&>") [Case  Rigid (Comb FuncCall ("Prelude","==") [Var 10,Comb ConsCall ("Prelude","[]") []]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","success") []),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Ports","send") [Comb ConsCall ("Ports","SP_Put") [Var 10],Var 5])],Comb FuncCall ("DaVinci","dvSchedule") [Var 7,Comb FuncCall ("Prelude","++") [Var 11,Var 2],Var 12,Var 4,Var 5]])),Branch (Pattern ("DaVinci","DvSetEvent") [13,14]) (Case  Flex (Var 14) [Branch (Pattern ("DaVinci","DvClick") [15]) (Comb FuncCall ("DaVinci","dvSchedule") [Var 7,Comb FuncCall ("DaVinci","updateEventHandlers") [Var 13,Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'k'),Comb ConsCall ("Prelude","[]") []]]]]],Var 15,Var 2],Var 3,Var 4,Var 5])]),Branch (Pattern ("DaVinci","DvAnswer") [16]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 16,Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'k'),Comb ConsCall ("Prelude","[]") []]]]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("DaVinci","dvSchedule") [Var 7,Var 2,Var 3,Var 4,Var 5]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 16,Comb ConsCall ("Prelude",":") [Lit (Charc  'q'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude","[]") []]]]]]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","success") []),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Comb FuncCall ("Prelude","takeWhile") [Comb (FuncPartCall 1) ("Prelude","flip") [Comb (FuncPartCall 2) ("Prelude","/=") [],Lit (Charc  '(')],Var 16],Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'b'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","&>") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Prelude","&>") [],Comb FuncCall ("Prelude","success") [],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("DaVinci","dvSchedule._#lambda2") [Var 4],Comb FuncCall ("DaVinci","selectEventHandlers") [Comb FuncCall ("DaVinci","dvParseNodes") [Comb FuncCall ("Prelude","dropWhile") [Comb (FuncPartCall 1) ("Prelude","flip") [Comb (FuncPartCall 2) ("Prelude","/=") [],Lit (Charc  '(')],Var 16]],Var 2,Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'k'),Comb ConsCall ("Prelude","[]") []]]]]]]]],Comb FuncCall ("DaVinci","dvSchedule") [Var 7,Var 2,Var 3,Var 4,Var 5]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Comb FuncCall ("Prelude","takeWhile") [Comb (FuncPartCall 1) ("DaVinci","dvSchedule._#lambda3") [],Var 16],Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'b'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]) [Branch (Pattern ("Prelude","True") []) (Let [(17,Comb FuncCall ("DaVinci","selectEventHandlers") [Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","takeWhile") [Comb (FuncPartCall 1) ("Prelude","flip") [Comb (FuncPartCall 2) ("Prelude","/=") [],Lit (Charc  '"')],Comb FuncCall ("Prelude","tail") [Comb FuncCall ("Prelude","tail") [Comb FuncCall ("Prelude","dropWhile") [Comb (FuncPartCall 1) ("Prelude","flip") [Comb (FuncPartCall 2) ("Prelude","/=") [],Lit (Charc  '(')],Var 16]]]],Comb ConsCall ("Prelude","[]") []],Var 2,Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'k'),Comb ConsCall ("Prelude","[]") []]]]]]])] (Comb FuncCall ("Prelude","&>") [Case  Rigid (Comb FuncCall ("Prelude","==") [Var 17,Comb ConsCall ("Prelude","[]") []]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","success") []),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","head") [Var 17],Var 4])],Comb FuncCall ("DaVinci","dvSchedule") [Var 7,Var 2,Var 3,Var 4,Var 5]])),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("DaVinci","dvSchedule") [Var 7,Var 2,Var 3,Var 4,Var 5]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])])])])])),Func ("DaVinci","dvSchedule._#selFP28#ncmd") 1 Private (FuncType (TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("DaVinci","DvEventH") []]],TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,)") [2,3,4]) (Var 2)])),Func ("DaVinci","dvSchedule._#selFP29#nevs") 1 Private (FuncType (TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("DaVinci","DvEventH") []]],TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("DaVinci","DvEventH") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,)") [2,3,4]) (Var 3)])),Func ("DaVinci","dvSchedule._#selFP30#nidindex") 1 Private (FuncType (TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("DaVinci","DvEventH") []]],TCons ("Prelude","Int") []]) (TCons ("Prelude","Int") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,)") [2,3,4]) (Var 4)])),Func ("DaVinci","dvSchedule._#lambda2") 2 Private (FuncType (TCons ("Ports","Port") [TCons ("DaVinci","DvScheduleMsg") []]) (FuncType (FuncType (TCons ("Ports","Port") [TCons ("DaVinci","DvScheduleMsg") []]) (TCons ("Prelude","Success") [])) (TCons ("Prelude","Success") []))) (Rule [1,2] (Comb FuncCall ("Prelude","apply") [Var 2,Var 1])),Func ("DaVinci","dvSchedule._#lambda3") 1 Private (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Comb FuncCall ("Prelude","/=") [Var 1,Lit (Charc  '(')])),Func ("DaVinci","dvAdaptor") 2 Private (FuncType (TCons ("Ports","Port") [TCons ("DaVinci","DvScheduleMsg") []]) (FuncType (TCons ("Ports","Port") [TCons ("Ports","SP_Msg") []]) (TCons ("Prelude","Success") []))) (Rule [1,2] (Free [3] (Comb FuncCall ("Prelude","cond") [Comb FuncCall ("Ports","send") [Comb ConsCall ("Ports","SP_GetLine") [Var 3],Var 2],Comb FuncCall ("Prelude","&>") [Comb FuncCall ("Ports","send") [Comb ConsCall ("DaVinci","DvAnswer") [Var 3],Var 1],Case  Rigid (Comb FuncCall ("Prelude","==") [Var 3,Comb ConsCall ("Prelude",":") [Lit (Charc  'q'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude","[]") []]]]]]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","success") []),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("DaVinci","dvAdaptor") [Var 1,Var 2])]]]))),Func ("DaVinci","selectEventHandlers") 3 Private (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("DaVinci","DvEventH") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [FuncType (TCons ("Ports","Port") [TCons ("DaVinci","DvScheduleMsg") []]) (TCons ("Prelude","Success") [])])))) (Rule [1,2,3] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","concatMap") [Comb (FuncPartCall 1) ("DaVinci","selectEventHandlers.mapFun.131") [Var 3]],Comb FuncCall ("Prelude","filter") [Comb (FuncPartCall 1) ("DaVinci","selectEventHandlers._#lambda4") [Var 1],Var 2]])),Func ("DaVinci","selectEventHandlers.mapFun.131") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","(,)") [TVar 0,TCons ("DaVinci","DvEventH") []]) (TCons ("Prelude","[]") [FuncType (TCons ("Ports","Port") [TCons ("DaVinci","DvScheduleMsg") []]) (TCons ("Prelude","Success") [])]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [3,4]) (Case  Flex (Var 4) [Branch (Pattern ("DaVinci","DvClick") [5]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'k'),Comb ConsCall ("Prelude","[]") []]]]]]]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])])),Func ("DaVinci","selectEventHandlers._#lambda4") 2 Private (FuncType (TCons ("Prelude","[]") [TVar 286]) (FuncType (TCons ("Prelude","(,)") [TVar 286,TCons ("DaVinci","DvEventH") []]) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","elem") [Var 3],Var 1])])),Func ("DaVinci","updateEventHandlers") 4 Private (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (FuncType (TCons ("Ports","Port") [TCons ("DaVinci","DvScheduleMsg") []]) (TCons ("Prelude","Success") [])) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("DaVinci","DvEventH") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("DaVinci","DvEventH") []]]))))) (Rule [1,2,3,4] (Case  Flex (Var 2) [Branch (Pattern ("Prelude",":") [5,6]) (Case  Flex (Var 5) [Branch (LPattern (Charc  'c')) (Case  Flex (Var 6) [Branch (Pattern ("Prelude",":") [7,8]) (Case  Flex (Var 7) [Branch (LPattern (Charc  'l')) (Case  Flex (Var 8) [Branch (Pattern ("Prelude",":") [9,10]) (Case  Flex (Var 9) [Branch (LPattern (Charc  'i')) (Case  Flex (Var 10) [Branch (Pattern ("Prelude",":") [11,12]) (Case  Flex (Var 11) [Branch (LPattern (Charc  'c')) (Case  Flex (Var 12) [Branch (Pattern ("Prelude",":") [13,14]) (Case  Flex (Var 13) [Branch (LPattern (Charc  'k')) (Case  Flex (Var 14) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Var 1,Comb ConsCall ("DaVinci","DvClick") [Var 3]],Comb FuncCall ("DaVinci","deleteEventHandler") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'k'),Comb ConsCall ("Prelude","[]") []]]]]],Var 4]])])])])])])])])])])])])),Func ("DaVinci","deleteEventHandler") 3 Private (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("DaVinci","DvEventH") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("DaVinci","DvEventH") []]])))) (Rule [1,2,3] (Case  Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 4) [Branch (Pattern ("Prelude","(,)") [6,7]) (Case  Flex (Var 7) [Branch (Pattern ("DaVinci","DvClick") [8]) (Case  Rigid (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","==") [Var 1,Var 6],Comb FuncCall ("Prelude","==") [Var 2,Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'k'),Comb ConsCall ("Prelude","[]") []]]]]]]]) [Branch (Pattern ("Prelude","True") []) (Var 5),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Var 6,Comb ConsCall ("DaVinci","DvClick") [Var 8]],Comb FuncCall ("DaVinci","deleteEventHandler") [Var 1,Var 2,Var 5]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])])])),Func ("DaVinci","dvParseNodes") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Comb FuncCall ("DaVinci","dvParseNodeList") [Comb FuncCall ("Prelude","tail") [Comb FuncCall ("Prelude","tail") [Var 1]]])),Func ("DaVinci","dvParseNodeList") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude","[]") []]]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","takeWhile") [Comb (FuncPartCall 1) ("DaVinci","dvParseNodeList.compare1.148") [],Comb FuncCall ("Prelude","tail") [Var 1]],Comb FuncCall ("DaVinci","dvParseNodeList") [Comb FuncCall ("Prelude","tail") [Comb FuncCall ("Prelude","dropWhile") [Comb (FuncPartCall 1) ("DaVinci","dvParseNodeList.compare2.148") [],Var 1]]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])),Func ("DaVinci","dvParseNodeList.compare1.148") 1 Private (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","/=") [Var 1,Lit (Charc  '"')],Comb FuncCall ("Prelude","/=") [Var 1,Lit (Charc  ']')]])),Func ("DaVinci","dvParseNodeList.compare2.148") 1 Private (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","/=") [Var 1,Lit (Charc  ',')],Comb FuncCall ("Prelude","/=") [Var 1,Lit (Charc  ']')]]))] []