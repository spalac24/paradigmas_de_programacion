CurryProg "CLPR"
 ["Prelude"]
 []
 [CFunc ("CLPR","+.") 2 Public (CFuncType (CTCons ("Prelude","Float") []) (CFuncType (CTCons ("Prelude","Float") []) (CTCons ("Prelude","Float") []))) (CRules CFlex [CRule [CPVar (0,"x"),CPVar (1,"y")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","$!")) (CApply (CApply (CSymbol ("Prelude","$!")) (CSymbol ("CLPR","prim_CLPR_plus"))) (CVar (1,"y")))) (CVar (0,"x")))] []]),
  CFunc ("CLPR","prim_CLPR_plus") 2 Private (CFuncType (CTCons ("Prelude","Float") []) (CFuncType (CTCons ("Prelude","Float") []) (CTCons ("Prelude","Float") []))) (CExternal "prim_CLPR_plus"),
  CFunc ("CLPR","-.") 2 Public (CFuncType (CTCons ("Prelude","Float") []) (CFuncType (CTCons ("Prelude","Float") []) (CTCons ("Prelude","Float") []))) (CRules CFlex [CRule [CPVar (0,"x"),CPVar (1,"y")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","$!")) (CApply (CApply (CSymbol ("Prelude","$!")) (CSymbol ("CLPR","prim_CLPR_minus"))) (CVar (1,"y")))) (CVar (0,"x")))] []]),
  CFunc ("CLPR","prim_CLPR_minus") 2 Private (CFuncType (CTCons ("Prelude","Float") []) (CFuncType (CTCons ("Prelude","Float") []) (CTCons ("Prelude","Float") []))) (CExternal "prim_CLPR_minus"),
  CFunc ("CLPR","*.") 2 Public (CFuncType (CTCons ("Prelude","Float") []) (CFuncType (CTCons ("Prelude","Float") []) (CTCons ("Prelude","Float") []))) (CRules CFlex [CRule [CPVar (0,"x"),CPVar (1,"y")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","$!")) (CApply (CApply (CSymbol ("Prelude","$!")) (CSymbol ("CLPR","prim_CLPR_times"))) (CVar (1,"y")))) (CVar (0,"x")))] []]),
  CFunc ("CLPR","prim_CLPR_times") 2 Private (CFuncType (CTCons ("Prelude","Float") []) (CFuncType (CTCons ("Prelude","Float") []) (CTCons ("Prelude","Float") []))) (CExternal "prim_CLPR_times"),
  CFunc ("CLPR","/.") 2 Public (CFuncType (CTCons ("Prelude","Float") []) (CFuncType (CTCons ("Prelude","Float") []) (CTCons ("Prelude","Float") []))) (CRules CFlex [CRule [CPVar (0,"x"),CPVar (1,"y")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","$!")) (CApply (CApply (CSymbol ("Prelude","$!")) (CSymbol ("CLPR","prim_CLPR_div"))) (CVar (1,"y")))) (CVar (0,"x")))] []]),
  CFunc ("CLPR","prim_CLPR_div") 2 Private (CFuncType (CTCons ("Prelude","Float") []) (CFuncType (CTCons ("Prelude","Float") []) (CTCons ("Prelude","Float") []))) (CExternal "prim_CLPR_div"),
  CFunc ("CLPR","<.") 2 Public (CFuncType (CTCons ("Prelude","Float") []) (CFuncType (CTCons ("Prelude","Float") []) (CTCons ("Prelude","Success") []))) (CRules CFlex [CRule [CPVar (0,"x"),CPVar (1,"y")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","$!")) (CApply (CApply (CSymbol ("Prelude","$!")) (CSymbol ("CLPR","prim_CLPR_le"))) (CVar (1,"y")))) (CVar (0,"x")))] []]),
  CFunc ("CLPR","prim_CLPR_le") 2 Private (CFuncType (CTCons ("Prelude","Float") []) (CFuncType (CTCons ("Prelude","Float") []) (CTCons ("Prelude","Success") []))) (CExternal "prim_CLPR_le"),
  CFunc ("CLPR",">.") 2 Public (CFuncType (CTCons ("Prelude","Float") []) (CFuncType (CTCons ("Prelude","Float") []) (CTCons ("Prelude","Success") []))) (CRules CFlex [CRule [CPVar (0,"x"),CPVar (1,"y")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","$!")) (CApply (CApply (CSymbol ("Prelude","$!")) (CSymbol ("CLPR","prim_CLPR_ge"))) (CVar (1,"y")))) (CVar (0,"x")))] []]),
  CFunc ("CLPR","prim_CLPR_ge") 2 Private (CFuncType (CTCons ("Prelude","Float") []) (CFuncType (CTCons ("Prelude","Float") []) (CTCons ("Prelude","Success") []))) (CExternal "prim_CLPR_ge"),
  CFunc ("CLPR","<=.") 2 Public (CFuncType (CTCons ("Prelude","Float") []) (CFuncType (CTCons ("Prelude","Float") []) (CTCons ("Prelude","Success") []))) (CRules CFlex [CRule [CPVar (0,"x"),CPVar (1,"y")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","$!")) (CApply (CApply (CSymbol ("Prelude","$!")) (CSymbol ("CLPR","prim_CLPR_leq"))) (CVar (1,"y")))) (CVar (0,"x")))] []]),
  CFunc ("CLPR","prim_CLPR_leq") 2 Private (CFuncType (CTCons ("Prelude","Float") []) (CFuncType (CTCons ("Prelude","Float") []) (CTCons ("Prelude","Success") []))) (CExternal "prim_CLPR_leq"),
  CFunc ("CLPR",">=.") 2 Public (CFuncType (CTCons ("Prelude","Float") []) (CFuncType (CTCons ("Prelude","Float") []) (CTCons ("Prelude","Success") []))) (CRules CFlex [CRule [CPVar (0,"x"),CPVar (1,"y")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","$!")) (CApply (CApply (CSymbol ("Prelude","$!")) (CSymbol ("CLPR","prim_CLPR_geq"))) (CVar (1,"y")))) (CVar (0,"x")))] []]),
  CFunc ("CLPR","prim_CLPR_geq") 2 Private (CFuncType (CTCons ("Prelude","Float") []) (CFuncType (CTCons ("Prelude","Float") []) (CTCons ("Prelude","Success") []))) (CExternal "prim_CLPR_geq"),
  CFunc ("CLPR","i2f") 1 Public (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("Prelude","Float") [])) (CRules CFlex [CRule [CPVar (0,"x")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","$#")) (CSymbol ("CLPR","prim_CLPR_i2f"))) (CVar (0,"x")))] []]),
  CFunc ("CLPR","prim_CLPR_i2f") 1 Private (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("Prelude","Float") [])) (CExternal "prim_CLPR_i2f"),
  CFunc ("CLPR","minimumFor") 2 Public (CFuncType (CFuncType (CTVar (0,"a")) (CTCons ("Prelude","Success") [])) (CFuncType (CFuncType (CTVar (0,"a")) (CTCons ("Prelude","Float") [])) (CTVar (0,"a")))) (CExternal "minimumFor"),
  CFunc ("CLPR","minimize") 3 Public (CFuncType (CFuncType (CTVar (0,"a")) (CTCons ("Prelude","Success") [])) (CFuncType (CFuncType (CTVar (0,"a")) (CTCons ("Prelude","Float") [])) (CFuncType (CTVar (0,"a")) (CTCons ("Prelude","Success") [])))) (CRules CFlex [CRule [CPVar (0,"g"),CPVar (1,"f"),CPVar (2,"x")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","=:=")) (CApply (CApply (CSymbol ("CLPR","minimumFor")) (CVar (0,"g"))) (CVar (1,"f")))) (CVar (2,"x")))] []]),
  CFunc ("CLPR","maximumFor") 2 Public (CFuncType (CFuncType (CTVar (0,"a")) (CTCons ("Prelude","Success") [])) (CFuncType (CFuncType (CTVar (0,"a")) (CTCons ("Prelude","Float") [])) (CTVar (0,"a")))) (CExternal "maximumFor"),
  CFunc ("CLPR","maximize") 3 Public (CFuncType (CFuncType (CTVar (0,"a")) (CTCons ("Prelude","Success") [])) (CFuncType (CFuncType (CTVar (0,"a")) (CTCons ("Prelude","Float") [])) (CFuncType (CTVar (0,"a")) (CTCons ("Prelude","Success") [])))) (CRules CFlex [CRule [CPVar (0,"g"),CPVar (1,"f"),CPVar (2,"x")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","=:=")) (CApply (CApply (CSymbol ("CLPR","maximumFor")) (CVar (0,"g"))) (CVar (1,"f")))) (CVar (2,"x")))] []])]
 [COp ("CLPR","/.") CInfixlOp 7,COp ("CLPR","*.") CInfixlOp 7,COp ("CLPR","-.") CInfixlOp 6,COp ("CLPR","+.") CInfixlOp 6,COp ("CLPR",">=.") CInfixOp 4,COp ("CLPR","<=.") CInfixOp 4,COp ("CLPR",">.") CInfixOp 4,COp ("CLPR","<.") CInfixOp 4]
