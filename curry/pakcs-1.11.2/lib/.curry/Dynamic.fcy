Prog "Dynamic" ["AllSolutions","Prelude"] [Type ("Dynamic","Dynamic") Public [] [Cons ("Dynamic","Dynamic") 1 Private [TCons ("Dynamic","DynSpec") []],Cons ("Dynamic","Prod") 2 Private [TCons ("Dynamic","Dynamic") [],TCons ("Dynamic","Dynamic") []],Cons ("Dynamic","Cond") 2 Private [TCons ("Dynamic","Dynamic") [],TCons ("Prelude","Bool") []]],Type ("Dynamic","DynSpec") Private [] [Cons ("Dynamic","Temporary") 0 Private [],Cons ("Dynamic","Persistent") 0 Private []]] [Func ("Dynamic","dynamic") 0 Public (TVar 0) (Rule [] (Comb FuncCall ("Prelude","failed") [])),Func ("Dynamic","persistent") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TVar 0)) (Rule [1] (Comb FuncCall ("Prelude","failed") [])),Func ("Dynamic","<>") 2 Public (FuncType (TCons ("Dynamic","Dynamic") []) (FuncType (TCons ("Dynamic","Dynamic") []) (TCons ("Dynamic","Dynamic") []))) (Rule [1,2] (Comb ConsCall ("Dynamic","Prod") [Var 1,Var 2])),Func ("Dynamic","|>") 2 Public (FuncType (TCons ("Dynamic","Dynamic") []) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Dynamic","Dynamic") []))) (Rule [1,2] (Comb ConsCall ("Dynamic","Cond") [Var 1,Var 2])),Func ("Dynamic","|&>") 2 Public (FuncType (TCons ("Dynamic","Dynamic") []) (FuncType (TCons ("Prelude","Success") []) (TCons ("Dynamic","Dynamic") []))) (Rule [1,2] (Comb FuncCall ("Dynamic","|>") [Var 1,Comb FuncCall ("Prelude","&>") [Var 2,Comb ConsCall ("Prelude","True") []]])),Func ("Dynamic","assert") 1 Public (FuncType (TCons ("Dynamic","Dynamic") []) (TCons ("Prelude","IO") [TCons ("Prelude","()") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Dynamic","Dynamic") [2]) (Comb FuncCall ("Dynamic","assertFact") [Comb ConsCall ("Dynamic","Dynamic") [Var 2]]),Branch (Pattern ("Dynamic","Prod") [3,4]) (Comb FuncCall ("Prelude",">>") [Comb FuncCall ("Dynamic","assert") [Var 3],Comb FuncCall ("Dynamic","assert") [Var 4]]),Branch (Pattern ("Dynamic","Cond") [5,6]) (Case  Rigid (Var 6) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Dynamic","assert") [Var 5]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","done") [])])])),Func ("Dynamic","retract") 1 Public (FuncType (TCons ("Dynamic","Dynamic") []) (TCons ("Prelude","IO") [TCons ("Prelude","Bool") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Dynamic","Dynamic") [2]) (Comb FuncCall ("Dynamic","retractFact") [Comb ConsCall ("Dynamic","Dynamic") [Var 2]]),Branch (Pattern ("Dynamic","Prod") [3,4]) (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Dynamic","retract") [Var 3],Comb (FuncPartCall 1) ("Dynamic","retract._#lambda1") [Var 4]]),Branch (Pattern ("Dynamic","Cond") [5,6]) (Case  Rigid (Var 6) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Dynamic","retract") [Var 5]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","return") [Comb ConsCall ("Prelude","True") []])])])),Func ("Dynamic","retract._#lambda1") 2 Private (FuncType (TCons ("Dynamic","Dynamic") []) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","IO") [TCons ("Prelude","Bool") []]))) (Rule [1,2] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Dynamic","retract") [Var 1],Comb (FuncPartCall 1) ("Dynamic","retract._#lambda1._#lambda2") [Var 2]])),Func ("Dynamic","retract._#lambda1._#lambda2") 2 Private (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","IO") [TCons ("Prelude","Bool") []]))) (Rule [1,2] (Comb FuncCall ("Prelude","return") [Comb FuncCall ("Prelude","&&") [Var 1,Var 2]])),Func ("Dynamic","getKnowledge") 0 Public (TCons ("Prelude","IO") [FuncType (TCons ("Dynamic","Dynamic") []) (TCons ("Prelude","Success") [])]) (Rule [] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Dynamic","getDynamicKnowledge") [],Comb (FuncPartCall 1) ("Dynamic","getKnowledge._#lambda3") []])),Func ("Dynamic","getKnowledge.knownAll.27") 2 Private (FuncType (FuncType (TCons ("Dynamic","Dynamic") []) (TCons ("Prelude","Success") [])) (FuncType (TCons ("Dynamic","Dynamic") []) (TCons ("Prelude","Success") []))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Dynamic","Dynamic") [3]) (Comb FuncCall ("Prelude","apply") [Var 1,Comb ConsCall ("Dynamic","Dynamic") [Var 3]]),Branch (Pattern ("Dynamic","Prod") [4,5]) (Comb FuncCall ("Prelude","&") [Comb FuncCall ("Dynamic","getKnowledge.knownAll.27") [Var 1,Var 4],Comb FuncCall ("Dynamic","getKnowledge.knownAll.27") [Var 1,Var 5]]),Branch (Pattern ("Dynamic","Cond") [6,7]) (Comb FuncCall ("Prelude","&") [Comb FuncCall ("Dynamic","getKnowledge.knownAll.27") [Var 1,Var 6],Comb FuncCall ("Prelude","=:=") [Var 7,Comb ConsCall ("Prelude","True") []]])])),Func ("Dynamic","getKnowledge._#lambda3") 1 Private (FuncType (FuncType (TCons ("Dynamic","Dynamic") []) (TCons ("Prelude","Success") [])) (TCons ("Prelude","IO") [FuncType (TCons ("Dynamic","Dynamic") []) (TCons ("Prelude","Success") [])])) (Rule [1] (Comb FuncCall ("Prelude","return") [Comb (FuncPartCall 1) ("Dynamic","getKnowledge.knownAll.27") [Var 1]])),Func ("Dynamic","getDynamicSolutions") 1 Public (FuncType (FuncType (TVar 0) (TCons ("Dynamic","Dynamic") [])) (TCons ("Prelude","IO") [TCons ("Prelude","[]") [TVar 0]])) (Rule [1] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Dynamic","getKnowledge") [],Comb (FuncPartCall 1) ("Dynamic","getDynamicSolutions._#lambda4") [Var 1]])),Func ("Dynamic","getDynamicSolutions._#lambda4") 2 Private (FuncType (FuncType (TVar 60) (TCons ("Dynamic","Dynamic") [])) (FuncType (FuncType (TCons ("Dynamic","Dynamic") []) (TCons ("Prelude","Success") [])) (TCons ("Prelude","IO") [TCons ("Prelude","[]") [TVar 60]]))) (Rule [1,2] (Comb FuncCall ("AllSolutions","getAllSolutions") [Comb (FuncPartCall 1) ("Dynamic","getDynamicSolutions._#lambda4._#lambda5") [Var 2,Var 1]])),Func ("Dynamic","getDynamicSolutions._#lambda4._#lambda5") 3 Private (FuncType (FuncType (TCons ("Dynamic","Dynamic") []) (TCons ("Prelude","Success") [])) (FuncType (FuncType (TVar 60) (TCons ("Dynamic","Dynamic") [])) (FuncType (TVar 60) (TCons ("Prelude","Success") [])))) (Rule [1,2,3] (Comb FuncCall ("Prelude","apply") [Var 1,Comb FuncCall ("Prelude","apply") [Var 2,Var 3]])),Func ("Dynamic","getDynamicSolution") 1 Public (FuncType (FuncType (TVar 0) (TCons ("Dynamic","Dynamic") [])) (TCons ("Prelude","IO") [TCons ("Prelude","Maybe") [TVar 0]])) (Rule [1] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Dynamic","getKnowledge") [],Comb (FuncPartCall 1) ("Dynamic","getDynamicSolution._#lambda6") [Var 1]])),Func ("Dynamic","getDynamicSolution._#lambda6") 2 Private (FuncType (FuncType (TVar 68) (TCons ("Dynamic","Dynamic") [])) (FuncType (FuncType (TCons ("Dynamic","Dynamic") []) (TCons ("Prelude","Success") [])) (TCons ("Prelude","IO") [TCons ("Prelude","Maybe") [TVar 68]]))) (Rule [1,2] (Comb FuncCall ("AllSolutions","getOneSolution") [Comb (FuncPartCall 1) ("Dynamic","getDynamicSolution._#lambda6._#lambda7") [Var 2,Var 1]])),Func ("Dynamic","getDynamicSolution._#lambda6._#lambda7") 3 Private (FuncType (FuncType (TCons ("Dynamic","Dynamic") []) (TCons ("Prelude","Success") [])) (FuncType (FuncType (TVar 68) (TCons ("Dynamic","Dynamic") [])) (FuncType (TVar 68) (TCons ("Prelude","Success") [])))) (Rule [1,2,3] (Comb FuncCall ("Prelude","apply") [Var 1,Comb FuncCall ("Prelude","apply") [Var 2,Var 3]])),Func ("Dynamic","isKnown") 1 Public (FuncType (TCons ("Dynamic","Dynamic") []) (TCons ("Prelude","IO") [TCons ("Prelude","Bool") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Dynamic","Dynamic") [2]) (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Dynamic","getDynamicKnowledge") [],Comb (FuncPartCall 1) ("Dynamic","isKnown._#lambda8") [Var 2]]),Branch (Pattern ("Dynamic","Prod") [3,4]) (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Dynamic","isKnown") [Var 3],Comb (FuncPartCall 1) ("Dynamic","isKnown._#lambda11") [Var 4]]),Branch (Pattern ("Dynamic","Cond") [5,6]) (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Dynamic","isKnown") [Var 5],Comb (FuncPartCall 1) ("Dynamic","isKnown._#lambda13") [Var 6]])])),Func ("Dynamic","isKnown._#lambda8") 2 Private (FuncType (TCons ("Dynamic","DynSpec") []) (FuncType (FuncType (TCons ("Dynamic","Dynamic") []) (TCons ("Prelude","Success") [])) (TCons ("Prelude","IO") [TCons ("Prelude","Bool") []]))) (Rule [1,2] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("AllSolutions","getOneSolution") [Comb (FuncPartCall 1) ("Dynamic","isKnown._#lambda8._#lambda9") [Var 2,Var 1]],Comb (FuncPartCall 1) ("Dynamic","isKnown._#lambda8._#lambda10") []])),Func ("Dynamic","isKnown._#lambda8._#lambda9") 3 Private (FuncType (FuncType (TCons ("Dynamic","Dynamic") []) (TCons ("Prelude","Success") [])) (FuncType (TCons ("Dynamic","DynSpec") []) (FuncType (TVar 79) (TCons ("Prelude","Success") [])))) (Rule [1,2,3] (Comb FuncCall ("Prelude","apply") [Var 1,Comb ConsCall ("Dynamic","Dynamic") [Var 2]])),Func ("Dynamic","isKnown._#lambda8._#lambda10") 1 Private (FuncType (TCons ("Prelude","Maybe") [TVar 79]) (TCons ("Prelude","IO") [TCons ("Prelude","Bool") []])) (Rule [1] (Comb FuncCall ("Prelude","return") [Comb FuncCall ("Prelude","/=") [Var 1,Comb ConsCall ("Prelude","Nothing") []]])),Func ("Dynamic","isKnown._#lambda11") 2 Private (FuncType (TCons ("Dynamic","Dynamic") []) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","IO") [TCons ("Prelude","Bool") []]))) (Rule [1,2] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Dynamic","isKnown") [Var 1],Comb (FuncPartCall 1) ("Dynamic","isKnown._#lambda11._#lambda12") [Var 2]])),Func ("Dynamic","isKnown._#lambda11._#lambda12") 2 Private (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","IO") [TCons ("Prelude","Bool") []]))) (Rule [1,2] (Comb FuncCall ("Prelude","return") [Comb FuncCall ("Prelude","&&") [Var 1,Var 2]])),Func ("Dynamic","isKnown._#lambda13") 2 Private (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","IO") [TCons ("Prelude","Bool") []]))) (Rule [1,2] (Comb FuncCall ("Prelude","return") [Comb FuncCall ("Prelude","&&") [Var 2,Var 1]])),Func ("Dynamic","transaction") 1 Public (FuncType (TCons ("Prelude","IO") [TVar 0]) (TCons ("Prelude","IO") [TCons ("Prelude","Maybe") [TVar 0]])) (Rule [1] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Dynamic","startTransaction") [],Comb (FuncPartCall 1) ("Dynamic","transaction._#lambda15") [Var 1]])),Func ("Dynamic","transaction.performTrans.57") 2 Private (FuncType (TCons ("Prelude","IO") [TVar 109]) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","IO") [TCons ("Prelude","Maybe") [TVar 109]]))) (Rule [1,2] (Comb FuncCall ("Prelude",">>=") [Var 1,Comb (FuncPartCall 1) ("Dynamic","transaction.performTrans.57._#lambda14") [Var 2]])),Func ("Dynamic","transaction.performTrans.57._#lambda14") 2 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 109) (TCons ("Prelude","IO") [TCons ("Prelude","Maybe") [TVar 109]]))) (Rule [1,2] (Comb FuncCall ("Prelude",">>") [Comb FuncCall ("Dynamic","commitTransaction") [Var 1],Comb FuncCall ("Prelude","return") [Comb ConsCall ("Prelude","Just") [Var 2]]])),Func ("Dynamic","transaction._#lambda15") 2 Private (FuncType (TCons ("Prelude","IO") [TVar 109]) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","IO") [TCons ("Prelude","Maybe") [TVar 109]]))) (Rule [1,2] (Comb FuncCall ("Prelude","catchFail") [Comb FuncCall ("Dynamic","transaction.performTrans.57") [Var 1,Var 2],Comb FuncCall ("Prelude","catchFail") [Comb FuncCall ("Dynamic","abortTransaction") [],Comb FuncCall ("Prelude","return") [Comb ConsCall ("Prelude","Nothing") []]]])),Func ("Dynamic","transactionWithErrorCatch") 1 Public (FuncType (TCons ("Prelude","IO") [TVar 0]) (TCons ("Prelude","IO") [TCons ("Prelude","Either") [TVar 0,TCons ("Prelude","IOError") []]])) (Rule [1] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Dynamic","startTransaction") [],Comb (FuncPartCall 1) ("Dynamic","transactionWithErrorCatch._#lambda17") [Var 1]])),Func ("Dynamic","transactionWithErrorCatch.performTrans.63") 2 Private (FuncType (TCons ("Prelude","IO") [TVar 129]) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","IO") [TCons ("Prelude","Either") [TVar 129,TVar 0]]))) (Rule [1,2] (Comb FuncCall ("Prelude",">>=") [Var 1,Comb (FuncPartCall 1) ("Dynamic","transactionWithErrorCatch.performTrans.63._#lambda16") [Var 2]])),Func ("Dynamic","transactionWithErrorCatch.performTrans.63._#lambda16") 2 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 129) (TCons ("Prelude","IO") [TCons ("Prelude","Either") [TVar 129,TVar 130]]))) (Rule [1,2] (Comb FuncCall ("Prelude",">>") [Comb FuncCall ("Dynamic","commitTransaction") [Var 1],Comb FuncCall ("Prelude","return") [Comb ConsCall ("Prelude","Left") [Var 2]]])),Func ("Dynamic","transactionWithErrorCatch._#lambda17") 2 Private (FuncType (TCons ("Prelude","IO") [TVar 129]) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","IO") [TCons ("Prelude","Either") [TVar 129,TCons ("Prelude","IOError") []]]))) (Rule [1,2] (Comb FuncCall ("Prelude","catch") [Comb FuncCall ("Dynamic","transactionWithErrorCatch.performTrans.63") [Var 1,Var 2],Comb (FuncPartCall 1) ("Dynamic","transactionWithErrorCatch._#lambda17._#lambda18") []])),Func ("Dynamic","transactionWithErrorCatch._#lambda17._#lambda18") 1 Private (FuncType (TCons ("Prelude","IOError") []) (TCons ("Prelude","IO") [TCons ("Prelude","Either") [TVar 131,TCons ("Prelude","IOError") []]])) (Rule [1] (Comb FuncCall ("Prelude","catch") [Comb FuncCall ("Dynamic","abortTransaction") [],Comb (FuncPartCall 1) ("Dynamic","transactionWithErrorCatch._#lambda17._#lambda18._#lambda19") [Var 1]])),Func ("Dynamic","transactionWithErrorCatch._#lambda17._#lambda18._#lambda19") 2 Private (FuncType (TCons ("Prelude","IOError") []) (FuncType (TCons ("Prelude","IOError") []) (TCons ("Prelude","IO") [TCons ("Prelude","Either") [TVar 132,TCons ("Prelude","IOError") []]]))) (Rule [1,2] (Comb FuncCall ("Prelude","return") [Comb ConsCall ("Prelude","Right") [Var 1]])),Func ("Dynamic","abortTransaction") 0 Public (TCons ("Prelude","IO") [TVar 0]) (External "Dynamic.abortTransaction"),Func ("Dynamic","assertFact") 1 Private (FuncType (TCons ("Dynamic","Dynamic") []) (TCons ("Prelude","IO") [TCons ("Prelude","()") []])) (Rule [1] (Comb FuncCall ("Prelude","$##") [Comb (FuncPartCall 1) ("Dynamic","prim_assertFact") [],Var 1])),Func ("Dynamic","prim_assertFact") 1 Private (FuncType (TCons ("Dynamic","Dynamic") []) (TCons ("Prelude","IO") [TCons ("Prelude","()") []])) (External "Dynamic.prim_assertFact"),Func ("Dynamic","retractFact") 1 Private (FuncType (TCons ("Dynamic","Dynamic") []) (TCons ("Prelude","IO") [TCons ("Prelude","Bool") []])) (Rule [1] (Comb FuncCall ("Prelude","$##") [Comb (FuncPartCall 1) ("Dynamic","prim_retractFact") [],Var 1])),Func ("Dynamic","prim_retractFact") 1 Private (FuncType (TCons ("Dynamic","Dynamic") []) (TCons ("Prelude","IO") [TCons ("Prelude","Bool") []])) (External "Dynamic.prim_retractFact"),Func ("Dynamic","getDynamicKnowledge") 0 Private (TCons ("Prelude","IO") [FuncType (TCons ("Dynamic","Dynamic") []) (TCons ("Prelude","Success") [])]) (External "Dynamic.getDynamicKnowledge"),Func ("Dynamic","startTransaction") 0 Private (TCons ("Prelude","IO") [TCons ("Prelude","Int") []]) (External "Dynamic.startTransaction"),Func ("Dynamic","commitTransaction") 1 Private (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","IO") [TCons ("Prelude","()") []])) (Rule [1] (Comb FuncCall ("Prelude","$#") [Comb (FuncPartCall 1) ("Dynamic","prim_commitTransaction") [],Var 1])),Func ("Dynamic","prim_commitTransaction") 1 Private (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","IO") [TCons ("Prelude","()") []])) (External "Dynamic.prim_commitTransaction"),Func ("Dynamic","isKnownAtTime") 2 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Dynamic","Dynamic") []) (TCons ("Prelude","Success") []))) (Rule [1,2] (Comb FuncCall ("Prelude","$!!") [Comb FuncCall ("Prelude","$#") [Comb (FuncPartCall 2) ("Dynamic","prim_isKnownAtTime") [],Var 1],Var 2])),Func ("Dynamic","prim_isKnownAtTime") 2 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Dynamic","Dynamic") []) (TCons ("Prelude","Success") []))) (External "Dynamic.prim_isKnownAtTime")] [Op ("Dynamic","<>") InfixrOp 2,Op ("Dynamic","|>") InfixlOp 1,Op ("Dynamic","|&>") InfixlOp 1]