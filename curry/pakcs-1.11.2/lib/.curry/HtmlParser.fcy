Prog "HtmlParser" ["Char","HTML","Prelude"] [Type ("HtmlParser","HtmlToken") Private [] [Cons ("HtmlParser","HText") 1 Private [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],Cons ("HtmlParser","HElem") 2 Private [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]]]] [Func ("HtmlParser","readHtmlFile") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","[]") [TCons ("HTML","HtmlExp") []]])) (Rule [1] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Prelude","readFile") [Var 1],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","return") [],Comb (FuncPartCall 1) ("HtmlParser","parseHtmlString") []]])),Func ("HtmlParser","parseHtmlString") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("HTML","HtmlExp") []])) (Rule [1] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","reverse") [],Comb FuncCall ("HtmlParser","parseHtmlTokens") [Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("HtmlParser","scanHtmlString") [Var 1]]])),Func ("HtmlParser","parseHtmlTokens") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("HTML","HtmlExp") []]) (FuncType (TCons ("Prelude","[]") [TCons ("HtmlParser","HtmlToken") []]) (TCons ("Prelude","[]") [TCons ("HTML","HtmlExp") []]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Var 1),Branch (Pattern ("Prelude",":") [3,4]) (Case  Flex (Var 3) [Branch (Pattern ("HtmlParser","HText") [5]) (Comb FuncCall ("HtmlParser","parseHtmlTokens") [Comb ConsCall ("Prelude",":") [Comb ConsCall ("HTML","HtmlText") [Var 5],Var 1],Var 4]),Branch (Pattern ("HtmlParser","HElem") [6,7]) (Case  Flex (Var 6) [Branch (Pattern ("Prelude",":") [8,9]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 8,Lit (Charc  '/')]) [Branch (Pattern ("Prelude","True") []) (Let [(10,Comb FuncCall ("HtmlParser","splitHtmlElems") [Var 9,Var 1]),(11,Comb FuncCall ("HtmlParser","parseHtmlTokens._#selFP2#structargs") [Var 10]),(12,Comb FuncCall ("HtmlParser","parseHtmlTokens._#selFP3#elems") [Var 10]),(13,Comb FuncCall ("HtmlParser","parseHtmlTokens._#selFP4#rest") [Var 10])] (Comb FuncCall ("HtmlParser","parseHtmlTokens") [Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Comb ConsCall ("HTML","HtmlStruct") [Var 9,Var 11,Var 12],Comb ConsCall ("Prelude","[]") []],Var 13],Var 4])),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("HtmlParser","parseHtmlTokens") [Comb ConsCall ("Prelude",":") [Comb ConsCall ("HTML","HtmlStruct") [Comb ConsCall ("Prelude",":") [Var 8,Var 9],Var 7,Comb ConsCall ("Prelude","[]") []],Var 1],Var 4])])])])])),Func ("HtmlParser","parseHtmlTokens._#selFP2#structargs") 1 Private (FuncType (TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]],TCons ("Prelude","[]") [TCons ("HTML","HtmlExp") []],TCons ("Prelude","[]") [TCons ("HTML","HtmlExp") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,)") [2,3,4]) (Var 2)])),Func ("HtmlParser","parseHtmlTokens._#selFP3#elems") 1 Private (FuncType (TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]],TCons ("Prelude","[]") [TCons ("HTML","HtmlExp") []],TCons ("Prelude","[]") [TCons ("HTML","HtmlExp") []]]) (TCons ("Prelude","[]") [TCons ("HTML","HtmlExp") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,)") [2,3,4]) (Var 3)])),Func ("HtmlParser","parseHtmlTokens._#selFP4#rest") 1 Private (FuncType (TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]],TCons ("Prelude","[]") [TCons ("HTML","HtmlExp") []],TCons ("Prelude","[]") [TCons ("HTML","HtmlExp") []]]) (TCons ("Prelude","[]") [TCons ("HTML","HtmlExp") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,)") [2,3,4]) (Var 4)])),Func ("HtmlParser","splitHtmlElems") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("HTML","HtmlExp") []]) (TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]],TCons ("Prelude","[]") [TCons ("HTML","HtmlExp") []],TCons ("Prelude","[]") [TCons ("HTML","HtmlExp") []]]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","(,,)") [Comb ConsCall ("Prelude","[]") [],Comb ConsCall ("Prelude","[]") [],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude",":") [3,4]) (Case  Flex (Var 3) [Branch (Pattern ("HTML","HtmlText") [5]) (Let [(6,Comb FuncCall ("HtmlParser","splitHtmlElems") [Var 1,Var 4]),(7,Comb FuncCall ("HtmlParser","splitHtmlElems._#selFP6#largs") [Var 6]),(8,Comb FuncCall ("HtmlParser","splitHtmlElems._#selFP7#elems") [Var 6]),(9,Comb FuncCall ("HtmlParser","splitHtmlElems._#selFP8#rest") [Var 6])] (Comb ConsCall ("Prelude","(,,)") [Var 7,Comb FuncCall ("Prelude","++") [Var 8,Comb ConsCall ("Prelude",":") [Comb ConsCall ("HTML","HtmlText") [Var 5],Comb ConsCall ("Prelude","[]") []]],Var 9])),Branch (Pattern ("HTML","HtmlStruct") [10,11,12]) (Case  Flex (Var 12) [Branch (Pattern ("Prelude",":") [13,14]) (Let [(15,Comb FuncCall ("HtmlParser","splitHtmlElems") [Var 1,Var 4]),(16,Comb FuncCall ("HtmlParser","splitHtmlElems._#selFP10#largs") [Var 15]),(17,Comb FuncCall ("HtmlParser","splitHtmlElems._#selFP11#elems") [Var 15]),(18,Comb FuncCall ("HtmlParser","splitHtmlElems._#selFP12#rest") [Var 15])] (Comb ConsCall ("Prelude","(,,)") [Var 16,Comb FuncCall ("Prelude","++") [Var 17,Comb ConsCall ("Prelude",":") [Comb ConsCall ("HTML","HtmlStruct") [Var 10,Var 11,Var 12],Comb ConsCall ("Prelude","[]") []]],Var 18])),Branch (Pattern ("Prelude","[]") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 1,Var 10]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","(,,)") [Var 11,Comb ConsCall ("Prelude","[]") [],Var 4]),Branch (Pattern ("Prelude","False") []) (Let [(19,Comb FuncCall ("HtmlParser","splitHtmlElems") [Var 1,Var 4]),(20,Comb FuncCall ("HtmlParser","splitHtmlElems._#selFP14#largs") [Var 19]),(21,Comb FuncCall ("HtmlParser","splitHtmlElems._#selFP15#elems") [Var 19]),(22,Comb FuncCall ("HtmlParser","splitHtmlElems._#selFP16#rest") [Var 19])] (Comb ConsCall ("Prelude","(,,)") [Var 20,Comb FuncCall ("Prelude","++") [Var 21,Comb ConsCall ("Prelude",":") [Comb ConsCall ("HTML","HtmlStruct") [Var 10,Var 11,Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude","[]") []]],Var 22]))])])])])),Func ("HtmlParser","splitHtmlElems._#selFP6#largs") 1 Private (FuncType (TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]],TCons ("Prelude","[]") [TCons ("HTML","HtmlExp") []],TCons ("Prelude","[]") [TCons ("HTML","HtmlExp") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,)") [2,3,4]) (Var 2)])),Func ("HtmlParser","splitHtmlElems._#selFP7#elems") 1 Private (FuncType (TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]],TCons ("Prelude","[]") [TCons ("HTML","HtmlExp") []],TCons ("Prelude","[]") [TCons ("HTML","HtmlExp") []]]) (TCons ("Prelude","[]") [TCons ("HTML","HtmlExp") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,)") [2,3,4]) (Var 3)])),Func ("HtmlParser","splitHtmlElems._#selFP8#rest") 1 Private (FuncType (TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]],TCons ("Prelude","[]") [TCons ("HTML","HtmlExp") []],TCons ("Prelude","[]") [TCons ("HTML","HtmlExp") []]]) (TCons ("Prelude","[]") [TCons ("HTML","HtmlExp") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,)") [2,3,4]) (Var 4)])),Func ("HtmlParser","splitHtmlElems._#selFP10#largs") 1 Private (FuncType (TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]],TCons ("Prelude","[]") [TCons ("HTML","HtmlExp") []],TCons ("Prelude","[]") [TCons ("HTML","HtmlExp") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,)") [2,3,4]) (Var 2)])),Func ("HtmlParser","splitHtmlElems._#selFP11#elems") 1 Private (FuncType (TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]],TCons ("Prelude","[]") [TCons ("HTML","HtmlExp") []],TCons ("Prelude","[]") [TCons ("HTML","HtmlExp") []]]) (TCons ("Prelude","[]") [TCons ("HTML","HtmlExp") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,)") [2,3,4]) (Var 3)])),Func ("HtmlParser","splitHtmlElems._#selFP12#rest") 1 Private (FuncType (TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]],TCons ("Prelude","[]") [TCons ("HTML","HtmlExp") []],TCons ("Prelude","[]") [TCons ("HTML","HtmlExp") []]]) (TCons ("Prelude","[]") [TCons ("HTML","HtmlExp") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,)") [2,3,4]) (Var 4)])),Func ("HtmlParser","splitHtmlElems._#selFP14#largs") 1 Private (FuncType (TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]],TCons ("Prelude","[]") [TCons ("HTML","HtmlExp") []],TCons ("Prelude","[]") [TCons ("HTML","HtmlExp") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,)") [2,3,4]) (Var 2)])),Func ("HtmlParser","splitHtmlElems._#selFP15#elems") 1 Private (FuncType (TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]],TCons ("Prelude","[]") [TCons ("HTML","HtmlExp") []],TCons ("Prelude","[]") [TCons ("HTML","HtmlExp") []]]) (TCons ("Prelude","[]") [TCons ("HTML","HtmlExp") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,)") [2,3,4]) (Var 3)])),Func ("HtmlParser","splitHtmlElems._#selFP16#rest") 1 Private (FuncType (TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]],TCons ("Prelude","[]") [TCons ("HTML","HtmlExp") []],TCons ("Prelude","[]") [TCons ("HTML","HtmlExp") []]]) (TCons ("Prelude","[]") [TCons ("HTML","HtmlExp") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,)") [2,3,4]) (Var 4)])),Func ("HtmlParser","scanHtmlString") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("HtmlParser","HtmlToken") []])) (Rule [1] (Comb FuncCall ("HtmlParser","scanHtmlString.scanHtml.31") [Var 1])),Func ("HtmlParser","scanHtmlString.scanHtml.31") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("HtmlParser","HtmlToken") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [2,3]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 2,Lit (Charc  '<')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Comb FuncCall ("Prelude","take") [Lit (Intc  3),Var 3],Comb ConsCall ("Prelude",":") [Lit (Charc  '!'),Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude","[]") []]]]]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("HtmlParser","scanHtmlComment") [Var 3]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Comb FuncCall ("Prelude","take") [Lit (Intc  4),Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Char","toLower") [],Var 3]],Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  '>'),Comb ConsCall ("Prelude","[]") []]]]]]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("HtmlParser","scanHtmlPre") [Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("HtmlParser","skipFirstNewLine") [Comb FuncCall ("Prelude","drop") [Lit (Intc  4),Var 3]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("HtmlParser","scanHtmlElem") [Comb ConsCall ("Prelude","[]") [],Var 3])])]),Branch (Pattern ("Prelude","False") []) (Let [(4,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","break") [Comb (FuncPartCall 1) ("Prelude","flip") [Comb (FuncPartCall 2) ("Prelude","==") [],Lit (Charc  '<')]],Comb ConsCall ("Prelude",":") [Var 2,Var 3]]),(5,Comb FuncCall ("HtmlParser","scanHtmlString.scanHtml.31._#selFP18#initxt") [Var 4]),(6,Comb FuncCall ("HtmlParser","scanHtmlString.scanHtml.31._#selFP19#remtag") [Var 4])] (Comb ConsCall ("Prelude",":") [Comb ConsCall ("HtmlParser","HText") [Var 5],Comb FuncCall ("HtmlParser","scanHtmlString.scanHtml.31") [Var 6]]))])])),Func ("HtmlParser","scanHtmlString.scanHtml.31._#selFP18#initxt") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("HtmlParser","scanHtmlString.scanHtml.31._#selFP19#remtag") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("HtmlParser","scanHtmlElem") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("HtmlParser","HtmlToken") []]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("HtmlParser","HText") [Comb ConsCall ("Prelude",":") [Lit (Charc  '<'),Var 1]],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude",":") [3,4]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 3,Lit (Charc  '>')]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("HtmlParser","HElem") [Var 1,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("HtmlParser","scanHtmlString") [Var 4]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Char","isSpace") [Var 3]) [Branch (Pattern ("Prelude","True") []) (Let [(5,Comb FuncCall ("HtmlParser","splitAtElement") [Comb (FuncPartCall 1) ("Prelude","flip") [Comb (FuncPartCall 2) ("Prelude","==") [],Lit (Charc  '>')],Comb FuncCall ("Prelude","dropWhile") [Comb (FuncPartCall 1) ("Char","isSpace") [],Var 4]]),(6,Comb FuncCall ("HtmlParser","scanHtmlElem._#selFP21#args") [Var 5]),(7,Comb FuncCall ("HtmlParser","scanHtmlElem._#selFP22#rest") [Var 5]),(8,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","reverse") [],Var 6])] (Case  Rigid (Comb FuncCall ("Prelude","||") [Comb FuncCall ("Prelude","null") [Var 6],Comb FuncCall ("Prelude","/=") [Comb FuncCall ("Prelude","head") [Var 8],Lit (Charc  '/')]]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("HtmlParser","HElem") [Var 1,Comb FuncCall ("HtmlParser","string2args") [Var 6]],Comb FuncCall ("HtmlParser","scanHtmlString") [Var 7]]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("HtmlParser","HElem") [Var 1,Comb FuncCall ("HtmlParser","string2args") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","reverse") [],Comb FuncCall ("Prelude","tail") [Var 8]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("HtmlParser","HElem") [Comb ConsCall ("Prelude",":") [Lit (Charc  '/'),Var 1],Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("HtmlParser","scanHtmlString") [Var 7]]])])),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","==") [Var 3,Lit (Charc  '/')],Comb FuncCall ("Prelude","==") [Comb FuncCall ("Prelude","head") [Var 4],Lit (Charc  '>')]]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("HtmlParser","HElem") [Var 1,Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude",":") [Comb ConsCall ("HtmlParser","HElem") [Comb ConsCall ("Prelude",":") [Lit (Charc  '/'),Var 1],Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("HtmlParser","scanHtmlString") [Comb FuncCall ("Prelude","tail") [Var 4]]]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("HtmlParser","scanHtmlElem") [Comb FuncCall ("Prelude","++") [Var 1,Comb ConsCall ("Prelude",":") [Comb FuncCall ("Char","toLower") [Var 3],Comb ConsCall ("Prelude","[]") []]],Var 4]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])])])),Func ("HtmlParser","scanHtmlElem._#selFP21#args") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("HtmlParser","scanHtmlElem._#selFP22#rest") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("HtmlParser","scanHtmlComment") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("HtmlParser","HtmlToken") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [2,3]) (Case  Rigid (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","==") [Var 2,Lit (Charc  '-')],Comb FuncCall ("Prelude","==") [Comb FuncCall ("Prelude","take") [Lit (Intc  2),Var 3],Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  '>'),Comb ConsCall ("Prelude","[]") []]]]]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("HtmlParser","scanHtmlString") [Comb FuncCall ("Prelude","drop") [Lit (Intc  2),Var 3]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("HtmlParser","scanHtmlComment") [Var 3])])])),Func ("HtmlParser","scanHtmlPre") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("HtmlParser","HtmlToken") []]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [3,4]) (Case  Rigid (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","==") [Var 3,Lit (Charc  '<')],Comb FuncCall ("Prelude","==") [Comb FuncCall ("Prelude","take") [Lit (Intc  5),Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Char","toLower") [],Var 4]],Comb ConsCall ("Prelude",":") [Lit (Charc  '/'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  '>'),Comb ConsCall ("Prelude","[]") []]]]]]]]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("HtmlParser","HElem") [Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude",":") [Comb ConsCall ("HtmlParser","HText") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","reverse") [],Var 1]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("HtmlParser","HElem") [Comb ConsCall ("Prelude",":") [Lit (Charc  '/'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("HtmlParser","scanHtmlString") [Comb FuncCall ("Prelude","drop") [Lit (Intc  5),Var 4]]]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("HtmlParser","scanHtmlPre") [Comb ConsCall ("Prelude",":") [Var 3,Var 1],Var 4])])])),Func ("HtmlParser","string2args") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [2,3]) (Let [(4,Comb FuncCall ("HtmlParser","splitAtElement") [Comb (FuncPartCall 1) ("Char","isSpace") [],Comb ConsCall ("Prelude",":") [Var 2,Var 3]]),(5,Comb FuncCall ("HtmlParser","string2args._#selFP24#arg1") [Var 4]),(6,Comb FuncCall ("HtmlParser","string2args._#selFP25#rest") [Var 4])] (Comb ConsCall ("Prelude",":") [Comb FuncCall ("HtmlParser","deleteApo") [Comb FuncCall ("HtmlParser","splitAtElement") [Comb (FuncPartCall 1) ("Prelude","flip") [Comb (FuncPartCall 2) ("Prelude","==") [],Lit (Charc  '=')],Var 5]],Comb FuncCall ("HtmlParser","string2args") [Comb FuncCall ("Prelude","dropWhile") [Comb (FuncPartCall 1) ("Char","isSpace") [],Var 6]]]))])),Func ("HtmlParser","string2args._#selFP24#arg1") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("HtmlParser","string2args._#selFP25#rest") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("HtmlParser","deleteApo") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Char","toLower") [],Var 2],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude",":") [4,5]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 4,Lit (Charc  '"')]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Char","toLower") [],Var 2],Comb FuncCall ("HtmlParser","deleteLastApo") [Var 5]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 4,Lit (Charc  '\'')]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Char","toLower") [],Var 2],Comb FuncCall ("HtmlParser","deleteLastApo") [Var 5]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Char","toLower") [],Var 2],Comb ConsCall ("Prelude",":") [Var 4,Var 5]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])])])),Func ("HtmlParser","deleteLastApo") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Case  Rigid (Comb FuncCall ("Prelude","||") [Comb FuncCall ("Prelude","==") [Var 2,Lit (Charc  '"')],Comb FuncCall ("Prelude","==") [Var 2,Lit (Charc  '\'')]]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude","[]") []])]),Branch (Pattern ("Prelude",":") [4,5]) (Comb ConsCall ("Prelude",":") [Var 2,Comb FuncCall ("HtmlParser","deleteLastApo") [Comb ConsCall ("Prelude",":") [Var 4,Var 5]]])])])),Func ("HtmlParser","splitAtElement") 2 Private (FuncType (FuncType (TVar 0) (TCons ("Prelude","Bool") [])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TVar 0]]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","[]") [],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude",":") [3,4]) (Case  Rigid (Comb FuncCall ("Prelude","apply") [Var 1,Var 3]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","[]") [],Var 4]),Branch (Pattern ("Prelude","False") []) (Let [(5,Comb FuncCall ("HtmlParser","splitAtElement") [Var 1,Var 4]),(6,Comb FuncCall ("HtmlParser","splitAtElement._#selFP27#first") [Var 5]),(7,Comb FuncCall ("HtmlParser","splitAtElement._#selFP28#rest") [Var 5])] (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Var 3,Var 6],Var 7]))])])),Func ("HtmlParser","splitAtElement._#selFP27#first") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 116],TCons ("Prelude","[]") [TVar 116]]) (TCons ("Prelude","[]") [TVar 116])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("HtmlParser","splitAtElement._#selFP28#rest") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 116],TCons ("Prelude","[]") [TVar 116]]) (TCons ("Prelude","[]") [TVar 116])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("HtmlParser","skipFirstNewLine") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [2,3]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 2,Lit (Charc  '\010')]) [Branch (Pattern ("Prelude","True") []) (Var 3),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Char","isSpace") [Var 2]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("HtmlParser","skipFirstNewLine") [Var 3]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude",":") [Var 2,Var 3])])])]))] []