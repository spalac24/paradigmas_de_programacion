Prog "CLPFD" ["Prelude"] [Type ("CLPFD","Constraint") Public [] [Cons ("CLPFD","FDEqual") 2 Private [TCons ("Prelude","Int") [],TCons ("Prelude","Int") []],Cons ("CLPFD","FDNotEqual") 2 Private [TCons ("Prelude","Int") [],TCons ("Prelude","Int") []],Cons ("CLPFD","FDGreater") 2 Private [TCons ("Prelude","Int") [],TCons ("Prelude","Int") []],Cons ("CLPFD","FDGreaterOrEqual") 2 Private [TCons ("Prelude","Int") [],TCons ("Prelude","Int") []],Cons ("CLPFD","FDLess") 2 Private [TCons ("Prelude","Int") [],TCons ("Prelude","Int") []],Cons ("CLPFD","FDLessOrEqual") 2 Private [TCons ("Prelude","Int") [],TCons ("Prelude","Int") []],Cons ("CLPFD","FDNeg") 1 Private [TCons ("CLPFD","Constraint") []],Cons ("CLPFD","FDAnd") 2 Private [TCons ("CLPFD","Constraint") [],TCons ("CLPFD","Constraint") []],Cons ("CLPFD","FDOr") 2 Private [TCons ("CLPFD","Constraint") [],TCons ("CLPFD","Constraint") []],Cons ("CLPFD","FDImply") 2 Private [TCons ("CLPFD","Constraint") [],TCons ("CLPFD","Constraint") []],Cons ("CLPFD","FDEquiv") 2 Private [TCons ("CLPFD","Constraint") [],TCons ("CLPFD","Constraint") []]],Type ("CLPFD","LabelingOption") Public [] [Cons ("CLPFD","LeftMost") 0 Public [],Cons ("CLPFD","FirstFail") 0 Public [],Cons ("CLPFD","FirstFailConstrained") 0 Public [],Cons ("CLPFD","Min") 0 Public [],Cons ("CLPFD","Max") 0 Public [],Cons ("CLPFD","Step") 0 Public [],Cons ("CLPFD","Enum") 0 Public [],Cons ("CLPFD","Bisect") 0 Public [],Cons ("CLPFD","Up") 0 Public [],Cons ("CLPFD","Down") 0 Public [],Cons ("CLPFD","All") 0 Public [],Cons ("CLPFD","Minimize") 1 Public [TCons ("Prelude","Int") []],Cons ("CLPFD","Maximize") 1 Public [TCons ("Prelude","Int") []],Cons ("CLPFD","Assumptions") 1 Public [TCons ("Prelude","Int") []]]] [Func ("CLPFD","domain") 3 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Success") [])))) (Rule [1,2,3] (Comb FuncCall ("Prelude","$#") [Comb FuncCall ("Prelude","$#") [Comb FuncCall ("Prelude","$!!") [Comb (FuncPartCall 3) ("CLPFD","prim_domain") [],Comb FuncCall ("Prelude","ensureSpine") [Var 1]],Var 2],Var 3])),Func ("CLPFD","prim_domain") 3 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Success") [])))) (External "CLPFD.prim_domain"),Func ("CLPFD","+#") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (Rule [1,2] (Comb FuncCall ("Prelude","$!") [Comb FuncCall ("Prelude","$!") [Comb (FuncPartCall 2) ("CLPFD","prim_FD_plus") [],Var 2],Var 1])),Func ("CLPFD","prim_FD_plus") 2 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (External "CLPFD.prim_FD_plus"),Func ("CLPFD","-#") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (Rule [1,2] (Comb FuncCall ("Prelude","$!") [Comb FuncCall ("Prelude","$!") [Comb (FuncPartCall 2) ("CLPFD","prim_FD_minus") [],Var 2],Var 1])),Func ("CLPFD","prim_FD_minus") 2 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (External "CLPFD.prim_FD_minus"),Func ("CLPFD","*#") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (Rule [1,2] (Comb FuncCall ("Prelude","$!") [Comb FuncCall ("Prelude","$!") [Comb (FuncPartCall 2) ("CLPFD","prim_FD_times") [],Var 2],Var 1])),Func ("CLPFD","prim_FD_times") 2 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (External "CLPFD.prim_FD_times"),Func ("CLPFD","=#") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Success") []))) (Rule [1,2] (Comb FuncCall ("Prelude","$!") [Comb FuncCall ("Prelude","$!") [Comb (FuncPartCall 2) ("CLPFD","prim_FD_equal") [],Var 2],Var 1])),Func ("CLPFD","prim_FD_equal") 2 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Success") []))) (External "CLPFD.prim_FD_equal"),Func ("CLPFD","/=#") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Success") []))) (Rule [1,2] (Comb FuncCall ("Prelude","$!") [Comb FuncCall ("Prelude","$!") [Comb (FuncPartCall 2) ("CLPFD","prim_FD_notequal") [],Var 2],Var 1])),Func ("CLPFD","prim_FD_notequal") 2 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Success") []))) (External "CLPFD.prim_FD_notequal"),Func ("CLPFD","<#") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Success") []))) (Rule [1,2] (Comb FuncCall ("Prelude","$!") [Comb FuncCall ("Prelude","$!") [Comb (FuncPartCall 2) ("CLPFD","prim_FD_le") [],Var 2],Var 1])),Func ("CLPFD","prim_FD_le") 2 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Success") []))) (External "CLPFD.prim_FD_le"),Func ("CLPFD","<=#") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Success") []))) (Rule [1,2] (Comb FuncCall ("Prelude","$!") [Comb FuncCall ("Prelude","$!") [Comb (FuncPartCall 2) ("CLPFD","prim_FD_leq") [],Var 2],Var 1])),Func ("CLPFD","prim_FD_leq") 2 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Success") []))) (External "CLPFD.prim_FD_leq"),Func ("CLPFD",">#") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Success") []))) (Rule [1,2] (Comb FuncCall ("Prelude","$!") [Comb FuncCall ("Prelude","$!") [Comb (FuncPartCall 2) ("CLPFD","prim_FD_ge") [],Var 2],Var 1])),Func ("CLPFD","prim_FD_ge") 2 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Success") []))) (External "CLPFD.prim_FD_ge"),Func ("CLPFD",">=#") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Success") []))) (Rule [1,2] (Comb FuncCall ("Prelude","$!") [Comb FuncCall ("Prelude","$!") [Comb (FuncPartCall 2) ("CLPFD","prim_FD_geq") [],Var 2],Var 1])),Func ("CLPFD","prim_FD_geq") 2 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Success") []))) (External "CLPFD.prim_FD_geq"),Func ("CLPFD","#=#") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("CLPFD","Constraint") []))) (Rule [1,2] (Comb ConsCall ("CLPFD","FDEqual") [Var 1,Var 2])),Func ("CLPFD","#/=#") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("CLPFD","Constraint") []))) (Rule [1,2] (Comb ConsCall ("CLPFD","FDNotEqual") [Var 1,Var 2])),Func ("CLPFD","#<#") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("CLPFD","Constraint") []))) (Rule [1,2] (Comb ConsCall ("CLPFD","FDLess") [Var 1,Var 2])),Func ("CLPFD","#<=#") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("CLPFD","Constraint") []))) (Rule [1,2] (Comb ConsCall ("CLPFD","FDLessOrEqual") [Var 1,Var 2])),Func ("CLPFD","#>#") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("CLPFD","Constraint") []))) (Rule [1,2] (Comb ConsCall ("CLPFD","FDGreater") [Var 1,Var 2])),Func ("CLPFD","#>=#") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("CLPFD","Constraint") []))) (Rule [1,2] (Comb ConsCall ("CLPFD","FDGreaterOrEqual") [Var 1,Var 2])),Func ("CLPFD","neg") 1 Public (FuncType (TCons ("CLPFD","Constraint") []) (TCons ("CLPFD","Constraint") [])) (Rule [1] (Comb ConsCall ("CLPFD","FDNeg") [Var 1])),Func ("CLPFD","#/\\#") 2 Public (FuncType (TCons ("CLPFD","Constraint") []) (FuncType (TCons ("CLPFD","Constraint") []) (TCons ("CLPFD","Constraint") []))) (Rule [1,2] (Comb ConsCall ("CLPFD","FDAnd") [Var 1,Var 2])),Func ("CLPFD","#\\/#") 2 Public (FuncType (TCons ("CLPFD","Constraint") []) (FuncType (TCons ("CLPFD","Constraint") []) (TCons ("CLPFD","Constraint") []))) (Rule [1,2] (Comb ConsCall ("CLPFD","FDOr") [Var 1,Var 2])),Func ("CLPFD","#=>#") 2 Public (FuncType (TCons ("CLPFD","Constraint") []) (FuncType (TCons ("CLPFD","Constraint") []) (TCons ("CLPFD","Constraint") []))) (Rule [1,2] (Comb ConsCall ("CLPFD","FDImply") [Var 1,Var 2])),Func ("CLPFD","#<=>#") 2 Public (FuncType (TCons ("CLPFD","Constraint") []) (FuncType (TCons ("CLPFD","Constraint") []) (TCons ("CLPFD","Constraint") []))) (Rule [1,2] (Comb ConsCall ("CLPFD","FDEquiv") [Var 1,Var 2])),Func ("CLPFD","solve") 1 Public (FuncType (TCons ("CLPFD","Constraint") []) (TCons ("Prelude","Success") [])) (Rule [1] (Comb FuncCall ("Prelude","$!!") [Comb (FuncPartCall 1) ("CLPFD","prim_solve_reify") [],Var 1])),Func ("CLPFD","prim_solve_reify") 1 Private (FuncType (TCons ("CLPFD","Constraint") []) (TCons ("Prelude","Success") [])) (External "CLPFD.prim_solve_reify"),Func ("CLPFD","sum") 3 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Success") []))) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Success") [])))) (Rule [1,2,3] (Comb FuncCall ("Prelude","seq") [Comb FuncCall ("Prelude","normalForm") [Comb FuncCall ("Prelude","ensureSpine") [Var 1]],Comb FuncCall ("Prelude","seq") [Comb FuncCall ("Prelude","ensureNotFree") [Var 2],Comb FuncCall ("Prelude","seq") [Var 3,Comb FuncCall ("CLPFD","prim_sum") [Var 1,Var 2,Var 3]]]])),Func ("CLPFD","prim_sum") 3 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Success") []))) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Success") [])))) (External "CLPFD.prim_sum"),Func ("CLPFD","scalarProduct") 4 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Success") []))) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Success") []))))) (Rule [1,2,3,4] (Comb FuncCall ("Prelude","seq") [Comb FuncCall ("Prelude","groundNormalForm") [Var 1],Comb FuncCall ("Prelude","seq") [Comb FuncCall ("Prelude","normalForm") [Comb FuncCall ("Prelude","ensureSpine") [Var 2]],Comb FuncCall ("Prelude","seq") [Comb FuncCall ("Prelude","ensureNotFree") [Var 3],Comb FuncCall ("Prelude","seq") [Var 4,Comb FuncCall ("CLPFD","prim_scalarProduct") [Var 1,Var 2,Var 3,Var 4]]]]])),Func ("CLPFD","prim_scalarProduct") 4 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Success") []))) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Success") []))))) (External "CLPFD.prim_scalarProduct"),Func ("CLPFD","count") 4 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Success") []))) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Success") []))))) (Rule [1,2,3,4] (Comb FuncCall ("Prelude","seq") [Comb FuncCall ("Prelude","ensureNotFree") [Var 1],Comb FuncCall ("Prelude","seq") [Comb FuncCall ("Prelude","normalForm") [Comb FuncCall ("Prelude","ensureSpine") [Var 2]],Comb FuncCall ("Prelude","seq") [Comb FuncCall ("Prelude","ensureNotFree") [Var 3],Comb FuncCall ("Prelude","seq") [Var 4,Comb FuncCall ("CLPFD","prim_count") [Var 1,Var 2,Var 3,Var 4]]]]])),Func ("CLPFD","prim_count") 4 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Success") []))) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Success") []))))) (External "CLPFD.prim_count"),Func ("CLPFD","allDifferent") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","Success") [])) (Rule [1] (Comb FuncCall ("Prelude","seq") [Comb FuncCall ("Prelude","normalForm") [Comb FuncCall ("Prelude","ensureSpine") [Var 1]],Comb FuncCall ("CLPFD","prim_allDifferent") [Var 1]])),Func ("CLPFD","all_different") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","Success") [])) (Rule [] (Comb (FuncPartCall 1) ("CLPFD","allDifferent") [])),Func ("CLPFD","prim_allDifferent") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","Success") [])) (External "CLPFD.prim_allDifferent"),Func ("CLPFD","indomain") 1 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Success") [])) (Rule [1] (Comb FuncCall ("Prelude","seq") [Var 1,Comb FuncCall ("CLPFD","prim_indomain") [Var 1]])),Func ("CLPFD","prim_indomain") 1 Private (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Success") [])) (External "CLPFD.prim_indomain"),Func ("CLPFD","labeling") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("CLPFD","LabelingOption") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","Success") []))) (Rule [1,2] (Comb FuncCall ("Prelude","seq") [Comb FuncCall ("Prelude","normalForm") [Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Prelude","ensureNotFree") [],Comb FuncCall ("Prelude","ensureSpine") [Var 1]]],Comb FuncCall ("Prelude","seq") [Comb FuncCall ("Prelude","normalForm") [Comb FuncCall ("Prelude","ensureSpine") [Var 2]],Comb FuncCall ("CLPFD","prim_labeling") [Var 1,Var 2]]])),Func ("CLPFD","prim_labeling") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("CLPFD","LabelingOption") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","Success") []))) (External "CLPFD.prim_labeling")] [Op ("CLPFD","*#") InfixlOp 7,Op ("CLPFD","+#") InfixlOp 6,Op ("CLPFD","-#") InfixlOp 6,Op ("CLPFD","=#") InfixOp 4,Op ("CLPFD","/=#") InfixOp 4,Op ("CLPFD","<#") InfixOp 4,Op ("CLPFD","<=#") InfixOp 4,Op ("CLPFD",">#") InfixOp 4,Op ("CLPFD",">=#") InfixOp 4,Op ("CLPFD","#=#") InfixOp 4,Op ("CLPFD","#/=#") InfixOp 4,Op ("CLPFD","#<#") InfixOp 4,Op ("CLPFD","#<=#") InfixOp 4,Op ("CLPFD","#>#") InfixOp 4,Op ("CLPFD","#>=#") InfixOp 4,Op ("CLPFD","#/\\#") InfixrOp 3,Op ("CLPFD","#\\/#") InfixrOp 2,Op ("CLPFD","#=>#") InfixrOp 1,Op ("CLPFD","#<=>#") InfixrOp 1]