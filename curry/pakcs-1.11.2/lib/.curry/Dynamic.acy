CurryProg "Dynamic"
 ["Prelude","AllSolutions"]
 [CType ("Dynamic","Dynamic") Public [] [CCons ("Dynamic","Dynamic") 1 Public [CTCons ("Dynamic","DynSpec") []],CCons ("Dynamic","Prod") 2 Private [CTCons ("Dynamic","Dynamic") [],CTCons ("Dynamic","Dynamic") []],CCons ("Dynamic","Cond") 2 Private [CTCons ("Dynamic","Dynamic") [],CTCons ("Prelude","Bool") []]],
  CType ("Dynamic","DynSpec") Private [] [CCons ("Dynamic","Temporary") 0 Private [],CCons ("Dynamic","Persistent") 0 Private []]]
 [CFunc ("Dynamic","dynamic") 0 Public (CTVar (0,"a")) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CSymbol ("Prelude","failed"))] []]),
  CFunc ("Dynamic","persistent") 1 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTVar (0,"a"))) (CRules CFlex [CRule [CPVar (0,"_")] [(CSymbol ("Prelude","success"),CSymbol ("Prelude","failed"))] []]),
  CFunc ("Dynamic","<>") 2 Public (CFuncType (CTCons ("Dynamic","Dynamic") []) (CFuncType (CTCons ("Dynamic","Dynamic") []) (CTCons ("Dynamic","Dynamic") []))) (CRules CFlex [CRule [CPVar (0,"d1"),CPVar (1,"d2")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Dynamic","Prod")) (CVar (0,"d1"))) (CVar (1,"d2")))] []]),
  CFunc ("Dynamic","|>") 2 Public (CFuncType (CTCons ("Dynamic","Dynamic") []) (CFuncType (CTCons ("Prelude","Bool") []) (CTCons ("Dynamic","Dynamic") []))) (CRules CFlex [CRule [CPVar (0,"d"),CPVar (1,"b")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Dynamic","Cond")) (CVar (0,"d"))) (CVar (1,"b")))] []]),
  CFunc ("Dynamic","|&>") 2 Public (CFuncType (CTCons ("Dynamic","Dynamic") []) (CFuncType (CTCons ("Prelude","Success") []) (CTCons ("Dynamic","Dynamic") []))) (CRules CFlex [CRule [CPVar (0,"d"),CPVar (1,"c")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Dynamic","|>")) (CVar (0,"d"))) (CApply (CApply (CSymbol ("Prelude","&>")) (CVar (1,"c"))) (CSymbol ("Prelude","True"))))] []]),
  CFunc ("Dynamic","assert") 1 Public (CFuncType (CTCons ("Dynamic","Dynamic") []) (CTCons ("Prelude","IO") [CTCons ("Prelude","()") []])) (CRules CFlex [CRule [CPComb ("Dynamic","Dynamic") [CPVar (0,"spec")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Dynamic","assertFact")) (CApply (CSymbol ("Dynamic","Dynamic")) (CVar (0,"spec"))))] [],CRule [CPComb ("Dynamic","Prod") [CPVar (1,"d1"),CPVar (2,"d2")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",">>")) (CApply (CSymbol ("Dynamic","assert")) (CVar (1,"d1")))) (CApply (CSymbol ("Dynamic","assert")) (CVar (2,"d2"))))] [],CRule [CPComb ("Dynamic","Cond") [CPVar (3,"d"),CPVar (4,"b")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CVar (4,"b"))) (CApply (CSymbol ("Dynamic","assert")) (CVar (3,"d")))) (CSymbol ("Prelude","done")))] []]),
  CFunc ("Dynamic","retract") 1 Public (CFuncType (CTCons ("Dynamic","Dynamic") []) (CTCons ("Prelude","IO") [CTCons ("Prelude","Bool") []])) (CRules CFlex [CRule [CPComb ("Dynamic","Dynamic") [CPVar (0,"spec")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Dynamic","retractFact")) (CApply (CSymbol ("Dynamic","Dynamic")) (CVar (0,"spec"))))] [],CRule [CPComb ("Dynamic","Prod") [CPVar (1,"d1"),CPVar (2,"d2")]] [(CSymbol ("Prelude","success"),CDoExpr [CSPat (CPVar (3,"b1")) (CApply (CSymbol ("Dynamic","retract")) (CVar (1,"d1"))),CSPat (CPVar (4,"b2")) (CApply (CSymbol ("Dynamic","retract")) (CVar (2,"d2"))),CSExpr (CApply (CSymbol ("Prelude","return")) (CApply (CApply (CSymbol ("Prelude","&&")) (CVar (3,"b1"))) (CVar (4,"b2"))))])] [],CRule [CPComb ("Dynamic","Cond") [CPVar (5,"d"),CPVar (6,"b")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CVar (6,"b"))) (CApply (CSymbol ("Dynamic","retract")) (CVar (5,"d")))) (CApply (CSymbol ("Prelude","return")) (CSymbol ("Prelude","True"))))] []]),
  CFunc ("Dynamic","getKnowledge") 0 Public (CTCons ("Prelude","IO") [CFuncType (CTCons ("Dynamic","Dynamic") []) (CTCons ("Prelude","Success") [])]) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CDoExpr [CSPat (CPVar (0,"known")) (CSymbol ("Dynamic","getDynamicKnowledge")),CSExpr (CApply (CSymbol ("Prelude","return")) (CApply (CSymbol ("Dynamic","knownAll")) (CVar (0,"known"))))])] [CLocalFunc (CFunc ("Dynamic","knownAll") 2 Private (CFuncType (CFuncType (CTCons ("Dynamic","Dynamic") []) (CTCons ("Prelude","Success") [])) (CFuncType (CTCons ("Dynamic","Dynamic") []) (CTCons ("Prelude","Success") []))) (CRules CFlex [CRule [CPVar (0,"k"),CPComb ("Dynamic","Dynamic") [CPVar (1,"spec")]] [(CSymbol ("Prelude","success"),CApply (CVar (0,"k")) (CApply (CSymbol ("Dynamic","Dynamic")) (CVar (1,"spec"))))] [],CRule [CPVar (2,"k"),CPComb ("Dynamic","Prod") [CPVar (3,"d1"),CPVar (4,"d2")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","&")) (CApply (CApply (CSymbol ("Dynamic","knownAll")) (CVar (2,"k"))) (CVar (3,"d1")))) (CApply (CApply (CSymbol ("Dynamic","knownAll")) (CVar (2,"k"))) (CVar (4,"d2"))))] [],CRule [CPVar (5,"k"),CPComb ("Dynamic","Cond") [CPVar (6,"d"),CPVar (7,"b")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","&")) (CApply (CApply (CSymbol ("Dynamic","knownAll")) (CVar (5,"k"))) (CVar (6,"d")))) (CApply (CApply (CSymbol ("Prelude","=:=")) (CVar (7,"b"))) (CSymbol ("Prelude","True"))))] []]))]]),
  CFunc ("Dynamic","getDynamicSolutions") 1 Public (CFuncType (CFuncType (CTVar (0,"a")) (CTCons ("Dynamic","Dynamic") [])) (CTCons ("Prelude","IO") [CTCons ("Prelude","[]") [CTVar (0,"a")]])) (CRules CFlex [CRule [CPVar (0,"query")] [(CSymbol ("Prelude","success"),CDoExpr [CSPat (CPVar (1,"known")) (CSymbol ("Dynamic","getKnowledge")),CSExpr (CApply (CSymbol ("AllSolutions","getAllSolutions")) (CLambda [CPVar (2,"x")] (CApply (CVar (1,"known")) (CApply (CVar (0,"query")) (CVar (2,"x"))))))])] []]),
  CFunc ("Dynamic","getDynamicSolution") 1 Public (CFuncType (CFuncType (CTVar (0,"a")) (CTCons ("Dynamic","Dynamic") [])) (CTCons ("Prelude","IO") [CTCons ("Prelude","Maybe") [CTVar (0,"a")]])) (CRules CFlex [CRule [CPVar (0,"query")] [(CSymbol ("Prelude","success"),CDoExpr [CSPat (CPVar (1,"known")) (CSymbol ("Dynamic","getKnowledge")),CSExpr (CApply (CSymbol ("AllSolutions","getOneSolution")) (CLambda [CPVar (2,"x")] (CApply (CVar (1,"known")) (CApply (CVar (0,"query")) (CVar (2,"x"))))))])] []]),
  CFunc ("Dynamic","isKnown") 1 Public (CFuncType (CTCons ("Dynamic","Dynamic") []) (CTCons ("Prelude","IO") [CTCons ("Prelude","Bool") []])) (CRules CFlex [CRule [CPComb ("Dynamic","Dynamic") [CPVar (0,"spec")]] [(CSymbol ("Prelude","success"),CDoExpr [CSPat (CPVar (1,"known")) (CSymbol ("Dynamic","getDynamicKnowledge")),CSPat (CPVar (3,"first")) (CApply (CSymbol ("AllSolutions","getOneSolution")) (CLambda [CPVar (2,"_")] (CApply (CVar (1,"known")) (CApply (CSymbol ("Dynamic","Dynamic")) (CVar (0,"spec")))))),CSExpr (CApply (CSymbol ("Prelude","return")) (CApply (CApply (CSymbol ("Prelude","/=")) (CVar (3,"first"))) (CSymbol ("Prelude","Nothing"))))])] [],CRule [CPComb ("Dynamic","Prod") [CPVar (4,"d1"),CPVar (5,"d2")]] [(CSymbol ("Prelude","success"),CDoExpr [CSPat (CPVar (6,"b1")) (CApply (CSymbol ("Dynamic","isKnown")) (CVar (4,"d1"))),CSPat (CPVar (7,"b2")) (CApply (CSymbol ("Dynamic","isKnown")) (CVar (5,"d2"))),CSExpr (CApply (CSymbol ("Prelude","return")) (CApply (CApply (CSymbol ("Prelude","&&")) (CVar (6,"b1"))) (CVar (7,"b2"))))])] [],CRule [CPComb ("Dynamic","Cond") [CPVar (8,"d"),CPVar (9,"c")]] [(CSymbol ("Prelude","success"),CDoExpr [CSPat (CPVar (10,"b")) (CApply (CSymbol ("Dynamic","isKnown")) (CVar (8,"d"))),CSExpr (CApply (CSymbol ("Prelude","return")) (CApply (CApply (CSymbol ("Prelude","&&")) (CVar (10,"b"))) (CVar (9,"c"))))])] []]),
  CFunc ("Dynamic","transaction") 1 Public (CFuncType (CTCons ("Prelude","IO") [CTVar (0,"a")]) (CTCons ("Prelude","IO") [CTCons ("Prelude","Maybe") [CTVar (0,"a")]])) (CRules CFlex [CRule [CPVar (0,"action")] [(CSymbol ("Prelude","success"),CDoExpr [CSPat (CPVar (1,"tnr")) (CSymbol ("Dynamic","startTransaction")),CSExpr (CApply (CApply (CSymbol ("Prelude","catchFail")) (CApply (CSymbol ("Dynamic","performTrans")) (CVar (1,"tnr")))) (CApply (CApply (CSymbol ("Prelude","catchFail")) (CSymbol ("Dynamic","abortTransaction"))) (CApply (CSymbol ("Prelude","return")) (CSymbol ("Prelude","Nothing")))))])] [CLocalFunc (CFunc ("Dynamic","performTrans") 1 Private (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("Prelude","IO") [CTCons ("Prelude","Maybe") [CTVar (1,"_109")]])) (CRules CFlex [CRule [CPVar (1,"tnr")] [(CSymbol ("Prelude","success"),CDoExpr [CSPat (CPVar (2,"result")) (CVar (0,"action")),CSExpr (CApply (CSymbol ("Dynamic","commitTransaction")) (CVar (1,"tnr"))),CSExpr (CApply (CSymbol ("Prelude","return")) (CApply (CSymbol ("Prelude","Just")) (CVar (2,"result"))))])] []]))]]),
  CFunc ("Dynamic","transactionWithErrorCatch") 1 Public (CFuncType (CTCons ("Prelude","IO") [CTVar (0,"a")]) (CTCons ("Prelude","IO") [CTCons ("Prelude","Either") [CTVar (0,"a"),CTCons ("Prelude","IOError") []]])) (CRules CFlex [CRule [CPVar (0,"action")] [(CSymbol ("Prelude","success"),CDoExpr [CSPat (CPVar (1,"tnr")) (CSymbol ("Dynamic","startTransaction")),CSExpr (CApply (CApply (CSymbol ("Prelude","catch")) (CApply (CSymbol ("Dynamic","performTrans")) (CVar (1,"tnr")))) (CLambda [CPVar (2,"e")] (CApply (CApply (CSymbol ("Prelude","catch")) (CSymbol ("Dynamic","abortTransaction"))) (CLambda [CPVar (3,"_")] (CApply (CSymbol ("Prelude","return")) (CApply (CSymbol ("Prelude","Right")) (CVar (2,"e"))))))))])] [CLocalFunc (CFunc ("Dynamic","performTrans") 1 Private (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("Prelude","IO") [CTCons ("Prelude","Either") [CTVar (1,"_129"),CTVar (0,"a")]])) (CRules CFlex [CRule [CPVar (1,"tnr")] [(CSymbol ("Prelude","success"),CDoExpr [CSPat (CPVar (2,"result")) (CVar (0,"action")),CSExpr (CApply (CSymbol ("Dynamic","commitTransaction")) (CVar (1,"tnr"))),CSExpr (CApply (CSymbol ("Prelude","return")) (CApply (CSymbol ("Prelude","Left")) (CVar (2,"result"))))])] []]))]]),
  CFunc ("Dynamic","abortTransaction") 0 Public (CTCons ("Prelude","IO") [CTVar (0,"a")]) (CExternal "abortTransaction"),
  CFunc ("Dynamic","assertFact") 1 Private (CFuncType (CTCons ("Dynamic","Dynamic") []) (CTCons ("Prelude","IO") [CTCons ("Prelude","()") []])) (CRules CFlex [CRule [CPVar (0,"pred")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","$##")) (CSymbol ("Dynamic","prim_assertFact"))) (CVar (0,"pred")))] []]),
  CFunc ("Dynamic","prim_assertFact") 1 Private (CFuncType (CTCons ("Dynamic","Dynamic") []) (CTCons ("Prelude","IO") [CTCons ("Prelude","()") []])) (CExternal "prim_assertFact"),
  CFunc ("Dynamic","retractFact") 1 Private (CFuncType (CTCons ("Dynamic","Dynamic") []) (CTCons ("Prelude","IO") [CTCons ("Prelude","Bool") []])) (CRules CFlex [CRule [CPVar (0,"pred")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","$##")) (CSymbol ("Dynamic","prim_retractFact"))) (CVar (0,"pred")))] []]),
  CFunc ("Dynamic","prim_retractFact") 1 Private (CFuncType (CTCons ("Dynamic","Dynamic") []) (CTCons ("Prelude","IO") [CTCons ("Prelude","Bool") []])) (CExternal "prim_retractFact"),
  CFunc ("Dynamic","getDynamicKnowledge") 0 Private (CTCons ("Prelude","IO") [CFuncType (CTCons ("Dynamic","Dynamic") []) (CTCons ("Prelude","Success") [])]) (CExternal "getDynamicKnowledge"),
  CFunc ("Dynamic","startTransaction") 0 Private (CTCons ("Prelude","IO") [CTCons ("Prelude","Int") []]) (CExternal "startTransaction"),
  CFunc ("Dynamic","commitTransaction") 1 Private (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("Prelude","IO") [CTCons ("Prelude","()") []])) (CRules CFlex [CRule [CPVar (0,"t")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","$#")) (CSymbol ("Dynamic","prim_commitTransaction"))) (CVar (0,"t")))] []]),
  CFunc ("Dynamic","prim_commitTransaction") 1 Private (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("Prelude","IO") [CTCons ("Prelude","()") []])) (CExternal "prim_commitTransaction"),
  CFunc ("Dynamic","isKnownAtTime") 2 Private (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Dynamic","Dynamic") []) (CTCons ("Prelude","Success") []))) (CRules CFlex [CRule [CPVar (0,"t"),CPVar (1,"dyn")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","$!!")) (CApply (CApply (CSymbol ("Prelude","$#")) (CSymbol ("Dynamic","prim_isKnownAtTime"))) (CVar (0,"t")))) (CVar (1,"dyn")))] []]),
  CFunc ("Dynamic","prim_isKnownAtTime") 2 Private (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Dynamic","Dynamic") []) (CTCons ("Prelude","Success") []))) (CExternal "prim_isKnownAtTime")]
 [COp ("Dynamic","<>") CInfixrOp 2,COp ("Dynamic","|&>") CInfixlOp 1,COp ("Dynamic","|>") CInfixlOp 1]
