CurryProg "CategorizedHtmlList"
 ["Prelude","List","HTML","Char"]
 []
 [CFunc ("CategorizedHtmlList","list2CategorizedHtml") 3 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTVar (0,"a"),CTCons ("Prelude","[]") [CTCons ("HTML","HtmlExp") []]]]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTVar (1,"b"),CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]]) (CFuncType (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (1,"b")) (CTCons ("Prelude","Bool") []))) (CTCons ("Prelude","[]") [CTCons ("HTML","HtmlExp") []])))) (CRules CFlex [CRule [CPVar (0,"itemL"),CPVar (1,"categoryL"),CPVar (2,"categoryFun")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("CategorizedHtmlList","categories2LinkList")) (CVar (1,"categoryL")))) (CApply (CApply (CSymbol ("Prelude","map")) (CLambda [CPComb ("Prelude","(,)") [CPVar (3,"categoryKey"),CPVar (4,"categoryString")]] (CApply (CApply (CSymbol ("HTML","anchor")) (CApply (CSymbol ("HTML","string2urlencoded")) (CApply (CSymbol ("Prelude","show")) (CVar (3,"categoryKey"))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("HTML","h2")) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("HTML","htxt")) (CVar (4,"categoryString")))) (CSymbol ("Prelude","[]"))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude","concatMap")) (CLambda [CPComb ("Prelude","(,)") [CPVar (5,"_"),CPVar (6,"item")]] (CApply (CApply (CSymbol ("Prelude","++")) (CVar (6,"item"))) (CApply (CApply (CSymbol ("Prelude",":")) (CSymbol ("HTML","breakline"))) (CSymbol ("Prelude","[]")))))) (CApply (CApply (CSymbol ("Prelude","filter")) (CLambda [CPComb ("Prelude","(,)") [CPVar (7,"itemKey"),CPVar (8,"_")]] (CApply (CApply (CVar (2,"categoryFun")) (CVar (7,"itemKey"))) (CVar (3,"categoryKey"))))) (CVar (0,"itemL"))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("CategorizedHtmlList","categories2LinkList")) (CVar (1,"categoryL")))) (CSymbol ("Prelude","[]")))))))) (CVar (1,"categoryL"))))] []]),
  CFunc ("CategorizedHtmlList","categories2LinkList") 1 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTVar (0,"a"),CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]]) (CTCons ("HTML","HtmlExp") [])) (CRules CFlex [CRule [CPVar (0,"categoryL")] [(CSymbol ("Prelude","success"),CApply (CSymbol ("HTML","par")) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("HTML","center")) (CApply (CApply (CSymbol ("Prelude","concatMap")) (CLambda [CPComb ("Prelude","(,)") [CPVar (1,"categoryKey"),CPVar (2,"categoryString")]] (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("HTML","href")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '#'))) (CApply (CSymbol ("HTML","string2urlencoded")) (CApply (CSymbol ("Prelude","show")) (CVar (1,"categoryKey")))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("HTML","htxt")) (CVar (2,"categoryString")))) (CSymbol ("Prelude","[]"))))) (CApply (CApply (CSymbol ("Prelude",":")) (CSymbol ("HTML","nbsp"))) (CSymbol ("Prelude","[]")))))) (CVar (0,"categoryL"))))) (CSymbol ("Prelude","[]"))))] []]),
  CFunc ("CategorizedHtmlList","categorizeByItemKey") 1 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("HTML","HtmlExp") []]]]) (CTCons ("Prelude","[]") [CTCons ("HTML","HtmlExp") []])) (CRules CFlex [CRule [CPVar (0,"itemL")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("CategorizedHtmlList","list2CategorizedHtml")) (CVar (0,"itemL"))) (CApply (CApply (CSymbol ("Prelude","map")) (CLambda [CPVar (1,"c")] (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CSymbol ("Char","toUpper")) (CVar (1,"c")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("Char","toUpper")) (CVar (1,"c")))) (CSymbol ("Prelude","[]")))))) (CApply (CSymbol ("CategorizedHtmlList","listHeads")) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("Prelude","fst"))) (CVar (0,"itemL")))))) (CSymbol ("CategorizedHtmlList","categorizeStringHead")))] []]),
  CFunc ("CategorizedHtmlList","stringList2ItemList") 0 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]) (CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("HTML","HtmlExp") []]]])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Prelude","map")) (CLambda [CPVar (0,"str")] (CApply (CApply (CSymbol ("Prelude","(,)")) (CVar (0,"str"))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("HTML","htxt")) (CVar (0,"str")))) (CSymbol ("Prelude","[]"))))))] []]),
  CFunc ("CategorizedHtmlList","listHeads") 0 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",".")) (CApply (CSymbol ("List","nubBy")) (CSymbol ("CategorizedHtmlList","isUpperEqual")))) (CApply (CApply (CSymbol ("Prelude","foldr")) (CLambda [CPVar (0,"xs"),CPVar (1,"ys")] (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (0,"xs"))) (CSymbol ("Prelude","[]")))) (CVar (1,"ys"))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("Prelude","head")) (CVar (0,"xs")))) (CVar (1,"ys")))))) (CSymbol ("Prelude","[]"))))] []]),
  CFunc ("CategorizedHtmlList","categorizeStringHead") 2 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("Prelude","Char") []) (CTCons ("Prelude","Bool") []))) (CRules CFlex [CRule [CPComb ("Prelude","[]") [],CPVar (0,"_")] [(CSymbol ("Prelude","success"),CSymbol ("Prelude","False"))] [],CRule [CPComb ("Prelude",":") [CPVar (1,"c"),CPVar (2,"_")],CPVar (3,"c'")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("CategorizedHtmlList","isUpperEqual")) (CVar (1,"c"))) (CVar (3,"c'")))] []]),
  CFunc ("CategorizedHtmlList","isUpperEqual") 2 Private (CFuncType (CTCons ("Prelude","Char") []) (CFuncType (CTCons ("Prelude","Char") []) (CTCons ("Prelude","Bool") []))) (CRules CFlex [CRule [CPVar (0,"c"),CPVar (1,"c'")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","==")) (CApply (CSymbol ("Char","toUpper")) (CVar (0,"c")))) (CApply (CSymbol ("Char","toUpper")) (CVar (1,"c'"))))] []]),
  CFunc ("CategorizedHtmlList","main") 0 Private (CTCons ("Prelude","IO") [CTCons ("HTML","HtmlForm") []]) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","$")) (CSymbol ("Prelude","return"))) (CApply (CApply (CSymbol ("HTML","form")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'C'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'T'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CSymbol ("Prelude","[]")))))))))) (CApply (CSymbol ("CategorizedHtmlList","categorizeByItemKey")) (CApply (CSymbol ("CategorizedHtmlList","stringList2ItemList")) (CSymbol ("CategorizedHtmlList","testList"))))))] []]),
  CFunc ("CategorizedHtmlList","testList") 0 Private (CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'b'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'b'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CSymbol ("Prelude","[]"))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]"))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'b'))) (CSymbol ("Prelude","[]"))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]")))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'b'))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'x'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CSymbol ("Prelude","[]"))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'g'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'b'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'b'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CSymbol ("Prelude","[]")))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]")))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'O'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'b'))) (CSymbol ("Prelude","[]")))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'Q'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]"))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'T'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'b'))) (CSymbol ("Prelude","[]"))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'x'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CSymbol ("Prelude","[]")))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'x'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CSymbol ("Prelude","[]"))))))) (CSymbol ("Prelude","[]")))))))))))))))] []])]
 []
