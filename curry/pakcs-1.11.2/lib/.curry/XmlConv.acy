CurryProg "XmlConv"
 ["Prelude","XML","Read","ReadShowTerm"]
 [CType ("XmlConv","Repeatable") Private [] [],
  CType ("XmlConv","NotRepeatable") Private [] [],
  CType ("XmlConv","Elem") Private [] [],
  CType ("XmlConv","NoElem") Private [] [],
  CTypeSyn ("XmlConv","Attrs") Private [] (CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","String") [],CTCons ("Prelude","String") []]]),
  CTypeSyn ("XmlConv","Childs") Private [] (CTCons ("Prelude","(,)") [CTCons ("XmlConv","Attrs") [],CTCons ("Prelude","[]") [CTCons ("XML","XmlExp") []]]),
  CTypeSyn ("XmlConv","XmlReads") Public [(0,"a")] (CFuncType (CTCons ("XmlConv","Childs") []) (CTCons ("Prelude","(,)") [CTVar (0,"a"),CTCons ("XmlConv","Childs") []])),
  CTypeSyn ("XmlConv","XmlShows") Public [(0,"a")] (CFuncType (CTVar (0,"a")) (CFuncType (CTCons ("XmlConv","Childs") []) (CTCons ("XmlConv","Childs") []))),
  CType ("XmlConv","XmlConv") Private [(0,"_"),(1,"_"),(2,"a")] [CCons ("XmlConv","Conv") 2 Private [CTCons ("XmlConv","XmlReads") [CTVar (2,"a")],CTCons ("XmlConv","XmlShows") [CTVar (2,"a")]]],
  CTypeSyn ("XmlConv","ValConv") Private [(0,"a")] (CTCons ("Prelude","(,)") [CFuncType (CTCons ("Prelude","String") []) (CTVar (0,"a")),CFuncType (CTVar (0,"a")) (CTCons ("Prelude","String") [])]),
  CTypeSyn ("XmlConv","XElemConv") Public [(0,"a")] (CTCons ("XmlConv","XmlConv") [CTCons ("XmlConv","Repeatable") [],CTCons ("XmlConv","Elem") [],CTVar (0,"a")]),
  CTypeSyn ("XmlConv","XAttrConv") Public [(0,"a")] (CTCons ("XmlConv","XmlConv") [CTCons ("XmlConv","NotRepeatable") [],CTCons ("XmlConv","NoElem") [],CTVar (0,"a")]),
  CTypeSyn ("XmlConv","XPrimConv") Public [(0,"a")] (CTCons ("XmlConv","XmlConv") [CTCons ("XmlConv","NotRepeatable") [],CTCons ("XmlConv","NoElem") [],CTVar (0,"a")]),
  CTypeSyn ("XmlConv","XOptConv") Public [(0,"a")] (CTCons ("XmlConv","XmlConv") [CTCons ("XmlConv","NotRepeatable") [],CTCons ("XmlConv","NoElem") [],CTVar (0,"a")]),
  CTypeSyn ("XmlConv","XRepConv") Public [(0,"a")] (CTCons ("XmlConv","XmlConv") [CTCons ("XmlConv","NotRepeatable") [],CTCons ("XmlConv","NoElem") [],CTVar (0,"a")]),
  CTypeSyn ("XmlConv","XSeqConv") Private [(0,"a")] (CTCons ("XmlConv","XmlConv") [CTCons ("XmlConv","NotRepeatable") [],CTCons ("XmlConv","NoElem") [],CTVar (0,"a")])]
 [CFunc ("XmlConv","/>=") 2 Private (CFuncType (CFuncType (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]],CTCons ("Prelude","[]") [CTCons ("XML","XmlExp") []]]) (CTCons ("Prelude","(,)") [CTVar (0,"a"),CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]],CTCons ("Prelude","[]") [CTCons ("XML","XmlExp") []]]])) (CFuncType (CFuncType (CTVar (0,"a")) (CFuncType (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]],CTCons ("Prelude","[]") [CTCons ("XML","XmlExp") []]]) (CTCons ("Prelude","(,)") [CTVar (1,"b"),CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]],CTCons ("Prelude","[]") [CTCons ("XML","XmlExp") []]]]))) (CFuncType (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]],CTCons ("Prelude","[]") [CTCons ("XML","XmlExp") []]]) (CTCons ("Prelude","(,)") [CTVar (1,"b"),CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]],CTCons ("Prelude","[]") [CTCons ("XML","XmlExp") []]]])))) (CRules CFlex [CRule [CPVar (0,"rd"),CPVar (1,"f")] [(CSymbol ("Prelude","success"),CLambda [CPVar (2,"childs")] (CCase (CApply (CVar (0,"rd")) (CVar (2,"childs"))) [CBranch (CPComb ("Prelude","(,)") [CPVar (3,"a"),CPVar (4,"childs'")]) (CApply (CApply (CVar (1,"f")) (CVar (3,"a"))) (CVar (4,"childs'")))]))] []]),
  CFunc ("XmlConv","ret") 2 Private (CFuncType (CTVar (0,"a")) (CFuncType (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]],CTCons ("Prelude","[]") [CTCons ("XML","XmlExp") []]]) (CTCons ("Prelude","(,)") [CTVar (0,"a"),CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]],CTCons ("Prelude","[]") [CTCons ("XML","XmlExp") []]]]))) (CRules CFlex [CRule [CPVar (0,"x"),CPVar (1,"y")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","(,)")) (CVar (0,"x"))) (CVar (1,"y")))] []]),
  CFunc ("XmlConv","xmlReads") 1 Public (CFuncType (CTCons ("XmlConv","XmlConv") [CTVar (0,"a"),CTVar (1,"b"),CTVar (2,"c")]) (CFuncType (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]],CTCons ("Prelude","[]") [CTCons ("XML","XmlExp") []]]) (CTCons ("Prelude","(,)") [CTVar (2,"c"),CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]],CTCons ("Prelude","[]") [CTCons ("XML","XmlExp") []]]]))) (CRules CFlex [CRule [CPComb ("XmlConv","Conv") [CPVar (0,"rd"),CPVar (1,"_")]] [(CSymbol ("Prelude","success"),CVar (0,"rd"))] []]),
  CFunc ("XmlConv","xmlShows") 1 Public (CFuncType (CTCons ("XmlConv","XmlConv") [CTVar (0,"a"),CTVar (1,"b"),CTVar (2,"c")]) (CFuncType (CTVar (2,"c")) (CFuncType (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]],CTCons ("Prelude","[]") [CTCons ("XML","XmlExp") []]]) (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]],CTCons ("Prelude","[]") [CTCons ("XML","XmlExp") []]])))) (CRules CFlex [CRule [CPComb ("XmlConv","Conv") [CPVar (0,"_"),CPVar (1,"sh")]] [(CSymbol ("Prelude","success"),CVar (1,"sh"))] []]),
  CFunc ("XmlConv","xmlRead") 2 Public (CFuncType (CTCons ("XmlConv","XmlConv") [CTVar (0,"a"),CTCons ("XmlConv","Elem") [],CTVar (1,"b")]) (CFuncType (CTCons ("XML","XmlExp") []) (CTVar (1,"b")))) (CRules CFlex [CRule [CPVar (0,"xa"),CPVar (1,"x")] [(CSymbol ("Prelude","success"),CVar (2,"a"))] [CLocalPat (CPComb ("Prelude","(,)") [CPVar (2,"a"),CPComb ("Prelude","(,)") [CPComb ("Prelude","[]") [],CPComb ("Prelude","[]") []]]) (CApply (CApply (CSymbol ("XmlConv","xmlReads")) (CVar (0,"xa"))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CSymbol ("Prelude","[]"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (1,"x"))) (CSymbol ("Prelude","[]"))))) []]]),
  CFunc ("XmlConv","xmlShow") 2 Public (CFuncType (CTCons ("XmlConv","XmlConv") [CTVar (0,"a"),CTCons ("XmlConv","Elem") [],CTVar (1,"b")]) (CFuncType (CTVar (1,"b")) (CTCons ("XML","XmlExp") []))) (CRules CFlex [CRule [CPVar (0,"xa"),CPVar (1,"a")] [(CSymbol ("Prelude","success"),CVar (2,"x"))] [CLocalPat (CPComb ("Prelude","(,)") [CPComb ("Prelude","[]") [],CPComb ("Prelude",":") [CPVar (2,"x"),CPComb ("Prelude","[]") []]]) (CApply (CApply (CApply (CSymbol ("XmlConv","xmlShows")) (CVar (0,"xa"))) (CVar (1,"a"))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CSymbol ("Prelude","[]"))) (CSymbol ("Prelude","[]")))) []]]),
  CFunc ("XmlConv","int_") 0 Private (CTCons ("Prelude","(,)") [CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","Int") []),CFuncType (CTCons ("Prelude","Int") []) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])]) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","(,)")) (CSymbol ("Read","readInt"))) (CSymbol ("Prelude","show")))] []]),
  CFunc ("XmlConv","float_") 0 Private (CTCons ("Prelude","(,)") [CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","Float") []),CFuncType (CTCons ("Prelude","Float") []) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])]) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","(,)")) (CSymbol ("ReadShowTerm","readQTerm"))) (CSymbol ("Prelude","show")))] []]),
  CFunc ("XmlConv","char_") 0 Private (CTCons ("Prelude","(,)") [CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","Char") []),CFuncType (CTCons ("Prelude","Char") []) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])]) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","(,)")) (CSymbol ("Prelude","head"))) (CLambda [CPVar (0,"x0")] (CApply (CApply (CSymbol ("Prelude",":")) (CVar (0,"x0"))) (CSymbol ("Prelude","[]")))))] []]),
  CFunc ("XmlConv","string_") 0 Private (CTCons ("Prelude","(,)") [CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]),CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])]) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","(,)")) (CSymbol ("Prelude","id"))) (CSymbol ("Prelude","id")))] []]),
  CFunc ("XmlConv","bool_") 2 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","(,)") [CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","Bool") []),CFuncType (CTCons ("Prelude","Bool") []) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])]))) (CRules CFlex [CRule [CPVar (0,"true"),CPVar (1,"false")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","(,)")) (CSymbol ("XmlConv","readBool"))) (CSymbol ("XmlConv","showBool")))] [CLocalFunc (CFunc ("XmlConv","fromJust") 1 Private (CFuncType (CTCons ("Prelude","Maybe") [CTVar (0,"a")]) (CTVar (0,"a"))) (CRules CFlex [CRule [CPComb ("Prelude","Just") [CPVar (2,"x")]] [(CSymbol ("Prelude","success"),CVar (2,"x"))] []])),CLocalFunc (CFunc ("XmlConv","readBool") 1 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","Bool") [])) (CRules CFlex [CRule [CPVar (2,"s")] [(CSymbol ("Prelude","success"),CApply (CSymbol ("XmlConv","fromJust")) (CApply (CApply (CSymbol ("Prelude","lookup")) (CVar (2,"s"))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CVar (0,"true"))) (CSymbol ("Prelude","True")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CVar (1,"false"))) (CSymbol ("Prelude","False")))) (CSymbol ("Prelude","[]"))))))] []])),CLocalFunc (CFunc ("XmlConv","showBool") 1 Private (CFuncType (CTCons ("Prelude","Bool") []) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CRules CFlex [CRule [CPVar (2,"b")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CVar (2,"b"))) (CVar (0,"true"))) (CVar (1,"false")))] []]))]]),
  CFunc ("XmlConv","val_") 1 Private (CFuncType (CTCons ("Prelude","(,)") [CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTVar (0,"a")),CFuncType (CTVar (0,"a")) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])]) (CTCons ("XmlConv","XmlConv") [CTCons ("XmlConv","NotRepeatable") [],CTCons ("XmlConv","NoElem") [],CTVar (0,"a")])) (CRules CFlex [CRule [CPComb ("Prelude","(,)") [CPVar (0,"rda"),CPVar (1,"sha")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("XmlConv","Conv")) (CSymbol ("XmlConv","rd"))) (CSymbol ("XmlConv","sh")))] [CLocalFunc (CFunc ("XmlConv","rd") 1 Private (CFuncType (CTCons ("Prelude","(,)") [CTVar (0,"a"),CTCons ("Prelude","[]") [CTCons ("XML","XmlExp") []]]) (CTCons ("Prelude","(,)") [CTVar (1,"_91"),CTCons ("Prelude","(,)") [CTVar (0,"a"),CTCons ("Prelude","[]") [CTCons ("XML","XmlExp") []]]])) (CRules CFlex [CRule [CPVar (2,"childs")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CVar (0,"rda")) (CVar (4,"a")))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CVar (3,"attrs"))) (CVar (5,"elems"))))] [CLocalPat (CPComb ("Prelude","(,)") [CPVar (3,"attrs"),CPComb ("Prelude",":") [CPComb ("XML","XText") [CPVar (4,"a")],CPVar (5,"elems")]]) (CVar (2,"childs")) []]])),CLocalFunc (CFunc ("XmlConv","sh") 2 Private (CFuncType (CTVar (1,"_91")) (CFuncType (CTCons ("Prelude","(,)") [CTVar (0,"a"),CTCons ("Prelude","[]") [CTCons ("XML","XmlExp") []]]) (CTCons ("Prelude","(,)") [CTVar (0,"a"),CTCons ("Prelude","[]") [CTCons ("XML","XmlExp") []]]))) (CRules CFlex [CRule [CPVar (2,"a"),CPVar (3,"childs")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","(,)")) (CVar (4,"attrs"))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("XML","XText")) (CApply (CVar (1,"sha")) (CVar (2,"a"))))) (CVar (5,"elems"))))] [CLocalPat (CPComb ("Prelude","(,)") [CPVar (4,"attrs"),CPVar (5,"elems")]) (CVar (3,"childs")) []]]))]]),
  CFunc ("XmlConv","int") 0 Public (CTCons ("XmlConv","XmlConv") [CTCons ("XmlConv","NotRepeatable") [],CTCons ("XmlConv","NoElem") [],CTCons ("Prelude","Int") []]) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("XmlConv","val_")) (CSymbol ("XmlConv","int_")))] []]),
  CFunc ("XmlConv","float") 0 Public (CTCons ("XmlConv","XmlConv") [CTCons ("XmlConv","NotRepeatable") [],CTCons ("XmlConv","NoElem") [],CTCons ("Prelude","Float") []]) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("XmlConv","val_")) (CSymbol ("XmlConv","float_")))] []]),
  CFunc ("XmlConv","char") 0 Public (CTCons ("XmlConv","XmlConv") [CTCons ("XmlConv","NotRepeatable") [],CTCons ("XmlConv","NoElem") [],CTCons ("Prelude","Char") []]) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("XmlConv","val_")) (CSymbol ("XmlConv","char_")))] []]),
  CFunc ("XmlConv","string") 0 Public (CTCons ("XmlConv","XmlConv") [CTCons ("XmlConv","NotRepeatable") [],CTCons ("XmlConv","NoElem") [],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("XmlConv","Conv")) (CSymbol ("XmlConv","rd"))) (CSymbol ("XmlConv","sh")))] [CLocalFunc (CFunc ("XmlConv","rd") 1 Private (CFuncType (CTCons ("Prelude","(,)") [CTVar (0,"a"),CTCons ("Prelude","[]") [CTCons ("XML","XmlExp") []]]) (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","(,)") [CTVar (0,"a"),CTCons ("Prelude","[]") [CTCons ("XML","XmlExp") []]]])) (CRules CFlex [CRule [CPVar (0,"childs")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","?")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CSymbol ("Prelude","[]"))) (CVar (0,"childs")))) (CCase (CVar (2,"elems")) [CBranch (CPComb ("Prelude",":") [CPComb ("XML","XText") [CPVar (3,"s")],CPVar (4,"elems'")]) (CApply (CApply (CSymbol ("Prelude","(,)")) (CVar (3,"s"))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CVar (1,"attrs"))) (CVar (4,"elems'"))))]))] [CLocalPat (CPComb ("Prelude","(,)") [CPVar (1,"attrs"),CPVar (2,"elems")]) (CVar (0,"childs")) []]])),CLocalFunc (CFunc ("XmlConv","sh") 2 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("Prelude","(,)") [CTVar (0,"a"),CTCons ("Prelude","[]") [CTCons ("XML","XmlExp") []]]) (CTCons ("Prelude","(,)") [CTVar (0,"a"),CTCons ("Prelude","[]") [CTCons ("XML","XmlExp") []]]))) (CRules CFlex [CRule [CPComb ("Prelude","[]") [],CPVar (0,"childs")] [(CSymbol ("Prelude","success"),CVar (0,"childs"))] [],CRule [CPAs (3,"s") (CPComb ("Prelude",":") [CPVar (1,"_"),CPVar (2,"_")]),CPVar (4,"childs")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","(,)")) (CVar (5,"attrs"))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("XML","XText")) (CVar (3,"s")))) (CVar (6,"elems"))))] [CLocalPat (CPComb ("Prelude","(,)") [CPVar (5,"attrs"),CPVar (6,"elems")]) (CVar (4,"childs")) []]]))]]),
  CFunc ("XmlConv","!") 2 Public (CFuncType (CTCons ("XmlConv","XmlConv") [CTVar (0,"a"),CTVar (1,"b"),CTVar (2,"c")]) (CFuncType (CTCons ("XmlConv","XmlConv") [CTVar (0,"a"),CTVar (1,"b"),CTVar (2,"c")]) (CTCons ("XmlConv","XmlConv") [CTVar (0,"a"),CTVar (1,"b"),CTVar (2,"c")]))) (CRules CFlex [CRule [CPComb ("XmlConv","Conv") [CPVar (0,"rd1"),CPVar (1,"sh1")],CPComb ("XmlConv","Conv") [CPVar (2,"rd2"),CPVar (3,"sh2")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("XmlConv","Conv")) (CSymbol ("XmlConv","rd"))) (CSymbol ("XmlConv","sh")))] [CLocalFunc (CFunc ("XmlConv","rd") 1 Private (CFuncType (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]],CTCons ("Prelude","[]") [CTCons ("XML","XmlExp") []]]) (CTCons ("Prelude","(,)") [CTVar (3,"_147"),CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]],CTCons ("Prelude","[]") [CTCons ("XML","XmlExp") []]]])) (CRules CFlex [CRule [CPVar (4,"childs")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","?")) (CApply (CVar (0,"rd1")) (CVar (4,"childs")))) (CApply (CVar (2,"rd2")) (CVar (4,"childs"))))] []])),CLocalFunc (CFunc ("XmlConv","sh") 1 Private (CFuncType (CTVar (3,"_147")) (CFuncType (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]],CTCons ("Prelude","[]") [CTCons ("XML","XmlExp") []]]) (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]],CTCons ("Prelude","[]") [CTCons ("XML","XmlExp") []]]))) (CRules CFlex [CRule [CPVar (4,"x")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","?")) (CApply (CVar (1,"sh1")) (CVar (4,"x")))) (CApply (CVar (3,"sh2")) (CVar (4,"x"))))] []]))]]),
  CFunc ("XmlConv","element") 2 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("XmlConv","XmlConv") [CTVar (0,"a"),CTVar (1,"b"),CTVar (2,"c")]) (CTCons ("XmlConv","XmlConv") [CTCons ("XmlConv","Repeatable") [],CTCons ("XmlConv","Elem") [],CTVar (2,"c")]))) (CRules CFlex [CRule [CPVar (0,"name"),CPVar (1,"xa")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("XmlConv","Conv")) (CSymbol ("XmlConv","rd"))) (CSymbol ("XmlConv","sh")))] [CLocalFunc (CFunc ("XmlConv","rd") 1 Private (CFuncType (CTCons ("Prelude","(,)") [CTVar (0,"a"),CTCons ("Prelude","[]") [CTCons ("XML","XmlExp") []]]) (CTCons ("Prelude","(,)") [CTVar (3,"_176"),CTCons ("Prelude","(,)") [CTVar (0,"a"),CTCons ("Prelude","[]") [CTCons ("XML","XmlExp") []]]])) (CRules CFlex [CRule [CPVar (2,"childs")] [(CApply (CApply (CSymbol ("Prelude","==")) (CVar (4,"myName"))) (CVar (0,"name")),CCase (CApply (CApply (CSymbol ("XmlConv","xmlReads")) (CVar (1,"xa"))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CVar (5,"myAttrs"))) (CVar (6,"myElems")))) [CBranch (CPComb ("Prelude","(,)") [CPVar (8,"a"),CPComb ("Prelude","(,)") [CPComb ("Prelude","[]") [],CPComb ("Prelude","[]") []]]) (CApply (CApply (CSymbol ("Prelude","(,)")) (CVar (8,"a"))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CVar (3,"attrs"))) (CVar (7,"elems"))))])] [CLocalPat (CPComb ("Prelude","(,)") [CPVar (3,"attrs"),CPComb ("Prelude",":") [CPComb ("XML","XElem") [CPVar (4,"myName"),CPVar (5,"myAttrs"),CPVar (6,"myElems")],CPVar (7,"elems")]]) (CVar (2,"childs")) []]])),CLocalFunc (CFunc ("XmlConv","sh") 2 Private (CFuncType (CTVar (3,"_176")) (CFuncType (CTCons ("Prelude","(,)") [CTVar (0,"a"),CTCons ("Prelude","[]") [CTCons ("XML","XmlExp") []]]) (CTCons ("Prelude","(,)") [CTVar (0,"a"),CTCons ("Prelude","[]") [CTCons ("XML","XmlExp") []]]))) (CRules CFlex [CRule [CPVar (2,"a"),CPVar (3,"childs")] [(CSymbol ("Prelude","success"),CCase (CApply (CApply (CApply (CSymbol ("XmlConv","xmlShows")) (CVar (1,"xa"))) (CVar (2,"a"))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CSymbol ("Prelude","[]"))) (CSymbol ("Prelude","[]")))) [CBranch (CPComb ("Prelude","(,)") [CPVar (6,"myAttrs"),CPVar (7,"myElems")]) (CApply (CApply (CSymbol ("Prelude","(,)")) (CVar (4,"attrs"))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CApply (CSymbol ("XML","XElem")) (CVar (0,"name"))) (CVar (6,"myAttrs"))) (CVar (7,"myElems")))) (CVar (5,"elems"))))])] [CLocalPat (CPComb ("Prelude","(,)") [CPVar (4,"attrs"),CPVar (5,"elems")]) (CVar (3,"childs")) []]]))]]),
  CFunc ("XmlConv","empty") 1 Public (CFuncType (CTVar (0,"a")) (CTCons ("XmlConv","XmlConv") [CTCons ("XmlConv","NotRepeatable") [],CTCons ("XmlConv","NoElem") [],CTVar (0,"a")])) (CRules CFlex [CRule [CPVar (0,"val")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("XmlConv","Conv")) (CVar (1,"rd"))) (CSymbol ("XmlConv","sh")))] [CLocalPat (CPVar (1,"rd")) (CApply (CSymbol ("XmlConv","ret")) (CVar (0,"val"))) [],CLocalFunc (CFunc ("XmlConv","sh") 2 Private (CFuncType (CTVar (1,"_195")) (CFuncType (CTVar (0,"a")) (CTVar (0,"a")))) (CRules CFlex [CRule [CPVar (2,"v"),CPVar (3,"childs")] [(CApply (CApply (CSymbol ("Prelude","=:=")) (CVar (2,"v"))) (CVar (0,"val")),CVar (3,"childs"))] []]))]]),
  CFunc ("XmlConv","attr") 2 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("Prelude","(,)") [CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTVar (0,"a")),CFuncType (CTVar (0,"a")) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])]) (CTCons ("XmlConv","XmlConv") [CTCons ("XmlConv","NotRepeatable") [],CTCons ("XmlConv","NoElem") [],CTVar (0,"a")]))) (CRules CFlex [CRule [CPVar (0,"name"),CPComb ("Prelude","(,)") [CPVar (1,"rda"),CPVar (2,"sha")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("XmlConv","Conv")) (CSymbol ("XmlConv","rd"))) (CSymbol ("XmlConv","sh")))] [CLocalFunc (CFunc ("XmlConv","rd") 1 Private (CFuncType (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]],CTVar (0,"a")]) (CTCons ("Prelude","(,)") [CTVar (1,"_238"),CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]],CTVar (0,"a")]])) (CRules CFlex [CRule [CPVar (3,"childs")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CVar (1,"rda")) (CVar (7,"value")))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CVar (8,"attrs'"))) (CVar (5,"elems"))))] [CLocalPat (CPComb ("Prelude","(,)") [CPVar (4,"attrs"),CPVar (5,"elems")]) (CVar (3,"childs")) [],CLocalPat (CPComb ("Prelude","(,)") [CPComb ("Prelude","(,)") [CPVar (6,"_"),CPVar (7,"value")],CPVar (8,"attrs'")]) (CApply (CApply (CSymbol ("XmlConv","exposeBy")) (CApply (CApply (CSymbol ("Prelude",".")) (CLambda [CPVar (9,"x0")] (CApply (CApply (CSymbol ("Prelude","==")) (CVar (0,"name"))) (CVar (9,"x0"))))) (CSymbol ("Prelude","fst")))) (CVar (4,"attrs"))) []]])),CLocalFunc (CFunc ("XmlConv","sh") 2 Private (CFuncType (CTVar (1,"_238")) (CFuncType (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]],CTVar (0,"a")]) (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]],CTVar (0,"a")]))) (CRules CFlex [CRule [CPVar (3,"a"),CPVar (4,"childs")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CVar (0,"name"))) (CApply (CVar (2,"sha")) (CVar (3,"a"))))) (CVar (5,"attrs")))) (CVar (6,"elems")))] [CLocalPat (CPComb ("Prelude","(,)") [CPVar (5,"attrs"),CPVar (6,"elems")]) (CVar (4,"childs")) []]]))]]),
  CFunc ("XmlConv","exposeBy") 2 Private (CFuncType (CFuncType (CTVar (0,"a")) (CTCons ("Prelude","Bool") [])) (CFuncType (CTCons ("Prelude","[]") [CTVar (0,"a")]) (CTCons ("Prelude","(,)") [CTVar (0,"a"),CTCons ("Prelude","[]") [CTVar (0,"a")]]))) (CRules CFlex [CRule [CPVar (0,"p"),CPComb ("Prelude",":") [CPVar (1,"x"),CPVar (2,"xs")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CVar (0,"p")) (CVar (1,"x")))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CVar (1,"x"))) (CVar (2,"xs")))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CVar (3,"y"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (1,"x"))) (CVar (4,"ys")))))] [CLocalPat (CPComb ("Prelude","(,)") [CPVar (3,"y"),CPVar (4,"ys")]) (CApply (CApply (CSymbol ("XmlConv","exposeBy")) (CVar (0,"p"))) (CVar (2,"xs"))) []]]),
  CFunc ("XmlConv","adapt") 2 Public (CFuncType (CTCons ("Prelude","(,)") [CFuncType (CTVar (0,"a")) (CTVar (1,"b")),CFuncType (CTVar (1,"b")) (CTVar (0,"a"))]) (CFuncType (CTCons ("XmlConv","XmlConv") [CTVar (2,"c"),CTVar (3,"d"),CTVar (0,"a")]) (CTCons ("XmlConv","XmlConv") [CTVar (2,"c"),CTVar (3,"d"),CTVar (1,"b")]))) (CRules CFlex [CRule [CPComb ("Prelude","(,)") [CPVar (0,"a2b"),CPVar (1,"b2a")],CPComb ("XmlConv","Conv") [CPVar (2,"rda"),CPVar (3,"sha")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("XmlConv","Conv")) (CVar (4,"rd"))) (CVar (5,"sh")))] [CLocalPat (CPVar (4,"rd")) (CApply (CApply (CSymbol ("XmlConv","/>=")) (CVar (2,"rda"))) (CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("XmlConv","ret"))) (CVar (0,"a2b")))) [],CLocalPat (CPVar (5,"sh")) (CApply (CApply (CSymbol ("Prelude",".")) (CVar (3,"sha"))) (CVar (1,"b2a"))) []]]),
  CFunc ("XmlConv","opt") 1 Public (CFuncType (CTCons ("XmlConv","XmlConv") [CTVar (0,"a"),CTVar (1,"b"),CTVar (2,"c")]) (CTCons ("XmlConv","XmlConv") [CTCons ("XmlConv","NotRepeatable") [],CTCons ("XmlConv","NoElem") [],CTCons ("Prelude","Maybe") [CTVar (2,"c")]])) (CRules CFlex [CRule [CPVar (0,"xa")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("XmlConv","Conv")) (CSymbol ("XmlConv","rd"))) (CSymbol ("XmlConv","sh")))] [CLocalFunc (CFunc ("XmlConv","rd") 1 Private (CFuncType (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]],CTCons ("Prelude","[]") [CTCons ("XML","XmlExp") []]]) (CTCons ("Prelude","(,)") [CTCons ("Prelude","Maybe") [CTVar (3,"_298")],CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]],CTCons ("Prelude","[]") [CTCons ("XML","XmlExp") []]]])) (CRules CFlex [CRule [CPVar (1,"childs")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","?")) (CApply (CApply (CSymbol ("XmlConv","ret")) (CSymbol ("Prelude","Nothing"))) (CVar (1,"childs")))) (CApply (CApply (CApply (CSymbol ("XmlConv","/>=")) (CApply (CSymbol ("XmlConv","xmlReads")) (CVar (0,"xa")))) (CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("XmlConv","ret"))) (CSymbol ("Prelude","Just")))) (CVar (1,"childs"))))] []])),CLocalFunc (CFunc ("XmlConv","sh") 1 Private (CFuncType (CTCons ("Prelude","Maybe") [CTVar (3,"_298")]) (CFuncType (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]],CTCons ("Prelude","[]") [CTCons ("XML","XmlExp") []]]) (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]],CTCons ("Prelude","[]") [CTCons ("XML","XmlExp") []]]))) (CRules CFlex [CRule [CPComb ("Prelude","Nothing") []] [(CSymbol ("Prelude","success"),CSymbol ("Prelude","id"))] [],CRule [CPComb ("Prelude","Just") [CPVar (1,"a")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("XmlConv","xmlShows")) (CVar (0,"xa"))) (CVar (1,"a")))] []]))]]),
  CFunc ("XmlConv","rep") 1 Public (CFuncType (CTCons ("XmlConv","XmlConv") [CTCons ("XmlConv","Repeatable") [],CTVar (0,"a"),CTVar (1,"b")]) (CTCons ("XmlConv","XmlConv") [CTCons ("XmlConv","NotRepeatable") [],CTCons ("XmlConv","NoElem") [],CTCons ("Prelude","[]") [CTVar (1,"b")]])) (CRules CFlex [CRule [CPVar (0,"xa")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("XmlConv","Conv")) (CSymbol ("XmlConv","rd"))) (CVar (1,"sh")))] [CLocalFunc (CFunc ("XmlConv","rd") 1 Private (CFuncType (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]],CTCons ("Prelude","[]") [CTCons ("XML","XmlExp") []]]) (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTVar (2,"_318")],CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]],CTCons ("Prelude","[]") [CTCons ("XML","XmlExp") []]]])) (CRules CFlex [CRule [CPVar (2,"childs")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","?")) (CApply (CApply (CSymbol ("XmlConv","ret")) (CSymbol ("Prelude","[]"))) (CVar (2,"childs")))) (CApply (CApply (CApply (CSymbol ("XmlConv","/>=")) (CApply (CSymbol ("XmlConv","xmlReads")) (CVar (0,"xa")))) (CLambda [CPVar (3,"x")] (CApply (CApply (CSymbol ("XmlConv","/>=")) (CSymbol ("XmlConv","rd"))) (CLambda [CPVar (4,"xs")] (CApply (CSymbol ("XmlConv","ret")) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (3,"x"))) (CVar (4,"xs")))))))) (CVar (2,"childs"))))] []])),CLocalPat (CPVar (1,"sh")) (CApply (CApply (CSymbol ("Prelude",".")) (CApply (CApply (CSymbol ("Prelude","foldr")) (CSymbol ("Prelude","."))) (CSymbol ("Prelude","id")))) (CApply (CSymbol ("Prelude","map")) (CApply (CSymbol ("XmlConv","xmlShows")) (CVar (0,"xa"))))) []]]),
  CFunc ("XmlConv","aInt") 1 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("XmlConv","XmlConv") [CTCons ("XmlConv","NotRepeatable") [],CTCons ("XmlConv","NoElem") [],CTCons ("Prelude","Int") []])) (CRules CFlex [CRule [CPVar (0,"name")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("XmlConv","attr")) (CVar (0,"name"))) (CSymbol ("XmlConv","int_")))] []]),
  CFunc ("XmlConv","aFloat") 1 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("XmlConv","XmlConv") [CTCons ("XmlConv","NotRepeatable") [],CTCons ("XmlConv","NoElem") [],CTCons ("Prelude","Float") []])) (CRules CFlex [CRule [CPVar (0,"name")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("XmlConv","attr")) (CVar (0,"name"))) (CSymbol ("XmlConv","float_")))] []]),
  CFunc ("XmlConv","aChar") 1 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("XmlConv","XmlConv") [CTCons ("XmlConv","NotRepeatable") [],CTCons ("XmlConv","NoElem") [],CTCons ("Prelude","Char") []])) (CRules CFlex [CRule [CPVar (0,"name")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("XmlConv","attr")) (CVar (0,"name"))) (CSymbol ("XmlConv","char_")))] []]),
  CFunc ("XmlConv","aString") 1 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("XmlConv","XmlConv") [CTCons ("XmlConv","NotRepeatable") [],CTCons ("XmlConv","NoElem") [],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]])) (CRules CFlex [CRule [CPVar (0,"name")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("XmlConv","attr")) (CVar (0,"name"))) (CSymbol ("XmlConv","string_")))] []]),
  CFunc ("XmlConv","aBool") 3 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("XmlConv","XmlConv") [CTCons ("XmlConv","NotRepeatable") [],CTCons ("XmlConv","NoElem") [],CTCons ("Prelude","Bool") []])))) (CRules CFlex [CRule [CPVar (0,"name"),CPVar (1,"true"),CPVar (2,"false")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("XmlConv","attr")) (CVar (0,"name"))) (CApply (CApply (CSymbol ("XmlConv","bool_")) (CVar (1,"true"))) (CVar (2,"false"))))] []]),
  CFunc ("XmlConv","eInt") 1 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("XmlConv","XmlConv") [CTCons ("XmlConv","Repeatable") [],CTCons ("XmlConv","Elem") [],CTCons ("Prelude","Int") []])) (CRules CFlex [CRule [CPVar (0,"name")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("XmlConv","element")) (CVar (0,"name"))) (CSymbol ("XmlConv","int")))] []]),
  CFunc ("XmlConv","eFloat") 1 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("XmlConv","XmlConv") [CTCons ("XmlConv","Repeatable") [],CTCons ("XmlConv","Elem") [],CTCons ("Prelude","Float") []])) (CRules CFlex [CRule [CPVar (0,"name")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("XmlConv","element")) (CVar (0,"name"))) (CSymbol ("XmlConv","float")))] []]),
  CFunc ("XmlConv","eChar") 1 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("XmlConv","XmlConv") [CTCons ("XmlConv","Repeatable") [],CTCons ("XmlConv","Elem") [],CTCons ("Prelude","Char") []])) (CRules CFlex [CRule [CPVar (0,"name")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("XmlConv","element")) (CVar (0,"name"))) (CSymbol ("XmlConv","char")))] []]),
  CFunc ("XmlConv","eString") 1 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("XmlConv","XmlConv") [CTCons ("XmlConv","Repeatable") [],CTCons ("XmlConv","Elem") [],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]])) (CRules CFlex [CRule [CPVar (0,"name")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("XmlConv","element")) (CVar (0,"name"))) (CSymbol ("XmlConv","string")))] []]),
  CFunc ("XmlConv","eBool") 2 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("XmlConv","XmlConv") [CTCons ("XmlConv","Repeatable") [],CTCons ("XmlConv","Elem") [],CTCons ("Prelude","Bool") []]))) (CRules CFlex [CRule [CPVar (0,"true"),CPVar (1,"false")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("XmlConv","!")) (CApply (CApply (CSymbol ("XmlConv","eEmpty")) (CVar (0,"true"))) (CSymbol ("Prelude","True")))) (CApply (CApply (CSymbol ("XmlConv","eEmpty")) (CVar (1,"false"))) (CSymbol ("Prelude","False"))))] []]),
  CFunc ("XmlConv","eEmpty") 2 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTVar (0,"a")) (CTCons ("XmlConv","XmlConv") [CTCons ("XmlConv","Repeatable") [],CTCons ("XmlConv","Elem") [],CTVar (0,"a")]))) (CRules CFlex [CRule [CPVar (0,"name"),CPVar (1,"a")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("XmlConv","element")) (CVar (0,"name"))) (CApply (CSymbol ("XmlConv","empty")) (CVar (1,"a"))))] []]),
  CFunc ("XmlConv","eOpt") 2 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("XmlConv","XmlConv") [CTVar (0,"a"),CTVar (1,"b"),CTVar (2,"c")]) (CTCons ("XmlConv","XmlConv") [CTCons ("XmlConv","Repeatable") [],CTCons ("XmlConv","Elem") [],CTCons ("Prelude","Maybe") [CTVar (2,"c")]]))) (CRules CFlex [CRule [CPVar (0,"name"),CPVar (1,"xa")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("XmlConv","element")) (CVar (0,"name"))) (CApply (CSymbol ("XmlConv","opt")) (CVar (1,"xa"))))] []]),
  CFunc ("XmlConv","eRep") 2 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("XmlConv","XmlConv") [CTCons ("XmlConv","Repeatable") [],CTVar (0,"a"),CTVar (1,"b")]) (CTCons ("XmlConv","XmlConv") [CTCons ("XmlConv","Repeatable") [],CTCons ("XmlConv","Elem") [],CTCons ("Prelude","[]") [CTVar (1,"b")]]))) (CRules CFlex [CRule [CPVar (0,"name"),CPVar (1,"xa")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("XmlConv","element")) (CVar (0,"name"))) (CApply (CSymbol ("XmlConv","rep")) (CVar (1,"xa"))))] []]),
  CFunc ("XmlConv","seq1") 2 Public (CFuncType (CFuncType (CTVar (0,"a")) (CTVar (1,"b"))) (CFuncType (CTCons ("XmlConv","XmlConv") [CTVar (2,"c"),CTVar (3,"d"),CTVar (0,"a")]) (CTCons ("XmlConv","XmlConv") [CTVar (2,"c"),CTCons ("XmlConv","NoElem") [],CTVar (1,"b")]))) (CRules CFlex [CRule [CPVar (0,"cons"),CPVar (1,"xa")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("XmlConv","Conv")) (CVar (2,"rd"))) (CSymbol ("XmlConv","sh")))] [CLocalFunc (CFunc ("XmlConv","cf") 1 Private (CFuncType (CTVar (4,"_425")) (CTVar (5,"_413"))) (CRules CFlex [CRule [CPVar (3,"a")] [(CSymbol ("Prelude","success"),CApply (CVar (0,"cons")) (CVar (3,"a")))] []])),CLocalPat (CPVar (2,"rd")) (CApply (CApply (CSymbol ("XmlConv","/>=")) (CApply (CSymbol ("XmlConv","xmlReads")) (CVar (1,"xa")))) (CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("XmlConv","ret"))) (CVar (0,"cons")))) [],CLocalFunc (CFunc ("XmlConv","sh") 1 Private (CFuncType (CTVar (4,"_413")) (CFuncType (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]],CTCons ("Prelude","[]") [CTCons ("XML","XmlExp") []]]) (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]],CTCons ("Prelude","[]") [CTCons ("XML","XmlExp") []]]))) (CRules CFlex [CRule [CPFuncComb ("XmlConv","cf") [CPVar (3,"a")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("XmlConv","xmlShows")) (CVar (1,"xa"))) (CVar (3,"a")))] []]))]]),
  CFunc ("XmlConv","repSeq1") 2 Public (CFuncType (CFuncType (CTVar (0,"a")) (CTVar (1,"b"))) (CFuncType (CTCons ("XmlConv","XmlConv") [CTCons ("XmlConv","Repeatable") [],CTVar (2,"c"),CTVar (0,"a")]) (CTCons ("XmlConv","XmlConv") [CTCons ("XmlConv","NotRepeatable") [],CTCons ("XmlConv","NoElem") [],CTCons ("Prelude","[]") [CTVar (1,"b")]]))) (CRules CFlex [CRule [CPVar (0,"cons"),CPVar (1,"xa")] [(CSymbol ("Prelude","success"),CApply (CSymbol ("XmlConv","rep")) (CApply (CApply (CSymbol ("XmlConv","seq1")) (CVar (0,"cons"))) (CVar (1,"xa"))))] []]),
  CFunc ("XmlConv","eSeq1") 3 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CFuncType (CTVar (0,"a")) (CTVar (1,"b"))) (CFuncType (CTCons ("XmlConv","XmlConv") [CTVar (2,"c"),CTVar (3,"d"),CTVar (0,"a")]) (CTCons ("XmlConv","XmlConv") [CTCons ("XmlConv","Repeatable") [],CTCons ("XmlConv","Elem") [],CTVar (1,"b")])))) (CRules CFlex [CRule [CPVar (0,"name"),CPVar (1,"cons"),CPVar (2,"xa")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("XmlConv","element")) (CVar (0,"name"))) (CApply (CApply (CSymbol ("XmlConv","seq1")) (CVar (1,"cons"))) (CVar (2,"xa"))))] []]),
  CFunc ("XmlConv","eRepSeq1") 3 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CFuncType (CTVar (0,"a")) (CTVar (1,"b"))) (CFuncType (CTCons ("XmlConv","XmlConv") [CTCons ("XmlConv","Repeatable") [],CTVar (2,"c"),CTVar (0,"a")]) (CTCons ("XmlConv","XmlConv") [CTCons ("XmlConv","Repeatable") [],CTCons ("XmlConv","Elem") [],CTCons ("Prelude","[]") [CTVar (1,"b")]])))) (CRules CFlex [CRule [CPVar (0,"name"),CPVar (1,"cons"),CPVar (2,"xa")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("XmlConv","element")) (CVar (0,"name"))) (CApply (CApply (CSymbol ("XmlConv","repSeq1")) (CVar (1,"cons"))) (CVar (2,"xa"))))] []]),
  CFunc ("XmlConv","seq2_") 3 Private (CFuncType (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (1,"b")) (CTVar (2,"c")))) (CFuncType (CTCons ("XmlConv","XmlConv") [CTVar (3,"d"),CTVar (4,"e"),CTVar (0,"a")]) (CFuncType (CTCons ("XmlConv","XmlConv") [CTVar (5,"f"),CTVar (6,"g"),CTVar (1,"b")]) (CTCons ("XmlConv","XmlConv") [CTVar (7,"h"),CTCons ("XmlConv","NoElem") [],CTVar (2,"c")])))) (CRules CFlex [CRule [CPVar (0,"cons"),CPVar (1,"xa"),CPVar (2,"xb")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("XmlConv","Conv")) (CVar (3,"rd"))) (CSymbol ("XmlConv","sh")))] [CLocalFunc (CFunc ("XmlConv","cf") 2 Private (CFuncType (CTVar (8,"_502")) (CFuncType (CTVar (9,"_503")) (CTVar (10,"_486")))) (CRules CFlex [CRule [CPVar (4,"a"),CPVar (5,"b")] [(CSymbol ("Prelude","success"),CApply (CApply (CVar (0,"cons")) (CVar (4,"a"))) (CVar (5,"b")))] []])),CLocalPat (CPVar (3,"rd")) (CApply (CApply (CSymbol ("XmlConv","/>=")) (CApply (CSymbol ("XmlConv","xmlReads")) (CVar (1,"xa")))) (CLambda [CPVar (4,"a")] (CApply (CApply (CSymbol ("XmlConv","/>=")) (CApply (CSymbol ("XmlConv","xmlReads")) (CVar (2,"xb")))) (CLambda [CPVar (5,"b")] (CApply (CSymbol ("XmlConv","ret")) (CApply (CApply (CVar (0,"cons")) (CVar (4,"a"))) (CVar (5,"b")))))))) [],CLocalFunc (CFunc ("XmlConv","sh") 1 Private (CFuncType (CTVar (8,"_486")) (CFuncType (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]],CTCons ("Prelude","[]") [CTCons ("XML","XmlExp") []]]) (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]],CTCons ("Prelude","[]") [CTCons ("XML","XmlExp") []]]))) (CRules CFlex [CRule [CPFuncComb ("XmlConv","cf") [CPVar (6,"a"),CPVar (7,"b")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",".")) (CApply (CApply (CSymbol ("XmlConv","xmlShows")) (CVar (1,"xa"))) (CVar (6,"a")))) (CApply (CApply (CSymbol ("XmlConv","xmlShows")) (CVar (2,"xb"))) (CVar (7,"b"))))] []]))]]),
  CFunc ("XmlConv","seq2") 0 Public (CFuncType (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (1,"b")) (CTVar (2,"c")))) (CFuncType (CTCons ("XmlConv","XmlConv") [CTVar (3,"d"),CTVar (4,"e"),CTVar (0,"a")]) (CFuncType (CTCons ("XmlConv","XmlConv") [CTVar (5,"f"),CTVar (6,"g"),CTVar (1,"b")]) (CTCons ("XmlConv","XmlConv") [CTCons ("XmlConv","NotRepeatable") [],CTCons ("XmlConv","NoElem") [],CTVar (2,"c")])))) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CSymbol ("XmlConv","seq2_"))] []]),
  CFunc ("XmlConv","repSeq2") 3 Public (CFuncType (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (1,"b")) (CTVar (2,"c")))) (CFuncType (CTCons ("XmlConv","XmlConv") [CTCons ("XmlConv","Repeatable") [],CTVar (3,"d"),CTVar (0,"a")]) (CFuncType (CTCons ("XmlConv","XmlConv") [CTCons ("XmlConv","Repeatable") [],CTVar (4,"e"),CTVar (1,"b")]) (CTCons ("XmlConv","XmlConv") [CTCons ("XmlConv","NotRepeatable") [],CTCons ("XmlConv","NoElem") [],CTCons ("Prelude","[]") [CTVar (2,"c")]])))) (CRules CFlex [CRule [CPVar (0,"cons"),CPVar (1,"xa"),CPVar (2,"xb")] [(CSymbol ("Prelude","success"),CApply (CSymbol ("XmlConv","rep")) (CApply (CApply (CApply (CSymbol ("XmlConv","seq2_")) (CVar (0,"cons"))) (CVar (1,"xa"))) (CVar (2,"xb"))))] []]),
  CFunc ("XmlConv","eSeq2") 4 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (1,"b")) (CTVar (2,"c")))) (CFuncType (CTCons ("XmlConv","XmlConv") [CTVar (3,"d"),CTVar (4,"e"),CTVar (0,"a")]) (CFuncType (CTCons ("XmlConv","XmlConv") [CTVar (5,"f"),CTVar (6,"g"),CTVar (1,"b")]) (CTCons ("XmlConv","XmlConv") [CTCons ("XmlConv","Repeatable") [],CTCons ("XmlConv","Elem") [],CTVar (2,"c")]))))) (CRules CFlex [CRule [CPVar (0,"name"),CPVar (1,"cons"),CPVar (2,"xa"),CPVar (3,"xb")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("XmlConv","element")) (CVar (0,"name"))) (CApply (CApply (CApply (CSymbol ("XmlConv","seq2")) (CVar (1,"cons"))) (CVar (2,"xa"))) (CVar (3,"xb"))))] []]),
  CFunc ("XmlConv","eRepSeq2") 4 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (1,"b")) (CTVar (2,"c")))) (CFuncType (CTCons ("XmlConv","XmlConv") [CTCons ("XmlConv","Repeatable") [],CTVar (3,"d"),CTVar (0,"a")]) (CFuncType (CTCons ("XmlConv","XmlConv") [CTCons ("XmlConv","Repeatable") [],CTVar (4,"e"),CTVar (1,"b")]) (CTCons ("XmlConv","XmlConv") [CTCons ("XmlConv","Repeatable") [],CTCons ("XmlConv","Elem") [],CTCons ("Prelude","[]") [CTVar (2,"c")]]))))) (CRules CFlex [CRule [CPVar (0,"name"),CPVar (1,"cons"),CPVar (2,"xa"),CPVar (3,"xb")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("XmlConv","element")) (CVar (0,"name"))) (CApply (CApply (CApply (CSymbol ("XmlConv","repSeq2")) (CVar (1,"cons"))) (CVar (2,"xa"))) (CVar (3,"xb"))))] []]),
  CFunc ("XmlConv","seq3_") 4 Private (CFuncType (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (1,"b")) (CFuncType (CTVar (2,"c")) (CTVar (3,"d"))))) (CFuncType (CTCons ("XmlConv","XmlConv") [CTVar (4,"e"),CTVar (5,"f"),CTVar (0,"a")]) (CFuncType (CTCons ("XmlConv","XmlConv") [CTVar (6,"g"),CTVar (7,"h"),CTVar (1,"b")]) (CFuncType (CTCons ("XmlConv","XmlConv") [CTVar (8,"i"),CTVar (9,"j"),CTVar (2,"c")]) (CTCons ("XmlConv","XmlConv") [CTVar (10,"k"),CTCons ("XmlConv","NoElem") [],CTVar (3,"d")]))))) (CRules CFlex [CRule [CPVar (0,"cons"),CPVar (1,"xa"),CPVar (2,"xb"),CPVar (3,"xc")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("XmlConv","Conv")) (CVar (4,"rd"))) (CSymbol ("XmlConv","sh")))] [CLocalFunc (CFunc ("XmlConv","cf") 3 Private (CFuncType (CTVar (11,"_633")) (CFuncType (CTVar (12,"_634")) (CFuncType (CTVar (13,"_635")) (CTVar (14,"_611"))))) (CRules CFlex [CRule [CPVar (5,"a"),CPVar (6,"b"),CPVar (7,"c")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CVar (0,"cons")) (CVar (5,"a"))) (CVar (6,"b"))) (CVar (7,"c")))] []])),CLocalPat (CPVar (4,"rd")) (CApply (CApply (CSymbol ("XmlConv","/>=")) (CApply (CSymbol ("XmlConv","xmlReads")) (CVar (1,"xa")))) (CLambda [CPVar (5,"a")] (CApply (CApply (CSymbol ("XmlConv","/>=")) (CApply (CSymbol ("XmlConv","xmlReads")) (CVar (2,"xb")))) (CLambda [CPVar (6,"b")] (CApply (CApply (CSymbol ("XmlConv","/>=")) (CApply (CSymbol ("XmlConv","xmlReads")) (CVar (3,"xc")))) (CLambda [CPVar (7,"c")] (CApply (CSymbol ("XmlConv","ret")) (CApply (CApply (CApply (CVar (0,"cons")) (CVar (5,"a"))) (CVar (6,"b"))) (CVar (7,"c")))))))))) [],CLocalFunc (CFunc ("XmlConv","sh") 1 Private (CFuncType (CTVar (11,"_611")) (CFuncType (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]],CTCons ("Prelude","[]") [CTCons ("XML","XmlExp") []]]) (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]],CTCons ("Prelude","[]") [CTCons ("XML","XmlExp") []]]))) (CRules CFlex [CRule [CPFuncComb ("XmlConv","cf") [CPVar (8,"a"),CPVar (9,"b"),CPVar (10,"c")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",".")) (CApply (CApply (CSymbol ("XmlConv","xmlShows")) (CVar (1,"xa"))) (CVar (8,"a")))) (CApply (CApply (CSymbol ("Prelude",".")) (CApply (CApply (CSymbol ("XmlConv","xmlShows")) (CVar (2,"xb"))) (CVar (9,"b")))) (CApply (CApply (CSymbol ("XmlConv","xmlShows")) (CVar (3,"xc"))) (CVar (10,"c")))))] []]))]]),
  CFunc ("XmlConv","seq3") 0 Public (CFuncType (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (1,"b")) (CFuncType (CTVar (2,"c")) (CTVar (3,"d"))))) (CFuncType (CTCons ("XmlConv","XmlConv") [CTVar (4,"e"),CTVar (5,"f"),CTVar (0,"a")]) (CFuncType (CTCons ("XmlConv","XmlConv") [CTVar (6,"g"),CTVar (7,"h"),CTVar (1,"b")]) (CFuncType (CTCons ("XmlConv","XmlConv") [CTVar (8,"i"),CTVar (9,"j"),CTVar (2,"c")]) (CTCons ("XmlConv","XmlConv") [CTCons ("XmlConv","NotRepeatable") [],CTCons ("XmlConv","NoElem") [],CTVar (3,"d")]))))) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CSymbol ("XmlConv","seq3_"))] []]),
  CFunc ("XmlConv","repSeq3") 4 Public (CFuncType (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (1,"b")) (CFuncType (CTVar (2,"c")) (CTVar (3,"d"))))) (CFuncType (CTCons ("XmlConv","XmlConv") [CTCons ("XmlConv","Repeatable") [],CTVar (4,"e"),CTVar (0,"a")]) (CFuncType (CTCons ("XmlConv","XmlConv") [CTCons ("XmlConv","Repeatable") [],CTVar (5,"f"),CTVar (1,"b")]) (CFuncType (CTCons ("XmlConv","XmlConv") [CTCons ("XmlConv","Repeatable") [],CTVar (6,"g"),CTVar (2,"c")]) (CTCons ("XmlConv","XmlConv") [CTCons ("XmlConv","NotRepeatable") [],CTCons ("XmlConv","NoElem") [],CTCons ("Prelude","[]") [CTVar (3,"d")]]))))) (CRules CFlex [CRule [CPVar (0,"cons"),CPVar (1,"xa"),CPVar (2,"xb"),CPVar (3,"xc")] [(CSymbol ("Prelude","success"),CApply (CSymbol ("XmlConv","rep")) (CApply (CApply (CApply (CApply (CSymbol ("XmlConv","seq3_")) (CVar (0,"cons"))) (CVar (1,"xa"))) (CVar (2,"xb"))) (CVar (3,"xc"))))] []]),
  CFunc ("XmlConv","eSeq3") 5 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (1,"b")) (CFuncType (CTVar (2,"c")) (CTVar (3,"d"))))) (CFuncType (CTCons ("XmlConv","XmlConv") [CTVar (4,"e"),CTVar (5,"f"),CTVar (0,"a")]) (CFuncType (CTCons ("XmlConv","XmlConv") [CTVar (6,"g"),CTVar (7,"h"),CTVar (1,"b")]) (CFuncType (CTCons ("XmlConv","XmlConv") [CTVar (8,"i"),CTVar (9,"j"),CTVar (2,"c")]) (CTCons ("XmlConv","XmlConv") [CTCons ("XmlConv","Repeatable") [],CTCons ("XmlConv","Elem") [],CTVar (3,"d")])))))) (CRules CFlex [CRule [CPVar (0,"name"),CPVar (1,"cons"),CPVar (2,"xa"),CPVar (3,"xb"),CPVar (4,"xc")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("XmlConv","element")) (CVar (0,"name"))) (CApply (CApply (CApply (CApply (CSymbol ("XmlConv","seq3")) (CVar (1,"cons"))) (CVar (2,"xa"))) (CVar (3,"xb"))) (CVar (4,"xc"))))] []]),
  CFunc ("XmlConv","eRepSeq3") 5 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (1,"b")) (CFuncType (CTVar (2,"c")) (CTVar (3,"d"))))) (CFuncType (CTCons ("XmlConv","XmlConv") [CTCons ("XmlConv","Repeatable") [],CTVar (4,"e"),CTVar (0,"a")]) (CFuncType (CTCons ("XmlConv","XmlConv") [CTCons ("XmlConv","Repeatable") [],CTVar (5,"f"),CTVar (1,"b")]) (CFuncType (CTCons ("XmlConv","XmlConv") [CTCons ("XmlConv","Repeatable") [],CTVar (6,"g"),CTVar (2,"c")]) (CTCons ("XmlConv","XmlConv") [CTCons ("XmlConv","Repeatable") [],CTCons ("XmlConv","Elem") [],CTCons ("Prelude","[]") [CTVar (3,"d")]])))))) (CRules CFlex [CRule [CPVar (0,"name"),CPVar (1,"cons"),CPVar (2,"xa"),CPVar (3,"xb"),CPVar (4,"xc")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("XmlConv","element")) (CVar (0,"name"))) (CApply (CApply (CApply (CApply (CSymbol ("XmlConv","repSeq3")) (CVar (1,"cons"))) (CVar (2,"xa"))) (CVar (3,"xb"))) (CVar (4,"xc"))))] []]),
  CFunc ("XmlConv","seq4_") 5 Private (CFuncType (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (1,"b")) (CFuncType (CTVar (2,"c")) (CFuncType (CTVar (3,"d")) (CTVar (4,"e")))))) (CFuncType (CTCons ("XmlConv","XmlConv") [CTVar (5,"f"),CTVar (6,"g"),CTVar (0,"a")]) (CFuncType (CTCons ("XmlConv","XmlConv") [CTVar (7,"h"),CTVar (8,"i"),CTVar (1,"b")]) (CFuncType (CTCons ("XmlConv","XmlConv") [CTVar (9,"j"),CTVar (10,"k"),CTVar (2,"c")]) (CFuncType (CTCons ("XmlConv","XmlConv") [CTVar (11,"l"),CTVar (12,"m"),CTVar (3,"d")]) (CTCons ("XmlConv","XmlConv") [CTVar (13,"n"),CTCons ("XmlConv","NoElem") [],CTVar (4,"e")])))))) (CRules CFlex [CRule [CPVar (0,"cons"),CPVar (1,"xa"),CPVar (2,"xb"),CPVar (3,"xc"),CPVar (4,"xd")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("XmlConv","Conv")) (CVar (5,"rd"))) (CSymbol ("XmlConv","sh")))] [CLocalFunc (CFunc ("XmlConv","cf") 4 Private (CFuncType (CTVar (14,"_808")) (CFuncType (CTVar (15,"_809")) (CFuncType (CTVar (16,"_810")) (CFuncType (CTVar (17,"_811")) (CTVar (18,"_780")))))) (CRules CFlex [CRule [CPVar (6,"a"),CPVar (7,"b"),CPVar (8,"c"),CPVar (9,"d")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CVar (0,"cons")) (CVar (6,"a"))) (CVar (7,"b"))) (CVar (8,"c"))) (CVar (9,"d")))] []])),CLocalPat (CPVar (5,"rd")) (CApply (CApply (CSymbol ("XmlConv","/>=")) (CApply (CSymbol ("XmlConv","xmlReads")) (CVar (1,"xa")))) (CLambda [CPVar (6,"a")] (CApply (CApply (CSymbol ("XmlConv","/>=")) (CApply (CSymbol ("XmlConv","xmlReads")) (CVar (2,"xb")))) (CLambda [CPVar (7,"b")] (CApply (CApply (CSymbol ("XmlConv","/>=")) (CApply (CSymbol ("XmlConv","xmlReads")) (CVar (3,"xc")))) (CLambda [CPVar (8,"c")] (CApply (CApply (CSymbol ("XmlConv","/>=")) (CApply (CSymbol ("XmlConv","xmlReads")) (CVar (4,"xd")))) (CLambda [CPVar (9,"d")] (CApply (CSymbol ("XmlConv","ret")) (CApply (CApply (CApply (CApply (CVar (0,"cons")) (CVar (6,"a"))) (CVar (7,"b"))) (CVar (8,"c"))) (CVar (9,"d")))))))))))) [],CLocalFunc (CFunc ("XmlConv","sh") 1 Private (CFuncType (CTVar (14,"_780")) (CFuncType (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]],CTCons ("Prelude","[]") [CTCons ("XML","XmlExp") []]]) (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]],CTCons ("Prelude","[]") [CTCons ("XML","XmlExp") []]]))) (CRules CFlex [CRule [CPFuncComb ("XmlConv","cf") [CPVar (10,"a"),CPVar (11,"b"),CPVar (12,"c"),CPVar (13,"d")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",".")) (CApply (CApply (CSymbol ("XmlConv","xmlShows")) (CVar (1,"xa"))) (CVar (10,"a")))) (CApply (CApply (CSymbol ("Prelude",".")) (CApply (CApply (CSymbol ("XmlConv","xmlShows")) (CVar (2,"xb"))) (CVar (11,"b")))) (CApply (CApply (CSymbol ("Prelude",".")) (CApply (CApply (CSymbol ("XmlConv","xmlShows")) (CVar (3,"xc"))) (CVar (12,"c")))) (CApply (CApply (CSymbol ("XmlConv","xmlShows")) (CVar (4,"xd"))) (CVar (13,"d"))))))] []]))]]),
  CFunc ("XmlConv","seq4") 0 Public (CFuncType (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (1,"b")) (CFuncType (CTVar (2,"c")) (CFuncType (CTVar (3,"d")) (CTVar (4,"e")))))) (CFuncType (CTCons ("XmlConv","XmlConv") [CTVar (5,"f"),CTVar (6,"g"),CTVar (0,"a")]) (CFuncType (CTCons ("XmlConv","XmlConv") [CTVar (7,"h"),CTVar (8,"i"),CTVar (1,"b")]) (CFuncType (CTCons ("XmlConv","XmlConv") [CTVar (9,"j"),CTVar (10,"k"),CTVar (2,"c")]) (CFuncType (CTCons ("XmlConv","XmlConv") [CTVar (11,"l"),CTVar (12,"m"),CTVar (3,"d")]) (CTCons ("XmlConv","XmlConv") [CTCons ("XmlConv","NotRepeatable") [],CTCons ("XmlConv","NoElem") [],CTVar (4,"e")])))))) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CSymbol ("XmlConv","seq4_"))] []]),
  CFunc ("XmlConv","repSeq4") 5 Public (CFuncType (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (1,"b")) (CFuncType (CTVar (2,"c")) (CFuncType (CTVar (3,"d")) (CTVar (4,"e")))))) (CFuncType (CTCons ("XmlConv","XmlConv") [CTCons ("XmlConv","Repeatable") [],CTVar (5,"f"),CTVar (0,"a")]) (CFuncType (CTCons ("XmlConv","XmlConv") [CTCons ("XmlConv","Repeatable") [],CTVar (6,"g"),CTVar (1,"b")]) (CFuncType (CTCons ("XmlConv","XmlConv") [CTCons ("XmlConv","Repeatable") [],CTVar (7,"h"),CTVar (2,"c")]) (CFuncType (CTCons ("XmlConv","XmlConv") [CTCons ("XmlConv","Repeatable") [],CTVar (8,"i"),CTVar (3,"d")]) (CTCons ("XmlConv","XmlConv") [CTCons ("XmlConv","NotRepeatable") [],CTCons ("XmlConv","NoElem") [],CTCons ("Prelude","[]") [CTVar (4,"e")]])))))) (CRules CFlex [CRule [CPVar (0,"cons"),CPVar (1,"xa"),CPVar (2,"xb"),CPVar (3,"xc"),CPVar (4,"xd")] [(CSymbol ("Prelude","success"),CApply (CSymbol ("XmlConv","rep")) (CApply (CApply (CApply (CApply (CApply (CSymbol ("XmlConv","seq4_")) (CVar (0,"cons"))) (CVar (1,"xa"))) (CVar (2,"xb"))) (CVar (3,"xc"))) (CVar (4,"xd"))))] []]),
  CFunc ("XmlConv","eSeq4") 6 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (1,"b")) (CFuncType (CTVar (2,"c")) (CFuncType (CTVar (3,"d")) (CTVar (4,"e")))))) (CFuncType (CTCons ("XmlConv","XmlConv") [CTVar (5,"f"),CTVar (6,"g"),CTVar (0,"a")]) (CFuncType (CTCons ("XmlConv","XmlConv") [CTVar (7,"h"),CTVar (8,"i"),CTVar (1,"b")]) (CFuncType (CTCons ("XmlConv","XmlConv") [CTVar (9,"j"),CTVar (10,"k"),CTVar (2,"c")]) (CFuncType (CTCons ("XmlConv","XmlConv") [CTVar (11,"l"),CTVar (12,"m"),CTVar (3,"d")]) (CTCons ("XmlConv","XmlConv") [CTCons ("XmlConv","Repeatable") [],CTCons ("XmlConv","Elem") [],CTVar (4,"e")]))))))) (CRules CFlex [CRule [CPVar (0,"name"),CPVar (1,"cons"),CPVar (2,"xa"),CPVar (3,"xb"),CPVar (4,"xc"),CPVar (5,"xd")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("XmlConv","element")) (CVar (0,"name"))) (CApply (CApply (CApply (CApply (CApply (CSymbol ("XmlConv","seq4")) (CVar (1,"cons"))) (CVar (2,"xa"))) (CVar (3,"xb"))) (CVar (4,"xc"))) (CVar (5,"xd"))))] []]),
  CFunc ("XmlConv","eRepSeq4") 6 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (1,"b")) (CFuncType (CTVar (2,"c")) (CFuncType (CTVar (3,"d")) (CTVar (4,"e")))))) (CFuncType (CTCons ("XmlConv","XmlConv") [CTCons ("XmlConv","Repeatable") [],CTVar (5,"f"),CTVar (0,"a")]) (CFuncType (CTCons ("XmlConv","XmlConv") [CTCons ("XmlConv","Repeatable") [],CTVar (6,"g"),CTVar (1,"b")]) (CFuncType (CTCons ("XmlConv","XmlConv") [CTCons ("XmlConv","Repeatable") [],CTVar (7,"h"),CTVar (2,"c")]) (CFuncType (CTCons ("XmlConv","XmlConv") [CTCons ("XmlConv","Repeatable") [],CTVar (8,"i"),CTVar (3,"d")]) (CTCons ("XmlConv","XmlConv") [CTCons ("XmlConv","Repeatable") [],CTCons ("XmlConv","Elem") [],CTCons ("Prelude","[]") [CTVar (4,"e")]]))))))) (CRules CFlex [CRule [CPVar (0,"name"),CPVar (1,"cons"),CPVar (2,"xa"),CPVar (3,"xb"),CPVar (4,"xc"),CPVar (5,"xd")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("XmlConv","element")) (CVar (0,"name"))) (CApply (CApply (CApply (CApply (CApply (CSymbol ("XmlConv","repSeq4")) (CVar (1,"cons"))) (CVar (2,"xa"))) (CVar (3,"xb"))) (CVar (4,"xc"))) (CVar (5,"xd"))))] []]),
  CFunc ("XmlConv","seq5_") 6 Private (CFuncType (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (1,"b")) (CFuncType (CTVar (2,"c")) (CFuncType (CTVar (3,"d")) (CFuncType (CTVar (4,"e")) (CTVar (5,"f"))))))) (CFuncType (CTCons ("XmlConv","XmlConv") [CTVar (6,"g"),CTVar (7,"h"),CTVar (0,"a")]) (CFuncType (CTCons ("XmlConv","XmlConv") [CTVar (8,"i"),CTVar (9,"j"),CTVar (1,"b")]) (CFuncType (CTCons ("XmlConv","XmlConv") [CTVar (10,"k"),CTVar (11,"l"),CTVar (2,"c")]) (CFuncType (CTCons ("XmlConv","XmlConv") [CTVar (12,"m"),CTVar (13,"n"),CTVar (3,"d")]) (CFuncType (CTCons ("XmlConv","XmlConv") [CTVar (14,"o"),CTVar (15,"p"),CTVar (4,"e")]) (CTCons ("XmlConv","XmlConv") [CTVar (16,"q"),CTCons ("XmlConv","NoElem") [],CTVar (5,"f")]))))))) (CRules CFlex [CRule [CPVar (0,"cons"),CPVar (1,"xa"),CPVar (2,"xb"),CPVar (3,"xc"),CPVar (4,"xd"),CPVar (5,"xe")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("XmlConv","Conv")) (CVar (6,"rd"))) (CSymbol ("XmlConv","sh")))] [CLocalFunc (CFunc ("XmlConv","cf") 5 Private (CFuncType (CTVar (17,"_1027")) (CFuncType (CTVar (18,"_1028")) (CFuncType (CTVar (19,"_1029")) (CFuncType (CTVar (20,"_1030")) (CFuncType (CTVar (21,"_1031")) (CTVar (22,"_993"))))))) (CRules CFlex [CRule [CPVar (7,"a"),CPVar (8,"b"),CPVar (9,"c"),CPVar (10,"d"),CPVar (11,"e")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CApply (CVar (0,"cons")) (CVar (7,"a"))) (CVar (8,"b"))) (CVar (9,"c"))) (CVar (10,"d"))) (CVar (11,"e")))] []])),CLocalPat (CPVar (6,"rd")) (CApply (CApply (CSymbol ("XmlConv","/>=")) (CApply (CSymbol ("XmlConv","xmlReads")) (CVar (1,"xa")))) (CLambda [CPVar (7,"a")] (CApply (CApply (CSymbol ("XmlConv","/>=")) (CApply (CSymbol ("XmlConv","xmlReads")) (CVar (2,"xb")))) (CLambda [CPVar (8,"b")] (CApply (CApply (CSymbol ("XmlConv","/>=")) (CApply (CSymbol ("XmlConv","xmlReads")) (CVar (3,"xc")))) (CLambda [CPVar (9,"c")] (CApply (CApply (CSymbol ("XmlConv","/>=")) (CApply (CSymbol ("XmlConv","xmlReads")) (CVar (4,"xd")))) (CLambda [CPVar (10,"d")] (CApply (CApply (CSymbol ("XmlConv","/>=")) (CApply (CSymbol ("XmlConv","xmlReads")) (CVar (5,"xe")))) (CLambda [CPVar (11,"e")] (CApply (CSymbol ("XmlConv","ret")) (CApply (CApply (CApply (CApply (CApply (CVar (0,"cons")) (CVar (7,"a"))) (CVar (8,"b"))) (CVar (9,"c"))) (CVar (10,"d"))) (CVar (11,"e")))))))))))))) [],CLocalFunc (CFunc ("XmlConv","sh") 1 Private (CFuncType (CTVar (17,"_993")) (CFuncType (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]],CTCons ("Prelude","[]") [CTCons ("XML","XmlExp") []]]) (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]],CTCons ("Prelude","[]") [CTCons ("XML","XmlExp") []]]))) (CRules CFlex [CRule [CPFuncComb ("XmlConv","cf") [CPVar (12,"a"),CPVar (13,"b"),CPVar (14,"c"),CPVar (15,"d"),CPVar (16,"e")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",".")) (CApply (CApply (CSymbol ("XmlConv","xmlShows")) (CVar (1,"xa"))) (CVar (12,"a")))) (CApply (CApply (CSymbol ("Prelude",".")) (CApply (CApply (CSymbol ("XmlConv","xmlShows")) (CVar (2,"xb"))) (CVar (13,"b")))) (CApply (CApply (CSymbol ("Prelude",".")) (CApply (CApply (CSymbol ("XmlConv","xmlShows")) (CVar (3,"xc"))) (CVar (14,"c")))) (CApply (CApply (CSymbol ("Prelude",".")) (CApply (CApply (CSymbol ("XmlConv","xmlShows")) (CVar (4,"xd"))) (CVar (15,"d")))) (CApply (CApply (CSymbol ("XmlConv","xmlShows")) (CVar (5,"xe"))) (CVar (16,"e")))))))] []]))]]),
  CFunc ("XmlConv","seq5") 0 Public (CFuncType (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (1,"b")) (CFuncType (CTVar (2,"c")) (CFuncType (CTVar (3,"d")) (CFuncType (CTVar (4,"e")) (CTVar (5,"f"))))))) (CFuncType (CTCons ("XmlConv","XmlConv") [CTVar (6,"g"),CTVar (7,"h"),CTVar (0,"a")]) (CFuncType (CTCons ("XmlConv","XmlConv") [CTVar (8,"i"),CTVar (9,"j"),CTVar (1,"b")]) (CFuncType (CTCons ("XmlConv","XmlConv") [CTVar (10,"k"),CTVar (11,"l"),CTVar (2,"c")]) (CFuncType (CTCons ("XmlConv","XmlConv") [CTVar (12,"m"),CTVar (13,"n"),CTVar (3,"d")]) (CFuncType (CTCons ("XmlConv","XmlConv") [CTVar (14,"o"),CTVar (15,"p"),CTVar (4,"e")]) (CTCons ("XmlConv","XmlConv") [CTCons ("XmlConv","NotRepeatable") [],CTCons ("XmlConv","NoElem") [],CTVar (5,"f")]))))))) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CSymbol ("XmlConv","seq5_"))] []]),
  CFunc ("XmlConv","repSeq5") 6 Public (CFuncType (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (1,"b")) (CFuncType (CTVar (2,"c")) (CFuncType (CTVar (3,"d")) (CFuncType (CTVar (4,"e")) (CTVar (5,"f"))))))) (CFuncType (CTCons ("XmlConv","XmlConv") [CTCons ("XmlConv","Repeatable") [],CTVar (6,"g"),CTVar (0,"a")]) (CFuncType (CTCons ("XmlConv","XmlConv") [CTCons ("XmlConv","Repeatable") [],CTVar (7,"h"),CTVar (1,"b")]) (CFuncType (CTCons ("XmlConv","XmlConv") [CTCons ("XmlConv","Repeatable") [],CTVar (8,"i"),CTVar (2,"c")]) (CFuncType (CTCons ("XmlConv","XmlConv") [CTCons ("XmlConv","Repeatable") [],CTVar (9,"j"),CTVar (3,"d")]) (CFuncType (CTCons ("XmlConv","XmlConv") [CTCons ("XmlConv","Repeatable") [],CTVar (10,"k"),CTVar (4,"e")]) (CTCons ("XmlConv","XmlConv") [CTCons ("XmlConv","NotRepeatable") [],CTCons ("XmlConv","NoElem") [],CTCons ("Prelude","[]") [CTVar (5,"f")]]))))))) (CRules CFlex [CRule [CPVar (0,"cons"),CPVar (1,"xa"),CPVar (2,"xb"),CPVar (3,"xc"),CPVar (4,"xd"),CPVar (5,"xe")] [(CSymbol ("Prelude","success"),CApply (CSymbol ("XmlConv","rep")) (CApply (CApply (CApply (CApply (CApply (CApply (CSymbol ("XmlConv","seq5_")) (CVar (0,"cons"))) (CVar (1,"xa"))) (CVar (2,"xb"))) (CVar (3,"xc"))) (CVar (4,"xd"))) (CVar (5,"xe"))))] []]),
  CFunc ("XmlConv","eSeq5") 7 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (1,"b")) (CFuncType (CTVar (2,"c")) (CFuncType (CTVar (3,"d")) (CFuncType (CTVar (4,"e")) (CTVar (5,"f"))))))) (CFuncType (CTCons ("XmlConv","XmlConv") [CTVar (6,"g"),CTVar (7,"h"),CTVar (0,"a")]) (CFuncType (CTCons ("XmlConv","XmlConv") [CTVar (8,"i"),CTVar (9,"j"),CTVar (1,"b")]) (CFuncType (CTCons ("XmlConv","XmlConv") [CTVar (10,"k"),CTVar (11,"l"),CTVar (2,"c")]) (CFuncType (CTCons ("XmlConv","XmlConv") [CTVar (12,"m"),CTVar (13,"n"),CTVar (3,"d")]) (CFuncType (CTCons ("XmlConv","XmlConv") [CTVar (14,"o"),CTVar (15,"p"),CTVar (4,"e")]) (CTCons ("XmlConv","XmlConv") [CTCons ("XmlConv","Repeatable") [],CTCons ("XmlConv","Elem") [],CTVar (5,"f")])))))))) (CRules CFlex [CRule [CPVar (0,"name"),CPVar (1,"cons"),CPVar (2,"xa"),CPVar (3,"xb"),CPVar (4,"xc"),CPVar (5,"xd"),CPVar (6,"xe")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("XmlConv","element")) (CVar (0,"name"))) (CApply (CApply (CApply (CApply (CApply (CApply (CSymbol ("XmlConv","seq5")) (CVar (1,"cons"))) (CVar (2,"xa"))) (CVar (3,"xb"))) (CVar (4,"xc"))) (CVar (5,"xd"))) (CVar (6,"xe"))))] []]),
  CFunc ("XmlConv","eRepSeq5") 7 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (1,"b")) (CFuncType (CTVar (2,"c")) (CFuncType (CTVar (3,"d")) (CFuncType (CTVar (4,"e")) (CTVar (5,"f"))))))) (CFuncType (CTCons ("XmlConv","XmlConv") [CTCons ("XmlConv","Repeatable") [],CTVar (6,"g"),CTVar (0,"a")]) (CFuncType (CTCons ("XmlConv","XmlConv") [CTCons ("XmlConv","Repeatable") [],CTVar (7,"h"),CTVar (1,"b")]) (CFuncType (CTCons ("XmlConv","XmlConv") [CTCons ("XmlConv","Repeatable") [],CTVar (8,"i"),CTVar (2,"c")]) (CFuncType (CTCons ("XmlConv","XmlConv") [CTCons ("XmlConv","Repeatable") [],CTVar (9,"j"),CTVar (3,"d")]) (CFuncType (CTCons ("XmlConv","XmlConv") [CTCons ("XmlConv","Repeatable") [],CTVar (10,"k"),CTVar (4,"e")]) (CTCons ("XmlConv","XmlConv") [CTCons ("XmlConv","Repeatable") [],CTCons ("XmlConv","Elem") [],CTCons ("Prelude","[]") [CTVar (5,"f")]])))))))) (CRules CFlex [CRule [CPVar (0,"name"),CPVar (1,"cons"),CPVar (2,"xa"),CPVar (3,"xb"),CPVar (4,"xc"),CPVar (5,"xd"),CPVar (6,"xe")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("XmlConv","element")) (CVar (0,"name"))) (CApply (CApply (CApply (CApply (CApply (CApply (CSymbol ("XmlConv","repSeq5")) (CVar (1,"cons"))) (CVar (2,"xa"))) (CVar (3,"xb"))) (CVar (4,"xc"))) (CVar (5,"xd"))) (CVar (6,"xe"))))] []]),
  CFunc ("XmlConv","seq6_") 7 Private (CFuncType (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (1,"b")) (CFuncType (CTVar (2,"c")) (CFuncType (CTVar (3,"d")) (CFuncType (CTVar (4,"e")) (CFuncType (CTVar (5,"f")) (CTVar (6,"g")))))))) (CFuncType (CTCons ("XmlConv","XmlConv") [CTVar (7,"h"),CTVar (8,"i"),CTVar (0,"a")]) (CFuncType (CTCons ("XmlConv","XmlConv") [CTVar (9,"j"),CTVar (10,"k"),CTVar (1,"b")]) (CFuncType (CTCons ("XmlConv","XmlConv") [CTVar (11,"l"),CTVar (12,"m"),CTVar (2,"c")]) (CFuncType (CTCons ("XmlConv","XmlConv") [CTVar (13,"n"),CTVar (14,"o"),CTVar (3,"d")]) (CFuncType (CTCons ("XmlConv","XmlConv") [CTVar (15,"p"),CTVar (16,"q"),CTVar (4,"e")]) (CFuncType (CTCons ("XmlConv","XmlConv") [CTVar (17,"r"),CTVar (18,"s"),CTVar (5,"f")]) (CTCons ("XmlConv","XmlConv") [CTVar (19,"t"),CTCons ("XmlConv","NoElem") [],CTVar (6,"g")])))))))) (CRules CFlex [CRule [CPVar (0,"cons"),CPVar (1,"xa"),CPVar (2,"xb"),CPVar (3,"xc"),CPVar (4,"xd"),CPVar (5,"xe"),CPVar (6,"xf")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("XmlConv","Conv")) (CVar (7,"rd"))) (CSymbol ("XmlConv","sh")))] [CLocalFunc (CFunc ("XmlConv","cf") 6 Private (CFuncType (CTVar (20,"_1290")) (CFuncType (CTVar (21,"_1291")) (CFuncType (CTVar (22,"_1292")) (CFuncType (CTVar (23,"_1293")) (CFuncType (CTVar (24,"_1294")) (CFuncType (CTVar (25,"_1295")) (CTVar (26,"_1250")))))))) (CRules CFlex [CRule [CPVar (8,"a"),CPVar (9,"b"),CPVar (10,"c"),CPVar (11,"d"),CPVar (12,"e"),CPVar (13,"f")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CApply (CApply (CVar (0,"cons")) (CVar (8,"a"))) (CVar (9,"b"))) (CVar (10,"c"))) (CVar (11,"d"))) (CVar (12,"e"))) (CVar (13,"f")))] []])),CLocalPat (CPVar (7,"rd")) (CApply (CApply (CSymbol ("XmlConv","/>=")) (CApply (CSymbol ("XmlConv","xmlReads")) (CVar (1,"xa")))) (CLambda [CPVar (8,"a")] (CApply (CApply (CSymbol ("XmlConv","/>=")) (CApply (CSymbol ("XmlConv","xmlReads")) (CVar (2,"xb")))) (CLambda [CPVar (9,"b")] (CApply (CApply (CSymbol ("XmlConv","/>=")) (CApply (CSymbol ("XmlConv","xmlReads")) (CVar (3,"xc")))) (CLambda [CPVar (10,"c")] (CApply (CApply (CSymbol ("XmlConv","/>=")) (CApply (CSymbol ("XmlConv","xmlReads")) (CVar (4,"xd")))) (CLambda [CPVar (11,"d")] (CApply (CApply (CSymbol ("XmlConv","/>=")) (CApply (CSymbol ("XmlConv","xmlReads")) (CVar (5,"xe")))) (CLambda [CPVar (12,"e")] (CApply (CApply (CSymbol ("XmlConv","/>=")) (CApply (CSymbol ("XmlConv","xmlReads")) (CVar (6,"xf")))) (CLambda [CPVar (13,"f")] (CApply (CSymbol ("XmlConv","ret")) (CApply (CApply (CApply (CApply (CApply (CApply (CVar (0,"cons")) (CVar (8,"a"))) (CVar (9,"b"))) (CVar (10,"c"))) (CVar (11,"d"))) (CVar (12,"e"))) (CVar (13,"f")))))))))))))))) [],CLocalFunc (CFunc ("XmlConv","sh") 1 Private (CFuncType (CTVar (20,"_1250")) (CFuncType (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]],CTCons ("Prelude","[]") [CTCons ("XML","XmlExp") []]]) (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]],CTCons ("Prelude","[]") [CTCons ("XML","XmlExp") []]]))) (CRules CFlex [CRule [CPFuncComb ("XmlConv","cf") [CPVar (14,"a"),CPVar (15,"b"),CPVar (16,"c"),CPVar (17,"d"),CPVar (18,"e"),CPVar (19,"f")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",".")) (CApply (CApply (CSymbol ("XmlConv","xmlShows")) (CVar (1,"xa"))) (CVar (14,"a")))) (CApply (CApply (CSymbol ("Prelude",".")) (CApply (CApply (CSymbol ("XmlConv","xmlShows")) (CVar (2,"xb"))) (CVar (15,"b")))) (CApply (CApply (CSymbol ("Prelude",".")) (CApply (CApply (CSymbol ("XmlConv","xmlShows")) (CVar (3,"xc"))) (CVar (16,"c")))) (CApply (CApply (CSymbol ("Prelude",".")) (CApply (CApply (CSymbol ("XmlConv","xmlShows")) (CVar (4,"xd"))) (CVar (17,"d")))) (CApply (CApply (CSymbol ("Prelude",".")) (CApply (CApply (CSymbol ("XmlConv","xmlShows")) (CVar (5,"xe"))) (CVar (18,"e")))) (CApply (CApply (CSymbol ("XmlConv","xmlShows")) (CVar (6,"xf"))) (CVar (19,"f"))))))))] []]))]]),
  CFunc ("XmlConv","seq6") 0 Public (CFuncType (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (1,"b")) (CFuncType (CTVar (2,"c")) (CFuncType (CTVar (3,"d")) (CFuncType (CTVar (4,"e")) (CFuncType (CTVar (5,"f")) (CTVar (6,"g")))))))) (CFuncType (CTCons ("XmlConv","XmlConv") [CTVar (7,"h"),CTVar (8,"i"),CTVar (0,"a")]) (CFuncType (CTCons ("XmlConv","XmlConv") [CTVar (9,"j"),CTVar (10,"k"),CTVar (1,"b")]) (CFuncType (CTCons ("XmlConv","XmlConv") [CTVar (11,"l"),CTVar (12,"m"),CTVar (2,"c")]) (CFuncType (CTCons ("XmlConv","XmlConv") [CTVar (13,"n"),CTVar (14,"o"),CTVar (3,"d")]) (CFuncType (CTCons ("XmlConv","XmlConv") [CTVar (15,"p"),CTVar (16,"q"),CTVar (4,"e")]) (CFuncType (CTCons ("XmlConv","XmlConv") [CTVar (17,"r"),CTVar (18,"s"),CTVar (5,"f")]) (CTCons ("XmlConv","XmlConv") [CTCons ("XmlConv","NotRepeatable") [],CTCons ("XmlConv","NoElem") [],CTVar (6,"g")])))))))) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CSymbol ("XmlConv","seq6_"))] []]),
  CFunc ("XmlConv","repSeq6") 7 Public (CFuncType (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (1,"b")) (CFuncType (CTVar (2,"c")) (CFuncType (CTVar (3,"d")) (CFuncType (CTVar (4,"e")) (CFuncType (CTVar (5,"f")) (CTVar (6,"g")))))))) (CFuncType (CTCons ("XmlConv","XmlConv") [CTCons ("XmlConv","Repeatable") [],CTVar (7,"h"),CTVar (0,"a")]) (CFuncType (CTCons ("XmlConv","XmlConv") [CTCons ("XmlConv","Repeatable") [],CTVar (8,"i"),CTVar (1,"b")]) (CFuncType (CTCons ("XmlConv","XmlConv") [CTCons ("XmlConv","Repeatable") [],CTVar (9,"j"),CTVar (2,"c")]) (CFuncType (CTCons ("XmlConv","XmlConv") [CTCons ("XmlConv","Repeatable") [],CTVar (10,"k"),CTVar (3,"d")]) (CFuncType (CTCons ("XmlConv","XmlConv") [CTCons ("XmlConv","Repeatable") [],CTVar (11,"l"),CTVar (4,"e")]) (CFuncType (CTCons ("XmlConv","XmlConv") [CTCons ("XmlConv","Repeatable") [],CTVar (12,"m"),CTVar (5,"f")]) (CTCons ("XmlConv","XmlConv") [CTCons ("XmlConv","NotRepeatable") [],CTCons ("XmlConv","NoElem") [],CTCons ("Prelude","[]") [CTVar (6,"g")]])))))))) (CRules CFlex [CRule [CPVar (0,"cons"),CPVar (1,"xa"),CPVar (2,"xb"),CPVar (3,"xc"),CPVar (4,"xd"),CPVar (5,"xe"),CPVar (6,"xf")] [(CSymbol ("Prelude","success"),CApply (CSymbol ("XmlConv","rep")) (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CSymbol ("XmlConv","seq6_")) (CVar (0,"cons"))) (CVar (1,"xa"))) (CVar (2,"xb"))) (CVar (3,"xc"))) (CVar (4,"xd"))) (CVar (5,"xe"))) (CVar (6,"xf"))))] []]),
  CFunc ("XmlConv","eSeq6") 8 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (1,"b")) (CFuncType (CTVar (2,"c")) (CFuncType (CTVar (3,"d")) (CFuncType (CTVar (4,"e")) (CFuncType (CTVar (5,"f")) (CTVar (6,"g")))))))) (CFuncType (CTCons ("XmlConv","XmlConv") [CTVar (7,"h"),CTVar (8,"i"),CTVar (0,"a")]) (CFuncType (CTCons ("XmlConv","XmlConv") [CTVar (9,"j"),CTVar (10,"k"),CTVar (1,"b")]) (CFuncType (CTCons ("XmlConv","XmlConv") [CTVar (11,"l"),CTVar (12,"m"),CTVar (2,"c")]) (CFuncType (CTCons ("XmlConv","XmlConv") [CTVar (13,"n"),CTVar (14,"o"),CTVar (3,"d")]) (CFuncType (CTCons ("XmlConv","XmlConv") [CTVar (15,"p"),CTVar (16,"q"),CTVar (4,"e")]) (CFuncType (CTCons ("XmlConv","XmlConv") [CTVar (17,"r"),CTVar (18,"s"),CTVar (5,"f")]) (CTCons ("XmlConv","XmlConv") [CTCons ("XmlConv","Repeatable") [],CTCons ("XmlConv","Elem") [],CTVar (6,"g")]))))))))) (CRules CFlex [CRule [CPVar (0,"name"),CPVar (1,"cons"),CPVar (2,"xa"),CPVar (3,"xb"),CPVar (4,"xc"),CPVar (5,"xd"),CPVar (6,"xe"),CPVar (7,"xf")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("XmlConv","element")) (CVar (0,"name"))) (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CSymbol ("XmlConv","seq6")) (CVar (1,"cons"))) (CVar (2,"xa"))) (CVar (3,"xb"))) (CVar (4,"xc"))) (CVar (5,"xd"))) (CVar (6,"xe"))) (CVar (7,"xf"))))] []]),
  CFunc ("XmlConv","eRepSeq6") 8 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (1,"b")) (CFuncType (CTVar (2,"c")) (CFuncType (CTVar (3,"d")) (CFuncType (CTVar (4,"e")) (CFuncType (CTVar (5,"f")) (CTVar (6,"g")))))))) (CFuncType (CTCons ("XmlConv","XmlConv") [CTCons ("XmlConv","Repeatable") [],CTVar (7,"h"),CTVar (0,"a")]) (CFuncType (CTCons ("XmlConv","XmlConv") [CTCons ("XmlConv","Repeatable") [],CTVar (8,"i"),CTVar (1,"b")]) (CFuncType (CTCons ("XmlConv","XmlConv") [CTCons ("XmlConv","Repeatable") [],CTVar (9,"j"),CTVar (2,"c")]) (CFuncType (CTCons ("XmlConv","XmlConv") [CTCons ("XmlConv","Repeatable") [],CTVar (10,"k"),CTVar (3,"d")]) (CFuncType (CTCons ("XmlConv","XmlConv") [CTCons ("XmlConv","Repeatable") [],CTVar (11,"l"),CTVar (4,"e")]) (CFuncType (CTCons ("XmlConv","XmlConv") [CTCons ("XmlConv","Repeatable") [],CTVar (12,"m"),CTVar (5,"f")]) (CTCons ("XmlConv","XmlConv") [CTCons ("XmlConv","Repeatable") [],CTCons ("XmlConv","Elem") [],CTCons ("Prelude","[]") [CTVar (6,"g")]]))))))))) (CRules CFlex [CRule [CPVar (0,"name"),CPVar (1,"cons"),CPVar (2,"xa"),CPVar (3,"xb"),CPVar (4,"xc"),CPVar (5,"xd"),CPVar (6,"xe"),CPVar (7,"xf")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("XmlConv","element")) (CVar (0,"name"))) (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CSymbol ("XmlConv","repSeq6")) (CVar (1,"cons"))) (CVar (2,"xa"))) (CVar (3,"xb"))) (CVar (4,"xc"))) (CVar (5,"xd"))) (CVar (6,"xe"))) (CVar (7,"xf"))))] []])]
 [COp ("XmlConv","!") CInfixrOp 0,COp ("XmlConv","/>=") CInfixlOp 1]
