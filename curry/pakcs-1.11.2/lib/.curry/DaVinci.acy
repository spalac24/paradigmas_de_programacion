CurryProg "DaVinci"
 ["Prelude","List","Ports"]
 [CTypeSyn ("DaVinci","DvType") Private [] (CTCons ("Prelude","String") []),
  CType ("DaVinci","DvId") Public [] [CCons ("DaVinci","DvId") 1 Public [CTCons ("Prelude","String") []]],
  CType ("DaVinci","DvCmd") Private [] [CCons ("DaVinci","DvGraphCmd") 1 Private [CTCons ("DaVinci","DvGraphCmd") []],CCons ("DaVinci","DvMenuCmd") 1 Private [CTCons ("DaVinci","DvMenuCmd") []],CCons ("DaVinci","DvNothing") 0 Private []],
  CType ("DaVinci","DvGraphCmd") Private [] [CCons ("DaVinci","DvNewGraph") 1 Private [CTCons ("DaVinci","DvGraph") []],CCons ("DaVinci","DvNewPlaced") 1 Private [CTCons ("DaVinci","DvGraph") []],CCons ("DaVinci","DvUpdate") 2 Private [CTCons ("Prelude","[]") [CTCons ("DaVinci","DvNodeUpdate") []],CTCons ("Prelude","[]") [CTCons ("DaVinci","DvEdgeUpdate") []]],CCons ("DaVinci","DvChangeAttr") 1 Private [CTCons ("Prelude","[]") [CTCons ("DaVinci","DvAttrChange") []]],CCons ("DaVinci","DvUpdateChangeAttr") 3 Private [CTCons ("Prelude","[]") [CTCons ("DaVinci","DvNodeUpdate") []],CTCons ("Prelude","[]") [CTCons ("DaVinci","DvEdgeUpdate") []],CTCons ("Prelude","[]") [CTCons ("DaVinci","DvAttrChange") []]]],
  CType ("DaVinci","DvMenuCmd") Private [] [CCons ("DaVinci","DvFile") 1 Private [CTCons ("DaVinci","DvFileCmd") []]],
  CType ("DaVinci","DvFileCmd") Private [] [CCons ("DaVinci","DvNew") 0 Private [],CCons ("DaVinci","DvOpenGraph") 1 Private [CTCons ("Prelude","String") []],CCons ("DaVinci","DvOpenGraphPlaced") 1 Private [CTCons ("Prelude","String") []],CCons ("DaVinci","DvOpenStatus") 1 Private [CTCons ("Prelude","String") []],CCons ("DaVinci","DvSaveGraph") 1 Private [CTCons ("Prelude","String") []],CCons ("DaVinci","DvSaveStatus") 1 Private [CTCons ("Prelude","String") []],CCons ("DaVinci","DvPrint") 1 Private [CTCons ("Prelude","String") []],CCons ("DaVinci","DvPrintNoName") 0 Private [],CCons ("DaVinci","DvClose") 0 Private [],CCons ("DaVinci","DvExit") 0 Private []],
  CType ("DaVinci","DvGraph") Public [] [CCons ("DaVinci","DvGraph") 1 Public [CTCons ("Prelude","[]") [CTCons ("DaVinci","DvNode") []]]],
  CType ("DaVinci","DvNode") Public [] [CCons ("DaVinci","DvNode") 5 Public [CTCons ("DaVinci","DvId") [],CTCons ("DaVinci","DvType") [],CTCons ("Prelude","[]") [CTCons ("DaVinci","DvAttribute") []],CTCons ("Prelude","[]") [CTCons ("DaVinci","DvEdge") []],CTCons ("Prelude","[]") [CTCons ("DaVinci","DvEventH") []]],CCons ("DaVinci","DvNodeRef") 1 Private [CTCons ("DaVinci","DvId") []]],
  CType ("DaVinci","DvEdge") Public [] [CCons ("DaVinci","DvEdge") 5 Public [CTCons ("DaVinci","DvId") [],CTCons ("DaVinci","DvType") [],CTCons ("Prelude","[]") [CTCons ("DaVinci","DvAttribute") []],CTCons ("DaVinci","DvNode") [],CTCons ("Prelude","[]") [CTCons ("DaVinci","DvEventH") []]]],
  CType ("DaVinci","DvEventH") Private [] [CCons ("DaVinci","DvClick") 1 Private [CFuncType (CTCons ("DaVinci","DvWindow") []) (CTCons ("Prelude","Success") [])]],
  CType ("DaVinci","DvAttribute") Private [] [CCons ("DaVinci","DvAttribute") 2 Private [CTCons ("Prelude","String") [],CTCons ("Prelude","String") []]],
  CType ("DaVinci","DvNodeUpdate") Private [] [CCons ("DaVinci","DvDeleteNode") 1 Private [CTCons ("DaVinci","DvId") []],CCons ("DaVinci","DvNewNode") 4 Private [CTCons ("DaVinci","DvId") [],CTCons ("DaVinci","DvType") [],CTCons ("Prelude","[]") [CTCons ("DaVinci","DvAttribute") []],CTCons ("Prelude","[]") [CTCons ("DaVinci","DvEventH") []]]],
  CType ("DaVinci","DvEdgeUpdate") Private [] [CCons ("DaVinci","DvDeleteEdge") 1 Private [CTCons ("DaVinci","DvId") []],CCons ("DaVinci","DvNewEdge") 6 Private [CTCons ("DaVinci","DvId") [],CTCons ("DaVinci","DvType") [],CTCons ("Prelude","[]") [CTCons ("DaVinci","DvAttribute") []],CTCons ("DaVinci","DvId") [],CTCons ("DaVinci","DvId") [],CTCons ("Prelude","[]") [CTCons ("DaVinci","DvEventH") []]],CCons ("DaVinci","DvNewEdgeBehind") 6 Private [CTCons ("DaVinci","DvId") [],CTCons ("DaVinci","DvId") [],CTCons ("DaVinci","DvType") [],CTCons ("Prelude","[]") [CTCons ("DaVinci","DvAttribute") []],CTCons ("DaVinci","DvId") [],CTCons ("DaVinci","DvId") []]],
  CType ("DaVinci","DvAttrChange") Private [] [CCons ("DaVinci","DvNodeAttrChange") 2 Private [CTCons ("DaVinci","DvId") [],CTCons ("Prelude","[]") [CTCons ("DaVinci","DvAttribute") []]],CCons ("DaVinci","DvEdgeAttrChange") 2 Private [CTCons ("DaVinci","DvId") [],CTCons ("Prelude","[]") [CTCons ("DaVinci","DvAttribute") []]]],
  CType ("DaVinci","DvScheduleMsg") Public [] [CCons ("DaVinci","DvAnswer") 1 Private [CTCons ("Prelude","String") []],CCons ("DaVinci","DvCmdMsg") 1 Private [CTCons ("DaVinci","DvCmd") []],CCons ("DaVinci","DvSetEvent") 2 Private [CTCons ("Prelude","String") [],CTCons ("DaVinci","DvEventH") []]],
  CTypeSyn ("DaVinci","DvWindow") Public [] (CTCons ("Ports","Port") [CTCons ("DaVinci","DvScheduleMsg") []])]
 [CFunc ("DaVinci","dvStartCmd") 0 Private (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CLetDecl [CLocalPat (CPVar (0,"dvHome")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '/'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '/'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'V'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '-'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'P'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '-'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '3'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '.'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '0'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '.'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '2'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '/'))) (CSymbol ("Prelude","[]"))))))))))))))))))))))))))))))) []] (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'D'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'A'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'V'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'I'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'N'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'C'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'I'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'H'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'O'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'M'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'E'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '='))) (CSymbol ("Prelude","[]"))))))))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (0,"dvHome"))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '&'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '&'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]"))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'x'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'D'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'A'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'V'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'I'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'N'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'C'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'I'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'H'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'O'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'M'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'E'))) (CSymbol ("Prelude","[]"))))))))))))))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '&'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '&'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]"))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (0,"dvHome"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '/'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'b'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '/'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'V'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '-'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]")))))))))))))))))))))))))))] []]),
  CFunc ("DaVinci","dvDisplay") 1 Public (CFuncType (CTCons ("DaVinci","DvGraph") []) (CTCons ("Prelude","IO") [CTCons ("Prelude","()") []])) (CRules CFlex [CRule [CPVar (0,"graph")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("DaVinci","dvDisplayInit")) (CVar (0,"graph"))) (CLambda [CPVar (1,"_")] (CSymbol ("Prelude","success"))))] []]),
  CFunc ("DaVinci","dvDisplayInit") 2 Public (CFuncType (CTCons ("DaVinci","DvGraph") []) (CFuncType (CFuncType (CTCons ("Ports","Port") [CTCons ("DaVinci","DvScheduleMsg") []]) (CTCons ("Prelude","Success") [])) (CTCons ("Prelude","IO") [CTCons ("Prelude","()") []]))) (CRules CFlex [CRule [CPVar (0,"graph"),CPVar (1,"evt")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",">>=")) (CSymbol ("DaVinci","openDV"))) (CSymbol ("DaVinci","display")))] [CLocalFunc (CFunc ("DaVinci","display") 1 Private (CFuncType (CTCons ("Ports","Port") [CTCons ("Ports","SP_Msg") []]) (CTCons ("Prelude","IO") [CTCons ("Prelude","()") []])) (CRules CFlex [CRule [CPVar (2,"dvport")] [(CApply (CApply (CApply (CSymbol ("DaVinci","initDvSchedule")) (CVar (0,"graph"))) (CVar (2,"dvport"))) (CVar (1,"evt")),CSymbol ("Prelude","done"))] []]))]]),
  CFunc ("DaVinci","dvNewGraph") 1 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("DaVinci","DvNode") []]) (CTCons ("DaVinci","DvGraph") [])) (CRules CFlex [CRule [CPVar (0,"nodes")] [(CSymbol ("Prelude","success"),CApply (CSymbol ("DaVinci","DvGraph")) (CVar (0,"nodes")))] []]),
  CFunc ("DaVinci","dvSimpleNode") 3 Public (CFuncType (CTCons ("DaVinci","DvId") []) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CFuncType (CTCons ("Ports","Port") [CTCons ("DaVinci","DvScheduleMsg") []]) (CTCons ("Prelude","Success") [])) (CTCons ("DaVinci","DvNode") [])))) (CRules CFlex [CRule [CPVar (0,"node"),CPVar (1,"label"),CPVar (2,"clickH")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CApply (CSymbol ("DaVinci","DvNode")) (CVar (0,"node"))) (CSymbol ("Prelude","[]"))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("DaVinci","DvAttribute")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'O'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'B'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'J'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'E'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'C'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'T'))) (CSymbol ("Prelude","[]"))))))))) (CVar (1,"label")))) (CSymbol ("Prelude","[]")))) (CSymbol ("Prelude","[]"))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("DaVinci","DvClick")) (CVar (2,"clickH")))) (CSymbol ("Prelude","[]"))))] []]),
  CFunc ("DaVinci","dvNodeWithEdges") 4 Public (CFuncType (CTCons ("DaVinci","DvId") []) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("DaVinci","DvEdge") []]) (CFuncType (CFuncType (CTCons ("Ports","Port") [CTCons ("DaVinci","DvScheduleMsg") []]) (CTCons ("Prelude","Success") [])) (CTCons ("DaVinci","DvNode") []))))) (CRules CFlex [CRule [CPVar (0,"node"),CPVar (1,"label"),CPVar (2,"edges"),CPVar (3,"clickH")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CApply (CSymbol ("DaVinci","DvNode")) (CVar (0,"node"))) (CSymbol ("Prelude","[]"))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("DaVinci","DvAttribute")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'O'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'B'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'J'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'E'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'C'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'T'))) (CSymbol ("Prelude","[]"))))))))) (CVar (1,"label")))) (CSymbol ("Prelude","[]")))) (CVar (2,"edges"))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("DaVinci","DvClick")) (CVar (3,"clickH")))) (CSymbol ("Prelude","[]"))))] []]),
  CFunc ("DaVinci","dvSimpleEdge") 3 Public (CFuncType (CTCons ("DaVinci","DvId") []) (CFuncType (CTCons ("DaVinci","DvId") []) (CFuncType (CFuncType (CTCons ("Ports","Port") [CTCons ("DaVinci","DvScheduleMsg") []]) (CTCons ("Prelude","Success") [])) (CTCons ("DaVinci","DvEdge") [])))) (CRules CFlex [CRule [CPVar (0,"edge"),CPVar (1,"node"),CPVar (2,"clickH")] [(CLetDecl [CLocalVar (3,"dvid")] (CApply (CApply (CSymbol ("Prelude","=:=")) (CVar (1,"node"))) (CApply (CSymbol ("DaVinci","DvId")) (CVar (3,"dvid")))),CApply (CApply (CApply (CApply (CApply (CSymbol ("DaVinci","DvEdge")) (CVar (0,"edge"))) (CSymbol ("Prelude","[]"))) (CSymbol ("Prelude","[]"))) (CApply (CSymbol ("DaVinci","DvNodeRef")) (CVar (1,"node")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("DaVinci","DvClick")) (CVar (2,"clickH")))) (CSymbol ("Prelude","[]"))))] []]),
  CFunc ("DaVinci","dvSetNodeColor") 3 Public (CFuncType (CTCons ("DaVinci","DvId") []) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("Ports","Port") [CTCons ("DaVinci","DvScheduleMsg") []]) (CTCons ("Prelude","Success") [])))) (CRules CFlex [CRule [CPVar (0,"node"),CPVar (1,"color"),CPVar (2,"dvwin")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Ports","send")) (CApply (CSymbol ("DaVinci","DvCmdMsg")) (CApply (CSymbol ("DaVinci","DvGraphCmd")) (CApply (CSymbol ("DaVinci","DvChangeAttr")) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("DaVinci","DvNodeAttrChange")) (CVar (0,"node"))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("DaVinci","DvAttribute")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'C'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'O'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'L'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'O'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'R'))) (CSymbol ("Prelude","[]")))))))) (CVar (1,"color")))) (CSymbol ("Prelude","[]"))))) (CSymbol ("Prelude","[]"))))))) (CVar (2,"dvwin")))] []]),
  CFunc ("DaVinci","dvAddNode") 4 Public (CFuncType (CTCons ("DaVinci","DvId") []) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CFuncType (CTCons ("Ports","Port") [CTCons ("DaVinci","DvScheduleMsg") []]) (CTCons ("Prelude","Success") [])) (CFuncType (CTCons ("Ports","Port") [CTCons ("DaVinci","DvScheduleMsg") []]) (CTCons ("Prelude","Success") []))))) (CRules CFlex [CRule [CPVar (0,"node"),CPVar (1,"label"),CPVar (2,"clickH"),CPVar (3,"dvwin")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Ports","send")) (CApply (CSymbol ("DaVinci","DvCmdMsg")) (CApply (CSymbol ("DaVinci","DvGraphCmd")) (CApply (CApply (CSymbol ("DaVinci","DvUpdate")) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CApply (CApply (CSymbol ("DaVinci","DvNewNode")) (CVar (0,"node"))) (CSymbol ("Prelude","[]"))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("DaVinci","DvAttribute")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'O'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'B'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'J'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'E'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'C'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'T'))) (CSymbol ("Prelude","[]"))))))))) (CVar (1,"label")))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("DaVinci","DvClick")) (CVar (2,"clickH")))) (CSymbol ("Prelude","[]"))))) (CSymbol ("Prelude","[]")))) (CSymbol ("Prelude","[]")))))) (CVar (3,"dvwin")))] []]),
  CFunc ("DaVinci","dvSetEdgeColor") 3 Public (CFuncType (CTCons ("DaVinci","DvId") []) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("Ports","Port") [CTCons ("DaVinci","DvScheduleMsg") []]) (CTCons ("Prelude","Success") [])))) (CRules CFlex [CRule [CPVar (0,"edge"),CPVar (1,"color"),CPVar (2,"dvwin")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Ports","send")) (CApply (CSymbol ("DaVinci","DvCmdMsg")) (CApply (CSymbol ("DaVinci","DvGraphCmd")) (CApply (CSymbol ("DaVinci","DvChangeAttr")) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("DaVinci","DvEdgeAttrChange")) (CVar (0,"edge"))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("DaVinci","DvAttribute")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'C'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'O'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'L'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'O'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'R'))) (CSymbol ("Prelude","[]")))))))) (CVar (1,"color")))) (CSymbol ("Prelude","[]"))))) (CSymbol ("Prelude","[]"))))))) (CVar (2,"dvwin")))] []]),
  CFunc ("DaVinci","dvAddEdge") 5 Public (CFuncType (CTCons ("DaVinci","DvId") []) (CFuncType (CTCons ("DaVinci","DvId") []) (CFuncType (CTCons ("DaVinci","DvId") []) (CFuncType (CFuncType (CTCons ("Ports","Port") [CTCons ("DaVinci","DvScheduleMsg") []]) (CTCons ("Prelude","Success") [])) (CFuncType (CTCons ("Ports","Port") [CTCons ("DaVinci","DvScheduleMsg") []]) (CTCons ("Prelude","Success") [])))))) (CRules CFlex [CRule [CPVar (0,"edge"),CPVar (1,"node1"),CPVar (2,"node2"),CPVar (3,"clickH"),CPVar (4,"dvwin")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Ports","send")) (CApply (CSymbol ("DaVinci","DvCmdMsg")) (CApply (CSymbol ("DaVinci","DvGraphCmd")) (CApply (CApply (CSymbol ("DaVinci","DvUpdate")) (CSymbol ("Prelude","[]"))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CApply (CApply (CApply (CApply (CSymbol ("DaVinci","DvNewEdge")) (CVar (0,"edge"))) (CSymbol ("Prelude","[]"))) (CSymbol ("Prelude","[]"))) (CVar (1,"node1"))) (CVar (2,"node2"))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("DaVinci","DvClick")) (CVar (3,"clickH")))) (CSymbol ("Prelude","[]"))))) (CSymbol ("Prelude","[]"))))))) (CVar (4,"dvwin")))] []]),
  CFunc ("DaVinci","dvDelEdge") 2 Public (CFuncType (CTCons ("DaVinci","DvId") []) (CFuncType (CTCons ("Ports","Port") [CTCons ("DaVinci","DvScheduleMsg") []]) (CTCons ("Prelude","Success") []))) (CRules CFlex [CRule [CPVar (0,"edge"),CPVar (1,"dvwin")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Ports","send")) (CApply (CSymbol ("DaVinci","DvCmdMsg")) (CApply (CSymbol ("DaVinci","DvGraphCmd")) (CApply (CApply (CSymbol ("DaVinci","DvUpdate")) (CSymbol ("Prelude","[]"))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("DaVinci","DvDeleteEdge")) (CVar (0,"edge")))) (CSymbol ("Prelude","[]"))))))) (CVar (1,"dvwin")))] []]),
  CFunc ("DaVinci","dvSetClickHandler") 3 Public (CFuncType (CTCons ("DaVinci","DvId") []) (CFuncType (CFuncType (CTCons ("Ports","Port") [CTCons ("DaVinci","DvScheduleMsg") []]) (CTCons ("Prelude","Success") [])) (CFuncType (CTCons ("Ports","Port") [CTCons ("DaVinci","DvScheduleMsg") []]) (CTCons ("Prelude","Success") [])))) (CRules CFlex [CRule [CPComb ("DaVinci","DvId") [CPVar (0,"dvid")],CPVar (1,"handler"),CPVar (2,"dvwin")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Ports","send")) (CApply (CApply (CSymbol ("DaVinci","DvSetEvent")) (CVar (0,"dvid"))) (CApply (CSymbol ("DaVinci","DvClick")) (CVar (1,"handler"))))) (CVar (2,"dvwin")))] []]),
  CFunc ("DaVinci","dvEmptyH") 1 Public (CFuncType (CTCons ("Ports","Port") [CTCons ("DaVinci","DvScheduleMsg") []]) (CTCons ("Prelude","Success") [])) (CRules CFlex [CRule [CPVar (0,"_")] [(CSymbol ("Prelude","success"),CSymbol ("Prelude","success"))] []]),
  CFunc ("DaVinci","dvCmd2DaVinci") 2 Private (CFuncType (CTCons ("DaVinci","DvCmd") []) (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("Prelude","(,,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("DaVinci","DvEventH") []]],CTCons ("Prelude","Int") []]))) (CRules CFlex [CRule [CPComb ("DaVinci","DvGraphCmd") [CPVar (0,"cmd")],CPVar (1,"idindex")] [(CSymbol ("Prelude","success"),CLetDecl [CLocalPat (CPComb ("Prelude","(,,)") [CPVar (2,"ncmd"),CPVar (3,"evs"),CPVar (4,"nidindex")]) (CApply (CApply (CSymbol ("DaVinci","dvGraphCmd2DaVinci")) (CVar (0,"cmd"))) (CVar (1,"idindex"))) []] (CApply (CApply (CApply (CSymbol ("Prelude","(,,)")) (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (2,"ncmd"))) (CSymbol ("Prelude","[]")))) (CSymbol ("Prelude","[]"))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'g'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'h'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '('))) (CSymbol ("Prelude","[]"))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (2,"ncmd"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ')'))) (CSymbol ("Prelude","[]"))))))) (CVar (3,"evs"))) (CVar (4,"nidindex"))))] [],CRule [CPComb ("DaVinci","DvNothing") [],CPVar (5,"idindex")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","(,,)")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'h'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'g'))) (CSymbol ("Prelude","[]")))))))))) (CSymbol ("Prelude","[]"))) (CVar (5,"idindex")))] []]),
  CFunc ("DaVinci","dvGraphCmd2DaVinci") 2 Private (CFuncType (CTCons ("DaVinci","DvGraphCmd") []) (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("Prelude","(,,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("DaVinci","DvEventH") []]],CTCons ("Prelude","Int") []]))) (CRules CFlex [CRule [CPComb ("DaVinci","DvChangeAttr") [CPVar (0,"changes")],CPVar (1,"idindex")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","(,,)")) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'h'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'g'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '_'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '('))) (CSymbol ("Prelude","[]"))))))))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("DaVinci","dvChangeAttrs2DaVinci")) (CVar (0,"changes")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ')'))) (CSymbol ("Prelude","[]")))))) (CSymbol ("Prelude","[]"))) (CVar (1,"idindex")))] [],CRule [CPComb ("DaVinci","DvUpdate") [CPVar (2,"nups"),CPVar (3,"eups")],CPVar (4,"idindex")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","(,,)")) (CVar (11,"ncmd"))) (CVar (9,"nevs2"))) (CVar (10,"nidindex2")))] [CLocalPat (CPComb ("Prelude","(,,)") [CPVar (5,"nnups"),CPVar (6,"_"),CPVar (7,"nidindex")]) (CApply (CApply (CSymbol ("DaVinci","dvNodeUpdates2DaVinci")) (CVar (2,"nups"))) (CVar (4,"idindex"))) [],CLocalPat (CPComb ("Prelude","(,,)") [CPVar (8,"neups"),CPVar (9,"nevs2"),CPVar (10,"nidindex2")]) (CApply (CApply (CSymbol ("DaVinci","dvEdgeUpdates2DaVinci")) (CVar (3,"eups"))) (CVar (7,"nidindex"))) [],CLocalPat (CPVar (11,"ncmd")) (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","&&")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (5,"nnups"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '['))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ']'))) (CSymbol ("Prelude","[]")))))) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (8,"neups"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '['))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ']'))) (CSymbol ("Prelude","[]"))))))) (CSymbol ("Prelude","[]"))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '('))) (CSymbol ("Prelude","[]")))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (5,"nnups"))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ','))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (8,"neups"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ')'))) (CSymbol ("Prelude","[]")))))))) []]]),
  CFunc ("DaVinci","dvChangeAttrs2DaVinci") 1 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("DaVinci","DvAttrChange") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CRules CFlex [CRule [CPVar (0,"changes")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '['))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("Prelude","concat")) (CApply (CApply (CSymbol ("List","intersperse")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ','))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("DaVinci","dvChangeAttr2DaVinci"))) (CVar (0,"changes")))))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ']'))) (CSymbol ("Prelude","[]")))))] []]),
  CFunc ("DaVinci","dvChangeAttr2DaVinci") 1 Private (CFuncType (CTCons ("DaVinci","DvAttrChange") []) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CRules CFlex [CRule [CPComb ("DaVinci","DvNodeAttrChange") [CPComb ("DaVinci","DvId") [CPVar (0,"dvid")],CPVar (1,"attrs")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '('))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '"'))) (CSymbol ("Prelude","[]"))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (0,"dvid"))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '"'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ','))) (CSymbol ("Prelude","[]"))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("DaVinci","dvAttrs2DaVinci")) (CVar (1,"attrs")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ')'))) (CSymbol ("Prelude","[]")))))))] [],CRule [CPComb ("DaVinci","DvEdgeAttrChange") [CPComb ("DaVinci","DvId") [CPVar (2,"dvid")],CPVar (3,"attrs")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'g'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '('))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '"'))) (CSymbol ("Prelude","[]"))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (2,"dvid"))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '"'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ','))) (CSymbol ("Prelude","[]"))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("DaVinci","dvAttrs2DaVinci")) (CVar (3,"attrs")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ')'))) (CSymbol ("Prelude","[]")))))))] []]),
  CFunc ("DaVinci","dvAttrs2DaVinci") 1 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("DaVinci","DvAttribute") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CRules CFlex [CRule [CPVar (0,"attrs")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '['))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("Prelude","concat")) (CApply (CApply (CSymbol ("List","intersperse")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ','))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("DaVinci","dvAttr2DaVinci"))) (CVar (0,"attrs")))))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ']'))) (CSymbol ("Prelude","[]")))))] [CLocalFunc (CFunc ("DaVinci","dvAttr2DaVinci") 1 Private (CFuncType (CTCons ("DaVinci","DvAttribute") []) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CRules CFlex [CRule [CPComb ("DaVinci","DvAttribute") [CPVar (1,"key"),CPVar (2,"value")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '('))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '"'))) (CSymbol ("Prelude","[]")))))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (1,"key"))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '"'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ','))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '"'))) (CSymbol ("Prelude","[]")))))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (2,"value"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '"'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ')'))) (CSymbol ("Prelude","[]"))))))))] []]))]]),
  CFunc ("DaVinci","dvNodeUpdates2DaVinci") 2 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("DaVinci","DvNodeUpdate") []]) (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("Prelude","(,,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("DaVinci","DvEventH") []]],CTCons ("Prelude","Int") []]))) (CRules CFlex [CRule [CPVar (0,"nups"),CPVar (1,"idindex")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("DaVinci","dvList2DaVinci")) (CVar (0,"nups"))) (CSymbol ("DaVinci","dvNodeUpdate2DaVinci"))) (CVar (1,"idindex")))] []]),
  CFunc ("DaVinci","dvNodeUpdate2DaVinci") 2 Private (CFuncType (CTCons ("DaVinci","DvNodeUpdate") []) (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("Prelude","(,,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("DaVinci","DvEventH") []]],CTCons ("Prelude","Int") []]))) (CRules CFlex [CRule [CPComb ("DaVinci","DvDeleteNode") [CPComb ("DaVinci","DvId") [CPVar (0,"dvid")]],CPVar (1,"idindex")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","(,,)")) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '_'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '('))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '"'))) (CSymbol ("Prelude","[]")))))))))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (0,"dvid"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '"'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ')'))) (CSymbol ("Prelude","[]"))))))) (CSymbol ("Prelude","[]"))) (CVar (1,"idindex")))] [],CRule [CPComb ("DaVinci","DvNewNode") [CPVar (2,"dvid"),CPVar (3,"typ"),CPVar (4,"attrs"),CPVar (5,"evs")],CPVar (6,"idindex")] [(CApply (CApply (CSymbol ("Prelude","=:=")) (CVar (2,"dvid"))) (CApply (CSymbol ("DaVinci","DvId")) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]"))))))) (CApply (CSymbol ("Prelude","show")) (CVar (6,"idindex"))))),CApply (CApply (CApply (CSymbol ("Prelude","(,,)")) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'w'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '_'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '('))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '"'))) (CSymbol ("Prelude","[]"))))))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]"))))))) (CApply (CSymbol ("Prelude","show")) (CVar (6,"idindex"))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '"'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ','))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '"'))) (CSymbol ("Prelude","[]")))))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (3,"typ"))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '"'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ','))) (CSymbol ("Prelude","[]"))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("DaVinci","dvAttrs2DaVinci")) (CVar (4,"attrs")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ')'))) (CSymbol ("Prelude","[]")))))))))) (CApply (CApply (CSymbol ("DaVinci","dvEvents2DaVinci")) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]"))))))) (CApply (CSymbol ("Prelude","show")) (CVar (6,"idindex"))))) (CVar (5,"evs")))) (CApply (CApply (CSymbol ("Prelude","+")) (CVar (6,"idindex"))) (CLit (CIntc 1))))] []]),
  CFunc ("DaVinci","dvEdgeUpdates2DaVinci") 2 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("DaVinci","DvEdgeUpdate") []]) (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("Prelude","(,,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("DaVinci","DvEventH") []]],CTCons ("Prelude","Int") []]))) (CRules CFlex [CRule [CPVar (0,"eups"),CPVar (1,"idindex")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("DaVinci","dvList2DaVinci")) (CVar (0,"eups"))) (CSymbol ("DaVinci","dvEdgeUpdate2DaVinci"))) (CVar (1,"idindex")))] []]),
  CFunc ("DaVinci","dvEdgeUpdate2DaVinci") 2 Private (CFuncType (CTCons ("DaVinci","DvEdgeUpdate") []) (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("Prelude","(,,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("DaVinci","DvEventH") []]],CTCons ("Prelude","Int") []]))) (CRules CFlex [CRule [CPComb ("DaVinci","DvDeleteEdge") [CPComb ("DaVinci","DvId") [CPVar (0,"dvid")]],CPVar (1,"idindex")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","(,,)")) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '_'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'g'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '('))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '"'))) (CSymbol ("Prelude","[]")))))))))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (0,"dvid"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '"'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ')'))) (CSymbol ("Prelude","[]"))))))) (CSymbol ("Prelude","[]"))) (CVar (1,"idindex")))] [],CRule [CPComb ("DaVinci","DvNewEdge") [CPVar (2,"dvid"),CPVar (3,"typ"),CPVar (4,"attrs"),CPComb ("DaVinci","DvId") [CPVar (5,"node1")],CPComb ("DaVinci","DvId") [CPVar (6,"node2")],CPVar (7,"evs")],CPVar (8,"idindex")] [(CApply (CApply (CSymbol ("Prelude","=:=")) (CVar (2,"dvid"))) (CApply (CSymbol ("DaVinci","DvId")) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'g'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]"))))))) (CApply (CSymbol ("Prelude","show")) (CVar (8,"idindex"))))),CVar (9,"res"))] [CLocalPat (CPVar (9,"res")) (CApply (CApply (CApply (CSymbol ("Prelude","(,,)")) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'w'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '_'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'g'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '('))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '"'))) (CSymbol ("Prelude","[]"))))))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'g'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]"))))))) (CApply (CSymbol ("Prelude","show")) (CVar (8,"idindex"))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '"'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ','))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '"'))) (CSymbol ("Prelude","[]")))))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (3,"typ"))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '"'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ','))) (CSymbol ("Prelude","[]"))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("DaVinci","dvAttrs2DaVinci")) (CVar (4,"attrs")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ','))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '"'))) (CSymbol ("Prelude","[]"))))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (5,"node1"))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '"'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ','))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '"'))) (CSymbol ("Prelude","[]")))))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (6,"node2"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '"'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ')'))) (CSymbol ("Prelude","[]"))))))))))))))) (CApply (CApply (CSymbol ("DaVinci","dvEvents2DaVinci")) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'g'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]"))))))) (CApply (CSymbol ("Prelude","show")) (CVar (8,"idindex"))))) (CVar (7,"evs")))) (CApply (CApply (CSymbol ("Prelude","+")) (CVar (8,"idindex"))) (CLit (CIntc 1)))) []]]),
  CFunc ("DaVinci","dvGraph2DaVinci") 2 Private (CFuncType (CTCons ("DaVinci","DvGraph") []) (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("Prelude","(,,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("DaVinci","DvEventH") []]],CTCons ("Prelude","Int") []]))) (CRules CFlex [CRule [CPComb ("DaVinci","DvGraph") [CPVar (0,"nodes")],CPVar (1,"idindex")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("DaVinci","dvNodes2DaVinci")) (CVar (0,"nodes"))) (CVar (1,"idindex")))] []]),
  CFunc ("DaVinci","dvNodes2DaVinci") 2 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("DaVinci","DvNode") []]) (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("Prelude","(,,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("DaVinci","DvEventH") []]],CTCons ("Prelude","Int") []]))) (CRules CFlex [CRule [CPVar (0,"nodes"),CPVar (1,"idindex")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("DaVinci","dvList2DaVinci")) (CVar (0,"nodes"))) (CSymbol ("DaVinci","dvNode2DaVinci"))) (CVar (1,"idindex")))] []]),
  CFunc ("DaVinci","dvNode2DaVinci") 2 Private (CFuncType (CTCons ("DaVinci","DvNode") []) (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("Prelude","(,,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("DaVinci","DvEventH") []]],CTCons ("Prelude","Int") []]))) (CRules CFlex [CRule [CPComb ("DaVinci","DvNode") [CPVar (0,"dvid"),CPVar (1,"typ"),CPVar (2,"attrs"),CPVar (3,"edges"),CPVar (4,"evs")],CPVar (5,"idindex")] [(CApply (CApply (CSymbol ("Prelude","=:=")) (CVar (0,"dvid"))) (CApply (CSymbol ("DaVinci","DvId")) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]"))))))) (CApply (CSymbol ("Prelude","show")) (CVar (5,"idindex"))))),CVar (9,"res"))] [CLocalPat (CPComb ("Prelude","(,,)") [CPVar (6,"ncmd"),CPVar (7,"nevs"),CPVar (8,"nidindex")]) (CApply (CApply (CSymbol ("DaVinci","dvEdges2DaVinci")) (CVar (3,"edges"))) (CApply (CApply (CSymbol ("Prelude","+")) (CVar (5,"idindex"))) (CLit (CIntc 1)))) [],CLocalPat (CPVar (9,"res")) (CApply (CApply (CApply (CSymbol ("Prelude","(,,)")) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '('))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '"'))) (CSymbol ("Prelude","[]")))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]"))))))) (CApply (CSymbol ("Prelude","show")) (CVar (5,"idindex"))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '"'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ','))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '('))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '"'))) (CSymbol ("Prelude","[]")))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (1,"typ"))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '"'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ','))) (CSymbol ("Prelude","[]"))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("DaVinci","dvAttrs2DaVinci")) (CVar (2,"attrs")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ','))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (6,"ncmd"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ')'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ')'))) (CSymbol ("Prelude","[]"))))))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("DaVinci","dvEvents2DaVinci")) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]"))))))) (CApply (CSymbol ("Prelude","show")) (CVar (5,"idindex"))))) (CVar (4,"evs")))) (CVar (7,"nevs")))) (CVar (8,"nidindex"))) []],CRule [CPComb ("DaVinci","DvNodeRef") [CPComb ("DaVinci","DvId") [CPVar (10,"dvid")]],CPVar (11,"idindex")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","(,,)")) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '('))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '"'))) (CSymbol ("Prelude","[]")))))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (10,"dvid"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '"'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ')'))) (CSymbol ("Prelude","[]"))))))) (CSymbol ("Prelude","[]"))) (CVar (11,"idindex")))] []]),
  CFunc ("DaVinci","dvEdges2DaVinci") 2 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("DaVinci","DvEdge") []]) (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("Prelude","(,,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("DaVinci","DvEventH") []]],CTCons ("Prelude","Int") []]))) (CRules CFlex [CRule [CPVar (0,"edges"),CPVar (1,"idindex")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("DaVinci","dvList2DaVinci")) (CVar (0,"edges"))) (CSymbol ("DaVinci","dvEdge2DaVinci"))) (CVar (1,"idindex")))] []]),
  CFunc ("DaVinci","dvEdge2DaVinci") 2 Private (CFuncType (CTCons ("DaVinci","DvEdge") []) (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("Prelude","(,,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("DaVinci","DvEventH") []]],CTCons ("Prelude","Int") []]))) (CRules CFlex [CRule [CPComb ("DaVinci","DvEdge") [CPVar (0,"dvid"),CPVar (1,"typ"),CPVar (2,"attrs"),CPVar (3,"node"),CPVar (4,"evs")],CPVar (5,"idindex")] [(CApply (CApply (CSymbol ("Prelude","=:=")) (CVar (0,"dvid"))) (CApply (CSymbol ("DaVinci","DvId")) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'g'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]"))))))) (CApply (CSymbol ("Prelude","show")) (CVar (5,"idindex"))))),CVar (9,"res"))] [CLocalPat (CPComb ("Prelude","(,,)") [CPVar (6,"ncmd"),CPVar (7,"_"),CPVar (8,"nidindex")]) (CApply (CApply (CSymbol ("DaVinci","dvNode2DaVinci")) (CVar (3,"node"))) (CApply (CApply (CSymbol ("Prelude","+")) (CVar (5,"idindex"))) (CLit (CIntc 1)))) [],CLocalPat (CPVar (9,"res")) (CApply (CApply (CApply (CSymbol ("Prelude","(,,)")) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '('))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '"'))) (CSymbol ("Prelude","[]")))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'g'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]"))))))) (CApply (CSymbol ("Prelude","show")) (CVar (5,"idindex"))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '"'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ','))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '('))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '"'))) (CSymbol ("Prelude","[]")))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (1,"typ"))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '"'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ','))) (CSymbol ("Prelude","[]"))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("DaVinci","dvAttrs2DaVinci")) (CVar (2,"attrs")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ','))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (6,"ncmd"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ')'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ')'))) (CSymbol ("Prelude","[]"))))))))))))) (CApply (CApply (CSymbol ("DaVinci","dvEvents2DaVinci")) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'g'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]"))))))) (CApply (CSymbol ("Prelude","show")) (CVar (5,"idindex"))))) (CVar (4,"evs")))) (CVar (8,"nidindex"))) []]]),
  CFunc ("DaVinci","dvEvents2DaVinci") 2 Private (CFuncType (CTVar (0,"a")) (CFuncType (CTCons ("Prelude","[]") [CTVar (1,"b")]) (CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTVar (0,"a"),CTVar (1,"b")]]))) (CRules CFlex [CRule [CPVar (0,"_"),CPComb ("Prelude","[]") []] [(CSymbol ("Prelude","success"),CSymbol ("Prelude","[]"))] [],CRule [CPVar (1,"dvid"),CPComb ("Prelude",":") [CPVar (2,"e"),CPVar (3,"es")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CVar (1,"dvid"))) (CVar (2,"e")))) (CApply (CApply (CSymbol ("DaVinci","dvEvents2DaVinci")) (CVar (1,"dvid"))) (CVar (3,"es"))))] []]),
  CFunc ("DaVinci","dvList2DaVinci") 3 Private (CFuncType (CTCons ("Prelude","[]") [CTVar (0,"a")]) (CFuncType (CFuncType (CTVar (0,"a")) (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("Prelude","(,,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("DaVinci","DvEventH") []]],CTCons ("Prelude","Int") []]))) (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("Prelude","(,,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("DaVinci","DvEventH") []]],CTCons ("Prelude","Int") []])))) (CRules CFlex [CRule [CPVar (0,"list"),CPVar (1,"f"),CPVar (2,"ididx")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CSymbol ("DaVinci","aux")) (CVar (0,"list"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '['))) (CSymbol ("Prelude","[]")))) (CSymbol ("Prelude","[]"))) (CVar (2,"ididx")))] [CLocalFunc (CFunc ("DaVinci","aux") 4 Private (CFuncType (CTCons ("Prelude","[]") [CTVar (1,"_48")]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("DaVinci","DvEventH") []]]) (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("Prelude","(,,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("DaVinci","DvEventH") []]],CTCons ("Prelude","Int") []]))))) (CRules CFlex [CRule [CPComb ("Prelude","[]") [],CPVar (3,"cmd"),CPVar (4,"evs"),CPVar (5,"idindex")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","(,,)")) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (3,"cmd"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ']'))) (CSymbol ("Prelude","[]"))))) (CVar (4,"evs"))) (CVar (5,"idindex")))] [],CRule [CPComb ("Prelude",":") [CPVar (6,"x"),CPVar (7,"xs")],CPVar (8,"cmd"),CPVar (9,"evs"),CPVar (10,"idindex")] [(CSymbol ("Prelude","success"),CLetDecl [CLocalPat (CPComb ("Prelude","(,,)") [CPVar (11,"ncmd"),CPVar (12,"nevs"),CPVar (13,"nidindex")]) (CApply (CApply (CVar (1,"f")) (CVar (6,"x"))) (CVar (10,"idindex"))) [],CLocalPat (CPVar (14,"ncmd2")) (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","||")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (8,"cmd"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '['))) (CSymbol ("Prelude","[]"))))) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (11,"ncmd"))) (CSymbol ("Prelude","[]"))))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (8,"cmd"))) (CVar (11,"ncmd")))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (8,"cmd"))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ','))) (CSymbol ("Prelude","[]")))) (CVar (11,"ncmd"))))) []] (CApply (CApply (CApply (CApply (CSymbol ("DaVinci","aux")) (CVar (7,"xs"))) (CVar (14,"ncmd2"))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (9,"evs"))) (CVar (12,"nevs")))) (CVar (13,"nidindex"))))] []]))]]),
  CFunc ("DaVinci","openDV") 0 Private (CTCons ("Prelude","IO") [CTCons ("Ports","Port") [CTCons ("Ports","SP_Msg") []]]) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Ports","openProcessPort")) (CSymbol ("DaVinci","dvStartCmd")))] []]),
  CFunc ("DaVinci","initDvSchedule") 3 Private (CFuncType (CTCons ("DaVinci","DvGraph") []) (CFuncType (CTCons ("Ports","Port") [CTCons ("Ports","SP_Msg") []]) (CFuncType (CFuncType (CTCons ("Ports","Port") [CTCons ("DaVinci","DvScheduleMsg") []]) (CTCons ("Prelude","Success") [])) (CTCons ("Prelude","Success") [])))) (CRules CFlex [CRule [CPVar (0,"initgraph"),CPVar (1,"dvport"),CPVar (2,"initcmd")] [(CSymbol ("Prelude","success"),CLetDecl [CLocalVar (6,"p"),CLocalVar (7,"s"),CLocalVar (8,"ans1"),CLocalVar (9,"ans2")] (CApply (CApply (CSymbol ("Prelude","&>")) (CApply (CApply (CSymbol ("Ports","send")) (CApply (CSymbol ("Ports","SP_GetLine")) (CVar (8,"ans1")))) (CVar (1,"dvport")))) (CApply (CApply (CSymbol ("Prelude","&>")) (CApply (CApply (CSymbol ("Ports","send")) (CApply (CSymbol ("Ports","SP_Put")) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'g'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'h'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '('))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'w'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '('))) (CSymbol ("Prelude","[]"))))))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (3,"cmd"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ')'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ')'))) (CSymbol ("Prelude","[]")))))))) (CVar (1,"dvport")))) (CApply (CApply (CSymbol ("Prelude","&>")) (CApply (CApply (CSymbol ("Ports","send")) (CApply (CSymbol ("Ports","SP_GetLine")) (CVar (9,"ans2")))) (CVar (1,"dvport")))) (CApply (CApply (CSymbol ("Prelude","&>")) (CApply (CApply (CSymbol ("Ports","openPort")) (CVar (6,"p"))) (CVar (7,"s")))) (CApply (CApply (CSymbol ("Prelude","&>")) (CApply (CVar (2,"initcmd")) (CVar (6,"p")))) (CApply (CApply (CSymbol ("Prelude","&")) (CApply (CApply (CApply (CApply (CApply (CSymbol ("DaVinci","dvSchedule")) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("Prelude","ensureNotFree"))) (CApply (CSymbol ("Prelude","ensureSpine")) (CVar (7,"s"))))) (CVar (4,"evs"))) (CVar (5,"idindex"))) (CVar (6,"p"))) (CVar (1,"dvport")))) (CApply (CApply (CSymbol ("DaVinci","dvAdaptor")) (CVar (6,"p"))) (CVar (1,"dvport"))))))))))] [CLocalPat (CPComb ("Prelude","(,,)") [CPVar (3,"cmd"),CPVar (4,"evs"),CPVar (5,"idindex")]) (CApply (CApply (CSymbol ("DaVinci","dvGraph2DaVinci")) (CVar (0,"initgraph"))) (CLit (CIntc 0))) []]]),
  CFunc ("DaVinci","dvSchedule") 5 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("DaVinci","DvScheduleMsg") []]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("DaVinci","DvEventH") []]]) (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Ports","Port") [CTCons ("DaVinci","DvScheduleMsg") []]) (CFuncType (CTCons ("Ports","Port") [CTCons ("Ports","SP_Msg") []]) (CTCons ("Prelude","Success") [])))))) (CRules CFlex [CRule [CPComb ("Prelude",":") [CPComb ("DaVinci","DvCmdMsg") [CPVar (0,"c")],CPVar (1,"msgs")],CPVar (2,"evs"),CPVar (3,"idindex"),CPVar (4,"sport"),CPVar (5,"dvport")] [(CSymbol ("Prelude","success"),CLetDecl [CLocalPat (CPComb ("Prelude","(,,)") [CPVar (6,"ncmd"),CPVar (7,"nevs"),CPVar (8,"nidindex")]) (CApply (CApply (CSymbol ("DaVinci","dvCmd2DaVinci")) (CVar (0,"c"))) (CVar (3,"idindex"))) []] (CApply (CApply (CSymbol ("Prelude","&>")) (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (6,"ncmd"))) (CSymbol ("Prelude","[]")))) (CSymbol ("Prelude","success"))) (CApply (CApply (CSymbol ("Ports","send")) (CApply (CSymbol ("Ports","SP_Put")) (CVar (6,"ncmd")))) (CVar (5,"dvport"))))) (CApply (CApply (CApply (CApply (CApply (CSymbol ("DaVinci","dvSchedule")) (CVar (1,"msgs"))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (7,"nevs"))) (CVar (2,"evs")))) (CVar (8,"nidindex"))) (CVar (4,"sport"))) (CVar (5,"dvport")))))] [],CRule [CPComb ("Prelude",":") [CPComb ("DaVinci","DvSetEvent") [CPVar (9,"dvid"),CPComb ("DaVinci","DvClick") [CPVar (10,"newh")]],CPVar (11,"msgs")],CPVar (12,"evs"),CPVar (13,"idindex"),CPVar (14,"sport"),CPVar (15,"dvport")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CApply (CSymbol ("DaVinci","dvSchedule")) (CVar (11,"msgs"))) (CApply (CApply (CApply (CApply (CSymbol ("DaVinci","updateEventHandlers")) (CVar (9,"dvid"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'k'))) (CSymbol ("Prelude","[]")))))))) (CVar (10,"newh"))) (CVar (12,"evs")))) (CVar (13,"idindex"))) (CVar (14,"sport"))) (CVar (15,"dvport")))] [],CRule [CPComb ("Prelude",":") [CPComb ("DaVinci","DvAnswer") [CPVar (16,"s")],CPVar (17,"msgs")],CPVar (18,"evs"),CPVar (19,"idindex"),CPVar (20,"sport"),CPVar (21,"dvport")] [(CApply (CApply (CSymbol ("Prelude","==")) (CVar (16,"s"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'k'))) (CSymbol ("Prelude","[]")))),CApply (CApply (CApply (CApply (CApply (CSymbol ("DaVinci","dvSchedule")) (CVar (17,"msgs"))) (CVar (18,"evs"))) (CVar (19,"idindex"))) (CVar (20,"sport"))) (CVar (21,"dvport"))),(CApply (CApply (CSymbol ("Prelude","==")) (CVar (16,"s"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'q'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CSymbol ("Prelude","[]")))))),CSymbol ("Prelude","success")),(CApply (CApply (CSymbol ("Prelude","==")) (CApply (CApply (CSymbol ("Prelude","takeWhile")) (CLambda [CPVar (22,"x0")] (CApply (CApply (CSymbol ("Prelude","/=")) (CVar (22,"x0"))) (CLit (CCharc '('))))) (CVar (16,"s")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '_'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '_'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'b'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CSymbol ("Prelude","[]")))))))))))))))))))))))),CApply (CApply (CSymbol ("Prelude","&>")) (CApply (CApply (CApply (CSymbol ("Prelude","foldr")) (CSymbol ("Prelude","&>"))) (CSymbol ("Prelude","success"))) (CApply (CApply (CSymbol ("Prelude","map")) (CLambda [CPVar (23,"h")] (CApply (CVar (23,"h")) (CVar (20,"sport"))))) (CApply (CApply (CApply (CSymbol ("DaVinci","selectEventHandlers")) (CApply (CSymbol ("DaVinci","dvParseNodes")) (CApply (CApply (CSymbol ("Prelude","dropWhile")) (CLambda [CPVar (24,"x0")] (CApply (CApply (CSymbol ("Prelude","/=")) (CVar (24,"x0"))) (CLit (CCharc '('))))) (CVar (16,"s"))))) (CVar (18,"evs"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'k'))) (CSymbol ("Prelude","[]"))))))))))) (CApply (CApply (CApply (CApply (CApply (CSymbol ("DaVinci","dvSchedule")) (CVar (17,"msgs"))) (CVar (18,"evs"))) (CVar (19,"idindex"))) (CVar (20,"sport"))) (CVar (21,"dvport")))),(CApply (CApply (CSymbol ("Prelude","==")) (CApply (CApply (CSymbol ("Prelude","takeWhile")) (CLambda [CPVar (25,"c")] (CApply (CApply (CSymbol ("Prelude","/=")) (CVar (25,"c"))) (CLit (CCharc '('))))) (CVar (16,"s")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'g'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '_'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '_'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'b'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CSymbol ("Prelude","[]")))))))))))))))))))))),CLetDecl [CLocalPat (CPVar (26,"handlers")) (CApply (CApply (CApply (CSymbol ("DaVinci","selectEventHandlers")) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude","takeWhile")) (CLambda [CPVar (27,"x0")] (CApply (CApply (CSymbol ("Prelude","/=")) (CVar (27,"x0"))) (CLit (CCharc '"'))))) (CApply (CSymbol ("Prelude","tail")) (CApply (CSymbol ("Prelude","tail")) (CApply (CApply (CSymbol ("Prelude","dropWhile")) (CLambda [CPVar (28,"x0")] (CApply (CApply (CSymbol ("Prelude","/=")) (CVar (28,"x0"))) (CLit (CCharc '('))))) (CVar (16,"s"))))))) (CSymbol ("Prelude","[]")))) (CVar (18,"evs"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'k'))) (CSymbol ("Prelude","[]")))))))) []] (CApply (CApply (CSymbol ("Prelude","&>")) (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (26,"handlers"))) (CSymbol ("Prelude","[]")))) (CSymbol ("Prelude","success"))) (CApply (CApply (CSymbol ("Prelude","head")) (CVar (26,"handlers"))) (CVar (20,"sport"))))) (CApply (CApply (CApply (CApply (CApply (CSymbol ("DaVinci","dvSchedule")) (CVar (17,"msgs"))) (CVar (18,"evs"))) (CVar (19,"idindex"))) (CVar (20,"sport"))) (CVar (21,"dvport"))))),(CSymbol ("Prelude","otherwise"),CApply (CApply (CApply (CApply (CApply (CSymbol ("DaVinci","dvSchedule")) (CVar (17,"msgs"))) (CVar (18,"evs"))) (CVar (19,"idindex"))) (CVar (20,"sport"))) (CVar (21,"dvport")))] []]),
  CFunc ("DaVinci","dvAdaptor") 2 Private (CFuncType (CTCons ("Ports","Port") [CTCons ("DaVinci","DvScheduleMsg") []]) (CFuncType (CTCons ("Ports","Port") [CTCons ("Ports","SP_Msg") []]) (CTCons ("Prelude","Success") []))) (CRules CFlex [CRule [CPVar (0,"sport"),CPVar (1,"dvport")] [(CApply (CApply (CSymbol ("Ports","send")) (CApply (CSymbol ("Ports","SP_GetLine")) (CVar (2,"ans")))) (CVar (1,"dvport")),CApply (CApply (CSymbol ("Prelude","&>")) (CApply (CApply (CSymbol ("Ports","send")) (CApply (CSymbol ("DaVinci","DvAnswer")) (CVar (2,"ans")))) (CVar (0,"sport")))) (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (2,"ans"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'q'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CSymbol ("Prelude","[]")))))))) (CSymbol ("Prelude","success"))) (CApply (CApply (CSymbol ("DaVinci","dvAdaptor")) (CVar (0,"sport"))) (CVar (1,"dvport")))))] [CLocalVar (2,"ans")]]),
  CFunc ("DaVinci","selectEventHandlers") 3 Private (CFuncType (CTCons ("Prelude","[]") [CTVar (0,"a")]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTVar (0,"a"),CTCons ("DaVinci","DvEventH") []]]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","[]") [CFuncType (CTCons ("Ports","Port") [CTCons ("DaVinci","DvScheduleMsg") []]) (CTCons ("Prelude","Success") [])])))) (CRules CFlex [CRule [CPVar (0,"dvids"),CPVar (1,"evs"),CPVar (2,"evtype")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","concatMap")) (CSymbol ("DaVinci","mapFun"))) (CApply (CApply (CSymbol ("Prelude","filter")) (CLambda [CPComb ("Prelude","(,)") [CPVar (3,"dvid"),CPVar (4,"_")]] (CApply (CApply (CSymbol ("Prelude","elem")) (CVar (3,"dvid"))) (CVar (0,"dvids"))))) (CVar (1,"evs"))))] [CLocalFunc (CFunc ("DaVinci","mapFun") 1 Private (CFuncType (CTCons ("Prelude","(,)") [CTVar (0,"a"),CTCons ("DaVinci","DvEventH") []]) (CTCons ("Prelude","[]") [CFuncType (CTCons ("Ports","Port") [CTCons ("DaVinci","DvScheduleMsg") []]) (CTCons ("Prelude","Success") [])])) (CRules CFlex [CRule [CPComb ("Prelude","(,)") [CPVar (3,"_"),CPComb ("DaVinci","DvClick") [CPVar (4,"handler")]]] [(CApply (CApply (CSymbol ("Prelude","==")) (CVar (2,"evtype"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'k'))) (CSymbol ("Prelude","[]"))))))),CApply (CApply (CSymbol ("Prelude",":")) (CVar (4,"handler"))) (CSymbol ("Prelude","[]"))),(CSymbol ("Prelude","otherwise"),CSymbol ("Prelude","[]"))] []]))]]),
  CFunc ("DaVinci","updateEventHandlers") 4 Private (CFuncType (CTVar (0,"a")) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CFuncType (CTCons ("Ports","Port") [CTCons ("DaVinci","DvScheduleMsg") []]) (CTCons ("Prelude","Success") [])) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTVar (0,"a"),CTCons ("DaVinci","DvEventH") []]]) (CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTVar (0,"a"),CTCons ("DaVinci","DvEventH") []]]))))) (CRules CFlex [CRule [CPVar (0,"dvid"),CPComb ("Prelude",":") [CPLit (CCharc 'c'),CPComb ("Prelude",":") [CPLit (CCharc 'l'),CPComb ("Prelude",":") [CPLit (CCharc 'i'),CPComb ("Prelude",":") [CPLit (CCharc 'c'),CPComb ("Prelude",":") [CPLit (CCharc 'k'),CPComb ("Prelude","[]") []]]]]],CPVar (1,"newh"),CPVar (2,"evs")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CVar (0,"dvid"))) (CApply (CSymbol ("DaVinci","DvClick")) (CVar (1,"newh"))))) (CApply (CApply (CApply (CSymbol ("DaVinci","deleteEventHandler")) (CVar (0,"dvid"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'k'))) (CSymbol ("Prelude","[]")))))))) (CVar (2,"evs"))))] []]),
  CFunc ("DaVinci","deleteEventHandler") 3 Private (CFuncType (CTVar (0,"a")) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTVar (0,"a"),CTCons ("DaVinci","DvEventH") []]]) (CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTVar (0,"a"),CTCons ("DaVinci","DvEventH") []]])))) (CRules CFlex [CRule [CPVar (0,"_"),CPVar (1,"_"),CPComb ("Prelude","[]") []] [(CSymbol ("Prelude","success"),CSymbol ("Prelude","[]"))] [],CRule [CPVar (2,"dvid1"),CPVar (3,"evtype"),CPComb ("Prelude",":") [CPComb ("Prelude","(,)") [CPVar (4,"dvid2"),CPComb ("DaVinci","DvClick") [CPVar (5,"handler")]],CPVar (6,"evs")]] [(CApply (CApply (CSymbol ("Prelude","&&")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (2,"dvid1"))) (CVar (4,"dvid2")))) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (3,"evtype"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'k'))) (CSymbol ("Prelude","[]")))))))),CVar (6,"evs")),(CSymbol ("Prelude","otherwise"),CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CVar (4,"dvid2"))) (CApply (CSymbol ("DaVinci","DvClick")) (CVar (5,"handler"))))) (CApply (CApply (CApply (CSymbol ("DaVinci","deleteEventHandler")) (CVar (2,"dvid1"))) (CVar (3,"evtype"))) (CVar (6,"evs"))))] []]),
  CFunc ("DaVinci","dvParseNodes") 1 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]])) (CRules CFlex [CRule [CPVar (0,"s")] [(CSymbol ("Prelude","success"),CApply (CSymbol ("DaVinci","dvParseNodeList")) (CApply (CSymbol ("Prelude","tail")) (CApply (CSymbol ("Prelude","tail")) (CVar (0,"s")))))] []]),
  CFunc ("DaVinci","dvParseNodeList") 1 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]])) (CRules CFlex [CRule [CPVar (0,"s")] [(CApply (CApply (CSymbol ("Prelude","==")) (CVar (0,"s"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ')'))) (CSymbol ("Prelude","[]"))),CSymbol ("Prelude","[]")),(CSymbol ("Prelude","otherwise"),CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude","takeWhile")) (CSymbol ("DaVinci","compare1"))) (CApply (CSymbol ("Prelude","tail")) (CVar (0,"s"))))) (CApply (CSymbol ("DaVinci","dvParseNodeList")) (CApply (CSymbol ("Prelude","tail")) (CApply (CApply (CSymbol ("Prelude","dropWhile")) (CSymbol ("DaVinci","compare2"))) (CVar (0,"s"))))))] [CLocalFunc (CFunc ("DaVinci","compare1") 1 Private (CFuncType (CTCons ("Prelude","Char") []) (CTCons ("Prelude","Bool") [])) (CRules CFlex [CRule [CPVar (1,"c")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","&&")) (CApply (CApply (CSymbol ("Prelude","/=")) (CVar (1,"c"))) (CLit (CCharc '"')))) (CApply (CApply (CSymbol ("Prelude","/=")) (CVar (1,"c"))) (CLit (CCharc ']'))))] []])),CLocalFunc (CFunc ("DaVinci","compare2") 1 Private (CFuncType (CTCons ("Prelude","Char") []) (CTCons ("Prelude","Bool") [])) (CRules CFlex [CRule [CPVar (1,"c")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","&&")) (CApply (CApply (CSymbol ("Prelude","/=")) (CVar (1,"c"))) (CLit (CCharc ',')))) (CApply (CApply (CSymbol ("Prelude","/=")) (CVar (1,"c"))) (CLit (CCharc ']'))))] []]))]])]
 []
