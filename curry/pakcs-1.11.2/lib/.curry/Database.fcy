Prog "Database" ["Dynamic","Global","Prelude"] [Type ("Database","Query") Public [0] [Cons ("Database","QueryDB") 1 Private [TCons ("Prelude","IO") [TVar 0]]],Type ("Database","TError") Public [] [Cons ("Database","TError") 2 Public [TCons ("Database","TErrorKind") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]],Type ("Database","TErrorKind") Public [] [Cons ("Database","KeyNotExistsError") 0 Public [],Cons ("Database","NoRelationshipError") 0 Public [],Cons ("Database","DuplicateKeyError") 0 Public [],Cons ("Database","KeyRequiredError") 0 Public [],Cons ("Database","UniqueError") 0 Public [],Cons ("Database","MinError") 0 Public [],Cons ("Database","MaxError") 0 Public [],Cons ("Database","UserDefinedError") 0 Public [],Cons ("Database","ExecutionError") 0 Public []],Type ("Database","Transaction") Public [0] [Cons ("Database","TransDB") 1 Private [TCons ("Prelude","IO") [TCons ("Database","TransResult") [TVar 0]]]],Type ("Database","TransResult") Private [0] [Cons ("Database","OK") 1 Private [TVar 0],Cons ("Database","Error") 1 Private [TCons ("Database","TError") []]]] [Func ("Database","queryAll") 1 Public (FuncType (FuncType (TVar 0) (TCons ("Dynamic","Dynamic") [])) (TCons ("Database","Query") [TCons ("Prelude","[]") [TVar 0]])) (Rule [1] (Comb ConsCall ("Database","QueryDB") [Comb FuncCall ("Dynamic","getDynamicSolutions") [Var 1]])),Func ("Database","queryOne") 1 Public (FuncType (FuncType (TVar 0) (TCons ("Dynamic","Dynamic") [])) (TCons ("Database","Query") [TCons ("Prelude","Maybe") [TVar 0]])) (Rule [1] (Comb ConsCall ("Database","QueryDB") [Comb FuncCall ("Dynamic","getDynamicSolution") [Var 1]])),Func ("Database","queryOneWithDefault") 2 Public (FuncType (TVar 0) (FuncType (FuncType (TVar 0) (TCons ("Dynamic","Dynamic") [])) (TCons ("Database","Query") [TVar 0]))) (Rule [1,2] (Comb FuncCall ("Database","transformQ") [Comb (FuncPartCall 1) ("Prelude","maybe") [Var 1,Comb (FuncPartCall 1) ("Prelude","id") []],Comb FuncCall ("Database","queryOne") [Var 2]])),Func ("Database","queryJustOne") 0 Public (FuncType (FuncType (TVar 0) (TCons ("Dynamic","Dynamic") [])) (TCons ("Database","Query") [TVar 0])) (Rule [] (Comb (FuncPartCall 1) ("Database","queryOneWithDefault") [Comb FuncCall ("Prelude","failed") []])),Func ("Database","dynamicExists") 1 Public (FuncType (TCons ("Dynamic","Dynamic") []) (TCons ("Database","Query") [TCons ("Prelude","Bool") []])) (Rule [1] (Comb ConsCall ("Database","QueryDB") [Comb FuncCall ("Dynamic","isKnown") [Var 1]])),Func ("Database","transformQ") 2 Public (FuncType (FuncType (TVar 0) (TVar 1)) (FuncType (TCons ("Database","Query") [TVar 0]) (TCons ("Database","Query") [TVar 1]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Database","QueryDB") [3]) (Comb ConsCall ("Database","QueryDB") [Comb FuncCall ("Prelude",">>=") [Var 3,Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","return") [],Var 1]]])])),Func ("Database","runQ") 1 Public (FuncType (TCons ("Database","Query") [TVar 0]) (TCons ("Prelude","IO") [TVar 0])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Database","QueryDB") [2]) (Var 2)])),Func ("Database","showTError") 1 Public (FuncType (TCons ("Database","TError") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Database","TError") [2,3]) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'T'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","show") [Var 2],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]],Var 3]]])])),Func ("Database","addDB") 1 Public (FuncType (TCons ("Dynamic","Dynamic") []) (TCons ("Database","Transaction") [TCons ("Prelude","()") []])) (Rule [1] (Comb ConsCall ("Database","TransDB") [Comb FuncCall ("Prelude",">>") [Comb FuncCall ("Dynamic","assert") [Var 1],Comb FuncCall ("Prelude","return") [Comb ConsCall ("Database","OK") [Comb ConsCall ("Prelude","()") []]]]])),Func ("Database","deleteDB") 1 Public (FuncType (TCons ("Dynamic","Dynamic") []) (TCons ("Database","Transaction") [TCons ("Prelude","()") []])) (Rule [1] (Comb ConsCall ("Database","TransDB") [Comb FuncCall ("Prelude",">>") [Comb FuncCall ("Dynamic","retract") [Var 1],Comb FuncCall ("Prelude","return") [Comb ConsCall ("Database","OK") [Comb ConsCall ("Prelude","()") []]]]])),Func ("Database","getDB") 1 Public (FuncType (TCons ("Database","Query") [TVar 0]) (TCons ("Database","Transaction") [TVar 0])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Database","QueryDB") [2]) (Comb ConsCall ("Database","TransDB") [Comb FuncCall ("Prelude",">>=") [Var 2,Comb (FuncPartCall 1) ("Database","getDB._#lambda1") []]])])),Func ("Database","getDB._#lambda1") 1 Private (FuncType (TVar 62) (TCons ("Prelude","IO") [TCons ("Database","TransResult") [TVar 62]])) (Rule [1] (Comb FuncCall ("Prelude","return") [Comb ConsCall ("Database","OK") [Var 1]])),Func ("Database","returnT") 1 Public (FuncType (TVar 0) (TCons ("Database","Transaction") [TVar 0])) (Rule [1] (Comb ConsCall ("Database","TransDB") [Comb FuncCall ("Prelude","return") [Comb ConsCall ("Database","OK") [Var 1]]])),Func ("Database","doneT") 0 Public (TCons ("Database","Transaction") [TCons ("Prelude","()") []]) (Rule [] (Comb FuncCall ("Database","returnT") [Comb ConsCall ("Prelude","()") []])),Func ("Database","errorT") 1 Public (FuncType (TCons ("Database","TError") []) (TCons ("Database","Transaction") [TVar 0])) (Rule [1] (Comb ConsCall ("Database","TransDB") [Comb FuncCall ("Prelude","return") [Comb ConsCall ("Database","Error") [Var 1]]])),Func ("Database","failT") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Database","Transaction") [TVar 0])) (Rule [1] (Comb FuncCall ("Database","errorT") [Comb ConsCall ("Database","TError") [Comb ConsCall ("Database","UserDefinedError") [],Var 1]])),Func ("Database","|>>=") 2 Public (FuncType (TCons ("Database","Transaction") [TVar 0]) (FuncType (FuncType (TVar 0) (TCons ("Database","Transaction") [TVar 1])) (TCons ("Database","Transaction") [TVar 1]))) (Rule [1,2] (Case  Flex (Var 1) [Branch (Pattern ("Database","TransDB") [3]) (Comb FuncCall ("Prelude","$") [Comb (ConsPartCall 1) ("Database","TransDB") [],Comb FuncCall ("Prelude",">>=") [Var 3,Comb (FuncPartCall 1) ("Database","|>>=._#lambda2") [Var 2]]])])),Func ("Database","|>>=._#lambda2") 2 Private (FuncType (FuncType (TVar 95) (TCons ("Database","Transaction") [TVar 96])) (FuncType (TCons ("Database","TransResult") [TVar 95]) (TCons ("Prelude","IO") [TCons ("Database","TransResult") [TVar 96]]))) (Rule [1,2] (Case  Rigid (Var 2) [Branch (Pattern ("Database","Error") [3]) (Comb FuncCall ("Prelude","return") [Comb ConsCall ("Database","Error") [Var 3]]),Branch (Pattern ("Database","OK") [4]) (Let [(5,Comb FuncCall ("Prelude","apply") [Var 1,Var 4])] (Comb FuncCall ("Database","|>>=._#lambda2._#selFP2#t2") [Var 5]))])),Func ("Database","|>>=._#lambda2._#selFP2#t2") 1 Private (FuncType (TCons ("Database","Transaction") [TVar 96]) (TCons ("Prelude","IO") [TCons ("Database","TransResult") [TVar 96]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Database","TransDB") [2]) (Var 2)])),Func ("Database","|>>") 2 Public (FuncType (TCons ("Database","Transaction") [TVar 0]) (FuncType (TCons ("Database","Transaction") [TVar 1]) (TCons ("Database","Transaction") [TVar 1]))) (Rule [1,2] (Comb FuncCall ("Database","|>>=") [Var 1,Comb (FuncPartCall 1) ("Database","|>>._#lambda4") [Var 2]])),Func ("Database","|>>._#lambda4") 2 Private (FuncType (TCons ("Database","Transaction") [TVar 105]) (FuncType (TVar 106) (TCons ("Database","Transaction") [TVar 105]))) (Rule [1,2] (Var 1)),Func ("Database","sequenceT") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Database","Transaction") [TVar 0]]) (TCons ("Database","Transaction") [TCons ("Prelude","[]") [TVar 0]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Database","returnT") [Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude",":") [2,3]) (Comb FuncCall ("Database","|>>=") [Var 2,Comb (FuncPartCall 1) ("Database","sequenceT._#lambda5") [Var 3]])])),Func ("Database","sequenceT._#lambda5") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Database","Transaction") [TVar 116]]) (FuncType (TVar 116) (TCons ("Database","Transaction") [TCons ("Prelude","[]") [TVar 116]]))) (Rule [1,2] (Comb FuncCall ("Database","|>>=") [Comb FuncCall ("Database","sequenceT") [Var 1],Comb (FuncPartCall 1) ("Database","sequenceT._#lambda5._#lambda6") [Var 2]])),Func ("Database","sequenceT._#lambda5._#lambda6") 2 Private (FuncType (TVar 116) (FuncType (TCons ("Prelude","[]") [TVar 116]) (TCons ("Database","Transaction") [TCons ("Prelude","[]") [TVar 116]]))) (Rule [1,2] (Comb FuncCall ("Database","returnT") [Comb ConsCall ("Prelude",":") [Var 1,Var 2]])),Func ("Database","sequenceT_") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Database","Transaction") [TVar 0]]) (TCons ("Database","Transaction") [TCons ("Prelude","()") []])) (Rule [] (Comb (FuncPartCall 1) ("Prelude","foldr") [Comb (FuncPartCall 2) ("Database","|>>") [],Comb FuncCall ("Database","doneT") []])),Func ("Database","mapT") 1 Public (FuncType (FuncType (TVar 0) (TCons ("Database","Transaction") [TVar 1])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Database","Transaction") [TCons ("Prelude","[]") [TVar 1]]))) (Rule [1] (Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Database","sequenceT") [],Comb (FuncPartCall 1) ("Prelude","map") [Var 1]])),Func ("Database","mapT_") 1 Public (FuncType (FuncType (TVar 0) (TCons ("Database","Transaction") [TVar 1])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Database","Transaction") [TCons ("Prelude","()") []]))) (Rule [1] (Comb FuncCall ("Prelude",".") [Comb FuncCall ("Database","sequenceT_") [],Comb (FuncPartCall 1) ("Prelude","map") [Var 1]])),Func ("Database","runT") 1 Public (FuncType (TCons ("Database","Transaction") [TVar 0]) (TCons ("Prelude","IO") [TCons ("Prelude","Either") [TVar 0,TCons ("Database","TError") []]])) (Rule [1] (Comb FuncCall ("Prelude",">>") [Comb FuncCall ("Global","writeGlobal") [Comb FuncCall ("Database","currentTransError") [],Comb FuncCall ("Database","execError") []],Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Dynamic","transactionWithErrorCatch") [Let [(2,Comb FuncCall ("Database","runT._#selFP4#trans") [Var 1])] (Comb FuncCall ("Prelude",">>=") [Var 2,Comb (FuncPartCall 1) ("Database","runT._#lambda7") []])],Comb (FuncPartCall 1) ("Database","runT._#lambda9") []]])),Func ("Database","runT.transformResult.58") 1 Private (FuncType (TCons ("Database","TransResult") [TVar 0]) (TCons ("Prelude","Either") [TVar 0,TCons ("Database","TError") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Database","OK") [2]) (Comb ConsCall ("Prelude","Left") [Var 2]),Branch (Pattern ("Database","Error") [3]) (Comb ConsCall ("Prelude","Right") [Var 3])])),Func ("Database","runT._#selFP4#trans") 1 Private (FuncType (TCons ("Database","Transaction") [TVar 172]) (TCons ("Prelude","IO") [TCons ("Database","TransResult") [TVar 172]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Database","TransDB") [2]) (Var 2)])),Func ("Database","runT._#lambda7") 1 Private (FuncType (TCons ("Database","TransResult") [TVar 172]) (TCons ("Prelude","IO") [TCons ("Database","TransResult") [TVar 172]])) (Rule [1] (Case  Rigid (Var 1) [Branch (Pattern ("Database","OK") [2]) (Comb FuncCall ("Prelude","return") [Var 1]),Branch (Pattern ("Database","Error") [3]) (Comb FuncCall ("Prelude",">>") [Comb FuncCall ("Global","writeGlobal") [Comb FuncCall ("Database","currentTransError") [],Var 3],Comb FuncCall ("Prelude","failed") []])])),Func ("Database","runT._#lambda9") 1 Private (FuncType (TCons ("Prelude","Either") [TCons ("Database","TransResult") [TVar 172],TCons ("Prelude","IOError") []]) (TCons ("Prelude","IO") [TCons ("Prelude","Either") [TVar 172,TCons ("Database","TError") []]])) (Rule [1] (Comb FuncCall ("Prelude","either") [Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","return") [],Comb (FuncPartCall 1) ("Database","runT.transformResult.58") []],Comb (FuncPartCall 1) ("Database","runT._#lambda9._#lambda10") [],Var 1])),Func ("Database","runT._#lambda9._#lambda10") 1 Private (FuncType (TCons ("Prelude","IOError") []) (TCons ("Prelude","IO") [TCons ("Prelude","Either") [TVar 254,TCons ("Database","TError") []]])) (Rule [1] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Global","readGlobal") [Comb FuncCall ("Database","currentTransError") []],Comb (FuncPartCall 1) ("Database","runT._#lambda9._#lambda10._#lambda11") [Var 1]])),Func ("Database","runT._#lambda9._#lambda10._#lambda11") 2 Private (FuncType (TCons ("Prelude","IOError") []) (FuncType (TCons ("Database","TError") []) (TCons ("Prelude","IO") [TCons ("Prelude","Either") [TVar 255,TCons ("Database","TError") []]]))) (Rule [1,2] (Comb FuncCall ("Prelude","return") [Comb ConsCall ("Prelude","Right") [Case  Rigid (Comb FuncCall ("Prelude","==") [Var 2,Comb FuncCall ("Database","execError") []]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Database","TError") [Comb ConsCall ("Database","ExecutionError") [],Comb FuncCall ("Prelude","showError") [Var 1]]),Branch (Pattern ("Prelude","False") []) (Var 2)]]])),Func ("Database","runJustT") 1 Public (FuncType (TCons ("Database","Transaction") [TVar 0]) (TCons ("Prelude","IO") [TVar 0])) (Rule [1] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Database","runT") [Var 1],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","return") [],Comb (FuncPartCall 1) ("Prelude","either") [Comb (FuncPartCall 1) ("Prelude","id") [],Comb (FuncPartCall 1) ("Database","runJustT._#lambda12") []]]])),Func ("Database","runJustT._#lambda12") 1 Private (FuncType (TCons ("Database","TError") []) (TVar 256)) (Rule [1] (Comb FuncCall ("Prelude","error") [Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'T'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]],Comb FuncCall ("Database","showTError") [Var 1]]])),Func ("Database","runTNA") 1 Public (FuncType (TCons ("Database","Transaction") [TVar 0]) (TCons ("Prelude","IO") [TCons ("Prelude","Either") [TVar 0,TCons ("Database","TError") []]])) (Rule [1] (Comb FuncCall ("Prelude",">>") [Comb FuncCall ("Global","writeGlobal") [Comb FuncCall ("Database","currentTransError") [],Comb FuncCall ("Database","execError") []],Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Database","runTNA.safeExecIO.78") [Let [(2,Comb FuncCall ("Database","runTNA._#selFP6#trans") [Var 1])] (Comb FuncCall ("Prelude",">>=") [Var 2,Comb (FuncPartCall 1) ("Database","runTNA._#lambda13") []])],Comb (FuncPartCall 1) ("Database","runTNA._#lambda15") []]])),Func ("Database","runTNA.transformResult.78") 1 Private (FuncType (TCons ("Database","TransResult") [TVar 0]) (TCons ("Prelude","Either") [TVar 0,TCons ("Database","TError") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Database","OK") [2]) (Comb ConsCall ("Prelude","Left") [Var 2]),Branch (Pattern ("Database","Error") [3]) (Comb ConsCall ("Prelude","Right") [Var 3])])),Func ("Database","runTNA.safeExecIO.78") 1 Private (FuncType (TCons ("Prelude","IO") [TVar 0]) (TCons ("Prelude","IO") [TCons ("Prelude","Either") [TVar 0,TCons ("Prelude","IOError") []]])) (Rule [1] (Comb FuncCall ("Prelude","catch") [Comb FuncCall ("Prelude",">>=") [Var 1,Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","return") [],Comb (ConsPartCall 1) ("Prelude","Left") []]],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","return") [],Comb (ConsPartCall 1) ("Prelude","Right") []]])),Func ("Database","runTNA._#selFP6#trans") 1 Private (FuncType (TCons ("Database","Transaction") [TVar 253]) (TCons ("Prelude","IO") [TCons ("Database","TransResult") [TVar 253]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Database","TransDB") [2]) (Var 2)])),Func ("Database","runTNA._#lambda13") 1 Private (FuncType (TCons ("Database","TransResult") [TVar 253]) (TCons ("Prelude","IO") [TCons ("Database","TransResult") [TVar 253]])) (Rule [1] (Case  Rigid (Var 1) [Branch (Pattern ("Database","OK") [2]) (Comb FuncCall ("Prelude","return") [Var 1]),Branch (Pattern ("Database","Error") [3]) (Comb FuncCall ("Prelude",">>") [Comb FuncCall ("Global","writeGlobal") [Comb FuncCall ("Database","currentTransError") [],Var 3],Comb FuncCall ("Prelude","failed") []])])),Func ("Database","runTNA._#lambda15") 1 Private (FuncType (TCons ("Prelude","Either") [TCons ("Database","TransResult") [TVar 253],TCons ("Prelude","IOError") []]) (TCons ("Prelude","IO") [TCons ("Prelude","Either") [TVar 253,TCons ("Database","TError") []]])) (Rule [1] (Comb FuncCall ("Prelude","either") [Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","return") [],Comb (FuncPartCall 1) ("Database","runTNA.transformResult.78") []],Comb (FuncPartCall 1) ("Database","runTNA._#lambda15._#lambda16") [],Var 1])),Func ("Database","runTNA._#lambda15._#lambda16") 1 Private (FuncType (TCons ("Prelude","IOError") []) (TCons ("Prelude","IO") [TCons ("Prelude","Either") [TVar 257,TCons ("Database","TError") []]])) (Rule [1] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Global","readGlobal") [Comb FuncCall ("Database","currentTransError") []],Comb (FuncPartCall 1) ("Database","runTNA._#lambda15._#lambda16._#lambda17") [Var 1]])),Func ("Database","runTNA._#lambda15._#lambda16._#lambda17") 2 Private (FuncType (TCons ("Prelude","IOError") []) (FuncType (TCons ("Database","TError") []) (TCons ("Prelude","IO") [TCons ("Prelude","Either") [TVar 258,TCons ("Database","TError") []]]))) (Rule [1,2] (Comb FuncCall ("Prelude","return") [Comb ConsCall ("Prelude","Right") [Case  Rigid (Comb FuncCall ("Prelude","==") [Var 2,Comb FuncCall ("Database","execError") []]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Database","TError") [Comb ConsCall ("Database","ExecutionError") [],Comb FuncCall ("Prelude","showError") [Var 1]]),Branch (Pattern ("Prelude","False") []) (Var 2)]]])),Func ("Database","currentTransError") 0 Private (TCons ("Global","Global") [TCons ("Database","TError") []]) (Rule [] (Comb FuncCall ("Global","global") [Comb FuncCall ("Database","execError") [],Comb ConsCall ("Global","Temporary") []])),Func ("Database","execError") 0 Private (TCons ("Database","TError") []) (Rule [] (Comb ConsCall ("Database","TError") [Comb ConsCall ("Database","ExecutionError") [],Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]))] [Op ("Database","|>>") InfixlOp 1,Op ("Database","|>>=") InfixlOp 1]