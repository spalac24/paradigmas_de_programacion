CurryProg "AbsCurryIO"
 ["Prelude","AbstractCurry","AbsCurry","Distribution"]
 []
 [CFunc ("AbsCurryIO","abstract2absCurry") 1 Private (CFuncType (CTCons ("AbstractCurry","CurryProg") []) (CTCons ("AbsCurry","CProg") [])) (CRules CFlex [CRule [CPComb ("AbstractCurry","CurryProg") [CPVar (0,"mod"),CPVar (1,"imps"),CPVar (2,"types"),CPVar (3,"funcs"),CPVar (4,"ops")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CApply (CSymbol ("AbsCurry","CProg")) (CVar (0,"mod"))) (CVar (1,"imps"))) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("AbsCurryIO","transTypeDecl"))) (CVar (2,"types")))) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("AbsCurryIO","transFunc"))) (CVar (3,"funcs")))) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("AbsCurryIO","transOpDecl"))) (CVar (4,"ops"))))] []]),
  CFunc ("AbsCurryIO","transVis") 1 Private (CFuncType (CTCons ("AbstractCurry","CVisibility") []) (CTCons ("AbsCurry","CVisibility") [])) (CRules CFlex [CRule [CPComb ("AbstractCurry","Public") []] [(CSymbol ("Prelude","success"),CSymbol ("AbsCurry","CExported"))] [],CRule [CPComb ("AbstractCurry","Private") []] [(CSymbol ("Prelude","success"),CSymbol ("AbsCurry","CPrivate"))] []]),
  CFunc ("AbsCurryIO","transTypeDecl") 1 Private (CFuncType (CTCons ("AbstractCurry","CTypeDecl") []) (CTCons ("AbsCurry","CTypeDecl") [])) (CRules CFlex [CRule [CPComb ("AbstractCurry","CType") [CPComb ("Prelude","(,)") [CPVar (0,"_"),CPVar (1,"name")],CPVar (2,"vis"),CPVar (3,"tvars"),CPVar (4,"constrs")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CSymbol ("AbsCurry","CType")) (CVar (1,"name"))) (CApply (CSymbol ("AbsCurryIO","transVis")) (CVar (2,"vis")))) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("Prelude","fst"))) (CVar (3,"tvars")))) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("AbsCurryIO","transConsDecl"))) (CVar (4,"constrs"))))] [],CRule [CPComb ("AbstractCurry","CTypeSyn") [CPComb ("Prelude","(,)") [CPVar (5,"_"),CPVar (6,"name")],CPVar (7,"vis"),CPVar (8,"tvars"),CPVar (9,"texp")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CSymbol ("AbsCurry","CTypeSyn")) (CVar (6,"name"))) (CApply (CSymbol ("AbsCurryIO","transVis")) (CVar (7,"vis")))) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("Prelude","fst"))) (CVar (8,"tvars")))) (CApply (CSymbol ("AbsCurryIO","transTExp")) (CVar (9,"texp"))))] []]),
  CFunc ("AbsCurryIO","transConsDecl") 1 Private (CFuncType (CTCons ("AbstractCurry","CConsDecl") []) (CTCons ("AbsCurry","CConsDecl") [])) (CRules CFlex [CRule [CPComb ("AbstractCurry","CCons") [CPComb ("Prelude","(,)") [CPVar (0,"_"),CPVar (1,"name")],CPVar (2,"arity"),CPVar (3,"vis"),CPVar (4,"texps")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CSymbol ("AbsCurry","CCons")) (CVar (1,"name"))) (CVar (2,"arity"))) (CApply (CSymbol ("AbsCurryIO","transVis")) (CVar (3,"vis")))) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("AbsCurryIO","transTExp"))) (CVar (4,"texps"))))] []]),
  CFunc ("AbsCurryIO","transTExp") 1 Private (CFuncType (CTCons ("AbstractCurry","CTypeExpr") []) (CTCons ("AbsCurry","CTypeExpr") [])) (CRules CFlex [CRule [CPComb ("AbstractCurry","CTVar") [CPComb ("Prelude","(,)") [CPVar (0,"i"),CPVar (1,"_")]]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("AbsCurry","CTVar")) (CVar (0,"i")))] [],CRule [CPComb ("AbstractCurry","CFuncType") [CPVar (2,"te1"),CPVar (3,"te2")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("AbsCurry","CFuncType")) (CApply (CSymbol ("AbsCurryIO","transTExp")) (CVar (2,"te1")))) (CApply (CSymbol ("AbsCurryIO","transTExp")) (CVar (3,"te2"))))] [],CRule [CPComb ("AbstractCurry","CTCons") [CPComb ("Prelude","(,)") [CPVar (4,"mod"),CPVar (5,"name")],CPVar (6,"texps")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("AbsCurry","CTCons")) (CVar (4,"mod"))) (CVar (5,"name"))) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("AbsCurryIO","transTExp"))) (CVar (6,"texps"))))] []]),
  CFunc ("AbsCurryIO","transFunc") 1 Private (CFuncType (CTCons ("AbstractCurry","CFuncDecl") []) (CTCons ("AbsCurry","CFuncDecl") [])) (CRules CFlex [CRule [CPComb ("AbstractCurry","CFunc") [CPComb ("Prelude","(,)") [CPVar (0,"_"),CPVar (1,"name")],CPVar (2,"arity"),CPVar (3,"vis"),CPVar (4,"texp"),CPVar (5,"rules")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CApply (CSymbol ("AbsCurry","CFunc")) (CVar (1,"name"))) (CVar (2,"arity"))) (CApply (CSymbol ("AbsCurryIO","transVis")) (CVar (3,"vis")))) (CApply (CSymbol ("AbsCurryIO","transTExp")) (CVar (4,"texp")))) (CApply (CSymbol ("AbsCurryIO","transRules")) (CVar (5,"rules"))))] []]),
  CFunc ("AbsCurryIO","transRules") 1 Private (CFuncType (CTCons ("AbstractCurry","CRules") []) (CTCons ("AbsCurry","CRules") [])) (CRules CFlex [CRule [CPComb ("AbstractCurry","CRules") [CPVar (0,"ea"),CPVar (1,"rules")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("AbsCurry","CRules")) (CApply (CSymbol ("AbsCurryIO","transEval")) (CVar (0,"ea")))) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("AbsCurryIO","transRule"))) (CVar (1,"rules"))))] [],CRule [CPComb ("AbstractCurry","CExternal") [CPVar (2,"extname")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("AbsCurry","CExternal")) (CVar (2,"extname")))] []]),
  CFunc ("AbsCurryIO","transEval") 1 Private (CFuncType (CTCons ("AbstractCurry","CEvalAnnot") []) (CTCons ("AbsCurry","CEvalAnnot") [])) (CRules CFlex [CRule [CPComb ("AbstractCurry","CFlex") []] [(CSymbol ("Prelude","success"),CSymbol ("AbsCurry","CFlex"))] [],CRule [CPComb ("AbstractCurry","CRigid") []] [(CSymbol ("Prelude","success"),CSymbol ("AbsCurry","CRigid"))] [],CRule [CPComb ("AbstractCurry","CChoice") []] [(CSymbol ("Prelude","success"),CSymbol ("AbsCurry","CChoice"))] []]),
  CFunc ("AbsCurryIO","transRule") 1 Private (CFuncType (CTCons ("AbstractCurry","CRule") []) (CTCons ("AbsCurry","CRule") [])) (CRules CFlex [CRule [CPComb ("AbstractCurry","CRule") [CPVar (0,"patts"),CPVar (1,"grhs"),CPVar (2,"locals")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("AbsCurry","CRule")) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("AbsCurryIO","transPattern"))) (CVar (0,"patts")))) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("AbsCurryIO","transGRHS"))) (CVar (1,"grhs")))) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("AbsCurryIO","transLocal"))) (CVar (2,"locals"))))] []]),
  CFunc ("AbsCurryIO","transLocal") 1 Private (CFuncType (CTCons ("AbstractCurry","CLocalDecl") []) (CTCons ("AbsCurry","CLocalDecl") [])) (CRules CFlex [CRule [CPComb ("AbstractCurry","CLocalFunc") [CPVar (0,"func")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("AbsCurry","CLocalFunc")) (CApply (CSymbol ("AbsCurryIO","transFunc")) (CVar (0,"func"))))] [],CRule [CPComb ("AbstractCurry","CLocalPat") [CPVar (1,"patt"),CPVar (2,"exp"),CPVar (3,"locals")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CSymbol ("AbsCurry","CLocalPat")) (CApply (CApply (CApply (CSymbol ("AbsCurry","CTCons")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'P'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]")))))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'y'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CSymbol ("Prelude","[]")))))))))) (CSymbol ("Prelude","[]")))) (CApply (CSymbol ("AbsCurryIO","transPattern")) (CVar (1,"patt")))) (CApply (CSymbol ("AbsCurryIO","transExp")) (CVar (2,"exp")))) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("AbsCurryIO","transLocal"))) (CVar (3,"locals"))))] [],CRule [CPComb ("AbstractCurry","CLocalVar") [CPComb ("Prelude","(,)") [CPVar (4,"i"),CPVar (5,"_")]]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("AbsCurry","CLocalVar")) (CApply (CApply (CApply (CSymbol ("AbsCurry","CTCons")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'P'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]")))))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'y'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CSymbol ("Prelude","[]")))))))))) (CSymbol ("Prelude","[]")))) (CVar (4,"i")))] []]),
  CFunc ("AbsCurryIO","transGRHS") 1 Private (CFuncType (CTCons ("Prelude","(,)") [CTCons ("AbstractCurry","CExpr") [],CTCons ("AbstractCurry","CExpr") []]) (CTCons ("Prelude","(,)") [CTCons ("AbsCurry","CExpr") [],CTCons ("AbsCurry","CExpr") []])) (CRules CFlex [CRule [CPComb ("Prelude","(,)") [CPVar (0,"guard"),CPVar (1,"rhs")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CSymbol ("AbsCurryIO","transExp")) (CVar (0,"guard")))) (CApply (CSymbol ("AbsCurryIO","transExp")) (CVar (1,"rhs"))))] []]),
  CFunc ("AbsCurryIO","transExp") 1 Private (CFuncType (CTCons ("AbstractCurry","CExpr") []) (CTCons ("AbsCurry","CExpr") [])) (CRules CFlex [CRule [CPComb ("AbstractCurry","CVar") [CPComb ("Prelude","(,)") [CPVar (0,"i"),CPVar (1,"_")]]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("AbsCurry","CVar")) (CVar (0,"i")))] [],CRule [CPComb ("AbstractCurry","CLit") [CPVar (2,"l")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("AbsCurry","CLit")) (CApply (CSymbol ("AbsCurryIO","transLit")) (CVar (2,"l"))))] [],CRule [CPComb ("AbstractCurry","CSymbol") [CPComb ("Prelude","(,)") [CPVar (3,"mod"),CPVar (4,"name")]]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("AbsCurry","CSymbol")) (CVar (3,"mod"))) (CVar (4,"name")))] [],CRule [CPComb ("AbstractCurry","CApply") [CPVar (5,"e1"),CPVar (6,"e2")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("AbsCurry","CApply")) (CApply (CSymbol ("AbsCurryIO","transExp")) (CVar (5,"e1")))) (CApply (CSymbol ("AbsCurryIO","transExp")) (CVar (6,"e2"))))] [],CRule [CPComb ("AbstractCurry","CLambda") [CPVar (7,"ps"),CPVar (8,"exp")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("AbsCurry","CLambda")) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("AbsCurryIO","transPattern"))) (CVar (7,"ps")))) (CApply (CSymbol ("AbsCurryIO","transExp")) (CVar (8,"exp"))))] [],CRule [CPComb ("AbstractCurry","CLetDecl") [CPVar (9,"locals"),CPVar (10,"exp")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("AbsCurry","CLetDecl")) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("AbsCurryIO","transLocal"))) (CVar (9,"locals")))) (CApply (CSymbol ("AbsCurryIO","transExp")) (CVar (10,"exp"))))] [],CRule [CPComb ("AbstractCurry","CDoExpr") [CPVar (11,"stats")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("AbsCurry","CDoExpr")) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("AbsCurryIO","transStat"))) (CVar (11,"stats"))))] [],CRule [CPComb ("AbstractCurry","CListComp") [CPVar (12,"exp"),CPVar (13,"stats")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("AbsCurry","CListComp")) (CApply (CSymbol ("AbsCurryIO","transExp")) (CVar (12,"exp")))) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("AbsCurryIO","transStat"))) (CVar (13,"stats"))))] [],CRule [CPComb ("AbstractCurry","CCase") [CPVar (14,"exp"),CPVar (15,"brs")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("AbsCurry","CCase")) (CApply (CSymbol ("AbsCurryIO","transExp")) (CVar (14,"exp")))) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("AbsCurryIO","tbr"))) (CVar (15,"brs"))))] [CLocalFunc (CFunc ("AbsCurryIO","tbr") 1 Private (CFuncType (CTCons ("AbstractCurry","CBranchExpr") []) (CTCons ("AbsCurry","CBranchExpr") [])) (CRules CFlex [CRule [CPComb ("AbstractCurry","CBranch") [CPVar (16,"p"),CPVar (17,"e")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("AbsCurry","CBranch")) (CApply (CSymbol ("AbsCurryIO","transPattern")) (CVar (16,"p")))) (CApply (CSymbol ("AbsCurryIO","transExp")) (CVar (17,"e"))))] []]))]]),
  CFunc ("AbsCurryIO","transStat") 1 Private (CFuncType (CTCons ("AbstractCurry","CStatement") []) (CTCons ("AbsCurry","CStatement") [])) (CRules CFlex [CRule [CPComb ("AbstractCurry","CSExpr") [CPVar (0,"exp")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("AbsCurry","CSExpr")) (CApply (CSymbol ("AbsCurryIO","transExp")) (CVar (0,"exp"))))] [],CRule [CPComb ("AbstractCurry","CSPat") [CPVar (1,"patt"),CPVar (2,"exp")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("AbsCurry","CSPat")) (CApply (CSymbol ("AbsCurryIO","transPattern")) (CVar (1,"patt")))) (CApply (CSymbol ("AbsCurryIO","transExp")) (CVar (2,"exp"))))] [],CRule [CPComb ("AbstractCurry","CSLet") [CPVar (3,"locals")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("AbsCurry","CSLet")) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("AbsCurryIO","transLocal"))) (CVar (3,"locals"))))] []]),
  CFunc ("AbsCurryIO","transPattern") 1 Private (CFuncType (CTCons ("AbstractCurry","CPattern") []) (CTCons ("AbsCurry","CPattern") [])) (CRules CFlex [CRule [CPVar (0,"pat")] [(CSymbol ("Prelude","success"),CCase (CVar (0,"pat")) [CBranch (CPComb ("AbstractCurry","CPVar") [CPComb ("Prelude","(,)") [CPVar (1,"i"),CPVar (2,"_")]]) (CApply (CSymbol ("AbsCurry","CPVar")) (CVar (1,"i"))),CBranch (CPComb ("AbstractCurry","CPLit") [CPVar (3,"lit")]) (CApply (CSymbol ("AbsCurry","CPLit")) (CApply (CSymbol ("AbsCurryIO","transLit")) (CVar (3,"lit")))),CBranch (CPComb ("AbstractCurry","CPComb") [CPComb ("Prelude","(,)") [CPVar (4,"mod"),CPVar (5,"name")],CPVar (6,"patts")]) (CApply (CApply (CApply (CSymbol ("AbsCurry","CPComb")) (CVar (4,"mod"))) (CVar (5,"name"))) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("AbsCurryIO","transPattern"))) (CVar (6,"patts")))),CBranch (CPVar (7,"_")) (CApply (CSymbol ("Prelude","error")) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'A'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'b'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'C'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'y'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'I'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'O'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '.'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'b'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '2'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'b'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'C'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'y'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ':'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'A'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'b'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'C'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'y'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ':'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CSymbol ("Prelude","[]"))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) (CApply (CSymbol ("Prelude","show")) (CVar (0,"pat")))))])] []]),
  CFunc ("AbsCurryIO","transLit") 1 Private (CFuncType (CTCons ("AbstractCurry","CLiteral") []) (CTCons ("AbsCurry","CLiteral") [])) (CRules CFlex [CRule [CPComb ("AbstractCurry","CIntc") [CPVar (0,"i")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("AbsCurry","CIntc")) (CVar (0,"i")))] [],CRule [CPComb ("AbstractCurry","CFloatc") [CPVar (1,"f")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("AbsCurry","CFloatc")) (CVar (1,"f")))] [],CRule [CPComb ("AbstractCurry","CCharc") [CPVar (2,"c")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("AbsCurry","CCharc")) (CVar (2,"c")))] []]),
  CFunc ("AbsCurryIO","transOpDecl") 1 Private (CFuncType (CTCons ("AbstractCurry","COpDecl") []) (CTCons ("AbsCurry","COpDecl") [])) (CRules CFlex [CRule [CPComb ("AbstractCurry","COp") [CPComb ("Prelude","(,)") [CPVar (0,"_"),CPVar (1,"name")],CPVar (2,"fix"),CPVar (3,"prec")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("AbsCurry","COp")) (CVar (1,"name"))) (CApply (CSymbol ("AbsCurryIO","transFix")) (CVar (2,"fix")))) (CVar (3,"prec")))] []]),
  CFunc ("AbsCurryIO","transFix") 1 Private (CFuncType (CTCons ("AbstractCurry","CFixity") []) (CTCons ("AbsCurry","CFixity") [])) (CRules CFlex [CRule [CPComb ("AbstractCurry","CInfixOp") []] [(CSymbol ("Prelude","success"),CSymbol ("AbsCurry","CInfixOp"))] [],CRule [CPComb ("AbstractCurry","CInfixlOp") []] [(CSymbol ("Prelude","success"),CSymbol ("AbsCurry","CInfixlOp"))] [],CRule [CPComb ("AbstractCurry","CInfixrOp") []] [(CSymbol ("Prelude","success"),CSymbol ("AbsCurry","CInfixrOp"))] []]),
  CFunc ("AbsCurryIO","readCurry") 1 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","IO") [CTCons ("AbsCurry","CProg") []])) (CRules CFlex [CRule [CPVar (0,"prog")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",">>=")) (CApply (CSymbol ("AbstractCurry","readCurry")) (CVar (0,"prog")))) (CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Prelude","return"))) (CSymbol ("AbsCurryIO","abstract2absCurry"))))] []]),
  CFunc ("AbsCurryIO","readUntypedCurry") 1 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","IO") [CTCons ("AbsCurry","CProg") []])) (CRules CFlex [CRule [CPVar (0,"prog")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",">>=")) (CApply (CSymbol ("AbstractCurry","readUntypedCurry")) (CVar (0,"prog")))) (CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Prelude","return"))) (CSymbol ("AbsCurryIO","abstract2absCurry"))))] []]),
  CFunc ("AbsCurryIO","readCurryWithParseOptions") 2 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("Distribution","FrontendParams") []) (CTCons ("Prelude","IO") [CTCons ("AbsCurry","CProg") []]))) (CRules CFlex [CRule [CPVar (0,"progname"),CPVar (1,"options")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",">>=")) (CApply (CApply (CSymbol ("AbstractCurry","readCurryWithParseOptions")) (CVar (0,"progname"))) (CVar (1,"options")))) (CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Prelude","return"))) (CSymbol ("AbsCurryIO","abstract2absCurry"))))] []]),
  CFunc ("AbsCurryIO","readUntypedCurryWithParseOptions") 2 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("Distribution","FrontendParams") []) (CTCons ("Prelude","IO") [CTCons ("AbsCurry","CProg") []]))) (CRules CFlex [CRule [CPVar (0,"progname"),CPVar (1,"options")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",">>=")) (CApply (CApply (CSymbol ("AbstractCurry","readUntypedCurryWithParseOptions")) (CVar (0,"progname"))) (CVar (1,"options")))) (CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Prelude","return"))) (CSymbol ("AbsCurryIO","abstract2absCurry"))))] []]),
  CFunc ("AbsCurryIO","readAbsCurryFile") 1 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","IO") [CTCons ("AbsCurry","CProg") []])) (CRules CFlex [CRule [CPVar (0,"filename")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",">>=")) (CApply (CSymbol ("AbstractCurry","readAbstractCurryFile")) (CVar (0,"filename")))) (CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Prelude","return"))) (CSymbol ("AbsCurryIO","abstract2absCurry"))))] []])]
 []
