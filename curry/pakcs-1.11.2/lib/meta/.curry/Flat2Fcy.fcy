Prog "Flat2Fcy" ["Flat","FlatCurry","Prelude","ReadShowTerm"] [] [Func ("Flat2Fcy","writeFCY") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Flat","Prog") []) (TCons ("Prelude","IO") [TCons ("Prelude","()") []]))) (Rule [1,2] (Comb FuncCall ("Prelude","writeFile") [Var 1,Comb FuncCall ("ReadShowTerm","showTerm") [Comb FuncCall ("Flat2Fcy","flc2fcy") [Var 2]]])),Func ("Flat2Fcy","flc2fcy") 1 Public (FuncType (TCons ("Flat","Prog") []) (TCons ("FlatCurry","Prog") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Flat","Prog") [2,3,4,5,6,7]) (Let [(8,Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Flat2Fcy","flc2fcy._#lambda1") [],Var 7])] (Comb ConsCall ("FlatCurry","Prog") [Var 2,Var 3,Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Flat2Fcy","flc2fcyType") [Var 8],Var 4],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Flat2Fcy","flc2fcyFunc") [Var 8],Var 5],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Flat2Fcy","flc2fcyOp") [],Var 6]]))])),Func ("Flat2Fcy","flc2fcy._#lambda1") 1 Private (FuncType (TCons ("Flat","Translation") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Flat","Trans") [2,3]) (Var 3)])),Func ("Flat2Fcy","flc2fcyVis") 2 Private (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TVar 0) (TCons ("FlatCurry","Visibility") []))) (Rule [1,2] (Case  Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","elem") [Var 2],Var 1]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("FlatCurry","Public") []),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("FlatCurry","Private") [])])),Func ("Flat2Fcy","flc2fcyOp") 1 Private (FuncType (TCons ("Flat","OpDecl") []) (TCons ("FlatCurry","OpDecl") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Flat","Op") [2,3,4]) (Comb ConsCall ("FlatCurry","Op") [Comb FuncCall ("Flat","splitFlatModName") [Var 2],Comb FuncCall ("Flat2Fcy","flc2fcyFixity") [Var 3],Var 4])])),Func ("Flat2Fcy","flc2fcyFixity") 1 Private (FuncType (TCons ("Flat","Fixity") []) (TCons ("FlatCurry","Fixity") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Flat","InfixOp") []) (Comb ConsCall ("FlatCurry","InfixOp") []),Branch (Pattern ("Flat","InfixlOp") []) (Comb ConsCall ("FlatCurry","InfixlOp") []),Branch (Pattern ("Flat","InfixrOp") []) (Comb ConsCall ("FlatCurry","InfixrOp") [])])),Func ("Flat2Fcy","flc2fcyType") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Flat","TypeDecl") []) (TCons ("FlatCurry","TypeDecl") []))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Flat","Type") [3,4,5]) (Comb ConsCall ("FlatCurry","Type") [Comb FuncCall ("Flat","splitFlatModName") [Var 3],Comb FuncCall ("Flat2Fcy","flc2fcyVis") [Var 1,Var 3],Var 4,Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Flat2Fcy","flc2fcyType.flc2fcyCons.19") [Var 1],Var 5]])])),Func ("Flat2Fcy","flc2fcyType.flc2fcyCons.19") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Flat","ConsDecl") []) (TCons ("FlatCurry","ConsDecl") []))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Flat","Cons") [3,4,5]) (Comb ConsCall ("FlatCurry","Cons") [Comb FuncCall ("Flat","splitFlatModName") [Var 3],Var 4,Comb FuncCall ("Flat2Fcy","flc2fcyVis") [Var 1,Var 3],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Flat2Fcy","flc2fcyTExp") [],Var 5]])])),Func ("Flat2Fcy","flc2fcyTExp") 1 Private (FuncType (TCons ("Flat","TypeExpr") []) (TCons ("FlatCurry","TypeExpr") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Flat","FuncType") [2,3]) (Comb ConsCall ("FlatCurry","FuncType") [Comb FuncCall ("Flat2Fcy","flc2fcyTExp") [Var 2],Comb FuncCall ("Flat2Fcy","flc2fcyTExp") [Var 3]]),Branch (Pattern ("Flat","TCons") [4,5]) (Comb ConsCall ("FlatCurry","TCons") [Comb FuncCall ("Flat","splitFlatModName") [Var 4],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Flat2Fcy","flc2fcyTExp") [],Var 5]]),Branch (Pattern ("Flat","TVar") [6]) (Comb ConsCall ("FlatCurry","TVar") [Var 6])])),Func ("Flat2Fcy","flc2fcyFunc") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Flat","FuncDecl") []) (TCons ("FlatCurry","FuncDecl") []))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Flat","Func") [3,4,5,6]) (Comb ConsCall ("FlatCurry","Func") [Comb FuncCall ("Flat","splitFlatModName") [Var 3],Var 4,Comb FuncCall ("Flat2Fcy","flc2fcyVis") [Var 1,Var 3],Comb FuncCall ("Flat2Fcy","flc2fcyTExp") [Var 5],Comb FuncCall ("Flat2Fcy","flc2fcyRule") [Var 6]])])),Func ("Flat2Fcy","flc2fcyRule") 1 Private (FuncType (TCons ("Flat","Rule") []) (TCons ("FlatCurry","Rule") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Flat","Rule") [2,3]) (Comb ConsCall ("FlatCurry","Rule") [Var 2,Comb FuncCall ("Flat2Fcy","flc2fcyExpr") [Var 3]]),Branch (Pattern ("Flat","External") [4]) (Comb ConsCall ("FlatCurry","External") [Var 4])])),Func ("Flat2Fcy","flc2fcyCombType") 1 Private (FuncType (TCons ("Flat","CombType") []) (TCons ("FlatCurry","CombType") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Flat","FuncCall") []) (Comb ConsCall ("FlatCurry","FuncCall") []),Branch (Pattern ("Flat","ConsCall") []) (Comb ConsCall ("FlatCurry","ConsCall") []),Branch (Pattern ("Flat","PartCall") []) (Comb ConsCall ("FlatCurry","FuncPartCall") [Lit (Intc  999)])])),Func ("Flat2Fcy","flc2fcyExpr") 1 Private (FuncType (TCons ("Flat","Expr") []) (TCons ("FlatCurry","Expr") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Flat","Var") [2]) (Comb ConsCall ("FlatCurry","Var") [Var 2]),Branch (Pattern ("Flat","Lit") [3]) (Comb ConsCall ("FlatCurry","Lit") [Comb FuncCall ("Flat2Fcy","flc2fcyLit") [Var 3]]),Branch (Pattern ("Flat","Comb") [4,5,6]) (Comb ConsCall ("FlatCurry","Comb") [Comb FuncCall ("Flat2Fcy","flc2fcyCombType") [Var 4],Comb FuncCall ("Flat","splitFlatModName") [Var 5],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Flat2Fcy","flc2fcyExpr") [],Var 6]]),Branch (Pattern ("Flat","Apply") [7,8]) (Comb ConsCall ("FlatCurry","Comb") [Comb ConsCall ("FlatCurry","FuncCall") [],Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude","[]") []]]]]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("Flat2Fcy","flc2fcyExpr") [Var 7],Comb ConsCall ("Prelude",":") [Comb FuncCall ("Flat2Fcy","flc2fcyExpr") [Var 8],Comb ConsCall ("Prelude","[]") []]]]),Branch (Pattern ("Flat","Constr") [9,10]) (Comb ConsCall ("FlatCurry","Free") [Var 9,Comb FuncCall ("Flat2Fcy","flc2fcyExpr") [Var 10]]),Branch (Pattern ("Flat","Or") [11,12]) (Comb ConsCall ("FlatCurry","Or") [Comb FuncCall ("Flat2Fcy","flc2fcyExpr") [Var 11],Comb FuncCall ("Flat2Fcy","flc2fcyExpr") [Var 12]]),Branch (Pattern ("Flat","Case") [13,14,15]) (Case  Flex (Var 13) [Branch (Pattern ("Flat","Rigid") []) (Comb ConsCall ("FlatCurry","Case") [Comb ConsCall ("FlatCurry","Rigid") [],Comb FuncCall ("Flat2Fcy","flc2fcyExpr") [Var 14],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Flat2Fcy","flc2fcyBranch") [],Var 15]]),Branch (Pattern ("Flat","Flex") []) (Comb ConsCall ("FlatCurry","Case") [Comb ConsCall ("FlatCurry","Flex") [],Comb FuncCall ("Flat2Fcy","flc2fcyExpr") [Var 14],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Flat2Fcy","flc2fcyBranch") [],Var 15]])]),Branch (Pattern ("Flat","GuardedExpr") [16,17,18]) (Comb ConsCall ("FlatCurry","Free") [Var 16,Comb ConsCall ("FlatCurry","Comb") [Comb ConsCall ("FlatCurry","FuncCall") [],Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude","[]") []]]]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("Flat2Fcy","flc2fcyExpr") [Var 17],Comb ConsCall ("Prelude",":") [Comb FuncCall ("Flat2Fcy","flc2fcyExpr") [Var 18],Comb ConsCall ("Prelude","[]") []]]]]),Branch (Pattern ("Flat","Let") [19,20]) (Comb ConsCall ("FlatCurry","Let") [Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Flat2Fcy","flc2fcyBinding") [],Var 19],Comb FuncCall ("Flat2Fcy","flc2fcyExpr") [Var 20]]),Branch (Pattern ("Flat","Choice") [21]) (Comb ConsCall ("FlatCurry","Comb") [Comb ConsCall ("FlatCurry","FuncCall") [],Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("Flat2Fcy","flc2fcyExpr") [Var 21],Comb ConsCall ("Prelude","[]") []]])])),Func ("Flat2Fcy","flc2fcyBinding") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Flat","Expr") []]) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","Expr") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Comb ConsCall ("Prelude","(,)") [Var 2,Comb FuncCall ("Flat2Fcy","flc2fcyExpr") [Var 3]])])),Func ("Flat2Fcy","flc2fcyLit") 1 Private (FuncType (TCons ("Flat","Literal") []) (TCons ("FlatCurry","Literal") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Flat","Intc") [2]) (Comb ConsCall ("FlatCurry","Intc") [Var 2]),Branch (Pattern ("Flat","Floatc") [3]) (Comb ConsCall ("FlatCurry","Floatc") [Var 3]),Branch (Pattern ("Flat","Charc") [4]) (Comb ConsCall ("FlatCurry","Charc") [Var 4])])),Func ("Flat2Fcy","flc2fcyBranch") 1 Private (FuncType (TCons ("Flat","BranchExpr") []) (TCons ("FlatCurry","BranchExpr") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Flat","Branch") [2,3]) (Case  Flex (Var 2) [Branch (Pattern ("Flat","Pattern") [4,5]) (Comb ConsCall ("FlatCurry","Branch") [Comb ConsCall ("FlatCurry","Pattern") [Comb FuncCall ("Flat","splitFlatModName") [Var 4],Var 5],Comb FuncCall ("Flat2Fcy","flc2fcyExpr") [Var 3]]),Branch (Pattern ("Flat","LPattern") [6]) (Comb ConsCall ("FlatCurry","Branch") [Comb ConsCall ("FlatCurry","LPattern") [Comb FuncCall ("Flat2Fcy","flc2fcyLit") [Var 6]],Comb FuncCall ("Flat2Fcy","flc2fcyExpr") [Var 3]])])]))] []