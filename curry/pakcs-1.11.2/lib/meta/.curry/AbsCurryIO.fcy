Prog "AbsCurryIO" ["AbsCurry","AbstractCurry","Distribution","Prelude"] [] [Func ("AbsCurryIO","abstract2absCurry") 1 Private (FuncType (TCons ("AbstractCurry","CurryProg") []) (TCons ("AbsCurry","CProg") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("AbstractCurry","CurryProg") [2,3,4,5,6]) (Comb ConsCall ("AbsCurry","CProg") [Var 2,Var 3,Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("AbsCurryIO","transTypeDecl") [],Var 4],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("AbsCurryIO","transFunc") [],Var 5],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("AbsCurryIO","transOpDecl") [],Var 6]])])),Func ("AbsCurryIO","transVis") 1 Private (FuncType (TCons ("AbstractCurry","CVisibility") []) (TCons ("AbsCurry","CVisibility") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("AbstractCurry","Public") []) (Comb ConsCall ("AbsCurry","CExported") []),Branch (Pattern ("AbstractCurry","Private") []) (Comb ConsCall ("AbsCurry","CPrivate") [])])),Func ("AbsCurryIO","transTypeDecl") 1 Private (FuncType (TCons ("AbstractCurry","CTypeDecl") []) (TCons ("AbsCurry","CTypeDecl") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("AbstractCurry","CType") [2,3,4,5]) (Case  Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [6,7]) (Comb ConsCall ("AbsCurry","CType") [Var 7,Comb FuncCall ("AbsCurryIO","transVis") [Var 3],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Prelude","fst") [],Var 4],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("AbsCurryIO","transConsDecl") [],Var 5]])]),Branch (Pattern ("AbstractCurry","CTypeSyn") [8,9,10,11]) (Case  Flex (Var 8) [Branch (Pattern ("Prelude","(,)") [12,13]) (Comb ConsCall ("AbsCurry","CTypeSyn") [Var 13,Comb FuncCall ("AbsCurryIO","transVis") [Var 9],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Prelude","fst") [],Var 10],Comb FuncCall ("AbsCurryIO","transTExp") [Var 11]])])])),Func ("AbsCurryIO","transConsDecl") 1 Private (FuncType (TCons ("AbstractCurry","CConsDecl") []) (TCons ("AbsCurry","CConsDecl") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("AbstractCurry","CCons") [2,3,4,5]) (Case  Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [6,7]) (Comb ConsCall ("AbsCurry","CCons") [Var 7,Var 3,Comb FuncCall ("AbsCurryIO","transVis") [Var 4],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("AbsCurryIO","transTExp") [],Var 5]])])])),Func ("AbsCurryIO","transTExp") 1 Private (FuncType (TCons ("AbstractCurry","CTypeExpr") []) (TCons ("AbsCurry","CTypeExpr") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("AbstractCurry","CTVar") [2]) (Case  Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb ConsCall ("AbsCurry","CTVar") [Var 3])]),Branch (Pattern ("AbstractCurry","CFuncType") [5,6]) (Comb ConsCall ("AbsCurry","CFuncType") [Comb FuncCall ("AbsCurryIO","transTExp") [Var 5],Comb FuncCall ("AbsCurryIO","transTExp") [Var 6]]),Branch (Pattern ("AbstractCurry","CTCons") [7,8]) (Case  Flex (Var 7) [Branch (Pattern ("Prelude","(,)") [9,10]) (Comb ConsCall ("AbsCurry","CTCons") [Var 9,Var 10,Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("AbsCurryIO","transTExp") [],Var 8]])])])),Func ("AbsCurryIO","transFunc") 1 Private (FuncType (TCons ("AbstractCurry","CFuncDecl") []) (TCons ("AbsCurry","CFuncDecl") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("AbstractCurry","CFunc") [2,3,4,5,6]) (Case  Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [7,8]) (Comb ConsCall ("AbsCurry","CFunc") [Var 8,Var 3,Comb FuncCall ("AbsCurryIO","transVis") [Var 4],Comb FuncCall ("AbsCurryIO","transTExp") [Var 5],Comb FuncCall ("AbsCurryIO","transRules") [Var 6]])])])),Func ("AbsCurryIO","transRules") 1 Private (FuncType (TCons ("AbstractCurry","CRules") []) (TCons ("AbsCurry","CRules") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("AbstractCurry","CRules") [2,3]) (Comb ConsCall ("AbsCurry","CRules") [Comb FuncCall ("AbsCurryIO","transEval") [Var 2],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("AbsCurryIO","transRule") [],Var 3]]),Branch (Pattern ("AbstractCurry","CExternal") [4]) (Comb ConsCall ("AbsCurry","CExternal") [Var 4])])),Func ("AbsCurryIO","transEval") 1 Private (FuncType (TCons ("AbstractCurry","CEvalAnnot") []) (TCons ("AbsCurry","CEvalAnnot") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("AbstractCurry","CFlex") []) (Comb ConsCall ("AbsCurry","CFlex") []),Branch (Pattern ("AbstractCurry","CRigid") []) (Comb ConsCall ("AbsCurry","CRigid") []),Branch (Pattern ("AbstractCurry","CChoice") []) (Comb ConsCall ("AbsCurry","CChoice") [])])),Func ("AbsCurryIO","transRule") 1 Private (FuncType (TCons ("AbstractCurry","CRule") []) (TCons ("AbsCurry","CRule") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("AbstractCurry","CRule") [2,3,4]) (Comb ConsCall ("AbsCurry","CRule") [Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("AbsCurryIO","transPattern") [],Var 2],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("AbsCurryIO","transGRHS") [],Var 3],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("AbsCurryIO","transLocal") [],Var 4]])])),Func ("AbsCurryIO","transLocal") 1 Private (FuncType (TCons ("AbstractCurry","CLocalDecl") []) (TCons ("AbsCurry","CLocalDecl") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("AbstractCurry","CLocalFunc") [2]) (Comb ConsCall ("AbsCurry","CLocalFunc") [Comb FuncCall ("AbsCurryIO","transFunc") [Var 2]]),Branch (Pattern ("AbstractCurry","CLocalPat") [3,4,5]) (Comb ConsCall ("AbsCurry","CLocalPat") [Comb ConsCall ("AbsCurry","CTCons") [Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("AbsCurryIO","transPattern") [Var 3],Comb FuncCall ("AbsCurryIO","transExp") [Var 4],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("AbsCurryIO","transLocal") [],Var 5]]),Branch (Pattern ("AbstractCurry","CLocalVar") [6]) (Case  Flex (Var 6) [Branch (Pattern ("Prelude","(,)") [7,8]) (Comb ConsCall ("AbsCurry","CLocalVar") [Comb ConsCall ("AbsCurry","CTCons") [Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb ConsCall ("Prelude","[]") []],Var 7])])])),Func ("AbsCurryIO","transGRHS") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("AbstractCurry","CExpr") [],TCons ("AbstractCurry","CExpr") []]) (TCons ("Prelude","(,)") [TCons ("AbsCurry","CExpr") [],TCons ("AbsCurry","CExpr") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("AbsCurryIO","transExp") [Var 2],Comb FuncCall ("AbsCurryIO","transExp") [Var 3]])])),Func ("AbsCurryIO","transExp") 1 Private (FuncType (TCons ("AbstractCurry","CExpr") []) (TCons ("AbsCurry","CExpr") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("AbstractCurry","CVar") [2]) (Case  Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb ConsCall ("AbsCurry","CVar") [Var 3])]),Branch (Pattern ("AbstractCurry","CLit") [5]) (Comb ConsCall ("AbsCurry","CLit") [Comb FuncCall ("AbsCurryIO","transLit") [Var 5]]),Branch (Pattern ("AbstractCurry","CSymbol") [6]) (Case  Flex (Var 6) [Branch (Pattern ("Prelude","(,)") [7,8]) (Comb ConsCall ("AbsCurry","CSymbol") [Var 7,Var 8])]),Branch (Pattern ("AbstractCurry","CApply") [9,10]) (Comb ConsCall ("AbsCurry","CApply") [Comb FuncCall ("AbsCurryIO","transExp") [Var 9],Comb FuncCall ("AbsCurryIO","transExp") [Var 10]]),Branch (Pattern ("AbstractCurry","CLambda") [11,12]) (Comb ConsCall ("AbsCurry","CLambda") [Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("AbsCurryIO","transPattern") [],Var 11],Comb FuncCall ("AbsCurryIO","transExp") [Var 12]]),Branch (Pattern ("AbstractCurry","CLetDecl") [13,14]) (Comb ConsCall ("AbsCurry","CLetDecl") [Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("AbsCurryIO","transLocal") [],Var 13],Comb FuncCall ("AbsCurryIO","transExp") [Var 14]]),Branch (Pattern ("AbstractCurry","CDoExpr") [15]) (Comb ConsCall ("AbsCurry","CDoExpr") [Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("AbsCurryIO","transStat") [],Var 15]]),Branch (Pattern ("AbstractCurry","CListComp") [16,17]) (Comb ConsCall ("AbsCurry","CListComp") [Comb FuncCall ("AbsCurryIO","transExp") [Var 16],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("AbsCurryIO","transStat") [],Var 17]]),Branch (Pattern ("AbstractCurry","CCase") [18,19]) (Comb ConsCall ("AbsCurry","CCase") [Comb FuncCall ("AbsCurryIO","transExp") [Var 18],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("AbsCurryIO","transExp.tbr.65") [],Var 19]])])),Func ("AbsCurryIO","transExp.tbr.65") 1 Private (FuncType (TCons ("AbstractCurry","CBranchExpr") []) (TCons ("AbsCurry","CBranchExpr") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("AbstractCurry","CBranch") [2,3]) (Comb ConsCall ("AbsCurry","CBranch") [Comb FuncCall ("AbsCurryIO","transPattern") [Var 2],Comb FuncCall ("AbsCurryIO","transExp") [Var 3]])])),Func ("AbsCurryIO","transStat") 1 Private (FuncType (TCons ("AbstractCurry","CStatement") []) (TCons ("AbsCurry","CStatement") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("AbstractCurry","CSExpr") [2]) (Comb ConsCall ("AbsCurry","CSExpr") [Comb FuncCall ("AbsCurryIO","transExp") [Var 2]]),Branch (Pattern ("AbstractCurry","CSPat") [3,4]) (Comb ConsCall ("AbsCurry","CSPat") [Comb FuncCall ("AbsCurryIO","transPattern") [Var 3],Comb FuncCall ("AbsCurryIO","transExp") [Var 4]]),Branch (Pattern ("AbstractCurry","CSLet") [5]) (Comb ConsCall ("AbsCurry","CSLet") [Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("AbsCurryIO","transLocal") [],Var 5]])])),Func ("AbsCurryIO","transPattern") 1 Private (FuncType (TCons ("AbstractCurry","CPattern") []) (TCons ("AbsCurry","CPattern") [])) (Rule [1] (Case  Rigid (Var 1) [Branch (Pattern ("AbstractCurry","CPVar") [2]) (Case  Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb ConsCall ("AbsCurry","CPVar") [Var 3])]),Branch (Pattern ("AbstractCurry","CPLit") [5]) (Comb ConsCall ("AbsCurry","CPLit") [Comb FuncCall ("AbsCurryIO","transLit") [Var 5]]),Branch (Pattern ("AbstractCurry","CPComb") [6,7]) (Case  Rigid (Var 6) [Branch (Pattern ("Prelude","(,)") [8,9]) (Comb ConsCall ("AbsCurry","CPComb") [Var 8,Var 9,Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("AbsCurryIO","transPattern") [],Var 7]])]),Branch (Pattern ("AbstractCurry","CPAs") [10,11]) (Comb FuncCall ("Prelude","error") [Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'A'),Comb ConsCall ("Prelude",":") [Lit (Charc  'b'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  'I'),Comb ConsCall ("Prelude",":") [Lit (Charc  'O'),Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'b'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  '2'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'b'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'A'),Comb ConsCall ("Prelude",":") [Lit (Charc  'b'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],Comb FuncCall ("Prelude","show") [Var 1]]]),Branch (Pattern ("AbstractCurry","CPFuncComb") [12,13]) (Comb FuncCall ("Prelude","error") [Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'A'),Comb ConsCall ("Prelude",":") [Lit (Charc  'b'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  'I'),Comb ConsCall ("Prelude",":") [Lit (Charc  'O'),Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'b'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  '2'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'b'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'A'),Comb ConsCall ("Prelude",":") [Lit (Charc  'b'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],Comb FuncCall ("Prelude","show") [Var 1]]])])),Func ("AbsCurryIO","transLit") 1 Private (FuncType (TCons ("AbstractCurry","CLiteral") []) (TCons ("AbsCurry","CLiteral") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("AbstractCurry","CIntc") [2]) (Comb ConsCall ("AbsCurry","CIntc") [Var 2]),Branch (Pattern ("AbstractCurry","CFloatc") [3]) (Comb ConsCall ("AbsCurry","CFloatc") [Var 3]),Branch (Pattern ("AbstractCurry","CCharc") [4]) (Comb ConsCall ("AbsCurry","CCharc") [Var 4])])),Func ("AbsCurryIO","transOpDecl") 1 Private (FuncType (TCons ("AbstractCurry","COpDecl") []) (TCons ("AbsCurry","COpDecl") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("AbstractCurry","COp") [2,3,4]) (Case  Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [5,6]) (Comb ConsCall ("AbsCurry","COp") [Var 6,Comb FuncCall ("AbsCurryIO","transFix") [Var 3],Var 4])])])),Func ("AbsCurryIO","transFix") 1 Private (FuncType (TCons ("AbstractCurry","CFixity") []) (TCons ("AbsCurry","CFixity") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("AbstractCurry","CInfixOp") []) (Comb ConsCall ("AbsCurry","CInfixOp") []),Branch (Pattern ("AbstractCurry","CInfixlOp") []) (Comb ConsCall ("AbsCurry","CInfixlOp") []),Branch (Pattern ("AbstractCurry","CInfixrOp") []) (Comb ConsCall ("AbsCurry","CInfixrOp") [])])),Func ("AbsCurryIO","readCurry") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("AbsCurry","CProg") []])) (Rule [1] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("AbstractCurry","readCurry") [Var 1],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","return") [],Comb (FuncPartCall 1) ("AbsCurryIO","abstract2absCurry") []]])),Func ("AbsCurryIO","readUntypedCurry") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("AbsCurry","CProg") []])) (Rule [1] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("AbstractCurry","readUntypedCurry") [Var 1],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","return") [],Comb (FuncPartCall 1) ("AbsCurryIO","abstract2absCurry") []]])),Func ("AbsCurryIO","readCurryWithParseOptions") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Distribution","FrontendParams") []) (TCons ("Prelude","IO") [TCons ("AbsCurry","CProg") []]))) (Rule [1,2] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("AbstractCurry","readCurryWithParseOptions") [Var 1,Var 2],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","return") [],Comb (FuncPartCall 1) ("AbsCurryIO","abstract2absCurry") []]])),Func ("AbsCurryIO","readUntypedCurryWithParseOptions") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Distribution","FrontendParams") []) (TCons ("Prelude","IO") [TCons ("AbsCurry","CProg") []]))) (Rule [1,2] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("AbstractCurry","readUntypedCurryWithParseOptions") [Var 1,Var 2],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","return") [],Comb (FuncPartCall 1) ("AbsCurryIO","abstract2absCurry") []]])),Func ("AbsCurryIO","readAbsCurryFile") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("AbsCurry","CProg") []])) (Rule [1] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("AbstractCurry","readAbstractCurryFile") [Var 1],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","return") [],Comb (FuncPartCall 1) ("AbsCurryIO","abstract2absCurry") []]]))] []