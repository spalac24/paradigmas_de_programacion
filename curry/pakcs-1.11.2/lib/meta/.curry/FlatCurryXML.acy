CurryProg "FlatCurryXML"
 ["Prelude","XML","XmlConv","FlatCurry"]
 []
 [CFunc ("FlatCurryXML","flatCurryDtd") 0 Private (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'h'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ':'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '/'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '/'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'w'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'w'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'w'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '.'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'f'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'k'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '.'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '-'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'k'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '.'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '/'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '~'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'y'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '/'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'f'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'y'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'w'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '.'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CSymbol ("Prelude","[]")))))))))))))))))))))))))))))))))))))))))))))))))))))))))))] []]),
  CFunc ("FlatCurryXML","flatCurry2XmlFile") 2 Public (CFuncType (CTCons ("FlatCurry","Prog") []) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","IO") [CTCons ("Prelude","()") []]))) (CRules CFlex [CRule [CPVar (0,"flatprog"),CPVar (1,"filename")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","$")) (CApply (CSymbol ("Prelude","writeFile")) (CVar (1,"filename")))) (CApply (CApply (CSymbol ("XML","showXmlDocWithParams")) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("XML","DtdUrl")) (CSymbol ("FlatCurryXML","flatCurryDtd")))) (CSymbol ("Prelude","[]")))) (CApply (CSymbol ("FlatCurryXML","flatCurry2Xml")) (CVar (0,"flatprog")))))] []]),
  CFunc ("FlatCurryXML","flatCurry2Xml") 0 Public (CFuncType (CTCons ("FlatCurry","Prog") []) (CTCons ("XML","XmlExp") [])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("XmlConv","xmlShow")) (CSymbol ("FlatCurryXML","cProg")))] []]),
  CFunc ("FlatCurryXML","xmlFile2FlatCurry") 1 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","IO") [CTCons ("FlatCurry","Prog") []])) (CRules CFlex [CRule [CPVar (0,"filename")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",">>=")) (CApply (CSymbol ("XML","readXmlFile")) (CVar (0,"filename")))) (CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Prelude","return"))) (CSymbol ("FlatCurryXML","xml2FlatCurry"))))] []]),
  CFunc ("FlatCurryXML","xml2FlatCurry") 0 Public (CFuncType (CTCons ("XML","XmlExp") []) (CTCons ("FlatCurry","Prog") [])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("XmlConv","xmlRead")) (CSymbol ("FlatCurryXML","cProg")))] []]),
  CFunc ("FlatCurryXML","cProg") 0 Private (CTCons ("XmlConv","XmlConv") [CTCons ("XmlConv","Repeatable") [],CTCons ("XmlConv","Elem") [],CTCons ("FlatCurry","Prog") []]) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CApply (CApply (CApply (CSymbol ("XmlConv","eSeq5")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'g'))) (CSymbol ("Prelude","[]"))))))) (CSymbol ("FlatCurry","Prog"))) (CSymbol ("FlatCurryXML","cModname"))) (CSymbol ("FlatCurryXML","cImports"))) (CSymbol ("FlatCurryXML","cTypes"))) (CSymbol ("FlatCurryXML","cFuncs"))) (CSymbol ("FlatCurryXML","cOps")))] []]),
  CFunc ("FlatCurryXML","cModname") 0 Private (CTCons ("XmlConv","XmlConv") [CTCons ("XmlConv","Repeatable") [],CTCons ("XmlConv","Elem") [],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("XmlConv","eString")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]")))))))))] []]),
  CFunc ("FlatCurryXML","cImports") 0 Private (CTCons ("XmlConv","XmlConv") [CTCons ("XmlConv","Repeatable") [],CTCons ("XmlConv","Elem") [],CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]]) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("XmlConv","eRep")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CSymbol ("Prelude","[]"))))))))) (CApply (CSymbol ("XmlConv","eString")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]"))))))))))] []]),
  CFunc ("FlatCurryXML","cTypes") 0 Private (CTCons ("XmlConv","XmlConv") [CTCons ("XmlConv","Repeatable") [],CTCons ("XmlConv","Elem") [],CTCons ("Prelude","[]") [CTCons ("FlatCurry","TypeDecl") []]]) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("XmlConv","eRep")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'y'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CSymbol ("Prelude","[]")))))))) (CSymbol ("FlatCurryXML","cType")))] []]),
  CFunc ("FlatCurryXML","cType") 0 Private (CTCons ("XmlConv","XmlConv") [CTCons ("XmlConv","Repeatable") [],CTCons ("XmlConv","Elem") [],CTCons ("FlatCurry","TypeDecl") []]) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("XmlConv","!")) (CApply (CApply (CApply (CApply (CApply (CApply (CSymbol ("XmlConv","eSeq4")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'y'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]"))))))) (CSymbol ("FlatCurry","Type"))) (CSymbol ("FlatCurryXML","cQName"))) (CSymbol ("FlatCurryXML","cVis"))) (CSymbol ("FlatCurryXML","cTParams"))) (CApply (CSymbol ("XmlConv","rep")) (CSymbol ("FlatCurryXML","cConsDecl"))))) (CApply (CApply (CApply (CApply (CApply (CApply (CSymbol ("XmlConv","eSeq4")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'y'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'y'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CSymbol ("Prelude","[]")))))))))) (CSymbol ("FlatCurry","TypeSyn"))) (CSymbol ("FlatCurryXML","cQName"))) (CSymbol ("FlatCurryXML","cVis"))) (CSymbol ("FlatCurryXML","cTParams"))) (CSymbol ("FlatCurryXML","cTypeExpr"))))] []]),
  CFunc ("FlatCurryXML","cQName") 0 Private (CTCons ("XmlConv","XmlConv") [CTCons ("XmlConv","NotRepeatable") [],CTCons ("XmlConv","NoElem") [],CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]]) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("XmlConv","seq2")) (CLambda [CPVar (0,"a"),CPVar (1,"b")] (CApply (CApply (CSymbol ("Prelude","(,)")) (CVar (0,"a"))) (CVar (1,"b"))))) (CApply (CSymbol ("XmlConv","aString")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]")))))))))) (CApply (CSymbol ("XmlConv","aString")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]"))))))))] []]),
  CFunc ("FlatCurryXML","cVis") 0 Private (CTCons ("XmlConv","XmlConv") [CTCons ("XmlConv","NotRepeatable") [],CTCons ("XmlConv","NoElem") [],CTCons ("FlatCurry","Visibility") []]) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("XmlConv","adapt")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CSymbol ("FlatCurryXML","b2v"))) (CSymbol ("FlatCurryXML","v2b")))) (CApply (CApply (CApply (CSymbol ("XmlConv","aBool")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'v'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'b'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'y'))) (CSymbol ("Prelude","[]"))))))))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'b'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CSymbol ("Prelude","[]"))))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'v'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]")))))))))))] []]),
  CFunc ("FlatCurryXML","b2v") 1 Private (CFuncType (CTCons ("Prelude","Bool") []) (CTCons ("FlatCurry","Visibility") [])) (CRules CFlex [CRule [CPVar (0,"b")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CVar (0,"b"))) (CSymbol ("FlatCurry","Public"))) (CSymbol ("FlatCurry","Private")))] []]),
  CFunc ("FlatCurryXML","v2b") 1 Private (CFuncType (CTCons ("FlatCurry","Visibility") []) (CTCons ("Prelude","Bool") [])) (CRules CFlex [CRule [CPVar (0,"v")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","==")) (CVar (0,"v"))) (CSymbol ("FlatCurry","Public")))] []]),
  CFunc ("FlatCurryXML","cTParams") 0 Private (CTCons ("XmlConv","XmlConv") [CTCons ("XmlConv","Repeatable") [],CTCons ("XmlConv","Elem") [],CTCons ("Prelude","[]") [CTCons ("Prelude","Int") []]]) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("XmlConv","eRep")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CSymbol ("Prelude","[]"))))))))) (CApply (CSymbol ("XmlConv","eInt")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'v'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CSymbol ("Prelude","[]"))))))))] []]),
  CFunc ("FlatCurryXML","cConsDecl") 0 Private (CTCons ("XmlConv","XmlConv") [CTCons ("XmlConv","Repeatable") [],CTCons ("XmlConv","Elem") [],CTCons ("FlatCurry","ConsDecl") []]) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CApply (CApply (CSymbol ("XmlConv","eSeq4")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CSymbol ("Prelude","[]"))))))) (CSymbol ("FlatCurry","Cons"))) (CSymbol ("FlatCurryXML","cQName"))) (CSymbol ("FlatCurryXML","cArity"))) (CSymbol ("FlatCurryXML","cVis"))) (CApply (CSymbol ("XmlConv","rep")) (CSymbol ("FlatCurryXML","cTypeExpr"))))] []]),
  CFunc ("FlatCurryXML","cArity") 0 Private (CTCons ("XmlConv","XmlConv") [CTCons ("XmlConv","NotRepeatable") [],CTCons ("XmlConv","NoElem") [],CTCons ("Prelude","Int") []]) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("XmlConv","aInt")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'y'))) (CSymbol ("Prelude","[]"))))))))] []]),
  CFunc ("FlatCurryXML","cTypeExpr") 0 Private (CTCons ("XmlConv","XmlConv") [CTCons ("XmlConv","Repeatable") [],CTCons ("XmlConv","Elem") [],CTCons ("FlatCurry","TypeExpr") []]) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("XmlConv","!")) (CApply (CApply (CApply (CApply (CSymbol ("XmlConv","eSeq2")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'f'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'y'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]"))))))))))) (CSymbol ("FlatCurry","FuncType"))) (CSymbol ("FlatCurryXML","cTypeExpr"))) (CSymbol ("FlatCurryXML","cTypeExpr")))) (CApply (CApply (CSymbol ("XmlConv","!")) (CApply (CApply (CApply (CApply (CSymbol ("XmlConv","eSeq2")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CSymbol ("Prelude","[]")))))))) (CSymbol ("FlatCurry","TCons"))) (CSymbol ("FlatCurryXML","cQName"))) (CApply (CSymbol ("XmlConv","rep")) (CSymbol ("FlatCurryXML","cTypeExpr"))))) (CApply (CApply (CApply (CSymbol ("XmlConv","eSeq1")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'v'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CSymbol ("Prelude","[]"))))))) (CSymbol ("FlatCurry","TVar"))) (CSymbol ("XmlConv","int")))))] []]),
  CFunc ("FlatCurryXML","cFuncs") 0 Private (CTCons ("XmlConv","XmlConv") [CTCons ("XmlConv","Repeatable") [],CTCons ("XmlConv","Elem") [],CTCons ("Prelude","[]") [CTCons ("FlatCurry","FuncDecl") []]]) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("XmlConv","eRep")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'f'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CSymbol ("Prelude","[]")))))))))))) (CSymbol ("FlatCurryXML","cFunc")))] []]),
  CFunc ("FlatCurryXML","cFunc") 0 Private (CTCons ("XmlConv","XmlConv") [CTCons ("XmlConv","Repeatable") [],CTCons ("XmlConv","Elem") [],CTCons ("FlatCurry","FuncDecl") []]) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CApply (CApply (CApply (CSymbol ("XmlConv","eSeq5")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'f'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CSymbol ("Prelude","[]"))))))) (CSymbol ("FlatCurry","Func"))) (CSymbol ("FlatCurryXML","cQName"))) (CSymbol ("FlatCurryXML","cArity"))) (CSymbol ("FlatCurryXML","cVis"))) (CSymbol ("FlatCurryXML","cTypeExpr"))) (CSymbol ("FlatCurryXML","cRule")))] []]),
  CFunc ("FlatCurryXML","cRule") 0 Private (CTCons ("XmlConv","XmlConv") [CTCons ("XmlConv","Repeatable") [],CTCons ("XmlConv","Elem") [],CTCons ("FlatCurry","Rule") []]) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("XmlConv","!")) (CApply (CApply (CApply (CApply (CSymbol ("XmlConv","eSeq2")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]"))))))) (CSymbol ("FlatCurry","Rule"))) (CSymbol ("FlatCurryXML","cLHS"))) (CSymbol ("FlatCurryXML","cRHS")))) (CApply (CApply (CApply (CSymbol ("XmlConv","eSeq1")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'x'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CSymbol ("Prelude","[]"))))))))))) (CSymbol ("FlatCurry","External"))) (CSymbol ("XmlConv","string"))))] []]),
  CFunc ("FlatCurryXML","cLHS") 0 Private (CTCons ("XmlConv","XmlConv") [CTCons ("XmlConv","Repeatable") [],CTCons ("XmlConv","Elem") [],CTCons ("Prelude","[]") [CTCons ("Prelude","Int") []]]) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("XmlConv","element")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'h'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CSymbol ("Prelude","[]")))))) (CSymbol ("FlatCurryXML","cVars")))] []]),
  CFunc ("FlatCurryXML","cRHS") 0 Private (CTCons ("XmlConv","XmlConv") [CTCons ("XmlConv","Repeatable") [],CTCons ("XmlConv","Elem") [],CTCons ("FlatCurry","Expr") []]) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("XmlConv","element")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'h'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CSymbol ("Prelude","[]")))))) (CSymbol ("FlatCurryXML","cExpr")))] []]),
  CFunc ("FlatCurryXML","cVars") 0 Private (CTCons ("XmlConv","XmlConv") [CTCons ("XmlConv","NotRepeatable") [],CTCons ("XmlConv","NoElem") [],CTCons ("Prelude","[]") [CTCons ("Prelude","Int") []]]) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("XmlConv","rep")) (CSymbol ("FlatCurryXML","cVar")))] []]),
  CFunc ("FlatCurryXML","cVar") 0 Private (CTCons ("XmlConv","XmlConv") [CTCons ("XmlConv","Repeatable") [],CTCons ("XmlConv","Elem") [],CTCons ("Prelude","Int") []]) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("XmlConv","eInt")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'v'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CSymbol ("Prelude","[]"))))))] []]),
  CFunc ("FlatCurryXML","cExpr") 0 Private (CTCons ("XmlConv","XmlConv") [CTCons ("XmlConv","Repeatable") [],CTCons ("XmlConv","Elem") [],CTCons ("FlatCurry","Expr") []]) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("XmlConv","!")) (CApply (CApply (CApply (CSymbol ("XmlConv","eSeq1")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'v'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CSymbol ("Prelude","[]")))))) (CSymbol ("FlatCurry","Var"))) (CSymbol ("XmlConv","int")))) (CApply (CApply (CSymbol ("XmlConv","!")) (CApply (CApply (CApply (CSymbol ("XmlConv","eSeq1")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CSymbol ("Prelude","[]")))))) (CSymbol ("FlatCurry","Lit"))) (CSymbol ("FlatCurryXML","cLit")))) (CApply (CApply (CSymbol ("XmlConv","!")) (CApply (CApply (CApply (CApply (CSymbol ("XmlConv","eSeq2")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'f'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CSymbol ("Prelude","[]"))))))))))) (CSymbol ("FlatCurryXML","fc"))) (CSymbol ("FlatCurryXML","cQName"))) (CSymbol ("FlatCurryXML","cExps")))) (CApply (CApply (CSymbol ("XmlConv","!")) (CApply (CApply (CApply (CApply (CSymbol ("XmlConv","eSeq2")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CSymbol ("Prelude","[]"))))))))))) (CSymbol ("FlatCurryXML","cc"))) (CSymbol ("FlatCurryXML","cQName"))) (CSymbol ("FlatCurryXML","cExps")))) (CApply (CApply (CSymbol ("XmlConv","!")) (CApply (CApply (CApply (CApply (CApply (CSymbol ("XmlConv","eSeq3")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'f'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CSymbol ("Prelude","[]"))))))))))))))) (CSymbol ("FlatCurryXML","pfc"))) (CSymbol ("FlatCurryXML","cQName"))) (CSymbol ("FlatCurryXML","cMissing"))) (CSymbol ("FlatCurryXML","cExps")))) (CApply (CApply (CSymbol ("XmlConv","!")) (CApply (CApply (CApply (CApply (CApply (CSymbol ("XmlConv","eSeq3")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CSymbol ("Prelude","[]"))))))))))))))) (CSymbol ("FlatCurryXML","pcc"))) (CSymbol ("FlatCurryXML","cQName"))) (CSymbol ("FlatCurryXML","cMissing"))) (CSymbol ("FlatCurryXML","cExps")))) (CApply (CApply (CSymbol ("XmlConv","!")) (CApply (CApply (CApply (CApply (CSymbol ("XmlConv","eSeq2")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'f'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]"))))))) (CSymbol ("FlatCurry","Free"))) (CApply (CApply (CSymbol ("XmlConv","element")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'f'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'v'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CSymbol ("Prelude","[]"))))))))))) (CSymbol ("FlatCurryXML","cVars")))) (CSymbol ("FlatCurryXML","cExpr")))) (CApply (CApply (CSymbol ("XmlConv","!")) (CApply (CApply (CApply (CApply (CSymbol ("XmlConv","eSeq2")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CSymbol ("Prelude","[]"))))) (CSymbol ("FlatCurry","Or"))) (CSymbol ("FlatCurryXML","cExpr"))) (CSymbol ("FlatCurryXML","cExpr")))) (CApply (CApply (CSymbol ("XmlConv","!")) (CApply (CApply (CApply (CApply (CSymbol ("XmlConv","eSeq2")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]"))))))) (CSymbol ("FlatCurryXML","cr"))) (CSymbol ("FlatCurryXML","cExpr"))) (CApply (CSymbol ("XmlConv","rep")) (CSymbol ("FlatCurryXML","cBranch"))))) (CApply (CApply (CSymbol ("XmlConv","!")) (CApply (CApply (CApply (CApply (CSymbol ("XmlConv","eSeq2")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'f'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]")))))))) (CSymbol ("FlatCurryXML","cf"))) (CSymbol ("FlatCurryXML","cExpr"))) (CApply (CSymbol ("XmlConv","rep")) (CSymbol ("FlatCurryXML","cBranch"))))) (CApply (CApply (CSymbol ("XmlConv","!")) (CApply (CApply (CApply (CApply (CSymbol ("XmlConv","eSeq2")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CSymbol ("Prelude","[]"))))))))) (CSymbol ("FlatCurry","Let"))) (CApply (CSymbol ("XmlConv","rep")) (CSymbol ("FlatCurryXML","cBind")))) (CSymbol ("FlatCurryXML","cExpr")))) (CApply (CApply (CApply (CApply (CSymbol ("XmlConv","eSeq2")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'y'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CSymbol ("Prelude","[]")))))))) (CSymbol ("FlatCurry","Typed"))) (CSymbol ("FlatCurryXML","cExpr"))) (CSymbol ("FlatCurryXML","cTypeExpr"))))))))))))))] []]),
  CFunc ("FlatCurryXML","cLit") 0 Private (CTCons ("XmlConv","XmlConv") [CTCons ("XmlConv","Repeatable") [],CTCons ("XmlConv","Elem") [],CTCons ("FlatCurry","Literal") []]) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("XmlConv","!")) (CApply (CApply (CApply (CSymbol ("XmlConv","eSeq1")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CSymbol ("Prelude","[]"))))))) (CSymbol ("FlatCurry","Intc"))) (CSymbol ("XmlConv","int")))) (CApply (CApply (CSymbol ("XmlConv","!")) (CApply (CApply (CApply (CSymbol ("XmlConv","eSeq1")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'f'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CSymbol ("Prelude","[]"))))))))) (CSymbol ("FlatCurry","Floatc"))) (CSymbol ("XmlConv","float")))) (CApply (CApply (CApply (CSymbol ("XmlConv","eSeq1")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'h'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CSymbol ("Prelude","[]")))))))) (CSymbol ("FlatCurry","Charc"))) (CApply (CApply (CSymbol ("XmlConv","adapt")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CSymbol ("Prelude","chr"))) (CSymbol ("Prelude","ord")))) (CSymbol ("XmlConv","int"))))))] []]),
  CFunc ("FlatCurryXML","fc") 0 Private (CFuncType (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("FlatCurry","Expr") []]) (CTCons ("FlatCurry","Expr") []))) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("FlatCurry","Comb")) (CSymbol ("FlatCurry","FuncCall")))] []]),
  CFunc ("FlatCurryXML","cc") 0 Private (CFuncType (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("FlatCurry","Expr") []]) (CTCons ("FlatCurry","Expr") []))) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("FlatCurry","Comb")) (CSymbol ("FlatCurry","ConsCall")))] []]),
  CFunc ("FlatCurryXML","pfc") 2 Private (CFuncType (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]) (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Prelude","[]") [CTCons ("FlatCurry","Expr") []]) (CTCons ("FlatCurry","Expr") [])))) (CRules CFlex [CRule [CPVar (0,"n"),CPVar (1,"m")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("FlatCurry","Comb")) (CApply (CSymbol ("FlatCurry","FuncPartCall")) (CVar (1,"m")))) (CVar (0,"n")))] []]),
  CFunc ("FlatCurryXML","pcc") 2 Private (CFuncType (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]) (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Prelude","[]") [CTCons ("FlatCurry","Expr") []]) (CTCons ("FlatCurry","Expr") [])))) (CRules CFlex [CRule [CPVar (0,"n"),CPVar (1,"m")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("FlatCurry","Comb")) (CApply (CSymbol ("FlatCurry","ConsPartCall")) (CVar (1,"m")))) (CVar (0,"n")))] []]),
  CFunc ("FlatCurryXML","cExps") 0 Private (CTCons ("XmlConv","XmlConv") [CTCons ("XmlConv","NotRepeatable") [],CTCons ("XmlConv","NoElem") [],CTCons ("Prelude","[]") [CTCons ("FlatCurry","Expr") []]]) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("XmlConv","rep")) (CSymbol ("FlatCurryXML","cExpr")))] []]),
  CFunc ("FlatCurryXML","cMissing") 0 Private (CTCons ("XmlConv","XmlConv") [CTCons ("XmlConv","NotRepeatable") [],CTCons ("XmlConv","NoElem") [],CTCons ("Prelude","Int") []]) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("XmlConv","aInt")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'g'))) (CSymbol ("Prelude","[]"))))))))))] []]),
  CFunc ("FlatCurryXML","cr") 0 Private (CFuncType (CTCons ("FlatCurry","Expr") []) (CFuncType (CTCons ("Prelude","[]") [CTCons ("FlatCurry","BranchExpr") []]) (CTCons ("FlatCurry","Expr") []))) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("FlatCurry","Case")) (CSymbol ("FlatCurry","Rigid")))] []]),
  CFunc ("FlatCurryXML","cf") 0 Private (CFuncType (CTCons ("FlatCurry","Expr") []) (CFuncType (CTCons ("Prelude","[]") [CTCons ("FlatCurry","BranchExpr") []]) (CTCons ("FlatCurry","Expr") []))) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("FlatCurry","Case")) (CSymbol ("FlatCurry","Flex")))] []]),
  CFunc ("FlatCurryXML","cBranch") 0 Private (CTCons ("XmlConv","XmlConv") [CTCons ("XmlConv","Repeatable") [],CTCons ("XmlConv","Elem") [],CTCons ("FlatCurry","BranchExpr") []]) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CSymbol ("XmlConv","eSeq2")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'b'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'h'))) (CSymbol ("Prelude","[]"))))))))) (CSymbol ("FlatCurry","Branch"))) (CSymbol ("FlatCurryXML","cPat"))) (CSymbol ("FlatCurryXML","cExpr")))] []]),
  CFunc ("FlatCurryXML","cPat") 0 Private (CTCons ("XmlConv","XmlConv") [CTCons ("XmlConv","Repeatable") [],CTCons ("XmlConv","Elem") [],CTCons ("FlatCurry","Pattern") []]) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("XmlConv","!")) (CApply (CApply (CApply (CApply (CSymbol ("XmlConv","eSeq2")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CSymbol ("Prelude","[]")))))))))) (CSymbol ("FlatCurry","Pattern"))) (CSymbol ("FlatCurryXML","cQName"))) (CSymbol ("FlatCurryXML","cVars")))) (CApply (CApply (CApply (CSymbol ("XmlConv","eSeq1")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CSymbol ("Prelude","[]"))))))))))) (CSymbol ("FlatCurry","LPattern"))) (CSymbol ("FlatCurryXML","cLit"))))] []]),
  CFunc ("FlatCurryXML","cBind") 0 Private (CTCons ("XmlConv","XmlConv") [CTCons ("XmlConv","Repeatable") [],CTCons ("XmlConv","Elem") [],CTCons ("Prelude","(,)") [CTCons ("Prelude","Int") [],CTCons ("FlatCurry","Expr") []]]) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CSymbol ("XmlConv","eSeq2")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'b'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'g'))) (CSymbol ("Prelude","[]")))))))))) (CLambda [CPVar (0,"a"),CPVar (1,"b")] (CApply (CApply (CSymbol ("Prelude","(,)")) (CVar (0,"a"))) (CVar (1,"b"))))) (CSymbol ("FlatCurryXML","cVar"))) (CSymbol ("FlatCurryXML","cExpr")))] []]),
  CFunc ("FlatCurryXML","cOps") 0 Private (CTCons ("XmlConv","XmlConv") [CTCons ("XmlConv","Repeatable") [],CTCons ("XmlConv","Elem") [],CTCons ("Prelude","[]") [CTCons ("FlatCurry","OpDecl") []]]) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("XmlConv","eRep")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CSymbol ("Prelude","[]")))))))))))) (CSymbol ("FlatCurryXML","cOp")))] []]),
  CFunc ("FlatCurryXML","cOp") 0 Private (CTCons ("XmlConv","XmlConv") [CTCons ("XmlConv","Repeatable") [],CTCons ("XmlConv","Elem") [],CTCons ("FlatCurry","OpDecl") []]) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CApply (CSymbol ("XmlConv","eSeq3")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CSymbol ("Prelude","[]"))))) (CSymbol ("FlatCurry","Op"))) (CSymbol ("FlatCurryXML","cQName"))) (CSymbol ("FlatCurryXML","cFixity"))) (CApply (CSymbol ("XmlConv","aInt")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CSymbol ("Prelude","[]"))))))))] []]),
  CFunc ("FlatCurryXML","cFixity") 0 Private (CTCons ("XmlConv","XmlConv") [CTCons ("XmlConv","NotRepeatable") [],CTCons ("XmlConv","NoElem") [],CTCons ("FlatCurry","Fixity") []]) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("XmlConv","adapt")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CSymbol ("FlatCurryXML","rf"))) (CSymbol ("Prelude","show")))) (CApply (CSymbol ("XmlConv","aString")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'f'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'x'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'y'))) (CSymbol ("Prelude","[]"))))))))))] []]),
  CFunc ("FlatCurryXML","rf") 1 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("FlatCurry","Fixity") [])) (CRules CFlex [CRule [CPComb ("Prelude",":") [CPLit (CCharc 'I'),CPComb ("Prelude",":") [CPLit (CCharc 'n'),CPComb ("Prelude",":") [CPLit (CCharc 'f'),CPComb ("Prelude",":") [CPLit (CCharc 'i'),CPComb ("Prelude",":") [CPLit (CCharc 'x'),CPComb ("Prelude",":") [CPLit (CCharc 'O'),CPComb ("Prelude",":") [CPLit (CCharc 'p'),CPComb ("Prelude","[]") []]]]]]]]] [(CSymbol ("Prelude","success"),CSymbol ("FlatCurry","InfixOp"))] [],CRule [CPComb ("Prelude",":") [CPLit (CCharc 'I'),CPComb ("Prelude",":") [CPLit (CCharc 'n'),CPComb ("Prelude",":") [CPLit (CCharc 'f'),CPComb ("Prelude",":") [CPLit (CCharc 'i'),CPComb ("Prelude",":") [CPLit (CCharc 'x'),CPComb ("Prelude",":") [CPLit (CCharc 'l'),CPComb ("Prelude",":") [CPLit (CCharc 'O'),CPComb ("Prelude",":") [CPLit (CCharc 'p'),CPComb ("Prelude","[]") []]]]]]]]]] [(CSymbol ("Prelude","success"),CSymbol ("FlatCurry","InfixlOp"))] [],CRule [CPComb ("Prelude",":") [CPLit (CCharc 'I'),CPComb ("Prelude",":") [CPLit (CCharc 'n'),CPComb ("Prelude",":") [CPLit (CCharc 'f'),CPComb ("Prelude",":") [CPLit (CCharc 'i'),CPComb ("Prelude",":") [CPLit (CCharc 'x'),CPComb ("Prelude",":") [CPLit (CCharc 'r'),CPComb ("Prelude",":") [CPLit (CCharc 'O'),CPComb ("Prelude",":") [CPLit (CCharc 'p'),CPComb ("Prelude","[]") []]]]]]]]]] [(CSymbol ("Prelude","success"),CSymbol ("FlatCurry","InfixrOp"))] []])]
 []
