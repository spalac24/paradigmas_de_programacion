Prog "CurryStringClassifier" ["Char","Prelude"] [TypeSyn ("CurryStringClassifier","Tokens") Public [] (TCons ("Prelude","[]") [TCons ("CurryStringClassifier","Token") []]),Type ("CurryStringClassifier","Token") Public [] [Cons ("CurryStringClassifier","SmallComment") 1 Public [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],Cons ("CurryStringClassifier","BigComment") 1 Public [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],Cons ("CurryStringClassifier","Text") 1 Public [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],Cons ("CurryStringClassifier","Letter") 1 Public [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],Cons ("CurryStringClassifier","Code") 1 Public [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],Cons ("CurryStringClassifier","ModuleHead") 1 Public [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],Cons ("CurryStringClassifier","Meta") 1 Public [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]] [Func ("CurryStringClassifier","isSmallComment") 1 Public (FuncType (TCons ("CurryStringClassifier","Token") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Case  Rigid (Var 1) [Branch (Pattern ("CurryStringClassifier","SmallComment") [2]) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("CurryStringClassifier","BigComment") [3]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("CurryStringClassifier","Text") [4]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("CurryStringClassifier","Letter") [5]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("CurryStringClassifier","Code") [6]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("CurryStringClassifier","ModuleHead") [7]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("CurryStringClassifier","Meta") [8]) (Comb ConsCall ("Prelude","False") [])])),Func ("CurryStringClassifier","isBigComment") 1 Public (FuncType (TCons ("CurryStringClassifier","Token") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Case  Rigid (Var 1) [Branch (Pattern ("CurryStringClassifier","BigComment") [2]) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("CurryStringClassifier","SmallComment") [3]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("CurryStringClassifier","Text") [4]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("CurryStringClassifier","Letter") [5]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("CurryStringClassifier","Code") [6]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("CurryStringClassifier","ModuleHead") [7]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("CurryStringClassifier","Meta") [8]) (Comb ConsCall ("Prelude","False") [])])),Func ("CurryStringClassifier","isComment") 1 Public (FuncType (TCons ("CurryStringClassifier","Token") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Comb FuncCall ("Prelude","||") [Comb FuncCall ("CurryStringClassifier","isSmallComment") [Var 1],Comb FuncCall ("CurryStringClassifier","isBigComment") [Var 1]])),Func ("CurryStringClassifier","isText") 1 Public (FuncType (TCons ("CurryStringClassifier","Token") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Case  Rigid (Var 1) [Branch (Pattern ("CurryStringClassifier","Text") [2]) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("CurryStringClassifier","SmallComment") [3]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("CurryStringClassifier","BigComment") [4]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("CurryStringClassifier","Letter") [5]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("CurryStringClassifier","Code") [6]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("CurryStringClassifier","ModuleHead") [7]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("CurryStringClassifier","Meta") [8]) (Comb ConsCall ("Prelude","False") [])])),Func ("CurryStringClassifier","isLetter") 1 Public (FuncType (TCons ("CurryStringClassifier","Token") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Case  Rigid (Var 1) [Branch (Pattern ("CurryStringClassifier","Letter") [2]) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("CurryStringClassifier","SmallComment") [3]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("CurryStringClassifier","BigComment") [4]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("CurryStringClassifier","Text") [5]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("CurryStringClassifier","Code") [6]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("CurryStringClassifier","ModuleHead") [7]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("CurryStringClassifier","Meta") [8]) (Comb ConsCall ("Prelude","False") [])])),Func ("CurryStringClassifier","isCode") 1 Public (FuncType (TCons ("CurryStringClassifier","Token") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Case  Rigid (Var 1) [Branch (Pattern ("CurryStringClassifier","Code") [2]) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("CurryStringClassifier","SmallComment") [3]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("CurryStringClassifier","BigComment") [4]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("CurryStringClassifier","Text") [5]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("CurryStringClassifier","Letter") [6]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("CurryStringClassifier","ModuleHead") [7]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("CurryStringClassifier","Meta") [8]) (Comb ConsCall ("Prelude","False") [])])),Func ("CurryStringClassifier","isModuleHead") 1 Public (FuncType (TCons ("CurryStringClassifier","Token") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Case  Rigid (Var 1) [Branch (Pattern ("CurryStringClassifier","ModuleHead") [2]) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("CurryStringClassifier","SmallComment") [3]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("CurryStringClassifier","BigComment") [4]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("CurryStringClassifier","Text") [5]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("CurryStringClassifier","Letter") [6]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("CurryStringClassifier","Code") [7]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("CurryStringClassifier","Meta") [8]) (Comb ConsCall ("Prelude","False") [])])),Func ("CurryStringClassifier","isMeta") 1 Public (FuncType (TCons ("CurryStringClassifier","Token") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Case  Rigid (Var 1) [Branch (Pattern ("CurryStringClassifier","Meta") [2]) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("CurryStringClassifier","SmallComment") [3]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("CurryStringClassifier","BigComment") [4]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("CurryStringClassifier","Text") [5]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("CurryStringClassifier","Letter") [6]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("CurryStringClassifier","Code") [7]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("CurryStringClassifier","ModuleHead") [8]) (Comb ConsCall ("Prelude","False") [])])),Func ("CurryStringClassifier","weaveIntoCode") 2 Private (FuncType (FuncType (TCons ("Prelude","[]") [TCons ("CurryStringClassifier","Token") []]) (TCons ("Prelude","[]") [TCons ("CurryStringClassifier","Token") []])) (FuncType (TCons ("Prelude","[]") [TCons ("CurryStringClassifier","Token") []]) (TCons ("Prelude","[]") [TCons ("CurryStringClassifier","Token") []]))) (Rule [1,2] (Let [(3,Comb FuncCall ("CurryStringClassifier","unweaveCode") [Var 2]),(4,Comb FuncCall ("CurryStringClassifier","weaveIntoCode._#selFP2#cs") [Var 3]),(5,Comb FuncCall ("CurryStringClassifier","weaveIntoCode._#selFP3#ncs") [Var 3])] (Comb FuncCall ("CurryStringClassifier","weave") [Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Prelude","apply") [Var 1,Var 4],Var 5]]))),Func ("CurryStringClassifier","weaveIntoCode._#selFP2#cs") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("CurryStringClassifier","Token") []],TCons ("Prelude","[]") [TCons ("CurryStringClassifier","Token") []]]) (TCons ("Prelude","[]") [TCons ("CurryStringClassifier","Token") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("CurryStringClassifier","weaveIntoCode._#selFP3#ncs") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("CurryStringClassifier","Token") []],TCons ("Prelude","[]") [TCons ("CurryStringClassifier","Token") []]]) (TCons ("Prelude","[]") [TCons ("CurryStringClassifier","Token") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("CurryStringClassifier","unweaveCode") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("CurryStringClassifier","Token") []]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("CurryStringClassifier","Token") []],TCons ("Prelude","[]") [TCons ("CurryStringClassifier","Token") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","[]") [],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude",":") [2,3]) (Let [(4,Comb FuncCall ("CurryStringClassifier","unweaveCode") [Var 3]),(5,Comb FuncCall ("CurryStringClassifier","unweaveCode._#selFP5#cs") [Var 4]),(6,Comb FuncCall ("CurryStringClassifier","unweaveCode._#selFP6#ncs") [Var 4])] (Case  Rigid (Comb FuncCall ("CurryStringClassifier","isCode") [Var 2]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Var 2,Var 5],Var 6]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","(,)") [Var 5,Comb ConsCall ("Prelude",":") [Var 2,Var 6]])]))])),Func ("CurryStringClassifier","unweaveCode._#selFP5#cs") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("CurryStringClassifier","Token") []],TCons ("Prelude","[]") [TCons ("CurryStringClassifier","Token") []]]) (TCons ("Prelude","[]") [TCons ("CurryStringClassifier","Token") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("CurryStringClassifier","unweaveCode._#selFP6#ncs") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("CurryStringClassifier","Token") []],TCons ("Prelude","[]") [TCons ("CurryStringClassifier","Token") []]]) (TCons ("Prelude","[]") [TCons ("CurryStringClassifier","Token") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("CurryStringClassifier","weave") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TVar 0]]) (TCons ("Prelude","[]") [TVar 0])) (Rule [1] (Case  Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Case  Rigid (Var 2) [Branch (Pattern ("Prelude","[]") []) (Case  Rigid (Var 3) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [4,5]) (Case  Rigid (Var 5) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude",":") [6,7]) (Comb FuncCall ("Prelude","failed") [])])]),Branch (Pattern ("Prelude",":") [8,9]) (Case  Rigid (Var 9) [Branch (Pattern ("Prelude","[]") []) (Case  Rigid (Var 3) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude",":") [10,11]) (Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude",":") [Var 10,Comb FuncCall ("CurryStringClassifier","weave") [Comb ConsCall ("Prelude","(,)") [Var 9,Var 11]]]])]),Branch (Pattern ("Prelude",":") [12,13]) (Case  Rigid (Var 3) [Branch (Pattern ("Prelude",":") [14,15]) (Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude",":") [Var 14,Comb FuncCall ("CurryStringClassifier","weave") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Var 12,Var 13],Var 15]]]]),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","failed") [])])])])])),Func ("CurryStringClassifier","scan") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("CurryStringClassifier","Token") []])) (Rule [1] (Free [2] (Comb FuncCall ("CurryStringClassifier","modHead") [Comb (FuncPartCall 1) ("Prelude","id") [],Comb FuncCall ("CurryStringClassifier","stateScan") [Lit (Intc  1),Comb ConsCall ("CurryStringClassifier","Code") [Var 2],Var 2,Var 1]]))),Func ("CurryStringClassifier","stateScan") 4 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("CurryStringClassifier","Token") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("CurryStringClassifier","Token") []]))))) (Rule [1,2,3,4] (Case  Flex (Var 4) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","cond") [Comb FuncCall ("Prelude","=:=") [Var 3,Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude","[]") []]]),Branch (Pattern ("Prelude",":") [5,6]) (Case  Flex (Var 2) [Branch (Pattern ("CurryStringClassifier","Code") [7]) (Case  Flex (Var 6) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","cond") [Comb FuncCall ("Prelude","=:=") [Var 3,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("CurryStringClassifier","maybeCode") [Var 7,Comb ConsCall ("Prelude","[]") []]]),Branch (Pattern ("Prelude",":") [8,9]) (Free [10] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 5,Lit (Charc  '"')]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","&>") [Comb FuncCall ("Prelude","=:=") [Var 3,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("CurryStringClassifier","maybeCode") [Var 7,Comb FuncCall ("CurryStringClassifier","stateScan") [Var 1,Comb ConsCall ("CurryStringClassifier","Text") [Var 10],Var 10,Comb ConsCall ("Prelude",":") [Var 8,Var 9]]]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","==") [Var 5,Lit (Charc  '-')],Comb FuncCall ("Prelude","==") [Var 8,Lit (Charc  '-')]]) [Branch (Pattern ("Prelude","True") []) (Let [(11,Comb FuncCall ("Prelude","span") [Comb (FuncPartCall 1) ("Prelude","flip") [Comb (FuncPartCall 2) ("Prelude","/=") [],Lit (Charc  '\010')],Var 9]),(12,Comb FuncCall ("CurryStringClassifier","stateScan._#selFP8#comment") [Var 11]),(13,Comb FuncCall ("CurryStringClassifier","stateScan._#selFP9#rest") [Var 11])] (Comb FuncCall ("Prelude","&>") [Comb FuncCall ("Prelude","=:=") [Var 3,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("CurryStringClassifier","maybeCode") [Var 7,Comb ConsCall ("Prelude",":") [Comb ConsCall ("CurryStringClassifier","SmallComment") [Var 12],Comb FuncCall ("CurryStringClassifier","stateScan") [Var 1,Comb ConsCall ("CurryStringClassifier","Code") [Var 10],Var 10,Var 13]]]])),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","==") [Var 5,Lit (Charc  '{')],Comb FuncCall ("Prelude","==") [Var 8,Lit (Charc  '-')]]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","&>") [Comb FuncCall ("Prelude","=:=") [Var 3,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("CurryStringClassifier","maybeCode") [Var 7,Comb FuncCall ("CurryStringClassifier","stateScan") [Var 1,Comb ConsCall ("CurryStringClassifier","BigComment") [Var 10],Var 10,Var 9]]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","==") [Var 5,Lit (Charc  '{')],Comb FuncCall ("Prelude","==") [Var 8,Lit (Charc  '+')]]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","&>") [Comb FuncCall ("Prelude","=:=") [Var 3,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("CurryStringClassifier","maybeCode") [Var 7,Comb FuncCall ("CurryStringClassifier","stateScan") [Var 1,Comb ConsCall ("CurryStringClassifier","Meta") [Var 10],Var 10,Var 9]]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","==") [Var 8,Lit (Charc  '\'')],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","elem") [Var 5],Comb FuncCall ("Prelude","++") [Comb FuncCall ("CurryStringClassifier","infixIDs") [],Comb FuncCall ("CurryStringClassifier","delimiters") []]]]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","&>") [Comb FuncCall ("Prelude","=:=") [Var 3,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("CurryStringClassifier","maybeCode") [Var 7],Case  Rigid (Var 9) [Branch (Pattern ("Prelude",":") [14,15]) (Let [(16,Var 14)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 16,Lit (Charc  '\\')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 15) [Branch (Pattern ("Prelude",":") [17,18]) (Case  Rigid (Var 18) [Branch (Pattern ("Prelude",":") [19,20]) (Let [(21,Var 19)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 21,Lit (Charc  '\'')]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("CurryStringClassifier","Letter") [Comb ConsCall ("Prelude",":") [Lit (Charc  '\\'),Comb ConsCall ("Prelude",":") [Var 17,Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("CurryStringClassifier","stateScan") [Var 1,Comb ConsCall ("CurryStringClassifier","Code") [Var 10],Var 10,Var 20]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Var 20) [Branch (Pattern ("Prelude",":") [22,23]) (Case  Rigid (Var 23) [Branch (Pattern ("Prelude",":") [24,25]) (Let [(26,Var 24)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 26,Lit (Charc  '\'')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","all") [Comb (FuncPartCall 1) ("Char","isDigit") []],Comb ConsCall ("Prelude",":") [Var 17,Comb ConsCall ("Prelude",":") [Var 21,Comb ConsCall ("Prelude",":") [Var 22,Comb ConsCall ("Prelude","[]") []]]]]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("CurryStringClassifier","Letter") [Comb ConsCall ("Prelude",":") [Lit (Charc  '\\'),Comb ConsCall ("Prelude",":") [Var 17,Comb ConsCall ("Prelude",":") [Var 21,Comb ConsCall ("Prelude",":") [Var 22,Comb ConsCall ("Prelude","[]") []]]]]],Comb FuncCall ("CurryStringClassifier","stateScan") [Var 1,Comb ConsCall ("CurryStringClassifier","Code") [Var 10],Var 10,Var 25]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Prelude","error") [],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'I'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],Comb FuncCall ("Prelude","show") [Var 1]]])]),Branch (Pattern ("Prelude","False") []) (Let [(27,Var 17)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 27,Lit (Charc  '\'')]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("CurryStringClassifier","Letter") [Comb ConsCall ("Prelude",":") [Var 14,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("CurryStringClassifier","stateScan") [Var 1,Comb ConsCall ("CurryStringClassifier","Code") [Var 10],Var 10,Var 18]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Prelude","error") [],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'I'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],Comb FuncCall ("Prelude","show") [Var 1]]])]))])),Branch (Pattern ("Prelude","[]") []) (Let [(28,Var 17)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 28,Lit (Charc  '\'')]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("CurryStringClassifier","Letter") [Comb ConsCall ("Prelude",":") [Var 14,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("CurryStringClassifier","stateScan") [Var 1,Comb ConsCall ("CurryStringClassifier","Code") [Var 10],Var 10,Var 18]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Prelude","error") [],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'I'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],Comb FuncCall ("Prelude","show") [Var 1]]])]))]),Branch (Pattern ("Prelude","[]") []) (Let [(29,Var 17)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 29,Lit (Charc  '\'')]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("CurryStringClassifier","Letter") [Comb ConsCall ("Prelude",":") [Var 14,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("CurryStringClassifier","stateScan") [Var 1,Comb ConsCall ("CurryStringClassifier","Code") [Var 10],Var 10,Var 18]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Prelude","error") [],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'I'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],Comb FuncCall ("Prelude","show") [Var 1]]])]))])])),Branch (Pattern ("Prelude","[]") []) (Let [(30,Var 17)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 30,Lit (Charc  '\'')]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("CurryStringClassifier","Letter") [Comb ConsCall ("Prelude",":") [Var 14,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("CurryStringClassifier","stateScan") [Var 1,Comb ConsCall ("CurryStringClassifier","Code") [Var 10],Var 10,Comb ConsCall ("Prelude","[]") []]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Prelude","error") [],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'I'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],Comb FuncCall ("Prelude","show") [Var 1]]])]))]),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Prelude","error") [],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'I'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],Comb FuncCall ("Prelude","show") [Var 1]]])]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Var 15) [Branch (Pattern ("Prelude",":") [31,32]) (Let [(33,Var 31)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 33,Lit (Charc  '\'')]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("CurryStringClassifier","Letter") [Comb ConsCall ("Prelude",":") [Var 16,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("CurryStringClassifier","stateScan") [Var 1,Comb ConsCall ("CurryStringClassifier","Code") [Var 10],Var 10,Var 32]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Prelude","error") [],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'I'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],Comb FuncCall ("Prelude","show") [Var 1]]])])),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Prelude","error") [],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'I'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],Comb FuncCall ("Prelude","show") [Var 1]]])])])),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Prelude","error") [],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'I'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],Comb FuncCall ("Prelude","show") [Var 1]]])]]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 5,Lit (Charc  '\010')]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","&>") [Comb FuncCall ("Prelude","=:=") [Var 3,Comb ConsCall ("Prelude",":") [Var 5,Var 10]],Comb FuncCall ("CurryStringClassifier","stateScan") [Comb FuncCall ("Prelude","+") [Var 1,Lit (Intc  1)],Comb ConsCall ("CurryStringClassifier","Code") [Var 7],Var 10,Comb ConsCall ("Prelude",":") [Var 8,Var 9]]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","&>") [Comb FuncCall ("Prelude","=:=") [Var 3,Comb ConsCall ("Prelude",":") [Var 5,Var 10]],Comb FuncCall ("CurryStringClassifier","stateScan") [Var 1,Comb ConsCall ("CurryStringClassifier","Code") [Var 7],Var 10,Comb ConsCall ("Prelude",":") [Var 8,Var 9]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])])])])]))]),Branch (Pattern ("CurryStringClassifier","Text") [34]) (Case  Flex (Var 6) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","cond") [Comb FuncCall ("Prelude","=:=") [Var 3,Comb ConsCall ("Prelude","[]") []],Case  Rigid (Comb FuncCall ("Prelude","==") [Var 5,Lit (Charc  '"')]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("CurryStringClassifier","Text") [Var 34],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","error") [Comb ConsCall ("Prelude",":") [Lit (Charc  'F'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])]]),Branch (Pattern ("Prelude",":") [35,36]) (Free [37] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 5,Lit (Charc  '"')]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","&>") [Comb FuncCall ("Prelude","=:=") [Var 3,Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude",":") [Comb ConsCall ("CurryStringClassifier","Text") [Var 34],Comb FuncCall ("CurryStringClassifier","stateScan") [Var 1,Comb ConsCall ("CurryStringClassifier","Code") [Var 37],Var 37,Comb ConsCall ("Prelude",":") [Var 35,Var 36]]]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 5,Lit (Charc  '\\')]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","&>") [Comb FuncCall ("Prelude","=:=") [Var 3,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude",":") [Var 35,Var 37]]],Comb FuncCall ("CurryStringClassifier","stateScan") [Var 1,Comb ConsCall ("CurryStringClassifier","Text") [Var 34],Var 37,Var 36]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","elem") [Var 5],Comb FuncCall ("CurryStringClassifier","toBeEscaped") []]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Prelude","error") [],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]],Comb ConsCall ("Prelude",":") [Var 5,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]],Comb FuncCall ("Prelude","show") [Var 1]]]]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","&>") [Comb FuncCall ("Prelude","=:=") [Var 3,Comb ConsCall ("Prelude",":") [Var 5,Var 37]],Comb FuncCall ("CurryStringClassifier","stateScan") [Var 1,Comb ConsCall ("CurryStringClassifier","Text") [Var 34],Var 37,Comb ConsCall ("Prelude",":") [Var 35,Var 36]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])]))]),Branch (Pattern ("CurryStringClassifier","BigComment") [38]) (Case  Flex (Var 6) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","cond") [Comb FuncCall ("Prelude","=:=") [Var 3,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","error") [Comb ConsCall ("Prelude",":") [Lit (Charc  'F'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  '}'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]),Branch (Pattern ("Prelude",":") [39,40]) (Free [41] (Case  Rigid (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","==") [Var 5,Lit (Charc  '-')],Comb FuncCall ("Prelude","==") [Var 39,Lit (Charc  '}')]]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","&>") [Comb FuncCall ("Prelude","=:=") [Var 3,Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude",":") [Comb ConsCall ("CurryStringClassifier","BigComment") [Var 38],Comb FuncCall ("CurryStringClassifier","stateScan") [Var 1,Comb ConsCall ("CurryStringClassifier","Code") [Var 41],Var 41,Var 40]]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 5,Lit (Charc  '\010')]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","&>") [Comb FuncCall ("Prelude","=:=") [Var 3,Comb ConsCall ("Prelude",":") [Var 5,Var 41]],Comb FuncCall ("CurryStringClassifier","stateScan") [Comb FuncCall ("Prelude","+") [Var 1,Lit (Intc  1)],Comb ConsCall ("CurryStringClassifier","BigComment") [Var 38],Var 41,Comb ConsCall ("Prelude",":") [Var 39,Var 40]]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","&>") [Comb FuncCall ("Prelude","=:=") [Var 3,Comb ConsCall ("Prelude",":") [Var 5,Var 41]],Comb FuncCall ("CurryStringClassifier","stateScan") [Var 1,Comb ConsCall ("CurryStringClassifier","BigComment") [Var 38],Var 41,Comb ConsCall ("Prelude",":") [Var 39,Var 40]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])]))]),Branch (Pattern ("CurryStringClassifier","Meta") [42]) (Case  Flex (Var 6) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","cond") [Comb FuncCall ("Prelude","=:=") [Var 3,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","error") [Comb ConsCall ("Prelude",":") [Lit (Charc  'F'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '+'),Comb ConsCall ("Prelude",":") [Lit (Charc  '}'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]),Branch (Pattern ("Prelude",":") [43,44]) (Free [45] (Case  Rigid (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","==") [Var 5,Lit (Charc  '+')],Comb FuncCall ("Prelude","==") [Var 43,Lit (Charc  '}')]]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","&>") [Comb FuncCall ("Prelude","=:=") [Var 3,Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude",":") [Comb ConsCall ("CurryStringClassifier","Meta") [Var 42],Comb FuncCall ("CurryStringClassifier","stateScan") [Var 1,Comb ConsCall ("CurryStringClassifier","Code") [Var 45],Var 45,Var 44]]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 5,Lit (Charc  '\010')]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","&>") [Comb FuncCall ("Prelude","=:=") [Var 3,Comb ConsCall ("Prelude",":") [Var 5,Var 45]],Comb FuncCall ("CurryStringClassifier","stateScan") [Comb FuncCall ("Prelude","+") [Var 1,Lit (Intc  1)],Comb ConsCall ("CurryStringClassifier","Meta") [Var 42],Var 45,Comb ConsCall ("Prelude",":") [Var 43,Var 44]]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","&>") [Comb FuncCall ("Prelude","=:=") [Var 3,Comb ConsCall ("Prelude",":") [Var 5,Var 45]],Comb FuncCall ("CurryStringClassifier","stateScan") [Var 1,Comb ConsCall ("CurryStringClassifier","Meta") [Var 42],Var 45,Comb ConsCall ("Prelude",":") [Var 43,Var 44]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])]))])])])),Func ("CurryStringClassifier","stateScan._#selFP8#comment") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("CurryStringClassifier","stateScan._#selFP9#rest") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("CurryStringClassifier","modHead") 2 Private (FuncType (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (FuncType (TCons ("Prelude","[]") [TCons ("CurryStringClassifier","Token") []]) (TCons ("Prelude","[]") [TCons ("CurryStringClassifier","Token") []]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Prelude",":") [3,4]) (Case  Flex (Var 3) [Branch (Pattern ("CurryStringClassifier","Code") [5]) (Case  Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","break") [Comb (FuncPartCall 1) ("CurryStringClassifier","modHead._#lambda10") []],Var 5]) [Branch (Pattern ("Prelude","(,)") [6,7]) (Case  Rigid (Var 6) [Branch (Pattern ("Prelude","[]") []) (Case  Rigid (Var 7) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("CurryStringClassifier","modHead") [Var 1,Var 4]),Branch (Pattern ("Prelude",":") [8,9]) (Comb FuncCall ("CurryStringClassifier","modHead") [Comb FuncCall ("Prelude",".") [Var 1,Comb (ConsPartCall 1) ("Prelude",":") [Var 8]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("CurryStringClassifier","Code") [Var 9],Var 4]])]),Branch (Pattern ("Prelude",":") [10,11]) (Case  Rigid (Var 7) [Branch (Pattern ("Prelude","[]") []) (Case  Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","any") [Comb (FuncPartCall 1) ("CurryStringClassifier","lineBeginsWith") [Comb ConsCall ("Prelude",":") [Var 10,Var 11]]],Comb FuncCall ("CurryStringClassifier","headers") []]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("CurryStringClassifier","ModuleHead") [Comb FuncCall ("Prelude","apply") [Var 1,Comb ConsCall ("Prelude",":") [Var 10,Var 11]]],Comb FuncCall ("CurryStringClassifier","modHeadInLine") [Comb (FuncPartCall 1) ("Prelude","id") [],Var 4]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CurryStringClassifier","maybeMo") [Comb FuncCall ("Prelude","apply") [Var 1,Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude",":") [Comb ConsCall ("CurryStringClassifier","Code") [Var 5],Var 4]])]),Branch (Pattern ("Prelude",":") [12,13]) (Case  Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","any") [Comb (FuncPartCall 1) ("CurryStringClassifier","lineBeginsWith") [Comb ConsCall ("Prelude",":") [Var 10,Var 11]]],Comb FuncCall ("CurryStringClassifier","headers") []]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CurryStringClassifier","modHead") [Comb FuncCall ("Prelude",".") [Var 1,Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","++") [Comb ConsCall ("Prelude",":") [Var 10,Var 11]],Comb (ConsPartCall 1) ("Prelude",":") [Var 12]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("CurryStringClassifier","Code") [Var 13],Var 4]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CurryStringClassifier","maybeMo") [Comb FuncCall ("Prelude","apply") [Var 1,Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude",":") [Comb ConsCall ("CurryStringClassifier","Code") [Var 5],Var 4]])])])])]),Branch (Pattern ("CurryStringClassifier","BigComment") [14]) (Comb FuncCall ("CurryStringClassifier","maybeMo") [Comb FuncCall ("Prelude","apply") [Var 1,Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude",":") [Comb ConsCall ("CurryStringClassifier","BigComment") [Var 14],Comb FuncCall ("CurryStringClassifier","modHead") [Comb (FuncPartCall 1) ("Prelude","id") [],Var 4]]]),Branch (Pattern ("CurryStringClassifier","SmallComment") [15]) (Comb FuncCall ("CurryStringClassifier","maybeMo") [Comb FuncCall ("Prelude","apply") [Var 1,Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude",":") [Comb ConsCall ("CurryStringClassifier","SmallComment") [Var 15],Comb FuncCall ("CurryStringClassifier","modHead") [Comb (FuncPartCall 1) ("Prelude","id") [],Var 4]]]),Branch (Pattern ("CurryStringClassifier","Meta") [16]) (Comb FuncCall ("CurryStringClassifier","maybeMo") [Comb FuncCall ("Prelude","apply") [Var 1,Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude",":") [Comb ConsCall ("CurryStringClassifier","Meta") [Var 16],Var 4]])]),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("CurryStringClassifier","maybeMo") [Comb FuncCall ("Prelude","apply") [Var 1,Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude","[]") []])])),Func ("CurryStringClassifier","modHead._#lambda10") 1 Private (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Comb FuncCall ("Prelude","||") [Comb FuncCall ("Prelude","==") [Var 1,Lit (Charc  '\010')],Comb FuncCall ("Prelude","==") [Var 1,Lit (Charc  '\013')]])),Func ("CurryStringClassifier","modHeadInLine") 2 Private (FuncType (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (FuncType (TCons ("Prelude","[]") [TCons ("CurryStringClassifier","Token") []]) (TCons ("Prelude","[]") [TCons ("CurryStringClassifier","Token") []]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("CurryStringClassifier","maybeMo") [Comb FuncCall ("Prelude","apply") [Var 1,Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude",":") [3,4]) (Case  Flex (Var 3) [Branch (Pattern ("CurryStringClassifier","Code") [5]) (Case  Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","break") [Comb (FuncPartCall 1) ("CurryStringClassifier","modHeadInLine._#lambda12") []],Var 5]) [Branch (Pattern ("Prelude","(,)") [6,7]) (Case  Rigid (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Comb FuncCall ("CurryStringClassifier","modHead") [Comb FuncCall ("Prelude",".") [Var 1,Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","++") [Var 6],Comb (ConsPartCall 1) ("Prelude",":") [Var 8]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("CurryStringClassifier","Code") [Var 9],Var 4]]),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("CurryStringClassifier","modHead") [Var 1,Comb ConsCall ("Prelude",":") [Comb ConsCall ("CurryStringClassifier","Code") [Var 5],Var 4]])])]),Branch (Pattern ("CurryStringClassifier","BigComment") [10]) (Comb FuncCall ("CurryStringClassifier","maybeMo") [Comb FuncCall ("Prelude","apply") [Var 1,Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude",":") [Comb ConsCall ("CurryStringClassifier","BigComment") [Var 10],Comb FuncCall ("CurryStringClassifier","modHeadInLine") [Comb (FuncPartCall 1) ("Prelude","id") [],Var 4]]]),Branch (Pattern ("CurryStringClassifier","SmallComment") [11]) (Comb FuncCall ("CurryStringClassifier","maybeMo") [Comb FuncCall ("Prelude","apply") [Var 1,Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude",":") [Comb ConsCall ("CurryStringClassifier","SmallComment") [Var 11],Comb FuncCall ("CurryStringClassifier","modHeadInLine") [Comb (FuncPartCall 1) ("Prelude","id") [],Var 4]]]),Branch (Pattern ("CurryStringClassifier","Meta") [12]) (Comb FuncCall ("CurryStringClassifier","maybeMo") [Comb FuncCall ("Prelude","apply") [Var 1,Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude",":") [Comb ConsCall ("CurryStringClassifier","Meta") [Var 12],Var 4]])])])),Func ("CurryStringClassifier","modHeadInLine._#lambda12") 1 Private (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Comb FuncCall ("Prelude","||") [Comb FuncCall ("Prelude","==") [Var 1,Lit (Charc  '\010')],Comb FuncCall ("Prelude","==") [Var 1,Lit (Charc  '\013')]])),Func ("CurryStringClassifier","headers") 0 Private (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (Rule [] (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude","[]") []]]]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude","[]") []]]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude","[]") []]]]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude","[]") []]]]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]],Comb ConsCall ("Prelude","[]") []]]]]]])),Func ("CurryStringClassifier","lineBeginsWith") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Let [(3,Comb FuncCall ("Prelude","length") [Var 2])] (Case  Rigid (Comb FuncCall ("Prelude","<") [Comb FuncCall ("Prelude","length") [Var 1],Var 3]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","||") [Comb FuncCall ("Prelude","==") [Var 1,Var 2],Let [(4,Comb FuncCall ("Prelude","splitAt") [Comb FuncCall ("Prelude","length") [Var 2],Var 1]),(5,Comb FuncCall ("CurryStringClassifier","lineBeginsWith._#selFP11#s'") [Var 4]),(6,Comb FuncCall ("CurryStringClassifier","lineBeginsWith._#selFP12#rest") [Var 4])] (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","==") [Var 2,Var 5],Comb FuncCall ("Prelude","||") [Comb FuncCall ("Prelude","null") [Var 6],Comb FuncCall ("CurryStringClassifier","isSep") [Comb FuncCall ("Prelude","head") [Var 6]]]])]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])]))),Func ("CurryStringClassifier","lineBeginsWith._#selFP11#s'") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("CurryStringClassifier","lineBeginsWith._#selFP12#rest") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("CurryStringClassifier","isSep") 1 Private (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Comb FuncCall ("Prelude","||") [Comb FuncCall ("Char","isSpace") [Var 1],Comb FuncCall ("Prelude","||") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","elem") [Var 1],Comb FuncCall ("CurryStringClassifier","infixIDs") []],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","elem") [Var 1],Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb ConsCall ("Prelude",":") [Lit (Charc  '['),Comb ConsCall ("Prelude",":") [Lit (Charc  '{'),Comb ConsCall ("Prelude","[]") []]]]]]])),Func ("CurryStringClassifier","infixIDs") 0 Private (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (Rule [] (Comb ConsCall ("Prelude",":") [Lit (Charc  '~'),Comb ConsCall ("Prelude",":") [Lit (Charc  '!'),Comb ConsCall ("Prelude",":") [Lit (Charc  '@'),Comb ConsCall ("Prelude",":") [Lit (Charc  '#'),Comb ConsCall ("Prelude",":") [Lit (Charc  '$'),Comb ConsCall ("Prelude",":") [Lit (Charc  '%'),Comb ConsCall ("Prelude",":") [Lit (Charc  '^'),Comb ConsCall ("Prelude",":") [Lit (Charc  '&'),Comb ConsCall ("Prelude",":") [Lit (Charc  '*'),Comb ConsCall ("Prelude",":") [Lit (Charc  '+'),Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  '='),Comb ConsCall ("Prelude",":") [Lit (Charc  '<'),Comb ConsCall ("Prelude",":") [Lit (Charc  '>'),Comb ConsCall ("Prelude",":") [Lit (Charc  '?'),Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude",":") [Lit (Charc  '/'),Comb ConsCall ("Prelude",":") [Lit (Charc  '|'),Comb ConsCall ("Prelude",":") [Lit (Charc  '\\'),Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]])),Func ("CurryStringClassifier","delimiters") 0 Private (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (Rule [] (Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb ConsCall ("Prelude",":") [Lit (Charc  '['),Comb ConsCall ("Prelude",":") [Lit (Charc  '{'),Comb ConsCall ("Prelude",":") [Lit (Charc  ','),Comb ConsCall ("Prelude",":") [Lit (Charc  '}'),Comb ConsCall ("Prelude",":") [Lit (Charc  ']'),Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude","[]") []]]]]]]]])),Func ("CurryStringClassifier","toBeEscaped") 0 Private (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (Rule [] (Comb ConsCall ("Prelude",":") [Lit (Charc  '\\'),Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude",":") [Lit (Charc  '\013'),Comb ConsCall ("Prelude",":") [Lit (Charc  '\009'),Comb ConsCall ("Prelude",":") [Lit (Charc  '"'),Comb ConsCall ("Prelude","[]") []]]]]])),Func ("CurryStringClassifier","maybeCode") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("CurryStringClassifier","Token") []]) (TCons ("Prelude","[]") [TCons ("CurryStringClassifier","Token") []]))) (Rule [1,2] (Comb ConsCall ("Prelude",":") [Comb ConsCall ("CurryStringClassifier","Code") [Var 1],Var 2])),Func ("CurryStringClassifier","maybeMo") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("CurryStringClassifier","Token") []]) (TCons ("Prelude","[]") [TCons ("CurryStringClassifier","Token") []]))) (Rule [1,2] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 1,Comb ConsCall ("Prelude","[]") []]) [Branch (Pattern ("Prelude","True") []) (Var 2),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("CurryStringClassifier","ModuleHead") [Var 1],Case  Rigid (Var 2) [Branch (Pattern ("Prelude",":") [3,4]) (Case  Rigid (Var 3) [Branch (Pattern ("CurryStringClassifier","Code") [5]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("CurryStringClassifier","Code") [Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Var 5]],Var 4]),Branch (Pattern ("CurryStringClassifier","SmallComment") [6]) (Var 2),Branch (Pattern ("CurryStringClassifier","BigComment") [7]) (Var 2),Branch (Pattern ("CurryStringClassifier","Text") [8]) (Var 2),Branch (Pattern ("CurryStringClassifier","Letter") [9]) (Var 2),Branch (Pattern ("CurryStringClassifier","ModuleHead") [10]) (Var 2),Branch (Pattern ("CurryStringClassifier","Meta") [11]) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]])])),Func ("CurryStringClassifier","plainCode") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("CurryStringClassifier","Token") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 2) [Branch (Pattern ("CurryStringClassifier","ModuleHead") [4]) (Case  Rigid (Var 3) [Branch (Pattern ("Prelude",":") [5,6]) (Case  Rigid (Var 5) [Branch (Pattern ("CurryStringClassifier","Code") [7]) (Comb FuncCall ("Prelude","++") [Var 4,Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","drop") [Lit (Intc  1),Var 7],Comb FuncCall ("CurryStringClassifier","plainCode") [Var 6]]]),Branch (Pattern ("CurryStringClassifier","SmallComment") [8]) (Comb FuncCall ("Prelude","++") [Var 4,Comb FuncCall ("CurryStringClassifier","plainCode") [Var 3]]),Branch (Pattern ("CurryStringClassifier","BigComment") [9]) (Comb FuncCall ("Prelude","++") [Var 4,Comb FuncCall ("CurryStringClassifier","plainCode") [Var 3]]),Branch (Pattern ("CurryStringClassifier","Text") [10]) (Comb FuncCall ("Prelude","++") [Var 4,Comb FuncCall ("CurryStringClassifier","plainCode") [Var 3]]),Branch (Pattern ("CurryStringClassifier","Letter") [11]) (Comb FuncCall ("Prelude","++") [Var 4,Comb FuncCall ("CurryStringClassifier","plainCode") [Var 3]]),Branch (Pattern ("CurryStringClassifier","ModuleHead") [12]) (Comb FuncCall ("Prelude","++") [Var 4,Comb FuncCall ("CurryStringClassifier","plainCode") [Var 3]]),Branch (Pattern ("CurryStringClassifier","Meta") [13]) (Comb FuncCall ("Prelude","++") [Var 4,Comb FuncCall ("CurryStringClassifier","plainCode") [Var 3]])]),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Var 4,Comb FuncCall ("CurryStringClassifier","plainCode") [Var 3]])]),Branch (Pattern ("CurryStringClassifier","Code") [14]) (Comb FuncCall ("Prelude","++") [Var 14,Comb FuncCall ("CurryStringClassifier","plainCode") [Var 3]]),Branch (Pattern ("CurryStringClassifier","Text") [15]) (Comb ConsCall ("Prelude",":") [Lit (Charc  '"'),Comb FuncCall ("Prelude","++") [Var 15,Comb ConsCall ("Prelude",":") [Lit (Charc  '"'),Comb FuncCall ("CurryStringClassifier","plainCode") [Var 3]]]]),Branch (Pattern ("CurryStringClassifier","Letter") [16]) (Comb ConsCall ("Prelude",":") [Lit (Charc  '\''),Comb FuncCall ("Prelude","++") [Var 16,Comb ConsCall ("Prelude",":") [Lit (Charc  '\''),Comb FuncCall ("CurryStringClassifier","plainCode") [Var 3]]]]),Branch (Pattern ("CurryStringClassifier","BigComment") [17]) (Comb FuncCall ("CurryStringClassifier","plainCode") [Var 3]),Branch (Pattern ("CurryStringClassifier","SmallComment") [18]) (Comb FuncCall ("CurryStringClassifier","plainCode") [Var 3]),Branch (Pattern ("CurryStringClassifier","Meta") [19]) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '{'),Comb ConsCall ("Prelude",":") [Lit (Charc  '+'),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude","++") [Var 19,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '+'),Comb ConsCall ("Prelude",":") [Lit (Charc  '}'),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("CurryStringClassifier","plainCode") [Var 3]]]])]),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") [])])),Func ("CurryStringClassifier","unscan") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("CurryStringClassifier","Token") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 2) [Branch (Pattern ("CurryStringClassifier","ModuleHead") [4]) (Comb FuncCall ("Prelude","++") [Var 4,Case  Rigid (Var 3) [Branch (Pattern ("Prelude",":") [5,6]) (Case  Rigid (Var 5) [Branch (Pattern ("CurryStringClassifier","Code") [7]) (Case  Rigid (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Comb FuncCall ("CurryStringClassifier","unscan") [Comb ConsCall ("Prelude",":") [Comb ConsCall ("CurryStringClassifier","Code") [Var 9],Var 6]]),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("CurryStringClassifier","unscan") [Var 3])]),Branch (Pattern ("CurryStringClassifier","SmallComment") [10]) (Comb FuncCall ("CurryStringClassifier","unscan") [Var 3]),Branch (Pattern ("CurryStringClassifier","BigComment") [11]) (Comb FuncCall ("CurryStringClassifier","unscan") [Var 3]),Branch (Pattern ("CurryStringClassifier","Text") [12]) (Comb FuncCall ("CurryStringClassifier","unscan") [Var 3]),Branch (Pattern ("CurryStringClassifier","Letter") [13]) (Comb FuncCall ("CurryStringClassifier","unscan") [Var 3]),Branch (Pattern ("CurryStringClassifier","ModuleHead") [14]) (Comb FuncCall ("CurryStringClassifier","unscan") [Var 3]),Branch (Pattern ("CurryStringClassifier","Meta") [15]) (Comb FuncCall ("CurryStringClassifier","unscan") [Var 3])]),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("CurryStringClassifier","unscan") [Var 3])]]),Branch (Pattern ("CurryStringClassifier","Code") [16]) (Comb FuncCall ("Prelude","++") [Var 16,Comb FuncCall ("CurryStringClassifier","unscan") [Var 3]]),Branch (Pattern ("CurryStringClassifier","Text") [17]) (Comb ConsCall ("Prelude",":") [Lit (Charc  '"'),Comb FuncCall ("Prelude","++") [Var 17,Comb ConsCall ("Prelude",":") [Lit (Charc  '"'),Comb FuncCall ("CurryStringClassifier","unscan") [Var 3]]]]),Branch (Pattern ("CurryStringClassifier","Letter") [18]) (Comb ConsCall ("Prelude",":") [Lit (Charc  '\''),Comb FuncCall ("Prelude","++") [Var 18,Comb ConsCall ("Prelude",":") [Lit (Charc  '\''),Comb FuncCall ("CurryStringClassifier","unscan") [Var 3]]]]),Branch (Pattern ("CurryStringClassifier","BigComment") [19]) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '{'),Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude","++") [Var 19,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  '}'),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("CurryStringClassifier","unscan") [Var 3]]]]),Branch (Pattern ("CurryStringClassifier","SmallComment") [20]) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude","++") [Var 20,Comb FuncCall ("CurryStringClassifier","unscan") [Var 3]]]),Branch (Pattern ("CurryStringClassifier","Meta") [21]) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '{'),Comb ConsCall ("Prelude",":") [Lit (Charc  '+'),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude","++") [Var 21,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '+'),Comb ConsCall ("Prelude",":") [Lit (Charc  '}'),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("CurryStringClassifier","unscan") [Var 3]]]])]),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") [])])),Func ("CurryStringClassifier","readScan") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","[]") [TCons ("CurryStringClassifier","Token") []]])) (Rule [1] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Prelude","readFile") [Var 1],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","return") [],Comb (FuncPartCall 1) ("CurryStringClassifier","scan") []]])),Func ("CurryStringClassifier","testScan") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []])) (Rule [1] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Prelude","readFile") [Var 1],Comb (FuncPartCall 1) ("CurryStringClassifier","testScan._#lambda17") []])),Func ("CurryStringClassifier","testScan._#lambda17") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []])) (Rule [1] (Comb FuncCall ("Prelude","print") [Comb FuncCall ("Prelude","==") [Comb FuncCall ("CurryStringClassifier","unscan") [Comb FuncCall ("CurryStringClassifier","scan") [Var 1]],Var 1]])),Func ("CurryStringClassifier","testWeave") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []])) (Rule [1] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Prelude","readFile") [Var 1],Comb (FuncPartCall 1) ("CurryStringClassifier","testWeave._#lambda18") []])),Func ("CurryStringClassifier","testWeave._#lambda18") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []])) (Rule [1] (Comb FuncCall ("Prelude","print") [Comb FuncCall ("Prelude","==") [Comb FuncCall ("CurryStringClassifier","unscan") [Comb FuncCall ("CurryStringClassifier","weave") [Comb FuncCall ("CurryStringClassifier","unweaveCode") [Comb FuncCall ("CurryStringClassifier","scan") [Var 1]]]],Var 1]]))] []