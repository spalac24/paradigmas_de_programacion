Prog "Flat" ["Char","Directory","Distribution","Prelude"] [TypeSyn ("Flat","TVarIndex") Public [] (TCons ("Prelude","Int") []),TypeSyn ("Flat","VarIndex") Public [] (TCons ("Prelude","Int") []),Type ("Flat","Prog") Public [] [Cons ("Flat","Prog") 6 Public [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","[]") [TCons ("Flat","TypeDecl") []],TCons ("Prelude","[]") [TCons ("Flat","FuncDecl") []],TCons ("Prelude","[]") [TCons ("Flat","OpDecl") []],TCons ("Prelude","[]") [TCons ("Flat","Translation") []]]],Type ("Flat","TypeDecl") Public [] [Cons ("Flat","Type") 3 Public [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Int") []],TCons ("Prelude","[]") [TCons ("Flat","ConsDecl") []]]],Type ("Flat","ConsDecl") Public [] [Cons ("Flat","Cons") 3 Public [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Flat","TypeExpr") []]]],Type ("Flat","TypeExpr") Public [] [Cons ("Flat","TVar") 1 Public [TCons ("Prelude","Int") []],Cons ("Flat","FuncType") 2 Public [TCons ("Flat","TypeExpr") [],TCons ("Flat","TypeExpr") []],Cons ("Flat","TCons") 2 Public [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Flat","TypeExpr") []]]],Type ("Flat","OpDecl") Public [] [Cons ("Flat","Op") 3 Public [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Flat","Fixity") [],TCons ("Prelude","Int") []]],Type ("Flat","Fixity") Public [] [Cons ("Flat","InfixOp") 0 Public [],Cons ("Flat","InfixlOp") 0 Public [],Cons ("Flat","InfixrOp") 0 Public []],Type ("Flat","FuncDecl") Public [] [Cons ("Flat","Func") 4 Public [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","Int") [],TCons ("Flat","TypeExpr") [],TCons ("Flat","Rule") []]],Type ("Flat","Rule") Public [] [Cons ("Flat","Rule") 2 Public [TCons ("Prelude","[]") [TCons ("Prelude","Int") []],TCons ("Flat","Expr") []],Cons ("Flat","External") 1 Public [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]],Type ("Flat","CaseType") Public [] [Cons ("Flat","Rigid") 0 Public [],Cons ("Flat","Flex") 0 Public []],Type ("Flat","CombType") Public [] [Cons ("Flat","FuncCall") 0 Public [],Cons ("Flat","ConsCall") 0 Public [],Cons ("Flat","PartCall") 0 Public []],Type ("Flat","Expr") Public [] [Cons ("Flat","Var") 1 Public [TCons ("Prelude","Int") []],Cons ("Flat","Lit") 1 Public [TCons ("Flat","Literal") []],Cons ("Flat","Comb") 3 Public [TCons ("Flat","CombType") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Flat","Expr") []]],Cons ("Flat","Apply") 2 Public [TCons ("Flat","Expr") [],TCons ("Flat","Expr") []],Cons ("Flat","Constr") 2 Public [TCons ("Prelude","[]") [TCons ("Prelude","Int") []],TCons ("Flat","Expr") []],Cons ("Flat","Or") 2 Public [TCons ("Flat","Expr") [],TCons ("Flat","Expr") []],Cons ("Flat","Case") 3 Public [TCons ("Flat","CaseType") [],TCons ("Flat","Expr") [],TCons ("Prelude","[]") [TCons ("Flat","BranchExpr") []]],Cons ("Flat","Let") 2 Public [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Flat","Expr") []]],TCons ("Flat","Expr") []],Cons ("Flat","Choice") 1 Public [TCons ("Flat","Expr") []],Cons ("Flat","GuardedExpr") 3 Public [TCons ("Prelude","[]") [TCons ("Prelude","Int") []],TCons ("Flat","Expr") [],TCons ("Flat","Expr") []]],Type ("Flat","BranchExpr") Public [] [Cons ("Flat","Branch") 2 Public [TCons ("Flat","Pattern") [],TCons ("Flat","Expr") []]],Type ("Flat","Pattern") Public [] [Cons ("Flat","Pattern") 2 Public [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Int") []]],Cons ("Flat","LPattern") 1 Public [TCons ("Flat","Literal") []]],Type ("Flat","Literal") Public [] [Cons ("Flat","Intc") 1 Public [TCons ("Prelude","Int") []],Cons ("Flat","Floatc") 1 Public [TCons ("Prelude","Float") []],Cons ("Flat","Charc") 1 Public [TCons ("Prelude","Char") []]],Type ("Flat","Translation") Public [] [Cons ("Flat","Trans") 2 Public [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]] [Func ("Flat","readFlatCurry") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Flat","Prog") []])) (Rule [1] (Comb FuncCall ("Flat","readFlatCurryWithParseOptions") [Var 1,Comb FuncCall ("Distribution","setQuiet") [Comb ConsCall ("Prelude","True") [],Comb FuncCall ("Distribution","defaultParams") []]])),Func ("Flat","readFlatCurryWithParseOptions") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Distribution","FrontendParams") []) (TCons ("Prelude","IO") [TCons ("Flat","Prog") []]))) (Rule [1,2] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Directory","doesFileExist") [Comb FuncCall ("Prelude","++") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude","[]") []]]]]]]]],Comb (FuncPartCall 1) ("Flat","readFlatCurryWithParseOptions._#lambda1") [Var 2,Var 1]])),Func ("Flat","readFlatCurryWithParseOptions._#lambda1") 3 Private (FuncType (TCons ("Distribution","FrontendParams") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","IO") [TCons ("Flat","Prog") []])))) (Rule [1,2,3] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Directory","doesFileExist") [Comb FuncCall ("Prelude","++") [Var 2,Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude","[]") []]]]]]]]]],Comb (FuncPartCall 1) ("Flat","readFlatCurryWithParseOptions._#lambda1._#lambda2") [Var 3,Var 1,Var 2]])),Func ("Flat","readFlatCurryWithParseOptions._#lambda1._#lambda2") 4 Private (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Distribution","FrontendParams") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","IO") [TCons ("Flat","Prog") []]))))) (Rule [1,2,3,4] (Comb FuncCall ("Prelude",">>") [Case  Rigid (Comb FuncCall ("Prelude","||") [Var 1,Var 4]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Distribution","callFrontendWithParams") [Comb ConsCall ("Distribution","FCY") [],Var 2,Var 3]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","done") [])],Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Distribution","findFileInLoadPath") [Comb FuncCall ("Prelude","++") [Var 3,Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude","[]") []]]]]]],Comb (FuncPartCall 1) ("Flat","readFlatCurryWithParseOptions._#lambda1._#lambda2._#lambda3") []]])),Func ("Flat","readFlatCurryWithParseOptions._#lambda1._#lambda2._#lambda3") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Flat","Prog") []])) (Rule [1] (Comb FuncCall ("Flat","readFlatCurryFile") [Var 1])),Func ("Flat","readFlatCurryFile") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Flat","Prog") []])) (Rule [1] (Comb FuncCall ("Prelude","$##") [Comb (FuncPartCall 1) ("Flat","prim_readFlatCurryFile") [],Var 1])),Func ("Flat","prim_readFlatCurryFile") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Flat","Prog") []])) (External "Flat.prim_readFlatCurryFile"),Func ("Flat","splitFlatModName") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Rigid (Comb FuncCall ("Char","isAlpha") [Comb FuncCall ("Prelude","head") [Var 1]]) [Branch (Pattern ("Prelude","True") []) (Let [(2,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","break") [Comb (FuncPartCall 1) ("Prelude","flip") [Comb (FuncPartCall 2) ("Prelude","==") [],Lit (Charc  '.')]],Var 1]),(3,Comb FuncCall ("Flat","splitFlatModName._#selFP2#modname") [Var 2]),(4,Comb FuncCall ("Flat","splitFlatModName._#selFP3#rname") [Var 2])] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 4,Comb ConsCall ("Prelude","[]") []]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]],Var 1]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","(,)") [Var 3,Comb FuncCall ("Prelude","tail") [Var 4]])])),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]],Var 1]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])),Func ("Flat","splitFlatModName._#selFP2#modname") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("Flat","splitFlatModName._#selFP3#rname") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)]))] []