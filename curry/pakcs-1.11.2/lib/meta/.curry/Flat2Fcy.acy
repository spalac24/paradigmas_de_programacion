CurryProg "Flat2Fcy"
 ["Prelude","Flat","FlatCurry","ReadShowTerm"]
 []
 [CFunc ("Flat2Fcy","writeFCY") 2 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("Flat","Prog") []) (CTCons ("Prelude","IO") [CTCons ("Prelude","()") []]))) (CRules CFlex [CRule [CPVar (0,"file"),CPVar (1,"prog")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","writeFile")) (CVar (0,"file"))) (CApply (CSymbol ("ReadShowTerm","showTerm")) (CApply (CSymbol ("Flat2Fcy","flc2fcy")) (CVar (1,"prog")))))] []]),
  CFunc ("Flat2Fcy","flc2fcy") 1 Public (CFuncType (CTCons ("Flat","Prog") []) (CTCons ("FlatCurry","Prog") [])) (CRules CFlex [CRule [CPComb ("Flat","Prog") [CPVar (0,"modname"),CPVar (1,"imports"),CPVar (2,"types"),CPVar (3,"funcs"),CPVar (4,"ops"),CPVar (5,"transtable")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CApply (CSymbol ("FlatCurry","Prog")) (CVar (0,"modname"))) (CVar (1,"imports"))) (CApply (CApply (CSymbol ("Prelude","map")) (CApply (CSymbol ("Flat2Fcy","flc2fcyType")) (CVar (6,"pubnames")))) (CVar (2,"types")))) (CApply (CApply (CSymbol ("Prelude","map")) (CApply (CSymbol ("Flat2Fcy","flc2fcyFunc")) (CVar (6,"pubnames")))) (CVar (3,"funcs")))) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("Flat2Fcy","flc2fcyOp"))) (CVar (4,"ops"))))] [CLocalPat (CPVar (6,"pubnames")) (CApply (CApply (CSymbol ("Prelude","map")) (CLambda [CPComb ("Flat","Trans") [CPVar (7,"_"),CPVar (8,"n")]] (CVar (8,"n")))) (CVar (5,"transtable"))) []]]),
  CFunc ("Flat2Fcy","flc2fcyVis") 2 Private (CFuncType (CTCons ("Prelude","[]") [CTVar (0,"a")]) (CFuncType (CTVar (0,"a")) (CTCons ("FlatCurry","Visibility") []))) (CRules CFlex [CRule [CPVar (0,"pubnames"),CPVar (1,"name")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","elem")) (CVar (1,"name"))) (CVar (0,"pubnames")))) (CSymbol ("FlatCurry","Public"))) (CSymbol ("FlatCurry","Private")))] []]),
  CFunc ("Flat2Fcy","flc2fcyOp") 1 Private (CFuncType (CTCons ("Flat","OpDecl") []) (CTCons ("FlatCurry","OpDecl") [])) (CRules CFlex [CRule [CPComb ("Flat","Op") [CPVar (0,"name"),CPVar (1,"fix"),CPVar (2,"prec")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("FlatCurry","Op")) (CApply (CSymbol ("Flat","splitFlatModName")) (CVar (0,"name")))) (CApply (CSymbol ("Flat2Fcy","flc2fcyFixity")) (CVar (1,"fix")))) (CVar (2,"prec")))] []]),
  CFunc ("Flat2Fcy","flc2fcyFixity") 1 Private (CFuncType (CTCons ("Flat","Fixity") []) (CTCons ("FlatCurry","Fixity") [])) (CRules CFlex [CRule [CPComb ("Flat","InfixOp") []] [(CSymbol ("Prelude","success"),CSymbol ("FlatCurry","InfixOp"))] [],CRule [CPComb ("Flat","InfixlOp") []] [(CSymbol ("Prelude","success"),CSymbol ("FlatCurry","InfixlOp"))] [],CRule [CPComb ("Flat","InfixrOp") []] [(CSymbol ("Prelude","success"),CSymbol ("FlatCurry","InfixrOp"))] []]),
  CFunc ("Flat2Fcy","flc2fcyType") 2 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]) (CFuncType (CTCons ("Flat","TypeDecl") []) (CTCons ("FlatCurry","TypeDecl") []))) (CRules CFlex [CRule [CPVar (0,"pubnames"),CPComb ("Flat","Type") [CPVar (1,"name"),CPVar (2,"tpars"),CPVar (3,"consdecls")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CSymbol ("FlatCurry","Type")) (CApply (CSymbol ("Flat","splitFlatModName")) (CVar (1,"name")))) (CApply (CApply (CSymbol ("Flat2Fcy","flc2fcyVis")) (CVar (0,"pubnames"))) (CVar (1,"name")))) (CVar (2,"tpars"))) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("Flat2Fcy","flc2fcyCons"))) (CVar (3,"consdecls"))))] [CLocalFunc (CFunc ("Flat2Fcy","flc2fcyCons") 1 Private (CFuncType (CTCons ("Flat","ConsDecl") []) (CTCons ("FlatCurry","ConsDecl") [])) (CRules CFlex [CRule [CPComb ("Flat","Cons") [CPVar (4,"cname"),CPVar (5,"arity"),CPVar (6,"types")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CSymbol ("FlatCurry","Cons")) (CApply (CSymbol ("Flat","splitFlatModName")) (CVar (4,"cname")))) (CVar (5,"arity"))) (CApply (CApply (CSymbol ("Flat2Fcy","flc2fcyVis")) (CVar (0,"pubnames"))) (CVar (4,"cname")))) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("Flat2Fcy","flc2fcyTExp"))) (CVar (6,"types"))))] []]))]]),
  CFunc ("Flat2Fcy","flc2fcyTExp") 1 Private (CFuncType (CTCons ("Flat","TypeExpr") []) (CTCons ("FlatCurry","TypeExpr") [])) (CRules CFlex [CRule [CPComb ("Flat","FuncType") [CPVar (0,"t1"),CPVar (1,"t2")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("FlatCurry","FuncType")) (CApply (CSymbol ("Flat2Fcy","flc2fcyTExp")) (CVar (0,"t1")))) (CApply (CSymbol ("Flat2Fcy","flc2fcyTExp")) (CVar (1,"t2"))))] [],CRule [CPComb ("Flat","TCons") [CPVar (2,"tc"),CPVar (3,"ts")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("FlatCurry","TCons")) (CApply (CSymbol ("Flat","splitFlatModName")) (CVar (2,"tc")))) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("Flat2Fcy","flc2fcyTExp"))) (CVar (3,"ts"))))] [],CRule [CPComb ("Flat","TVar") [CPVar (4,"n")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("FlatCurry","TVar")) (CVar (4,"n")))] []]),
  CFunc ("Flat2Fcy","flc2fcyFunc") 2 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]) (CFuncType (CTCons ("Flat","FuncDecl") []) (CTCons ("FlatCurry","FuncDecl") []))) (CRules CFlex [CRule [CPVar (0,"pubnames"),CPComb ("Flat","Func") [CPVar (1,"name"),CPVar (2,"arity"),CPVar (3,"ftype"),CPVar (4,"rl")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CApply (CSymbol ("FlatCurry","Func")) (CApply (CSymbol ("Flat","splitFlatModName")) (CVar (1,"name")))) (CVar (2,"arity"))) (CApply (CApply (CSymbol ("Flat2Fcy","flc2fcyVis")) (CVar (0,"pubnames"))) (CVar (1,"name")))) (CApply (CSymbol ("Flat2Fcy","flc2fcyTExp")) (CVar (3,"ftype")))) (CApply (CSymbol ("Flat2Fcy","flc2fcyRule")) (CVar (4,"rl"))))] []]),
  CFunc ("Flat2Fcy","flc2fcyRule") 1 Private (CFuncType (CTCons ("Flat","Rule") []) (CTCons ("FlatCurry","Rule") [])) (CRules CFlex [CRule [CPComb ("Flat","Rule") [CPVar (0,"params"),CPVar (1,"expr")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("FlatCurry","Rule")) (CVar (0,"params"))) (CApply (CSymbol ("Flat2Fcy","flc2fcyExpr")) (CVar (1,"expr"))))] [],CRule [CPComb ("Flat","External") [CPVar (2,"name")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("FlatCurry","External")) (CVar (2,"name")))] []]),
  CFunc ("Flat2Fcy","flc2fcyCombType") 1 Private (CFuncType (CTCons ("Flat","CombType") []) (CTCons ("FlatCurry","CombType") [])) (CRules CFlex [CRule [CPComb ("Flat","FuncCall") []] [(CSymbol ("Prelude","success"),CSymbol ("FlatCurry","FuncCall"))] [],CRule [CPComb ("Flat","ConsCall") []] [(CSymbol ("Prelude","success"),CSymbol ("FlatCurry","ConsCall"))] [],CRule [CPComb ("Flat","PartCall") []] [(CSymbol ("Prelude","success"),CApply (CSymbol ("FlatCurry","FuncPartCall")) (CLit (CIntc 999)))] []]),
  CFunc ("Flat2Fcy","flc2fcyExpr") 1 Private (CFuncType (CTCons ("Flat","Expr") []) (CTCons ("FlatCurry","Expr") [])) (CRules CFlex [CRule [CPComb ("Flat","Var") [CPVar (0,"n")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("FlatCurry","Var")) (CVar (0,"n")))] [],CRule [CPComb ("Flat","Lit") [CPVar (1,"l")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("FlatCurry","Lit")) (CApply (CSymbol ("Flat2Fcy","flc2fcyLit")) (CVar (1,"l"))))] [],CRule [CPComb ("Flat","Comb") [CPVar (2,"ctype"),CPVar (3,"cf"),CPVar (4,"es")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("FlatCurry","Comb")) (CApply (CSymbol ("Flat2Fcy","flc2fcyCombType")) (CVar (2,"ctype")))) (CApply (CSymbol ("Flat","splitFlatModName")) (CVar (3,"cf")))) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("Flat2Fcy","flc2fcyExpr"))) (CVar (4,"es"))))] [],CRule [CPComb ("Flat","Apply") [CPVar (5,"e1"),CPVar (6,"e2")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("FlatCurry","Comb")) (CSymbol ("FlatCurry","FuncCall"))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'P'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]")))))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'y'))) (CSymbol ("Prelude","[]"))))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("Flat2Fcy","flc2fcyExpr")) (CVar (5,"e1")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("Flat2Fcy","flc2fcyExpr")) (CVar (6,"e2")))) (CSymbol ("Prelude","[]")))))] [],CRule [CPComb ("Flat","Constr") [CPVar (7,"xs"),CPVar (8,"e")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("FlatCurry","Free")) (CVar (7,"xs"))) (CApply (CSymbol ("Flat2Fcy","flc2fcyExpr")) (CVar (8,"e"))))] [],CRule [CPComb ("Flat","Or") [CPVar (9,"e1"),CPVar (10,"e2")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("FlatCurry","Or")) (CApply (CSymbol ("Flat2Fcy","flc2fcyExpr")) (CVar (9,"e1")))) (CApply (CSymbol ("Flat2Fcy","flc2fcyExpr")) (CVar (10,"e2"))))] [],CRule [CPComb ("Flat","Case") [CPComb ("Flat","Rigid") [],CPVar (11,"e"),CPVar (12,"bs")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("FlatCurry","Case")) (CSymbol ("FlatCurry","Rigid"))) (CApply (CSymbol ("Flat2Fcy","flc2fcyExpr")) (CVar (11,"e")))) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("Flat2Fcy","flc2fcyBranch"))) (CVar (12,"bs"))))] [],CRule [CPComb ("Flat","Case") [CPComb ("Flat","Flex") [],CPVar (13,"e"),CPVar (14,"bs")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("FlatCurry","Case")) (CSymbol ("FlatCurry","Flex"))) (CApply (CSymbol ("Flat2Fcy","flc2fcyExpr")) (CVar (13,"e")))) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("Flat2Fcy","flc2fcyBranch"))) (CVar (14,"bs"))))] [],CRule [CPComb ("Flat","GuardedExpr") [CPVar (15,"xs"),CPVar (16,"e1"),CPVar (17,"e2")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("FlatCurry","Free")) (CVar (15,"xs"))) (CApply (CApply (CApply (CSymbol ("FlatCurry","Comb")) (CSymbol ("FlatCurry","FuncCall"))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'P'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]")))))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CSymbol ("Prelude","[]")))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("Flat2Fcy","flc2fcyExpr")) (CVar (16,"e1")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("Flat2Fcy","flc2fcyExpr")) (CVar (17,"e2")))) (CSymbol ("Prelude","[]"))))))] [],CRule [CPComb ("Flat","Let") [CPVar (18,"bindings"),CPVar (19,"exp")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("FlatCurry","Let")) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("Flat2Fcy","flc2fcyBinding"))) (CVar (18,"bindings")))) (CApply (CSymbol ("Flat2Fcy","flc2fcyExpr")) (CVar (19,"exp"))))] [],CRule [CPComb ("Flat","Choice") [CPVar (20,"e")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("FlatCurry","Comb")) (CSymbol ("FlatCurry","FuncCall"))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'P'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]")))))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'h'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]")))))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("Flat2Fcy","flc2fcyExpr")) (CVar (20,"e")))) (CSymbol ("Prelude","[]"))))] []]),
  CFunc ("Flat2Fcy","flc2fcyBinding") 1 Private (CFuncType (CTCons ("Prelude","(,)") [CTCons ("Prelude","Int") [],CTCons ("Flat","Expr") []]) (CTCons ("Prelude","(,)") [CTCons ("Prelude","Int") [],CTCons ("FlatCurry","Expr") []])) (CRules CFlex [CRule [CPComb ("Prelude","(,)") [CPVar (0,"n"),CPVar (1,"exp")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","(,)")) (CVar (0,"n"))) (CApply (CSymbol ("Flat2Fcy","flc2fcyExpr")) (CVar (1,"exp"))))] []]),
  CFunc ("Flat2Fcy","flc2fcyLit") 1 Private (CFuncType (CTCons ("Flat","Literal") []) (CTCons ("FlatCurry","Literal") [])) (CRules CFlex [CRule [CPComb ("Flat","Intc") [CPVar (0,"i")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("FlatCurry","Intc")) (CVar (0,"i")))] [],CRule [CPComb ("Flat","Floatc") [CPVar (1,"f")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("FlatCurry","Floatc")) (CVar (1,"f")))] [],CRule [CPComb ("Flat","Charc") [CPVar (2,"c")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("FlatCurry","Charc")) (CVar (2,"c")))] []]),
  CFunc ("Flat2Fcy","flc2fcyBranch") 1 Private (CFuncType (CTCons ("Flat","BranchExpr") []) (CTCons ("FlatCurry","BranchExpr") [])) (CRules CFlex [CRule [CPComb ("Flat","Branch") [CPComb ("Flat","Pattern") [CPVar (0,"s"),CPVar (1,"xs")],CPVar (2,"e")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("FlatCurry","Branch")) (CApply (CApply (CSymbol ("FlatCurry","Pattern")) (CApply (CSymbol ("Flat","splitFlatModName")) (CVar (0,"s")))) (CVar (1,"xs")))) (CApply (CSymbol ("Flat2Fcy","flc2fcyExpr")) (CVar (2,"e"))))] [],CRule [CPComb ("Flat","Branch") [CPComb ("Flat","LPattern") [CPVar (3,"l")],CPVar (4,"e")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("FlatCurry","Branch")) (CApply (CSymbol ("FlatCurry","LPattern")) (CApply (CSymbol ("Flat2Fcy","flc2fcyLit")) (CVar (3,"l"))))) (CApply (CSymbol ("Flat2Fcy","flc2fcyExpr")) (CVar (4,"e"))))] []])]
 []
