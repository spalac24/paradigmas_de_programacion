CurryProg "FlatXML"
 ["Prelude","Flat","FlatTools","XML","Read"]
 []
 [CFunc ("FlatXML","flatCurryDtd") 0 Private (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'h'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ':'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '/'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '/'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'w'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'w'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'w'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '.'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'f'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'k'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '.'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '-'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'k'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '.'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '/'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '~'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'y'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '/'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'f'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'y'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '.'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CSymbol ("Prelude","[]"))))))))))))))))))))))))))))))))))))))))))))))))))))))))] []]),
  CFunc ("FlatXML","flatCurry2XmlFile") 2 Public (CFuncType (CTCons ("Flat","Prog") []) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","IO") [CTCons ("Prelude","()") []]))) (CRules CFlex [CRule [CPVar (0,"flatprog"),CPVar (1,"filename")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","writeFile")) (CVar (1,"filename"))) (CApply (CApply (CSymbol ("XML","showXmlDocWithParams")) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("XML","DtdUrl")) (CSymbol ("FlatXML","flatCurryDtd")))) (CSymbol ("Prelude","[]")))) (CApply (CSymbol ("FlatXML","flatCurry2Xml")) (CVar (0,"flatprog")))))] []]),
  CFunc ("FlatXML","flatCurry2Xml") 1 Public (CFuncType (CTCons ("Flat","Prog") []) (CTCons ("XML","XmlExp") [])) (CRules CFlex [CRule [CPComb ("Flat","Prog") [CPVar (0,"modname"),CPVar (1,"imports"),CPVar (2,"types"),CPVar (3,"funcs"),CPVar (4,"ops"),CPVar (5,"table")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("XML","xml")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'g'))) (CSymbol ("Prelude","[]"))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("XML","xml")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]"))))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("XML","xtxt")) (CVar (0,"modname")))) (CSymbol ("Prelude","[]"))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("XML","xml")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CSymbol ("Prelude","[]"))))))))) (CApply (CApply (CSymbol ("Prelude","map")) (CLambda [CPVar (6,"s")] (CApply (CApply (CSymbol ("XML","xml")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]"))))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("XML","xtxt")) (CVar (6,"s")))) (CSymbol ("Prelude","[]")))))) (CVar (1,"imports"))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("XML","xml")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'y'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CSymbol ("Prelude","[]")))))))) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("FlatXML","xmlShowType"))) (CVar (2,"types"))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("XML","xml")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'f'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CSymbol ("Prelude","[]")))))))))))) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("FlatXML","xmlShowFunc"))) (CVar (3,"funcs"))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("XML","xml")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CSymbol ("Prelude","[]")))))))))))) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("FlatXML","xmlShowOp"))) (CVar (4,"ops"))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("XML","xml")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CSymbol ("Prelude","[]")))))))))))))) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("FlatXML","xmlShowTrans"))) (CVar (5,"table"))))) (CSymbol ("Prelude","[]")))))))))] []]),
  CFunc ("FlatXML","xmlShowType") 1 Private (CFuncType (CTCons ("Flat","TypeDecl") []) (CTCons ("XML","XmlExp") [])) (CRules CFlex [CRule [CPComb ("Flat","Type") [CPVar (0,"name"),CPVar (1,"tpars"),CPVar (2,"consdecls")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("XML","XElem")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'y'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]"))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]"))))))) (CVar (0,"name")))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("XML","xml")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CSymbol ("Prelude","[]"))))))))) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("FlatXML","xmlShowTVar"))) (CVar (1,"tpars"))))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("FlatXML","xmlShowCons"))) (CVar (2,"consdecls")))))] []]),
  CFunc ("FlatXML","xmlShowCons") 1 Private (CFuncType (CTCons ("Flat","ConsDecl") []) (CTCons ("XML","XmlExp") [])) (CRules CFlex [CRule [CPComb ("Flat","Cons") [CPVar (0,"cname"),CPVar (1,"arity"),CPVar (2,"types")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("XML","XElem")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CSymbol ("Prelude","[]"))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]"))))))) (CVar (0,"cname")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'y'))) (CSymbol ("Prelude","[]")))))))) (CApply (CSymbol ("Prelude","show")) (CVar (1,"arity"))))) (CSymbol ("Prelude","[]"))))) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("FlatXML","xmlShowTypeExpr"))) (CVar (2,"types"))))] []]),
  CFunc ("FlatXML","xmlShowTypeExpr") 1 Private (CFuncType (CTCons ("Flat","TypeExpr") []) (CTCons ("XML","XmlExp") [])) (CRules CFlex [CRule [CPComb ("Flat","FuncType") [CPVar (0,"t1"),CPVar (1,"t2")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("XML","xml")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'f'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'y'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]"))))))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("FlatXML","xmlShowTypeExpr")) (CVar (0,"t1")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("FlatXML","xmlShowTypeExpr")) (CVar (1,"t2")))) (CSymbol ("Prelude","[]")))))] [],CRule [CPComb ("Flat","TCons") [CPVar (2,"tc"),CPVar (3,"ts")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("XML","XElem")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CSymbol ("Prelude","[]")))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]"))))))) (CVar (2,"tc")))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("FlatXML","xmlShowTypeExpr"))) (CVar (3,"ts"))))] [],CRule [CPComb ("Flat","TVar") [CPVar (4,"n")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("FlatXML","xmlShowTVar")) (CVar (4,"n")))] []]),
  CFunc ("FlatXML","xmlShowTVar") 1 Private (CFuncType (CTVar (0,"a")) (CTCons ("XML","XmlExp") [])) (CRules CFlex [CRule [CPVar (0,"i")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("XML","xml")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'v'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CSymbol ("Prelude","[]"))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("XML","xtxt")) (CApply (CSymbol ("Prelude","show")) (CVar (0,"i"))))) (CSymbol ("Prelude","[]"))))] []]),
  CFunc ("FlatXML","xmlShowFunc") 1 Private (CFuncType (CTCons ("Flat","FuncDecl") []) (CTCons ("XML","XmlExp") [])) (CRules CFlex [CRule [CPComb ("Flat","Func") [CPVar (0,"name"),CPVar (1,"arity"),CPVar (2,"ftype"),CPVar (3,"rl")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("XML","XElem")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'f'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CSymbol ("Prelude","[]"))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]"))))))) (CVar (0,"name")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'y'))) (CSymbol ("Prelude","[]")))))))) (CApply (CSymbol ("Prelude","show")) (CVar (1,"arity"))))) (CSymbol ("Prelude","[]"))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("FlatXML","xmlShowTypeExpr")) (CVar (2,"ftype")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("FlatXML","xmlShowRule")) (CVar (3,"rl")))) (CSymbol ("Prelude","[]")))))] []]),
  CFunc ("FlatXML","xmlShowRule") 1 Private (CFuncType (CTCons ("Flat","Rule") []) (CTCons ("XML","XmlExp") [])) (CRules CFlex [CRule [CPComb ("Flat","Rule") [CPVar (0,"params"),CPVar (1,"expr")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("XML","xml")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]"))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("XML","xml")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'h'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CSymbol ("Prelude","[]")))))) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("FlatXML","xmlShowVar"))) (CVar (0,"params"))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("XML","xml")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'h'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CSymbol ("Prelude","[]")))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("FlatXML","xmlShowExpr")) (CVar (1,"expr")))) (CSymbol ("Prelude","[]"))))) (CSymbol ("Prelude","[]")))))] [],CRule [CPComb ("Flat","External") [CPVar (2,"name")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("XML","xml")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'x'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CSymbol ("Prelude","[]"))))))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("XML","xtxt")) (CVar (2,"name")))) (CSymbol ("Prelude","[]"))))] []]),
  CFunc ("FlatXML","xmlShowVar") 1 Private (CFuncType (CTVar (0,"a")) (CTCons ("XML","XmlExp") [])) (CRules CFlex [CRule [CPVar (0,"i")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("XML","xml")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'v'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CSymbol ("Prelude","[]")))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("XML","xtxt")) (CApply (CSymbol ("Prelude","show")) (CVar (0,"i"))))) (CSymbol ("Prelude","[]"))))] []]),
  CFunc ("FlatXML","xmlShowExpr") 1 Private (CFuncType (CTCons ("Flat","Expr") []) (CTCons ("XML","XmlExp") [])) (CRules CFlex [CRule [CPComb ("Flat","Var") [CPVar (0,"n")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("FlatXML","xmlShowVar")) (CVar (0,"n")))] [],CRule [CPComb ("Flat","Lit") [CPVar (1,"l")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("XML","xml")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CSymbol ("Prelude","[]")))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("FlatXML","xmlShowLit")) (CVar (1,"l")))) (CSymbol ("Prelude","[]"))))] [],CRule [CPComb ("Flat","Comb") [CPVar (2,"ctype"),CPVar (3,"cf"),CPVar (4,"es")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("XML","XElem")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'b'))) (CSymbol ("Prelude","[]"))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'y'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]"))))))) (CApply (CSymbol ("Prelude","show")) (CVar (2,"ctype"))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]"))))))) (CVar (3,"cf")))) (CSymbol ("Prelude","[]"))))) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("FlatXML","xmlShowExpr"))) (CVar (4,"es"))))] [],CRule [CPComb ("Flat","Apply") [CPVar (5,"e1"),CPVar (6,"e2")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("XML","xml")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'y'))) (CSymbol ("Prelude","[]")))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("FlatXML","xmlShowExpr")) (CVar (5,"e1")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("FlatXML","xmlShowExpr")) (CVar (6,"e2")))) (CSymbol ("Prelude","[]")))))] [],CRule [CPComb ("Flat","Constr") [CPVar (7,"xs"),CPVar (8,"e")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("XML","xml")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CSymbol ("Prelude","[]"))))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("XML","xml")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'f'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'v'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CSymbol ("Prelude","[]"))))))))))) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("FlatXML","xmlShowVar"))) (CVar (7,"xs"))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("FlatXML","xmlShowExpr")) (CVar (8,"e")))) (CSymbol ("Prelude","[]")))))] [],CRule [CPComb ("Flat","Or") [CPVar (9,"e1"),CPVar (10,"e2")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("XML","xml")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CSymbol ("Prelude","[]"))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("FlatXML","xmlShowExpr")) (CVar (9,"e1")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("FlatXML","xmlShowExpr")) (CVar (10,"e2")))) (CSymbol ("Prelude","[]")))))] [],CRule [CPComb ("Flat","Case") [CPVar (11,"ctype"),CPVar (12,"e"),CPVar (13,"cs")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("XML","XElem")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]"))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'y'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]"))))))) (CApply (CSymbol ("Prelude","show")) (CVar (11,"ctype"))))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("FlatXML","xmlShowExpr")) (CVar (12,"e")))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("FlatXML","xmlShowBranch"))) (CVar (13,"cs")))))] [],CRule [CPComb ("Flat","GuardedExpr") [CPVar (14,"xs"),CPVar (15,"e1"),CPVar (16,"e2")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("XML","xml")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'g'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'x'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CSymbol ("Prelude","[]")))))))))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("XML","xml")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'f'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'v'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CSymbol ("Prelude","[]"))))))))))) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("FlatXML","xmlShowVar"))) (CVar (14,"xs"))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("FlatXML","xmlShowExpr")) (CVar (15,"e1")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("FlatXML","xmlShowExpr")) (CVar (16,"e2")))) (CSymbol ("Prelude","[]"))))))] [],CRule [CPComb ("Flat","Choice") [CPVar (17,"e")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("XML","xml")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'h'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]"))))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("FlatXML","xmlShowExpr")) (CVar (17,"e")))) (CSymbol ("Prelude","[]"))))] []]),
  CFunc ("FlatXML","xmlShowLit") 1 Private (CFuncType (CTCons ("Flat","Literal") []) (CTCons ("XML","XmlExp") [])) (CRules CFlex [CRule [CPComb ("Flat","Intc") [CPVar (0,"i")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("XML","xml")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CSymbol ("Prelude","[]"))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("XML","xtxt")) (CApply (CSymbol ("Prelude","show")) (CVar (0,"i"))))) (CSymbol ("Prelude","[]"))))] [],CRule [CPComb ("Flat","Floatc") [CPVar (1,"f")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("XML","xml")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'f'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CSymbol ("Prelude","[]"))))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("XML","xtxt")) (CApply (CSymbol ("Prelude","show")) (CVar (1,"f"))))) (CSymbol ("Prelude","[]"))))] [],CRule [CPComb ("Flat","Charc") [CPVar (2,"c")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("XML","xml")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'h'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CSymbol ("Prelude","[]")))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("XML","xtxt")) (CApply (CSymbol ("Prelude","show")) (CApply (CSymbol ("Prelude","ord")) (CVar (2,"c")))))) (CSymbol ("Prelude","[]"))))] []]),
  CFunc ("FlatXML","xmlShowBranch") 1 Private (CFuncType (CTCons ("Flat","BranchExpr") []) (CTCons ("XML","XmlExp") [])) (CRules CFlex [CRule [CPComb ("Flat","Branch") [CPComb ("Flat","Pattern") [CPVar (0,"cons"),CPVar (1,"xs")],CPVar (2,"e")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("XML","xml")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'b'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'h'))) (CSymbol ("Prelude","[]"))))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CApply (CSymbol ("XML","XElem")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CSymbol ("Prelude","[]")))))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]"))))))) (CVar (0,"cons")))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("FlatXML","xmlShowVar"))) (CVar (1,"xs"))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("FlatXML","xmlShowExpr")) (CVar (2,"e")))) (CSymbol ("Prelude","[]")))))] [],CRule [CPComb ("Flat","Branch") [CPComb ("Flat","LPattern") [CPVar (3,"lit")],CPVar (4,"e")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("XML","xml")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'b'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'h'))) (CSymbol ("Prelude","[]"))))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("XML","xml")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CSymbol ("Prelude","[]"))))))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("FlatXML","xmlShowLit")) (CVar (3,"lit")))) (CSymbol ("Prelude","[]"))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("FlatXML","xmlShowExpr")) (CVar (4,"e")))) (CSymbol ("Prelude","[]")))))] []]),
  CFunc ("FlatXML","xmlShowOp") 1 Private (CFuncType (CTCons ("Flat","OpDecl") []) (CTCons ("XML","XmlExp") [])) (CRules CFlex [CRule [CPComb ("Flat","Op") [CPVar (0,"name"),CPVar (1,"fix"),CPVar (2,"prec")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("XML","XElem")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CSymbol ("Prelude","[]"))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'f'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'x'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'y'))) (CSymbol ("Prelude","[]"))))))))) (CApply (CSymbol ("Prelude","show")) (CVar (1,"fix"))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CSymbol ("Prelude","[]"))))))) (CApply (CSymbol ("Prelude","show")) (CVar (2,"prec"))))) (CSymbol ("Prelude","[]"))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("XML","xtxt")) (CVar (0,"name")))) (CSymbol ("Prelude","[]"))))] []]),
  CFunc ("FlatXML","xmlShowTrans") 1 Private (CFuncType (CTCons ("Flat","Translation") []) (CTCons ("XML","XmlExp") [])) (CRules CFlex [CRule [CPComb ("Flat","Trans") [CPVar (0,"n"),CPVar (1,"intn")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("XML","xml")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CSymbol ("Prelude","[]")))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("XML","xml")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]"))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("XML","xtxt")) (CVar (0,"n")))) (CSymbol ("Prelude","[]"))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("XML","xml")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]")))))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("XML","xtxt")) (CVar (1,"intn")))) (CSymbol ("Prelude","[]"))))) (CSymbol ("Prelude","[]")))))] []]),
  CFunc ("FlatXML","xmlFile2FlatCurry") 1 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","IO") [CTCons ("Flat","Prog") []])) (CRules CFlex [CRule [CPVar (0,"filename")] [(CSymbol ("Prelude","success"),CDoExpr [CSPat (CPVar (1,"xexp")) (CApply (CSymbol ("XML","readXmlFile")) (CVar (0,"filename"))),CSExpr (CApply (CSymbol ("Prelude","return")) (CApply (CSymbol ("FlatXML","xml2FlatCurry")) (CVar (1,"xexp"))))])] []]),
  CFunc ("FlatXML","xml2FlatCurry") 1 Public (CFuncType (CTCons ("XML","XmlExp") []) (CTCons ("Flat","Prog") [])) (CRules CFlex [CRule [CPComb ("XML","XElem") [CPComb ("Prelude",":") [CPLit (CCharc 'p'),CPComb ("Prelude",":") [CPLit (CCharc 'r'),CPComb ("Prelude",":") [CPLit (CCharc 'o'),CPComb ("Prelude",":") [CPLit (CCharc 'g'),CPComb ("Prelude","[]") []]]]],CPComb ("Prelude","[]") [],CPComb ("Prelude",":") [CPComb ("XML","XElem") [CPComb ("Prelude",":") [CPLit (CCharc 'm'),CPComb ("Prelude",":") [CPLit (CCharc 'o'),CPComb ("Prelude",":") [CPLit (CCharc 'd'),CPComb ("Prelude",":") [CPLit (CCharc 'u'),CPComb ("Prelude",":") [CPLit (CCharc 'l'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude","[]") []]]]]]],CPComb ("Prelude","[]") [],CPVar (0,"xmodname")],CPComb ("Prelude",":") [CPComb ("XML","XElem") [CPComb ("Prelude",":") [CPLit (CCharc 'i'),CPComb ("Prelude",":") [CPLit (CCharc 'm'),CPComb ("Prelude",":") [CPLit (CCharc 'p'),CPComb ("Prelude",":") [CPLit (CCharc 'o'),CPComb ("Prelude",":") [CPLit (CCharc 'r'),CPComb ("Prelude",":") [CPLit (CCharc 't'),CPComb ("Prelude","[]") []]]]]]],CPComb ("Prelude","[]") [],CPVar (1,"ximports")],CPComb ("Prelude",":") [CPComb ("XML","XElem") [CPComb ("Prelude",":") [CPLit (CCharc 't'),CPComb ("Prelude",":") [CPLit (CCharc 'y'),CPComb ("Prelude",":") [CPLit (CCharc 'p'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude",":") [CPLit (CCharc 's'),CPComb ("Prelude","[]") []]]]]],CPComb ("Prelude","[]") [],CPVar (2,"xtypes")],CPComb ("Prelude",":") [CPComb ("XML","XElem") [CPComb ("Prelude",":") [CPLit (CCharc 'f'),CPComb ("Prelude",":") [CPLit (CCharc 'u'),CPComb ("Prelude",":") [CPLit (CCharc 'n'),CPComb ("Prelude",":") [CPLit (CCharc 'c'),CPComb ("Prelude",":") [CPLit (CCharc 't'),CPComb ("Prelude",":") [CPLit (CCharc 'i'),CPComb ("Prelude",":") [CPLit (CCharc 'o'),CPComb ("Prelude",":") [CPLit (CCharc 'n'),CPComb ("Prelude",":") [CPLit (CCharc 's'),CPComb ("Prelude","[]") []]]]]]]]]],CPComb ("Prelude","[]") [],CPVar (3,"xfunctions")],CPComb ("Prelude",":") [CPComb ("XML","XElem") [CPComb ("Prelude",":") [CPLit (CCharc 'o'),CPComb ("Prelude",":") [CPLit (CCharc 'p'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude",":") [CPLit (CCharc 'r'),CPComb ("Prelude",":") [CPLit (CCharc 'a'),CPComb ("Prelude",":") [CPLit (CCharc 't'),CPComb ("Prelude",":") [CPLit (CCharc 'o'),CPComb ("Prelude",":") [CPLit (CCharc 'r'),CPComb ("Prelude",":") [CPLit (CCharc 's'),CPComb ("Prelude","[]") []]]]]]]]]],CPComb ("Prelude","[]") [],CPVar (4,"xoperators")],CPComb ("Prelude",":") [CPComb ("XML","XElem") [CPComb ("Prelude",":") [CPLit (CCharc 't'),CPComb ("Prelude",":") [CPLit (CCharc 'r'),CPComb ("Prelude",":") [CPLit (CCharc 'a'),CPComb ("Prelude",":") [CPLit (CCharc 'n'),CPComb ("Prelude",":") [CPLit (CCharc 's'),CPComb ("Prelude",":") [CPLit (CCharc 'l'),CPComb ("Prelude",":") [CPLit (CCharc 'a'),CPComb ("Prelude",":") [CPLit (CCharc 't'),CPComb ("Prelude",":") [CPLit (CCharc 'i'),CPComb ("Prelude",":") [CPLit (CCharc 'o'),CPComb ("Prelude",":") [CPLit (CCharc 'n'),CPComb ("Prelude","[]") []]]]]]]]]]]],CPComb ("Prelude","[]") [],CPVar (5,"xtable")],CPComb ("Prelude","[]") []]]]]]]]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CApply (CApply (CSymbol ("Flat","Prog")) (CApply (CSymbol ("FlatXML","flatx2String")) (CVar (0,"xmodname")))) (CApply (CApply (CSymbol ("Prelude","map")) (CLambda [CPComb ("XML","XElem") [CPComb ("Prelude",":") [CPLit (CCharc 'm'),CPComb ("Prelude",":") [CPLit (CCharc 'o'),CPComb ("Prelude",":") [CPLit (CCharc 'd'),CPComb ("Prelude",":") [CPLit (CCharc 'u'),CPComb ("Prelude",":") [CPLit (CCharc 'l'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude","[]") []]]]]]],CPComb ("Prelude","[]") [],CPVar (6,"xim")]] (CApply (CSymbol ("FlatXML","flatx2String")) (CVar (6,"xim"))))) (CVar (1,"ximports")))) (CApply (CApply (CSymbol ("Prelude","map")) (CLambda [CPComb ("XML","XElem") [CPComb ("Prelude",":") [CPLit (CCharc 't'),CPComb ("Prelude",":") [CPLit (CCharc 'y'),CPComb ("Prelude",":") [CPLit (CCharc 'p'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude","[]") []]]]],CPComb ("Prelude",":") [CPComb ("Prelude","(,)") [CPComb ("Prelude",":") [CPLit (CCharc 'n'),CPComb ("Prelude",":") [CPLit (CCharc 'a'),CPComb ("Prelude",":") [CPLit (CCharc 'm'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude","[]") []]]]],CPVar (7,"tname")],CPComb ("Prelude","[]") []],CPComb ("Prelude",":") [CPComb ("XML","XElem") [CPComb ("Prelude",":") [CPLit (CCharc 'p'),CPComb ("Prelude",":") [CPLit (CCharc 'a'),CPComb ("Prelude",":") [CPLit (CCharc 'r'),CPComb ("Prelude",":") [CPLit (CCharc 'a'),CPComb ("Prelude",":") [CPLit (CCharc 'm'),CPComb ("Prelude",":") [CPLit (CCharc 's'),CPComb ("Prelude","[]") []]]]]]],CPComb ("Prelude","[]") [],CPVar (8,"xtvars")],CPVar (9,"xconstructors")]]] (CApply (CApply (CApply (CSymbol ("Flat","Type")) (CVar (7,"tname"))) (CApply (CApply (CSymbol ("Prelude","map")) (CLambda [CPComb ("XML","XElem") [CPComb ("Prelude",":") [CPLit (CCharc 't'),CPComb ("Prelude",":") [CPLit (CCharc 'v'),CPComb ("Prelude",":") [CPLit (CCharc 'a'),CPComb ("Prelude",":") [CPLit (CCharc 'r'),CPComb ("Prelude","[]") []]]]],CPComb ("Prelude","[]") [],CPVar (10,"xtvar")]] (CApply (CSymbol ("Read","readNat")) (CApply (CSymbol ("FlatXML","flatx2String")) (CVar (10,"xtvar")))))) (CVar (8,"xtvars")))) (CApply (CApply (CSymbol ("Prelude","map")) (CLambda [CPComb ("XML","XElem") [CPComb ("Prelude",":") [CPLit (CCharc 'c'),CPComb ("Prelude",":") [CPLit (CCharc 'o'),CPComb ("Prelude",":") [CPLit (CCharc 'n'),CPComb ("Prelude",":") [CPLit (CCharc 's'),CPComb ("Prelude","[]") []]]]],CPComb ("Prelude",":") [CPComb ("Prelude","(,)") [CPComb ("Prelude",":") [CPLit (CCharc 'n'),CPComb ("Prelude",":") [CPLit (CCharc 'a'),CPComb ("Prelude",":") [CPLit (CCharc 'm'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude","[]") []]]]],CPVar (11,"xcn")],CPComb ("Prelude",":") [CPComb ("Prelude","(,)") [CPComb ("Prelude",":") [CPLit (CCharc 'a'),CPComb ("Prelude",":") [CPLit (CCharc 'r'),CPComb ("Prelude",":") [CPLit (CCharc 'i'),CPComb ("Prelude",":") [CPLit (CCharc 't'),CPComb ("Prelude",":") [CPLit (CCharc 'y'),CPComb ("Prelude","[]") []]]]]],CPVar (12,"xar")],CPComb ("Prelude","[]") []]],CPVar (13,"xtexps")]] (CApply (CApply (CApply (CSymbol ("Flat","Cons")) (CVar (11,"xcn"))) (CApply (CSymbol ("Read","readNat")) (CVar (12,"xar")))) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("FlatXML","flatx2texp"))) (CVar (13,"xtexps")))))) (CVar (9,"xconstructors")))))) (CVar (2,"xtypes")))) (CApply (CApply (CSymbol ("Prelude","map")) (CLambda [CPComb ("XML","XElem") [CPComb ("Prelude",":") [CPLit (CCharc 'f'),CPComb ("Prelude",":") [CPLit (CCharc 'u'),CPComb ("Prelude",":") [CPLit (CCharc 'n'),CPComb ("Prelude",":") [CPLit (CCharc 'c'),CPComb ("Prelude","[]") []]]]],CPComb ("Prelude",":") [CPComb ("Prelude","(,)") [CPComb ("Prelude",":") [CPLit (CCharc 'n'),CPComb ("Prelude",":") [CPLit (CCharc 'a'),CPComb ("Prelude",":") [CPLit (CCharc 'm'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude","[]") []]]]],CPVar (14,"fname")],CPComb ("Prelude",":") [CPComb ("Prelude","(,)") [CPComb ("Prelude",":") [CPLit (CCharc 'a'),CPComb ("Prelude",":") [CPLit (CCharc 'r'),CPComb ("Prelude",":") [CPLit (CCharc 'i'),CPComb ("Prelude",":") [CPLit (CCharc 't'),CPComb ("Prelude",":") [CPLit (CCharc 'y'),CPComb ("Prelude","[]") []]]]]],CPVar (15,"farity")],CPComb ("Prelude","[]") []]],CPComb ("Prelude",":") [CPVar (16,"xftype"),CPComb ("Prelude",":") [CPVar (17,"xfbody"),CPComb ("Prelude","[]") []]]]] (CApply (CApply (CApply (CApply (CSymbol ("Flat","Func")) (CVar (14,"fname"))) (CApply (CSymbol ("Read","readNat")) (CVar (15,"farity")))) (CApply (CSymbol ("FlatXML","flatx2texp")) (CVar (16,"xftype")))) (CApply (CSymbol ("FlatXML","flatx2FunBody")) (CVar (17,"xfbody")))))) (CVar (3,"xfunctions")))) (CApply (CApply (CSymbol ("Prelude","map")) (CLambda [CPComb ("XML","XElem") [CPComb ("Prelude",":") [CPLit (CCharc 'o'),CPComb ("Prelude",":") [CPLit (CCharc 'p'),CPComb ("Prelude","[]") []]],CPComb ("Prelude",":") [CPComb ("Prelude","(,)") [CPComb ("Prelude",":") [CPLit (CCharc 'f'),CPComb ("Prelude",":") [CPLit (CCharc 'i'),CPComb ("Prelude",":") [CPLit (CCharc 'x'),CPComb ("Prelude",":") [CPLit (CCharc 'i'),CPComb ("Prelude",":") [CPLit (CCharc 't'),CPComb ("Prelude",":") [CPLit (CCharc 'y'),CPComb ("Prelude","[]") []]]]]]],CPVar (18,"xfix")],CPComb ("Prelude",":") [CPComb ("Prelude","(,)") [CPComb ("Prelude",":") [CPLit (CCharc 'p'),CPComb ("Prelude",":") [CPLit (CCharc 'r'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude",":") [CPLit (CCharc 'c'),CPComb ("Prelude","[]") []]]]],CPVar (19,"xprec")],CPComb ("Prelude","[]") []]],CPVar (20,"xop")]] (CApply (CApply (CApply (CSymbol ("Flat","Op")) (CApply (CSymbol ("FlatXML","flatx2String")) (CVar (20,"xop")))) (CApply (CSymbol ("FlatXML","flatx2Fixity")) (CVar (18,"xfix")))) (CApply (CSymbol ("Read","readNat")) (CVar (19,"xprec")))))) (CVar (4,"xoperators")))) (CApply (CApply (CSymbol ("Prelude","map")) (CLambda [CPComb ("XML","XElem") [CPComb ("Prelude",":") [CPLit (CCharc 't'),CPComb ("Prelude",":") [CPLit (CCharc 'r'),CPComb ("Prelude",":") [CPLit (CCharc 'a'),CPComb ("Prelude",":") [CPLit (CCharc 'n'),CPComb ("Prelude",":") [CPLit (CCharc 's'),CPComb ("Prelude","[]") []]]]]],CPComb ("Prelude","[]") [],CPComb ("Prelude",":") [CPComb ("XML","XElem") [CPComb ("Prelude",":") [CPLit (CCharc 'n'),CPComb ("Prelude",":") [CPLit (CCharc 'a'),CPComb ("Prelude",":") [CPLit (CCharc 'm'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude","[]") []]]]],CPComb ("Prelude","[]") [],CPVar (21,"xtn")],CPComb ("Prelude",":") [CPComb ("XML","XElem") [CPComb ("Prelude",":") [CPLit (CCharc 'i'),CPComb ("Prelude",":") [CPLit (CCharc 'n'),CPComb ("Prelude",":") [CPLit (CCharc 't'),CPComb ("Prelude",":") [CPLit (CCharc 'n'),CPComb ("Prelude",":") [CPLit (CCharc 'a'),CPComb ("Prelude",":") [CPLit (CCharc 'm'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude","[]") []]]]]]]],CPComb ("Prelude","[]") [],CPVar (22,"xtin")],CPComb ("Prelude","[]") []]]]] (CApply (CApply (CSymbol ("Flat","Trans")) (CApply (CSymbol ("FlatXML","flatx2String")) (CVar (21,"xtn")))) (CApply (CSymbol ("FlatXML","flatx2String")) (CVar (22,"xtin")))))) (CVar (5,"xtable"))))] []]),
  CFunc ("FlatXML","flatx2FunBody") 1 Private (CFuncType (CTCons ("XML","XmlExp") []) (CTCons ("Flat","Rule") [])) (CRules CFlex [CRule [CPComb ("XML","XElem") [CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude",":") [CPLit (CCharc 'x'),CPComb ("Prelude",":") [CPLit (CCharc 't'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude",":") [CPLit (CCharc 'r'),CPComb ("Prelude",":") [CPLit (CCharc 'n'),CPComb ("Prelude",":") [CPLit (CCharc 'a'),CPComb ("Prelude",":") [CPLit (CCharc 'l'),CPComb ("Prelude","[]") []]]]]]]]],CPComb ("Prelude","[]") [],CPVar (0,"xename")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Flat","External")) (CApply (CSymbol ("FlatXML","flatx2String")) (CVar (0,"xename"))))] [],CRule [CPComb ("XML","XElem") [CPComb ("Prelude",":") [CPLit (CCharc 'r'),CPComb ("Prelude",":") [CPLit (CCharc 'u'),CPComb ("Prelude",":") [CPLit (CCharc 'l'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude","[]") []]]]],CPComb ("Prelude","[]") [],CPComb ("Prelude",":") [CPComb ("XML","XElem") [CPComb ("Prelude",":") [CPLit (CCharc 'l'),CPComb ("Prelude",":") [CPLit (CCharc 'h'),CPComb ("Prelude",":") [CPLit (CCharc 's'),CPComb ("Prelude","[]") []]]],CPComb ("Prelude","[]") [],CPVar (1,"xvars")],CPComb ("Prelude",":") [CPComb ("XML","XElem") [CPComb ("Prelude",":") [CPLit (CCharc 'r'),CPComb ("Prelude",":") [CPLit (CCharc 'h'),CPComb ("Prelude",":") [CPLit (CCharc 's'),CPComb ("Prelude","[]") []]]],CPComb ("Prelude","[]") [],CPComb ("Prelude",":") [CPVar (2,"xrhs"),CPComb ("Prelude","[]") []]],CPComb ("Prelude","[]") []]]]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Flat","Rule")) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("FlatXML","flatx2var"))) (CVar (1,"xvars")))) (CApply (CSymbol ("FlatXML","flatx2exp")) (CVar (2,"xrhs"))))] []]),
  CFunc ("FlatXML","flatx2var") 1 Private (CFuncType (CTCons ("XML","XmlExp") []) (CTCons ("Prelude","Int") [])) (CRules CFlex [CRule [CPComb ("XML","XElem") [CPComb ("Prelude",":") [CPLit (CCharc 'v'),CPComb ("Prelude",":") [CPLit (CCharc 'a'),CPComb ("Prelude",":") [CPLit (CCharc 'r'),CPComb ("Prelude","[]") []]]],CPComb ("Prelude","[]") [],CPVar (0,"xvar")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Read","readNat")) (CApply (CSymbol ("FlatXML","flatx2String")) (CVar (0,"xvar"))))] []]),
  CFunc ("FlatXML","flatx2exp") 1 Private (CFuncType (CTCons ("XML","XmlExp") []) (CTCons ("Flat","Expr") [])) (CRules CFlex [CRule [CPComb ("XML","XElem") [CPComb ("Prelude",":") [CPLit (CCharc 'v'),CPComb ("Prelude",":") [CPLit (CCharc 'a'),CPComb ("Prelude",":") [CPLit (CCharc 'r'),CPComb ("Prelude","[]") []]]],CPComb ("Prelude","[]") [],CPVar (0,"xvar")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Flat","Var")) (CApply (CSymbol ("Read","readNat")) (CApply (CSymbol ("FlatXML","flatx2String")) (CVar (0,"xvar")))))] [],CRule [CPComb ("XML","XElem") [CPComb ("Prelude",":") [CPLit (CCharc 'l'),CPComb ("Prelude",":") [CPLit (CCharc 'i'),CPComb ("Prelude",":") [CPLit (CCharc 't'),CPComb ("Prelude","[]") []]]],CPComb ("Prelude","[]") [],CPComb ("Prelude",":") [CPVar (1,"xlit"),CPComb ("Prelude","[]") []]]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Flat","Lit")) (CApply (CSymbol ("FlatXML","flatx2lit")) (CVar (1,"xlit"))))] [],CRule [CPComb ("XML","XElem") [CPComb ("Prelude",":") [CPLit (CCharc 'c'),CPComb ("Prelude",":") [CPLit (CCharc 'o'),CPComb ("Prelude",":") [CPLit (CCharc 'm'),CPComb ("Prelude",":") [CPLit (CCharc 'b'),CPComb ("Prelude","[]") []]]]],CPComb ("Prelude",":") [CPComb ("Prelude","(,)") [CPComb ("Prelude",":") [CPLit (CCharc 't'),CPComb ("Prelude",":") [CPLit (CCharc 'y'),CPComb ("Prelude",":") [CPLit (CCharc 'p'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude","[]") []]]]],CPVar (2,"ctype")],CPComb ("Prelude",":") [CPComb ("Prelude","(,)") [CPComb ("Prelude",":") [CPLit (CCharc 'n'),CPComb ("Prelude",":") [CPLit (CCharc 'a'),CPComb ("Prelude",":") [CPLit (CCharc 'm'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude","[]") []]]]],CPVar (3,"cname")],CPComb ("Prelude","[]") []]],CPVar (4,"xexps")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Flat","Comb")) (CApply (CSymbol ("FlatXML","flatx2CombType")) (CVar (2,"ctype")))) (CVar (3,"cname"))) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("FlatXML","flatx2exp"))) (CVar (4,"xexps"))))] [],CRule [CPComb ("XML","XElem") [CPComb ("Prelude",":") [CPLit (CCharc 'a'),CPComb ("Prelude",":") [CPLit (CCharc 'p'),CPComb ("Prelude",":") [CPLit (CCharc 'p'),CPComb ("Prelude",":") [CPLit (CCharc 'l'),CPComb ("Prelude",":") [CPLit (CCharc 'y'),CPComb ("Prelude","[]") []]]]]],CPComb ("Prelude","[]") [],CPComb ("Prelude",":") [CPVar (5,"xexp1"),CPComb ("Prelude",":") [CPVar (6,"xexp2"),CPComb ("Prelude","[]") []]]]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Flat","Apply")) (CApply (CSymbol ("FlatXML","flatx2exp")) (CVar (5,"xexp1")))) (CApply (CSymbol ("FlatXML","flatx2exp")) (CVar (6,"xexp2"))))] [],CRule [CPComb ("XML","XElem") [CPComb ("Prelude",":") [CPLit (CCharc 'c'),CPComb ("Prelude",":") [CPLit (CCharc 'o'),CPComb ("Prelude",":") [CPLit (CCharc 'n'),CPComb ("Prelude",":") [CPLit (CCharc 's'),CPComb ("Prelude",":") [CPLit (CCharc 't'),CPComb ("Prelude",":") [CPLit (CCharc 'r'),CPComb ("Prelude","[]") []]]]]]],CPComb ("Prelude","[]") [],CPComb ("Prelude",":") [CPComb ("XML","XElem") [CPComb ("Prelude",":") [CPLit (CCharc 'f'),CPComb ("Prelude",":") [CPLit (CCharc 'r'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude",":") [CPLit (CCharc 'v'),CPComb ("Prelude",":") [CPLit (CCharc 'a'),CPComb ("Prelude",":") [CPLit (CCharc 'r'),CPComb ("Prelude",":") [CPLit (CCharc 's'),CPComb ("Prelude","[]") []]]]]]]]],CPComb ("Prelude","[]") [],CPVar (7,"xvars")],CPComb ("Prelude",":") [CPVar (8,"xexp"),CPComb ("Prelude","[]") []]]]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Flat","Constr")) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("FlatXML","flatx2var"))) (CVar (7,"xvars")))) (CApply (CSymbol ("FlatXML","flatx2exp")) (CVar (8,"xexp"))))] [],CRule [CPComb ("XML","XElem") [CPComb ("Prelude",":") [CPLit (CCharc 'o'),CPComb ("Prelude",":") [CPLit (CCharc 'r'),CPComb ("Prelude","[]") []]],CPComb ("Prelude","[]") [],CPComb ("Prelude",":") [CPVar (9,"xexp1"),CPComb ("Prelude",":") [CPVar (10,"xexp2"),CPComb ("Prelude","[]") []]]]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Flat","Or")) (CApply (CSymbol ("FlatXML","flatx2exp")) (CVar (9,"xexp1")))) (CApply (CSymbol ("FlatXML","flatx2exp")) (CVar (10,"xexp2"))))] [],CRule [CPComb ("XML","XElem") [CPComb ("Prelude",":") [CPLit (CCharc 'c'),CPComb ("Prelude",":") [CPLit (CCharc 'a'),CPComb ("Prelude",":") [CPLit (CCharc 's'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude","[]") []]]]],CPComb ("Prelude",":") [CPComb ("Prelude","(,)") [CPComb ("Prelude",":") [CPLit (CCharc 't'),CPComb ("Prelude",":") [CPLit (CCharc 'y'),CPComb ("Prelude",":") [CPLit (CCharc 'p'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude","[]") []]]]],CPVar (11,"ctype")],CPComb ("Prelude","[]") []],CPComb ("Prelude",":") [CPVar (12,"xexp"),CPVar (13,"xbranches")]]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Flat","Case")) (CApply (CSymbol ("FlatXML","flatx2CaseType")) (CVar (11,"ctype")))) (CApply (CSymbol ("FlatXML","flatx2exp")) (CVar (12,"xexp")))) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("FlatXML","flatx2branch"))) (CVar (13,"xbranches"))))] [CLocalFunc (CFunc ("FlatXML","flatx2CaseType") 1 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Flat","CaseType") [])) (CRules CFlex [CRule [CPComb ("Prelude",":") [CPLit (CCharc 'R'),CPComb ("Prelude",":") [CPLit (CCharc 'i'),CPComb ("Prelude",":") [CPLit (CCharc 'g'),CPComb ("Prelude",":") [CPLit (CCharc 'i'),CPComb ("Prelude",":") [CPLit (CCharc 'd'),CPComb ("Prelude","[]") []]]]]]] [(CSymbol ("Prelude","success"),CSymbol ("Flat","Rigid"))] [],CRule [CPComb ("Prelude",":") [CPLit (CCharc 'F'),CPComb ("Prelude",":") [CPLit (CCharc 'l'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude",":") [CPLit (CCharc 'x'),CPComb ("Prelude","[]") []]]]]] [(CSymbol ("Prelude","success"),CSymbol ("Flat","Flex"))] []]))],CRule [CPComb ("XML","XElem") [CPComb ("Prelude",":") [CPLit (CCharc 'g'),CPComb ("Prelude",":") [CPLit (CCharc 'u'),CPComb ("Prelude",":") [CPLit (CCharc 'a'),CPComb ("Prelude",":") [CPLit (CCharc 'r'),CPComb ("Prelude",":") [CPLit (CCharc 'd'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude",":") [CPLit (CCharc 'd'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude",":") [CPLit (CCharc 'x'),CPComb ("Prelude",":") [CPLit (CCharc 'p'),CPComb ("Prelude",":") [CPLit (CCharc 'r'),CPComb ("Prelude","[]") []]]]]]]]]]]],CPComb ("Prelude","[]") [],CPComb ("Prelude",":") [CPComb ("XML","XElem") [CPComb ("Prelude",":") [CPLit (CCharc 'f'),CPComb ("Prelude",":") [CPLit (CCharc 'r'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude",":") [CPLit (CCharc 'v'),CPComb ("Prelude",":") [CPLit (CCharc 'a'),CPComb ("Prelude",":") [CPLit (CCharc 'r'),CPComb ("Prelude",":") [CPLit (CCharc 's'),CPComb ("Prelude","[]") []]]]]]]]],CPComb ("Prelude","[]") [],CPVar (14,"xvars")],CPComb ("Prelude",":") [CPVar (15,"xexp1"),CPComb ("Prelude",":") [CPVar (16,"xexp2"),CPComb ("Prelude","[]") []]]]]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Flat","GuardedExpr")) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("FlatXML","flatx2var"))) (CVar (14,"xvars")))) (CApply (CSymbol ("FlatXML","flatx2exp")) (CVar (15,"xexp1")))) (CApply (CSymbol ("FlatXML","flatx2exp")) (CVar (16,"xexp2"))))] [],CRule [CPComb ("XML","XElem") [CPComb ("Prelude",":") [CPLit (CCharc 'c'),CPComb ("Prelude",":") [CPLit (CCharc 'h'),CPComb ("Prelude",":") [CPLit (CCharc 'o'),CPComb ("Prelude",":") [CPLit (CCharc 'i'),CPComb ("Prelude",":") [CPLit (CCharc 'c'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude","[]") []]]]]]],CPComb ("Prelude","[]") [],CPComb ("Prelude",":") [CPVar (17,"xexp"),CPComb ("Prelude","[]") []]]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Flat","Choice")) (CApply (CSymbol ("FlatXML","flatx2exp")) (CVar (17,"xexp"))))] [],CRule [CPComb ("XML","XElem") [CPComb ("Prelude",":") [CPLit (CCharc 'l'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude",":") [CPLit (CCharc 't'),CPComb ("Prelude","[]") []]]],CPComb ("Prelude","[]") [],CPVar (18,"xbindings")]] [(CSymbol ("Prelude","success"),CLetDecl [CLocalPat (CPComb ("Prelude","(,)") [CPVar (19,"bindings"),CPVar (20,"exp")]) (CApply (CSymbol ("FlatXML","flatx2let")) (CVar (18,"xbindings"))) []] (CApply (CApply (CSymbol ("Flat","Let")) (CVar (19,"bindings"))) (CVar (20,"exp"))))] [],CRule [CPComb ("XML","XElem") [CPComb ("Prelude",":") [CPLit (CCharc 'l'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude",":") [CPLit (CCharc 't'),CPComb ("Prelude",":") [CPLit (CCharc 'r'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude",":") [CPLit (CCharc 'c'),CPComb ("Prelude","[]") []]]]]]],CPComb ("Prelude","[]") [],CPVar (21,"xbindings")]] [(CSymbol ("Prelude","success"),CLetDecl [CLocalPat (CPComb ("Prelude","(,)") [CPVar (22,"bindings"),CPVar (23,"exp")]) (CApply (CSymbol ("FlatXML","flatx2let")) (CVar (21,"xbindings"))) []] (CApply (CApply (CSymbol ("Flat","Let")) (CVar (22,"bindings"))) (CVar (23,"exp"))))] []]),
  CFunc ("FlatXML","flatx2let") 1 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("XML","XmlExp") []]) (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","Int") [],CTCons ("Flat","Expr") []]],CTCons ("Flat","Expr") []])) (CRules CFlex [CRule [CPComb ("Prelude",":") [CPVar (0,"xexp"),CPComb ("Prelude","[]") []]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","(,)")) (CSymbol ("Prelude","[]"))) (CApply (CSymbol ("FlatXML","flatx2exp")) (CVar (0,"xexp"))))] [],CRule [CPComb ("Prelude",":") [CPComb ("XML","XElem") [CPComb ("Prelude",":") [CPLit (CCharc 'b'),CPComb ("Prelude",":") [CPLit (CCharc 'i'),CPComb ("Prelude",":") [CPLit (CCharc 'n'),CPComb ("Prelude",":") [CPLit (CCharc 'd'),CPComb ("Prelude",":") [CPLit (CCharc 'i'),CPComb ("Prelude",":") [CPLit (CCharc 'n'),CPComb ("Prelude",":") [CPLit (CCharc 'g'),CPComb ("Prelude","[]") []]]]]]]],CPComb ("Prelude","[]") [],CPComb ("Prelude",":") [CPComb ("XML","XElem") [CPComb ("Prelude",":") [CPLit (CCharc 'v'),CPComb ("Prelude",":") [CPLit (CCharc 'a'),CPComb ("Prelude",":") [CPLit (CCharc 'r'),CPComb ("Prelude","[]") []]]],CPComb ("Prelude","[]") [],CPVar (1,"xvar")],CPComb ("Prelude",":") [CPVar (2,"xexp"),CPComb ("Prelude","[]") []]]],CPComb ("Prelude",":") [CPVar (3,"xb"),CPVar (4,"xbs")]]] [(CSymbol ("Prelude","success"),CLetDecl [CLocalPat (CPComb ("Prelude","(,)") [CPVar (5,"bindings"),CPVar (6,"exp")]) (CApply (CSymbol ("FlatXML","flatx2let")) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (3,"xb"))) (CVar (4,"xbs")))) []] (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CSymbol ("Read","readNat")) (CApply (CSymbol ("FlatXML","flatx2String")) (CVar (1,"xvar"))))) (CApply (CSymbol ("FlatXML","flatx2exp")) (CVar (2,"xexp"))))) (CVar (5,"bindings")))) (CVar (6,"exp"))))] []]),
  CFunc ("FlatXML","flatx2branch") 1 Private (CFuncType (CTCons ("XML","XmlExp") []) (CTCons ("Flat","BranchExpr") [])) (CRules CFlex [CRule [CPComb ("XML","XElem") [CPComb ("Prelude",":") [CPLit (CCharc 'b'),CPComb ("Prelude",":") [CPLit (CCharc 'r'),CPComb ("Prelude",":") [CPLit (CCharc 'a'),CPComb ("Prelude",":") [CPLit (CCharc 'n'),CPComb ("Prelude",":") [CPLit (CCharc 'c'),CPComb ("Prelude",":") [CPLit (CCharc 'h'),CPComb ("Prelude","[]") []]]]]]],CPComb ("Prelude","[]") [],CPComb ("Prelude",":") [CPComb ("XML","XElem") [CPComb ("Prelude",":") [CPLit (CCharc 'p'),CPComb ("Prelude",":") [CPLit (CCharc 'a'),CPComb ("Prelude",":") [CPLit (CCharc 't'),CPComb ("Prelude",":") [CPLit (CCharc 't'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude",":") [CPLit (CCharc 'r'),CPComb ("Prelude",":") [CPLit (CCharc 'n'),CPComb ("Prelude","[]") []]]]]]]],CPComb ("Prelude",":") [CPComb ("Prelude","(,)") [CPComb ("Prelude",":") [CPLit (CCharc 'n'),CPComb ("Prelude",":") [CPLit (CCharc 'a'),CPComb ("Prelude",":") [CPLit (CCharc 'm'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude","[]") []]]]],CPVar (0,"cons")],CPComb ("Prelude","[]") []],CPVar (1,"xvars")],CPComb ("Prelude",":") [CPVar (2,"xexp"),CPComb ("Prelude","[]") []]]]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Flat","Branch")) (CApply (CApply (CSymbol ("Flat","Pattern")) (CVar (0,"cons"))) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("FlatXML","flatx2var"))) (CVar (1,"xvars"))))) (CApply (CSymbol ("FlatXML","flatx2exp")) (CVar (2,"xexp"))))] [],CRule [CPComb ("XML","XElem") [CPComb ("Prelude",":") [CPLit (CCharc 'b'),CPComb ("Prelude",":") [CPLit (CCharc 'r'),CPComb ("Prelude",":") [CPLit (CCharc 'a'),CPComb ("Prelude",":") [CPLit (CCharc 'n'),CPComb ("Prelude",":") [CPLit (CCharc 'c'),CPComb ("Prelude",":") [CPLit (CCharc 'h'),CPComb ("Prelude","[]") []]]]]]],CPComb ("Prelude","[]") [],CPComb ("Prelude",":") [CPComb ("XML","XElem") [CPComb ("Prelude",":") [CPLit (CCharc 'l'),CPComb ("Prelude",":") [CPLit (CCharc 'p'),CPComb ("Prelude",":") [CPLit (CCharc 'a'),CPComb ("Prelude",":") [CPLit (CCharc 't'),CPComb ("Prelude",":") [CPLit (CCharc 't'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude",":") [CPLit (CCharc 'r'),CPComb ("Prelude",":") [CPLit (CCharc 'n'),CPComb ("Prelude","[]") []]]]]]]]],CPComb ("Prelude","[]") [],CPComb ("Prelude",":") [CPVar (3,"xlit"),CPComb ("Prelude","[]") []]],CPComb ("Prelude",":") [CPVar (4,"xexp"),CPComb ("Prelude","[]") []]]]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Flat","Branch")) (CApply (CSymbol ("Flat","LPattern")) (CApply (CSymbol ("FlatXML","flatx2lit")) (CVar (3,"xlit"))))) (CApply (CSymbol ("FlatXML","flatx2exp")) (CVar (4,"xexp"))))] [],CRule [CPComb ("XML","XElem") [CPComb ("Prelude",":") [CPLit (CCharc 'b'),CPComb ("Prelude",":") [CPLit (CCharc 'r'),CPComb ("Prelude",":") [CPLit (CCharc 'a'),CPComb ("Prelude",":") [CPLit (CCharc 'n'),CPComb ("Prelude",":") [CPLit (CCharc 'c'),CPComb ("Prelude",":") [CPLit (CCharc 'h'),CPComb ("Prelude","[]") []]]]]]],CPComb ("Prelude","[]") [],CPComb ("Prelude",":") [CPComb ("XML","XElem") [CPComb ("Prelude",":") [CPLit (CCharc 'h'),CPComb ("Prelude",":") [CPLit (CCharc 'p'),CPComb ("Prelude",":") [CPLit (CCharc 'a'),CPComb ("Prelude",":") [CPLit (CCharc 't'),CPComb ("Prelude",":") [CPLit (CCharc 't'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude",":") [CPLit (CCharc 'r'),CPComb ("Prelude",":") [CPLit (CCharc 'n'),CPComb ("Prelude","[]") []]]]]]]]],CPVar (5,"_"),CPVar (6,"_")],CPComb ("Prelude",":") [CPVar (7,"_"),CPComb ("Prelude","[]") []]]]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Prelude","error")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'H'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'g'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'h'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '-'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'h'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'v'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'f'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'F'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'C'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'y'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '!'))) (CSymbol ("Prelude","[]"))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))] []]),
  CFunc ("FlatXML","flatx2lit") 1 Private (CFuncType (CTCons ("XML","XmlExp") []) (CTCons ("Flat","Literal") [])) (CRules CFlex [CRule [CPComb ("XML","XElem") [CPComb ("Prelude",":") [CPLit (CCharc 'i'),CPComb ("Prelude",":") [CPLit (CCharc 'n'),CPComb ("Prelude",":") [CPLit (CCharc 't'),CPComb ("Prelude",":") [CPLit (CCharc 'c'),CPComb ("Prelude","[]") []]]]],CPComb ("Prelude","[]") [],CPVar (0,"xintc")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Flat","Intc")) (CApply (CSymbol ("Read","readNat")) (CApply (CSymbol ("FlatXML","flatx2String")) (CVar (0,"xintc")))))] [],CRule [CPComb ("XML","XElem") [CPComb ("Prelude",":") [CPLit (CCharc 'f'),CPComb ("Prelude",":") [CPLit (CCharc 'l'),CPComb ("Prelude",":") [CPLit (CCharc 'o'),CPComb ("Prelude",":") [CPLit (CCharc 'a'),CPComb ("Prelude",":") [CPLit (CCharc 't'),CPComb ("Prelude",":") [CPLit (CCharc 'c'),CPComb ("Prelude","[]") []]]]]]],CPComb ("Prelude","[]") [],CPVar (1,"_")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Prelude","error")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'R'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'g'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'f'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'f'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'y'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '!'))) (CSymbol ("Prelude","[]")))))))))))))))))))))))))))))))))))))))))] [],CRule [CPComb ("XML","XElem") [CPComb ("Prelude",":") [CPLit (CCharc 'c'),CPComb ("Prelude",":") [CPLit (CCharc 'h'),CPComb ("Prelude",":") [CPLit (CCharc 'a'),CPComb ("Prelude",":") [CPLit (CCharc 'r'),CPComb ("Prelude",":") [CPLit (CCharc 'c'),CPComb ("Prelude","[]") []]]]]],CPComb ("Prelude","[]") [],CPVar (2,"xintc")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Flat","Charc")) (CApply (CSymbol ("Prelude","chr")) (CApply (CSymbol ("Read","readNat")) (CApply (CSymbol ("FlatXML","flatx2String")) (CVar (2,"xintc"))))))] []]),
  CFunc ("FlatXML","flatx2texp") 1 Private (CFuncType (CTCons ("XML","XmlExp") []) (CTCons ("Flat","TypeExpr") [])) (CRules CFlex [CRule [CPComb ("XML","XElem") [CPComb ("Prelude",":") [CPLit (CCharc 't'),CPComb ("Prelude",":") [CPLit (CCharc 'v'),CPComb ("Prelude",":") [CPLit (CCharc 'a'),CPComb ("Prelude",":") [CPLit (CCharc 'r'),CPComb ("Prelude","[]") []]]]],CPComb ("Prelude","[]") [],CPVar (0,"xtvar")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Flat","TVar")) (CApply (CSymbol ("Read","readNat")) (CApply (CSymbol ("FlatXML","flatx2String")) (CVar (0,"xtvar")))))] [],CRule [CPComb ("XML","XElem") [CPComb ("Prelude",":") [CPLit (CCharc 'f'),CPComb ("Prelude",":") [CPLit (CCharc 'u'),CPComb ("Prelude",":") [CPLit (CCharc 'n'),CPComb ("Prelude",":") [CPLit (CCharc 'c'),CPComb ("Prelude",":") [CPLit (CCharc 't'),CPComb ("Prelude",":") [CPLit (CCharc 'y'),CPComb ("Prelude",":") [CPLit (CCharc 'p'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude","[]") []]]]]]]]],CPComb ("Prelude","[]") [],CPComb ("Prelude",":") [CPVar (1,"xtexp1"),CPComb ("Prelude",":") [CPVar (2,"xtexp2"),CPComb ("Prelude","[]") []]]]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Flat","FuncType")) (CApply (CSymbol ("FlatXML","flatx2texp")) (CVar (1,"xtexp1")))) (CApply (CSymbol ("FlatXML","flatx2texp")) (CVar (2,"xtexp2"))))] [],CRule [CPComb ("XML","XElem") [CPComb ("Prelude",":") [CPLit (CCharc 't'),CPComb ("Prelude",":") [CPLit (CCharc 'c'),CPComb ("Prelude",":") [CPLit (CCharc 'o'),CPComb ("Prelude",":") [CPLit (CCharc 'n'),CPComb ("Prelude",":") [CPLit (CCharc 's'),CPComb ("Prelude","[]") []]]]]],CPComb ("Prelude",":") [CPComb ("Prelude","(,)") [CPComb ("Prelude",":") [CPLit (CCharc 'n'),CPComb ("Prelude",":") [CPLit (CCharc 'a'),CPComb ("Prelude",":") [CPLit (CCharc 'm'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude","[]") []]]]],CPVar (3,"tcname")],CPComb ("Prelude","[]") []],CPVar (4,"xtexps")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Flat","TCons")) (CVar (3,"tcname"))) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("FlatXML","flatx2texp"))) (CVar (4,"xtexps"))))] []]),
  CFunc ("FlatXML","flatx2Fixity") 1 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Flat","Fixity") [])) (CRules CFlex [CRule [CPComb ("Prelude",":") [CPLit (CCharc 'I'),CPComb ("Prelude",":") [CPLit (CCharc 'n'),CPComb ("Prelude",":") [CPLit (CCharc 'f'),CPComb ("Prelude",":") [CPLit (CCharc 'i'),CPComb ("Prelude",":") [CPLit (CCharc 'x'),CPComb ("Prelude",":") [CPLit (CCharc 'O'),CPComb ("Prelude",":") [CPLit (CCharc 'p'),CPComb ("Prelude","[]") []]]]]]]]] [(CSymbol ("Prelude","success"),CSymbol ("Flat","InfixOp"))] [],CRule [CPComb ("Prelude",":") [CPLit (CCharc 'I'),CPComb ("Prelude",":") [CPLit (CCharc 'n'),CPComb ("Prelude",":") [CPLit (CCharc 'f'),CPComb ("Prelude",":") [CPLit (CCharc 'i'),CPComb ("Prelude",":") [CPLit (CCharc 'x'),CPComb ("Prelude",":") [CPLit (CCharc 'l'),CPComb ("Prelude",":") [CPLit (CCharc 'O'),CPComb ("Prelude",":") [CPLit (CCharc 'p'),CPComb ("Prelude","[]") []]]]]]]]]] [(CSymbol ("Prelude","success"),CSymbol ("Flat","InfixlOp"))] [],CRule [CPComb ("Prelude",":") [CPLit (CCharc 'I'),CPComb ("Prelude",":") [CPLit (CCharc 'n'),CPComb ("Prelude",":") [CPLit (CCharc 'f'),CPComb ("Prelude",":") [CPLit (CCharc 'i'),CPComb ("Prelude",":") [CPLit (CCharc 'x'),CPComb ("Prelude",":") [CPLit (CCharc 'r'),CPComb ("Prelude",":") [CPLit (CCharc 'O'),CPComb ("Prelude",":") [CPLit (CCharc 'p'),CPComb ("Prelude","[]") []]]]]]]]]] [(CSymbol ("Prelude","success"),CSymbol ("Flat","InfixrOp"))] []]),
  CFunc ("FlatXML","flatx2CombType") 1 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Flat","CombType") [])) (CRules CFlex [CRule [CPComb ("Prelude",":") [CPLit (CCharc 'F'),CPComb ("Prelude",":") [CPLit (CCharc 'u'),CPComb ("Prelude",":") [CPLit (CCharc 'n'),CPComb ("Prelude",":") [CPLit (CCharc 'c'),CPComb ("Prelude",":") [CPLit (CCharc 'C'),CPComb ("Prelude",":") [CPLit (CCharc 'a'),CPComb ("Prelude",":") [CPLit (CCharc 'l'),CPComb ("Prelude",":") [CPLit (CCharc 'l'),CPComb ("Prelude","[]") []]]]]]]]]] [(CSymbol ("Prelude","success"),CSymbol ("Flat","FuncCall"))] [],CRule [CPComb ("Prelude",":") [CPLit (CCharc 'C'),CPComb ("Prelude",":") [CPLit (CCharc 'o'),CPComb ("Prelude",":") [CPLit (CCharc 'n'),CPComb ("Prelude",":") [CPLit (CCharc 's'),CPComb ("Prelude",":") [CPLit (CCharc 'C'),CPComb ("Prelude",":") [CPLit (CCharc 'a'),CPComb ("Prelude",":") [CPLit (CCharc 'l'),CPComb ("Prelude",":") [CPLit (CCharc 'l'),CPComb ("Prelude","[]") []]]]]]]]]] [(CSymbol ("Prelude","success"),CSymbol ("Flat","ConsCall"))] [],CRule [CPComb ("Prelude",":") [CPLit (CCharc 'P'),CPComb ("Prelude",":") [CPLit (CCharc 'a'),CPComb ("Prelude",":") [CPLit (CCharc 'r'),CPComb ("Prelude",":") [CPLit (CCharc 't'),CPComb ("Prelude",":") [CPLit (CCharc 'C'),CPComb ("Prelude",":") [CPLit (CCharc 'a'),CPComb ("Prelude",":") [CPLit (CCharc 'l'),CPComb ("Prelude",":") [CPLit (CCharc 'l'),CPComb ("Prelude","[]") []]]]]]]]]] [(CSymbol ("Prelude","success"),CSymbol ("Flat","PartCall"))] []]),
  CFunc ("FlatXML","flatx2String") 1 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("XML","XmlExp") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CRules CFlex [CRule [CPComb ("Prelude","[]") []] [(CSymbol ("Prelude","success"),CSymbol ("Prelude","[]"))] [],CRule [CPComb ("Prelude",":") [CPComb ("XML","XText") [CPVar (0,"s")],CPComb ("Prelude","[]") []]] [(CSymbol ("Prelude","success"),CVar (0,"s"))] []])]
 []
