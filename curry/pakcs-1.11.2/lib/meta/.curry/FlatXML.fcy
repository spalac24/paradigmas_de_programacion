Prog "FlatXML" ["Flat","Prelude","Read","XML","FlatTools"] [] [Func ("FlatXML","flatCurryDtd") 0 Private (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (Rule [] (Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude",":") [Lit (Charc  '/'),Comb ConsCall ("Prelude",":") [Lit (Charc  '/'),Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'k'),Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  'k'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  '/'),Comb ConsCall ("Prelude",":") [Lit (Charc  '~'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  '/'),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])),Func ("FlatXML","flatCurry2XmlFile") 2 Public (FuncType (TCons ("Flat","Prog") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []]))) (Rule [1,2] (Comb FuncCall ("Prelude","writeFile") [Var 2,Comb FuncCall ("XML","showXmlDocWithParams") [Comb ConsCall ("Prelude",":") [Comb ConsCall ("XML","DtdUrl") [Comb FuncCall ("FlatXML","flatCurryDtd") []],Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("FlatXML","flatCurry2Xml") [Var 1]]])),Func ("FlatXML","flatCurry2Xml") 1 Public (FuncType (TCons ("Flat","Prog") []) (TCons ("XML","XmlExp") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Flat","Prog") [2,3,4,5,6,7]) (Comb FuncCall ("XML","xml") [Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("XML","xml") [Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("XML","xtxt") [Var 2],Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("XML","xml") [Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude","[]") []]]]]]],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("FlatXML","flatCurry2Xml._#lambda1") [],Var 3]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("XML","xml") [Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude","[]") []]]]]],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("FlatXML","xmlShowType") [],Var 4]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("XML","xml") [Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude","[]") []]]]]]]]]],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("FlatXML","xmlShowFunc") [],Var 5]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("XML","xml") [Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude","[]") []]]]]]]]]],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("FlatXML","xmlShowOp") [],Var 6]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("XML","xml") [Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("FlatXML","xmlShowTrans") [],Var 7]],Comb ConsCall ("Prelude","[]") []]]]]]]])])),Func ("FlatXML","flatCurry2Xml._#lambda1") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("XML","XmlExp") [])) (Rule [1] (Comb FuncCall ("XML","xml") [Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("XML","xtxt") [Var 1],Comb ConsCall ("Prelude","[]") []]])),Func ("FlatXML","xmlShowType") 1 Private (FuncType (TCons ("Flat","TypeDecl") []) (TCons ("XML","XmlExp") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Flat","Type") [2,3,4]) (Comb ConsCall ("XML","XElem") [Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]],Var 2],Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Comb FuncCall ("XML","xml") [Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude","[]") []]]]]]],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("FlatXML","xmlShowTVar") [],Var 3]],Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("FlatXML","xmlShowCons") [],Var 4]]])])),Func ("FlatXML","xmlShowCons") 1 Private (FuncType (TCons ("Flat","ConsDecl") []) (TCons ("XML","XmlExp") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Flat","Cons") [2,3,4]) (Comb ConsCall ("XML","XElem") [Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]],Var 2],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude","[]") []]]]]],Comb FuncCall ("Prelude","show") [Var 3]],Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("FlatXML","xmlShowTypeExpr") [],Var 4]])])),Func ("FlatXML","xmlShowTypeExpr") 1 Private (FuncType (TCons ("Flat","TypeExpr") []) (TCons ("XML","XmlExp") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Flat","FuncType") [2,3]) (Comb FuncCall ("XML","xml") [Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("FlatXML","xmlShowTypeExpr") [Var 2],Comb ConsCall ("Prelude",":") [Comb FuncCall ("FlatXML","xmlShowTypeExpr") [Var 3],Comb ConsCall ("Prelude","[]") []]]]),Branch (Pattern ("Flat","TCons") [4,5]) (Comb ConsCall ("XML","XElem") [Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude","[]") []]]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]],Var 4],Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("FlatXML","xmlShowTypeExpr") [],Var 5]]),Branch (Pattern ("Flat","TVar") [6]) (Comb FuncCall ("FlatXML","xmlShowTVar") [Var 6])])),Func ("FlatXML","xmlShowTVar") 1 Private (FuncType (TVar 0) (TCons ("XML","XmlExp") [])) (Rule [1] (Comb FuncCall ("XML","xml") [Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'v'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("XML","xtxt") [Comb FuncCall ("Prelude","show") [Var 1]],Comb ConsCall ("Prelude","[]") []]])),Func ("FlatXML","xmlShowFunc") 1 Private (FuncType (TCons ("Flat","FuncDecl") []) (TCons ("XML","XmlExp") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Flat","Func") [2,3,4,5]) (Comb ConsCall ("XML","XElem") [Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]],Var 2],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude","[]") []]]]]],Comb FuncCall ("Prelude","show") [Var 3]],Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("FlatXML","xmlShowTypeExpr") [Var 4],Comb ConsCall ("Prelude",":") [Comb FuncCall ("FlatXML","xmlShowRule") [Var 5],Comb ConsCall ("Prelude","[]") []]]])])),Func ("FlatXML","xmlShowRule") 1 Private (FuncType (TCons ("Flat","Rule") []) (TCons ("XML","XmlExp") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Flat","Rule") [2,3]) (Comb FuncCall ("XML","xml") [Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("XML","xml") [Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("FlatXML","xmlShowVar") [],Var 2]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("XML","xml") [Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("FlatXML","xmlShowExpr") [Var 3],Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude","[]") []]]]),Branch (Pattern ("Flat","External") [4]) (Comb FuncCall ("XML","xml") [Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude","[]") []]]]]]]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("XML","xtxt") [Var 4],Comb ConsCall ("Prelude","[]") []]])])),Func ("FlatXML","xmlShowVar") 1 Private (FuncType (TVar 0) (TCons ("XML","XmlExp") [])) (Rule [1] (Comb FuncCall ("XML","xml") [Comb ConsCall ("Prelude",":") [Lit (Charc  'v'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("XML","xtxt") [Comb FuncCall ("Prelude","show") [Var 1]],Comb ConsCall ("Prelude","[]") []]])),Func ("FlatXML","xmlShowExpr") 1 Private (FuncType (TCons ("Flat","Expr") []) (TCons ("XML","XmlExp") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Flat","Var") [2]) (Comb FuncCall ("FlatXML","xmlShowVar") [Var 2]),Branch (Pattern ("Flat","Lit") [3]) (Comb FuncCall ("XML","xml") [Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("FlatXML","xmlShowLit") [Var 3],Comb ConsCall ("Prelude","[]") []]]),Branch (Pattern ("Flat","Comb") [4,5,6]) (Comb ConsCall ("XML","XElem") [Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'b'),Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("Prelude","show") [Var 4]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]],Var 5],Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("FlatXML","xmlShowExpr") [],Var 6]]),Branch (Pattern ("Flat","Apply") [7,8]) (Comb FuncCall ("XML","xml") [Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude","[]") []]]]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("FlatXML","xmlShowExpr") [Var 7],Comb ConsCall ("Prelude",":") [Comb FuncCall ("FlatXML","xmlShowExpr") [Var 8],Comb ConsCall ("Prelude","[]") []]]]),Branch (Pattern ("Flat","Constr") [9,10]) (Comb FuncCall ("XML","xml") [Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude","[]") []]]]]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("XML","xml") [Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'v'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude","[]") []]]]]]]]],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("FlatXML","xmlShowVar") [],Var 9]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("FlatXML","xmlShowExpr") [Var 10],Comb ConsCall ("Prelude","[]") []]]]),Branch (Pattern ("Flat","Or") [11,12]) (Comb FuncCall ("XML","xml") [Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("FlatXML","xmlShowExpr") [Var 11],Comb ConsCall ("Prelude",":") [Comb FuncCall ("FlatXML","xmlShowExpr") [Var 12],Comb ConsCall ("Prelude","[]") []]]]),Branch (Pattern ("Flat","Case") [13,14,15]) (Comb ConsCall ("XML","XElem") [Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("Prelude","show") [Var 13]],Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Comb FuncCall ("FlatXML","xmlShowExpr") [Var 14],Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("FlatXML","xmlShowBranch") [],Var 15]]]),Branch (Pattern ("Flat","GuardedExpr") [16,17,18]) (Comb FuncCall ("XML","xml") [Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("XML","xml") [Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'v'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude","[]") []]]]]]]]],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("FlatXML","xmlShowVar") [],Var 16]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("FlatXML","xmlShowExpr") [Var 17],Comb ConsCall ("Prelude",":") [Comb FuncCall ("FlatXML","xmlShowExpr") [Var 18],Comb ConsCall ("Prelude","[]") []]]]]),Branch (Pattern ("Flat","Choice") [19]) (Comb FuncCall ("XML","xml") [Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("FlatXML","xmlShowExpr") [Var 19],Comb ConsCall ("Prelude","[]") []]])])),Func ("FlatXML","xmlShowLit") 1 Private (FuncType (TCons ("Flat","Literal") []) (TCons ("XML","XmlExp") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Flat","Intc") [2]) (Comb FuncCall ("XML","xml") [Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("XML","xtxt") [Comb FuncCall ("Prelude","show") [Var 2]],Comb ConsCall ("Prelude","[]") []]]),Branch (Pattern ("Flat","Floatc") [3]) (Comb FuncCall ("XML","xml") [Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude","[]") []]]]]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("XML","xtxt") [Comb FuncCall ("Prelude","show") [Var 3]],Comb ConsCall ("Prelude","[]") []]]),Branch (Pattern ("Flat","Charc") [4]) (Comb FuncCall ("XML","xml") [Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude","[]") []]]]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("XML","xtxt") [Comb FuncCall ("Prelude","show") [Comb FuncCall ("Prelude","ord") [Var 4]]],Comb ConsCall ("Prelude","[]") []]])])),Func ("FlatXML","xmlShowBranch") 1 Private (FuncType (TCons ("Flat","BranchExpr") []) (TCons ("XML","XmlExp") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Flat","Branch") [2,3]) (Case  Flex (Var 2) [Branch (Pattern ("Flat","Pattern") [4,5]) (Comb FuncCall ("XML","xml") [Comb ConsCall ("Prelude",":") [Lit (Charc  'b'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude","[]") []]]]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("XML","XElem") [Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]],Var 4],Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("FlatXML","xmlShowVar") [],Var 5]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("FlatXML","xmlShowExpr") [Var 3],Comb ConsCall ("Prelude","[]") []]]]),Branch (Pattern ("Flat","LPattern") [6]) (Comb FuncCall ("XML","xml") [Comb ConsCall ("Prelude",":") [Lit (Charc  'b'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude","[]") []]]]]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("XML","xml") [Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude","[]") []]]]]]]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("FlatXML","xmlShowLit") [Var 6],Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("FlatXML","xmlShowExpr") [Var 3],Comb ConsCall ("Prelude","[]") []]]])])])),Func ("FlatXML","xmlShowOp") 1 Private (FuncType (TCons ("Flat","OpDecl") []) (TCons ("XML","XmlExp") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Flat","Op") [2,3,4]) (Comb ConsCall ("XML","XElem") [Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude","[]") []]]]]]],Comb FuncCall ("Prelude","show") [Var 3]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("Prelude","show") [Var 4]],Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("XML","xtxt") [Var 2],Comb ConsCall ("Prelude","[]") []]])])),Func ("FlatXML","xmlShowTrans") 1 Private (FuncType (TCons ("Flat","Translation") []) (TCons ("XML","XmlExp") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Flat","Trans") [2,3]) (Comb FuncCall ("XML","xml") [Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude","[]") []]]]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("XML","xml") [Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("XML","xtxt") [Var 2],Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("XML","xml") [Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("XML","xtxt") [Var 3],Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude","[]") []]]])])),Func ("FlatXML","xmlFile2FlatCurry") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Flat","Prog") []])) (Rule [1] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("XML","readXmlFile") [Var 1],Comb (FuncPartCall 1) ("FlatXML","xmlFile2FlatCurry._#lambda2") []])),Func ("FlatXML","xmlFile2FlatCurry._#lambda2") 1 Private (FuncType (TCons ("XML","XmlExp") []) (TCons ("Prelude","IO") [TCons ("Flat","Prog") []])) (Rule [1] (Comb FuncCall ("Prelude","return") [Comb FuncCall ("FlatXML","xml2FlatCurry") [Var 1]])),Func ("FlatXML","xml2FlatCurry") 1 Public (FuncType (TCons ("XML","XmlExp") []) (TCons ("Flat","Prog") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("XML","XElem") [2,3,4]) (Case  Flex (Var 2) [Branch (Pattern ("Prelude",":") [5,6]) (Case  Flex (Var 5) [Branch (LPattern (Charc  'p')) (Case  Flex (Var 6) [Branch (Pattern ("Prelude",":") [7,8]) (Case  Flex (Var 7) [Branch (LPattern (Charc  'r')) (Case  Flex (Var 8) [Branch (Pattern ("Prelude",":") [9,10]) (Case  Flex (Var 9) [Branch (LPattern (Charc  'o')) (Case  Flex (Var 10) [Branch (Pattern ("Prelude",":") [11,12]) (Case  Flex (Var 11) [Branch (LPattern (Charc  'g')) (Case  Flex (Var 12) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 4) [Branch (Pattern ("Prelude",":") [13,14]) (Case  Flex (Var 13) [Branch (Pattern ("XML","XElem") [15,16,17]) (Case  Flex (Var 15) [Branch (Pattern ("Prelude",":") [18,19]) (Case  Flex (Var 18) [Branch (LPattern (Charc  'm')) (Case  Flex (Var 19) [Branch (Pattern ("Prelude",":") [20,21]) (Case  Flex (Var 20) [Branch (LPattern (Charc  'o')) (Case  Flex (Var 21) [Branch (Pattern ("Prelude",":") [22,23]) (Case  Flex (Var 22) [Branch (LPattern (Charc  'd')) (Case  Flex (Var 23) [Branch (Pattern ("Prelude",":") [24,25]) (Case  Flex (Var 24) [Branch (LPattern (Charc  'u')) (Case  Flex (Var 25) [Branch (Pattern ("Prelude",":") [26,27]) (Case  Flex (Var 26) [Branch (LPattern (Charc  'l')) (Case  Flex (Var 27) [Branch (Pattern ("Prelude",":") [28,29]) (Case  Flex (Var 28) [Branch (LPattern (Charc  'e')) (Case  Flex (Var 29) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 16) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 14) [Branch (Pattern ("Prelude",":") [30,31]) (Case  Flex (Var 30) [Branch (Pattern ("XML","XElem") [32,33,34]) (Case  Flex (Var 32) [Branch (Pattern ("Prelude",":") [35,36]) (Case  Flex (Var 35) [Branch (LPattern (Charc  'i')) (Case  Flex (Var 36) [Branch (Pattern ("Prelude",":") [37,38]) (Case  Flex (Var 37) [Branch (LPattern (Charc  'm')) (Case  Flex (Var 38) [Branch (Pattern ("Prelude",":") [39,40]) (Case  Flex (Var 39) [Branch (LPattern (Charc  'p')) (Case  Flex (Var 40) [Branch (Pattern ("Prelude",":") [41,42]) (Case  Flex (Var 41) [Branch (LPattern (Charc  'o')) (Case  Flex (Var 42) [Branch (Pattern ("Prelude",":") [43,44]) (Case  Flex (Var 43) [Branch (LPattern (Charc  'r')) (Case  Flex (Var 44) [Branch (Pattern ("Prelude",":") [45,46]) (Case  Flex (Var 45) [Branch (LPattern (Charc  't')) (Case  Flex (Var 46) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 33) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 31) [Branch (Pattern ("Prelude",":") [47,48]) (Case  Flex (Var 47) [Branch (Pattern ("XML","XElem") [49,50,51]) (Case  Flex (Var 49) [Branch (Pattern ("Prelude",":") [52,53]) (Case  Flex (Var 52) [Branch (LPattern (Charc  't')) (Case  Flex (Var 53) [Branch (Pattern ("Prelude",":") [54,55]) (Case  Flex (Var 54) [Branch (LPattern (Charc  'y')) (Case  Flex (Var 55) [Branch (Pattern ("Prelude",":") [56,57]) (Case  Flex (Var 56) [Branch (LPattern (Charc  'p')) (Case  Flex (Var 57) [Branch (Pattern ("Prelude",":") [58,59]) (Case  Flex (Var 58) [Branch (LPattern (Charc  'e')) (Case  Flex (Var 59) [Branch (Pattern ("Prelude",":") [60,61]) (Case  Flex (Var 60) [Branch (LPattern (Charc  's')) (Case  Flex (Var 61) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 50) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 48) [Branch (Pattern ("Prelude",":") [62,63]) (Case  Flex (Var 62) [Branch (Pattern ("XML","XElem") [64,65,66]) (Case  Flex (Var 64) [Branch (Pattern ("Prelude",":") [67,68]) (Case  Flex (Var 67) [Branch (LPattern (Charc  'f')) (Case  Flex (Var 68) [Branch (Pattern ("Prelude",":") [69,70]) (Case  Flex (Var 69) [Branch (LPattern (Charc  'u')) (Case  Flex (Var 70) [Branch (Pattern ("Prelude",":") [71,72]) (Case  Flex (Var 71) [Branch (LPattern (Charc  'n')) (Case  Flex (Var 72) [Branch (Pattern ("Prelude",":") [73,74]) (Case  Flex (Var 73) [Branch (LPattern (Charc  'c')) (Case  Flex (Var 74) [Branch (Pattern ("Prelude",":") [75,76]) (Case  Flex (Var 75) [Branch (LPattern (Charc  't')) (Case  Flex (Var 76) [Branch (Pattern ("Prelude",":") [77,78]) (Case  Flex (Var 77) [Branch (LPattern (Charc  'i')) (Case  Flex (Var 78) [Branch (Pattern ("Prelude",":") [79,80]) (Case  Flex (Var 79) [Branch (LPattern (Charc  'o')) (Case  Flex (Var 80) [Branch (Pattern ("Prelude",":") [81,82]) (Case  Flex (Var 81) [Branch (LPattern (Charc  'n')) (Case  Flex (Var 82) [Branch (Pattern ("Prelude",":") [83,84]) (Case  Flex (Var 83) [Branch (LPattern (Charc  's')) (Case  Flex (Var 84) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 65) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 63) [Branch (Pattern ("Prelude",":") [85,86]) (Case  Flex (Var 85) [Branch (Pattern ("XML","XElem") [87,88,89]) (Case  Flex (Var 87) [Branch (Pattern ("Prelude",":") [90,91]) (Case  Flex (Var 90) [Branch (LPattern (Charc  'o')) (Case  Flex (Var 91) [Branch (Pattern ("Prelude",":") [92,93]) (Case  Flex (Var 92) [Branch (LPattern (Charc  'p')) (Case  Flex (Var 93) [Branch (Pattern ("Prelude",":") [94,95]) (Case  Flex (Var 94) [Branch (LPattern (Charc  'e')) (Case  Flex (Var 95) [Branch (Pattern ("Prelude",":") [96,97]) (Case  Flex (Var 96) [Branch (LPattern (Charc  'r')) (Case  Flex (Var 97) [Branch (Pattern ("Prelude",":") [98,99]) (Case  Flex (Var 98) [Branch (LPattern (Charc  'a')) (Case  Flex (Var 99) [Branch (Pattern ("Prelude",":") [100,101]) (Case  Flex (Var 100) [Branch (LPattern (Charc  't')) (Case  Flex (Var 101) [Branch (Pattern ("Prelude",":") [102,103]) (Case  Flex (Var 102) [Branch (LPattern (Charc  'o')) (Case  Flex (Var 103) [Branch (Pattern ("Prelude",":") [104,105]) (Case  Flex (Var 104) [Branch (LPattern (Charc  'r')) (Case  Flex (Var 105) [Branch (Pattern ("Prelude",":") [106,107]) (Case  Flex (Var 106) [Branch (LPattern (Charc  's')) (Case  Flex (Var 107) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 88) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 86) [Branch (Pattern ("Prelude",":") [108,109]) (Case  Flex (Var 108) [Branch (Pattern ("XML","XElem") [110,111,112]) (Case  Flex (Var 110) [Branch (Pattern ("Prelude",":") [113,114]) (Case  Flex (Var 113) [Branch (LPattern (Charc  't')) (Case  Flex (Var 114) [Branch (Pattern ("Prelude",":") [115,116]) (Case  Flex (Var 115) [Branch (LPattern (Charc  'r')) (Case  Flex (Var 116) [Branch (Pattern ("Prelude",":") [117,118]) (Case  Flex (Var 117) [Branch (LPattern (Charc  'a')) (Case  Flex (Var 118) [Branch (Pattern ("Prelude",":") [119,120]) (Case  Flex (Var 119) [Branch (LPattern (Charc  'n')) (Case  Flex (Var 120) [Branch (Pattern ("Prelude",":") [121,122]) (Case  Flex (Var 121) [Branch (LPattern (Charc  's')) (Case  Flex (Var 122) [Branch (Pattern ("Prelude",":") [123,124]) (Case  Flex (Var 123) [Branch (LPattern (Charc  'l')) (Case  Flex (Var 124) [Branch (Pattern ("Prelude",":") [125,126]) (Case  Flex (Var 125) [Branch (LPattern (Charc  'a')) (Case  Flex (Var 126) [Branch (Pattern ("Prelude",":") [127,128]) (Case  Flex (Var 127) [Branch (LPattern (Charc  't')) (Case  Flex (Var 128) [Branch (Pattern ("Prelude",":") [129,130]) (Case  Flex (Var 129) [Branch (LPattern (Charc  'i')) (Case  Flex (Var 130) [Branch (Pattern ("Prelude",":") [131,132]) (Case  Flex (Var 131) [Branch (LPattern (Charc  'o')) (Case  Flex (Var 132) [Branch (Pattern ("Prelude",":") [133,134]) (Case  Flex (Var 133) [Branch (LPattern (Charc  'n')) (Case  Flex (Var 134) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 111) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 109) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Flat","Prog") [Comb FuncCall ("FlatXML","flatx2String") [Var 17],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("FlatXML","xml2FlatCurry._#lambda3") [],Var 34],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("FlatXML","xml2FlatCurry._#lambda4") [],Var 51],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("FlatXML","xml2FlatCurry._#lambda7") [],Var 66],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("FlatXML","xml2FlatCurry._#lambda8") [],Var 89],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("FlatXML","xml2FlatCurry._#lambda9") [],Var 112]])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])),Func ("FlatXML","xml2FlatCurry._#lambda3") 1 Private (FuncType (TCons ("XML","XmlExp") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("XML","XElem") [2,3,4]) (Case  Flex (Var 2) [Branch (Pattern ("Prelude",":") [5,6]) (Case  Flex (Var 5) [Branch (LPattern (Charc  'm')) (Case  Flex (Var 6) [Branch (Pattern ("Prelude",":") [7,8]) (Case  Flex (Var 7) [Branch (LPattern (Charc  'o')) (Case  Flex (Var 8) [Branch (Pattern ("Prelude",":") [9,10]) (Case  Flex (Var 9) [Branch (LPattern (Charc  'd')) (Case  Flex (Var 10) [Branch (Pattern ("Prelude",":") [11,12]) (Case  Flex (Var 11) [Branch (LPattern (Charc  'u')) (Case  Flex (Var 12) [Branch (Pattern ("Prelude",":") [13,14]) (Case  Flex (Var 13) [Branch (LPattern (Charc  'l')) (Case  Flex (Var 14) [Branch (Pattern ("Prelude",":") [15,16]) (Case  Flex (Var 15) [Branch (LPattern (Charc  'e')) (Case  Flex (Var 16) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("FlatXML","flatx2String") [Var 4])])])])])])])])])])])])])])])])),Func ("FlatXML","xml2FlatCurry._#lambda4") 1 Private (FuncType (TCons ("XML","XmlExp") []) (TCons ("Flat","TypeDecl") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("XML","XElem") [2,3,4]) (Case  Flex (Var 2) [Branch (Pattern ("Prelude",":") [5,6]) (Case  Flex (Var 5) [Branch (LPattern (Charc  't')) (Case  Flex (Var 6) [Branch (Pattern ("Prelude",":") [7,8]) (Case  Flex (Var 7) [Branch (LPattern (Charc  'y')) (Case  Flex (Var 8) [Branch (Pattern ("Prelude",":") [9,10]) (Case  Flex (Var 9) [Branch (LPattern (Charc  'p')) (Case  Flex (Var 10) [Branch (Pattern ("Prelude",":") [11,12]) (Case  Flex (Var 11) [Branch (LPattern (Charc  'e')) (Case  Flex (Var 12) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [13,14]) (Case  Flex (Var 13) [Branch (Pattern ("Prelude","(,)") [15,16]) (Case  Flex (Var 15) [Branch (Pattern ("Prelude",":") [17,18]) (Case  Flex (Var 17) [Branch (LPattern (Charc  'n')) (Case  Flex (Var 18) [Branch (Pattern ("Prelude",":") [19,20]) (Case  Flex (Var 19) [Branch (LPattern (Charc  'a')) (Case  Flex (Var 20) [Branch (Pattern ("Prelude",":") [21,22]) (Case  Flex (Var 21) [Branch (LPattern (Charc  'm')) (Case  Flex (Var 22) [Branch (Pattern ("Prelude",":") [23,24]) (Case  Flex (Var 23) [Branch (LPattern (Charc  'e')) (Case  Flex (Var 24) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 14) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 4) [Branch (Pattern ("Prelude",":") [25,26]) (Case  Flex (Var 25) [Branch (Pattern ("XML","XElem") [27,28,29]) (Case  Flex (Var 27) [Branch (Pattern ("Prelude",":") [30,31]) (Case  Flex (Var 30) [Branch (LPattern (Charc  'p')) (Case  Flex (Var 31) [Branch (Pattern ("Prelude",":") [32,33]) (Case  Flex (Var 32) [Branch (LPattern (Charc  'a')) (Case  Flex (Var 33) [Branch (Pattern ("Prelude",":") [34,35]) (Case  Flex (Var 34) [Branch (LPattern (Charc  'r')) (Case  Flex (Var 35) [Branch (Pattern ("Prelude",":") [36,37]) (Case  Flex (Var 36) [Branch (LPattern (Charc  'a')) (Case  Flex (Var 37) [Branch (Pattern ("Prelude",":") [38,39]) (Case  Flex (Var 38) [Branch (LPattern (Charc  'm')) (Case  Flex (Var 39) [Branch (Pattern ("Prelude",":") [40,41]) (Case  Flex (Var 40) [Branch (LPattern (Charc  's')) (Case  Flex (Var 41) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 28) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Flat","Type") [Var 16,Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("FlatXML","xml2FlatCurry._#lambda4._#lambda5") [],Var 29],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("FlatXML","xml2FlatCurry._#lambda4._#lambda6") [],Var 26]])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])),Func ("FlatXML","xml2FlatCurry._#lambda4._#lambda5") 1 Private (FuncType (TCons ("XML","XmlExp") []) (TCons ("Prelude","Int") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("XML","XElem") [2,3,4]) (Case  Flex (Var 2) [Branch (Pattern ("Prelude",":") [5,6]) (Case  Flex (Var 5) [Branch (LPattern (Charc  't')) (Case  Flex (Var 6) [Branch (Pattern ("Prelude",":") [7,8]) (Case  Flex (Var 7) [Branch (LPattern (Charc  'v')) (Case  Flex (Var 8) [Branch (Pattern ("Prelude",":") [9,10]) (Case  Flex (Var 9) [Branch (LPattern (Charc  'a')) (Case  Flex (Var 10) [Branch (Pattern ("Prelude",":") [11,12]) (Case  Flex (Var 11) [Branch (LPattern (Charc  'r')) (Case  Flex (Var 12) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Read","readNat") [Comb FuncCall ("FlatXML","flatx2String") [Var 4]])])])])])])])])])])])])),Func ("FlatXML","xml2FlatCurry._#lambda4._#lambda6") 1 Private (FuncType (TCons ("XML","XmlExp") []) (TCons ("Flat","ConsDecl") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("XML","XElem") [2,3,4]) (Case  Flex (Var 2) [Branch (Pattern ("Prelude",":") [5,6]) (Case  Flex (Var 5) [Branch (LPattern (Charc  'c')) (Case  Flex (Var 6) [Branch (Pattern ("Prelude",":") [7,8]) (Case  Flex (Var 7) [Branch (LPattern (Charc  'o')) (Case  Flex (Var 8) [Branch (Pattern ("Prelude",":") [9,10]) (Case  Flex (Var 9) [Branch (LPattern (Charc  'n')) (Case  Flex (Var 10) [Branch (Pattern ("Prelude",":") [11,12]) (Case  Flex (Var 11) [Branch (LPattern (Charc  's')) (Case  Flex (Var 12) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [13,14]) (Case  Flex (Var 13) [Branch (Pattern ("Prelude","(,)") [15,16]) (Case  Flex (Var 15) [Branch (Pattern ("Prelude",":") [17,18]) (Case  Flex (Var 17) [Branch (LPattern (Charc  'n')) (Case  Flex (Var 18) [Branch (Pattern ("Prelude",":") [19,20]) (Case  Flex (Var 19) [Branch (LPattern (Charc  'a')) (Case  Flex (Var 20) [Branch (Pattern ("Prelude",":") [21,22]) (Case  Flex (Var 21) [Branch (LPattern (Charc  'm')) (Case  Flex (Var 22) [Branch (Pattern ("Prelude",":") [23,24]) (Case  Flex (Var 23) [Branch (LPattern (Charc  'e')) (Case  Flex (Var 24) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 14) [Branch (Pattern ("Prelude",":") [25,26]) (Case  Flex (Var 25) [Branch (Pattern ("Prelude","(,)") [27,28]) (Case  Flex (Var 27) [Branch (Pattern ("Prelude",":") [29,30]) (Case  Flex (Var 29) [Branch (LPattern (Charc  'a')) (Case  Flex (Var 30) [Branch (Pattern ("Prelude",":") [31,32]) (Case  Flex (Var 31) [Branch (LPattern (Charc  'r')) (Case  Flex (Var 32) [Branch (Pattern ("Prelude",":") [33,34]) (Case  Flex (Var 33) [Branch (LPattern (Charc  'i')) (Case  Flex (Var 34) [Branch (Pattern ("Prelude",":") [35,36]) (Case  Flex (Var 35) [Branch (LPattern (Charc  't')) (Case  Flex (Var 36) [Branch (Pattern ("Prelude",":") [37,38]) (Case  Flex (Var 37) [Branch (LPattern (Charc  'y')) (Case  Flex (Var 38) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 26) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Flat","Cons") [Var 16,Comb FuncCall ("Read","readNat") [Var 28],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("FlatXML","flatx2texp") [],Var 4]])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])),Func ("FlatXML","xml2FlatCurry._#lambda7") 1 Private (FuncType (TCons ("XML","XmlExp") []) (TCons ("Flat","FuncDecl") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("XML","XElem") [2,3,4]) (Case  Flex (Var 2) [Branch (Pattern ("Prelude",":") [5,6]) (Case  Flex (Var 5) [Branch (LPattern (Charc  'f')) (Case  Flex (Var 6) [Branch (Pattern ("Prelude",":") [7,8]) (Case  Flex (Var 7) [Branch (LPattern (Charc  'u')) (Case  Flex (Var 8) [Branch (Pattern ("Prelude",":") [9,10]) (Case  Flex (Var 9) [Branch (LPattern (Charc  'n')) (Case  Flex (Var 10) [Branch (Pattern ("Prelude",":") [11,12]) (Case  Flex (Var 11) [Branch (LPattern (Charc  'c')) (Case  Flex (Var 12) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [13,14]) (Case  Flex (Var 13) [Branch (Pattern ("Prelude","(,)") [15,16]) (Case  Flex (Var 15) [Branch (Pattern ("Prelude",":") [17,18]) (Case  Flex (Var 17) [Branch (LPattern (Charc  'n')) (Case  Flex (Var 18) [Branch (Pattern ("Prelude",":") [19,20]) (Case  Flex (Var 19) [Branch (LPattern (Charc  'a')) (Case  Flex (Var 20) [Branch (Pattern ("Prelude",":") [21,22]) (Case  Flex (Var 21) [Branch (LPattern (Charc  'm')) (Case  Flex (Var 22) [Branch (Pattern ("Prelude",":") [23,24]) (Case  Flex (Var 23) [Branch (LPattern (Charc  'e')) (Case  Flex (Var 24) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 14) [Branch (Pattern ("Prelude",":") [25,26]) (Case  Flex (Var 25) [Branch (Pattern ("Prelude","(,)") [27,28]) (Case  Flex (Var 27) [Branch (Pattern ("Prelude",":") [29,30]) (Case  Flex (Var 29) [Branch (LPattern (Charc  'a')) (Case  Flex (Var 30) [Branch (Pattern ("Prelude",":") [31,32]) (Case  Flex (Var 31) [Branch (LPattern (Charc  'r')) (Case  Flex (Var 32) [Branch (Pattern ("Prelude",":") [33,34]) (Case  Flex (Var 33) [Branch (LPattern (Charc  'i')) (Case  Flex (Var 34) [Branch (Pattern ("Prelude",":") [35,36]) (Case  Flex (Var 35) [Branch (LPattern (Charc  't')) (Case  Flex (Var 36) [Branch (Pattern ("Prelude",":") [37,38]) (Case  Flex (Var 37) [Branch (LPattern (Charc  'y')) (Case  Flex (Var 38) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 26) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 4) [Branch (Pattern ("Prelude",":") [39,40]) (Case  Flex (Var 40) [Branch (Pattern ("Prelude",":") [41,42]) (Case  Flex (Var 42) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Flat","Func") [Var 16,Comb FuncCall ("Read","readNat") [Var 28],Comb FuncCall ("FlatXML","flatx2texp") [Var 39],Comb FuncCall ("FlatXML","flatx2FunBody") [Var 41]])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])),Func ("FlatXML","xml2FlatCurry._#lambda8") 1 Private (FuncType (TCons ("XML","XmlExp") []) (TCons ("Flat","OpDecl") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("XML","XElem") [2,3,4]) (Case  Flex (Var 2) [Branch (Pattern ("Prelude",":") [5,6]) (Case  Flex (Var 5) [Branch (LPattern (Charc  'o')) (Case  Flex (Var 6) [Branch (Pattern ("Prelude",":") [7,8]) (Case  Flex (Var 7) [Branch (LPattern (Charc  'p')) (Case  Flex (Var 8) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [9,10]) (Case  Flex (Var 9) [Branch (Pattern ("Prelude","(,)") [11,12]) (Case  Flex (Var 11) [Branch (Pattern ("Prelude",":") [13,14]) (Case  Flex (Var 13) [Branch (LPattern (Charc  'f')) (Case  Flex (Var 14) [Branch (Pattern ("Prelude",":") [15,16]) (Case  Flex (Var 15) [Branch (LPattern (Charc  'i')) (Case  Flex (Var 16) [Branch (Pattern ("Prelude",":") [17,18]) (Case  Flex (Var 17) [Branch (LPattern (Charc  'x')) (Case  Flex (Var 18) [Branch (Pattern ("Prelude",":") [19,20]) (Case  Flex (Var 19) [Branch (LPattern (Charc  'i')) (Case  Flex (Var 20) [Branch (Pattern ("Prelude",":") [21,22]) (Case  Flex (Var 21) [Branch (LPattern (Charc  't')) (Case  Flex (Var 22) [Branch (Pattern ("Prelude",":") [23,24]) (Case  Flex (Var 23) [Branch (LPattern (Charc  'y')) (Case  Flex (Var 24) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 10) [Branch (Pattern ("Prelude",":") [25,26]) (Case  Flex (Var 25) [Branch (Pattern ("Prelude","(,)") [27,28]) (Case  Flex (Var 27) [Branch (Pattern ("Prelude",":") [29,30]) (Case  Flex (Var 29) [Branch (LPattern (Charc  'p')) (Case  Flex (Var 30) [Branch (Pattern ("Prelude",":") [31,32]) (Case  Flex (Var 31) [Branch (LPattern (Charc  'r')) (Case  Flex (Var 32) [Branch (Pattern ("Prelude",":") [33,34]) (Case  Flex (Var 33) [Branch (LPattern (Charc  'e')) (Case  Flex (Var 34) [Branch (Pattern ("Prelude",":") [35,36]) (Case  Flex (Var 35) [Branch (LPattern (Charc  'c')) (Case  Flex (Var 36) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 26) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Flat","Op") [Comb FuncCall ("FlatXML","flatx2String") [Var 4],Comb FuncCall ("FlatXML","flatx2Fixity") [Var 12],Comb FuncCall ("Read","readNat") [Var 28]])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])),Func ("FlatXML","xml2FlatCurry._#lambda9") 1 Private (FuncType (TCons ("XML","XmlExp") []) (TCons ("Flat","Translation") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("XML","XElem") [2,3,4]) (Case  Flex (Var 2) [Branch (Pattern ("Prelude",":") [5,6]) (Case  Flex (Var 5) [Branch (LPattern (Charc  't')) (Case  Flex (Var 6) [Branch (Pattern ("Prelude",":") [7,8]) (Case  Flex (Var 7) [Branch (LPattern (Charc  'r')) (Case  Flex (Var 8) [Branch (Pattern ("Prelude",":") [9,10]) (Case  Flex (Var 9) [Branch (LPattern (Charc  'a')) (Case  Flex (Var 10) [Branch (Pattern ("Prelude",":") [11,12]) (Case  Flex (Var 11) [Branch (LPattern (Charc  'n')) (Case  Flex (Var 12) [Branch (Pattern ("Prelude",":") [13,14]) (Case  Flex (Var 13) [Branch (LPattern (Charc  's')) (Case  Flex (Var 14) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 4) [Branch (Pattern ("Prelude",":") [15,16]) (Case  Flex (Var 15) [Branch (Pattern ("XML","XElem") [17,18,19]) (Case  Flex (Var 17) [Branch (Pattern ("Prelude",":") [20,21]) (Case  Flex (Var 20) [Branch (LPattern (Charc  'n')) (Case  Flex (Var 21) [Branch (Pattern ("Prelude",":") [22,23]) (Case  Flex (Var 22) [Branch (LPattern (Charc  'a')) (Case  Flex (Var 23) [Branch (Pattern ("Prelude",":") [24,25]) (Case  Flex (Var 24) [Branch (LPattern (Charc  'm')) (Case  Flex (Var 25) [Branch (Pattern ("Prelude",":") [26,27]) (Case  Flex (Var 26) [Branch (LPattern (Charc  'e')) (Case  Flex (Var 27) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 18) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 16) [Branch (Pattern ("Prelude",":") [28,29]) (Case  Flex (Var 28) [Branch (Pattern ("XML","XElem") [30,31,32]) (Case  Flex (Var 30) [Branch (Pattern ("Prelude",":") [33,34]) (Case  Flex (Var 33) [Branch (LPattern (Charc  'i')) (Case  Flex (Var 34) [Branch (Pattern ("Prelude",":") [35,36]) (Case  Flex (Var 35) [Branch (LPattern (Charc  'n')) (Case  Flex (Var 36) [Branch (Pattern ("Prelude",":") [37,38]) (Case  Flex (Var 37) [Branch (LPattern (Charc  't')) (Case  Flex (Var 38) [Branch (Pattern ("Prelude",":") [39,40]) (Case  Flex (Var 39) [Branch (LPattern (Charc  'n')) (Case  Flex (Var 40) [Branch (Pattern ("Prelude",":") [41,42]) (Case  Flex (Var 41) [Branch (LPattern (Charc  'a')) (Case  Flex (Var 42) [Branch (Pattern ("Prelude",":") [43,44]) (Case  Flex (Var 43) [Branch (LPattern (Charc  'm')) (Case  Flex (Var 44) [Branch (Pattern ("Prelude",":") [45,46]) (Case  Flex (Var 45) [Branch (LPattern (Charc  'e')) (Case  Flex (Var 46) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 31) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 29) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Flat","Trans") [Comb FuncCall ("FlatXML","flatx2String") [Var 19],Comb FuncCall ("FlatXML","flatx2String") [Var 32]])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])),Func ("FlatXML","flatx2FunBody") 1 Private (FuncType (TCons ("XML","XmlExp") []) (TCons ("Flat","Rule") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("XML","XElem") [2,3,4]) (Case  Flex (Var 2) [Branch (Pattern ("Prelude",":") [5,6]) (Case  Flex (Var 5) [Branch (LPattern (Charc  'e')) (Case  Flex (Var 6) [Branch (Pattern ("Prelude",":") [7,8]) (Case  Flex (Var 7) [Branch (LPattern (Charc  'x')) (Case  Flex (Var 8) [Branch (Pattern ("Prelude",":") [9,10]) (Case  Flex (Var 9) [Branch (LPattern (Charc  't')) (Case  Flex (Var 10) [Branch (Pattern ("Prelude",":") [11,12]) (Case  Flex (Var 11) [Branch (LPattern (Charc  'e')) (Case  Flex (Var 12) [Branch (Pattern ("Prelude",":") [13,14]) (Case  Flex (Var 13) [Branch (LPattern (Charc  'r')) (Case  Flex (Var 14) [Branch (Pattern ("Prelude",":") [15,16]) (Case  Flex (Var 15) [Branch (LPattern (Charc  'n')) (Case  Flex (Var 16) [Branch (Pattern ("Prelude",":") [17,18]) (Case  Flex (Var 17) [Branch (LPattern (Charc  'a')) (Case  Flex (Var 18) [Branch (Pattern ("Prelude",":") [19,20]) (Case  Flex (Var 19) [Branch (LPattern (Charc  'l')) (Case  Flex (Var 20) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Flat","External") [Comb FuncCall ("FlatXML","flatx2String") [Var 4]])])])])])])])])])])])])])])])])]),Branch (LPattern (Charc  'r')) (Case  Flex (Var 6) [Branch (Pattern ("Prelude",":") [21,22]) (Case  Flex (Var 21) [Branch (LPattern (Charc  'u')) (Case  Flex (Var 22) [Branch (Pattern ("Prelude",":") [23,24]) (Case  Flex (Var 23) [Branch (LPattern (Charc  'l')) (Case  Flex (Var 24) [Branch (Pattern ("Prelude",":") [25,26]) (Case  Flex (Var 25) [Branch (LPattern (Charc  'e')) (Case  Flex (Var 26) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 4) [Branch (Pattern ("Prelude",":") [27,28]) (Case  Flex (Var 27) [Branch (Pattern ("XML","XElem") [29,30,31]) (Case  Flex (Var 29) [Branch (Pattern ("Prelude",":") [32,33]) (Case  Flex (Var 32) [Branch (LPattern (Charc  'l')) (Case  Flex (Var 33) [Branch (Pattern ("Prelude",":") [34,35]) (Case  Flex (Var 34) [Branch (LPattern (Charc  'h')) (Case  Flex (Var 35) [Branch (Pattern ("Prelude",":") [36,37]) (Case  Flex (Var 36) [Branch (LPattern (Charc  's')) (Case  Flex (Var 37) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 30) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 28) [Branch (Pattern ("Prelude",":") [38,39]) (Case  Flex (Var 38) [Branch (Pattern ("XML","XElem") [40,41,42]) (Case  Flex (Var 40) [Branch (Pattern ("Prelude",":") [43,44]) (Case  Flex (Var 43) [Branch (LPattern (Charc  'r')) (Case  Flex (Var 44) [Branch (Pattern ("Prelude",":") [45,46]) (Case  Flex (Var 45) [Branch (LPattern (Charc  'h')) (Case  Flex (Var 46) [Branch (Pattern ("Prelude",":") [47,48]) (Case  Flex (Var 47) [Branch (LPattern (Charc  's')) (Case  Flex (Var 48) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 41) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 42) [Branch (Pattern ("Prelude",":") [49,50]) (Case  Flex (Var 50) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 39) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Flat","Rule") [Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("FlatXML","flatx2var") [],Var 31],Comb FuncCall ("FlatXML","flatx2exp") [Var 49]])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])),Func ("FlatXML","flatx2var") 1 Private (FuncType (TCons ("XML","XmlExp") []) (TCons ("Prelude","Int") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("XML","XElem") [2,3,4]) (Case  Flex (Var 2) [Branch (Pattern ("Prelude",":") [5,6]) (Case  Flex (Var 5) [Branch (LPattern (Charc  'v')) (Case  Flex (Var 6) [Branch (Pattern ("Prelude",":") [7,8]) (Case  Flex (Var 7) [Branch (LPattern (Charc  'a')) (Case  Flex (Var 8) [Branch (Pattern ("Prelude",":") [9,10]) (Case  Flex (Var 9) [Branch (LPattern (Charc  'r')) (Case  Flex (Var 10) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Read","readNat") [Comb FuncCall ("FlatXML","flatx2String") [Var 4]])])])])])])])])])])),Func ("FlatXML","flatx2exp") 1 Private (FuncType (TCons ("XML","XmlExp") []) (TCons ("Flat","Expr") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("XML","XElem") [2,3,4]) (Case  Flex (Var 2) [Branch (Pattern ("Prelude",":") [5,6]) (Case  Flex (Var 5) [Branch (LPattern (Charc  'v')) (Case  Flex (Var 6) [Branch (Pattern ("Prelude",":") [7,8]) (Case  Flex (Var 7) [Branch (LPattern (Charc  'a')) (Case  Flex (Var 8) [Branch (Pattern ("Prelude",":") [9,10]) (Case  Flex (Var 9) [Branch (LPattern (Charc  'r')) (Case  Flex (Var 10) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Flat","Var") [Comb FuncCall ("Read","readNat") [Comb FuncCall ("FlatXML","flatx2String") [Var 4]]])])])])])])]),Branch (LPattern (Charc  'l')) (Case  Flex (Var 6) [Branch (Pattern ("Prelude",":") [11,12]) (Case  Flex (Var 11) [Branch (LPattern (Charc  'i')) (Case  Flex (Var 12) [Branch (Pattern ("Prelude",":") [13,14]) (Case  Flex (Var 13) [Branch (LPattern (Charc  't')) (Case  Flex (Var 14) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 4) [Branch (Pattern ("Prelude",":") [15,16]) (Case  Flex (Var 16) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Flat","Lit") [Comb FuncCall ("FlatXML","flatx2lit") [Var 15]])])])])])])]),Branch (LPattern (Charc  'e')) (Case  Flex (Var 12) [Branch (Pattern ("Prelude",":") [17,18]) (Case  Flex (Var 17) [Branch (LPattern (Charc  't')) (Case  Flex (Var 18) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Let [(19,Comb FuncCall ("FlatXML","flatx2let") [Var 4]),(20,Comb FuncCall ("FlatXML","flatx2exp._#selFP2#bindings") [Var 19]),(21,Comb FuncCall ("FlatXML","flatx2exp._#selFP3#exp") [Var 19])] (Comb ConsCall ("Flat","Let") [Var 20,Var 21]))]),Branch (Pattern ("Prelude",":") [22,23]) (Case  Flex (Var 22) [Branch (LPattern (Charc  'r')) (Case  Flex (Var 23) [Branch (Pattern ("Prelude",":") [24,25]) (Case  Flex (Var 24) [Branch (LPattern (Charc  'e')) (Case  Flex (Var 25) [Branch (Pattern ("Prelude",":") [26,27]) (Case  Flex (Var 26) [Branch (LPattern (Charc  'c')) (Case  Flex (Var 27) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Let [(28,Comb FuncCall ("FlatXML","flatx2let") [Var 4]),(29,Comb FuncCall ("FlatXML","flatx2exp._#selFP5#bindings") [Var 28]),(30,Comb FuncCall ("FlatXML","flatx2exp._#selFP6#exp") [Var 28])] (Comb ConsCall ("Flat","Let") [Var 29,Var 30]))])])])])])])])])])])])]),Branch (LPattern (Charc  'c')) (Case  Flex (Var 6) [Branch (Pattern ("Prelude",":") [31,32]) (Case  Flex (Var 31) [Branch (LPattern (Charc  'o')) (Case  Flex (Var 32) [Branch (Pattern ("Prelude",":") [33,34]) (Case  Flex (Var 33) [Branch (LPattern (Charc  'm')) (Case  Flex (Var 34) [Branch (Pattern ("Prelude",":") [35,36]) (Case  Flex (Var 35) [Branch (LPattern (Charc  'b')) (Case  Flex (Var 36) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [37,38]) (Case  Flex (Var 37) [Branch (Pattern ("Prelude","(,)") [39,40]) (Case  Flex (Var 39) [Branch (Pattern ("Prelude",":") [41,42]) (Case  Flex (Var 41) [Branch (LPattern (Charc  't')) (Case  Flex (Var 42) [Branch (Pattern ("Prelude",":") [43,44]) (Case  Flex (Var 43) [Branch (LPattern (Charc  'y')) (Case  Flex (Var 44) [Branch (Pattern ("Prelude",":") [45,46]) (Case  Flex (Var 45) [Branch (LPattern (Charc  'p')) (Case  Flex (Var 46) [Branch (Pattern ("Prelude",":") [47,48]) (Case  Flex (Var 47) [Branch (LPattern (Charc  'e')) (Case  Flex (Var 48) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 38) [Branch (Pattern ("Prelude",":") [49,50]) (Case  Flex (Var 49) [Branch (Pattern ("Prelude","(,)") [51,52]) (Case  Flex (Var 51) [Branch (Pattern ("Prelude",":") [53,54]) (Case  Flex (Var 53) [Branch (LPattern (Charc  'n')) (Case  Flex (Var 54) [Branch (Pattern ("Prelude",":") [55,56]) (Case  Flex (Var 55) [Branch (LPattern (Charc  'a')) (Case  Flex (Var 56) [Branch (Pattern ("Prelude",":") [57,58]) (Case  Flex (Var 57) [Branch (LPattern (Charc  'm')) (Case  Flex (Var 58) [Branch (Pattern ("Prelude",":") [59,60]) (Case  Flex (Var 59) [Branch (LPattern (Charc  'e')) (Case  Flex (Var 60) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 50) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Flat","Comb") [Comb FuncCall ("FlatXML","flatx2CombType") [Var 40],Var 52,Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("FlatXML","flatx2exp") [],Var 4]])])])])])])])])])])])])])])])])])])])])])])])])])])]),Branch (LPattern (Charc  'n')) (Case  Flex (Var 34) [Branch (Pattern ("Prelude",":") [61,62]) (Case  Flex (Var 61) [Branch (LPattern (Charc  's')) (Case  Flex (Var 62) [Branch (Pattern ("Prelude",":") [63,64]) (Case  Flex (Var 63) [Branch (LPattern (Charc  't')) (Case  Flex (Var 64) [Branch (Pattern ("Prelude",":") [65,66]) (Case  Flex (Var 65) [Branch (LPattern (Charc  'r')) (Case  Flex (Var 66) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 4) [Branch (Pattern ("Prelude",":") [67,68]) (Case  Flex (Var 67) [Branch (Pattern ("XML","XElem") [69,70,71]) (Case  Flex (Var 69) [Branch (Pattern ("Prelude",":") [72,73]) (Case  Flex (Var 72) [Branch (LPattern (Charc  'f')) (Case  Flex (Var 73) [Branch (Pattern ("Prelude",":") [74,75]) (Case  Flex (Var 74) [Branch (LPattern (Charc  'r')) (Case  Flex (Var 75) [Branch (Pattern ("Prelude",":") [76,77]) (Case  Flex (Var 76) [Branch (LPattern (Charc  'e')) (Case  Flex (Var 77) [Branch (Pattern ("Prelude",":") [78,79]) (Case  Flex (Var 78) [Branch (LPattern (Charc  'e')) (Case  Flex (Var 79) [Branch (Pattern ("Prelude",":") [80,81]) (Case  Flex (Var 80) [Branch (LPattern (Charc  'v')) (Case  Flex (Var 81) [Branch (Pattern ("Prelude",":") [82,83]) (Case  Flex (Var 82) [Branch (LPattern (Charc  'a')) (Case  Flex (Var 83) [Branch (Pattern ("Prelude",":") [84,85]) (Case  Flex (Var 84) [Branch (LPattern (Charc  'r')) (Case  Flex (Var 85) [Branch (Pattern ("Prelude",":") [86,87]) (Case  Flex (Var 86) [Branch (LPattern (Charc  's')) (Case  Flex (Var 87) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 70) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 68) [Branch (Pattern ("Prelude",":") [88,89]) (Case  Flex (Var 89) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Flat","Constr") [Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("FlatXML","flatx2var") [],Var 71],Comb FuncCall ("FlatXML","flatx2exp") [Var 88]])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])]),Branch (LPattern (Charc  'a')) (Case  Flex (Var 32) [Branch (Pattern ("Prelude",":") [90,91]) (Case  Flex (Var 90) [Branch (LPattern (Charc  's')) (Case  Flex (Var 91) [Branch (Pattern ("Prelude",":") [92,93]) (Case  Flex (Var 92) [Branch (LPattern (Charc  'e')) (Case  Flex (Var 93) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [94,95]) (Case  Flex (Var 94) [Branch (Pattern ("Prelude","(,)") [96,97]) (Case  Flex (Var 96) [Branch (Pattern ("Prelude",":") [98,99]) (Case  Flex (Var 98) [Branch (LPattern (Charc  't')) (Case  Flex (Var 99) [Branch (Pattern ("Prelude",":") [100,101]) (Case  Flex (Var 100) [Branch (LPattern (Charc  'y')) (Case  Flex (Var 101) [Branch (Pattern ("Prelude",":") [102,103]) (Case  Flex (Var 102) [Branch (LPattern (Charc  'p')) (Case  Flex (Var 103) [Branch (Pattern ("Prelude",":") [104,105]) (Case  Flex (Var 104) [Branch (LPattern (Charc  'e')) (Case  Flex (Var 105) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 95) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 4) [Branch (Pattern ("Prelude",":") [106,107]) (Comb ConsCall ("Flat","Case") [Comb FuncCall ("FlatXML","flatx2exp.flatx2CaseType.91") [Var 97],Comb FuncCall ("FlatXML","flatx2exp") [Var 106],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("FlatXML","flatx2branch") [],Var 107]])])])])])])])])])])])])])])])])])])]),Branch (LPattern (Charc  'h')) (Case  Flex (Var 32) [Branch (Pattern ("Prelude",":") [108,109]) (Case  Flex (Var 108) [Branch (LPattern (Charc  'o')) (Case  Flex (Var 109) [Branch (Pattern ("Prelude",":") [110,111]) (Case  Flex (Var 110) [Branch (LPattern (Charc  'i')) (Case  Flex (Var 111) [Branch (Pattern ("Prelude",":") [112,113]) (Case  Flex (Var 112) [Branch (LPattern (Charc  'c')) (Case  Flex (Var 113) [Branch (Pattern ("Prelude",":") [114,115]) (Case  Flex (Var 114) [Branch (LPattern (Charc  'e')) (Case  Flex (Var 115) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 4) [Branch (Pattern ("Prelude",":") [116,117]) (Case  Flex (Var 117) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Flat","Choice") [Comb FuncCall ("FlatXML","flatx2exp") [Var 116]])])])])])])])])])])])])])])]),Branch (LPattern (Charc  'a')) (Case  Flex (Var 6) [Branch (Pattern ("Prelude",":") [118,119]) (Case  Flex (Var 118) [Branch (LPattern (Charc  'p')) (Case  Flex (Var 119) [Branch (Pattern ("Prelude",":") [120,121]) (Case  Flex (Var 120) [Branch (LPattern (Charc  'p')) (Case  Flex (Var 121) [Branch (Pattern ("Prelude",":") [122,123]) (Case  Flex (Var 122) [Branch (LPattern (Charc  'l')) (Case  Flex (Var 123) [Branch (Pattern ("Prelude",":") [124,125]) (Case  Flex (Var 124) [Branch (LPattern (Charc  'y')) (Case  Flex (Var 125) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 4) [Branch (Pattern ("Prelude",":") [126,127]) (Case  Flex (Var 127) [Branch (Pattern ("Prelude",":") [128,129]) (Case  Flex (Var 129) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Flat","Apply") [Comb FuncCall ("FlatXML","flatx2exp") [Var 126],Comb FuncCall ("FlatXML","flatx2exp") [Var 128]])])])])])])])])])])])])])]),Branch (LPattern (Charc  'o')) (Case  Flex (Var 6) [Branch (Pattern ("Prelude",":") [130,131]) (Case  Flex (Var 130) [Branch (LPattern (Charc  'r')) (Case  Flex (Var 131) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 4) [Branch (Pattern ("Prelude",":") [132,133]) (Case  Flex (Var 133) [Branch (Pattern ("Prelude",":") [134,135]) (Case  Flex (Var 135) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Flat","Or") [Comb FuncCall ("FlatXML","flatx2exp") [Var 132],Comb FuncCall ("FlatXML","flatx2exp") [Var 134]])])])])])])])]),Branch (LPattern (Charc  'g')) (Case  Flex (Var 6) [Branch (Pattern ("Prelude",":") [136,137]) (Case  Flex (Var 136) [Branch (LPattern (Charc  'u')) (Case  Flex (Var 137) [Branch (Pattern ("Prelude",":") [138,139]) (Case  Flex (Var 138) [Branch (LPattern (Charc  'a')) (Case  Flex (Var 139) [Branch (Pattern ("Prelude",":") [140,141]) (Case  Flex (Var 140) [Branch (LPattern (Charc  'r')) (Case  Flex (Var 141) [Branch (Pattern ("Prelude",":") [142,143]) (Case  Flex (Var 142) [Branch (LPattern (Charc  'd')) (Case  Flex (Var 143) [Branch (Pattern ("Prelude",":") [144,145]) (Case  Flex (Var 144) [Branch (LPattern (Charc  'e')) (Case  Flex (Var 145) [Branch (Pattern ("Prelude",":") [146,147]) (Case  Flex (Var 146) [Branch (LPattern (Charc  'd')) (Case  Flex (Var 147) [Branch (Pattern ("Prelude",":") [148,149]) (Case  Flex (Var 148) [Branch (LPattern (Charc  'e')) (Case  Flex (Var 149) [Branch (Pattern ("Prelude",":") [150,151]) (Case  Flex (Var 150) [Branch (LPattern (Charc  'x')) (Case  Flex (Var 151) [Branch (Pattern ("Prelude",":") [152,153]) (Case  Flex (Var 152) [Branch (LPattern (Charc  'p')) (Case  Flex (Var 153) [Branch (Pattern ("Prelude",":") [154,155]) (Case  Flex (Var 154) [Branch (LPattern (Charc  'r')) (Case  Flex (Var 155) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 4) [Branch (Pattern ("Prelude",":") [156,157]) (Case  Flex (Var 156) [Branch (Pattern ("XML","XElem") [158,159,160]) (Case  Flex (Var 158) [Branch (Pattern ("Prelude",":") [161,162]) (Case  Flex (Var 161) [Branch (LPattern (Charc  'f')) (Case  Flex (Var 162) [Branch (Pattern ("Prelude",":") [163,164]) (Case  Flex (Var 163) [Branch (LPattern (Charc  'r')) (Case  Flex (Var 164) [Branch (Pattern ("Prelude",":") [165,166]) (Case  Flex (Var 165) [Branch (LPattern (Charc  'e')) (Case  Flex (Var 166) [Branch (Pattern ("Prelude",":") [167,168]) (Case  Flex (Var 167) [Branch (LPattern (Charc  'e')) (Case  Flex (Var 168) [Branch (Pattern ("Prelude",":") [169,170]) (Case  Flex (Var 169) [Branch (LPattern (Charc  'v')) (Case  Flex (Var 170) [Branch (Pattern ("Prelude",":") [171,172]) (Case  Flex (Var 171) [Branch (LPattern (Charc  'a')) (Case  Flex (Var 172) [Branch (Pattern ("Prelude",":") [173,174]) (Case  Flex (Var 173) [Branch (LPattern (Charc  'r')) (Case  Flex (Var 174) [Branch (Pattern ("Prelude",":") [175,176]) (Case  Flex (Var 175) [Branch (LPattern (Charc  's')) (Case  Flex (Var 176) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 159) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 157) [Branch (Pattern ("Prelude",":") [177,178]) (Case  Flex (Var 178) [Branch (Pattern ("Prelude",":") [179,180]) (Case  Flex (Var 180) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Flat","GuardedExpr") [Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("FlatXML","flatx2var") [],Var 160],Comb FuncCall ("FlatXML","flatx2exp") [Var 177],Comb FuncCall ("FlatXML","flatx2exp") [Var 179]])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])),Func ("FlatXML","flatx2exp.flatx2CaseType.91") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Flat","CaseType") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 2) [Branch (LPattern (Charc  'R')) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 4) [Branch (LPattern (Charc  'i')) (Case  Flex (Var 5) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 6) [Branch (LPattern (Charc  'g')) (Case  Flex (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case  Flex (Var 8) [Branch (LPattern (Charc  'i')) (Case  Flex (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case  Flex (Var 10) [Branch (LPattern (Charc  'd')) (Case  Flex (Var 11) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Flat","Rigid") [])])])])])])])])])]),Branch (LPattern (Charc  'F')) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [12,13]) (Case  Flex (Var 12) [Branch (LPattern (Charc  'l')) (Case  Flex (Var 13) [Branch (Pattern ("Prelude",":") [14,15]) (Case  Flex (Var 14) [Branch (LPattern (Charc  'e')) (Case  Flex (Var 15) [Branch (Pattern ("Prelude",":") [16,17]) (Case  Flex (Var 16) [Branch (LPattern (Charc  'x')) (Case  Flex (Var 17) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Flat","Flex") [])])])])])])])])])])),Func ("FlatXML","flatx2exp._#selFP2#bindings") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Flat","Expr") []]],TCons ("Flat","Expr") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Flat","Expr") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("FlatXML","flatx2exp._#selFP3#exp") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Flat","Expr") []]],TCons ("Flat","Expr") []]) (TCons ("Flat","Expr") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("FlatXML","flatx2exp._#selFP5#bindings") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Flat","Expr") []]],TCons ("Flat","Expr") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Flat","Expr") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("FlatXML","flatx2exp._#selFP6#exp") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Flat","Expr") []]],TCons ("Flat","Expr") []]) (TCons ("Flat","Expr") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("FlatXML","flatx2let") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("XML","XmlExp") []]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Flat","Expr") []]],TCons ("Flat","Expr") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("FlatXML","flatx2exp") [Var 2]]),Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 2) [Branch (Pattern ("XML","XElem") [6,7,8]) (Case  Flex (Var 6) [Branch (Pattern ("Prelude",":") [9,10]) (Case  Flex (Var 9) [Branch (LPattern (Charc  'b')) (Case  Flex (Var 10) [Branch (Pattern ("Prelude",":") [11,12]) (Case  Flex (Var 11) [Branch (LPattern (Charc  'i')) (Case  Flex (Var 12) [Branch (Pattern ("Prelude",":") [13,14]) (Case  Flex (Var 13) [Branch (LPattern (Charc  'n')) (Case  Flex (Var 14) [Branch (Pattern ("Prelude",":") [15,16]) (Case  Flex (Var 15) [Branch (LPattern (Charc  'd')) (Case  Flex (Var 16) [Branch (Pattern ("Prelude",":") [17,18]) (Case  Flex (Var 17) [Branch (LPattern (Charc  'i')) (Case  Flex (Var 18) [Branch (Pattern ("Prelude",":") [19,20]) (Case  Flex (Var 19) [Branch (LPattern (Charc  'n')) (Case  Flex (Var 20) [Branch (Pattern ("Prelude",":") [21,22]) (Case  Flex (Var 21) [Branch (LPattern (Charc  'g')) (Case  Flex (Var 22) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 7) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 8) [Branch (Pattern ("Prelude",":") [23,24]) (Case  Flex (Var 23) [Branch (Pattern ("XML","XElem") [25,26,27]) (Case  Flex (Var 25) [Branch (Pattern ("Prelude",":") [28,29]) (Case  Flex (Var 28) [Branch (LPattern (Charc  'v')) (Case  Flex (Var 29) [Branch (Pattern ("Prelude",":") [30,31]) (Case  Flex (Var 30) [Branch (LPattern (Charc  'a')) (Case  Flex (Var 31) [Branch (Pattern ("Prelude",":") [32,33]) (Case  Flex (Var 32) [Branch (LPattern (Charc  'r')) (Case  Flex (Var 33) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 26) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 24) [Branch (Pattern ("Prelude",":") [34,35]) (Case  Flex (Var 35) [Branch (Pattern ("Prelude","[]") []) (Let [(36,Comb FuncCall ("FlatXML","flatx2let") [Comb ConsCall ("Prelude",":") [Var 4,Var 5]]),(37,Comb FuncCall ("FlatXML","flatx2let._#selFP8#bindings") [Var 36]),(38,Comb FuncCall ("FlatXML","flatx2let._#selFP9#exp") [Var 36])] (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Read","readNat") [Comb FuncCall ("FlatXML","flatx2String") [Var 27]],Comb FuncCall ("FlatXML","flatx2exp") [Var 34]],Var 37],Var 38]))])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])),Func ("FlatXML","flatx2let._#selFP8#bindings") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Flat","Expr") []]],TCons ("Flat","Expr") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Flat","Expr") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("FlatXML","flatx2let._#selFP9#exp") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Flat","Expr") []]],TCons ("Flat","Expr") []]) (TCons ("Flat","Expr") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("FlatXML","flatx2branch") 1 Private (FuncType (TCons ("XML","XmlExp") []) (TCons ("Flat","BranchExpr") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("XML","XElem") [2,3,4]) (Case  Flex (Var 2) [Branch (Pattern ("Prelude",":") [5,6]) (Case  Flex (Var 5) [Branch (LPattern (Charc  'b')) (Case  Flex (Var 6) [Branch (Pattern ("Prelude",":") [7,8]) (Case  Flex (Var 7) [Branch (LPattern (Charc  'r')) (Case  Flex (Var 8) [Branch (Pattern ("Prelude",":") [9,10]) (Case  Flex (Var 9) [Branch (LPattern (Charc  'a')) (Case  Flex (Var 10) [Branch (Pattern ("Prelude",":") [11,12]) (Case  Flex (Var 11) [Branch (LPattern (Charc  'n')) (Case  Flex (Var 12) [Branch (Pattern ("Prelude",":") [13,14]) (Case  Flex (Var 13) [Branch (LPattern (Charc  'c')) (Case  Flex (Var 14) [Branch (Pattern ("Prelude",":") [15,16]) (Case  Flex (Var 15) [Branch (LPattern (Charc  'h')) (Case  Flex (Var 16) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 4) [Branch (Pattern ("Prelude",":") [17,18]) (Case  Flex (Var 17) [Branch (Pattern ("XML","XElem") [19,20,21]) (Case  Flex (Var 19) [Branch (Pattern ("Prelude",":") [22,23]) (Case  Flex (Var 22) [Branch (LPattern (Charc  'p')) (Case  Flex (Var 23) [Branch (Pattern ("Prelude",":") [24,25]) (Case  Flex (Var 24) [Branch (LPattern (Charc  'a')) (Case  Flex (Var 25) [Branch (Pattern ("Prelude",":") [26,27]) (Case  Flex (Var 26) [Branch (LPattern (Charc  't')) (Case  Flex (Var 27) [Branch (Pattern ("Prelude",":") [28,29]) (Case  Flex (Var 28) [Branch (LPattern (Charc  't')) (Case  Flex (Var 29) [Branch (Pattern ("Prelude",":") [30,31]) (Case  Flex (Var 30) [Branch (LPattern (Charc  'e')) (Case  Flex (Var 31) [Branch (Pattern ("Prelude",":") [32,33]) (Case  Flex (Var 32) [Branch (LPattern (Charc  'r')) (Case  Flex (Var 33) [Branch (Pattern ("Prelude",":") [34,35]) (Case  Flex (Var 34) [Branch (LPattern (Charc  'n')) (Case  Flex (Var 35) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 20) [Branch (Pattern ("Prelude",":") [36,37]) (Case  Flex (Var 36) [Branch (Pattern ("Prelude","(,)") [38,39]) (Case  Flex (Var 38) [Branch (Pattern ("Prelude",":") [40,41]) (Case  Flex (Var 40) [Branch (LPattern (Charc  'n')) (Case  Flex (Var 41) [Branch (Pattern ("Prelude",":") [42,43]) (Case  Flex (Var 42) [Branch (LPattern (Charc  'a')) (Case  Flex (Var 43) [Branch (Pattern ("Prelude",":") [44,45]) (Case  Flex (Var 44) [Branch (LPattern (Charc  'm')) (Case  Flex (Var 45) [Branch (Pattern ("Prelude",":") [46,47]) (Case  Flex (Var 46) [Branch (LPattern (Charc  'e')) (Case  Flex (Var 47) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 37) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 18) [Branch (Pattern ("Prelude",":") [48,49]) (Case  Flex (Var 49) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Flat","Branch") [Comb ConsCall ("Flat","Pattern") [Var 39,Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("FlatXML","flatx2var") [],Var 21]],Comb FuncCall ("FlatXML","flatx2exp") [Var 48]])])])])])])])])])])])])])])])])])])])])])])])])])])])]),Branch (LPattern (Charc  'l')) (Case  Flex (Var 23) [Branch (Pattern ("Prelude",":") [50,51]) (Case  Flex (Var 50) [Branch (LPattern (Charc  'p')) (Case  Flex (Var 51) [Branch (Pattern ("Prelude",":") [52,53]) (Case  Flex (Var 52) [Branch (LPattern (Charc  'a')) (Case  Flex (Var 53) [Branch (Pattern ("Prelude",":") [54,55]) (Case  Flex (Var 54) [Branch (LPattern (Charc  't')) (Case  Flex (Var 55) [Branch (Pattern ("Prelude",":") [56,57]) (Case  Flex (Var 56) [Branch (LPattern (Charc  't')) (Case  Flex (Var 57) [Branch (Pattern ("Prelude",":") [58,59]) (Case  Flex (Var 58) [Branch (LPattern (Charc  'e')) (Case  Flex (Var 59) [Branch (Pattern ("Prelude",":") [60,61]) (Case  Flex (Var 60) [Branch (LPattern (Charc  'r')) (Case  Flex (Var 61) [Branch (Pattern ("Prelude",":") [62,63]) (Case  Flex (Var 62) [Branch (LPattern (Charc  'n')) (Case  Flex (Var 63) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 20) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 21) [Branch (Pattern ("Prelude",":") [64,65]) (Case  Flex (Var 65) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 18) [Branch (Pattern ("Prelude",":") [66,67]) (Case  Flex (Var 67) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Flat","Branch") [Comb ConsCall ("Flat","LPattern") [Comb FuncCall ("FlatXML","flatx2lit") [Var 64]],Comb FuncCall ("FlatXML","flatx2exp") [Var 66]])])])])])])])])])])])])])])])])])])])])]),Branch (LPattern (Charc  'h')) (Case  Flex (Var 23) [Branch (Pattern ("Prelude",":") [68,69]) (Case  Flex (Var 68) [Branch (LPattern (Charc  'p')) (Case  Flex (Var 69) [Branch (Pattern ("Prelude",":") [70,71]) (Case  Flex (Var 70) [Branch (LPattern (Charc  'a')) (Case  Flex (Var 71) [Branch (Pattern ("Prelude",":") [72,73]) (Case  Flex (Var 72) [Branch (LPattern (Charc  't')) (Case  Flex (Var 73) [Branch (Pattern ("Prelude",":") [74,75]) (Case  Flex (Var 74) [Branch (LPattern (Charc  't')) (Case  Flex (Var 75) [Branch (Pattern ("Prelude",":") [76,77]) (Case  Flex (Var 76) [Branch (LPattern (Charc  'e')) (Case  Flex (Var 77) [Branch (Pattern ("Prelude",":") [78,79]) (Case  Flex (Var 78) [Branch (LPattern (Charc  'r')) (Case  Flex (Var 79) [Branch (Pattern ("Prelude",":") [80,81]) (Case  Flex (Var 80) [Branch (LPattern (Charc  'n')) (Case  Flex (Var 81) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 18) [Branch (Pattern ("Prelude",":") [82,83]) (Case  Flex (Var 83) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","error") [Comb ConsCall ("Prelude",":") [Lit (Charc  'H'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'v'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'F'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  '!'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])),Func ("FlatXML","flatx2lit") 1 Private (FuncType (TCons ("XML","XmlExp") []) (TCons ("Flat","Literal") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("XML","XElem") [2,3,4]) (Case  Flex (Var 2) [Branch (Pattern ("Prelude",":") [5,6]) (Case  Flex (Var 5) [Branch (LPattern (Charc  'i')) (Case  Flex (Var 6) [Branch (Pattern ("Prelude",":") [7,8]) (Case  Flex (Var 7) [Branch (LPattern (Charc  'n')) (Case  Flex (Var 8) [Branch (Pattern ("Prelude",":") [9,10]) (Case  Flex (Var 9) [Branch (LPattern (Charc  't')) (Case  Flex (Var 10) [Branch (Pattern ("Prelude",":") [11,12]) (Case  Flex (Var 11) [Branch (LPattern (Charc  'c')) (Case  Flex (Var 12) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Flat","Intc") [Comb FuncCall ("Read","readNat") [Comb FuncCall ("FlatXML","flatx2String") [Var 4]]])])])])])])])])]),Branch (LPattern (Charc  'f')) (Case  Flex (Var 6) [Branch (Pattern ("Prelude",":") [13,14]) (Case  Flex (Var 13) [Branch (LPattern (Charc  'l')) (Case  Flex (Var 14) [Branch (Pattern ("Prelude",":") [15,16]) (Case  Flex (Var 15) [Branch (LPattern (Charc  'o')) (Case  Flex (Var 16) [Branch (Pattern ("Prelude",":") [17,18]) (Case  Flex (Var 17) [Branch (LPattern (Charc  'a')) (Case  Flex (Var 18) [Branch (Pattern ("Prelude",":") [19,20]) (Case  Flex (Var 19) [Branch (LPattern (Charc  't')) (Case  Flex (Var 20) [Branch (Pattern ("Prelude",":") [21,22]) (Case  Flex (Var 21) [Branch (LPattern (Charc  'c')) (Case  Flex (Var 22) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","error") [Comb ConsCall ("Prelude",":") [Lit (Charc  'R'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  '!'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])])])])])])])])])])])])]),Branch (LPattern (Charc  'c')) (Case  Flex (Var 6) [Branch (Pattern ("Prelude",":") [23,24]) (Case  Flex (Var 23) [Branch (LPattern (Charc  'h')) (Case  Flex (Var 24) [Branch (Pattern ("Prelude",":") [25,26]) (Case  Flex (Var 25) [Branch (LPattern (Charc  'a')) (Case  Flex (Var 26) [Branch (Pattern ("Prelude",":") [27,28]) (Case  Flex (Var 27) [Branch (LPattern (Charc  'r')) (Case  Flex (Var 28) [Branch (Pattern ("Prelude",":") [29,30]) (Case  Flex (Var 29) [Branch (LPattern (Charc  'c')) (Case  Flex (Var 30) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Flat","Charc") [Comb FuncCall ("Prelude","chr") [Comb FuncCall ("Read","readNat") [Comb FuncCall ("FlatXML","flatx2String") [Var 4]]]])])])])])])])])])])])])])])),Func ("FlatXML","flatx2texp") 1 Private (FuncType (TCons ("XML","XmlExp") []) (TCons ("Flat","TypeExpr") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("XML","XElem") [2,3,4]) (Case  Flex (Var 2) [Branch (Pattern ("Prelude",":") [5,6]) (Case  Flex (Var 5) [Branch (LPattern (Charc  't')) (Case  Flex (Var 6) [Branch (Pattern ("Prelude",":") [7,8]) (Case  Flex (Var 7) [Branch (LPattern (Charc  'v')) (Case  Flex (Var 8) [Branch (Pattern ("Prelude",":") [9,10]) (Case  Flex (Var 9) [Branch (LPattern (Charc  'a')) (Case  Flex (Var 10) [Branch (Pattern ("Prelude",":") [11,12]) (Case  Flex (Var 11) [Branch (LPattern (Charc  'r')) (Case  Flex (Var 12) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Flat","TVar") [Comb FuncCall ("Read","readNat") [Comb FuncCall ("FlatXML","flatx2String") [Var 4]]])])])])])])]),Branch (LPattern (Charc  'c')) (Case  Flex (Var 8) [Branch (Pattern ("Prelude",":") [13,14]) (Case  Flex (Var 13) [Branch (LPattern (Charc  'o')) (Case  Flex (Var 14) [Branch (Pattern ("Prelude",":") [15,16]) (Case  Flex (Var 15) [Branch (LPattern (Charc  'n')) (Case  Flex (Var 16) [Branch (Pattern ("Prelude",":") [17,18]) (Case  Flex (Var 17) [Branch (LPattern (Charc  's')) (Case  Flex (Var 18) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [19,20]) (Case  Flex (Var 19) [Branch (Pattern ("Prelude","(,)") [21,22]) (Case  Flex (Var 21) [Branch (Pattern ("Prelude",":") [23,24]) (Case  Flex (Var 23) [Branch (LPattern (Charc  'n')) (Case  Flex (Var 24) [Branch (Pattern ("Prelude",":") [25,26]) (Case  Flex (Var 25) [Branch (LPattern (Charc  'a')) (Case  Flex (Var 26) [Branch (Pattern ("Prelude",":") [27,28]) (Case  Flex (Var 27) [Branch (LPattern (Charc  'm')) (Case  Flex (Var 28) [Branch (Pattern ("Prelude",":") [29,30]) (Case  Flex (Var 29) [Branch (LPattern (Charc  'e')) (Case  Flex (Var 30) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 20) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Flat","TCons") [Var 22,Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("FlatXML","flatx2texp") [],Var 4]])])])])])])])])])])])])])])])])])])])])])]),Branch (LPattern (Charc  'f')) (Case  Flex (Var 6) [Branch (Pattern ("Prelude",":") [31,32]) (Case  Flex (Var 31) [Branch (LPattern (Charc  'u')) (Case  Flex (Var 32) [Branch (Pattern ("Prelude",":") [33,34]) (Case  Flex (Var 33) [Branch (LPattern (Charc  'n')) (Case  Flex (Var 34) [Branch (Pattern ("Prelude",":") [35,36]) (Case  Flex (Var 35) [Branch (LPattern (Charc  'c')) (Case  Flex (Var 36) [Branch (Pattern ("Prelude",":") [37,38]) (Case  Flex (Var 37) [Branch (LPattern (Charc  't')) (Case  Flex (Var 38) [Branch (Pattern ("Prelude",":") [39,40]) (Case  Flex (Var 39) [Branch (LPattern (Charc  'y')) (Case  Flex (Var 40) [Branch (Pattern ("Prelude",":") [41,42]) (Case  Flex (Var 41) [Branch (LPattern (Charc  'p')) (Case  Flex (Var 42) [Branch (Pattern ("Prelude",":") [43,44]) (Case  Flex (Var 43) [Branch (LPattern (Charc  'e')) (Case  Flex (Var 44) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 4) [Branch (Pattern ("Prelude",":") [45,46]) (Case  Flex (Var 46) [Branch (Pattern ("Prelude",":") [47,48]) (Case  Flex (Var 48) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Flat","FuncType") [Comb FuncCall ("FlatXML","flatx2texp") [Var 45],Comb FuncCall ("FlatXML","flatx2texp") [Var 47]])])])])])])])])])])])])])])])])])])])])])])])),Func ("FlatXML","flatx2Fixity") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Flat","Fixity") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 2) [Branch (LPattern (Charc  'I')) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 4) [Branch (LPattern (Charc  'n')) (Case  Flex (Var 5) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 6) [Branch (LPattern (Charc  'f')) (Case  Flex (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case  Flex (Var 8) [Branch (LPattern (Charc  'i')) (Case  Flex (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case  Flex (Var 10) [Branch (LPattern (Charc  'x')) (Case  Flex (Var 11) [Branch (Pattern ("Prelude",":") [12,13]) (Case  Flex (Var 12) [Branch (LPattern (Charc  'O')) (Case  Flex (Var 13) [Branch (Pattern ("Prelude",":") [14,15]) (Case  Flex (Var 14) [Branch (LPattern (Charc  'p')) (Case  Flex (Var 15) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Flat","InfixOp") [])])])]),Branch (LPattern (Charc  'l')) (Case  Flex (Var 13) [Branch (Pattern ("Prelude",":") [16,17]) (Case  Flex (Var 16) [Branch (LPattern (Charc  'O')) (Case  Flex (Var 17) [Branch (Pattern ("Prelude",":") [18,19]) (Case  Flex (Var 18) [Branch (LPattern (Charc  'p')) (Case  Flex (Var 19) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Flat","InfixlOp") [])])])])])]),Branch (LPattern (Charc  'r')) (Case  Flex (Var 13) [Branch (Pattern ("Prelude",":") [20,21]) (Case  Flex (Var 20) [Branch (LPattern (Charc  'O')) (Case  Flex (Var 21) [Branch (Pattern ("Prelude",":") [22,23]) (Case  Flex (Var 22) [Branch (LPattern (Charc  'p')) (Case  Flex (Var 23) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Flat","InfixrOp") [])])])])])])])])])])])])])])])])])])),Func ("FlatXML","flatx2CombType") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Flat","CombType") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 2) [Branch (LPattern (Charc  'F')) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 4) [Branch (LPattern (Charc  'u')) (Case  Flex (Var 5) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 6) [Branch (LPattern (Charc  'n')) (Case  Flex (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case  Flex (Var 8) [Branch (LPattern (Charc  'c')) (Case  Flex (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case  Flex (Var 10) [Branch (LPattern (Charc  'C')) (Case  Flex (Var 11) [Branch (Pattern ("Prelude",":") [12,13]) (Case  Flex (Var 12) [Branch (LPattern (Charc  'a')) (Case  Flex (Var 13) [Branch (Pattern ("Prelude",":") [14,15]) (Case  Flex (Var 14) [Branch (LPattern (Charc  'l')) (Case  Flex (Var 15) [Branch (Pattern ("Prelude",":") [16,17]) (Case  Flex (Var 16) [Branch (LPattern (Charc  'l')) (Case  Flex (Var 17) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Flat","FuncCall") [])])])])])])])])])])])])])])])]),Branch (LPattern (Charc  'C')) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [18,19]) (Case  Flex (Var 18) [Branch (LPattern (Charc  'o')) (Case  Flex (Var 19) [Branch (Pattern ("Prelude",":") [20,21]) (Case  Flex (Var 20) [Branch (LPattern (Charc  'n')) (Case  Flex (Var 21) [Branch (Pattern ("Prelude",":") [22,23]) (Case  Flex (Var 22) [Branch (LPattern (Charc  's')) (Case  Flex (Var 23) [Branch (Pattern ("Prelude",":") [24,25]) (Case  Flex (Var 24) [Branch (LPattern (Charc  'C')) (Case  Flex (Var 25) [Branch (Pattern ("Prelude",":") [26,27]) (Case  Flex (Var 26) [Branch (LPattern (Charc  'a')) (Case  Flex (Var 27) [Branch (Pattern ("Prelude",":") [28,29]) (Case  Flex (Var 28) [Branch (LPattern (Charc  'l')) (Case  Flex (Var 29) [Branch (Pattern ("Prelude",":") [30,31]) (Case  Flex (Var 30) [Branch (LPattern (Charc  'l')) (Case  Flex (Var 31) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Flat","ConsCall") [])])])])])])])])])])])])])])])]),Branch (LPattern (Charc  'P')) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [32,33]) (Case  Flex (Var 32) [Branch (LPattern (Charc  'a')) (Case  Flex (Var 33) [Branch (Pattern ("Prelude",":") [34,35]) (Case  Flex (Var 34) [Branch (LPattern (Charc  'r')) (Case  Flex (Var 35) [Branch (Pattern ("Prelude",":") [36,37]) (Case  Flex (Var 36) [Branch (LPattern (Charc  't')) (Case  Flex (Var 37) [Branch (Pattern ("Prelude",":") [38,39]) (Case  Flex (Var 38) [Branch (LPattern (Charc  'C')) (Case  Flex (Var 39) [Branch (Pattern ("Prelude",":") [40,41]) (Case  Flex (Var 40) [Branch (LPattern (Charc  'a')) (Case  Flex (Var 41) [Branch (Pattern ("Prelude",":") [42,43]) (Case  Flex (Var 42) [Branch (LPattern (Charc  'l')) (Case  Flex (Var 43) [Branch (Pattern ("Prelude",":") [44,45]) (Case  Flex (Var 44) [Branch (LPattern (Charc  'l')) (Case  Flex (Var 45) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Flat","PartCall") [])])])])])])])])])])])])])])])])])])),Func ("FlatXML","flatx2String") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("XML","XmlExp") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 2) [Branch (Pattern ("XML","XText") [4]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Var 4)])])]))] []