Prog "Flat" ["Char","Directory","Distribution","Prelude"] [TypeSyn ("Flat","TVarIndex") Public [] (TCons ("Prelude","Int") []),TypeSyn ("Flat","VarIndex") Public [] (TCons ("Prelude","Int") []),Type ("Flat","Prog") Public [] [Cons ("Flat","Prog") 6 Public [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","[]") [TCons ("Flat","TypeDecl") []],TCons ("Prelude","[]") [TCons ("Flat","FuncDecl") []],TCons ("Prelude","[]") [TCons ("Flat","OpDecl") []],TCons ("Prelude","[]") [TCons ("Flat","Translation") []]]],Type ("Flat","TypeDecl") Public [] [Cons ("Flat","Type") 3 Public [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Int") []],TCons ("Prelude","[]") [TCons ("Flat","ConsDecl") []]]],Type ("Flat","ConsDecl") Public [] [Cons ("Flat","Cons") 3 Public [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Flat","TypeExpr") []]]],Type ("Flat","TypeExpr") Public [] [Cons ("Flat","TVar") 1 Public [TCons ("Prelude","Int") []],Cons ("Flat","FuncType") 2 Public [TCons ("Flat","TypeExpr") [],TCons ("Flat","TypeExpr") []],Cons ("Flat","TCons") 2 Public [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Flat","TypeExpr") []]]],Type ("Flat","OpDecl") Public [] [Cons ("Flat","Op") 3 Public [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Flat","Fixity") [],TCons ("Prelude","Int") []]],Type ("Flat","Fixity") Public [] [Cons ("Flat","InfixOp") 0 Public [],Cons ("Flat","InfixlOp") 0 Public [],Cons ("Flat","InfixrOp") 0 Public []],Type ("Flat","FuncDecl") Public [] [Cons ("Flat","Func") 4 Public [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","Int") [],TCons ("Flat","TypeExpr") [],TCons ("Flat","Rule") []]],Type ("Flat","Rule") Public [] [Cons ("Flat","Rule") 2 Public [TCons ("Prelude","[]") [TCons ("Prelude","Int") []],TCons ("Flat","Expr") []],Cons ("Flat","External") 1 Public [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]],Type ("Flat","CaseType") Public [] [Cons ("Flat","Rigid") 0 Public [],Cons ("Flat","Flex") 0 Public []],Type ("Flat","CombType") Public [] [Cons ("Flat","FuncCall") 0 Public [],Cons ("Flat","ConsCall") 0 Public [],Cons ("Flat","PartCall") 0 Public []],Type ("Flat","Expr") Public [] [Cons ("Flat","Var") 1 Public [TCons ("Prelude","Int") []],Cons ("Flat","Lit") 1 Public [TCons ("Flat","Literal") []],Cons ("Flat","Comb") 3 Public [TCons ("Flat","CombType") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Flat","Expr") []]],Cons ("Flat","Apply") 2 Public [TCons ("Flat","Expr") [],TCons ("Flat","Expr") []],Cons ("Flat","Constr") 2 Public [TCons ("Prelude","[]") [TCons ("Prelude","Int") []],TCons ("Flat","Expr") []],Cons ("Flat","Or") 2 Public [TCons ("Flat","Expr") [],TCons ("Flat","Expr") []],Cons ("Flat","Case") 3 Public [TCons ("Flat","CaseType") [],TCons ("Flat","Expr") [],TCons ("Prelude","[]") [TCons ("Flat","BranchExpr") []]],Cons ("Flat","Let") 2 Public [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Flat","Expr") []]],TCons ("Flat","Expr") []],Cons ("Flat","Choice") 1 Public [TCons ("Flat","Expr") []],Cons ("Flat","GuardedExpr") 3 Public [TCons ("Prelude","[]") [TCons ("Prelude","Int") []],TCons ("Flat","Expr") [],TCons ("Flat","Expr") []]],Type ("Flat","BranchExpr") Public [] [Cons ("Flat","Branch") 2 Public [TCons ("Flat","Pattern") [],TCons ("Flat","Expr") []]],Type ("Flat","Pattern") Public [] [Cons ("Flat","Pattern") 2 Public [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Int") []]],Cons ("Flat","LPattern") 1 Public [TCons ("Flat","Literal") []]],Type ("Flat","Literal") Public [] [Cons ("Flat","Intc") 1 Public [TCons ("Prelude","Int") []],Cons ("Flat","Floatc") 1 Public [TCons ("Prelude","Float") []],Cons ("Flat","Charc") 1 Public [TCons ("Prelude","Char") []]],Type ("Flat","Translation") Public [] [Cons ("Flat","Trans") 2 Public [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]] [Func ("Flat","readFlatCurry") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Flat","Prog") []])) (Rule [] (Var 0)),Func ("Flat","readFlatCurryWithParseOptions") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Distribution","FrontendParams") []) (TCons ("Prelude","IO") [TCons ("Flat","Prog") []]))) (Rule [] (Var 0)),Func ("Flat","readFlatCurryFile") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Flat","Prog") []])) (Rule [] (Var 0)),Func ("Flat","prim_readFlatCurryFile") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Flat","Prog") []])) (External "Flat.prim_readFlatCurryFile"),Func ("Flat","splitFlatModName") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [] (Var 0))] []