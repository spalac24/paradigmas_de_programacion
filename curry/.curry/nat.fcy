Prog "nat" ["Prelude"] [Type ("nat","Nat") Public [] [Cons ("nat","Z") 0 Public [],Cons ("nat","S") 1 Public [TCons ("nat","Nat") []]]] [Func ("nat","add") 2 Public (FuncType (TCons ("nat","Nat") []) (FuncType (TCons ("nat","Nat") []) (TCons ("nat","Nat") []))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("nat","Z") []) (Var 1),Branch (Pattern ("nat","S") [3]) (Comb ConsCall ("nat","S") [Comb FuncCall ("nat","add") [Var 1,Var 3]])])),Func ("nat","leq") 2 Public (FuncType (TCons ("nat","Nat") []) (FuncType (TCons ("nat","Nat") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Case  Flex (Var 1) [Branch (Pattern ("nat","Z") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("nat","S") [3]) (Case  Flex (Var 2) [Branch (Pattern ("nat","Z") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("nat","S") [4]) (Comb FuncCall ("nat","leq") [Var 3,Var 4])])]))] []