#######################################################
## edit the next two lines or set the according paths
#######################################################

GHCBIN = $(shell which ghc)
CYMAKEBIN = $(shell which cymake)

########################################################
## paths within the kics folder
########################################################

BIN = bin/
SRC_DIR = src
SRC = $(SRC_DIR)/
DOC = doc/
LIB = $(SRC)lib/
TOOLS_DIR = $(SRC)tools
TOOLS = $(TOOLS_DIR)/
DIST = dist/
THIS = ../kics/
ORACLE = $(SRC)oracle/
CPNS = cpns/
WWW = www/
CURRYSUB = .curry/
KICSSUB = $(CURRYSUB)kics/

########################################################
## calls to compilers 
########################################################

HC_OPTS = -i$(SRC_DIR) -i$(TOOLS_DIR)

GHCCALL = $(GHCBIN) --make -fglasgow-exts -H500m
KGHC = $(GHCCALL) -i$(LIBS) 
GHC  = $(GHCCALL) -i$(SRC) 
CY   = $(CYMAKEBIN) -e 
LIBS = $(shell $(BIN)kicslib)
KICS = $(BIN)kics -nouserlibpath -v 6 -make

SRCS = $(SRC)kics.hs $(SRC)kicsi.hs $(SRC)Generate.hs $(SRC)kicslib.hs 

########################################################
## the make destinations
########################################################

all: $(SRC)InstallDir.hs $(BIN)generate $(BIN)kicslib $(BIN)kics \
     $(BIN)kicsi libs cpns www tools

.PHONY: tools
tools:  $(SRC)InstallDir.hs $(BIN)makeExternalInterface $(BIN)prettyflat\
	$(BIN)currytest $(BIN)prettyacy

$(BIN)generate: $(SRC)Generate.hi
	$(GHC) $(SRC)Generate.hs -o $(BIN)generate


$(SRC)$(KICSSUB)AutoGenerated2.hs: $(BIN)generate
	$(BIN)generate $(SRC)

$(SRC)InstallDir.hs: prerequisites
	@echo "module InstallDir where"  >  $(SRC)InstallDir.hs.tmp
	@echo "installDir = \""`pwd`"\"" >> $(SRC)InstallDir.hs.tmp
	@echo "ghc_call= \""$(GHCBIN)"\"" >> $(SRC)InstallDir.hs.tmp
	@if cmp -s $(SRC)InstallDir.hs.tmp $(SRC)InstallDir.hs; then \
	  echo "InstallDir.hs up to date"; rm $(SRC)InstallDir.hs.tmp; \
	else \
	  echo "replacing InstallDir.hs"; mv $(SRC)InstallDir.hs.tmp $(SRC)InstallDir.hs; \
	fi
	@echo "#!/bin/sh" > $(BIN)parsecurry
	@echo $(CYMAKEBIN) $$\@ >> $(BIN)parsecurry
	@chmod +x $(BIN)parsecurry


prerequisites:
ifeq (,$(findstring ghc,$(GHCBIN)))
	@echo "please set a path to a valid ghc binary"
	exit 1
endif
ifeq (,$(findstring cymake,$(CYMAKEBIN)))
	@echo "please set a path to a valid curry frontend (a cymake binary)"
	exit 1
endif


$(BIN)kicslib: $(SRC)kicslib.hi
	mkdir -p bin 
	$(GHC) $(SRC)kicslib -o $(BIN)kicslib

$(BIN)makeExternalInterface: $(SRC)InstallDir.hs $(BIN)kicslib
	$(KGHC) $(SRC)MakeExternalInterface -o $(BIN)makeExternalInterface

$(SRC)MyReadline.hs:
ifeq (,$(filter readline% editline%,$(shell  $(GHCBIN)-pkg list readline)))
	@echo neither readline nor editline package found
	cp $(SRC)NoReadline.make $(SRC)MyReadline.hs 
else
	@echo readline or editline package found
	cp $(SRC)WithReadline.make $(SRC)MyReadline.hs
endif


$(BIN)kicsi: $(BIN)kicslib $(SRC)kicsi.o $(SRC)MyReadline.hs
	$(KGHC) $(SRC)kicsi -o $(BIN)kicsi

$(BIN)kics:  $(BIN)kicslib $(SRC)kics.hi
	$(KGHC) $(SRC)kics -o $(BIN)kics

.PHONY: runtime
runtime: $(SRC)InstallDir.hs  
	$(GHC) -fno-cse $(SRC)Curry.hs

.PHONY: libs 
libs: $(BIN)kics $(SRC)$(KICSSUB)AutoGenerated2.hs runtime $(BIN)makeacy

	$(KICS) $(LIB)All_Libraries
	cd $(LIB); ../../bin/makeacy All_Libraries

.PHONY: 
clean:
	git clean -dfX


.PHONY: dist 
dist: $(DOC)UserManual.pdf $(DOC)UserManual.html
	mkdir -p dist
	git archive -v --prefix=kics/ master > $(THIS)$(DIST)kics_src.tar
	tar fr $(THIS)$(DIST)kics_src.tar  $(THIS)$(DOC)/UserManual.pdf 
	tar fr $(THIS)$(DIST)kics_src.tar  $(THIS)$(DOC)/UserManual.html 
	gzip -9 -f $(THIS)$(DIST)kics_src.tar 
	mv $(THIS)$(DIST)kics_src.tar.gz ~/public_html/download/kics_src.tgz
	mv $(DOC)UserManual.pdf ~/public_html/download/
	mv $(DOC)UserManual.html ~/public_html/kics/
	chmod a+r ~/public_html/download/kics_src.tgz
	chmod a+r ~/public_html/download/UserManual.pdf
	git push "at public"

.PHONY: oracle
oracle: OracleLib $(BIN)prophecy
	$(BIN)prophecy -m All_Libraries
	$(KICS) --debug All_Libraries

bio: oracle $(BIN)stricths $(BIN)biotope  biostdlibraries

OracleLib: $(LIB)Oracle.curry $(LIB)coracle.c $(LIB)coracle.h\
           $(LIB)ExternalFunctionsCEventOracle.hs
	$(KICS) $(LIB)Oracle
	cd $(LIB);cc -fPIC -c coracle.c;\
          ar rc libcoracle.a coracle.o;\
	  if cc -shared -o libdyncoracle.so coracle.o; then \
	    echo "shared library compiled"; \
	  else \
	    cc -dynamiclib -single_module -o libdyncoracle.dylib coracle.o; \
	  fi
	$(KGHC) -i.. -L. -lcoracle $(LIB)ExternalFunctionsCEventOracle.hs
	$(KICS) $(LIB)Oracle

$(BIN)stricths: $(ORACLE)stricths.curry $(ORACLE)PrettyStrict.curry
	$(KICS) -executable -o $(BIN)stricths -userlibpath $(ORACLE) stricths.curry 

$(BIN)prophecy: $(ORACLE)Transform.curry $(ORACLE)Wrapper.curry
	$(KICS) -executable -o $(BIN)prophecy -userlibpath $(ORACLE) Transform.curry 

$(BIN)biotope: $(ORACLE)Biotope.curry
	$(KICS) -executable -o $(BIN)biotope -userlibpath $(ORACLE) Biotope.curry 

bioprelude:
	cd $(LIB);stricths Prelude;prophecy Prelude;cd ../..

biostdlibraries: 
	$(BIN)stricths -m All_Libraries
	$(KGHC) -O2 $(LIB)$(CURRYSUB)StrictAll_Libraries.hs
	$(KICS) --debug All_Libraries

$(BIN)prettyflat: $(LIB)PrettyFlat.curry 
	$(KICS) -executable -o $(BIN)prettyflat -main mainPrint PrettyFlat.curry 

$(BIN)prettyacy: $(TOOLS)prettyacy.hs $(TOOLS)AbstractCurry.hs
	$(GHC) -i$(TOOLS) -o $(BIN)prettyacy $(TOOLS)prettyacy.hs

$(BIN)currytest: $(TOOLS)currytest.curry
	$(KICS) -userlibpath $(TOOLS) -executable -o $(BIN)currytest -main main currytest.curry 

cpns: $(CPNS)CPNS.state

$(CPNS)CPNS.state: $(LIB)CPNS.curry
	$(KICS) -executable -o $(CPNS)CPNS.state $(LIB)CPNS.curry

www: $(WWW)submitform

$(WWW)submitform: $(LIB)HtmlCgi.curry
	make -C $(WWW)

$(DOC)UserManual.pdf: $(DOC)UserManual.text 
	cd $(DOC); \
	 pandoc -s --toc UserManual.text -o UserManual.tex; \
	 pdflatex UserManual; pdflatex UserManual

$(DOC)UserManual.html: $(DOC)UserManual.text 
	cd $(DOC); \
	 pandoc -s --toc UserManual.text -o UserManual.html


$(BIN)makeacy: $(TOOLS)MakeAcy.curry $(BIN)kics
	$(KICS) -executable -o $(BIN)makeacy -userlibpath $(ORACLE):$(TOOLS) MakeAcy


.PHONY: 
test: $(BIN)currytest
	cd examples;./doTest

depend : $(SRC)MyReadline.hs
	$(GHC) -M $(HC_OPTS) $(SRCS)

%.hi: %.o %.hs
	$(GHC) --make  $(HC_OPTS) $*.hs

# DO NOT DELETE: Beginning of Haskell dependencies
src/MyReadline.o : src/MyReadline.hs
src/InstallDir.o : src/InstallDir.hs
src/KicsSubdir.o : src/KicsSubdir.hs
src/MetaProgramming/FlatCurry.o : src/MetaProgramming/FlatCurry.hs
src/MetaProgramming/FlatCurry.o : src/KicsSubdir.hi
src/MetaProgramming/FlatCurryGoodies.o : src/MetaProgramming/FlatCurryGoodies.hs
src/MetaProgramming/FlatCurryGoodies.o : src/MetaProgramming/FlatCurry.hi
src/Simplification.o : src/Simplification.hs
src/Simplification.o : src/MetaProgramming/FlatCurryGoodies.hi
src/Simplification.o : src/MetaProgramming/FlatCurryGoodies.hi
src/Simplification.o : src/MetaProgramming/FlatCurry.hi
src/PreTrans.o : src/PreTrans.hs
src/PreTrans.o : src/MetaProgramming/FlatCurryGoodies.hi
src/PreTrans.o : src/MetaProgramming/FlatCurry.hi
src/FunctionalProg.o : src/FunctionalProg.hs
src/Brace.o : src/Brace.hs
src/ShowFlatCurry.o : src/ShowFlatCurry.hs
src/ShowFlatCurry.o : src/Brace.hi
src/ShowFlatCurry.o : src/MetaProgramming/FlatCurry.hi
src/ShowFunctionalProg.o : src/ShowFunctionalProg.hs
src/ShowFunctionalProg.o : src/Brace.hi
src/ShowFunctionalProg.o : src/FunctionalProg.hi
src/Names.o : src/Names.hs
src/Names.o : src/ShowFunctionalProg.hi
src/SafeCalls.o : src/SafeCalls.hs
src/Config.o : src/Config.hs
src/Config.o : src/KicsSubdir.hi
src/Config.o : src/Names.hi
src/Config.o : src/MetaProgramming/FlatCurry.hi
src/Config.o : src/SafeCalls.hi
src/Config.o : src/InstallDir.hi
src/CurryToHaskell.o : src/CurryToHaskell.hs
src/CurryToHaskell.o : src/Names.hi
src/CurryToHaskell.o : src/Names.hi
src/CurryToHaskell.o : src/Config.hi
src/CurryToHaskell.o : src/Brace.hi
src/CurryToHaskell.o : src/SafeCalls.hi
src/CurryToHaskell.o : src/Simplification.hi
src/CurryToHaskell.o : src/PreTrans.hi
src/CurryToHaskell.o : src/ShowFunctionalProg.hi
src/CurryToHaskell.o : src/FunctionalProg.hi
src/CurryToHaskell.o : src/MetaProgramming/FlatCurryGoodies.hi
src/CurryToHaskell.o : src/MetaProgramming/FlatCurry.hi
src/kicslib.o : src/kicslib.hs
src/kicslib.o : src/Config.hi
src/Generate.o : src/Generate.hs
src/Generate.o : src/Names.hi
src/Generate.o : src/FunctionalProg.hi
src/Generate.o : src/CurryToHaskell.hi
src/Generate.o : src/Config.hi
src/Generate.o : src/SafeCalls.hi
src/kicsi.o : src/kicsi.hs
src/kicsi.o : src/MyReadline.hi
src/kicsi.o : src/Names.hi
src/kicsi.o : src/Config.hi
src/kicsi.o : src/ShowFlatCurry.hi
src/kicsi.o : src/MetaProgramming/FlatCurryGoodies.hi
src/kicsi.o : src/MetaProgramming/FlatCurry.hi
src/kicsi.o : src/SafeCalls.hi
src/kicsi.o : src/CurryToHaskell.hi
src/kics.o : src/kics.hs
src/kics.o : src/SafeCalls.hi
src/kics.o : src/CurryToHaskell.hi
src/kics.o : src/Config.hi
# DO NOT DELETE: End of Haskell dependencies
