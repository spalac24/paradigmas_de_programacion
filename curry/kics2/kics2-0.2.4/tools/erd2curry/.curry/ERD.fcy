Prog "ERD" ["Prelude","ReadShowTerm","Time"] [TypeSyn ("ERD","ERDName") Public [] (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]),TypeSyn ("ERD","EName") Public [] (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]),TypeSyn ("ERD","AName") Public [] (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]),TypeSyn ("ERD","Null") Public [] (TCons ("Prelude","Bool") []),TypeSyn ("ERD","RName") Public [] (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]),TypeSyn ("ERD","Role") Public [] (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]),Type ("ERD","ERD") Public [] [Cons ("ERD","ERD") 3 Public [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("ERD","Entity") []],TCons ("Prelude","[]") [TCons ("ERD","Relationship") []]]],Type ("ERD","Entity") Public [] [Cons ("ERD","Entity") 2 Public [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("ERD","Attribute") []]]],Type ("ERD","Attribute") Public [] [Cons ("ERD","Attribute") 4 Public [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("ERD","Domain") [],TCons ("ERD","Key") [],TCons ("Prelude","Bool") []]],Type ("ERD","Key") Public [] [Cons ("ERD","NoKey") 0 Public [],Cons ("ERD","PKey") 0 Public [],Cons ("ERD","Unique") 0 Public []],Type ("ERD","Domain") Public [] [Cons ("ERD","IntDom") 1 Public [TCons ("Prelude","Maybe") [TCons ("Prelude","Int") []]],Cons ("ERD","FloatDom") 1 Public [TCons ("Prelude","Maybe") [TCons ("Prelude","Float") []]],Cons ("ERD","CharDom") 1 Public [TCons ("Prelude","Maybe") [TCons ("Prelude","Char") []]],Cons ("ERD","StringDom") 1 Public [TCons ("Prelude","Maybe") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]],Cons ("ERD","BoolDom") 1 Public [TCons ("Prelude","Maybe") [TCons ("Prelude","Bool") []]],Cons ("ERD","DateDom") 1 Public [TCons ("Prelude","Maybe") [TCons ("Time","CalendarTime") []]],Cons ("ERD","UserDefined") 2 Public [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","Maybe") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]],Cons ("ERD","KeyDom") 1 Public [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]],Type ("ERD","Relationship") Public [] [Cons ("ERD","Relationship") 2 Public [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("ERD","REnd") []]]],Type ("ERD","REnd") Public [] [Cons ("ERD","REnd") 3 Public [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("ERD","Cardinality") []]],Type ("ERD","Cardinality") Public [] [Cons ("ERD","Exactly") 1 Public [TCons ("Prelude","Int") []],Cons ("ERD","Between") 2 Public [TCons ("Prelude","Int") [],TCons ("ERD","MaxValue") []],Cons ("ERD","Range") 2 Public [TCons ("Prelude","Int") [],TCons ("Prelude","Maybe") [TCons ("Prelude","Int") []]]],Type ("ERD","MaxValue") Public [] [Cons ("ERD","Max") 1 Public [TCons ("Prelude","Int") []],Cons ("ERD","Infinite") 0 Public []]] [Func ("ERD","readERDTermFile") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("ERD","ERD") []])) (Rule [1] (Comb FuncCall ("Prelude",">>") [Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Prelude","putStrLn") [],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'R'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'E'),Comb ConsCall ("Prelude",":") [Lit (Charc  'R'),Comb ConsCall ("Prelude",":") [Lit (Charc  'D'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]],Comb FuncCall ("Prelude","++") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude","[]") []]]]]]],Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Prelude","readFile") [Var 1],Comb (FuncPartCall 1) ("ERD","readERDTermFile._#lambda1") []]])),Func ("ERD","readERDTermFile._#lambda1") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("ERD","ERD") []])) (Rule [1] (Comb FuncCall ("Prelude","return") [Comb FuncCall ("ERD","updateERDTerm") [Comb FuncCall ("ReadShowTerm","readUnqualifiedTerm") [Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'E'),Comb ConsCall ("Prelude",":") [Lit (Charc  'R'),Comb ConsCall ("Prelude",":") [Lit (Charc  'D'),Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb ConsCall ("Prelude","[]") []]],Var 1]]])),Func ("ERD","updateERDTerm") 1 Private (FuncType (TCons ("ERD","ERD") []) (TCons ("ERD","ERD") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("ERD","ERD") [2,3,4]) (Comb ConsCall ("ERD","ERD") [Var 2,Var 3,Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("ERD","updateERDTerm.updateRel.5") [],Var 4]])])),Func ("ERD","updateERDTerm.updateCard.5") 1 Private (FuncType (TCons ("ERD","Cardinality") []) (TCons ("ERD","Cardinality") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("ERD","Exactly") [2]) (Comb ConsCall ("ERD","Exactly") [Var 2]),Branch (Pattern ("ERD","Between") [3,4]) (Case  Flex (Var 4) [Branch (Pattern ("ERD","Max") [5]) (Case  Rigid (Comb FuncCall ("Prelude","<=") [Var 3,Var 5]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("ERD","Between") [Var 3,Comb ConsCall ("ERD","Max") [Var 5]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","error") [Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'E'),Comb ConsCall ("Prelude",":") [Lit (Charc  'R'),Comb ConsCall ("Prelude",":") [Lit (Charc  'D'),Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'I'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]],Comb FuncCall ("Prelude","show") [Comb ConsCall ("ERD","Between") [Var 3,Comb ConsCall ("ERD","Max") [Var 5]]]]])]),Branch (Pattern ("ERD","Infinite") []) (Comb ConsCall ("ERD","Between") [Var 3,Comb ConsCall ("ERD","Infinite") []])]),Branch (Pattern ("ERD","Range") [6,7]) (Comb FuncCall ("ERD","updateERDTerm.updateCard.5") [Comb ConsCall ("ERD","Between") [Var 6,Comb FuncCall ("Prelude","maybe") [Comb ConsCall ("ERD","Infinite") [],Comb (ConsPartCall 1) ("ERD","Max") [],Var 7]]])])),Func ("ERD","updateERDTerm.updateEnd.5") 1 Private (FuncType (TCons ("ERD","REnd") []) (TCons ("ERD","REnd") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("ERD","REnd") [2,3,4]) (Comb ConsCall ("ERD","REnd") [Var 2,Var 3,Comb FuncCall ("ERD","updateERDTerm.updateCard.5") [Var 4]])])),Func ("ERD","updateERDTerm.updateRel.5") 1 Private (FuncType (TCons ("ERD","Relationship") []) (TCons ("ERD","Relationship") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("ERD","Relationship") [2,3]) (Comb ConsCall ("ERD","Relationship") [Var 2,Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("ERD","updateERDTerm.updateEnd.5") [],Var 3]])]))] []