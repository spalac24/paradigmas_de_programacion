Prog "ERDGoodies" ["Char","ERD","List","Maybe","Prelude"] [] [Func ("ERDGoodies","erdName") 1 Public (FuncType (TCons ("ERD","ERD") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("ERD","ERD") [2,3,4]) (Var 2)])),Func ("ERDGoodies","entityName") 1 Public (FuncType (TCons ("ERD","Entity") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("ERD","Entity") [2,3]) (Var 2)])),Func ("ERDGoodies","isEntityNamed") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("ERD","Entity") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Comb FuncCall ("Prelude","==") [Comb FuncCall ("ERDGoodies","entityName") [Var 2],Var 1])),Func ("ERDGoodies","hasForeignKey") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("ERD","Entity") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("ERD","Entity") [3,4]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","any") [Comb (FuncPartCall 1) ("ERDGoodies","hasForeignKey.isForeignKeyWithName.12") [Var 1]],Var 4])])),Func ("ERDGoodies","hasForeignKey.isForeignKeyWithName.12") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("ERD","Attribute") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("ERD","Attribute") [3,4,5,6]) (Case  Rigid (Var 4) [Branch (Pattern ("ERD","KeyDom") [7]) (Comb FuncCall ("Prelude","==") [Var 7,Var 1]),Branch (Pattern ("ERD","IntDom") [8]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("ERD","FloatDom") [9]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("ERD","CharDom") [10]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("ERD","StringDom") [11]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("ERD","BoolDom") [12]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("ERD","DateDom") [13]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("ERD","UserDefined") [14,15]) (Comb ConsCall ("Prelude","False") [])])])),Func ("ERDGoodies","foreignKeyAttributes") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("ERD","Attribute") []]) (TCons ("Prelude","[]") [TCons ("ERD","Attribute") []]))) (Rule [1,2] (Comb FuncCall ("Prelude","filter") [Comb (FuncPartCall 1) ("ERDGoodies","foreignKeyAttributes.isForeignKeyWithName.24") [Var 1],Var 2])),Func ("ERDGoodies","foreignKeyAttributes.isForeignKeyWithName.24") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("ERD","Attribute") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("ERD","Attribute") [3,4,5,6]) (Case  Rigid (Var 4) [Branch (Pattern ("ERD","KeyDom") [7]) (Comb FuncCall ("Prelude","==") [Var 7,Var 1]),Branch (Pattern ("ERD","IntDom") [8]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("ERD","FloatDom") [9]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("ERD","CharDom") [10]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("ERD","StringDom") [11]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("ERD","BoolDom") [12]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("ERD","DateDom") [13]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("ERD","UserDefined") [14,15]) (Comb ConsCall ("Prelude","False") [])])])),Func ("ERDGoodies","foreignKeyAttrNames") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("ERD","Attribute") []]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]))) (Rule [1,2] (Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("ERDGoodies","attributeName") [],Comb FuncCall ("Prelude","filter") [Comb (FuncPartCall 1) ("ERDGoodies","foreignKeyAttrNames.isForeignKeyWithName.36") [Var 1],Var 2]])),Func ("ERDGoodies","foreignKeyAttrNames.isForeignKeyWithName.36") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("ERD","Attribute") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("ERD","Attribute") [3,4,5,6]) (Case  Rigid (Var 4) [Branch (Pattern ("ERD","KeyDom") [7]) (Comb FuncCall ("Prelude","==") [Var 7,Var 1]),Branch (Pattern ("ERD","IntDom") [8]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("ERD","FloatDom") [9]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("ERD","CharDom") [10]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("ERD","StringDom") [11]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("ERD","BoolDom") [12]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("ERD","DateDom") [13]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("ERD","UserDefined") [14,15]) (Comb ConsCall ("Prelude","False") [])])])),Func ("ERDGoodies","entityAttributes") 1 Public (FuncType (TCons ("ERD","Entity") []) (TCons ("Prelude","[]") [TCons ("ERD","Attribute") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("ERD","Entity") [2,3]) (Var 3)])),Func ("ERDGoodies","attributeName") 1 Public (FuncType (TCons ("ERD","Attribute") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("ERD","Attribute") [2,3,4,5]) (Var 2)])),Func ("ERDGoodies","attributeDomain") 1 Public (FuncType (TCons ("ERD","Attribute") []) (TCons ("ERD","Domain") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("ERD","Attribute") [2,3,4,5]) (Var 3)])),Func ("ERDGoodies","hasDefault") 1 Public (FuncType (TCons ("ERD","Domain") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("ERD","IntDom") [2]) (Comb FuncCall ("Maybe","isJust") [Var 2]),Branch (Pattern ("ERD","FloatDom") [3]) (Comb FuncCall ("Maybe","isJust") [Var 3]),Branch (Pattern ("ERD","StringDom") [4]) (Comb FuncCall ("Maybe","isJust") [Var 4]),Branch (Pattern ("ERD","BoolDom") [5]) (Comb FuncCall ("Maybe","isJust") [Var 5]),Branch (Pattern ("ERD","DateDom") [6]) (Comb FuncCall ("Maybe","isJust") [Var 6]),Branch (Pattern ("ERD","UserDefined") [7,8]) (Comb FuncCall ("Maybe","isJust") [Var 8])])),Func ("ERDGoodies","isForeignKey") 1 Public (FuncType (TCons ("ERD","Attribute") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("ERD","Attribute") [2,3,4,5]) (Case  Rigid (Var 3) [Branch (Pattern ("ERD","KeyDom") [6]) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("ERD","IntDom") [7]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("ERD","FloatDom") [8]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("ERD","CharDom") [9]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("ERD","StringDom") [10]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("ERD","BoolDom") [11]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("ERD","DateDom") [12]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("ERD","UserDefined") [13,14]) (Comb ConsCall ("Prelude","False") [])])])),Func ("ERDGoodies","isNullAttribute") 1 Public (FuncType (TCons ("ERD","Attribute") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("ERD","Attribute") [2,3,4,5]) (Var 5)])),Func ("ERDGoodies","cardMinimum") 1 Public (FuncType (TCons ("ERD","Cardinality") []) (TCons ("Prelude","Int") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("ERD","Exactly") [2]) (Var 2),Branch (Pattern ("ERD","Between") [3,4]) (Var 3)])),Func ("ERDGoodies","cardMaximum") 1 Public (FuncType (TCons ("ERD","Cardinality") []) (TCons ("Prelude","Int") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("ERD","Exactly") [2]) (Var 2),Branch (Pattern ("ERD","Between") [3,4]) (Case  Flex (Var 4) [Branch (Pattern ("ERD","Max") [5]) (Var 5)])])),Func ("ERDGoodies","showERD") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("ERD","ERD") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("ERD","ERD") [3,4,5]) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'E'),Comb ConsCall ("Prelude",":") [Lit (Charc  'R'),Comb ConsCall ("Prelude",":") [Lit (Charc  'D'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("Prelude","++") [Comb FuncCall ("ERDGoodies","showString") [Var 3],Comb FuncCall ("Prelude","++") [Comb FuncCall ("ERDGoodies","lb") [Var 1],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '['),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","concat") [Comb FuncCall ("List","intersperse") [Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ','),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("ERDGoodies","lb") [Comb FuncCall ("Prelude","+") [Var 1,Lit (Intc  2)]]],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("ERDGoodies","showEs") [Comb FuncCall ("Prelude","+") [Var 1,Lit (Intc  2)]],Var 4]]],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ']'),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Comb FuncCall ("ERDGoodies","lb") [Var 1],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '['),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","concat") [Comb FuncCall ("List","intersperse") [Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ','),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("ERDGoodies","lb") [Comb FuncCall ("Prelude","+") [Var 1,Lit (Intc  2)]]],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("ERDGoodies","showRs") [Comb FuncCall ("Prelude","+") [Var 1,Lit (Intc  2)]],Var 5]]],Comb ConsCall ("Prelude",":") [Lit (Charc  ']'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]])])),Func ("ERDGoodies","showEs") 2 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("ERD","Entity") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("ERD","Entity") [3,4]) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'E'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb FuncCall ("Prelude","++") [Comb FuncCall ("ERDGoodies","showString") [Var 3],Comb FuncCall ("Prelude","++") [Comb FuncCall ("ERDGoodies","lb") [Comb FuncCall ("Prelude","+") [Var 1,Lit (Intc  7)]],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '['),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","concat") [Comb FuncCall ("List","intersperse") [Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ','),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("ERDGoodies","lb") [Comb FuncCall ("Prelude","+") [Var 1,Lit (Intc  8)]]],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("ERDGoodies","showWOBrackets") [],Var 4]]],Comb ConsCall ("Prelude",":") [Lit (Charc  ']'),Comb ConsCall ("Prelude","[]") []]]]]]])])),Func ("ERDGoodies","showRs") 2 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("ERD","Relationship") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("ERD","Relationship") [3,4]) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'R'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]],Comb FuncCall ("Prelude","++") [Comb FuncCall ("ERDGoodies","showString") [Var 3],Comb FuncCall ("Prelude","++") [Comb FuncCall ("ERDGoodies","lb") [Comb FuncCall ("Prelude","+") [Var 1,Lit (Intc  13)]],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '['),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","concat") [Comb FuncCall ("List","intersperse") [Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ','),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("ERDGoodies","lb") [Comb FuncCall ("Prelude","+") [Var 1,Lit (Intc  14)]]],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("ERDGoodies","showWOBrackets") [],Var 4]]],Comb ConsCall ("Prelude",":") [Lit (Charc  ']'),Comb ConsCall ("Prelude","[]") []]]]]]])])),Func ("ERDGoodies","showWOBrackets") 1 Private (FuncType (TVar 0) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Comb FuncCall ("ERDGoodies","showWOBrackets.stripBrackets.114") [Comb FuncCall ("Prelude","show") [Var 1]])),Func ("ERDGoodies","showWOBrackets.stripBrackets.114") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 2,Lit (Charc  '(')]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","reverse") [],Comb FuncCall ("Prelude","tail") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","reverse") [],Var 3]]]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude",":") [Var 2,Var 3])])])),Func ("ERDGoodies","showString") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '"'),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc  '"'),Comb ConsCall ("Prelude","[]") []]]])),Func ("ERDGoodies","lb") 1 Private (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","take") [Var 1,Comb FuncCall ("Prelude","repeat") [Lit (Charc  ' ')]]])),Func ("ERDGoodies","combineIds") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Comb FuncCall ("Prelude","++") [Var 2,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","concatMap") [Comb (FuncPartCall 1) ("ERDGoodies","combineIds.maybeAddUnderscore.122") []],Var 3]])])),Func ("ERDGoodies","combineIds.maybeAddUnderscore.122") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude",":") [2,3]) (Case  Rigid (Comb FuncCall ("Char","isUpper") [Var 2]) [Branch (Pattern ("Prelude","True") []) (Var 1),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Var 1])])]))] []