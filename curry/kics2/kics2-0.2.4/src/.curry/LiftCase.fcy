Prog "LiftCase" ["FiniteMap","FlatCurry","FlatCurryGoodies","List","Prelude"] [TypeSyn ("LiftCase","FuncList") Private [] (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]) (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []])),TypeSyn ("LiftCase","Result") Private [] (TCons ("Prelude","(,,)") [FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]) (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]),TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]) (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []])]),TypeSyn ("LiftCase","M") Private [0] (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","(,,,)") [TVar 0,TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]) (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]),TCons ("Prelude","[]") [TCons ("Prelude","Int") []]]))] [Func ("LiftCase","isCaseAuxFuncName") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","Bool") [])) (Rule [1] (Comb FuncCall ("Prelude","==") [Comb FuncCall ("Prelude","take") [Lit (Intc  6),Var 1],Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude","[]") []]]]]]]])),Func ("LiftCase","isCaseAuxFuncType") 1 Public (FuncType (TCons ("FlatCurry","TypeExpr") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Comb FuncCall ("Prelude","==") [Var 1,Comb ConsCall ("FlatCurry","TVar") [Comb FuncCall ("Prelude","negate") [Lit (Intc  42)]]])),Func ("LiftCase","liftCases") 2 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("FlatCurry","Prog") []) (TCons ("FlatCurry","Prog") []))) (Rule [1,2] (Let [(3,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FlatCurryGoodies","progFuncs") [],Var 2]),(4,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("LiftCase","genAuxName") [],Comb FuncCall ("Prelude","map") [Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","snd") [],Comb FuncCall ("FlatCurryGoodies","funcName") []],Var 3]]),(5,Comb FuncCall ("List","partition") [Comb FuncCall ("FlatCurryGoodies","isExternal") [],Var 3]),(6,Comb FuncCall ("LiftCase","liftCases._#selFP5#exts") [Var 5]),(7,Comb FuncCall ("LiftCase","liftCases._#selFP6#ins") [Var 5]),(8,Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("LiftCase","liftCasesFunc") [Var 1,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FlatCurryGoodies","progName") [],Var 2],Var 4],Comb ConsCall ("Prelude","(,,)") [Comb (FuncPartCall 1) ("Prelude","id") [],Lit (Intc  0),Comb (FuncPartCall 1) ("Prelude","id") []],Var 7]),(9,Comb FuncCall ("LiftCase","liftCases._#selFP3#newFsf") [Var 8]),(10,Comb FuncCall ("LiftCase","liftCases._#selFP4#auxFf") [Var 8])] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FlatCurryGoodies","updProgFuncs") [Comb (FuncPartCall 1) ("Prelude","const") [Comb FuncCall ("Prelude","apply") [Var 9,Comb FuncCall ("Prelude","apply") [Var 10,Var 6]]]],Var 2]))),Func ("LiftCase","liftCases._#selFP5#exts") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []],TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]]) (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("LiftCase","liftCases._#selFP6#ins") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []],TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]]) (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("LiftCase","liftCases._#selFP3#newFsf") 1 Private (FuncType (TCons ("Prelude","(,,)") [FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]) (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]),TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]) (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []])]) (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]) (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]))) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,)") [2,3,4]) (Var 2)])),Func ("LiftCase","liftCases._#selFP4#auxFf") 1 Private (FuncType (TCons ("Prelude","(,,)") [FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]) (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]),TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]) (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []])]) (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]) (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]))) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,)") [2,3,4]) (Var 4)])),Func ("LiftCase","liftCasesFunc") 5 Private (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("FlatCurry","FuncDecl") []) (FuncType (TCons ("Prelude","(,,)") [FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]) (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]),TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]) (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []])]) (TCons ("Prelude","(,,)") [FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]) (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]),TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]) (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []])])))))) (Rule [1,2,3,4,5] (Case  Flex (Var 5) [Branch (Pattern ("Prelude","(,,)") [6,7,8]) (Let [(9,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FlatCurryGoodies","funcBody") [],Var 4]),(10,Comb (FuncPartCall 1) ("FlatCurryGoodies","trExpr") [Comb (FuncPartCall 2) ("LiftCase","liftCasesFunc.var.17") [],Comb (FuncPartCall 2) ("LiftCase","liftCasesFunc.lit.17") [],Comb (FuncPartCall 4) ("LiftCase","liftCasesFunc.comb.17") [],Comb (FuncPartCall 3) ("LiftCase","liftCasesFunc.leT.17") [],Comb (FuncPartCall 3) ("LiftCase","liftCasesFunc.freE.17") [],Comb (FuncPartCall 3) ("LiftCase","liftCasesFunc.or.17") [],Comb (FuncPartCall 4) ("LiftCase","liftCasesFunc.casE.17") [Var 3,Var 2],Comb (FuncPartCall 3) ("LiftCase","liftCasesFunc.branch.17") [],Comb (FuncPartCall 3) ("LiftCase","liftCasesFunc.typed.17") []]),(11,Case  Rigid (Var 1) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 9) [Branch (Pattern ("FlatCurry","Case") [12,13,14]) (Case  Rigid (Var 13) [Branch (Pattern ("FlatCurry","Var") [15]) (Let [(16,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 10,Comb ConsCall ("FlatCurry","Var") [Var 15]],Var 7]),(17,Comb FuncCall ("LiftCase","liftCasesFunc._#selFP62#e'") [Var 16]),(18,Comb FuncCall ("LiftCase","liftCasesFunc._#selFP63#i'") [Var 16]),(19,Comb FuncCall ("LiftCase","liftCasesFunc._#selFP64#ffe") [Var 16]),(20,Comb FuncCall ("LiftCase","sequence") [Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("LiftCase","liftCasesFunc._#lambda2") [Var 10],Var 14],Var 18]),(21,Comb FuncCall ("LiftCase","liftCasesFunc._#selFP59#bs'") [Var 20]),(22,Comb FuncCall ("LiftCase","liftCasesFunc._#selFP60#i''") [Var 20]),(23,Comb FuncCall ("LiftCase","liftCasesFunc._#selFP61#ffbs") [Var 20])] (Comb ConsCall ("Prelude","(,,,)") [Comb ConsCall ("FlatCurry","Case") [Var 12,Var 17,Var 21],Var 22,Comb FuncCall ("Prelude",".") [Var 19,Var 23],Comb ConsCall ("Prelude","[]") []])),Branch (Pattern ("FlatCurry","Lit") [24]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 10,Var 9],Var 7]),Branch (Pattern ("FlatCurry","Comb") [25,26,27]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 10,Var 9],Var 7]),Branch (Pattern ("FlatCurry","Let") [28,29]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 10,Var 9],Var 7]),Branch (Pattern ("FlatCurry","Free") [30,31]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 10,Var 9],Var 7]),Branch (Pattern ("FlatCurry","Or") [32,33]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 10,Var 9],Var 7]),Branch (Pattern ("FlatCurry","Case") [34,35,36]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 10,Var 9],Var 7]),Branch (Pattern ("FlatCurry","Typed") [37,38]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 10,Var 9],Var 7])]),Branch (Pattern ("FlatCurry","Var") [39]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 10,Var 9],Var 7]),Branch (Pattern ("FlatCurry","Lit") [40]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 10,Var 9],Var 7]),Branch (Pattern ("FlatCurry","Comb") [41,42,43]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 10,Var 9],Var 7]),Branch (Pattern ("FlatCurry","Let") [44,45]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 10,Var 9],Var 7]),Branch (Pattern ("FlatCurry","Free") [46,47]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 10,Var 9],Var 7]),Branch (Pattern ("FlatCurry","Or") [48,49]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 10,Var 9],Var 7]),Branch (Pattern ("FlatCurry","Typed") [50,51]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 10,Var 9],Var 7])]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 10,Var 9],Var 7])]),(52,Comb FuncCall ("LiftCase","liftCasesFunc._#selFP65#exp") [Var 11]),(53,Comb FuncCall ("LiftCase","liftCasesFunc._#selFP66#iMain") [Var 11]),(54,Comb FuncCall ("LiftCase","liftCasesFunc._#selFP67#ffeMain") [Var 11])] (Comb ConsCall ("Prelude","(,,)") [Comb FuncCall ("Prelude",".") [Comb (ConsPartCall 1) ("Prelude",":") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FlatCurryGoodies","updFuncBody") [],Comb (FuncPartCall 1) ("Prelude","const") [Var 52]],Var 4]],Var 6],Var 53,Comb FuncCall ("Prelude",".") [Var 8,Var 54]]))])),Func ("LiftCase","liftCasesFunc.var.17") 2 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","(,,,)") [TCons ("FlatCurry","Expr") [],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]) (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]),TCons ("Prelude","[]") [TCons ("Prelude","Int") []]]))) (Rule [1,2] (Comb ConsCall ("Prelude","(,,,)") [Comb ConsCall ("FlatCurry","Var") [Var 1],Var 2,Comb (FuncPartCall 1) ("Prelude","id") [],Comb ConsCall ("Prelude",":") [Var 1,Comb ConsCall ("Prelude","[]") []]])),Func ("LiftCase","liftCasesFunc.lit.17") 2 Private (FuncType (TCons ("FlatCurry","Literal") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","(,,,)") [TCons ("FlatCurry","Expr") [],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]) (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]),TCons ("Prelude","[]") [TCons ("Prelude","Int") []]]))) (Rule [1,2] (Comb ConsCall ("Prelude","(,,,)") [Comb ConsCall ("FlatCurry","Lit") [Var 1],Var 2,Comb (FuncPartCall 1) ("Prelude","id") [],Comb ConsCall ("Prelude","[]") []])),Func ("LiftCase","liftCasesFunc.comb.17") 4 Private (FuncType (TCons ("FlatCurry","CombType") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","(,,,)") [TCons ("FlatCurry","Expr") [],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]) (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]),TCons ("Prelude","[]") [TCons ("Prelude","Int") []]])]) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","(,,,)") [TCons ("FlatCurry","Expr") [],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]) (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]),TCons ("Prelude","[]") [TCons ("Prelude","Int") []]]))))) (Rule [1,2,3,4] (Let [(5,Comb FuncCall ("LiftCase","sequence") [Var 3,Var 4]),(6,Comb FuncCall ("LiftCase","liftCasesFunc.comb.17._#selFP9#args'") [Var 5]),(7,Comb FuncCall ("LiftCase","liftCasesFunc.comb.17._#selFP10#i'") [Var 5]),(8,Comb FuncCall ("LiftCase","liftCasesFunc.comb.17._#selFP11#ff") [Var 5]),(9,Comb FuncCall ("LiftCase","liftCasesFunc.comb.17._#selFP12#vs") [Var 5])] (Comb ConsCall ("Prelude","(,,,)") [Comb ConsCall ("FlatCurry","Comb") [Var 1,Var 2,Var 6],Var 7,Var 8,Var 9]))),Func ("LiftCase","liftCasesFunc.comb.17._#selFP9#args'") 1 Private (FuncType (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("FlatCurry","Expr") []],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]) (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]),TCons ("Prelude","[]") [TCons ("Prelude","Int") []]]) (TCons ("Prelude","[]") [TCons ("FlatCurry","Expr") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,,)") [2,3,4,5]) (Var 2)])),Func ("LiftCase","liftCasesFunc.comb.17._#selFP10#i'") 1 Private (FuncType (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("FlatCurry","Expr") []],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]) (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]),TCons ("Prelude","[]") [TCons ("Prelude","Int") []]]) (TCons ("Prelude","Int") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,,)") [2,3,4,5]) (Var 3)])),Func ("LiftCase","liftCasesFunc.comb.17._#selFP11#ff") 1 Private (FuncType (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("FlatCurry","Expr") []],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]) (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]),TCons ("Prelude","[]") [TCons ("Prelude","Int") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]) (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]))) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,,)") [2,3,4,5]) (Var 4)])),Func ("LiftCase","liftCasesFunc.comb.17._#selFP12#vs") 1 Private (FuncType (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("FlatCurry","Expr") []],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]) (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]),TCons ("Prelude","[]") [TCons ("Prelude","Int") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,,)") [2,3,4,5]) (Var 5)])),Func ("LiftCase","liftCasesFunc.leT.17") 3 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","(,,,)") [TCons ("FlatCurry","Expr") [],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]) (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]),TCons ("Prelude","[]") [TCons ("Prelude","Int") []]])]]) (FuncType (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","(,,,)") [TCons ("FlatCurry","Expr") [],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]) (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]),TCons ("Prelude","[]") [TCons ("Prelude","Int") []]])) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","(,,,)") [TCons ("FlatCurry","Expr") [],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]) (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]),TCons ("Prelude","[]") [TCons ("Prelude","Int") []]])))) (Rule [1,2,3] (Let [(4,Comb FuncCall ("Prelude","unzip") [Var 1]),(5,Comb FuncCall ("LiftCase","liftCasesFunc.leT.17._#selFP24#vs") [Var 4]),(6,Comb FuncCall ("LiftCase","liftCasesFunc.leT.17._#selFP25#es") [Var 4]),(7,Comb FuncCall ("LiftCase","sequence") [Var 6,Var 3]),(8,Comb FuncCall ("LiftCase","liftCasesFunc.leT.17._#selFP20#es'") [Var 7]),(9,Comb FuncCall ("LiftCase","liftCasesFunc.leT.17._#selFP21#i'") [Var 7]),(10,Comb FuncCall ("LiftCase","liftCasesFunc.leT.17._#selFP22#ffes") [Var 7]),(11,Comb FuncCall ("LiftCase","liftCasesFunc.leT.17._#selFP23#ves") [Var 7]),(12,Comb FuncCall ("Prelude","apply") [Var 2,Var 9]),(13,Comb FuncCall ("LiftCase","liftCasesFunc.leT.17._#selFP16#e'") [Var 12]),(14,Comb FuncCall ("LiftCase","liftCasesFunc.leT.17._#selFP17#i''") [Var 12]),(15,Comb FuncCall ("LiftCase","liftCasesFunc.leT.17._#selFP18#ffe") [Var 12]),(16,Comb FuncCall ("LiftCase","liftCasesFunc.leT.17._#selFP19#ve") [Var 12])] (Comb ConsCall ("Prelude","(,,,)") [Comb ConsCall ("FlatCurry","Let") [Comb FuncCall ("Prelude","zip") [Var 5,Var 8],Var 13],Var 14,Comb FuncCall ("Prelude",".") [Var 10,Var 15],Comb FuncCall ("Prelude","filter") [Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","not") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("LiftCase","elemOf") [],Var 5]],Comb FuncCall ("Prelude","++") [Var 11,Var 16]]]))),Func ("LiftCase","liftCasesFunc.leT.17._#selFP24#vs") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Int") []],TCons ("Prelude","[]") [FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","(,,,)") [TCons ("FlatCurry","Expr") [],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]) (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]),TCons ("Prelude","[]") [TCons ("Prelude","Int") []]])]]) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("LiftCase","liftCasesFunc.leT.17._#selFP25#es") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Int") []],TCons ("Prelude","[]") [FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","(,,,)") [TCons ("FlatCurry","Expr") [],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]) (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]),TCons ("Prelude","[]") [TCons ("Prelude","Int") []]])]]) (TCons ("Prelude","[]") [FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","(,,,)") [TCons ("FlatCurry","Expr") [],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]) (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]),TCons ("Prelude","[]") [TCons ("Prelude","Int") []]])])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("LiftCase","liftCasesFunc.leT.17._#selFP20#es'") 1 Private (FuncType (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("FlatCurry","Expr") []],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]) (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]),TCons ("Prelude","[]") [TCons ("Prelude","Int") []]]) (TCons ("Prelude","[]") [TCons ("FlatCurry","Expr") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,,)") [2,3,4,5]) (Var 2)])),Func ("LiftCase","liftCasesFunc.leT.17._#selFP21#i'") 1 Private (FuncType (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("FlatCurry","Expr") []],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]) (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]),TCons ("Prelude","[]") [TCons ("Prelude","Int") []]]) (TCons ("Prelude","Int") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,,)") [2,3,4,5]) (Var 3)])),Func ("LiftCase","liftCasesFunc.leT.17._#selFP22#ffes") 1 Private (FuncType (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("FlatCurry","Expr") []],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]) (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]),TCons ("Prelude","[]") [TCons ("Prelude","Int") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]) (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]))) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,,)") [2,3,4,5]) (Var 4)])),Func ("LiftCase","liftCasesFunc.leT.17._#selFP23#ves") 1 Private (FuncType (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("FlatCurry","Expr") []],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]) (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]),TCons ("Prelude","[]") [TCons ("Prelude","Int") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,,)") [2,3,4,5]) (Var 5)])),Func ("LiftCase","liftCasesFunc.leT.17._#selFP16#e'") 1 Private (FuncType (TCons ("Prelude","(,,,)") [TCons ("FlatCurry","Expr") [],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]) (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]),TCons ("Prelude","[]") [TCons ("Prelude","Int") []]]) (TCons ("FlatCurry","Expr") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,,)") [2,3,4,5]) (Var 2)])),Func ("LiftCase","liftCasesFunc.leT.17._#selFP17#i''") 1 Private (FuncType (TCons ("Prelude","(,,,)") [TCons ("FlatCurry","Expr") [],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]) (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]),TCons ("Prelude","[]") [TCons ("Prelude","Int") []]]) (TCons ("Prelude","Int") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,,)") [2,3,4,5]) (Var 3)])),Func ("LiftCase","liftCasesFunc.leT.17._#selFP18#ffe") 1 Private (FuncType (TCons ("Prelude","(,,,)") [TCons ("FlatCurry","Expr") [],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]) (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]),TCons ("Prelude","[]") [TCons ("Prelude","Int") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]) (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]))) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,,)") [2,3,4,5]) (Var 4)])),Func ("LiftCase","liftCasesFunc.leT.17._#selFP19#ve") 1 Private (FuncType (TCons ("Prelude","(,,,)") [TCons ("FlatCurry","Expr") [],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]) (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]),TCons ("Prelude","[]") [TCons ("Prelude","Int") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,,)") [2,3,4,5]) (Var 5)])),Func ("LiftCase","liftCasesFunc.freE.17") 3 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (FuncType (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","(,,,)") [TCons ("FlatCurry","Expr") [],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]) (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]),TCons ("Prelude","[]") [TCons ("Prelude","Int") []]])) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","(,,,)") [TCons ("FlatCurry","Expr") [],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]) (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]),TCons ("Prelude","[]") [TCons ("Prelude","Int") []]])))) (Rule [1,2,3] (Let [(4,Comb FuncCall ("Prelude","apply") [Var 2,Var 3]),(5,Comb FuncCall ("LiftCase","liftCasesFunc.freE.17._#selFP27#e'") [Var 4]),(6,Comb FuncCall ("LiftCase","liftCasesFunc.freE.17._#selFP28#i'") [Var 4]),(7,Comb FuncCall ("LiftCase","liftCasesFunc.freE.17._#selFP29#ff") [Var 4]),(8,Comb FuncCall ("LiftCase","liftCasesFunc.freE.17._#selFP30#ve") [Var 4])] (Comb ConsCall ("Prelude","(,,,)") [Comb ConsCall ("FlatCurry","Free") [Var 1,Var 5],Var 6,Var 7,Comb FuncCall ("Prelude","filter") [Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","not") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("LiftCase","elemOf") [],Var 1]],Var 8]]))),Func ("LiftCase","liftCasesFunc.freE.17._#selFP27#e'") 1 Private (FuncType (TCons ("Prelude","(,,,)") [TCons ("FlatCurry","Expr") [],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]) (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]),TCons ("Prelude","[]") [TCons ("Prelude","Int") []]]) (TCons ("FlatCurry","Expr") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,,)") [2,3,4,5]) (Var 2)])),Func ("LiftCase","liftCasesFunc.freE.17._#selFP28#i'") 1 Private (FuncType (TCons ("Prelude","(,,,)") [TCons ("FlatCurry","Expr") [],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]) (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]),TCons ("Prelude","[]") [TCons ("Prelude","Int") []]]) (TCons ("Prelude","Int") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,,)") [2,3,4,5]) (Var 3)])),Func ("LiftCase","liftCasesFunc.freE.17._#selFP29#ff") 1 Private (FuncType (TCons ("Prelude","(,,,)") [TCons ("FlatCurry","Expr") [],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]) (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]),TCons ("Prelude","[]") [TCons ("Prelude","Int") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]) (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]))) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,,)") [2,3,4,5]) (Var 4)])),Func ("LiftCase","liftCasesFunc.freE.17._#selFP30#ve") 1 Private (FuncType (TCons ("Prelude","(,,,)") [TCons ("FlatCurry","Expr") [],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]) (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]),TCons ("Prelude","[]") [TCons ("Prelude","Int") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,,)") [2,3,4,5]) (Var 5)])),Func ("LiftCase","liftCasesFunc.or.17") 3 Private (FuncType (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","(,,,)") [TCons ("FlatCurry","Expr") [],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]) (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]),TCons ("Prelude","[]") [TCons ("Prelude","Int") []]])) (FuncType (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","(,,,)") [TCons ("FlatCurry","Expr") [],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]) (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]),TCons ("Prelude","[]") [TCons ("Prelude","Int") []]])) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","(,,,)") [TCons ("FlatCurry","Expr") [],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]) (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]),TCons ("Prelude","[]") [TCons ("Prelude","Int") []]])))) (Rule [1,2,3] (Let [(4,Comb FuncCall ("LiftCase","sequence") [Comb ConsCall ("Prelude",":") [Var 1,Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude","[]") []]],Var 3]),(5,Comb FuncCall ("LiftCase","liftCasesFunc.or.17._#selFP32#e1'") [Var 4]),(6,Comb FuncCall ("LiftCase","liftCasesFunc.or.17._#selFP33#e2'") [Var 4]),(7,Comb FuncCall ("LiftCase","liftCasesFunc.or.17._#selFP34#i'") [Var 4]),(8,Comb FuncCall ("LiftCase","liftCasesFunc.or.17._#selFP35#ff") [Var 4]),(9,Comb FuncCall ("LiftCase","liftCasesFunc.or.17._#selFP36#vs") [Var 4])] (Comb ConsCall ("Prelude","(,,,)") [Comb ConsCall ("FlatCurry","Or") [Var 5,Var 6],Var 7,Var 8,Var 9]))),Func ("LiftCase","liftCasesFunc.or.17._#selFP32#e1'") 1 Private (FuncType (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("FlatCurry","Expr") []],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]) (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]),TCons ("Prelude","[]") [TCons ("Prelude","Int") []]]) (TCons ("FlatCurry","Expr") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,,)") [2,3,4,5]) (Case  Flex (Var 2) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case  Flex (Var 9) [Branch (Pattern ("Prelude","[]") []) (Var 6)])])])])),Func ("LiftCase","liftCasesFunc.or.17._#selFP33#e2'") 1 Private (FuncType (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("FlatCurry","Expr") []],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]) (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]),TCons ("Prelude","[]") [TCons ("Prelude","Int") []]]) (TCons ("FlatCurry","Expr") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,,)") [2,3,4,5]) (Case  Flex (Var 2) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case  Flex (Var 9) [Branch (Pattern ("Prelude","[]") []) (Var 8)])])])])),Func ("LiftCase","liftCasesFunc.or.17._#selFP34#i'") 1 Private (FuncType (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("FlatCurry","Expr") []],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]) (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]),TCons ("Prelude","[]") [TCons ("Prelude","Int") []]]) (TCons ("Prelude","Int") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,,)") [2,3,4,5]) (Case  Flex (Var 2) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case  Flex (Var 9) [Branch (Pattern ("Prelude","[]") []) (Var 3)])])])])),Func ("LiftCase","liftCasesFunc.or.17._#selFP35#ff") 1 Private (FuncType (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("FlatCurry","Expr") []],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]) (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]),TCons ("Prelude","[]") [TCons ("Prelude","Int") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]) (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]))) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,,)") [2,3,4,5]) (Case  Flex (Var 2) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case  Flex (Var 9) [Branch (Pattern ("Prelude","[]") []) (Var 4)])])])])),Func ("LiftCase","liftCasesFunc.or.17._#selFP36#vs") 1 Private (FuncType (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("FlatCurry","Expr") []],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]) (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]),TCons ("Prelude","[]") [TCons ("Prelude","Int") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,,)") [2,3,4,5]) (Case  Flex (Var 2) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case  Flex (Var 9) [Branch (Pattern ("Prelude","[]") []) (Var 5)])])])])),Func ("LiftCase","liftCasesFunc.casE.17") 6 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("FlatCurry","CaseType") []) (FuncType (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","(,,,)") [TCons ("FlatCurry","Expr") [],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]) (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]),TCons ("Prelude","[]") [TCons ("Prelude","Int") []]])) (FuncType (TCons ("Prelude","[]") [FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","(,,,)") [TCons ("FlatCurry","BranchExpr") [],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]) (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]),TCons ("Prelude","[]") [TCons ("Prelude","Int") []]])]) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","(,,,)") [TCons ("FlatCurry","Expr") [],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]) (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]),TCons ("Prelude","[]") [TCons ("Prelude","Int") []]]))))))) (Rule [1,2,3,4,5,6] (Let [(7,Comb FuncCall ("Prelude","apply") [Var 4,Var 6]),(8,Comb FuncCall ("LiftCase","liftCasesFunc.casE.17._#selFP43#e'") [Var 7]),(9,Comb FuncCall ("LiftCase","liftCasesFunc.casE.17._#selFP44#i'") [Var 7]),(10,Comb FuncCall ("LiftCase","liftCasesFunc.casE.17._#selFP45#ffe") [Var 7]),(11,Comb FuncCall ("LiftCase","liftCasesFunc.casE.17._#selFP46#ve") [Var 7]),(12,Comb FuncCall ("LiftCase","sequence") [Var 5,Var 9]),(13,Comb FuncCall ("LiftCase","liftCasesFunc.casE.17._#selFP39#bs'") [Var 12]),(14,Comb FuncCall ("LiftCase","liftCasesFunc.casE.17._#selFP40#i''") [Var 12]),(15,Comb FuncCall ("LiftCase","liftCasesFunc.casE.17._#selFP41#ffbs") [Var 12]),(16,Comb FuncCall ("LiftCase","liftCasesFunc.casE.17._#selFP42#vbs") [Var 12]),(17,Comb FuncCall ("LiftCase","nub") [Comb FuncCall ("Prelude","++") [Var 11,Var 16]]),(18,Case  Rigid (Var 8) [Branch (Pattern ("FlatCurry","Var") [19]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("List","delete") [],Var 19],Var 17]),Branch (Pattern ("FlatCurry","Lit") [20]) (Var 17),Branch (Pattern ("FlatCurry","Comb") [21,22,23]) (Var 17),Branch (Pattern ("FlatCurry","Let") [24,25]) (Var 17),Branch (Pattern ("FlatCurry","Free") [26,27]) (Var 17),Branch (Pattern ("FlatCurry","Or") [28,29]) (Var 17),Branch (Pattern ("FlatCurry","Case") [30,31,32]) (Var 17),Branch (Pattern ("FlatCurry","Typed") [33,34]) (Var 17)])] (Comb ConsCall ("Prelude","(,,,)") [Comb FuncCall ("LiftCase","genFuncCall") [Var 2,Var 1,Var 14,Var 18,Var 8],Comb FuncCall ("Prelude","+") [Var 14,Lit (Intc  1)],Comb FuncCall ("Prelude",".") [Comb (ConsPartCall 1) ("Prelude",":") [Comb FuncCall ("LiftCase","genFunc") [Var 2,Var 1,Var 14,Var 18,Var 8,Var 3,Var 13]],Comb FuncCall ("Prelude",".") [Var 10,Var 15]],Var 17]))),Func ("LiftCase","liftCasesFunc.casE.17._#selFP43#e'") 1 Private (FuncType (TCons ("Prelude","(,,,)") [TCons ("FlatCurry","Expr") [],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]) (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]),TCons ("Prelude","[]") [TCons ("Prelude","Int") []]]) (TCons ("FlatCurry","Expr") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,,)") [2,3,4,5]) (Var 2)])),Func ("LiftCase","liftCasesFunc.casE.17._#selFP44#i'") 1 Private (FuncType (TCons ("Prelude","(,,,)") [TCons ("FlatCurry","Expr") [],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]) (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]),TCons ("Prelude","[]") [TCons ("Prelude","Int") []]]) (TCons ("Prelude","Int") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,,)") [2,3,4,5]) (Var 3)])),Func ("LiftCase","liftCasesFunc.casE.17._#selFP45#ffe") 1 Private (FuncType (TCons ("Prelude","(,,,)") [TCons ("FlatCurry","Expr") [],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]) (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]),TCons ("Prelude","[]") [TCons ("Prelude","Int") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]) (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]))) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,,)") [2,3,4,5]) (Var 4)])),Func ("LiftCase","liftCasesFunc.casE.17._#selFP46#ve") 1 Private (FuncType (TCons ("Prelude","(,,,)") [TCons ("FlatCurry","Expr") [],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]) (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]),TCons ("Prelude","[]") [TCons ("Prelude","Int") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,,)") [2,3,4,5]) (Var 5)])),Func ("LiftCase","liftCasesFunc.casE.17._#selFP39#bs'") 1 Private (FuncType (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("FlatCurry","BranchExpr") []],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]) (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]),TCons ("Prelude","[]") [TCons ("Prelude","Int") []]]) (TCons ("Prelude","[]") [TCons ("FlatCurry","BranchExpr") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,,)") [2,3,4,5]) (Var 2)])),Func ("LiftCase","liftCasesFunc.casE.17._#selFP40#i''") 1 Private (FuncType (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("FlatCurry","BranchExpr") []],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]) (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]),TCons ("Prelude","[]") [TCons ("Prelude","Int") []]]) (TCons ("Prelude","Int") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,,)") [2,3,4,5]) (Var 3)])),Func ("LiftCase","liftCasesFunc.casE.17._#selFP41#ffbs") 1 Private (FuncType (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("FlatCurry","BranchExpr") []],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]) (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]),TCons ("Prelude","[]") [TCons ("Prelude","Int") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]) (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]))) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,,)") [2,3,4,5]) (Var 4)])),Func ("LiftCase","liftCasesFunc.casE.17._#selFP42#vbs") 1 Private (FuncType (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("FlatCurry","BranchExpr") []],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]) (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]),TCons ("Prelude","[]") [TCons ("Prelude","Int") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,,)") [2,3,4,5]) (Var 5)])),Func ("LiftCase","liftCasesFunc.branch.17") 3 Private (FuncType (TCons ("FlatCurry","Pattern") []) (FuncType (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","(,,,)") [TCons ("FlatCurry","Expr") [],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]) (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]),TCons ("Prelude","[]") [TCons ("Prelude","Int") []]])) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","(,,,)") [TCons ("FlatCurry","BranchExpr") [],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]) (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]),TCons ("Prelude","[]") [TCons ("Prelude","Int") []]])))) (Rule [1,2,3] (Let [(4,Comb FuncCall ("Prelude","apply") [Var 2,Var 3]),(5,Comb FuncCall ("LiftCase","liftCasesFunc.branch.17._#selFP48#e'") [Var 4]),(6,Comb FuncCall ("LiftCase","liftCasesFunc.branch.17._#selFP49#i'") [Var 4]),(7,Comb FuncCall ("LiftCase","liftCasesFunc.branch.17._#selFP50#ff") [Var 4]),(8,Comb FuncCall ("LiftCase","liftCasesFunc.branch.17._#selFP51#ve") [Var 4])] (Comb ConsCall ("Prelude","(,,,)") [Comb ConsCall ("FlatCurry","Branch") [Var 1,Var 5],Var 6,Var 7,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("LiftCase","removePVars") [Var 8],Var 1]]))),Func ("LiftCase","liftCasesFunc.branch.17._#selFP48#e'") 1 Private (FuncType (TCons ("Prelude","(,,,)") [TCons ("FlatCurry","Expr") [],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]) (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]),TCons ("Prelude","[]") [TCons ("Prelude","Int") []]]) (TCons ("FlatCurry","Expr") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,,)") [2,3,4,5]) (Var 2)])),Func ("LiftCase","liftCasesFunc.branch.17._#selFP49#i'") 1 Private (FuncType (TCons ("Prelude","(,,,)") [TCons ("FlatCurry","Expr") [],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]) (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]),TCons ("Prelude","[]") [TCons ("Prelude","Int") []]]) (TCons ("Prelude","Int") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,,)") [2,3,4,5]) (Var 3)])),Func ("LiftCase","liftCasesFunc.branch.17._#selFP50#ff") 1 Private (FuncType (TCons ("Prelude","(,,,)") [TCons ("FlatCurry","Expr") [],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]) (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]),TCons ("Prelude","[]") [TCons ("Prelude","Int") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]) (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]))) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,,)") [2,3,4,5]) (Var 4)])),Func ("LiftCase","liftCasesFunc.branch.17._#selFP51#ve") 1 Private (FuncType (TCons ("Prelude","(,,,)") [TCons ("FlatCurry","Expr") [],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]) (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]),TCons ("Prelude","[]") [TCons ("Prelude","Int") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,,)") [2,3,4,5]) (Var 5)])),Func ("LiftCase","liftCasesFunc.typed.17") 3 Private (FuncType (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","(,,,)") [TCons ("FlatCurry","Expr") [],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]) (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]),TCons ("Prelude","[]") [TCons ("Prelude","Int") []]])) (FuncType (TCons ("FlatCurry","TypeExpr") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","(,,,)") [TCons ("FlatCurry","Expr") [],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]) (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]),TCons ("Prelude","[]") [TCons ("Prelude","Int") []]])))) (Rule [1,2,3] (Let [(4,Comb FuncCall ("Prelude","apply") [Var 1,Var 3]),(5,Comb FuncCall ("LiftCase","liftCasesFunc.typed.17._#selFP53#e'") [Var 4]),(6,Comb FuncCall ("LiftCase","liftCasesFunc.typed.17._#selFP54#i'") [Var 4]),(7,Comb FuncCall ("LiftCase","liftCasesFunc.typed.17._#selFP55#ff") [Var 4]),(8,Comb FuncCall ("LiftCase","liftCasesFunc.typed.17._#selFP56#ve") [Var 4])] (Comb ConsCall ("Prelude","(,,,)") [Comb ConsCall ("FlatCurry","Typed") [Var 5,Var 2],Var 6,Var 7,Var 8]))),Func ("LiftCase","liftCasesFunc.typed.17._#selFP53#e'") 1 Private (FuncType (TCons ("Prelude","(,,,)") [TCons ("FlatCurry","Expr") [],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]) (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]),TCons ("Prelude","[]") [TCons ("Prelude","Int") []]]) (TCons ("FlatCurry","Expr") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,,)") [2,3,4,5]) (Var 2)])),Func ("LiftCase","liftCasesFunc.typed.17._#selFP54#i'") 1 Private (FuncType (TCons ("Prelude","(,,,)") [TCons ("FlatCurry","Expr") [],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]) (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]),TCons ("Prelude","[]") [TCons ("Prelude","Int") []]]) (TCons ("Prelude","Int") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,,)") [2,3,4,5]) (Var 3)])),Func ("LiftCase","liftCasesFunc.typed.17._#selFP55#ff") 1 Private (FuncType (TCons ("Prelude","(,,,)") [TCons ("FlatCurry","Expr") [],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]) (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]),TCons ("Prelude","[]") [TCons ("Prelude","Int") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]) (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]))) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,,)") [2,3,4,5]) (Var 4)])),Func ("LiftCase","liftCasesFunc.typed.17._#selFP56#ve") 1 Private (FuncType (TCons ("Prelude","(,,,)") [TCons ("FlatCurry","Expr") [],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]) (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]),TCons ("Prelude","[]") [TCons ("Prelude","Int") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,,)") [2,3,4,5]) (Var 5)])),Func ("LiftCase","liftCasesFunc._#selFP62#e'") 1 Private (FuncType (TCons ("Prelude","(,,,)") [TCons ("FlatCurry","Expr") [],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]) (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]),TCons ("Prelude","[]") [TCons ("Prelude","Int") []]]) (TCons ("FlatCurry","Expr") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,,)") [2,3,4,5]) (Var 2)])),Func ("LiftCase","liftCasesFunc._#selFP63#i'") 1 Private (FuncType (TCons ("Prelude","(,,,)") [TCons ("FlatCurry","Expr") [],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]) (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]),TCons ("Prelude","[]") [TCons ("Prelude","Int") []]]) (TCons ("Prelude","Int") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,,)") [2,3,4,5]) (Var 3)])),Func ("LiftCase","liftCasesFunc._#selFP64#ffe") 1 Private (FuncType (TCons ("Prelude","(,,,)") [TCons ("FlatCurry","Expr") [],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]) (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]),TCons ("Prelude","[]") [TCons ("Prelude","Int") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]) (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]))) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,,)") [2,3,4,5]) (Var 4)])),Func ("LiftCase","liftCasesFunc._#lambda2") 2 Private (FuncType (FuncType (TCons ("FlatCurry","Expr") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","(,,,)") [TCons ("FlatCurry","Expr") [],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]) (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]),TCons ("Prelude","[]") [TCons ("Prelude","Int") []]]))) (FuncType (TCons ("FlatCurry","BranchExpr") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","(,,,)") [TCons ("FlatCurry","BranchExpr") [],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]) (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]),TCons ("Prelude","[]") [TCons ("Prelude","Int") []]])))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("FlatCurry","Branch") [3,4]) (Comb (FuncPartCall 1) ("LiftCase","liftCasesFunc.branch.17") [Var 3,Comb FuncCall ("Prelude","apply") [Var 1,Var 4]])])),Func ("LiftCase","liftCasesFunc._#selFP59#bs'") 1 Private (FuncType (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("FlatCurry","BranchExpr") []],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]) (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]),TCons ("Prelude","[]") [TCons ("Prelude","Int") []]]) (TCons ("Prelude","[]") [TCons ("FlatCurry","BranchExpr") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,,)") [2,3,4,5]) (Var 2)])),Func ("LiftCase","liftCasesFunc._#selFP60#i''") 1 Private (FuncType (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("FlatCurry","BranchExpr") []],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]) (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]),TCons ("Prelude","[]") [TCons ("Prelude","Int") []]]) (TCons ("Prelude","Int") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,,)") [2,3,4,5]) (Var 3)])),Func ("LiftCase","liftCasesFunc._#selFP61#ffbs") 1 Private (FuncType (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("FlatCurry","BranchExpr") []],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]) (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]),TCons ("Prelude","[]") [TCons ("Prelude","Int") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]) (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]))) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,,)") [2,3,4,5]) (Var 4)])),Func ("LiftCase","liftCasesFunc._#selFP65#exp") 1 Private (FuncType (TCons ("Prelude","(,,,)") [TCons ("FlatCurry","Expr") [],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]) (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]),TCons ("Prelude","[]") [TCons ("Prelude","Int") []]]) (TCons ("FlatCurry","Expr") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,,)") [2,3,4,5]) (Var 2)])),Func ("LiftCase","liftCasesFunc._#selFP66#iMain") 1 Private (FuncType (TCons ("Prelude","(,,,)") [TCons ("FlatCurry","Expr") [],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]) (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]),TCons ("Prelude","[]") [TCons ("Prelude","Int") []]]) (TCons ("Prelude","Int") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,,)") [2,3,4,5]) (Var 3)])),Func ("LiftCase","liftCasesFunc._#selFP67#ffeMain") 1 Private (FuncType (TCons ("Prelude","(,,,)") [TCons ("FlatCurry","Expr") [],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]) (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]),TCons ("Prelude","[]") [TCons ("Prelude","Int") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]) (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]))) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,,)") [2,3,4,5]) (Var 4)])),Func ("LiftCase","sequence") 2 Private (FuncType (TCons ("Prelude","[]") [FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","(,,,)") [TVar 0,TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]) (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]),TCons ("Prelude","[]") [TCons ("Prelude","Int") []]])]) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]) (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]),TCons ("Prelude","[]") [TCons ("Prelude","Int") []]]))) (Rule [1,2] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("LiftCase","sequence.once.77") [],Comb ConsCall ("Prelude","(,,,)") [Comb ConsCall ("Prelude","[]") [],Var 2,Comb (FuncPartCall 1) ("Prelude","id") [],Comb ConsCall ("Prelude","[]") []],Var 1])),Func ("LiftCase","sequence.once.77") 2 Private (FuncType (FuncType (TVar 0) (TCons ("Prelude","(,,,)") [TVar 1,TVar 2,FuncType (TVar 3) (TVar 4),TCons ("Prelude","[]") [TVar 5]])) (FuncType (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TVar 1],TVar 0,FuncType (TVar 4) (TVar 6),TCons ("Prelude","[]") [TVar 5]]) (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TVar 1],TVar 2,FuncType (TVar 3) (TVar 6),TCons ("Prelude","[]") [TVar 5]]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","(,,,)") [3,4,5,6]) (Let [(7,Comb FuncCall ("Prelude","apply") [Var 1,Var 4]),(8,Comb FuncCall ("LiftCase","sequence.once.77._#selFP69#e") [Var 7]),(9,Comb FuncCall ("LiftCase","sequence.once.77._#selFP70#k") [Var 7]),(10,Comb FuncCall ("LiftCase","sequence.once.77._#selFP71#ff2") [Var 7]),(11,Comb FuncCall ("LiftCase","sequence.once.77._#selFP72#vs2") [Var 7])] (Comb ConsCall ("Prelude","(,,,)") [Comb ConsCall ("Prelude",":") [Var 8,Var 3],Var 9,Comb FuncCall ("Prelude",".") [Var 5,Var 10],Comb FuncCall ("Prelude","++") [Var 6,Var 11]]))])),Func ("LiftCase","sequence.once.77._#selFP69#e") 1 Private (FuncType (TCons ("Prelude","(,,,)") [TVar 18,TVar 19,FuncType (TVar 27) (TVar 25),TCons ("Prelude","[]") [TVar 28]]) (TVar 18)) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,,)") [2,3,4,5]) (Var 2)])),Func ("LiftCase","sequence.once.77._#selFP70#k") 1 Private (FuncType (TCons ("Prelude","(,,,)") [TVar 18,TVar 19,FuncType (TVar 27) (TVar 25),TCons ("Prelude","[]") [TVar 28]]) (TVar 19)) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,,)") [2,3,4,5]) (Var 3)])),Func ("LiftCase","sequence.once.77._#selFP71#ff2") 1 Private (FuncType (TCons ("Prelude","(,,,)") [TVar 18,TVar 19,FuncType (TVar 27) (TVar 25),TCons ("Prelude","[]") [TVar 28]]) (FuncType (TVar 27) (TVar 25))) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,,)") [2,3,4,5]) (Var 4)])),Func ("LiftCase","sequence.once.77._#selFP72#vs2") 1 Private (FuncType (TCons ("Prelude","(,,,)") [TVar 18,TVar 19,FuncType (TVar 27) (TVar 25),TCons ("Prelude","[]") [TVar 28]]) (TCons ("Prelude","[]") [TVar 28])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,,)") [2,3,4,5]) (Var 5)])),Func ("LiftCase","genFuncCall") 5 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("FlatCurry","Expr") [])))))) (Rule [1,2,3,4,5] (Comb ConsCall ("FlatCurry","Comb") [Comb ConsCall ("FlatCurry","FuncCall") [],Comb FuncCall ("LiftCase","newName") [Var 1,Var 2,Var 3],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","map") [Comb (ConsPartCall 1) ("FlatCurry","Var") [],Var 4],Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude","[]") []]]])),Func ("LiftCase","genFunc") 7 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (FuncType (TCons ("FlatCurry","Expr") []) (FuncType (TCons ("FlatCurry","CaseType") []) (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","BranchExpr") []]) (TCons ("FlatCurry","FuncDecl") [])))))))) (Rule [1,2,3,4,5,6,7] (Let [(8,Case  Rigid (Var 5) [Branch (Pattern ("FlatCurry","Var") [9]) (Var 9),Branch (Pattern ("FlatCurry","Lit") [10]) (Comb FuncCall ("LiftCase","nextLocalName") [Comb FuncCall ("Prelude","++") [Var 4,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","concatMap") [Comb (FuncPartCall 1) ("LiftCase","genFunc.allVarsBranch.85") []],Var 7]]]),Branch (Pattern ("FlatCurry","Comb") [11,12,13]) (Comb FuncCall ("LiftCase","nextLocalName") [Comb FuncCall ("Prelude","++") [Var 4,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","concatMap") [Comb (FuncPartCall 1) ("LiftCase","genFunc.allVarsBranch.85") []],Var 7]]]),Branch (Pattern ("FlatCurry","Let") [14,15]) (Comb FuncCall ("LiftCase","nextLocalName") [Comb FuncCall ("Prelude","++") [Var 4,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","concatMap") [Comb (FuncPartCall 1) ("LiftCase","genFunc.allVarsBranch.85") []],Var 7]]]),Branch (Pattern ("FlatCurry","Free") [16,17]) (Comb FuncCall ("LiftCase","nextLocalName") [Comb FuncCall ("Prelude","++") [Var 4,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","concatMap") [Comb (FuncPartCall 1) ("LiftCase","genFunc.allVarsBranch.85") []],Var 7]]]),Branch (Pattern ("FlatCurry","Or") [18,19]) (Comb FuncCall ("LiftCase","nextLocalName") [Comb FuncCall ("Prelude","++") [Var 4,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","concatMap") [Comb (FuncPartCall 1) ("LiftCase","genFunc.allVarsBranch.85") []],Var 7]]]),Branch (Pattern ("FlatCurry","Case") [20,21,22]) (Comb FuncCall ("LiftCase","nextLocalName") [Comb FuncCall ("Prelude","++") [Var 4,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","concatMap") [Comb (FuncPartCall 1) ("LiftCase","genFunc.allVarsBranch.85") []],Var 7]]]),Branch (Pattern ("FlatCurry","Typed") [23,24]) (Comb FuncCall ("LiftCase","nextLocalName") [Comb FuncCall ("Prelude","++") [Var 4,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","concatMap") [Comb (FuncPartCall 1) ("LiftCase","genFunc.allVarsBranch.85") []],Var 7]]])]),(25,Comb FuncCall ("Prelude","++") [Var 4,Comb ConsCall ("Prelude",":") [Var 8,Comb ConsCall ("Prelude","[]") []]]),(26,Comb ConsCall ("FlatCurry","Case") [Var 6,Comb ConsCall ("FlatCurry","Var") [Var 8],Var 7]),(27,Comb ConsCall ("FlatCurry","TVar") [Comb FuncCall ("Prelude","negate") [Lit (Intc  42)]])] (Comb FuncCall ("Prelude","$") [Comb (ConsPartCall 1) ("FlatCurry","Func") [Comb FuncCall ("LiftCase","newName") [Var 1,Var 2,Var 3],Comb FuncCall ("Prelude","+") [Comb FuncCall ("Prelude","length") [Var 4],Lit (Intc  1)],Comb ConsCall ("FlatCurry","Private") [],Var 27],Comb ConsCall ("FlatCurry","Rule") [Var 25,Var 26]]))),Func ("LiftCase","genFunc.allVarsBranch.85") 1 Private (FuncType (TCons ("FlatCurry","BranchExpr") []) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","Branch") [2,3]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("FlatCurryGoodies","trPattern") [Comb (FuncPartCall 2) ("LiftCase","genFunc.allVarsBranch.85._#lambda5") [],Comb (FuncPartCall 1) ("LiftCase","genFunc.allVarsBranch.85._#lambda6") [],Var 2],Comb FuncCall ("FlatCurryGoodies","allVars") [Var 3]])])),Func ("LiftCase","genFunc.allVarsBranch.85._#lambda5") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]))) (Rule [1,2] (Var 2)),Func ("LiftCase","genFunc.allVarsBranch.85._#lambda6") 1 Private (FuncType (TCons ("FlatCurry","Literal") []) (TCons ("Prelude","[]") [TVar 39])) (Rule [1] (Comb ConsCall ("Prelude","[]") [])),Func ("LiftCase","removePVars") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (FuncType (TCons ("FlatCurry","Pattern") []) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]))) (Rule [1] (Comb (FuncPartCall 1) ("FlatCurryGoodies","trPattern") [Comb (FuncPartCall 2) ("LiftCase","removePVars._#lambda7") [Var 1],Comb (FuncPartCall 1) ("Prelude","const") [Var 1]])),Func ("LiftCase","removePVars._#lambda7") 3 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []])))) (Rule [1,2,3] (Comb FuncCall ("Prelude","filter") [Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","not") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("LiftCase","elemOf") [],Var 3]],Var 1])),Func ("LiftCase","genAuxName") 0 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Comb (FuncPartCall 1) ("Prelude","foldl") [Comb (FuncPartCall 2) ("LiftCase","addUnderscores") [],Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude","[]") []]]]]]]])),Func ("LiftCase","addUnderscores") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1,2] (Case  Rigid (Comb FuncCall ("List","isPrefixOf") [Var 1,Var 2]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("LiftCase","addUnderscores") [Comb FuncCall ("Prelude","++") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude","[]") []]],Var 2]),Branch (Pattern ("Prelude","False") []) (Var 1)])),Func ("LiftCase","elemOf") 0 Private (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","flip") [Comb (FuncPartCall 1) ("Prelude","elem") []])),Func ("LiftCase","nub") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []])) (Rule [1] (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Prelude","map") [Comb (FuncPartCall 1) ("Prelude","fst") []],Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("FiniteMap","fmToList") [],Comb FuncCall ("Prelude","$") [Comb FuncCall ("FiniteMap","listToFM") [Comb (FuncPartCall 2) ("Prelude","<") []],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("LiftCase","nub._#lambda8") [],Var 1]]]])),Func ("LiftCase","nub._#lambda8") 1 Private (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","()") []])) (Rule [1] (Comb ConsCall ("Prelude","(,)") [Var 1,Comb ConsCall ("Prelude","()") []])),Func ("LiftCase","newName") 3 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])))) (Rule [1,2,3] (Comb ConsCall ("Prelude","(,)") [Var 1,Comb FuncCall ("Prelude","++") [Var 2,Comb FuncCall ("Prelude","show") [Var 3]]])),Func ("LiftCase","nextLocalName") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","Int") [])) (Rule [1] (Comb FuncCall ("Prelude","+") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Prelude","max") [],Lit (Intc  0),Var 1],Lit (Intc  1)]))] []