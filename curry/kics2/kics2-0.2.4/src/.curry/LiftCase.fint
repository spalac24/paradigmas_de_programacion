Prog "LiftCase" ["FiniteMap","FlatCurry","FlatCurryGoodies","List","Prelude"] [TypeSyn ("LiftCase","FuncList") Private [] (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]) (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []])),TypeSyn ("LiftCase","Result") Private [] (TCons ("Prelude","(,,)") [FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]) (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]),TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]) (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []])]),TypeSyn ("LiftCase","M") Private [0] (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","(,,,)") [TVar 0,TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]) (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]),TCons ("Prelude","[]") [TCons ("Prelude","Int") []]]))] [Func ("LiftCase","isCaseAuxFuncName") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","Bool") [])) (Rule [] (Var 0)),Func ("LiftCase","isCaseAuxFuncType") 1 Public (FuncType (TCons ("FlatCurry","TypeExpr") []) (TCons ("Prelude","Bool") [])) (Rule [] (Var 0)),Func ("LiftCase","liftCases") 2 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("FlatCurry","Prog") []) (TCons ("FlatCurry","Prog") []))) (Rule [] (Var 0))] []