Prog "Files" ["Directory","FilePath","List","Prelude","ReadShowTerm","Utils"] [] [Func ("Files","withComponents") 4 Public (FuncType (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (FuncType (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (FuncType (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (Rule [1,2,3,4] (Let [(5,Comb FuncCall ("FilePath","splitFileName") [Var 4]),(6,Comb FuncCall ("Files","withComponents._#selFP5#path") [Var 5]),(7,Comb FuncCall ("Files","withComponents._#selFP6#bassfx") [Var 5]),(8,Comb FuncCall ("FilePath","splitExtension") [Var 7]),(9,Comb FuncCall ("Files","withComponents._#selFP3#base") [Var 8]),(10,Comb FuncCall ("Files","withComponents._#selFP4#suffix") [Var 8])] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FilePath","</>") [],Comb FuncCall ("Prelude","apply") [Var 1,Var 6]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FilePath","<.>") [],Comb FuncCall ("Prelude","apply") [Var 2,Var 9]],Comb FuncCall ("Prelude","apply") [Var 3,Var 10]]]))),Func ("Files","withComponents._#selFP5#path") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("Files","withComponents._#selFP6#bassfx") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("Files","withComponents._#selFP3#base") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("Files","withComponents._#selFP4#suffix") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("Files","withDirectory") 2 Public (FuncType (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1,2] (Comb FuncCall ("Files","withComponents") [Var 1,Comb (FuncPartCall 1) ("Prelude","id") [],Comb (FuncPartCall 1) ("Prelude","id") [],Var 2])),Func ("Files","withBaseName") 2 Public (FuncType (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1,2] (Comb FuncCall ("Files","withComponents") [Comb (FuncPartCall 1) ("Prelude","id") [],Var 1,Comb (FuncPartCall 1) ("Prelude","id") [],Var 2])),Func ("Files","withExtension") 2 Public (FuncType (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1,2] (Comb FuncCall ("Files","withComponents") [Comb (FuncPartCall 1) ("Prelude","id") [],Comb (FuncPartCall 1) ("Prelude","id") [],Var 1,Var 2])),Func ("Files","createDirectoryIfMissing") 2 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []]))) (Rule [1,2] (Let [(3,Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("List","scanl1") [Comb FuncCall ("FilePath","</>") []],Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("FilePath","splitDirectories") [],Var 2]])] (Case  Rigid (Var 1) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Files","createDirectoryIfMissing.createDirs.12") [Var 3]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Files","createDirectoryIfMissing.createDirs.12") [Comb ConsCall ("Prelude",":") [Comb FuncCall ("List","last") [Var 3],Comb ConsCall ("Prelude","[]") []]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])]))),Func ("Files","createDirectoryIfMissing.createDirs.12") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","done") []),Branch (Pattern ("Prelude",":") [2,3]) (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Directory","doesDirectoryExist") [Var 2],Comb (FuncPartCall 1) ("Files","createDirectoryIfMissing.createDirs.12._#lambda1") [Var 2,Var 3]])])),Func ("Files","createDirectoryIfMissing.createDirs.12._#lambda1") 3 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","IO") [TCons ("Prelude","()") []])))) (Rule [1,2,3] (Comb FuncCall ("Prelude",">>") [Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Utils","unless") [Var 3],Comb FuncCall ("Directory","createDirectory") [Var 1]],Comb FuncCall ("Files","createDirectoryIfMissing.createDirs.12") [Var 2]])),Func ("Files","writeFileInDir") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []]))) (Rule [1,2] (Comb FuncCall ("Prelude",">>") [Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Files","createDirectoryIfMissing") [Comb ConsCall ("Prelude","True") []],Comb FuncCall ("FilePath","takeDirectory") [Var 1]],Comb FuncCall ("Prelude","writeFile") [Var 1,Var 2]])),Func ("Files","writeQTermFileInDir") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TVar 0) (TCons ("Prelude","IO") [TCons ("Prelude","()") []]))) (Rule [1,2] (Comb FuncCall ("Prelude",">>") [Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Files","createDirectoryIfMissing") [Comb ConsCall ("Prelude","True") []],Comb FuncCall ("FilePath","takeDirectory") [Var 1]],Comb FuncCall ("ReadShowTerm","writeQTermFile") [Var 1,Var 2]])),Func ("Files","removeFileIfExists") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []])) (Rule [1] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Directory","doesFileExist") [Var 1],Comb (FuncPartCall 1) ("Files","removeFileIfExists._#lambda2") [Var 1]])),Func ("Files","removeFileIfExists._#lambda2") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","IO") [TCons ("Prelude","()") []]))) (Rule [1,2] (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Utils","when") [Var 2],Comb FuncCall ("Directory","removeFile") [Var 1]]))] []