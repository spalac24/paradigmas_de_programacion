Prog "Compile" ["AbstractHaskell","AbstractHaskellGoodies","AbstractHaskellPrinter","Base","Char","CompilerOpts","Directory","EliminateCond","FileGoodies","FilePath","Files","FiniteMap","FlatCurry","FlatCurry2AbstractHaskell","FlatCurryGoodies","LiftCase","List","Maybe","Message","ModuleDeps","Names","Prelude","ReadShowTerm","SimpleMake","TransFunctions","TransTypes","Utils"] [] [Func ("Compile","main") 0 Public (TCons ("Prelude","IO") [TCons ("Prelude","()") []]) (Rule [] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("CompilerOpts","compilerOpts") [],Comb (FuncPartCall 1) ("Compile","main._#lambda1") []])),Func ("Compile","main._#lambda1") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("CompilerOpts","Options") [],TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","mapIO_") [Comb (FuncPartCall 1) ("Compile","build") [Var 2]],Var 3])])),Func ("Compile","build") 2 Public (FuncType (TCons ("CompilerOpts","Options") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []]))) (Rule [1,2] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Compile","locateCurryFile") [Var 2],Comb (FuncPartCall 1) ("Compile","build._#lambda2") [Var 2,Var 1]])),Func ("Compile","build._#lambda2") 3 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("CompilerOpts","Options") []) (FuncType (TCons ("Prelude","Maybe") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []])))) (Rule [1,2,3] (Case  Rigid (Var 3) [Branch (Pattern ("Prelude","Nothing") []) (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Message","putErrLn") [],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]],Var 1]]),Branch (Pattern ("Prelude","Just") [4]) (Let [(5,Comb FuncCall ("TransFunctions","_#updR@State.compOptions") [Comb FuncCall ("TransFunctions","defaultState") [],Var 2])] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("ModuleDeps","deps") [Var 2,Var 4],Comb (FuncPartCall 1) ("Compile","build._#lambda2._#lambda4") [Var 5]]))])),Func ("Compile","build._#lambda2._#lambda4") 2 Private (FuncType (TCons ("TransFunctions","State") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("FlatCurry","Prog") []]]],TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [3,4]) (Case  Rigid (Comb FuncCall ("Prelude","null") [Var 4]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude",">>") [Comb FuncCall ("Utils","foldIO") [Comb (FuncPartCall 2) ("Compile","makeModule") [Var 3],Var 1,Comb FuncCall ("Prelude","zip") [Var 3,Comb FuncCall ("Prelude","enumFrom") [Lit (Intc  1)]]],Comb FuncCall ("Prelude","done") []]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","mapIO_") [Comb (FuncPartCall 1) ("Message","putErrLn") []],Var 4])])])),Func ("Compile","locateCurryFile") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","Maybe") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Directory","doesFileExist") [Var 1],Comb (FuncPartCall 1) ("Compile","locateCurryFile._#lambda5") [Var 1]])),Func ("Compile","locateCurryFile._#lambda5") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","IO") [TCons ("Prelude","Maybe") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case  Rigid (Var 2) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","return") [Comb ConsCall ("Prelude","Just") [Var 1]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("FileGoodies","lookupFileInPath") [Var 1,Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude","[]") []]]]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude","[]") []]])])),Func ("Compile","makeModule") 3 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("FlatCurry","Prog") []]]]) (FuncType (TCons ("TransFunctions","State") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("FlatCurry","Prog") []]],TCons ("Prelude","Int") []]) (TCons ("Prelude","IO") [TCons ("TransFunctions","State") []])))) (Rule [1,2,3] (Case  Flex (Var 3) [Branch (Pattern ("Prelude","(,)") [4,5]) (Case  Flex (Var 4) [Branch (Pattern ("Prelude","(,)") [6,7]) (Case  Flex (Var 7) [Branch (Pattern ("Prelude","(,)") [8,9]) (Let [(10,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Names","externalFile") [],Var 8]),(11,Comb FuncCall ("Compile","makeModule._#selFP2#imps") [Var 9]),(12,Comb FuncCall ("TransFunctions","_#selR@State.compOptions") [Var 2]),(13,Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Directory","doesFileExist") [Var 10],Comb (FuncPartCall 1) ("Compile","makeModule._#lambda6") [Var 10,Var 8,Var 11,Var 1,Var 12]]),(14,Comb FuncCall ("Prelude","length") [Var 1])] (Case  Rigid (Comb FuncCall ("CompilerOpts","_#selR@Options.optForce") [Var 12]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Compile","compileModule") [Var 14,Var 2,Var 3]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude",">>=") [Var 13,Comb (FuncPartCall 1) ("Compile","makeModule._#lambda8") [Var 8,Var 3,Var 14,Var 12,Var 2]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])]))])])])),Func ("Compile","makeModule._#selFP2#imps") 1 Private (FuncType (TCons ("FlatCurry","Prog") []) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","Prog") [2,3,4,5,6]) (Var 3)])),Func ("Compile","makeModule._#lambda6") 6 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("FlatCurry","Prog") []]]]) (FuncType (TCons ("CompilerOpts","Options") []) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","IO") [TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))))) (Rule [1,2,3,4,5,6] (Let [(7,Comb ConsCall ("Prelude",":") [Var 2,Case  Rigid (Var 6) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Var 1,Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","[]") [])]]),(8,Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Compile","makeModule._#lambda6._#lambda7") [Var 4,Var 5],Var 3])] (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Prelude","return") [],Comb FuncCall ("Prelude","++") [Var 7,Var 8]]))),Func ("Compile","makeModule._#lambda6._#lambda7") 3 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("FlatCurry","Prog") []]]]) (FuncType (TCons ("CompilerOpts","Options") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1,2,3] (Comb FuncCall ("Prelude","$") [Comb FuncCall ("Names","destFile") [Comb FuncCall ("CompilerOpts","_#selR@Options.optOutputSubdir") [Var 2]],Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Prelude","fst") [],Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Maybe","fromJust") [],Comb FuncCall ("Prelude","lookup") [Var 3,Var 1]]]])),Func ("Compile","makeModule._#lambda8") 6 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("FlatCurry","Prog") []]],TCons ("Prelude","Int") []]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("CompilerOpts","Options") []) (FuncType (TCons ("TransFunctions","State") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","IO") [TCons ("TransFunctions","State") []]))))))) (Rule [1,2,3,4,5,6] (Comb FuncCall ("SimpleMake","smake") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Names","destFile") [Comb FuncCall ("CompilerOpts","_#selR@Options.optOutputSubdir") [Var 4]],Var 1],Var 6,Comb FuncCall ("Compile","compileModule") [Var 3,Var 5,Var 2],Comb FuncCall ("Compile","loadAnalysis") [Var 3,Var 5,Var 2]])),Func ("Compile","storeAnalysis") 3 Public (FuncType (TCons ("TransFunctions","State") []) (FuncType (TCons ("Prelude","(,,,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]],TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Base","NDClass") []],TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Base","HOClass") []],TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Base","HOClass") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []])))) (Rule [1,2,3] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","(,,,)") [4,5,6,7]) (Let [(8,Comb FuncCall ("TransFunctions","_#selR@State.compOptions") [Var 1]),(9,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Names","analysisFile") [Comb FuncCall ("CompilerOpts","_#selR@Options.optOutputSubdir") [Var 8]],Var 3]),(10,Comb FuncCall ("FiniteMap","showFM") [Var 5]),(11,Comb FuncCall ("FiniteMap","showFM") [Var 6]),(12,Comb FuncCall ("FiniteMap","showFM") [Var 7]),(13,Comb FuncCall ("FiniteMap","showFM") [Var 4])] (Comb FuncCall ("Prelude",">>") [Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Message","showDetail") [Var 8],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'W'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'A'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]],Var 9]],Comb FuncCall ("Files","writeQTermFileInDir") [Var 9,Comb ConsCall ("Prelude","(,,,)") [Var 10,Var 11,Var 12,Var 13]]]))])),Func ("Compile","loadAnalysis") 3 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("TransFunctions","State") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("FlatCurry","Prog") []]],TCons ("Prelude","Int") []]) (TCons ("Prelude","IO") [TCons ("TransFunctions","State") []])))) (Rule [1,2,3] (Case  Flex (Var 3) [Branch (Pattern ("Prelude","(,)") [4,5]) (Case  Flex (Var 4) [Branch (Pattern ("Prelude","(,)") [6,7]) (Case  Flex (Var 7) [Branch (Pattern ("Prelude","(,)") [8,9]) (Let [(10,Comb FuncCall ("TransFunctions","_#selR@State.compOptions") [Var 2]),(11,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Names","analysisFile") [Comb FuncCall ("CompilerOpts","_#selR@Options.optOutputSubdir") [Var 10]],Var 8])] (Comb FuncCall ("Prelude",">>") [Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Message","showStatus") [Var 10],Comb FuncCall ("Compile","compMessage") [Var 5,Var 1,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'A'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  'z'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]],Var 6],Var 8,Var 11]],Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("ReadShowTerm","readQTermFile") [Var 11],Comb (FuncPartCall 1) ("Compile","loadAnalysis._#lambda9") [Var 2]]]))])])])),Func ("Compile","loadAnalysis._#lambda9") 2 Private (FuncType (TCons ("TransFunctions","State") []) (FuncType (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","IO") [TCons ("TransFunctions","State") []]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","(,,,)") [3,4,5,6]) (Comb FuncCall ("Prelude","return") [Comb FuncCall ("TransFunctions","_#updR@State.typeMap") [Comb FuncCall ("TransFunctions","_#updR@State.hoResultCons") [Comb FuncCall ("TransFunctions","_#updR@State.hoResultFun") [Comb FuncCall ("TransFunctions","_#updR@State.ndResult") [Var 1,Comb FuncCall ("FiniteMap","plusFM") [Comb FuncCall ("TransFunctions","_#selR@State.ndResult") [Var 1],Comb FuncCall ("FiniteMap","readFM") [Comb (FuncPartCall 2) ("Prelude","<") [],Var 3]]],Comb FuncCall ("FiniteMap","plusFM") [Comb FuncCall ("TransFunctions","_#selR@State.hoResultFun") [Var 1],Comb FuncCall ("FiniteMap","readFM") [Comb (FuncPartCall 2) ("Prelude","<") [],Var 4]]],Comb FuncCall ("FiniteMap","plusFM") [Comb FuncCall ("TransFunctions","_#selR@State.hoResultCons") [Var 1],Comb FuncCall ("FiniteMap","readFM") [Comb (FuncPartCall 2) ("Prelude","<") [],Var 5]]],Comb FuncCall ("FiniteMap","plusFM") [Comb FuncCall ("TransFunctions","_#selR@State.typeMap") [Var 1],Comb FuncCall ("FiniteMap","readFM") [Comb (FuncPartCall 2) ("Prelude","<") [],Var 6]]]])])),Func ("Compile","compileModule") 3 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("TransFunctions","State") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("FlatCurry","Prog") []]],TCons ("Prelude","Int") []]) (TCons ("Prelude","IO") [TCons ("TransFunctions","State") []])))) (Rule [1,2,3] (Case  Flex (Var 3) [Branch (Pattern ("Prelude","(,)") [4,5]) (Case  Flex (Var 4) [Branch (Pattern ("Prelude","(,)") [6,7]) (Case  Flex (Var 7) [Branch (Pattern ("Prelude","(,)") [8,9]) (Let [(10,Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Compile","compileModule.fcyFile.52") [],Comb FuncCall ("Files","withBaseName") [Comb (FuncPartCall 1) ("Prelude","flip") [Comb (FuncPartCall 2) ("Prelude","++") [],Comb ConsCall ("Prelude",":") [Lit (Charc  'D'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude","[]") []]]]]],Var 6]]),(11,Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Compile","compileModule.fcyFile.52") [],Comb FuncCall ("Files","withBaseName") [Comb (FuncPartCall 1) ("Prelude","flip") [Comb (FuncPartCall 2) ("Prelude","++") [],Comb ConsCall ("Prelude",":") [Lit (Charc  'L'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude","[]") []]]]]]]],Var 6]]),(12,Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Compile","compileModule.fcyFile.52") [],Comb FuncCall ("Files","withBaseName") [Comb (FuncPartCall 1) ("Prelude","flip") [Comb (FuncPartCall 2) ("Prelude","++") [],Comb ConsCall ("Prelude",":") [Lit (Charc  'E'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude","[]") []]]]]]]]]],Var 6]]),(13,Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Compile","compileModule.fcyFile.52") [],Comb FuncCall ("Files","withBaseName") [Comb (FuncPartCall 1) ("Prelude","flip") [Comb (FuncPartCall 2) ("Prelude","++") [],Comb ConsCall ("Prelude",":") [Lit (Charc  'R'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude","[]") []]]]]]]]],Var 6]]),(14,Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Compile","compileModule.ahsFile.52") [],Comb FuncCall ("Files","withBaseName") [Comb (FuncPartCall 1) ("Prelude","flip") [Comb (FuncPartCall 2) ("Prelude","++") [],Comb ConsCall ("Prelude",":") [Lit (Charc  'F'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'D'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude","[]") []]]]]]]]]],Var 6]]),(15,Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Compile","compileModule.ahsFile.52") [],Comb FuncCall ("Files","withBaseName") [Comb (FuncPartCall 1) ("Prelude","flip") [Comb (FuncPartCall 2) ("Prelude","++") [],Comb ConsCall ("Prelude",":") [Lit (Charc  'T'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'D'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]],Var 6]]),(16,Comb FuncCall ("Compile","compileModule.ahsFile.52") [Var 6]),(17,Comb FuncCall ("TransFunctions","_#selR@State.compOptions") [Var 2]),(18,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Names","destFile") [Comb FuncCall ("CompilerOpts","_#selR@Options.optOutputSubdir") [Var 17]],Var 8]),(19,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Names","funcInfoFile") [Comb FuncCall ("CompilerOpts","_#selR@Options.optOutputSubdir") [Var 17]],Var 8])] (Comb FuncCall ("Prelude",">>") [Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Message","showStatus") [Var 17],Comb FuncCall ("Compile","compMessage") [Var 5,Var 1,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]],Var 6],Var 8,Var 18]],Let [(20,Comb FuncCall ("Compile","filterPrelude") [Var 17,Var 9])] (Comb FuncCall ("Prelude",">>") [Comb FuncCall ("Compile","dump") [Comb ConsCall ("CompilerOpts","DumpFlat") [],Var 17,Var 10,Comb FuncCall ("Prelude","show") [Var 20]],Comb FuncCall ("Prelude",">>") [Comb FuncCall ("Message","showDetail") [Var 17,Comb ConsCall ("Prelude",":") [Lit (Charc  'L'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]],Let [(21,Comb FuncCall ("LiftCase","liftCases") [Comb ConsCall ("Prelude","True") [],Var 20])] (Comb FuncCall ("Prelude",">>") [Comb FuncCall ("Compile","dump") [Comb ConsCall ("CompilerOpts","DumpLifted") [],Var 17,Var 11,Comb FuncCall ("Prelude","show") [Var 21]],Comb FuncCall ("Prelude",">>") [Comb FuncCall ("Message","showDetail") [Var 17,Comb ConsCall ("Prelude",":") [Lit (Charc  'E'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]],Let [(22,Comb FuncCall ("EliminateCond","eliminateCond") [Var 21])] (Comb FuncCall ("Prelude",">>") [Comb FuncCall ("Compile","dump") [Comb ConsCall ("CompilerOpts","DumpEliminated") [],Var 17,Var 12,Comb FuncCall ("Prelude","show") [Var 22]],Comb FuncCall ("Prelude",">>") [Comb FuncCall ("Message","showDetail") [Var 17,Comb ConsCall ("Prelude",":") [Lit (Charc  'R'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'b'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]],Let [(23,Comb FuncCall ("Compile","rename") [Var 22]),(24,Comb FuncCall ("Compile","compileModule._#selFP10#renamed") [Var 23]),(25,Comb FuncCall ("Compile","compileModule._#selFP11#ts") [Var 23])] (Comb FuncCall ("Prelude",">>") [Comb FuncCall ("Compile","dump") [Comb ConsCall ("CompilerOpts","DumpRenamed") [],Var 17,Var 13,Comb FuncCall ("Prelude","show") [Var 24]],Comb FuncCall ("Prelude",">>") [Comb FuncCall ("Message","showDetail") [Var 17,Comb ConsCall ("Prelude",":") [Lit (Charc  'T'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]],Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("TransFunctions","unM") [Comb FuncCall ("TransFunctions","transProg") [Var 24]],Var 2],Comb (FuncPartCall 1) ("Compile","compileModule._#lambda10") [Var 16,Var 18,Var 8,Var 14,Var 19,Var 17,Var 25,Var 15]]]])]])]])]])]))])])])),Func ("Compile","compileModule.fcyFile.52") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Comb FuncCall ("Files","withExtension") [Comb (FuncPartCall 1) ("Prelude","const") [Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude","[]") []]]]]],Var 1])),Func ("Compile","compileModule.ahsFile.52") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Comb FuncCall ("Files","withExtension") [Comb (FuncPartCall 1) ("Prelude","const") [Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude","[]") []]]]]],Var 1])),Func ("Compile","compileModule._#selFP10#renamed") 1 Private (FuncType (TCons ("FlatCurry","Prog") []) (TCons ("FlatCurry","Prog") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","Prog") [2,3,4,5,6]) (Var 1)])),Func ("Compile","compileModule._#selFP11#ts") 1 Private (FuncType (TCons ("FlatCurry","Prog") []) (TCons ("Prelude","[]") [TCons ("FlatCurry","TypeDecl") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","Prog") [2,3,4,5,6]) (Var 4)])),Func ("Compile","compileModule._#lambda10") 9 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("CompilerOpts","Options") []) (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","TypeDecl") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("FlatCurry","Prog") [],TCons ("Prelude","(,,,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]],TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Base","NDClass") []],TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Base","HOClass") []],TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Base","HOClass") []]]],TCons ("TransFunctions","State") []]) (TCons ("Prelude","IO") [TCons ("TransFunctions","State") []])))))))))) (Rule [1,2,3,4,5,6,7,8,9] (Case  Flex (Var 9) [Branch (Pattern ("Prelude","(,)") [10,11]) (Case  Flex (Var 10) [Branch (Pattern ("Prelude","(,)") [12,13]) (Comb FuncCall ("Prelude",">>") [Comb FuncCall ("Compile","storeAnalysis") [Var 11,Var 13,Var 3],Let [(14,Comb FuncCall ("FlatCurry2AbstractHaskell","fcy2abs") [Var 12]),(15,Comb FuncCall ("Compile","compileModule._#lambda10._#selFP5#ahsFun") [Var 14]),(16,Comb FuncCall ("Compile","compileModule._#lambda10._#selFP6#n") [Var 14]),(17,Comb FuncCall ("Compile","compileModule._#lambda10._#selFP7#imps") [Var 14]),(18,Comb FuncCall ("Compile","compileModule._#lambda10._#selFP8#funs") [Var 14]),(19,Comb FuncCall ("Compile","compileModule._#lambda10._#selFP9#ops") [Var 14])] (Comb FuncCall ("Prelude",">>") [Comb FuncCall ("Compile","dump") [Comb ConsCall ("CompilerOpts","DumpFunDecls") [],Var 6,Var 4,Comb FuncCall ("Prelude","show") [Var 15]],Comb FuncCall ("Prelude",">>") [Comb FuncCall ("Message","showDetail") [Var 6,Comb ConsCall ("Prelude",":") [Lit (Charc  'T'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],Let [(20,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("TransTypes","transTypes") [Comb FuncCall ("TransFunctions","_#selR@State.hoResultCons") [Var 11]],Var 7])] (Comb FuncCall ("Prelude",">>") [Comb FuncCall ("Compile","dump") [Comb ConsCall ("CompilerOpts","DumpTypeDecls") [],Var 6,Var 8,Comb FuncCall ("Prelude","show") [Var 20]],Comb FuncCall ("Prelude",">>") [Comb FuncCall ("Message","showDetail") [Var 6,Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'b'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'A'),Comb ConsCall ("Prelude",":") [Lit (Charc  'b'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'H'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'k'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],Let [(21,Comb ConsCall ("AbstractHaskell","Prog") [Var 16,Comb FuncCall ("Prelude","++") [Comb FuncCall ("TransFunctions","defaultModules") [],Var 17],Var 20,Var 18,Var 19]),(22,Comb FuncCall ("Compile","patchCurryTypeClassIntoPrelude") [Var 21])] (Comb FuncCall ("Prelude",">>") [Comb FuncCall ("Compile","dump") [Comb ConsCall ("CompilerOpts","DumpAbstractHs") [],Var 6,Var 1,Comb FuncCall ("Prelude","show") [Var 22]],Comb FuncCall ("Prelude",">>") [Comb FuncCall ("Message","showDetail") [Var 6,Comb ConsCall ("Prelude",":") [Lit (Charc  'I'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Compile","integrateExternals") [Var 6,Var 22,Var 3],Comb (FuncPartCall 1) ("Compile","compileModule._#lambda10._#lambda11") [Var 2,Var 5,Var 18,Var 6,Var 11]]]])]])]])])])])),Func ("Compile","compileModule._#lambda10._#selFP5#ahsFun") 1 Private (FuncType (TCons ("AbstractHaskell","Prog") []) (TCons ("AbstractHaskell","Prog") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("AbstractHaskell","Prog") [2,3,4,5,6]) (Var 1)])),Func ("Compile","compileModule._#lambda10._#selFP6#n") 1 Private (FuncType (TCons ("AbstractHaskell","Prog") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("AbstractHaskell","Prog") [2,3,4,5,6]) (Var 2)])),Func ("Compile","compileModule._#lambda10._#selFP7#imps") 1 Private (FuncType (TCons ("AbstractHaskell","Prog") []) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("AbstractHaskell","Prog") [2,3,4,5,6]) (Var 3)])),Func ("Compile","compileModule._#lambda10._#selFP8#funs") 1 Private (FuncType (TCons ("AbstractHaskell","Prog") []) (TCons ("Prelude","[]") [TCons ("AbstractHaskell","FuncDecl") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("AbstractHaskell","Prog") [2,3,4,5,6]) (Var 5)])),Func ("Compile","compileModule._#lambda10._#selFP9#ops") 1 Private (FuncType (TCons ("AbstractHaskell","Prog") []) (TCons ("Prelude","[]") [TCons ("AbstractHaskell","OpDecl") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("AbstractHaskell","Prog") [2,3,4,5,6]) (Var 6)])),Func ("Compile","compileModule._#lambda10._#lambda11") 6 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("AbstractHaskell","FuncDecl") []]) (FuncType (TCons ("CompilerOpts","Options") []) (FuncType (TCons ("TransFunctions","State") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("TransFunctions","State") []]))))))) (Rule [1,2,3,4,5,6] (Comb FuncCall ("Prelude",">>") [Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Message","showDetail") [Var 4],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'G'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'H'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'k'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]],Var 1]],Comb FuncCall ("Prelude",">>") [Comb FuncCall ("Files","writeFileInDir") [Var 1,Var 6],Comb FuncCall ("Prelude",">>") [Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Message","showDetail") [Var 4],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'W'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]],Var 2]],Comb FuncCall ("Prelude",">>") [Comb FuncCall ("Files","writeQTermFileInDir") [Var 2,Comb FuncCall ("Compile","extractFuncInfos") [Var 3]],Comb FuncCall ("Prelude",">>") [Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Message","showDetail") [Var 4],Comb ConsCall ("Prelude",":") [Lit (Charc  'D'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]],Comb FuncCall ("Prelude","return") [Var 5]]]]]])),Func ("Compile","extractFuncInfos") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("AbstractHaskell","FuncDecl") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","Bool") []]])) (Rule [1] (Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Compile","extractFuncInfos._#lambda12") [],Var 1])),Func ("Compile","extractFuncInfos.withIOResult.91") 1 Private (FuncType (TCons ("AbstractHaskell","TypeExpr") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("AbstractHaskell","TVar") [2]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractHaskell","FuncType") [3,4]) (Comb FuncCall ("Compile","extractFuncInfos.withIOResult.91") [Var 4]),Branch (Pattern ("AbstractHaskell","TCons") [5,6]) (Comb FuncCall ("Prelude","==") [Var 5,Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Names","curryPrelude") [],Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude",":") [Lit (Charc  'I'),Comb ConsCall ("Prelude",":") [Lit (Charc  'O'),Comb ConsCall ("Prelude","[]") []]]]]]])])),Func ("Compile","extractFuncInfos.isIO.91") 1 Private (FuncType (TCons ("AbstractHaskell","TypeSig") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("AbstractHaskell","Untyped") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractHaskell","FType") [2]) (Comb FuncCall ("Compile","extractFuncInfos.withIOResult.91") [Var 2]),Branch (Pattern ("AbstractHaskell","CType") [3,4]) (Comb FuncCall ("Compile","extractFuncInfos.withIOResult.91") [Var 4])])),Func ("Compile","extractFuncInfos._#lambda12") 1 Private (FuncType (TCons ("AbstractHaskell","FuncDecl") []) (TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","Bool") []])) (Rule [1] (Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("AbstractHaskellGoodies","funcName") [Var 1],Comb FuncCall ("Compile","extractFuncInfos.isIO.91") [Comb FuncCall ("AbstractHaskellGoodies","typeOf") [Var 1]]])),Func ("Compile","patchCurryTypeClassIntoPrelude") 1 Public (FuncType (TCons ("AbstractHaskell","Prog") []) (TCons ("AbstractHaskell","Prog") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("AbstractHaskell","Prog") [2,3,4,5,6]) (Let [(7,Comb ConsCall ("AbstractHaskell","Type") [Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Names","curryPrelude") [],Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude","[]") []]]]]]],Comb ConsCall ("AbstractHaskell","Public") [],Comb ConsCall ("Prelude","[]") [],Comb ConsCall ("Prelude","[]") []])] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 2,Comb FuncCall ("Names","curryPrelude") []]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("AbstractHaskell","Prog") [Var 2,Var 3,Comb ConsCall ("Prelude",":") [Var 7,Var 4],Var 5,Var 6]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Var 1),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])]))])),Func ("Compile","compMessage") 5 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))))) (Rule [1,2,3,4,5] (Let [(6,Comb FuncCall ("Prelude","show") [Var 1]),(7,Comb FuncCall ("Prelude","show") [Var 2]),(8,Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Prelude","length") [],Var 7])] (Comb ConsCall ("Prelude",":") [Lit (Charc  '['),Comb FuncCall ("Prelude","++") [Comb FuncCall ("Compile","compMessage.fill.113") [Var 8,Var 6],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("Prelude","++") [Var 7,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ']'),Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb FuncCall ("Prelude","++") [Var 3,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("Prelude","++") [Comb FuncCall ("FilePath","normalise") [Var 4],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ','),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude","++") [Comb FuncCall ("FilePath","normalise") [Var 5],Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]))),Func ("Compile","compMessage.fill.113") 2 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1,2] (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","replicate") [Comb FuncCall ("Prelude","-") [Var 1,Comb FuncCall ("Prelude","length") [Var 2]],Lit (Charc  ' ')],Var 2])),Func ("Compile","filterPrelude") 2 Public (FuncType (TCons ("CompilerOpts","Options") []) (FuncType (TCons ("FlatCurry","Prog") []) (TCons ("FlatCurry","Prog") []))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("FlatCurry","Prog") [3,4,5,6,7]) (Let [(8,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","elem") [Comb ConsCall ("CompilerOpts","ExtNoImplicitPrelude") []],Comb FuncCall ("CompilerOpts","_#selR@Options.optExtensions") [Var 1]])] (Case  Rigid (Var 8) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("FlatCurry","Prog") [Var 3,Comb FuncCall ("Prelude","filter") [Comb (FuncPartCall 1) ("Prelude","flip") [Comb (FuncPartCall 2) ("Prelude","/=") [],Comb FuncCall ("Names","prelude") []],Var 4],Var 5,Var 6,Var 7]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Var 2),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])]))])),Func ("Compile","integrateExternals") 3 Public (FuncType (TCons ("CompilerOpts","Options") []) (FuncType (TCons ("AbstractHaskell","Prog") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])))) (Rule [1,2,3] (Case  Flex (Var 2) [Branch (Pattern ("AbstractHaskell","Prog") [4,5,6,7,8]) (Let [(9,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '{'),Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  '#'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'L'),Comb ConsCall ("Prelude",":") [Lit (Charc  'A'),Comb ConsCall ("Prelude",":") [Lit (Charc  'N'),Comb ConsCall ("Prelude",":") [Lit (Charc  'G'),Comb ConsCall ("Prelude",":") [Lit (Charc  'U'),Comb ConsCall ("Prelude",":") [Lit (Charc  'A'),Comb ConsCall ("Prelude",":") [Lit (Charc  'G'),Comb ConsCall ("Prelude",":") [Lit (Charc  'E'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'M'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'H'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '#'),Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  '}'),Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]],Comb ConsCall ("Prelude",":") [Lit (Charc  '{'),Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  '#'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'O'),Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  'T'),Comb ConsCall ("Prelude",":") [Lit (Charc  'I'),Comb ConsCall ("Prelude",":") [Lit (Charc  'O'),Comb ConsCall ("Prelude",":") [Lit (Charc  'N'),Comb ConsCall ("Prelude",":") [Lit (Charc  'S'),Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude",":") [Lit (Charc  'G'),Comb ConsCall ("Prelude",":") [Lit (Charc  'H'),Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'v'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '#'),Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  '}'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Compile","lookupExternals") [Var 1,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FilePath","dropExtension") [],Var 3]],Comb (FuncPartCall 1) ("Compile","integrateExternals._#lambda13") [Var 9,Var 7,Var 5,Var 4,Var 8,Var 6]]))])),Func ("Compile","integrateExternals._#lambda13") 7 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("AbstractHaskell","FuncDecl") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("AbstractHaskell","OpDecl") []]) (FuncType (TCons ("Prelude","[]") [TCons ("AbstractHaskell","TypeDecl") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])))))))) (Rule [1,2,3,4,5,6,7] (Let [(8,Comb FuncCall ("Compile","splitExternals") [Var 7]),(9,Comb FuncCall ("Compile","integrateExternals._#lambda13._#selFP13#pragmas") [Var 8]),(10,Comb FuncCall ("Compile","integrateExternals._#lambda13._#selFP14#extimps") [Var 8]),(11,Comb FuncCall ("Compile","integrateExternals._#lambda13._#selFP15#extdecls") [Var 8])] (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Prelude","return") [],Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Prelude","unlines") [],Comb FuncCall ("Prelude","filter") [Comb FuncCall ("Utils","notNull") [],Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","unlines") [Comb ConsCall ("Prelude",":") [Var 1,Var 9]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("AbstractHaskellPrinter","showModuleHeader") [Var 4,Var 6,Var 2,Var 3],Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","unlines") [Var 10],Comb ConsCall ("Prelude",":") [Comb FuncCall ("AbstractHaskellPrinter","showDecls") [Var 4,Var 5,Var 6,Var 2],Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","unlines") [Var 11],Comb ConsCall ("Prelude","[]") []]]]]]]]]))),Func ("Compile","integrateExternals._#lambda13._#selFP13#pragmas") 1 Private (FuncType (TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,)") [2,3,4]) (Var 2)])),Func ("Compile","integrateExternals._#lambda13._#selFP14#extimps") 1 Private (FuncType (TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,)") [2,3,4]) (Var 3)])),Func ("Compile","integrateExternals._#lambda13._#selFP15#extdecls") 1 Private (FuncType (TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,)") [2,3,4]) (Var 4)])),Func ("Compile","lookupExternals") 2 Public (FuncType (TCons ("CompilerOpts","Options") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]))) (Rule [1,2] (Let [(3,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Names","externalFile") [],Var 2])] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Directory","doesFileExist") [Var 3],Comb (FuncPartCall 1) ("Compile","lookupExternals._#lambda14") [Var 3,Var 1]]))),Func ("Compile","lookupExternals._#lambda14") 3 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("CompilerOpts","Options") []) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","IO") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])))) (Rule [1,2,3] (Case  Rigid (Var 3) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude",">>") [Comb FuncCall ("Message","showDetail") [Var 2,Comb ConsCall ("Prelude",":") [Lit (Charc  'E'),Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]],Comb FuncCall ("Prelude","readFile") [Var 1]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude",">>") [Comb FuncCall ("Message","showDetail") [Var 2,Comb ConsCall ("Prelude",":") [Lit (Charc  'N'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'E'),Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]],Comb FuncCall ("Prelude","return") [Comb ConsCall ("Prelude","[]") []]])])),Func ("Compile","splitExternals") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Let [(2,Comb FuncCall ("Prelude","span") [Comb (FuncPartCall 1) ("Compile","splitExternals.isPragma.133") [],Comb FuncCall ("Prelude","lines") [Var 1]]),(3,Comb FuncCall ("Compile","splitExternals._#selFP20#pragmas") [Var 2]),(4,Comb FuncCall ("Compile","splitExternals._#selFP21#rest") [Var 2]),(5,Comb FuncCall ("Prelude","span") [Comb (FuncPartCall 1) ("Compile","splitExternals.isImport.133") [],Var 4]),(6,Comb FuncCall ("Compile","splitExternals._#selFP18#imports") [Var 5]),(7,Comb FuncCall ("Compile","splitExternals._#selFP19#decls") [Var 5])] (Comb ConsCall ("Prelude","(,,)") [Var 3,Var 6,Var 7]))),Func ("Compile","splitExternals.isPragma.133") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","Bool") [])) (Rule [1] (Comb FuncCall ("Prelude","||") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","all") [Comb (FuncPartCall 1) ("Char","isSpace") []],Var 1],Comb FuncCall ("List","isPrefixOf") [Comb ConsCall ("Prelude",":") [Lit (Charc  '{'),Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  '#'),Comb ConsCall ("Prelude","[]") []]]],Var 1]])),Func ("Compile","splitExternals._#selFP20#pragmas") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("Compile","splitExternals._#selFP21#rest") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("Compile","splitExternals.isComment.133") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","Bool") [])) (Rule [1] (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("List","isPrefixOf") [Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]],Var 1],Comb FuncCall ("Prelude","not") [Comb FuncCall ("List","isPrefixOf") [Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '#'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]],Var 1]]])),Func ("Compile","splitExternals.isImport.133") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","Bool") [])) (Rule [1] (Comb FuncCall ("Prelude","||") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","all") [Comb (FuncPartCall 1) ("Char","isSpace") []],Var 1],Comb FuncCall ("Prelude","||") [Comb FuncCall ("List","isPrefixOf") [Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude","[]") []]]]]]],Var 1],Comb FuncCall ("Prelude","||") [Comb FuncCall ("List","isPrefixOf") [Comb ConsCall ("Prelude",":") [Lit (Charc  '#'),Comb ConsCall ("Prelude","[]") []],Var 1],Comb FuncCall ("Compile","splitExternals.isComment.133") [Var 1]]]])),Func ("Compile","splitExternals._#selFP18#imports") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("Compile","splitExternals._#selFP19#decls") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("Compile","dump") 4 Public (FuncType (TCons ("CompilerOpts","DumpFormat") []) (FuncType (TCons ("CompilerOpts","Options") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []]))))) (Rule [1,2,3,4] (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Utils","when") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","elem") [Var 1],Comb FuncCall ("CompilerOpts","_#selR@Options.optDump") [Var 2]]],Comb FuncCall ("Prelude",">>") [Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Message","showDetail") [Var 2],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'D'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]],Var 3]],Comb FuncCall ("Files","writeFileInDir") [Comb FuncCall ("Files","withDirectory") [Comb (FuncPartCall 1) ("Prelude","flip") [Comb FuncCall ("FilePath","</>") [],Comb FuncCall ("CompilerOpts","_#selR@Options.optOutputSubdir") [Var 2]],Var 3],Var 4]]])),Func ("Compile","rename") 1 Public (FuncType (TCons ("FlatCurry","Prog") []) (TCons ("FlatCurry","Prog") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","Prog") [2,3,4,5,6]) (Let [(7,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FlatCurryGoodies","updQNamesInProg") [Comb (FuncPartCall 1) ("Names","renameQName") []],Var 1]),(8,Comb FuncCall ("Compile","rename._#selFP23#td") [Var 7]),(9,Comb FuncCall ("Compile","rename._#selFP24#fd") [Var 7]),(10,Comb FuncCall ("Compile","rename._#selFP25#od") [Var 7])] (Comb ConsCall ("FlatCurry","Prog") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Names","renameModule") [],Var 2],Comb FuncCall ("Prelude","map") [Comb FuncCall ("Names","renameModule") [],Var 3],Var 8,Var 9,Var 10]))])),Func ("Compile","rename._#selFP23#td") 1 Private (FuncType (TCons ("FlatCurry","Prog") []) (TCons ("Prelude","[]") [TCons ("FlatCurry","TypeDecl") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","Prog") [2,3,4,5,6]) (Var 4)])),Func ("Compile","rename._#selFP24#fd") 1 Private (FuncType (TCons ("FlatCurry","Prog") []) (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","Prog") [2,3,4,5,6]) (Var 5)])),Func ("Compile","rename._#selFP25#od") 1 Private (FuncType (TCons ("FlatCurry","Prog") []) (TCons ("Prelude","[]") [TCons ("FlatCurry","OpDecl") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","Prog") [2,3,4,5,6]) (Var 6)]))] []