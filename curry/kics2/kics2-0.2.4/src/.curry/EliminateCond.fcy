Prog "EliminateCond" ["FlatCurry","FlatCurryGoodies","List","Prelude","State"] [] [Func ("EliminateCond","eliminateCond") 1 Public (FuncType (TCons ("FlatCurry","Prog") []) (TCons ("FlatCurry","Prog") [])) (Rule [1] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FlatCurryGoodies","updProgFuncs") [Comb FuncCall ("Prelude","concatMap") [Comb (FuncPartCall 1) ("EliminateCond","transFunc") []]],Var 1])),Func ("EliminateCond","transFunc") 1 Private (FuncType (TCons ("FlatCurry","FuncDecl") []) (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","Func") [2,3,4,5,6]) (Case  Flex (Var 6) [Branch (Pattern ("FlatCurry","External") [7]) (Comb ConsCall ("Prelude",":") [Var 1,Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("FlatCurry","Rule") [8,9]) (Let [(10,Comb FuncCall ("State","runState") [Comb FuncCall ("EliminateCond","transExpr") [Var 2,Var 9],Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","[]") [],Lit (Intc  0)]]),(11,Comb FuncCall ("EliminateCond","transFunc._#selFP2#newExp") [Var 10]),(12,Comb FuncCall ("EliminateCond","transFunc._#selFP3#newFuns") [Var 10])] (Comb ConsCall ("Prelude",":") [Comb ConsCall ("FlatCurry","Func") [Var 2,Var 3,Var 4,Var 5,Comb ConsCall ("FlatCurry","Rule") [Var 8,Var 11]],Var 12]))])])),Func ("EliminateCond","transFunc._#selFP2#newExp") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("FlatCurry","Expr") [],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []],TCons ("Prelude","Int") []]]) (TCons ("FlatCurry","Expr") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude","(,)") [4,5]) (Var 2)])])),Func ("EliminateCond","transFunc._#selFP3#newFuns") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("FlatCurry","Expr") [],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []],TCons ("Prelude","Int") []]]) (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude","(,)") [4,5]) (Var 4)])])),Func ("EliminateCond","transExpr") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("FlatCurry","Expr") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []],TCons ("Prelude","Int") []]) (TCons ("Prelude","(,)") [TCons ("FlatCurry","Expr") [],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []],TCons ("Prelude","Int") []]])))) (Rule [1,2] (Comb FuncCall ("FlatCurryGoodies","trExpr") [Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 2) ("State","returnS") [],Comb (ConsPartCall 1) ("FlatCurry","Var") []],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 2) ("State","returnS") [],Comb (ConsPartCall 1) ("FlatCurry","Lit") []],Comb (FuncPartCall 3) ("EliminateCond","transExpr.transComb.17") [Var 1],Comb (FuncPartCall 2) ("EliminateCond","transExpr.transLet.17") [],Comb (FuncPartCall 2) ("EliminateCond","transExpr.transFree.17") [],Comb (FuncPartCall 2) ("EliminateCond","transExpr.transOr.17") [],Comb (FuncPartCall 3) ("EliminateCond","transExpr.transCase.17") [],Comb (FuncPartCall 2) ("EliminateCond","transExpr.transBranch.17") [],Comb (FuncPartCall 2) ("EliminateCond","transExpr.transTyped.17") [],Var 2])),Func ("EliminateCond","transExpr.transComb.17") 4 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("FlatCurry","CombType") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []],TCons ("Prelude","Int") []]) (TCons ("Prelude","(,)") [TCons ("FlatCurry","Expr") [],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []],TCons ("Prelude","Int") []]])]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []],TCons ("Prelude","Int") []]) (TCons ("Prelude","(,)") [TCons ("FlatCurry","Expr") [],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []],TCons ("Prelude","Int") []]])))))) (Rule [1,2,3,4] (Case  Rigid (Comb ConsCall ("Prelude","(,)") [Var 3,Var 4]) [Branch (Pattern ("Prelude","(,)") [5,6]) (Case  Rigid (Var 5) [Branch (Pattern ("Prelude","(,)") [7,8]) (Case  Rigid (Var 7) [Branch (Pattern ("Prelude",":") [9,10]) (Let [(11,Var 9)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 11,Lit (Charc  'P')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 10) [Branch (Pattern ("Prelude",":") [12,13]) (Let [(14,Var 12)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 14,Lit (Charc  'r')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 13) [Branch (Pattern ("Prelude",":") [15,16]) (Let [(17,Var 15)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 17,Lit (Charc  'e')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 16) [Branch (Pattern ("Prelude",":") [18,19]) (Let [(20,Var 18)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 20,Lit (Charc  'l')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 19) [Branch (Pattern ("Prelude",":") [21,22]) (Let [(23,Var 21)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 23,Lit (Charc  'u')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 22) [Branch (Pattern ("Prelude",":") [24,25]) (Let [(26,Var 24)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 26,Lit (Charc  'd')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 25) [Branch (Pattern ("Prelude",":") [27,28]) (Let [(29,Var 27)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 29,Lit (Charc  'e')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 28) [Branch (Pattern ("Prelude","[]") []) (Case  Rigid (Var 8) [Branch (Pattern ("Prelude",":") [30,31]) (Let [(32,Var 30)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 32,Lit (Charc  'c')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 31) [Branch (Pattern ("Prelude",":") [33,34]) (Let [(35,Var 33)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 35,Lit (Charc  'o')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 34) [Branch (Pattern ("Prelude",":") [36,37]) (Let [(38,Var 36)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 38,Lit (Charc  'n')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 37) [Branch (Pattern ("Prelude",":") [39,40]) (Let [(41,Var 39)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 41,Lit (Charc  'd')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 40) [Branch (Pattern ("Prelude","[]") []) (Case  Rigid (Var 6) [Branch (Pattern ("Prelude",":") [42,43]) (Case  Rigid (Var 43) [Branch (Pattern ("Prelude",":") [44,45]) (Case  Rigid (Var 45) [Branch (Pattern ("Prelude","[]") []) (Comb (FuncPartCall 1) ("State","bindS") [Var 42,Comb (FuncPartCall 1) ("EliminateCond","transExpr.transComb.17._#lambda2") [Var 44,Var 1]]),Branch (Pattern ("Prelude",":") [46,47]) (Comb (FuncPartCall 1) ("State","bindS") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("State","sequenceS") [],Var 4],Comb (FuncPartCall 1) ("EliminateCond","transExpr.transComb.17._#lambda4") [Var 3,Var 2]])]),Branch (Pattern ("Prelude","[]") []) (Comb (FuncPartCall 1) ("State","bindS") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("State","sequenceS") [],Var 4],Comb (FuncPartCall 1) ("EliminateCond","transExpr.transComb.17._#lambda4") [Var 3,Var 2]])]),Branch (Pattern ("Prelude","[]") []) (Comb (FuncPartCall 1) ("State","bindS") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("State","sequenceS") [],Var 4],Comb (FuncPartCall 1) ("EliminateCond","transExpr.transComb.17._#lambda4") [Var 3,Var 2]])]),Branch (Pattern ("Prelude",":") [48,49]) (Comb (FuncPartCall 1) ("State","bindS") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("State","sequenceS") [],Var 4],Comb (FuncPartCall 1) ("EliminateCond","transExpr.transComb.17._#lambda4") [Var 3,Var 2]])]),Branch (Pattern ("Prelude","False") []) (Comb (FuncPartCall 1) ("State","bindS") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("State","sequenceS") [],Var 4],Comb (FuncPartCall 1) ("EliminateCond","transExpr.transComb.17._#lambda4") [Var 3,Var 2]])])),Branch (Pattern ("Prelude","[]") []) (Comb (FuncPartCall 1) ("State","bindS") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("State","sequenceS") [],Var 4],Comb (FuncPartCall 1) ("EliminateCond","transExpr.transComb.17._#lambda4") [Var 3,Var 2]])]),Branch (Pattern ("Prelude","False") []) (Comb (FuncPartCall 1) ("State","bindS") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("State","sequenceS") [],Var 4],Comb (FuncPartCall 1) ("EliminateCond","transExpr.transComb.17._#lambda4") [Var 3,Var 2]])])),Branch (Pattern ("Prelude","[]") []) (Comb (FuncPartCall 1) ("State","bindS") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("State","sequenceS") [],Var 4],Comb (FuncPartCall 1) ("EliminateCond","transExpr.transComb.17._#lambda4") [Var 3,Var 2]])]),Branch (Pattern ("Prelude","False") []) (Comb (FuncPartCall 1) ("State","bindS") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("State","sequenceS") [],Var 4],Comb (FuncPartCall 1) ("EliminateCond","transExpr.transComb.17._#lambda4") [Var 3,Var 2]])])),Branch (Pattern ("Prelude","[]") []) (Comb (FuncPartCall 1) ("State","bindS") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("State","sequenceS") [],Var 4],Comb (FuncPartCall 1) ("EliminateCond","transExpr.transComb.17._#lambda4") [Var 3,Var 2]])]),Branch (Pattern ("Prelude","False") []) (Comb (FuncPartCall 1) ("State","bindS") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("State","sequenceS") [],Var 4],Comb (FuncPartCall 1) ("EliminateCond","transExpr.transComb.17._#lambda4") [Var 3,Var 2]])])),Branch (Pattern ("Prelude","[]") []) (Comb (FuncPartCall 1) ("State","bindS") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("State","sequenceS") [],Var 4],Comb (FuncPartCall 1) ("EliminateCond","transExpr.transComb.17._#lambda4") [Var 3,Var 2]])]),Branch (Pattern ("Prelude",":") [50,51]) (Comb (FuncPartCall 1) ("State","bindS") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("State","sequenceS") [],Var 4],Comb (FuncPartCall 1) ("EliminateCond","transExpr.transComb.17._#lambda4") [Var 3,Var 2]])]),Branch (Pattern ("Prelude","False") []) (Comb (FuncPartCall 1) ("State","bindS") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("State","sequenceS") [],Var 4],Comb (FuncPartCall 1) ("EliminateCond","transExpr.transComb.17._#lambda4") [Var 3,Var 2]])])),Branch (Pattern ("Prelude","[]") []) (Comb (FuncPartCall 1) ("State","bindS") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("State","sequenceS") [],Var 4],Comb (FuncPartCall 1) ("EliminateCond","transExpr.transComb.17._#lambda4") [Var 3,Var 2]])]),Branch (Pattern ("Prelude","False") []) (Comb (FuncPartCall 1) ("State","bindS") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("State","sequenceS") [],Var 4],Comb (FuncPartCall 1) ("EliminateCond","transExpr.transComb.17._#lambda4") [Var 3,Var 2]])])),Branch (Pattern ("Prelude","[]") []) (Comb (FuncPartCall 1) ("State","bindS") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("State","sequenceS") [],Var 4],Comb (FuncPartCall 1) ("EliminateCond","transExpr.transComb.17._#lambda4") [Var 3,Var 2]])]),Branch (Pattern ("Prelude","False") []) (Comb (FuncPartCall 1) ("State","bindS") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("State","sequenceS") [],Var 4],Comb (FuncPartCall 1) ("EliminateCond","transExpr.transComb.17._#lambda4") [Var 3,Var 2]])])),Branch (Pattern ("Prelude","[]") []) (Comb (FuncPartCall 1) ("State","bindS") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("State","sequenceS") [],Var 4],Comb (FuncPartCall 1) ("EliminateCond","transExpr.transComb.17._#lambda4") [Var 3,Var 2]])]),Branch (Pattern ("Prelude","False") []) (Comb (FuncPartCall 1) ("State","bindS") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("State","sequenceS") [],Var 4],Comb (FuncPartCall 1) ("EliminateCond","transExpr.transComb.17._#lambda4") [Var 3,Var 2]])])),Branch (Pattern ("Prelude","[]") []) (Comb (FuncPartCall 1) ("State","bindS") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("State","sequenceS") [],Var 4],Comb (FuncPartCall 1) ("EliminateCond","transExpr.transComb.17._#lambda4") [Var 3,Var 2]])]),Branch (Pattern ("Prelude","False") []) (Comb (FuncPartCall 1) ("State","bindS") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("State","sequenceS") [],Var 4],Comb (FuncPartCall 1) ("EliminateCond","transExpr.transComb.17._#lambda4") [Var 3,Var 2]])])),Branch (Pattern ("Prelude","[]") []) (Comb (FuncPartCall 1) ("State","bindS") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("State","sequenceS") [],Var 4],Comb (FuncPartCall 1) ("EliminateCond","transExpr.transComb.17._#lambda4") [Var 3,Var 2]])]),Branch (Pattern ("Prelude","False") []) (Comb (FuncPartCall 1) ("State","bindS") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("State","sequenceS") [],Var 4],Comb (FuncPartCall 1) ("EliminateCond","transExpr.transComb.17._#lambda4") [Var 3,Var 2]])])),Branch (Pattern ("Prelude","[]") []) (Comb (FuncPartCall 1) ("State","bindS") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("State","sequenceS") [],Var 4],Comb (FuncPartCall 1) ("EliminateCond","transExpr.transComb.17._#lambda4") [Var 3,Var 2]])]),Branch (Pattern ("Prelude","False") []) (Comb (FuncPartCall 1) ("State","bindS") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("State","sequenceS") [],Var 4],Comb (FuncPartCall 1) ("EliminateCond","transExpr.transComb.17._#lambda4") [Var 3,Var 2]])])),Branch (Pattern ("Prelude","[]") []) (Comb (FuncPartCall 1) ("State","bindS") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("State","sequenceS") [],Var 4],Comb (FuncPartCall 1) ("EliminateCond","transExpr.transComb.17._#lambda4") [Var 3,Var 2]])])])])),Func ("EliminateCond","transExpr.transComb.17._#lambda2") 3 Private (FuncType (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []],TCons ("Prelude","Int") []]) (TCons ("Prelude","(,)") [TCons ("FlatCurry","Expr") [],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []],TCons ("Prelude","Int") []]])) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("FlatCurry","Expr") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []],TCons ("Prelude","Int") []]) (TCons ("Prelude","(,)") [TCons ("FlatCurry","Expr") [],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []],TCons ("Prelude","Int") []]]))))) (Rule [1,2,3] (Comb (FuncPartCall 1) ("State","bindS") [Var 1,Comb (FuncPartCall 1) ("EliminateCond","transExpr.transComb.17._#lambda2._#lambda3") [Var 2,Var 3]])),Func ("EliminateCond","transExpr.transComb.17._#lambda2._#lambda3") 3 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("FlatCurry","Expr") []) (FuncType (TCons ("FlatCurry","Expr") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []],TCons ("Prelude","Int") []]) (TCons ("Prelude","(,)") [TCons ("FlatCurry","Expr") [],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []],TCons ("Prelude","Int") []]]))))) (Rule [1,2,3] (Comb FuncCall ("EliminateCond","makeAuxFuncCall") [Var 1,Var 2,Var 3])),Func ("EliminateCond","transExpr.transComb.17._#lambda4") 3 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("FlatCurry","CombType") []) (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","Expr") []]) (FuncType (TVar 211) (TCons ("Prelude","(,)") [TCons ("FlatCurry","Expr") [],TVar 211]))))) (Rule [1,2,3] (Comb (FuncPartCall 1) ("State","returnS") [Comb ConsCall ("FlatCurry","Comb") [Var 2,Var 1,Var 3]])),Func ("EliminateCond","transExpr.transLet.17") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],FuncType (TVar 0) (TCons ("Prelude","(,)") [TCons ("FlatCurry","Expr") [],TVar 0])]]) (FuncType (FuncType (TVar 0) (TCons ("Prelude","(,)") [TCons ("FlatCurry","Expr") [],TVar 0])) (FuncType (TVar 0) (TCons ("Prelude","(,)") [TCons ("FlatCurry","Expr") [],TVar 0])))) (Rule [1,2] (Let [(3,Comb FuncCall ("Prelude","unzip") [Var 1]),(4,Comb FuncCall ("EliminateCond","transExpr.transLet.17._#selFP5#vars") [Var 3]),(5,Comb FuncCall ("EliminateCond","transExpr.transLet.17._#selFP6#exps") [Var 3])] (Comb (FuncPartCall 1) ("State","bindS") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("State","sequenceS") [],Var 5],Comb (FuncPartCall 1) ("EliminateCond","transExpr.transLet.17._#lambda5") [Var 2,Var 4]]))),Func ("EliminateCond","transExpr.transLet.17._#selFP5#vars") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Int") []],TCons ("Prelude","[]") [FuncType (TVar 152) (TCons ("Prelude","(,)") [TCons ("FlatCurry","Expr") [],TVar 152])]]) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("EliminateCond","transExpr.transLet.17._#selFP6#exps") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Int") []],TCons ("Prelude","[]") [FuncType (TVar 152) (TCons ("Prelude","(,)") [TCons ("FlatCurry","Expr") [],TVar 152])]]) (TCons ("Prelude","[]") [FuncType (TVar 152) (TCons ("Prelude","(,)") [TCons ("FlatCurry","Expr") [],TVar 152])])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("EliminateCond","transExpr.transLet.17._#lambda5") 3 Private (FuncType (FuncType (TVar 152) (TCons ("Prelude","(,)") [TCons ("FlatCurry","Expr") [],TVar 152])) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","Expr") []]) (FuncType (TVar 152) (TCons ("Prelude","(,)") [TCons ("FlatCurry","Expr") [],TVar 152]))))) (Rule [1,2,3] (Comb (FuncPartCall 1) ("State","bindS") [Var 1,Comb (FuncPartCall 1) ("EliminateCond","transExpr.transLet.17._#lambda5._#lambda6") [Var 3,Var 2]])),Func ("EliminateCond","transExpr.transLet.17._#lambda5._#lambda6") 3 Private (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","Expr") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (FuncType (TCons ("FlatCurry","Expr") []) (FuncType (TVar 212) (TCons ("Prelude","(,)") [TCons ("FlatCurry","Expr") [],TVar 212]))))) (Rule [1,2,3] (Comb (FuncPartCall 1) ("State","returnS") [Comb ConsCall ("FlatCurry","Let") [Comb FuncCall ("Prelude","zip") [Var 2,Var 1],Var 3]])),Func ("EliminateCond","transExpr.transFree.17") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (FuncType (FuncType (TVar 0) (TCons ("Prelude","(,)") [TCons ("FlatCurry","Expr") [],TVar 0])) (FuncType (TVar 0) (TCons ("Prelude","(,)") [TCons ("FlatCurry","Expr") [],TVar 0])))) (Rule [1,2] (Comb (FuncPartCall 1) ("State","bindS") [Var 2,Comb (FuncPartCall 1) ("EliminateCond","transExpr.transFree.17._#lambda7") [Var 1]])),Func ("EliminateCond","transExpr.transFree.17._#lambda7") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (FuncType (TCons ("FlatCurry","Expr") []) (FuncType (TVar 213) (TCons ("Prelude","(,)") [TCons ("FlatCurry","Expr") [],TVar 213])))) (Rule [1,2] (Comb (FuncPartCall 1) ("State","returnS") [Comb ConsCall ("FlatCurry","Free") [Var 1,Var 2]])),Func ("EliminateCond","transExpr.transOr.17") 2 Private (FuncType (FuncType (TVar 0) (TCons ("Prelude","(,)") [TCons ("FlatCurry","Expr") [],TVar 0])) (FuncType (FuncType (TVar 0) (TCons ("Prelude","(,)") [TCons ("FlatCurry","Expr") [],TVar 0])) (FuncType (TVar 0) (TCons ("Prelude","(,)") [TCons ("FlatCurry","Expr") [],TVar 0])))) (Rule [1,2] (Comb (FuncPartCall 1) ("State","bindS") [Var 1,Comb (FuncPartCall 1) ("EliminateCond","transExpr.transOr.17._#lambda8") [Var 2]])),Func ("EliminateCond","transExpr.transOr.17._#lambda8") 2 Private (FuncType (FuncType (TVar 176) (TCons ("Prelude","(,)") [TCons ("FlatCurry","Expr") [],TVar 176])) (FuncType (TCons ("FlatCurry","Expr") []) (FuncType (TVar 176) (TCons ("Prelude","(,)") [TCons ("FlatCurry","Expr") [],TVar 176])))) (Rule [1,2] (Comb (FuncPartCall 1) ("State","bindS") [Var 1,Comb (FuncPartCall 1) ("EliminateCond","transExpr.transOr.17._#lambda8._#lambda9") [Var 2]])),Func ("EliminateCond","transExpr.transOr.17._#lambda8._#lambda9") 2 Private (FuncType (TCons ("FlatCurry","Expr") []) (FuncType (TCons ("FlatCurry","Expr") []) (FuncType (TVar 214) (TCons ("Prelude","(,)") [TCons ("FlatCurry","Expr") [],TVar 214])))) (Rule [1,2] (Comb (FuncPartCall 1) ("State","returnS") [Comb ConsCall ("FlatCurry","Or") [Var 1,Var 2]])),Func ("EliminateCond","transExpr.transCase.17") 3 Private (FuncType (TCons ("FlatCurry","CaseType") []) (FuncType (FuncType (TVar 0) (TCons ("Prelude","(,)") [TCons ("FlatCurry","Expr") [],TVar 0])) (FuncType (TCons ("Prelude","[]") [FuncType (TVar 0) (TCons ("Prelude","(,)") [TCons ("FlatCurry","BranchExpr") [],TVar 0])]) (FuncType (TVar 0) (TCons ("Prelude","(,)") [TCons ("FlatCurry","Expr") [],TVar 0]))))) (Rule [1,2,3] (Comb (FuncPartCall 1) ("State","bindS") [Var 2,Comb (FuncPartCall 1) ("EliminateCond","transExpr.transCase.17._#lambda10") [Var 3,Var 1]])),Func ("EliminateCond","transExpr.transCase.17._#lambda10") 3 Private (FuncType (TCons ("Prelude","[]") [FuncType (TVar 192) (TCons ("Prelude","(,)") [TCons ("FlatCurry","BranchExpr") [],TVar 192])]) (FuncType (TCons ("FlatCurry","CaseType") []) (FuncType (TCons ("FlatCurry","Expr") []) (FuncType (TVar 192) (TCons ("Prelude","(,)") [TCons ("FlatCurry","Expr") [],TVar 192]))))) (Rule [1,2,3] (Comb (FuncPartCall 1) ("State","bindS") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("State","sequenceS") [],Var 1],Comb (FuncPartCall 1) ("EliminateCond","transExpr.transCase.17._#lambda10._#lambda11") [Var 2,Var 3]])),Func ("EliminateCond","transExpr.transCase.17._#lambda10._#lambda11") 3 Private (FuncType (TCons ("FlatCurry","CaseType") []) (FuncType (TCons ("FlatCurry","Expr") []) (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","BranchExpr") []]) (FuncType (TVar 215) (TCons ("Prelude","(,)") [TCons ("FlatCurry","Expr") [],TVar 215]))))) (Rule [1,2,3] (Comb (FuncPartCall 1) ("State","returnS") [Comb ConsCall ("FlatCurry","Case") [Var 1,Var 2,Var 3]])),Func ("EliminateCond","transExpr.transBranch.17") 2 Private (FuncType (TCons ("FlatCurry","Pattern") []) (FuncType (FuncType (TVar 0) (TCons ("Prelude","(,)") [TCons ("FlatCurry","Expr") [],TVar 0])) (FuncType (TVar 0) (TCons ("Prelude","(,)") [TCons ("FlatCurry","BranchExpr") [],TVar 0])))) (Rule [1,2] (Comb (FuncPartCall 1) ("State","bindS") [Var 2,Comb (FuncPartCall 1) ("EliminateCond","transExpr.transBranch.17._#lambda12") [Var 1]])),Func ("EliminateCond","transExpr.transBranch.17._#lambda12") 2 Private (FuncType (TCons ("FlatCurry","Pattern") []) (FuncType (TCons ("FlatCurry","Expr") []) (FuncType (TVar 216) (TCons ("Prelude","(,)") [TCons ("FlatCurry","BranchExpr") [],TVar 216])))) (Rule [1,2] (Comb (FuncPartCall 1) ("State","returnS") [Comb ConsCall ("FlatCurry","Branch") [Var 1,Var 2]])),Func ("EliminateCond","transExpr.transTyped.17") 2 Private (FuncType (FuncType (TVar 0) (TCons ("Prelude","(,)") [TCons ("FlatCurry","Expr") [],TVar 0])) (FuncType (TCons ("FlatCurry","TypeExpr") []) (FuncType (TVar 0) (TCons ("Prelude","(,)") [TCons ("FlatCurry","Expr") [],TVar 0])))) (Rule [1,2] (Comb (FuncPartCall 1) ("State","bindS") [Var 1,Comb (FuncPartCall 1) ("EliminateCond","transExpr.transTyped.17._#lambda13") [Var 2]])),Func ("EliminateCond","transExpr.transTyped.17._#lambda13") 2 Private (FuncType (TCons ("FlatCurry","TypeExpr") []) (FuncType (TCons ("FlatCurry","Expr") []) (FuncType (TVar 217) (TCons ("Prelude","(,)") [TCons ("FlatCurry","Expr") [],TVar 217])))) (Rule [1,2] (Comb (FuncPartCall 1) ("State","returnS") [Comb ConsCall ("FlatCurry","Typed") [Var 2,Var 1]])),Func ("EliminateCond","makeAuxFuncCall") 3 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("FlatCurry","Expr") []) (FuncType (TCons ("FlatCurry","Expr") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []],TCons ("Prelude","Int") []]) (TCons ("Prelude","(,)") [TCons ("FlatCurry","Expr") [],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []],TCons ("Prelude","Int") []]]))))) (Rule [1,2,3] (Let [(4,Comb FuncCall ("EliminateCond","unboundVars") [Var 3]),(5,Comb FuncCall ("Prelude","+") [Comb FuncCall ("Prelude","length") [Var 4],Lit (Intc  1)])] (Comb (FuncPartCall 1) ("State","bindS") [Comb (FuncPartCall 1) ("State","getS") [],Comb (FuncPartCall 1) ("EliminateCond","makeAuxFuncCall._#lambda14") [Var 4,Var 1,Var 3,Var 5,Var 2]]))),Func ("EliminateCond","makeAuxFuncCall.renameVarFun.52") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (Rule [1,2] (Comb FuncCall ("Prelude","maybe") [Var 2,Comb (FuncPartCall 1) ("Prelude","flip") [Comb (FuncPartCall 2) ("Prelude","+") [],Lit (Intc  1)],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("List","elemIndex") [Var 2],Var 1]])),Func ("EliminateCond","makeAuxFuncCall.mkNewName.52") 2 Private (FuncType (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TVar 1) (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]))) (Rule [1,2] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb ConsCall ("Prelude","(,)") [Var 3,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","show") [Var 2],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude","[]") []],Var 4]]]])])),Func ("EliminateCond","makeAuxFuncCall.newFun.52") 5 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("FlatCurry","Expr") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (TCons ("FlatCurry","FuncDecl") [])))))) (Rule [1,2,3,4,5] (Comb ConsCall ("FlatCurry","Func") [Comb FuncCall ("EliminateCond","makeAuxFuncCall.mkNewName.52") [Var 2,Var 5],Var 4,Comb ConsCall ("FlatCurry","Private") [],Comb ConsCall ("FlatCurry","TVar") [Comb FuncCall ("Prelude","negate") [Lit (Intc  42)]],Comb ConsCall ("FlatCurry","Rule") [Comb FuncCall ("Prelude","enumFromTo") [Lit (Intc  1),Var 4],Comb ConsCall ("FlatCurry","Case") [Comb ConsCall ("FlatCurry","Flex") [],Comb ConsCall ("FlatCurry","Var") [Var 4],Comb ConsCall ("Prelude",":") [Comb ConsCall ("FlatCurry","Branch") [Comb ConsCall ("FlatCurry","Pattern") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb ConsCall ("Prelude",":") [Lit (Charc  'S'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude","[]") []]]]]]]]],Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FlatCurryGoodies","rnmAllVars") [Comb (FuncPartCall 1) ("EliminateCond","makeAuxFuncCall.renameVarFun.52") [Var 1]],Var 3]],Comb ConsCall ("Prelude","[]") []]]]])),Func ("EliminateCond","makeAuxFuncCall._#lambda14") 6 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("FlatCurry","Expr") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("FlatCurry","Expr") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []],TCons ("Prelude","Int") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []],TCons ("Prelude","Int") []]) (TCons ("Prelude","(,)") [TCons ("FlatCurry","Expr") [],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []],TCons ("Prelude","Int") []]])))))))) (Rule [1,2,3,4,5,6] (Case  Flex (Var 6) [Branch (Pattern ("Prelude","(,)") [7,8]) (Comb (FuncPartCall 1) ("State","bindS") [Comb (FuncPartCall 1) ("State","setS") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Comb FuncCall ("EliminateCond","makeAuxFuncCall.newFun.52") [Var 1,Var 2,Var 3,Var 4,Var 8],Var 7],Comb FuncCall ("Prelude","+") [Var 8,Lit (Intc  1)]]],Comb (FuncPartCall 1) ("EliminateCond","makeAuxFuncCall._#lambda14._#lambda15") [Var 1,Var 8,Var 2,Var 5]])])),Func ("EliminateCond","makeAuxFuncCall._#lambda14._#lambda15") 5 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("FlatCurry","Expr") []) (FuncType (TCons ("Prelude","()") []) (FuncType (TVar 218) (TCons ("Prelude","(,)") [TCons ("FlatCurry","Expr") [],TVar 218]))))))) (Rule [1,2,3,4,5] (Comb (FuncPartCall 1) ("State","returnS") [Comb ConsCall ("FlatCurry","Comb") [Comb ConsCall ("FlatCurry","FuncCall") [],Comb FuncCall ("EliminateCond","makeAuxFuncCall.mkNewName.52") [Var 3,Var 2],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","map") [Comb (ConsPartCall 1) ("FlatCurry","Var") [],Var 1],Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude","[]") []]]]])),Func ("EliminateCond","unboundVars") 1 Private (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []])) (Rule [1] (Comb FuncCall ("List","nub") [Comb FuncCall ("FlatCurryGoodies","trExpr") [Comb (FuncPartCall 1) ("Prelude","flip") [Comb (ConsPartCall 2) ("Prelude",":") [],Comb ConsCall ("Prelude","[]") []],Comb (FuncPartCall 1) ("Prelude","const") [Comb ConsCall ("Prelude","[]") []],Comb (FuncPartCall 2) ("EliminateCond","unboundVars.comb.70") [],Comb (FuncPartCall 2) ("EliminateCond","unboundVars.leT.70") [],Comb (FuncPartCall 1) ("EliminateCond","unboundVars.freE.70") [],Comb (FuncPartCall 2) ("Prelude","++") [],Comb (FuncPartCall 3) ("EliminateCond","unboundVars.casE.70") [],Comb (FuncPartCall 2) ("EliminateCond","unboundVars.branch.70") [],Comb (FuncPartCall 2) ("EliminateCond","unboundVars.typed.70") [],Var 1]])),Func ("EliminateCond","unboundVars.comb.70") 2 Private (FuncType (TVar 0) (FuncType (TVar 1) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 2]]) (TCons ("Prelude","[]") [TVar 2])))) (Rule [1,2] (Comb (FuncPartCall 1) ("Prelude","concat") [])),Func ("EliminateCond","unboundVars.leT.70") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TVar 0]]]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0]))) (Rule [1,2] (Let [(3,Comb FuncCall ("Prelude","unzip") [Var 1]),(4,Comb FuncCall ("EliminateCond","unboundVars.leT.70._#selFP8#bound") [Var 3]),(5,Comb FuncCall ("EliminateCond","unboundVars.leT.70._#selFP9#varsRHS") [Var 3])] (Comb FuncCall ("Prelude","filter") [Comb (FuncPartCall 1) ("Prelude","flip") [Comb (FuncPartCall 1) ("Prelude","notElem") [],Var 4],Comb FuncCall ("Prelude","concat") [Comb ConsCall ("Prelude",":") [Var 2,Var 5]]]))),Func ("EliminateCond","unboundVars.leT.70._#selFP8#bound") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 15],TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 15]]]) (TCons ("Prelude","[]") [TVar 15])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("EliminateCond","unboundVars.leT.70._#selFP9#varsRHS") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 15],TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 15]]]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 15]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("EliminateCond","unboundVars.freE.70") 1 Private (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0]))) (Rule [1] (Comb (FuncPartCall 1) ("Prelude","filter") [Comb (FuncPartCall 1) ("Prelude","flip") [Comb (FuncPartCall 1) ("Prelude","notElem") [],Var 1]])),Func ("EliminateCond","unboundVars.casE.70") 3 Private (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TVar 1]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 1]]) (TCons ("Prelude","[]") [TVar 1])))) (Rule [1,2,3] (Comb FuncCall ("Prelude","concat") [Comb ConsCall ("Prelude",":") [Var 2,Var 3]])),Func ("EliminateCond","unboundVars.branch.70") 2 Private (FuncType (TCons ("FlatCurry","Pattern") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]))) (Rule [1,2] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","Pattern") [3,4]) (Comb FuncCall ("Prelude","filter") [Comb (FuncPartCall 1) ("Prelude","flip") [Comb (FuncPartCall 1) ("Prelude","notElem") [],Var 4],Var 2])])),Func ("EliminateCond","unboundVars.typed.70") 2 Private (FuncType (TVar 0) (FuncType (TVar 1) (TVar 0))) (Rule [1,2] (Var 1))] []