Prog "AbstractCurryGoodies" ["AbstractCurry","List","Prelude","Utils"] [] [Func ("AbstractCurryGoodies","isPolyType") 1 Public (FuncType (TCons ("AbstractCurry","CTypeExpr") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("AbstractCurry","CTVar") [2]) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("AbstractCurry","CFuncType") [3,4]) (Comb FuncCall ("Prelude","||") [Comb FuncCall ("AbstractCurryGoodies","isPolyType") [Var 3],Comb FuncCall ("AbstractCurryGoodies","isPolyType") [Var 4]]),Branch (Pattern ("AbstractCurry","CTCons") [5,6]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","any") [Comb (FuncPartCall 1) ("AbstractCurryGoodies","isPolyType") []],Var 6]),Branch (Pattern ("AbstractCurry","CRecordType") [7,8]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","any") [Comb (FuncPartCall 1) ("AbstractCurryGoodies","isPolyType") []],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Prelude","snd") [],Var 7]])])),Func ("AbstractCurryGoodies","isFunctionalType") 1 Public (FuncType (TCons ("AbstractCurry","CTypeExpr") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Case  Rigid (Var 1) [Branch (Pattern ("AbstractCurry","CFuncType") [2,3]) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("AbstractCurry","CTVar") [4]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractCurry","CTCons") [5,6]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractCurry","CRecordType") [7,8]) (Comb ConsCall ("Prelude","False") [])])),Func ("AbstractCurryGoodies","isIOType") 1 Public (FuncType (TCons ("AbstractCurry","CTypeExpr") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Case  Rigid (Var 1) [Branch (Pattern ("AbstractCurry","CTCons") [2,3]) (Comb FuncCall ("Prelude","==") [Var 2,Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("AbstractCurryGoodies","prelude") [],Comb ConsCall ("Prelude",":") [Lit (Charc  'I'),Comb ConsCall ("Prelude",":") [Lit (Charc  'O'),Comb ConsCall ("Prelude","[]") []]]]]),Branch (Pattern ("AbstractCurry","CTVar") [4]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractCurry","CFuncType") [5,6]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractCurry","CRecordType") [7,8]) (Comb ConsCall ("Prelude","False") [])])),Func ("AbstractCurryGoodies","isIOReturnType") 1 Public (FuncType (TCons ("AbstractCurry","CTypeExpr") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("AbstractCurry","CTVar") [2]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractCurry","CFuncType") [3,4]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractCurry","CTCons") [5,6]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","==") [Var 5,Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("AbstractCurryGoodies","prelude") [],Comb ConsCall ("Prelude",":") [Lit (Charc  'I'),Comb ConsCall ("Prelude",":") [Lit (Charc  'O'),Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","/=") [Comb FuncCall ("Prelude","head") [Var 6],Comb ConsCall ("AbstractCurry","CTCons") [Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("AbstractCurryGoodies","prelude") [],Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude","not") [Comb FuncCall ("AbstractCurryGoodies","isFunctionalType") [Comb FuncCall ("Prelude","head") [Var 6]]]]]),Branch (Pattern ("AbstractCurry","CRecordType") [7,8]) (Comb ConsCall ("Prelude","False") [])])),Func ("AbstractCurryGoodies","modsOfType") 1 Public (FuncType (TCons ("AbstractCurry","CTypeExpr") []) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("AbstractCurry","CTVar") [2]) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("AbstractCurry","CFuncType") [3,4]) (Comb FuncCall ("List","union") [Comb FuncCall ("AbstractCurryGoodies","modsOfType") [Var 3],Comb FuncCall ("AbstractCurryGoodies","modsOfType") [Var 4]]),Branch (Pattern ("AbstractCurry","CTCons") [5,6]) (Case  Flex (Var 5) [Branch (Pattern ("Prelude","(,)") [7,8]) (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Prelude","foldr") [Comb (FuncPartCall 2) ("List","union") [],Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("AbstractCurryGoodies","modsOfType") [],Var 6]])]),Branch (Pattern ("AbstractCurry","CRecordType") [9,10]) (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Prelude","foldr") [Comb (FuncPartCall 2) ("List","union") [],Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","map") [Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("AbstractCurryGoodies","modsOfType") [],Comb (FuncPartCall 1) ("Prelude","snd") []],Var 9]])])),Func ("AbstractCurryGoodies","showMonoTypeExpr") 2 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("AbstractCurry","CTypeExpr") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1,2] (Comb FuncCall ("AbstractCurryGoodies","showMonoTypeExpr'") [Var 1,Comb ConsCall ("Prelude","False") [],Var 2])),Func ("AbstractCurryGoodies","showMonoTypeExpr'") 3 Private (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("AbstractCurry","CTypeExpr") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1,2,3] (Case  Flex (Var 3) [Branch (Pattern ("AbstractCurry","CTVar") [4]) (Case  Flex (Var 4) [Branch (Pattern ("Prelude","(,)") [5,6]) (Case  Rigid (Var 1) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude","[]") []]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("AbstractCurryGoodies","showIdentifier") [],Var 6])])]),Branch (Pattern ("AbstractCurry","CFuncType") [7,8]) (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("AbstractCurryGoodies","parens") [Var 2],Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractCurryGoodies","showMonoTypeExpr'") [Var 1,Comb FuncCall ("AbstractCurryGoodies","isFunctionalType") [Var 7],Var 7],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  '>'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("AbstractCurryGoodies","showMonoTypeExpr'") [Var 1,Comb ConsCall ("Prelude","False") [],Var 8]]]]),Branch (Pattern ("AbstractCurry","CTCons") [9,10]) (Case  Flex (Var 9) [Branch (Pattern ("Prelude","(,)") [11,12]) (Case  Rigid (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","==") [Var 11,Comb FuncCall ("AbstractCurryGoodies","prelude") []],Comb FuncCall ("Prelude","==") [Var 12,Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("AbstractCurryGoodies","parens") [Comb FuncCall ("Prelude","&&") [Var 2,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Utils","notNull") [],Var 10]],Comb FuncCall ("AbstractCurryGoodies","showTypeCons") [Var 1,Var 11,Var 12,Var 10]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])]),Branch (Pattern ("AbstractCurry","CRecordType") [13,14]) (Comb ConsCall ("Prelude",":") [Lit (Charc  '{'),Comb FuncCall ("Prelude","++") [Comb FuncCall ("List","intercalate") [Comb ConsCall ("Prelude",":") [Lit (Charc  ','),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("AbstractCurryGoodies","showField") [Var 1,Var 2],Var 13]],Comb ConsCall ("Prelude",":") [Lit (Charc  '}'),Comb ConsCall ("Prelude","[]") []]]])])),Func ("AbstractCurryGoodies","showTypeCons") 4 Private (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("AbstractCurry","CTypeExpr") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (Rule [1,2,3,4] (Case  Flex (Var 4) [Branch (Pattern ("Prelude","[]") []) (Var 3),Branch (Pattern ("Prelude",":") [5,6]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 2,Comb FuncCall ("AbstractCurryGoodies","prelude") []]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("AbstractCurryGoodies","showPreludeTypeCons") [Var 1,Var 3,Var 4]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","++") [Var 3,Comb FuncCall ("AbstractCurryGoodies","prefixMap") [Comb (FuncPartCall 1) ("AbstractCurryGoodies","showMonoTypeExpr'") [Var 1,Comb ConsCall ("Prelude","True") []],Var 4,Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])),Func ("AbstractCurryGoodies","showPreludeTypeCons") 3 Private (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("AbstractCurry","CTypeExpr") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1,2,3] (Case  Rigid (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","==") [Var 2,Comb ConsCall ("Prelude",":") [Lit (Charc  '['),Comb ConsCall ("Prelude",":") [Lit (Charc  ']'),Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("Prelude","==") [Comb FuncCall ("Prelude","head") [Var 3],Comb ConsCall ("AbstractCurry","CTCons") [Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("AbstractCurryGoodies","prelude") [],Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude","[]") []]]]]],Comb ConsCall ("Prelude","[]") []]]]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  'S'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude","[]") []]]]]]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 2,Comb ConsCall ("Prelude",":") [Lit (Charc  '['),Comb ConsCall ("Prelude",":") [Lit (Charc  ']'),Comb ConsCall ("Prelude","[]") []]]]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '['),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractCurryGoodies","showMonoTypeExpr'") [Var 1,Comb ConsCall ("Prelude","False") [],Comb FuncCall ("Prelude","head") [Var 3]],Comb ConsCall ("Prelude",":") [Lit (Charc  ']'),Comb ConsCall ("Prelude","[]") []]]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("AbstractCurryGoodies","isTuple") [Var 2]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractCurryGoodies","combineMap") [Comb (FuncPartCall 1) ("AbstractCurryGoodies","showMonoTypeExpr'") [Var 1,Comb ConsCall ("Prelude","False") []],Var 3,Comb ConsCall ("Prelude",":") [Lit (Charc  ','),Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude","[]") []]]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","++") [Var 2,Comb FuncCall ("AbstractCurryGoodies","prefixMap") [Comb (FuncPartCall 1) ("AbstractCurryGoodies","showMonoTypeExpr'") [Var 1,Comb ConsCall ("Prelude","True") []],Var 3,Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])])),Func ("AbstractCurryGoodies","showField") 3 Private (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("AbstractCurry","CTypeExpr") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1,2,3] (Case  Flex (Var 3) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb FuncCall ("Prelude","++") [Var 4,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("AbstractCurryGoodies","showMonoTypeExpr'") [Var 1,Var 2,Var 5]]])])),Func ("AbstractCurryGoodies","showIdentifier") 0 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Comb (FuncPartCall 1) ("Prelude","filter") [Comb (FuncPartCall 1) ("Prelude","flip") [Comb (FuncPartCall 1) ("Prelude","notElem") [],Comb ConsCall ("Prelude",":") [Lit (Charc  '<'),Comb ConsCall ("Prelude",":") [Lit (Charc  '>'),Comb ConsCall ("Prelude","[]") []]]]])),Func ("AbstractCurryGoodies","prelude") 0 Private (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (Rule [] (Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]])),Func ("AbstractCurryGoodies","parens") 2 Private (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1,2] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb FuncCall ("Prelude","++") [Var 2,Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude","[]") []]]]),Branch (Pattern ("Prelude","False") []) (Var 2)])),Func ("AbstractCurryGoodies","prefixMap") 3 Private (FuncType (FuncType (TVar 0) (TCons ("Prelude","[]") [TVar 1])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 1]) (TCons ("Prelude","[]") [TVar 1])))) (Rule [1,2,3] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","concatMap") [Comb (FuncPartCall 1) ("Prelude","++") [Var 3]],Comb FuncCall ("Prelude","map") [Var 1,Var 2]])),Func ("AbstractCurryGoodies","combineMap") 3 Private (FuncType (FuncType (TVar 0) (TCons ("Prelude","[]") [TVar 1])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 1]) (TCons ("Prelude","[]") [TVar 1])))) (Rule [1,2,3] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [4,5]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Var 1,Var 4],Comb FuncCall ("AbstractCurryGoodies","prefixMap") [Var 1,Var 5,Var 3]])])),Func ("AbstractCurryGoodies","isTuple") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","Bool") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude",":") [2,3]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","==") [Var 2,Lit (Charc  '(')],Comb FuncCall ("AbstractCurryGoodies","isTuple.p1_isTuple.97") [Var 3]])])),Func ("AbstractCurryGoodies","isTuple.p1_isTuple.97") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","Bool") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","==") [Var 2,Lit (Charc  ')')]),Branch (Pattern ("Prelude",":") [4,5]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","==") [Var 2,Lit (Charc  ',')],Comb FuncCall ("AbstractCurryGoodies","isTuple.p1_isTuple.97") [Comb ConsCall ("Prelude",":") [Var 4,Var 5]]])])]))] []