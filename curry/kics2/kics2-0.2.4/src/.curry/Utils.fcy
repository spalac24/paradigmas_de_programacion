Prog "Utils" ["Char","Prelude"] [] [Func ("Utils","foldIO") 3 Public (FuncType (FuncType (TVar 0) (FuncType (TVar 1) (TCons ("Prelude","IO") [TVar 0]))) (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TVar 1]) (TCons ("Prelude","IO") [TVar 0])))) (Rule [1,2,3] (Case  Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","return") [Var 2]),Branch (Pattern ("Prelude",":") [4,5]) (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 1,Var 2],Var 4],Comb (FuncPartCall 1) ("Utils","foldIO._#lambda1") [Var 1,Var 5]])])),Func ("Utils","foldIO._#lambda1") 3 Private (FuncType (FuncType (TVar 18) (FuncType (TVar 10) (TCons ("Prelude","IO") [TVar 18]))) (FuncType (TCons ("Prelude","[]") [TVar 10]) (FuncType (TVar 18) (TCons ("Prelude","IO") [TVar 18])))) (Rule [1,2,3] (Comb FuncCall ("Utils","foldIO") [Var 1,Var 3,Var 2])),Func ("Utils","liftIO") 2 Public (FuncType (FuncType (TVar 0) (TVar 1)) (FuncType (TCons ("Prelude","IO") [TVar 0]) (TCons ("Prelude","IO") [TVar 1]))) (Rule [1,2] (Comb FuncCall ("Prelude",">>=") [Var 2,Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","return") [],Var 1]])),Func ("Utils","unless") 2 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","IO") [TCons ("Prelude","()") []]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []]))) (Rule [1,2] (Case  Rigid (Var 1) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","done") []),Branch (Pattern ("Prelude","False") []) (Var 2)])),Func ("Utils","notNull") 0 Public (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","Bool") [])) (Rule [] (Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","not") [],Comb (FuncPartCall 1) ("Prelude","null") []])),Func ("Utils","when") 2 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","IO") [TCons ("Prelude","()") []]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []]))) (Rule [1,2] (Case  Rigid (Var 1) [Branch (Pattern ("Prelude","True") []) (Var 2),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","done") [])])),Func ("Utils","mapFst") 2 Public (FuncType (FuncType (TVar 0) (TVar 1)) (FuncType (TCons ("Prelude","(,)") [TVar 0,TVar 2]) (TCons ("Prelude","(,)") [TVar 1,TVar 2]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Prelude","apply") [Var 1,Var 3],Var 4])])),Func ("Utils","mapSnd") 2 Public (FuncType (FuncType (TVar 0) (TVar 1)) (FuncType (TCons ("Prelude","(,)") [TVar 2,TVar 0]) (TCons ("Prelude","(,)") [TVar 2,TVar 1]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb ConsCall ("Prelude","(,)") [Var 3,Comb FuncCall ("Prelude","apply") [Var 1,Var 4]])])),Func ("Utils","strip") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Comb FuncCall ("Prelude",".") [Comb FuncCall ("Prelude","reverse") [],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","dropWhile") [Comb (FuncPartCall 1) ("Char","isSpace") []],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Prelude","reverse") [],Comb (FuncPartCall 1) ("Prelude","dropWhile") [Comb (FuncPartCall 1) ("Char","isSpace") []]]]]))] []