Prog "TransFunctions" ["AbstractHaskell","AbstractHaskellPrinter","Analysis","Base","CompilerOpts","FiniteMap","FlatCurry","FlatCurryGoodies","List","Maybe","Message","Names","Prelude","Splits"] [Type ("TransFunctions","_#Rec:State") Public [] [Cons ("TransFunctions","_#Lab:typeMap") 1 Public [TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]],Cons ("TransFunctions","_#Lab:ndResult") 1 Public [TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Base","NDClass") []]],Cons ("TransFunctions","_#Lab:hoResultFun") 1 Public [TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Base","HOClass") []]],Cons ("TransFunctions","_#Lab:hoResultCons") 1 Public [TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Base","HOClass") []]],Cons ("TransFunctions","_#Lab:nextID") 1 Public [TCons ("Prelude","Int") []],Cons ("TransFunctions","_#Lab:detMode") 1 Public [TCons ("Prelude","Bool") []],Cons ("TransFunctions","_#Lab:compOptions") 1 Public [TCons ("CompilerOpts","Options") []]],TypeSyn ("TransFunctions","AnalysisResult") Public [] (TCons ("Prelude","(,,,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]],TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Base","NDClass") []],TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Base","HOClass") []],TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Base","HOClass") []]]),TypeSyn ("TransFunctions","TypeMap") Public [] (TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]),TypeSyn ("TransFunctions","M") Public [0] (TCons ("TransFunctions","Mo") [TCons ("TransFunctions","State") [],TVar 0]),Type ("TransFunctions","Mo") Public [0,1] [Cons ("TransFunctions","M") 1 Public [FuncType (TVar 0) (TCons ("Prelude","IO") [TCons ("Prelude","(,)") [TVar 1,TVar 0]])]],Type ("TransFunctions","State") Public [] [Cons ("TransFunctions","State") 7 Private [TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]],TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Base","NDClass") []],TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Base","HOClass") []],TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Base","HOClass") []],TCons ("Prelude","Int") [],TCons ("Prelude","Bool") [],TCons ("CompilerOpts","Options") []]]] [Func ("TransFunctions","_#selR@State.typeMap") 1 Public (FuncType (TCons ("TransFunctions","State") []) (TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("TransFunctions","State") [2,3,4,5,6,7,8]) (Var 2)])),Func ("TransFunctions","_#updR@State.typeMap") 2 Public (FuncType (TCons ("TransFunctions","State") []) (FuncType (TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("TransFunctions","State") []))) (Rule [1,2] (Case  Flex (Var 1) [Branch (Pattern ("TransFunctions","State") [3,4,5,6,7,8,9]) (Comb ConsCall ("TransFunctions","State") [Var 2,Var 4,Var 5,Var 6,Var 7,Var 8,Var 9])])),Func ("TransFunctions","_#selR@State.ndResult") 1 Public (FuncType (TCons ("TransFunctions","State") []) (TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Base","NDClass") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("TransFunctions","State") [2,3,4,5,6,7,8]) (Var 3)])),Func ("TransFunctions","_#updR@State.ndResult") 2 Public (FuncType (TCons ("TransFunctions","State") []) (FuncType (TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Base","NDClass") []]) (TCons ("TransFunctions","State") []))) (Rule [1,2] (Case  Flex (Var 1) [Branch (Pattern ("TransFunctions","State") [3,4,5,6,7,8,9]) (Comb ConsCall ("TransFunctions","State") [Var 3,Var 2,Var 5,Var 6,Var 7,Var 8,Var 9])])),Func ("TransFunctions","_#selR@State.hoResultFun") 1 Public (FuncType (TCons ("TransFunctions","State") []) (TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Base","HOClass") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("TransFunctions","State") [2,3,4,5,6,7,8]) (Var 4)])),Func ("TransFunctions","_#updR@State.hoResultFun") 2 Public (FuncType (TCons ("TransFunctions","State") []) (FuncType (TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Base","HOClass") []]) (TCons ("TransFunctions","State") []))) (Rule [1,2] (Case  Flex (Var 1) [Branch (Pattern ("TransFunctions","State") [3,4,5,6,7,8,9]) (Comb ConsCall ("TransFunctions","State") [Var 3,Var 4,Var 2,Var 6,Var 7,Var 8,Var 9])])),Func ("TransFunctions","_#selR@State.hoResultCons") 1 Public (FuncType (TCons ("TransFunctions","State") []) (TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Base","HOClass") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("TransFunctions","State") [2,3,4,5,6,7,8]) (Var 5)])),Func ("TransFunctions","_#updR@State.hoResultCons") 2 Public (FuncType (TCons ("TransFunctions","State") []) (FuncType (TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Base","HOClass") []]) (TCons ("TransFunctions","State") []))) (Rule [1,2] (Case  Flex (Var 1) [Branch (Pattern ("TransFunctions","State") [3,4,5,6,7,8,9]) (Comb ConsCall ("TransFunctions","State") [Var 3,Var 4,Var 5,Var 2,Var 7,Var 8,Var 9])])),Func ("TransFunctions","_#selR@State.nextID") 1 Public (FuncType (TCons ("TransFunctions","State") []) (TCons ("Prelude","Int") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("TransFunctions","State") [2,3,4,5,6,7,8]) (Var 6)])),Func ("TransFunctions","_#updR@State.nextID") 2 Public (FuncType (TCons ("TransFunctions","State") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("TransFunctions","State") []))) (Rule [1,2] (Case  Flex (Var 1) [Branch (Pattern ("TransFunctions","State") [3,4,5,6,7,8,9]) (Comb ConsCall ("TransFunctions","State") [Var 3,Var 4,Var 5,Var 6,Var 2,Var 8,Var 9])])),Func ("TransFunctions","_#selR@State.detMode") 1 Public (FuncType (TCons ("TransFunctions","State") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("TransFunctions","State") [2,3,4,5,6,7,8]) (Var 7)])),Func ("TransFunctions","_#updR@State.detMode") 2 Public (FuncType (TCons ("TransFunctions","State") []) (FuncType (TCons ("Prelude","Bool") []) (TCons ("TransFunctions","State") []))) (Rule [1,2] (Case  Flex (Var 1) [Branch (Pattern ("TransFunctions","State") [3,4,5,6,7,8,9]) (Comb ConsCall ("TransFunctions","State") [Var 3,Var 4,Var 5,Var 6,Var 7,Var 2,Var 9])])),Func ("TransFunctions","_#selR@State.compOptions") 1 Public (FuncType (TCons ("TransFunctions","State") []) (TCons ("CompilerOpts","Options") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("TransFunctions","State") [2,3,4,5,6,7,8]) (Var 8)])),Func ("TransFunctions","_#updR@State.compOptions") 2 Public (FuncType (TCons ("TransFunctions","State") []) (FuncType (TCons ("CompilerOpts","Options") []) (TCons ("TransFunctions","State") []))) (Rule [1,2] (Case  Flex (Var 1) [Branch (Pattern ("TransFunctions","State") [3,4,5,6,7,8,9]) (Comb ConsCall ("TransFunctions","State") [Var 3,Var 4,Var 5,Var 6,Var 7,Var 8,Var 2])])),Func ("TransFunctions","unM") 1 Public (FuncType (TCons ("TransFunctions","Mo") [TVar 0,TVar 1]) (FuncType (TVar 0) (TCons ("Prelude","IO") [TCons ("Prelude","(,)") [TVar 1,TVar 0]]))) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("TransFunctions","M") [2]) (Var 2)])),Func ("TransFunctions","returnM") 1 Public (FuncType (TVar 0) (TCons ("TransFunctions","Mo") [TVar 1,TVar 0])) (Rule [1] (Comb FuncCall ("Prelude","$") [Comb (ConsPartCall 1) ("TransFunctions","M") [],Comb (FuncPartCall 1) ("TransFunctions","returnM._#lambda1") [Var 1]])),Func ("TransFunctions","returnM._#lambda1") 2 Private (FuncType (TVar 8) (FuncType (TVar 13) (TCons ("Prelude","IO") [TCons ("Prelude","(,)") [TVar 8,TVar 13]]))) (Rule [1,2] (Comb FuncCall ("Prelude","return") [Comb ConsCall ("Prelude","(,)") [Var 1,Var 2]])),Func ("TransFunctions","bindM") 2 Public (FuncType (TCons ("TransFunctions","Mo") [TVar 0,TVar 1]) (FuncType (FuncType (TVar 1) (TCons ("TransFunctions","Mo") [TVar 0,TVar 2])) (TCons ("TransFunctions","Mo") [TVar 0,TVar 2]))) (Rule [1,2] (Comb FuncCall ("Prelude","$") [Comb (ConsPartCall 1) ("TransFunctions","M") [],Comb (FuncPartCall 1) ("TransFunctions","bindM._#lambda2") [Var 1,Var 2]])),Func ("TransFunctions","bindM._#lambda2") 3 Private (FuncType (TCons ("TransFunctions","Mo") [TVar 24,TVar 28]) (FuncType (FuncType (TVar 28) (TCons ("TransFunctions","Mo") [TVar 24,TVar 31])) (FuncType (TVar 24) (TCons ("Prelude","IO") [TCons ("Prelude","(,)") [TVar 31,TVar 24]])))) (Rule [1,2,3] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("TransFunctions","unM") [Var 1],Var 3],Comb (FuncPartCall 1) ("TransFunctions","bindM._#lambda2._#lambda3") [Var 2]])),Func ("TransFunctions","bindM._#lambda2._#lambda3") 2 Private (FuncType (FuncType (TVar 28) (TCons ("TransFunctions","Mo") [TVar 24,TVar 31])) (FuncType (TCons ("Prelude","(,)") [TVar 28,TVar 24]) (TCons ("Prelude","IO") [TCons ("Prelude","(,)") [TVar 31,TVar 24]]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("TransFunctions","unM") [Comb FuncCall ("Prelude","apply") [Var 1,Var 3]],Var 4])])),Func ("TransFunctions","bindM_") 2 Public (FuncType (TCons ("TransFunctions","Mo") [TVar 0,TVar 1]) (FuncType (TCons ("TransFunctions","Mo") [TVar 0,TVar 2]) (TCons ("TransFunctions","Mo") [TVar 0,TVar 2]))) (Rule [1,2] (Comb FuncCall ("TransFunctions","bindM") [Var 1,Comb (FuncPartCall 1) ("TransFunctions","bindM_._#lambda4") [Var 2]])),Func ("TransFunctions","bindM_._#lambda4") 2 Private (FuncType (TCons ("TransFunctions","Mo") [TVar 39,TVar 41]) (FuncType (TVar 42) (TCons ("TransFunctions","Mo") [TVar 39,TVar 41]))) (Rule [1,2] (Var 1)),Func ("TransFunctions","getState") 0 Public (TCons ("TransFunctions","Mo") [TVar 0,TVar 0]) (Rule [] (Comb FuncCall ("Prelude","$") [Comb (ConsPartCall 1) ("TransFunctions","M") [],Comb (FuncPartCall 1) ("TransFunctions","getState._#lambda5") []])),Func ("TransFunctions","getState._#lambda5") 1 Private (FuncType (TVar 48) (TCons ("Prelude","IO") [TCons ("Prelude","(,)") [TVar 48,TVar 48]])) (Rule [1] (Comb FuncCall ("Prelude","return") [Comb ConsCall ("Prelude","(,)") [Var 1,Var 1]])),Func ("TransFunctions","putState") 1 Public (FuncType (TVar 0) (TCons ("TransFunctions","Mo") [TVar 0,TCons ("Prelude","()") []])) (Rule [1] (Comb FuncCall ("Prelude","$") [Comb (ConsPartCall 1) ("TransFunctions","M") [],Comb (FuncPartCall 1) ("TransFunctions","putState._#lambda6") [Var 1]])),Func ("TransFunctions","putState._#lambda6") 2 Private (FuncType (TVar 56) (FuncType (TVar 56) (TCons ("Prelude","IO") [TCons ("Prelude","(,)") [TCons ("Prelude","()") [],TVar 56]]))) (Rule [1,2] (Comb FuncCall ("Prelude","return") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","()") [],Var 1]])),Func ("TransFunctions","updState") 1 Public (FuncType (FuncType (TVar 0) (TVar 0)) (TCons ("TransFunctions","Mo") [TVar 0,TCons ("Prelude","()") []])) (Rule [1] (Comb FuncCall ("TransFunctions","bindM") [Comb FuncCall ("TransFunctions","getState") [],Comb (FuncPartCall 1) ("TransFunctions","updState._#lambda7") [Var 1]])),Func ("TransFunctions","updState._#lambda7") 2 Private (FuncType (FuncType (TVar 64) (TVar 64)) (FuncType (TVar 64) (TCons ("TransFunctions","Mo") [TVar 64,TCons ("Prelude","()") []]))) (Rule [1,2] (Comb FuncCall ("TransFunctions","putState") [Comb FuncCall ("Prelude","apply") [Var 1,Var 2]])),Func ("TransFunctions","liftIO") 1 Public (FuncType (TCons ("Prelude","IO") [TVar 0]) (TCons ("TransFunctions","Mo") [TVar 1,TVar 0])) (Rule [1] (Comb FuncCall ("Prelude","$") [Comb (ConsPartCall 1) ("TransFunctions","M") [],Comb (FuncPartCall 1) ("TransFunctions","liftIO._#lambda8") [Var 1]])),Func ("TransFunctions","liftIO._#lambda8") 2 Private (FuncType (TCons ("Prelude","IO") [TVar 76]) (FuncType (TVar 75) (TCons ("Prelude","IO") [TCons ("Prelude","(,)") [TVar 76,TVar 75]]))) (Rule [1,2] (Comb FuncCall ("Prelude",">>=") [Var 1,Comb (FuncPartCall 1) ("TransFunctions","liftIO._#lambda8._#lambda9") [Var 2]])),Func ("TransFunctions","liftIO._#lambda8._#lambda9") 2 Private (FuncType (TVar 75) (FuncType (TVar 76) (TCons ("Prelude","IO") [TCons ("Prelude","(,)") [TVar 76,TVar 75]]))) (Rule [1,2] (Comb FuncCall ("Prelude","return") [Comb ConsCall ("Prelude","(,)") [Var 2,Var 1]])),Func ("TransFunctions","mapM") 2 Public (FuncType (FuncType (TVar 0) (TCons ("TransFunctions","Mo") [TVar 1,TVar 2])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("TransFunctions","Mo") [TVar 1,TCons ("Prelude","[]") [TVar 2]]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("TransFunctions","returnM") [Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude",":") [3,4]) (Comb FuncCall ("TransFunctions","bindM") [Comb FuncCall ("Prelude","apply") [Var 1,Var 3],Comb (FuncPartCall 1) ("TransFunctions","mapM._#lambda10") [Var 1,Var 4]])])),Func ("TransFunctions","mapM._#lambda10") 3 Private (FuncType (FuncType (TVar 89) (TCons ("TransFunctions","Mo") [TVar 105,TVar 96])) (FuncType (TCons ("Prelude","[]") [TVar 89]) (FuncType (TVar 96) (TCons ("TransFunctions","Mo") [TVar 105,TCons ("Prelude","[]") [TVar 96]])))) (Rule [1,2,3] (Comb FuncCall ("TransFunctions","bindM") [Comb FuncCall ("TransFunctions","mapM") [Var 1,Var 2],Comb (FuncPartCall 1) ("TransFunctions","mapM._#lambda10._#lambda11") [Var 3]])),Func ("TransFunctions","mapM._#lambda10._#lambda11") 2 Private (FuncType (TVar 96) (FuncType (TCons ("Prelude","[]") [TVar 96]) (TCons ("TransFunctions","Mo") [TVar 624,TCons ("Prelude","[]") [TVar 96]]))) (Rule [1,2] (Comb FuncCall ("TransFunctions","returnM") [Comb ConsCall ("Prelude",":") [Var 1,Var 2]])),Func ("TransFunctions","defaultState") 0 Public (TCons ("TransFunctions","State") []) (Rule [] (Comb ConsCall ("TransFunctions","State") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FiniteMap","listToFM") [Comb (FuncPartCall 2) ("Prelude","<") []],Comb FuncCall ("TransFunctions","primTypes") []],Comb FuncCall ("Analysis","initNDResult") [],Comb FuncCall ("Analysis","initHOResult") [],Comb FuncCall ("FiniteMap","emptyFM") [Comb (FuncPartCall 2) ("Prelude","<") []],Comb FuncCall ("TransFunctions","idVar") [],Comb ConsCall ("Prelude","False") [],Comb FuncCall ("CompilerOpts","defaultOptions") []])),Func ("TransFunctions","addTypeMap") 1 Public (FuncType (TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("TransFunctions","Mo") [TCons ("TransFunctions","State") [],TCons ("Prelude","()") []])) (Rule [1] (Comb FuncCall ("TransFunctions","updState") [Comb (FuncPartCall 1) ("TransFunctions","addTypeMap._#lambda12") [Var 1]])),Func ("TransFunctions","addTypeMap._#lambda12") 2 Private (FuncType (TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (FuncType (TCons ("TransFunctions","State") []) (TCons ("TransFunctions","State") []))) (Rule [1,2] (Comb FuncCall ("TransFunctions","_#updR@State.typeMap") [Var 2,Comb FuncCall ("FiniteMap","plusFM") [Comb FuncCall ("TransFunctions","_#selR@State.typeMap") [Var 2],Var 1]])),Func ("TransFunctions","getType") 1 Public (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("TransFunctions","Mo") [TCons ("TransFunctions","State") [],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Comb FuncCall ("TransFunctions","bindM") [Comb FuncCall ("TransFunctions","getState") [],Comb (FuncPartCall 1) ("TransFunctions","getType._#lambda13") [Var 1]])),Func ("TransFunctions","getType._#lambda13") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("TransFunctions","State") []) (TCons ("TransFunctions","Mo") [TVar 625,TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("TransFunctions","returnM") [],Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Maybe","fromMaybe") [Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Prelude","error") [],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","show") [Var 1],Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]],Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Prelude","flip") [Comb (FuncPartCall 2) ("FiniteMap","lookupFM") [],Var 1],Comb FuncCall ("TransFunctions","_#selR@State.typeMap") [Var 2]]]])),Func ("TransFunctions","addNDAnalysis") 1 Public (FuncType (TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Base","NDClass") []]) (TCons ("TransFunctions","Mo") [TCons ("TransFunctions","State") [],TCons ("Prelude","()") []])) (Rule [1] (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("TransFunctions","updState") [],Comb (FuncPartCall 1) ("TransFunctions","addNDAnalysis._#lambda14") [Var 1]])),Func ("TransFunctions","addNDAnalysis._#lambda14") 2 Private (FuncType (TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Base","NDClass") []]) (FuncType (TCons ("TransFunctions","State") []) (TCons ("TransFunctions","State") []))) (Rule [1,2] (Comb FuncCall ("TransFunctions","_#updR@State.ndResult") [Var 2,Comb FuncCall ("FiniteMap","plusFM") [Var 1,Comb FuncCall ("TransFunctions","_#selR@State.ndResult") [Var 2]]])),Func ("TransFunctions","getNDClass") 1 Public (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("TransFunctions","Mo") [TCons ("TransFunctions","State") [],TCons ("Base","NDClass") []])) (Rule [1] (Comb FuncCall ("TransFunctions","bindM") [Comb FuncCall ("TransFunctions","getState") [],Comb (FuncPartCall 1) ("TransFunctions","getNDClass._#lambda15") [Var 1]])),Func ("TransFunctions","getNDClass._#lambda15") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("TransFunctions","State") []) (TCons ("TransFunctions","Mo") [TVar 626,TCons ("Base","NDClass") []]))) (Rule [1,2] (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("TransFunctions","returnM") [],Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Maybe","fromMaybe") [Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Prelude","error") [],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","show") [Var 1],Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]],Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Prelude","flip") [Comb (FuncPartCall 2) ("FiniteMap","lookupFM") [],Var 1],Comb FuncCall ("TransFunctions","_#selR@State.ndResult") [Var 2]]]])),Func ("TransFunctions","addHOFunAnalysis") 1 Public (FuncType (TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Base","HOClass") []]) (TCons ("TransFunctions","Mo") [TCons ("TransFunctions","State") [],TCons ("Prelude","()") []])) (Rule [1] (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("TransFunctions","updState") [],Comb (FuncPartCall 1) ("TransFunctions","addHOFunAnalysis._#lambda16") [Var 1]])),Func ("TransFunctions","addHOFunAnalysis._#lambda16") 2 Private (FuncType (TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Base","HOClass") []]) (FuncType (TCons ("TransFunctions","State") []) (TCons ("TransFunctions","State") []))) (Rule [1,2] (Comb FuncCall ("TransFunctions","_#updR@State.hoResultFun") [Var 2,Comb FuncCall ("FiniteMap","plusFM") [Var 1,Comb FuncCall ("TransFunctions","_#selR@State.hoResultFun") [Var 2]]])),Func ("TransFunctions","getFunHOClass") 1 Public (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("TransFunctions","Mo") [TCons ("TransFunctions","State") [],TCons ("Base","HOClass") []])) (Rule [1] (Comb FuncCall ("TransFunctions","bindM") [Comb FuncCall ("TransFunctions","getState") [],Comb (FuncPartCall 1) ("TransFunctions","getFunHOClass._#lambda17") [Var 1]])),Func ("TransFunctions","getFunHOClass._#lambda17") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("TransFunctions","State") []) (TCons ("TransFunctions","Mo") [TVar 627,TCons ("Base","HOClass") []]))) (Rule [1,2] (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("TransFunctions","returnM") [],Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Maybe","fromMaybe") [Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Prelude","error") [],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","show") [Var 1],Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]],Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Prelude","flip") [Comb (FuncPartCall 2) ("FiniteMap","lookupFM") [],Var 1],Comb FuncCall ("TransFunctions","_#selR@State.hoResultFun") [Var 2]]]])),Func ("TransFunctions","addHOConsAnalysis") 1 Public (FuncType (TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Base","HOClass") []]) (TCons ("TransFunctions","Mo") [TCons ("TransFunctions","State") [],TCons ("Prelude","()") []])) (Rule [1] (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("TransFunctions","updState") [],Comb (FuncPartCall 1) ("TransFunctions","addHOConsAnalysis._#lambda18") [Var 1]])),Func ("TransFunctions","addHOConsAnalysis._#lambda18") 2 Private (FuncType (TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Base","HOClass") []]) (FuncType (TCons ("TransFunctions","State") []) (TCons ("TransFunctions","State") []))) (Rule [1,2] (Comb FuncCall ("TransFunctions","_#updR@State.hoResultCons") [Var 2,Comb FuncCall ("FiniteMap","plusFM") [Var 1,Comb FuncCall ("TransFunctions","_#selR@State.hoResultCons") [Var 2]]])),Func ("TransFunctions","getConsHOClass") 1 Public (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("TransFunctions","Mo") [TCons ("TransFunctions","State") [],TCons ("Base","HOClass") []])) (Rule [1] (Comb FuncCall ("TransFunctions","bindM") [Comb FuncCall ("TransFunctions","getState") [],Comb (FuncPartCall 1) ("TransFunctions","getConsHOClass._#lambda19") [Var 1]])),Func ("TransFunctions","getConsHOClass._#lambda19") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("TransFunctions","State") []) (TCons ("TransFunctions","Mo") [TVar 628,TCons ("Base","HOClass") []]))) (Rule [1,2] (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("TransFunctions","returnM") [],Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Maybe","fromMaybe") [Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Prelude","error") [],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","show") [Var 1],Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]],Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Prelude","flip") [Comb (FuncPartCall 2) ("FiniteMap","lookupFM") [],Var 1],Comb FuncCall ("TransFunctions","_#selR@State.hoResultCons") [Var 2]]]])),Func ("TransFunctions","getNextID") 0 Public (TCons ("TransFunctions","Mo") [TCons ("TransFunctions","State") [],TCons ("Prelude","Int") []]) (Rule [] (Comb FuncCall ("TransFunctions","bindM") [Comb FuncCall ("TransFunctions","getState") [],Comb (FuncPartCall 1) ("TransFunctions","getNextID._#lambda20") []])),Func ("TransFunctions","getNextID._#lambda20") 1 Private (FuncType (TCons ("TransFunctions","State") []) (TCons ("TransFunctions","Mo") [TVar 629,TCons ("Prelude","Int") []])) (Rule [1] (Comb FuncCall ("TransFunctions","returnM") [Comb FuncCall ("TransFunctions","_#selR@State.nextID") [Var 1]])),Func ("TransFunctions","setNextID") 1 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("TransFunctions","Mo") [TCons ("TransFunctions","State") [],TCons ("Prelude","()") []])) (Rule [1] (Comb FuncCall ("TransFunctions","updState") [Comb (FuncPartCall 1) ("TransFunctions","setNextID._#lambda21") [Var 1]])),Func ("TransFunctions","setNextID._#lambda21") 2 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("TransFunctions","State") []) (TCons ("TransFunctions","State") []))) (Rule [1,2] (Comb FuncCall ("TransFunctions","_#updR@State.nextID") [Var 2,Var 1])),Func ("TransFunctions","takeNextID") 0 Public (TCons ("TransFunctions","Mo") [TCons ("TransFunctions","State") [],TCons ("Prelude","Int") []]) (Rule [] (Comb FuncCall ("TransFunctions","bindM") [Comb FuncCall ("TransFunctions","getState") [],Comb (FuncPartCall 1) ("TransFunctions","takeNextID._#lambda22") []])),Func ("TransFunctions","takeNextID._#lambda22") 1 Private (FuncType (TCons ("TransFunctions","State") []) (TCons ("TransFunctions","Mo") [TCons ("TransFunctions","State") [],TCons ("Prelude","Int") []])) (Rule [1] (Let [(2,Comb FuncCall ("TransFunctions","_#selR@State.nextID") [Var 1])] (Comb FuncCall ("TransFunctions","bindM_") [Comb FuncCall ("TransFunctions","putState") [Comb FuncCall ("TransFunctions","_#updR@State.nextID") [Var 1,Comb FuncCall ("Prelude","+") [Var 2,Lit (Intc  1)]]],Comb FuncCall ("TransFunctions","returnM") [Var 2]]))),Func ("TransFunctions","takeNextIDs") 1 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("TransFunctions","Mo") [TCons ("TransFunctions","State") [],TCons ("Prelude","[]") [TCons ("Prelude","Int") []]])) (Rule [1] (Comb FuncCall ("TransFunctions","bindM") [Comb FuncCall ("TransFunctions","getState") [],Comb (FuncPartCall 1) ("TransFunctions","takeNextIDs._#lambda23") [Var 1]])),Func ("TransFunctions","takeNextIDs._#lambda23") 2 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("TransFunctions","State") []) (TCons ("TransFunctions","Mo") [TCons ("TransFunctions","State") [],TCons ("Prelude","[]") [TCons ("Prelude","Int") []]]))) (Rule [1,2] (Let [(3,Comb FuncCall ("TransFunctions","_#selR@State.nextID") [Var 2])] (Comb FuncCall ("TransFunctions","bindM_") [Comb FuncCall ("TransFunctions","putState") [Comb FuncCall ("TransFunctions","_#updR@State.nextID") [Var 2,Comb FuncCall ("Prelude","+") [Var 3,Var 1]]],Comb FuncCall ("TransFunctions","returnM") [Comb FuncCall ("Prelude","enumFromTo") [Var 3,Comb FuncCall ("Prelude","-") [Comb FuncCall ("Prelude","+") [Var 3,Var 1],Lit (Intc  1)]]]]))),Func ("TransFunctions","isDetMode") 0 Public (TCons ("TransFunctions","Mo") [TCons ("TransFunctions","State") [],TCons ("Prelude","Bool") []]) (Rule [] (Comb FuncCall ("TransFunctions","bindM") [Comb FuncCall ("TransFunctions","getState") [],Comb (FuncPartCall 1) ("TransFunctions","isDetMode._#lambda24") []])),Func ("TransFunctions","isDetMode._#lambda24") 1 Private (FuncType (TCons ("TransFunctions","State") []) (TCons ("TransFunctions","Mo") [TVar 630,TCons ("Prelude","Bool") []])) (Rule [1] (Comb FuncCall ("TransFunctions","returnM") [Comb FuncCall ("TransFunctions","_#selR@State.detMode") [Var 1]])),Func ("TransFunctions","setDetMode") 1 Public (FuncType (TCons ("Prelude","Bool") []) (TCons ("TransFunctions","Mo") [TCons ("TransFunctions","State") [],TCons ("Prelude","()") []])) (Rule [1] (Comb FuncCall ("TransFunctions","updState") [Comb (FuncPartCall 1) ("TransFunctions","setDetMode._#lambda25") [Var 1]])),Func ("TransFunctions","setDetMode._#lambda25") 2 Private (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("TransFunctions","State") []) (TCons ("TransFunctions","State") []))) (Rule [1,2] (Comb FuncCall ("TransFunctions","_#updR@State.detMode") [Var 2,Var 1])),Func ("TransFunctions","doInDetMode") 2 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("TransFunctions","Mo") [TCons ("TransFunctions","State") [],TVar 0]) (TCons ("TransFunctions","Mo") [TCons ("TransFunctions","State") [],TVar 0]))) (Rule [1,2] (Comb FuncCall ("TransFunctions","bindM") [Comb FuncCall ("TransFunctions","isDetMode") [],Comb (FuncPartCall 1) ("TransFunctions","doInDetMode._#lambda26") [Var 2,Var 1]])),Func ("TransFunctions","doInDetMode._#lambda26") 3 Private (FuncType (TCons ("TransFunctions","Mo") [TCons ("TransFunctions","State") [],TVar 328]) (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Bool") []) (TCons ("TransFunctions","Mo") [TCons ("TransFunctions","State") [],TVar 328])))) (Rule [1,2,3] (Comb FuncCall ("TransFunctions","bindM") [Comb FuncCall ("TransFunctions","bindM_") [Comb FuncCall ("TransFunctions","setDetMode") [Var 2],Var 1],Comb (FuncPartCall 1) ("TransFunctions","doInDetMode._#lambda26._#lambda27") [Var 3]])),Func ("TransFunctions","doInDetMode._#lambda26._#lambda27") 2 Private (FuncType (TCons ("Prelude","Bool") []) (FuncType (TVar 328) (TCons ("TransFunctions","Mo") [TCons ("TransFunctions","State") [],TVar 328]))) (Rule [1,2] (Comb FuncCall ("TransFunctions","bindM_") [Comb FuncCall ("TransFunctions","setDetMode") [Var 1],Comb FuncCall ("TransFunctions","returnM") [Var 2]])),Func ("TransFunctions","getCompOptions") 0 Public (TCons ("TransFunctions","Mo") [TCons ("TransFunctions","State") [],TCons ("CompilerOpts","Options") []]) (Rule [] (Comb FuncCall ("TransFunctions","bindM") [Comb FuncCall ("TransFunctions","getState") [],Comb (FuncPartCall 1) ("TransFunctions","getCompOptions._#lambda28") []])),Func ("TransFunctions","getCompOptions._#lambda28") 1 Private (FuncType (TCons ("TransFunctions","State") []) (TCons ("TransFunctions","Mo") [TVar 631,TCons ("CompilerOpts","Options") []])) (Rule [1] (Comb FuncCall ("TransFunctions","returnM") [Comb FuncCall ("TransFunctions","_#selR@State.compOptions") [Var 1]])),Func ("TransFunctions","getCompOption") 1 Public (FuncType (FuncType (TCons ("CompilerOpts","Options") []) (TVar 0)) (TCons ("TransFunctions","Mo") [TCons ("TransFunctions","State") [],TVar 0])) (Rule [1] (Comb FuncCall ("TransFunctions","bindM") [Comb FuncCall ("TransFunctions","getCompOptions") [],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("TransFunctions","returnM") [],Var 1]])),Func ("TransFunctions","strictSupply") 0 Public (TCons ("TransFunctions","Mo") [TCons ("TransFunctions","State") [],TCons ("Prelude","Bool") []]) (Rule [] (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("TransFunctions","getCompOption") [],Comb (FuncPartCall 1) ("TransFunctions","strictSupply._#lambda29") []])),Func ("TransFunctions","strictSupply._#lambda29") 1 Private (FuncType (TCons ("CompilerOpts","Options") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Comb FuncCall ("Prelude",">=") [Comb FuncCall ("CompilerOpts","_#selR@Options.optOptimization") [Var 1],Comb ConsCall ("CompilerOpts","OptimStrictSupply") []])),Func ("TransFunctions","transProg") 1 Public (FuncType (TCons ("FlatCurry","Prog") []) (TCons ("TransFunctions","Mo") [TCons ("TransFunctions","State") [],TCons ("Prelude","(,)") [TCons ("FlatCurry","Prog") [],TCons ("Prelude","(,,,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]],TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Base","NDClass") []],TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Base","HOClass") []],TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Base","HOClass") []]]]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","Prog") [2,3,4,5,6]) (Comb FuncCall ("TransFunctions","bindM") [Comb FuncCall ("TransFunctions","getState") [],Comb (FuncPartCall 1) ("TransFunctions","transProg._#lambda30") [Var 5,Var 3,Var 2,Var 1,Var 4]])])),Func ("TransFunctions","transProg._#lambda30") 6 Private (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("FlatCurry","Prog") []) (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","TypeDecl") []]) (FuncType (TCons ("TransFunctions","State") []) (TCons ("TransFunctions","Mo") [TCons ("TransFunctions","State") [],TCons ("Prelude","(,)") [TCons ("FlatCurry","Prog") [],TCons ("Prelude","(,,,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]],TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Base","NDClass") []],TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Base","HOClass") []],TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Base","HOClass") []]]]]))))))) (Rule [1,2,3,4,5,6] (Let [(7,Comb FuncCall ("Analysis","analyseND") [Var 4,Comb FuncCall ("TransFunctions","_#selR@State.ndResult") [Var 6]]),(8,Comb FuncCall ("Analysis","analyseHOFunc") [Var 4,Comb FuncCall ("TransFunctions","_#selR@State.hoResultFun") [Var 6]]),(9,Comb FuncCall ("Analysis","analyseHOCons") [Var 4]),(10,Comb FuncCall ("TransFunctions","getConsMap") [Var 5]),(11,Comb FuncCall ("Analysis","analyzeVisibility") [Var 4]),(12,Comb FuncCall ("FiniteMap","delListFromFM") [Var 7,Comb FuncCall ("Analysis","getPrivateFunc") [Var 11]]),(13,Comb FuncCall ("FiniteMap","delListFromFM") [Var 8,Comb FuncCall ("Analysis","getPrivateFunc") [Var 11]]),(14,Comb FuncCall ("FiniteMap","delListFromFM") [Var 9,Comb FuncCall ("Analysis","getPrivateCons") [Var 11]]),(15,Comb FuncCall ("FiniteMap","delListFromFM") [Var 10,Comb FuncCall ("Analysis","getPrivateCons") [Var 11]])] (Comb FuncCall ("TransFunctions","bindM") [Comb FuncCall ("TransFunctions","bindM_") [Comb FuncCall ("TransFunctions","bindM_") [Comb FuncCall ("TransFunctions","bindM_") [Comb FuncCall ("TransFunctions","bindM_") [Comb FuncCall ("TransFunctions","addNDAnalysis") [Var 7],Comb FuncCall ("TransFunctions","addHOFunAnalysis") [Var 8]],Comb FuncCall ("TransFunctions","addHOConsAnalysis") [Var 9]],Comb FuncCall ("TransFunctions","addTypeMap") [Var 10]],Comb FuncCall ("TransFunctions","mapM") [Comb (FuncPartCall 1) ("TransFunctions","transFunc") [],Var 1]],Comb (FuncPartCall 1) ("TransFunctions","transProg._#lambda30._#lambda31") [Var 2,Var 3,Var 14,Var 13,Var 12,Var 15]]))),Func ("TransFunctions","transProg._#lambda30._#lambda31") 7 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Base","HOClass") []]) (FuncType (TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Base","HOClass") []]) (FuncType (TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Base","NDClass") []]) (FuncType (TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]]) (TCons ("TransFunctions","Mo") [TVar 632,TCons ("Prelude","(,)") [TCons ("FlatCurry","Prog") [],TCons ("Prelude","(,,,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]],TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Base","NDClass") []],TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Base","HOClass") []],TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Base","HOClass") []]]]])))))))) (Rule [1,2,3,4,5,6,7] (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("TransFunctions","returnM") [],Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("FlatCurry","Prog") [Var 2,Var 1,Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","concat") [Var 7],Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude","(,,,)") [Var 6,Var 5,Var 4,Var 3]]])),Func ("TransFunctions","getConsMap") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","TypeDecl") []]) (TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Comb FuncCall ("Prelude","$") [Comb FuncCall ("FiniteMap","listToFM") [Comb (FuncPartCall 2) ("Prelude","<") []],Comb FuncCall ("Prelude","$") [Comb FuncCall ("Prelude","concatMap") [Comb (FuncPartCall 1) ("TransFunctions","getConsMap._#lambda32") []],Comb FuncCall ("Prelude","filter") [Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","not") [],Comb FuncCall ("FlatCurryGoodies","isTypeSyn") []],Var 1]]])),Func ("TransFunctions","getConsMap._#lambda32") 1 Private (FuncType (TCons ("FlatCurry","TypeDecl") []) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","Type") [2,3,4,5]) (Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("TransFunctions","getConsMap._#lambda32._#lambda33") [Var 2],Var 5])])),Func ("TransFunctions","getConsMap._#lambda32._#lambda33") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("FlatCurry","ConsDecl") []) (TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FlatCurryGoodies","consName") [],Var 2],Var 1])),Func ("TransFunctions","transFunc") 1 Public (FuncType (TCons ("FlatCurry","FuncDecl") []) (TCons ("TransFunctions","Mo") [TCons ("TransFunctions","State") [],TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","Func") [2,3,4,5,6]) (Comb FuncCall ("TransFunctions","bindM") [Comb FuncCall ("TransFunctions","getCompOptions") [],Comb (FuncPartCall 1) ("TransFunctions","transFunc._#lambda34") [Var 1,Var 2]])])),Func ("TransFunctions","transFunc._#lambda34") 3 Private (FuncType (TCons ("FlatCurry","FuncDecl") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("CompilerOpts","Options") []) (TCons ("TransFunctions","Mo") [TCons ("TransFunctions","State") [],TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]])))) (Rule [1,2,3] (Let [(4,Comb FuncCall ("Prelude",">") [Comb FuncCall ("CompilerOpts","_#selR@Options.optOptimization") [Var 3],Comb ConsCall ("CompilerOpts","OptimNone") []])] (Case  Rigid (Var 4) [Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("TransFunctions","bindM") [Comb FuncCall ("TransFunctions","transNDFunc") [Var 1],Comb (FuncPartCall 1) ("TransFunctions","transFunc._#lambda34._#lambda36") []]),Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("TransFunctions","bindM") [Comb FuncCall ("TransFunctions","getNDClass") [Var 2],Comb (FuncPartCall 1) ("TransFunctions","transFunc._#lambda34._#lambda37") [Var 1,Var 3,Var 2]])]))),Func ("TransFunctions","transFunc._#lambda34._#lambda36") 1 Private (FuncType (TCons ("FlatCurry","FuncDecl") []) (TCons ("TransFunctions","Mo") [TVar 633,TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]])) (Rule [1] (Comb FuncCall ("TransFunctions","returnM") [Comb ConsCall ("Prelude",":") [Var 1,Comb ConsCall ("Prelude","[]") []]])),Func ("TransFunctions","transFunc._#lambda34._#lambda37") 4 Private (FuncType (TCons ("FlatCurry","FuncDecl") []) (FuncType (TCons ("CompilerOpts","Options") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Base","NDClass") []) (TCons ("TransFunctions","Mo") [TCons ("TransFunctions","State") [],TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]]))))) (Rule [1,2,3,4] (Comb FuncCall ("TransFunctions","bindM") [Comb FuncCall ("TransFunctions","getFunHOClass") [Var 3],Comb (FuncPartCall 1) ("TransFunctions","transFunc._#lambda34._#lambda37._#lambda38") [Var 1,Var 4,Var 2,Var 3]])),Func ("TransFunctions","transFunc._#lambda34._#lambda37._#lambda38") 5 Private (FuncType (TCons ("FlatCurry","FuncDecl") []) (FuncType (TCons ("Base","NDClass") []) (FuncType (TCons ("CompilerOpts","Options") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Base","HOClass") []) (TCons ("TransFunctions","Mo") [TCons ("TransFunctions","State") [],TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]])))))) (Rule [1,2,3,4,5] (Comb FuncCall ("TransFunctions","bindM_") [Comb FuncCall ("TransFunctions","liftIO") [Comb FuncCall ("Message","showAnalysis") [Var 3,Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","snd") [Var 4],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("Prelude","show") [Comb ConsCall ("Prelude","(,)") [Var 2,Var 5]]]]]],Case  Rigid (Var 2) [Branch (Pattern ("Base","ND") []) (Comb FuncCall ("TransFunctions","bindM") [Comb FuncCall ("TransFunctions","transNDFunc") [Var 1],Comb (FuncPartCall 1) ("TransFunctions","transFunc._#lambda34._#lambda37._#lambda38._#lambda40") []]),Branch (Pattern ("Base","D") []) (Case  Rigid (Var 5) [Branch (Pattern ("Base","FO") []) (Case  Rigid (Var 1) [Branch (Pattern ("FlatCurry","Func") [6,7,8,9,10]) (Let [(11,Var 7)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 11,Lit (Intc  0)]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 10) [Branch (Pattern ("FlatCurry","Rule") [12,13]) (Case  Rigid (Var 12) [Branch (Pattern ("Prelude","[]") []) (Case  Rigid (Var 13) [Branch (Pattern ("FlatCurry","Comb") [14,15,16]) (Case  Rigid (Var 14) [Branch (Pattern ("FlatCurry","FuncCall") []) (Case  Rigid (Var 16) [Branch (Pattern ("Prelude",":") [17,18]) (Case  Rigid (Var 18) [Branch (Pattern ("Prelude",":") [19,20]) (Case  Rigid (Var 19) [Branch (Pattern ("FlatCurry","Comb") [21,22,23]) (Case  Rigid (Var 21) [Branch (Pattern ("FlatCurry","ConsCall") []) (Case  Rigid (Var 23) [Branch (Pattern ("Prelude","[]") []) (Case  Rigid (Var 20) [Branch (Pattern ("Prelude","[]") []) (Case  Rigid (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","==") [Var 15,Comb FuncCall ("Names","renameQName") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc  'G'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'b'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude","[]") []]]]]]],Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'b'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude","[]") []]]]]]]]]],Comb FuncCall ("Prelude","==") [Var 22,Comb FuncCall ("Names","renameQName") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc  'G'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'b'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude","[]") []]]]]]],Comb ConsCall ("Prelude",":") [Lit (Charc  'T'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("TransFunctions","bindM") [Comb FuncCall ("TransFunctions","transCompleteExpr") [Var 17],Comb (FuncPartCall 1) ("TransFunctions","transFunc._#lambda34._#lambda37._#lambda38._#lambda43") [Var 22,Var 15,Var 4,Var 9,Var 8]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("TransFunctions","bindM") [Comb FuncCall ("TransFunctions","transPureFunc") [Var 1],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("TransFunctions","returnM") [],Comb (FuncPartCall 1) ("Prelude","flip") [Comb (ConsPartCall 2) ("Prelude",":") [],Comb ConsCall ("Prelude","[]") []]]])]),Branch (Pattern ("Prelude",":") [24,25]) (Comb FuncCall ("TransFunctions","bindM") [Comb FuncCall ("TransFunctions","transPureFunc") [Var 1],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("TransFunctions","returnM") [],Comb (FuncPartCall 1) ("Prelude","flip") [Comb (ConsPartCall 2) ("Prelude",":") [],Comb ConsCall ("Prelude","[]") []]]])]),Branch (Pattern ("Prelude",":") [26,27]) (Comb FuncCall ("TransFunctions","bindM") [Comb FuncCall ("TransFunctions","transPureFunc") [Var 1],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("TransFunctions","returnM") [],Comb (FuncPartCall 1) ("Prelude","flip") [Comb (ConsPartCall 2) ("Prelude",":") [],Comb ConsCall ("Prelude","[]") []]]])]),Branch (Pattern ("FlatCurry","FuncCall") []) (Comb FuncCall ("TransFunctions","bindM") [Comb FuncCall ("TransFunctions","transPureFunc") [Var 1],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("TransFunctions","returnM") [],Comb (FuncPartCall 1) ("Prelude","flip") [Comb (ConsPartCall 2) ("Prelude",":") [],Comb ConsCall ("Prelude","[]") []]]]),Branch (Pattern ("FlatCurry","FuncPartCall") [28]) (Comb FuncCall ("TransFunctions","bindM") [Comb FuncCall ("TransFunctions","transPureFunc") [Var 1],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("TransFunctions","returnM") [],Comb (FuncPartCall 1) ("Prelude","flip") [Comb (ConsPartCall 2) ("Prelude",":") [],Comb ConsCall ("Prelude","[]") []]]]),Branch (Pattern ("FlatCurry","ConsPartCall") [29]) (Comb FuncCall ("TransFunctions","bindM") [Comb FuncCall ("TransFunctions","transPureFunc") [Var 1],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("TransFunctions","returnM") [],Comb (FuncPartCall 1) ("Prelude","flip") [Comb (ConsPartCall 2) ("Prelude",":") [],Comb ConsCall ("Prelude","[]") []]]])]),Branch (Pattern ("FlatCurry","Var") [30]) (Comb FuncCall ("TransFunctions","bindM") [Comb FuncCall ("TransFunctions","transPureFunc") [Var 1],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("TransFunctions","returnM") [],Comb (FuncPartCall 1) ("Prelude","flip") [Comb (ConsPartCall 2) ("Prelude",":") [],Comb ConsCall ("Prelude","[]") []]]]),Branch (Pattern ("FlatCurry","Lit") [31]) (Comb FuncCall ("TransFunctions","bindM") [Comb FuncCall ("TransFunctions","transPureFunc") [Var 1],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("TransFunctions","returnM") [],Comb (FuncPartCall 1) ("Prelude","flip") [Comb (ConsPartCall 2) ("Prelude",":") [],Comb ConsCall ("Prelude","[]") []]]]),Branch (Pattern ("FlatCurry","Let") [32,33]) (Comb FuncCall ("TransFunctions","bindM") [Comb FuncCall ("TransFunctions","transPureFunc") [Var 1],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("TransFunctions","returnM") [],Comb (FuncPartCall 1) ("Prelude","flip") [Comb (ConsPartCall 2) ("Prelude",":") [],Comb ConsCall ("Prelude","[]") []]]]),Branch (Pattern ("FlatCurry","Free") [34,35]) (Comb FuncCall ("TransFunctions","bindM") [Comb FuncCall ("TransFunctions","transPureFunc") [Var 1],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("TransFunctions","returnM") [],Comb (FuncPartCall 1) ("Prelude","flip") [Comb (ConsPartCall 2) ("Prelude",":") [],Comb ConsCall ("Prelude","[]") []]]]),Branch (Pattern ("FlatCurry","Or") [36,37]) (Comb FuncCall ("TransFunctions","bindM") [Comb FuncCall ("TransFunctions","transPureFunc") [Var 1],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("TransFunctions","returnM") [],Comb (FuncPartCall 1) ("Prelude","flip") [Comb (ConsPartCall 2) ("Prelude",":") [],Comb ConsCall ("Prelude","[]") []]]]),Branch (Pattern ("FlatCurry","Case") [38,39,40]) (Comb FuncCall ("TransFunctions","bindM") [Comb FuncCall ("TransFunctions","transPureFunc") [Var 1],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("TransFunctions","returnM") [],Comb (FuncPartCall 1) ("Prelude","flip") [Comb (ConsPartCall 2) ("Prelude",":") [],Comb ConsCall ("Prelude","[]") []]]]),Branch (Pattern ("FlatCurry","Typed") [41,42]) (Comb FuncCall ("TransFunctions","bindM") [Comb FuncCall ("TransFunctions","transPureFunc") [Var 1],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("TransFunctions","returnM") [],Comb (FuncPartCall 1) ("Prelude","flip") [Comb (ConsPartCall 2) ("Prelude",":") [],Comb ConsCall ("Prelude","[]") []]]])]),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("TransFunctions","bindM") [Comb FuncCall ("TransFunctions","transPureFunc") [Var 1],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("TransFunctions","returnM") [],Comb (FuncPartCall 1) ("Prelude","flip") [Comb (ConsPartCall 2) ("Prelude",":") [],Comb ConsCall ("Prelude","[]") []]]])]),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("TransFunctions","bindM") [Comb FuncCall ("TransFunctions","transPureFunc") [Var 1],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("TransFunctions","returnM") [],Comb (FuncPartCall 1) ("Prelude","flip") [Comb (ConsPartCall 2) ("Prelude",":") [],Comb ConsCall ("Prelude","[]") []]]])]),Branch (Pattern ("FlatCurry","ConsCall") []) (Comb FuncCall ("TransFunctions","bindM") [Comb FuncCall ("TransFunctions","transPureFunc") [Var 1],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("TransFunctions","returnM") [],Comb (FuncPartCall 1) ("Prelude","flip") [Comb (ConsPartCall 2) ("Prelude",":") [],Comb ConsCall ("Prelude","[]") []]]]),Branch (Pattern ("FlatCurry","FuncPartCall") [43]) (Comb FuncCall ("TransFunctions","bindM") [Comb FuncCall ("TransFunctions","transPureFunc") [Var 1],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("TransFunctions","returnM") [],Comb (FuncPartCall 1) ("Prelude","flip") [Comb (ConsPartCall 2) ("Prelude",":") [],Comb ConsCall ("Prelude","[]") []]]]),Branch (Pattern ("FlatCurry","ConsPartCall") [44]) (Comb FuncCall ("TransFunctions","bindM") [Comb FuncCall ("TransFunctions","transPureFunc") [Var 1],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("TransFunctions","returnM") [],Comb (FuncPartCall 1) ("Prelude","flip") [Comb (ConsPartCall 2) ("Prelude",":") [],Comb ConsCall ("Prelude","[]") []]]])]),Branch (Pattern ("FlatCurry","Var") [45]) (Comb FuncCall ("TransFunctions","bindM") [Comb FuncCall ("TransFunctions","transPureFunc") [Var 1],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("TransFunctions","returnM") [],Comb (FuncPartCall 1) ("Prelude","flip") [Comb (ConsPartCall 2) ("Prelude",":") [],Comb ConsCall ("Prelude","[]") []]]]),Branch (Pattern ("FlatCurry","Lit") [46]) (Comb FuncCall ("TransFunctions","bindM") [Comb FuncCall ("TransFunctions","transPureFunc") [Var 1],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("TransFunctions","returnM") [],Comb (FuncPartCall 1) ("Prelude","flip") [Comb (ConsPartCall 2) ("Prelude",":") [],Comb ConsCall ("Prelude","[]") []]]]),Branch (Pattern ("FlatCurry","Let") [47,48]) (Comb FuncCall ("TransFunctions","bindM") [Comb FuncCall ("TransFunctions","transPureFunc") [Var 1],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("TransFunctions","returnM") [],Comb (FuncPartCall 1) ("Prelude","flip") [Comb (ConsPartCall 2) ("Prelude",":") [],Comb ConsCall ("Prelude","[]") []]]]),Branch (Pattern ("FlatCurry","Free") [49,50]) (Comb FuncCall ("TransFunctions","bindM") [Comb FuncCall ("TransFunctions","transPureFunc") [Var 1],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("TransFunctions","returnM") [],Comb (FuncPartCall 1) ("Prelude","flip") [Comb (ConsPartCall 2) ("Prelude",":") [],Comb ConsCall ("Prelude","[]") []]]]),Branch (Pattern ("FlatCurry","Or") [51,52]) (Comb FuncCall ("TransFunctions","bindM") [Comb FuncCall ("TransFunctions","transPureFunc") [Var 1],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("TransFunctions","returnM") [],Comb (FuncPartCall 1) ("Prelude","flip") [Comb (ConsPartCall 2) ("Prelude",":") [],Comb ConsCall ("Prelude","[]") []]]]),Branch (Pattern ("FlatCurry","Case") [53,54,55]) (Comb FuncCall ("TransFunctions","bindM") [Comb FuncCall ("TransFunctions","transPureFunc") [Var 1],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("TransFunctions","returnM") [],Comb (FuncPartCall 1) ("Prelude","flip") [Comb (ConsPartCall 2) ("Prelude",":") [],Comb ConsCall ("Prelude","[]") []]]]),Branch (Pattern ("FlatCurry","Typed") [56,57]) (Comb FuncCall ("TransFunctions","bindM") [Comb FuncCall ("TransFunctions","transPureFunc") [Var 1],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("TransFunctions","returnM") [],Comb (FuncPartCall 1) ("Prelude","flip") [Comb (ConsPartCall 2) ("Prelude",":") [],Comb ConsCall ("Prelude","[]") []]]])]),Branch (Pattern ("Prelude",":") [58,59]) (Comb FuncCall ("TransFunctions","bindM") [Comb FuncCall ("TransFunctions","transPureFunc") [Var 1],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("TransFunctions","returnM") [],Comb (FuncPartCall 1) ("Prelude","flip") [Comb (ConsPartCall 2) ("Prelude",":") [],Comb ConsCall ("Prelude","[]") []]]])]),Branch (Pattern ("FlatCurry","External") [60]) (Comb FuncCall ("TransFunctions","bindM") [Comb FuncCall ("TransFunctions","transPureFunc") [Var 1],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("TransFunctions","returnM") [],Comb (FuncPartCall 1) ("Prelude","flip") [Comb (ConsPartCall 2) ("Prelude",":") [],Comb ConsCall ("Prelude","[]") []]]])]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("TransFunctions","bindM") [Comb FuncCall ("TransFunctions","transPureFunc") [Var 1],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("TransFunctions","returnM") [],Comb (FuncPartCall 1) ("Prelude","flip") [Comb (ConsPartCall 2) ("Prelude",":") [],Comb ConsCall ("Prelude","[]") []]]])]))]),Branch (Pattern ("Base","HO") []) (Comb FuncCall ("TransFunctions","bindM") [Comb FuncCall ("TransFunctions","transPureFunc") [Var 1],Comb (FuncPartCall 1) ("TransFunctions","transFunc._#lambda34._#lambda37._#lambda38._#lambda46") [Var 1]])])]])),Func ("TransFunctions","transFunc._#lambda34._#lambda37._#lambda38._#lambda40") 1 Private (FuncType (TCons ("FlatCurry","FuncDecl") []) (TCons ("TransFunctions","Mo") [TVar 634,TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]])) (Rule [1] (Comb FuncCall ("TransFunctions","returnM") [Comb ConsCall ("Prelude",":") [Var 1,Comb ConsCall ("Prelude","[]") []]])),Func ("TransFunctions","transFunc._#lambda34._#lambda37._#lambda38._#lambda43") 6 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("FlatCurry","TypeExpr") []) (FuncType (TCons ("FlatCurry","Visibility") []) (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("TransFunctions","Mo") [TCons ("TransFunctions","State") [],TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]]))))))) (Rule [1,2,3,4,5,6] (Comb FuncCall ("TransFunctions","bindM") [Comb FuncCall ("TransFunctions","renameFun") [Var 3],Comb (FuncPartCall 1) ("TransFunctions","transFunc._#lambda34._#lambda37._#lambda38._#lambda43._#lambda44") [Var 1,Var 2,Var 3,Var 4,Var 6,Var 5]])),Func ("TransFunctions","transFunc._#lambda34._#lambda37._#lambda38._#lambda43._#lambda44") 7 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("FlatCurry","TypeExpr") []) (FuncType (TCons ("FlatCurry","Expr") []) (FuncType (TCons ("FlatCurry","Visibility") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("TransFunctions","Mo") [TCons ("TransFunctions","State") [],TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]])))))))) (Rule [1,2,3,4,5,6,7] (Comb FuncCall ("TransFunctions","bindM") [Comb FuncCall ("TransFunctions","renameFun") [Var 2],Comb (FuncPartCall 1) ("TransFunctions","transFunc._#lambda34._#lambda37._#lambda38._#lambda43._#lambda44._#lambda45") [Var 1,Var 7,Var 3,Var 4,Var 5,Var 6]])),Func ("TransFunctions","transFunc._#lambda34._#lambda37._#lambda38._#lambda43._#lambda44._#lambda45") 7 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("FlatCurry","TypeExpr") []) (FuncType (TCons ("FlatCurry","Expr") []) (FuncType (TCons ("FlatCurry","Visibility") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("TransFunctions","Mo") [TVar 635,TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]])))))))) (Rule [1,2,3,4,5,6,7] (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("TransFunctions","returnM") [],Comb ConsCall ("Prelude",":") [Comb ConsCall ("FlatCurry","Func") [Var 2,Lit (Intc  1),Var 6,Comb FuncCall ("TransFunctions","check42") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("TransFunctions","transTypeExpr") [],Lit (Intc  0)],Var 4],Comb ConsCall ("FlatCurry","Rule") [Comb ConsCall ("Prelude",":") [Lit (Intc  0),Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("FlatCurry","Comb") [Comb ConsCall ("FlatCurry","FuncCall") [],Comb FuncCall ("Names","mkGlobalName") [Var 3],Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("FlatCurry","Func") [Comb FuncCall ("Names","mkGlobalName") [Var 3],Lit (Intc  0),Comb ConsCall ("FlatCurry","Private") [],Var 4,Comb ConsCall ("FlatCurry","Rule") [Comb ConsCall ("Prelude","[]") [],Comb ConsCall ("FlatCurry","Comb") [Comb ConsCall ("FlatCurry","FuncCall") [],Var 7,Comb ConsCall ("Prelude",":") [Comb ConsCall ("FlatCurry","Let") [Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("TransFunctions","constStoreVarIdx") [],Comb ConsCall ("FlatCurry","Comb") [Comb ConsCall ("FlatCurry","FuncCall") [],Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Names","basics") [],Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude","[]") []]]]]]]]],Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude","[]") []],Var 5],Comb ConsCall ("Prelude",":") [Comb ConsCall ("FlatCurry","Comb") [Comb ConsCall ("FlatCurry","ConsCall") [],Var 1,Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude",":") [Comb ConsCall ("FlatCurry","Comb") [Comb ConsCall ("FlatCurry","FuncCall") [],Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Names","basics") [],Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude","[]") []]]]]]]]],Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude","[]") []]]]]]],Comb ConsCall ("Prelude","[]") []]]])),Func ("TransFunctions","transFunc._#lambda34._#lambda37._#lambda38._#lambda46") 2 Private (FuncType (TCons ("FlatCurry","FuncDecl") []) (FuncType (TCons ("FlatCurry","FuncDecl") []) (TCons ("TransFunctions","Mo") [TCons ("TransFunctions","State") [],TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]]))) (Rule [1,2] (Comb FuncCall ("TransFunctions","bindM") [Comb FuncCall ("TransFunctions","transNDFunc") [Var 1],Comb (FuncPartCall 1) ("TransFunctions","transFunc._#lambda34._#lambda37._#lambda38._#lambda46._#lambda47") [Var 2]])),Func ("TransFunctions","transFunc._#lambda34._#lambda37._#lambda38._#lambda46._#lambda47") 2 Private (FuncType (TCons ("FlatCurry","FuncDecl") []) (FuncType (TCons ("FlatCurry","FuncDecl") []) (TCons ("TransFunctions","Mo") [TVar 636,TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]]))) (Rule [1,2] (Comb FuncCall ("TransFunctions","returnM") [Comb ConsCall ("Prelude",":") [Var 1,Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude","[]") []]]])),Func ("TransFunctions","transPureFunc") 1 Public (FuncType (TCons ("FlatCurry","FuncDecl") []) (TCons ("TransFunctions","Mo") [TCons ("TransFunctions","State") [],TCons ("FlatCurry","FuncDecl") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","Func") [2,3,4,5,6]) (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("TransFunctions","doInDetMode") [Comb ConsCall ("Prelude","True") []],Comb FuncCall ("TransFunctions","bindM") [Comb FuncCall ("TransFunctions","renameFun") [Var 2],Comb (FuncPartCall 1) ("TransFunctions","transPureFunc._#lambda48") [Var 3,Var 6,Var 5,Var 4]]])])),Func ("TransFunctions","transPureFunc._#lambda48") 5 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("FlatCurry","Rule") []) (FuncType (TCons ("FlatCurry","TypeExpr") []) (FuncType (TCons ("FlatCurry","Visibility") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("TransFunctions","Mo") [TCons ("TransFunctions","State") [],TCons ("FlatCurry","FuncDecl") []])))))) (Rule [1,2,3,4,5] (Comb FuncCall ("TransFunctions","bindM") [Comb FuncCall ("TransFunctions","transRule") [Comb ConsCall ("FlatCurry","Func") [Var 5,Var 1,Var 4,Var 3,Var 2]],Comb (FuncPartCall 1) ("TransFunctions","transPureFunc._#lambda48._#lambda49") [Var 1,Var 5,Var 3,Var 4]])),Func ("TransFunctions","transPureFunc._#lambda48._#lambda49") 5 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("FlatCurry","TypeExpr") []) (FuncType (TCons ("FlatCurry","Visibility") []) (FuncType (TCons ("FlatCurry","Rule") []) (TCons ("TransFunctions","Mo") [TVar 637,TCons ("FlatCurry","FuncDecl") []])))))) (Rule [1,2,3,4,5] (Comb FuncCall ("TransFunctions","returnM") [Comb ConsCall ("FlatCurry","Func") [Var 2,Comb FuncCall ("Prelude","+") [Var 1,Lit (Intc  1)],Var 4,Comb FuncCall ("TransFunctions","check42") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("TransFunctions","transTypeExpr") [],Var 1],Var 3],Var 5]])),Func ("TransFunctions","transNDFunc") 1 Public (FuncType (TCons ("FlatCurry","FuncDecl") []) (TCons ("TransFunctions","Mo") [TCons ("TransFunctions","State") [],TCons ("FlatCurry","FuncDecl") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","Func") [2,3,4,5,6]) (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("TransFunctions","doInDetMode") [Comb ConsCall ("Prelude","False") []],Comb FuncCall ("TransFunctions","bindM") [Comb FuncCall ("TransFunctions","renameFun") [Var 2],Comb (FuncPartCall 1) ("TransFunctions","transNDFunc._#lambda50") [Var 3,Var 6,Var 5,Var 4]]])])),Func ("TransFunctions","transNDFunc._#lambda50") 5 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("FlatCurry","Rule") []) (FuncType (TCons ("FlatCurry","TypeExpr") []) (FuncType (TCons ("FlatCurry","Visibility") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("TransFunctions","Mo") [TCons ("TransFunctions","State") [],TCons ("FlatCurry","FuncDecl") []])))))) (Rule [1,2,3,4,5] (Comb FuncCall ("TransFunctions","bindM") [Comb FuncCall ("TransFunctions","transRule") [Comb ConsCall ("FlatCurry","Func") [Var 5,Var 1,Var 4,Var 3,Var 2]],Comb (FuncPartCall 1) ("TransFunctions","transNDFunc._#lambda50._#lambda51") [Var 1,Var 5,Var 3,Var 4]])),Func ("TransFunctions","transNDFunc._#lambda50._#lambda51") 5 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("FlatCurry","TypeExpr") []) (FuncType (TCons ("FlatCurry","Visibility") []) (FuncType (TCons ("FlatCurry","Rule") []) (TCons ("TransFunctions","Mo") [TVar 638,TCons ("FlatCurry","FuncDecl") []])))))) (Rule [1,2,3,4,5] (Comb FuncCall ("TransFunctions","returnM") [Comb ConsCall ("FlatCurry","Func") [Var 2,Comb FuncCall ("Prelude","+") [Var 1,Lit (Intc  2)],Var 4,Comb FuncCall ("TransFunctions","check42") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("TransFunctions","transNDTypeExpr") [],Var 1],Var 3],Var 5]])),Func ("TransFunctions","renameFun") 1 Public (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("TransFunctions","Mo") [TCons ("TransFunctions","State") [],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Comb FuncCall ("TransFunctions","bindM") [Comb FuncCall ("TransFunctions","isDetMode") [],Comb (FuncPartCall 1) ("TransFunctions","renameFun._#lambda52") [Var 3,Var 2,Var 1]])])),Func ("TransFunctions","renameFun._#lambda52") 4 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","Bool") []) (TCons ("TransFunctions","Mo") [TCons ("TransFunctions","State") [],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [1,2,3,4] (Comb FuncCall ("TransFunctions","bindM") [Comb FuncCall ("TransFunctions","getNDClass") [Var 3],Comb (FuncPartCall 1) ("TransFunctions","renameFun._#lambda52._#lambda53") [Var 4,Var 1,Var 2,Var 3]])),Func ("TransFunctions","renameFun._#lambda52._#lambda53") 5 Private (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Base","NDClass") []) (TCons ("TransFunctions","Mo") [TCons ("TransFunctions","State") [],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))) (Rule [1,2,3,4,5] (Comb FuncCall ("TransFunctions","bindM") [Comb FuncCall ("TransFunctions","getFunHOClass") [Var 4],Comb (FuncPartCall 1) ("TransFunctions","renameFun._#lambda52._#lambda53._#lambda54") [Var 1,Var 2,Var 5,Var 3]])),Func ("TransFunctions","renameFun._#lambda52._#lambda53._#lambda54") 5 Private (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Base","NDClass") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Base","HOClass") []) (TCons ("TransFunctions","Mo") [TVar 639,TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))) (Rule [1,2,3,4,5] (Comb FuncCall ("TransFunctions","returnM") [Comb ConsCall ("Prelude","(,)") [Var 4,Comb FuncCall ("Prelude","++") [Comb FuncCall ("Names","funcPrefix") [Var 1,Var 3,Var 5],Var 2]]])),Func ("TransFunctions","renameCons") 1 Public (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("TransFunctions","Mo") [TCons ("TransFunctions","State") [],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Comb FuncCall ("TransFunctions","bindM") [Comb FuncCall ("TransFunctions","isDetMode") [],Comb (FuncPartCall 1) ("TransFunctions","renameCons._#lambda55") [Var 3,Var 2,Var 1]])])),Func ("TransFunctions","renameCons._#lambda55") 4 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","Bool") []) (TCons ("TransFunctions","Mo") [TCons ("TransFunctions","State") [],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [1,2,3,4] (Comb FuncCall ("TransFunctions","bindM") [Comb FuncCall ("TransFunctions","getConsHOClass") [Var 3],Comb (FuncPartCall 1) ("TransFunctions","renameCons._#lambda55._#lambda56") [Var 4,Var 1,Var 2]])),Func ("TransFunctions","renameCons._#lambda55._#lambda56") 4 Private (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Base","HOClass") []) (TCons ("TransFunctions","Mo") [TVar 640,TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [1,2,3,4] (Comb FuncCall ("TransFunctions","returnM") [Comb ConsCall ("Prelude","(,)") [Var 3,Comb FuncCall ("Prelude","++") [Comb FuncCall ("Names","consPrefix") [Var 1,Var 4],Var 2]]])),Func ("TransFunctions","check42") 2 Public (FuncType (FuncType (TCons ("FlatCurry","TypeExpr") []) (TCons ("FlatCurry","TypeExpr") [])) (FuncType (TCons ("FlatCurry","TypeExpr") []) (TCons ("FlatCurry","TypeExpr") []))) (Rule [1,2] (Case  Rigid (Var 2) [Branch (Pattern ("FlatCurry","TVar") [3]) (Let [(4,Var 3)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 4,Lit (Intc  -42)]) [Branch (Pattern ("Prelude","True") []) (Var 2),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","apply") [Var 1,Var 2])])),Branch (Pattern ("FlatCurry","FuncType") [5,6]) (Comb FuncCall ("Prelude","apply") [Var 1,Var 2]),Branch (Pattern ("FlatCurry","TCons") [7,8]) (Comb FuncCall ("Prelude","apply") [Var 1,Var 2])])),Func ("TransFunctions","transExprType") 1 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("FlatCurry","TypeExpr") []) (TCons ("FlatCurry","TypeExpr") []))) (Rule [1] (Case  Rigid (Var 1) [Branch (Pattern ("Prelude","True") []) (Comb (FuncPartCall 1) ("TransFunctions","transHOTypeExprWith") [Comb (FuncPartCall 2) ("TransFunctions","transExprType._#lambda58") []]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb (FuncPartCall 1) ("TransFunctions","transHOTypeExprWith") [Comb (FuncPartCall 2) ("TransFunctions","funcType") []]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])),Func ("TransFunctions","transExprType._#lambda58") 2 Private (FuncType (TCons ("FlatCurry","TypeExpr") []) (FuncType (TCons ("FlatCurry","TypeExpr") []) (TCons ("FlatCurry","TypeExpr") []))) (Rule [1,2] (Comb ConsCall ("FlatCurry","FuncType") [Var 1,Comb ConsCall ("FlatCurry","FuncType") [Comb FuncCall ("TransFunctions","storeType") [],Var 2]])),Func ("TransFunctions","transTypeExpr") 0 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("FlatCurry","TypeExpr") []) (TCons ("FlatCurry","TypeExpr") []))) (Rule [] (Comb (FuncPartCall 2) ("TransFunctions","transTypeExprWith") [Comb (FuncPartCall 2) ("TransFunctions","transTypeExpr._#lambda59") [],Comb (ConsPartCall 1) ("FlatCurry","FuncType") [Comb FuncCall ("TransFunctions","storeType") []]])),Func ("TransFunctions","transTypeExpr._#lambda59") 2 Private (FuncType (TCons ("FlatCurry","TypeExpr") []) (FuncType (TCons ("FlatCurry","TypeExpr") []) (TCons ("FlatCurry","TypeExpr") []))) (Rule [1,2] (Comb ConsCall ("FlatCurry","FuncType") [Var 1,Comb ConsCall ("FlatCurry","FuncType") [Comb FuncCall ("TransFunctions","storeType") [],Var 2]])),Func ("TransFunctions","transNDTypeExpr") 0 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("FlatCurry","TypeExpr") []) (TCons ("FlatCurry","TypeExpr") []))) (Rule [] (Comb (FuncPartCall 2) ("TransFunctions","transTypeExprWith") [Comb (FuncPartCall 2) ("TransFunctions","funcType") [],Comb FuncCall ("Prelude",".") [Comb (ConsPartCall 1) ("FlatCurry","FuncType") [Comb FuncCall ("TransFunctions","supplyType") []],Comb (ConsPartCall 1) ("FlatCurry","FuncType") [Comb FuncCall ("TransFunctions","storeType") []]]])),Func ("TransFunctions","transTypeExprWith") 4 Public (FuncType (FuncType (TCons ("FlatCurry","TypeExpr") []) (FuncType (TCons ("FlatCurry","TypeExpr") []) (TCons ("FlatCurry","TypeExpr") []))) (FuncType (FuncType (TCons ("FlatCurry","TypeExpr") []) (TCons ("FlatCurry","TypeExpr") [])) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("FlatCurry","TypeExpr") []) (TCons ("FlatCurry","TypeExpr") []))))) (Rule [1,2,3,4] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 3,Lit (Intc  0)]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","apply") [Var 2,Comb FuncCall ("TransFunctions","transHOTypeExprWith") [Var 1,Var 4]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude",">") [Var 3,Lit (Intc  0)]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 4) [Branch (Pattern ("FlatCurry","FuncType") [5,6]) (Comb ConsCall ("FlatCurry","FuncType") [Comb FuncCall ("TransFunctions","transHOTypeExprWith") [Var 1,Var 5],Comb FuncCall ("TransFunctions","transTypeExprWith") [Var 1,Var 2,Comb FuncCall ("Prelude","-") [Var 3,Lit (Intc  1)],Var 6]]),Branch (Pattern ("FlatCurry","TVar") [7]) (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Prelude","error") [],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'T'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'E'),Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'W'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]],Comb FuncCall ("Prelude","show") [Comb ConsCall ("Prelude","(,)") [Var 3,Var 4]]]]),Branch (Pattern ("FlatCurry","TCons") [8,9]) (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Prelude","error") [],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'T'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'E'),Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'W'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]],Comb FuncCall ("Prelude","show") [Comb ConsCall ("Prelude","(,)") [Var 3,Var 4]]]])]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","<") [Var 3,Lit (Intc  0)]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Prelude","error") [],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'T'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'E'),Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'W'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]],Comb FuncCall ("Prelude","show") [Comb ConsCall ("Prelude","(,)") [Var 3,Var 4]]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])),Func ("TransFunctions","transHOTypeExprWith") 2 Public (FuncType (FuncType (TCons ("FlatCurry","TypeExpr") []) (FuncType (TCons ("FlatCurry","TypeExpr") []) (TCons ("FlatCurry","TypeExpr") []))) (FuncType (TCons ("FlatCurry","TypeExpr") []) (TCons ("FlatCurry","TypeExpr") []))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("FlatCurry","TVar") [3]) (Var 2),Branch (Pattern ("FlatCurry","FuncType") [4,5]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 1,Comb FuncCall ("TransFunctions","transHOTypeExprWith") [Var 1,Var 4]],Comb FuncCall ("TransFunctions","transHOTypeExprWith") [Var 1,Var 5]]),Branch (Pattern ("FlatCurry","TCons") [6,7]) (Comb ConsCall ("FlatCurry","TCons") [Var 6,Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("TransFunctions","transHOTypeExprWith") [Var 1],Var 7]])])),Func ("TransFunctions","transRule") 1 Public (FuncType (TCons ("FlatCurry","FuncDecl") []) (TCons ("TransFunctions","Mo") [TCons ("TransFunctions","State") [],TCons ("FlatCurry","Rule") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","Func") [2,3,4,5,6]) (Case  Flex (Var 6) [Branch (Pattern ("FlatCurry","Rule") [7,8]) (Comb FuncCall ("TransFunctions","bindM") [Comb FuncCall ("TransFunctions","isDetMode") [],Comb (FuncPartCall 1) ("TransFunctions","transRule._#lambda61") [Var 8,Var 2,Var 7]]),Branch (Pattern ("FlatCurry","External") [9]) (Comb FuncCall ("TransFunctions","bindM") [Comb FuncCall ("TransFunctions","isDetMode") [],Comb (FuncPartCall 1) ("TransFunctions","transRule._#lambda63") [Var 3,Var 2]])])])),Func ("TransFunctions","transRule._#lambda61") 4 Private (FuncType (TCons ("FlatCurry","Expr") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (FuncType (TCons ("Prelude","Bool") []) (TCons ("TransFunctions","Mo") [TCons ("TransFunctions","State") [],TCons ("FlatCurry","Rule") []]))))) (Rule [1,2,3,4] (Comb FuncCall ("TransFunctions","bindM") [Comb FuncCall ("TransFunctions","transBody") [Var 2,Var 3,Var 1],Comb (FuncPartCall 1) ("TransFunctions","transRule._#lambda61._#lambda62") [Var 4,Var 3]])),Func ("TransFunctions","transRule._#lambda61._#lambda62") 3 Private (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("TransFunctions","Mo") [TVar 641,TCons ("FlatCurry","Rule") []])))) (Rule [1,2,3] (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("TransFunctions","returnM") [],Comb ConsCall ("FlatCurry","Rule") [Comb FuncCall ("Prelude","++") [Case  Rigid (Var 1) [Branch (Pattern ("Prelude","True") []) (Var 2),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","++") [Var 2,Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransFunctions","suppVarIdx") [],Comb ConsCall ("Prelude","[]") []]])],Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransFunctions","constStoreVarIdx") [],Comb ConsCall ("Prelude","[]") []]],Var 3]])),Func ("TransFunctions","transRule._#lambda63") 3 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","Bool") []) (TCons ("TransFunctions","Mo") [TVar 642,TCons ("FlatCurry","Rule") []])))) (Rule [1,2,3] (Let [(4,Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","enumFromTo") [Lit (Intc  1),Var 1],Comb FuncCall ("Prelude","++") [Case  Rigid (Var 3) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransFunctions","suppVarIdx") [],Comb ConsCall ("Prelude","[]") []])],Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransFunctions","constStoreVarIdx") [],Comb ConsCall ("Prelude","[]") []]]])] (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("TransFunctions","returnM") [],Comb FuncCall ("Prelude","$") [Comb (ConsPartCall 1) ("FlatCurry","Rule") [Var 4],Comb FuncCall ("TransFunctions","funcCall") [Comb FuncCall ("Names","externalFunc") [Var 2],Comb FuncCall ("Prelude","map") [Comb (ConsPartCall 1) ("FlatCurry","Var") [],Var 4]]]]))),Func ("TransFunctions","transBody") 3 Public (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("TransFunctions","Mo") [TCons ("TransFunctions","State") [],TCons ("FlatCurry","Expr") []])))) (Rule [1,2,3] (Case  Rigid (Var 3) [Branch (Pattern ("FlatCurry","Case") [4,5,6]) (Case  Rigid (Var 5) [Branch (Pattern ("FlatCurry","Var") [7]) (Comb FuncCall ("TransFunctions","bindM") [Comb FuncCall ("TransFunctions","mapM") [Comb (FuncPartCall 1) ("TransFunctions","transBranch") [],Var 6],Comb (FuncPartCall 1) ("TransFunctions","transBody._#lambda65") [Var 6,Var 4,Var 5,Var 7,Var 1,Var 2]]),Branch (Pattern ("FlatCurry","Lit") [8]) (Comb FuncCall ("TransFunctions","transCompleteExpr") [Var 3]),Branch (Pattern ("FlatCurry","Comb") [9,10,11]) (Comb FuncCall ("TransFunctions","transCompleteExpr") [Var 3]),Branch (Pattern ("FlatCurry","Let") [12,13]) (Comb FuncCall ("TransFunctions","transCompleteExpr") [Var 3]),Branch (Pattern ("FlatCurry","Free") [14,15]) (Comb FuncCall ("TransFunctions","transCompleteExpr") [Var 3]),Branch (Pattern ("FlatCurry","Or") [16,17]) (Comb FuncCall ("TransFunctions","transCompleteExpr") [Var 3]),Branch (Pattern ("FlatCurry","Case") [18,19,20]) (Comb FuncCall ("TransFunctions","transCompleteExpr") [Var 3]),Branch (Pattern ("FlatCurry","Typed") [21,22]) (Comb FuncCall ("TransFunctions","transCompleteExpr") [Var 3])]),Branch (Pattern ("FlatCurry","Var") [23]) (Comb FuncCall ("TransFunctions","transCompleteExpr") [Var 3]),Branch (Pattern ("FlatCurry","Lit") [24]) (Comb FuncCall ("TransFunctions","transCompleteExpr") [Var 3]),Branch (Pattern ("FlatCurry","Comb") [25,26,27]) (Comb FuncCall ("TransFunctions","transCompleteExpr") [Var 3]),Branch (Pattern ("FlatCurry","Let") [28,29]) (Comb FuncCall ("TransFunctions","transCompleteExpr") [Var 3]),Branch (Pattern ("FlatCurry","Free") [30,31]) (Comb FuncCall ("TransFunctions","transCompleteExpr") [Var 3]),Branch (Pattern ("FlatCurry","Or") [32,33]) (Comb FuncCall ("TransFunctions","transCompleteExpr") [Var 3]),Branch (Pattern ("FlatCurry","Typed") [34,35]) (Comb FuncCall ("TransFunctions","transCompleteExpr") [Var 3])])),Func ("TransFunctions","transBody._#lambda65") 7 Private (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","BranchExpr") []]) (FuncType (TCons ("FlatCurry","CaseType") []) (FuncType (TCons ("FlatCurry","Expr") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","BranchExpr") []]) (TCons ("TransFunctions","Mo") [TCons ("TransFunctions","State") [],TCons ("FlatCurry","Expr") []])))))))) (Rule [1,2,3,4,5,6,7] (Let [(8,Comb FuncCall ("TransFunctions","addUnifIntCharRule") [Var 1,Var 7]),(9,Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("TransFunctions","consNameFromPattern") [],Comb FuncCall ("Prelude","head") [Var 1]])] (Comb FuncCall ("TransFunctions","bindM") [Comb FuncCall ("TransFunctions","newBranches") [Var 5,Var 6,Var 4,Var 9],Comb (FuncPartCall 1) ("TransFunctions","transBody._#lambda65._#lambda66") [Var 8,Var 2,Var 3]]))),Func ("TransFunctions","transBody._#lambda65._#lambda66") 4 Private (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","BranchExpr") []]) (FuncType (TCons ("FlatCurry","CaseType") []) (FuncType (TCons ("FlatCurry","Expr") []) (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","BranchExpr") []]) (TCons ("TransFunctions","Mo") [TCons ("TransFunctions","State") [],TCons ("FlatCurry","Expr") []]))))) (Rule [1,2,3,4] (Comb FuncCall ("TransFunctions","bindM") [Comb FuncCall ("TransFunctions","transExpr") [Var 3],Comb (FuncPartCall 1) ("TransFunctions","transBody._#lambda65._#lambda66._#lambda67") [Var 1,Var 2,Var 4]])),Func ("TransFunctions","transBody._#lambda65._#lambda66._#lambda67") 4 Private (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","BranchExpr") []]) (FuncType (TCons ("FlatCurry","CaseType") []) (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","BranchExpr") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Int") []],TCons ("FlatCurry","Expr") []]) (TCons ("TransFunctions","Mo") [TVar 643,TCons ("FlatCurry","Expr") []]))))) (Rule [1,2,3,4] (Case  Flex (Var 4) [Branch (Pattern ("Prelude","(,)") [5,6]) (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("TransFunctions","returnM") [],Comb ConsCall ("FlatCurry","Case") [Var 2,Var 6,Comb FuncCall ("Prelude","++") [Var 1,Var 3]]])])),Func ("TransFunctions","addUnifIntCharRule") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","BranchExpr") []]) (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","BranchExpr") []]) (TCons ("Prelude","[]") [TCons ("FlatCurry","BranchExpr") []]))) (Rule [1,2] (Case  Rigid (Var 1) [Branch (Pattern ("Prelude",":") [3,4]) (Case  Rigid (Var 3) [Branch (Pattern ("FlatCurry","Branch") [5,6]) (Case  Rigid (Var 5) [Branch (Pattern ("FlatCurry","LPattern") [7]) (Case  Rigid (Var 7) [Branch (Pattern ("FlatCurry","Intc") [8]) (Comb FuncCall ("TransFunctions","addUnifIntCharRule.addRule.244") [Comb ConsCall ("Prelude","True") [],Var 1,Var 2,Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("FlatCurry","Charc") [9]) (Comb FuncCall ("TransFunctions","addUnifIntCharRule.addRule.244") [Comb ConsCall ("Prelude","False") [],Var 1,Var 2,Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("FlatCurry","Floatc") [10]) (Var 2)]),Branch (Pattern ("FlatCurry","Pattern") [11,12]) (Var 2)])]),Branch (Pattern ("Prelude","[]") []) (Var 2)])),Func ("TransFunctions","addUnifIntCharRule.matchFun.244") 1 Private (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Names","basics") [],Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'I'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Names","basics") [],Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]])])),Func ("TransFunctions","addUnifIntCharRule.constr.244") 1 Private (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Names","renameQName") [Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Names","prelude") [],Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  'I'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Names","curryPrelude") [],Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]])])),Func ("TransFunctions","addUnifIntCharRule.addRule.244") 4 Private (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","BranchExpr") []]) (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","BranchExpr") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("FlatCurry","Expr") [],TCons ("FlatCurry","Expr") []]]) (TCons ("Prelude","[]") [TCons ("FlatCurry","BranchExpr") []]))))) (Rule [1,2,3,4] (Case  Rigid (Comb ConsCall ("Prelude","(,)") [Var 2,Var 3]) [Branch (Pattern ("Prelude","(,)") [5,6]) (Case  Rigid (Var 5) [Branch (Pattern ("Prelude",":") [7,8]) (Case  Rigid (Var 7) [Branch (Pattern ("FlatCurry","Branch") [9,10]) (Case  Rigid (Var 9) [Branch (Pattern ("FlatCurry","LPattern") [11]) (Case  Rigid (Var 6) [Branch (Pattern ("Prelude",":") [12,13]) (Case  Rigid (Var 12) [Branch (Pattern ("FlatCurry","Branch") [14,15]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("FlatCurry","Branch") [Var 14,Var 15],Comb FuncCall ("TransFunctions","addUnifIntCharRule.addRule.244") [Var 1,Var 8,Var 13,Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("FlatCurry","Lit") [Var 11],Var 15],Var 4]]])]),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("FlatCurry","Branch") [Comb ConsCall ("FlatCurry","Pattern") [Comb FuncCall ("TransFunctions","addUnifIntCharRule.constr.244") [Var 1],Comb ConsCall ("Prelude",":") [Lit (Intc  5000),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("TransFunctions","funcCall") [Comb FuncCall ("TransFunctions","addUnifIntCharRule.matchFun.244") [Var 1],Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("TransFunctions","list2FCList") [],Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Prelude","map") [Comb (FuncPartCall 1) ("TransFunctions","pair2FCPair") []],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","reverse") [],Var 4]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("FlatCurry","Var") [Lit (Intc  5000)],Comb ConsCall ("Prelude",":") [Comb ConsCall ("FlatCurry","Var") [Comb FuncCall ("TransFunctions","constStoreVarIdx") []],Comb ConsCall ("Prelude","[]") []]]]]],Var 3])]),Branch (Pattern ("FlatCurry","Pattern") [16,17]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("FlatCurry","Branch") [Comb ConsCall ("FlatCurry","Pattern") [Comb FuncCall ("TransFunctions","addUnifIntCharRule.constr.244") [Var 1],Comb ConsCall ("Prelude",":") [Lit (Intc  5000),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("TransFunctions","funcCall") [Comb FuncCall ("TransFunctions","addUnifIntCharRule.matchFun.244") [Var 1],Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("TransFunctions","list2FCList") [],Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Prelude","map") [Comb (FuncPartCall 1) ("TransFunctions","pair2FCPair") []],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","reverse") [],Var 4]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("FlatCurry","Var") [Lit (Intc  5000)],Comb ConsCall ("Prelude",":") [Comb ConsCall ("FlatCurry","Var") [Comb FuncCall ("TransFunctions","constStoreVarIdx") []],Comb ConsCall ("Prelude","[]") []]]]]],Var 3])])]),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("FlatCurry","Branch") [Comb ConsCall ("FlatCurry","Pattern") [Comb FuncCall ("TransFunctions","addUnifIntCharRule.constr.244") [Var 1],Comb ConsCall ("Prelude",":") [Lit (Intc  5000),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("TransFunctions","funcCall") [Comb FuncCall ("TransFunctions","addUnifIntCharRule.matchFun.244") [Var 1],Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("TransFunctions","list2FCList") [],Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Prelude","map") [Comb (FuncPartCall 1) ("TransFunctions","pair2FCPair") []],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","reverse") [],Var 4]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("FlatCurry","Var") [Lit (Intc  5000)],Comb ConsCall ("Prelude",":") [Comb ConsCall ("FlatCurry","Var") [Comb FuncCall ("TransFunctions","constStoreVarIdx") []],Comb ConsCall ("Prelude","[]") []]]]]],Var 3])])])),Func ("TransFunctions","consNameFromPattern") 1 Public (FuncType (TCons ("FlatCurry","BranchExpr") []) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","Branch") [2,3]) (Case  Flex (Var 2) [Branch (Pattern ("FlatCurry","Pattern") [4,5]) (Var 4),Branch (Pattern ("FlatCurry","LPattern") [6]) (Case  Rigid (Var 6) [Branch (Pattern ("FlatCurry","Intc") [7]) (Comb FuncCall ("TransFunctions","curryInt") []),Branch (Pattern ("FlatCurry","Floatc") [8]) (Comb FuncCall ("TransFunctions","curryFloat") []),Branch (Pattern ("FlatCurry","Charc") [9]) (Comb FuncCall ("TransFunctions","curryChar") [])])])])),Func ("TransFunctions","transBranch") 1 Public (FuncType (TCons ("FlatCurry","BranchExpr") []) (TCons ("TransFunctions","Mo") [TCons ("TransFunctions","State") [],TCons ("FlatCurry","BranchExpr") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","Branch") [2,3]) (Comb FuncCall ("TransFunctions","bindM") [Comb FuncCall ("TransFunctions","transPattern") [Var 2],Comb (FuncPartCall 1) ("TransFunctions","transBranch._#lambda71") [Var 3]])])),Func ("TransFunctions","transBranch._#lambda71") 2 Private (FuncType (TCons ("FlatCurry","Expr") []) (FuncType (TCons ("FlatCurry","Pattern") []) (TCons ("TransFunctions","Mo") [TCons ("TransFunctions","State") [],TCons ("FlatCurry","BranchExpr") []]))) (Rule [1,2] (Comb FuncCall ("TransFunctions","bindM") [Comb FuncCall ("TransFunctions","transCompleteExpr") [Var 1],Comb (FuncPartCall 1) ("TransFunctions","transBranch._#lambda71._#lambda72") [Var 2]])),Func ("TransFunctions","transBranch._#lambda71._#lambda72") 2 Private (FuncType (TCons ("FlatCurry","Pattern") []) (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("TransFunctions","Mo") [TVar 644,TCons ("FlatCurry","BranchExpr") []]))) (Rule [1,2] (Comb FuncCall ("TransFunctions","returnM") [Comb ConsCall ("FlatCurry","Branch") [Var 1,Var 2]])),Func ("TransFunctions","transPattern") 1 Public (FuncType (TCons ("FlatCurry","Pattern") []) (TCons ("TransFunctions","Mo") [TCons ("TransFunctions","State") [],TCons ("FlatCurry","Pattern") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","Pattern") [2,3]) (Comb FuncCall ("TransFunctions","bindM") [Comb FuncCall ("TransFunctions","renameCons") [Var 2],Comb (FuncPartCall 1) ("TransFunctions","transPattern._#lambda73") [Var 3]]),Branch (Pattern ("FlatCurry","LPattern") [4]) (Comb FuncCall ("TransFunctions","returnM") [Var 1])])),Func ("TransFunctions","transPattern._#lambda73") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("TransFunctions","Mo") [TVar 645,TCons ("FlatCurry","Pattern") []]))) (Rule [1,2] (Comb FuncCall ("TransFunctions","returnM") [Comb ConsCall ("FlatCurry","Pattern") [Var 2,Var 1]])),Func ("TransFunctions","newBranches") 4 Public (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("TransFunctions","Mo") [TCons ("TransFunctions","State") [],TCons ("Prelude","[]") [TCons ("FlatCurry","BranchExpr") []]]))))) (Rule [1,2,3,4] (Comb FuncCall ("TransFunctions","bindM") [Comb FuncCall ("TransFunctions","isDetMode") [],Comb (FuncPartCall 1) ("TransFunctions","newBranches._#lambda74") [Var 3,Var 4,Var 1,Var 2]])),Func ("TransFunctions","newBranches._#lambda74") 5 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (FuncType (TCons ("Prelude","Bool") []) (TCons ("TransFunctions","Mo") [TCons ("TransFunctions","State") [],TCons ("Prelude","[]") [TCons ("FlatCurry","BranchExpr") []]])))))) (Rule [1,2,3,4,5] (Comb FuncCall ("TransFunctions","bindM") [Comb FuncCall ("TransFunctions","getType") [Var 2],Comb (FuncPartCall 1) ("TransFunctions","newBranches._#lambda74._#lambda75") [Var 5,Var 1,Var 3,Var 4]])),Func ("TransFunctions","newBranches._#lambda74._#lambda75") 5 Private (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("TransFunctions","Mo") [TVar 646,TCons ("Prelude","[]") [TCons ("FlatCurry","BranchExpr") []]])))))) (Rule [1,2,3,4,5] (Let [(6,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("List","find") [Comb (FuncPartCall 1) ("Prelude","flip") [Comb (FuncPartCall 2) ("Prelude","==") [],Var 2]],Var 4]),(7,Comb FuncCall ("TransFunctions","newBranches._#lambda74._#lambda75._#selFP5#pos") [Var 6]),(8,Case  Rigid (Var 1) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransFunctions","suppVarIdx") [],Comb ConsCall ("Prelude","[]") []])]),(9,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","break") [Comb (FuncPartCall 1) ("Prelude","flip") [Comb (FuncPartCall 2) ("Prelude","==") [],Var 7]],Var 4]),(10,Comb FuncCall ("TransFunctions","newBranches._#lambda74._#lambda75._#selFP3#vs1") [Var 9]),(11,Comb FuncCall ("TransFunctions","newBranches._#lambda74._#lambda75._#selFP4#vs2") [Var 9]),(12,Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("TransFunctions","lambdaCall") [Var 3],Comb FuncCall ("Prelude","map") [Comb (ConsPartCall 1) ("FlatCurry","Var") [],Comb FuncCall ("Prelude","++") [Var 10,Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","negate") [Lit (Intc  42)],Comb FuncCall ("Prelude","++") [Var 11,Comb FuncCall ("Prelude","++") [Var 8,Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransFunctions","constStoreVarIdx") [],Comb ConsCall ("Prelude","[]") []]]]]]]])] (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("TransFunctions","returnM") [],Comb ConsCall ("Prelude",":") [Comb ConsCall ("FlatCurry","Branch") [Comb ConsCall ("FlatCurry","Pattern") [Comb FuncCall ("Names","mkChoiceName") [Var 5],Comb ConsCall ("Prelude",":") [Lit (Intc  1000),Comb ConsCall ("Prelude",":") [Lit (Intc  1001),Comb ConsCall ("Prelude",":") [Lit (Intc  1002),Comb ConsCall ("Prelude",":") [Lit (Intc  1003),Comb ConsCall ("Prelude","[]") []]]]]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("TransFunctions","liftOr") [],Comb ConsCall ("Prelude",":") [Comb ConsCall ("FlatCurry","Var") [Lit (Intc  1000)],Comb ConsCall ("Prelude",":") [Comb ConsCall ("FlatCurry","Var") [Lit (Intc  1001)],Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransFunctions","newBranches._#lambda74._#lambda75.call.306") [Var 3,Var 8,Var 10,Var 11,Lit (Intc  1002)],Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransFunctions","newBranches._#lambda74._#lambda75.call.306") [Var 3,Var 8,Var 10,Var 11,Lit (Intc  1003)],Comb ConsCall ("Prelude","[]") []]]]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("FlatCurry","Branch") [Comb ConsCall ("FlatCurry","Pattern") [Comb FuncCall ("Names","mkChoicesName") [Var 5],Comb ConsCall ("Prelude",":") [Lit (Intc  1000),Comb ConsCall ("Prelude",":") [Lit (Intc  1001),Comb ConsCall ("Prelude",":") [Lit (Intc  1002),Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("TransFunctions","liftOrs") [],Comb ConsCall ("Prelude",":") [Comb ConsCall ("FlatCurry","Var") [Comb FuncCall ("TransFunctions","constStoreVarIdx") []],Comb ConsCall ("Prelude",":") [Comb ConsCall ("FlatCurry","Var") [Lit (Intc  1000)],Comb ConsCall ("Prelude",":") [Comb ConsCall ("FlatCurry","Var") [Lit (Intc  1001)],Comb ConsCall ("Prelude",":") [Var 12,Comb ConsCall ("Prelude",":") [Comb ConsCall ("FlatCurry","Var") [Lit (Intc  1002)],Comb ConsCall ("Prelude","[]") []]]]]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("FlatCurry","Branch") [Comb ConsCall ("FlatCurry","Pattern") [Comb FuncCall ("Names","mkGuardName") [Var 5],Comb ConsCall ("Prelude",":") [Lit (Intc  1000),Comb ConsCall ("Prelude",":") [Lit (Intc  1001),Comb ConsCall ("Prelude",":") [Lit (Intc  1002),Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("TransFunctions","liftGuard") [],Comb ConsCall ("Prelude",":") [Comb ConsCall ("FlatCurry","Var") [Lit (Intc  1000)],Comb ConsCall ("Prelude",":") [Comb ConsCall ("FlatCurry","Var") [Lit (Intc  1001)],Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransFunctions","newBranches._#lambda74._#lambda75.guardCall.306") [Var 3,Var 8,Var 10,Var 11,Lit (Intc  1001),Lit (Intc  1002)],Comb ConsCall ("Prelude","[]") []]]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("FlatCurry","Branch") [Comb ConsCall ("FlatCurry","Pattern") [Comb FuncCall ("Names","mkFailName") [Var 5],Comb ConsCall ("Prelude",":") [Lit (Intc  1000),Comb ConsCall ("Prelude",":") [Lit (Intc  1001),Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("TransFunctions","liftFail") [],Comb ConsCall ("Prelude",":") [Comb ConsCall ("FlatCurry","Var") [Lit (Intc  1000)],Comb ConsCall ("Prelude",":") [Comb ConsCall ("FlatCurry","Var") [Lit (Intc  1001)],Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("FlatCurry","Branch") [Comb ConsCall ("FlatCurry","Pattern") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","[]") [],Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("TransFunctions","liftFail") [],Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransFunctions","defCover") [],Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransFunctions","defFailInfo") [],Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude","[]") []]]]]]]))),Func ("TransFunctions","newBranches._#lambda74._#lambda75._#selFP5#pos") 1 Private (FuncType (TCons ("Prelude","Maybe") [TCons ("Prelude","Int") []]) (TCons ("Prelude","Int") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","Just") [2]) (Var 2)])),Func ("TransFunctions","newBranches._#lambda74._#lambda75._#selFP3#vs1") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Int") []],TCons ("Prelude","[]") [TCons ("Prelude","Int") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Var 2)])])),Func ("TransFunctions","newBranches._#lambda74._#lambda75._#selFP4#vs2") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Int") []],TCons ("Prelude","[]") [TCons ("Prelude","Int") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Var 5)])])),Func ("TransFunctions","newBranches._#lambda74._#lambda75.call.306") 5 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (FuncType (TCons ("Prelude","Int") []) (TCons ("FlatCurry","Expr") [])))))) (Rule [1,2,3,4,5] (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("TransFunctions","funcCall") [Var 1],Comb FuncCall ("Prelude","map") [Comb (ConsPartCall 1) ("FlatCurry","Var") [],Comb FuncCall ("Prelude","++") [Var 3,Comb ConsCall ("Prelude",":") [Var 5,Comb FuncCall ("Prelude","++") [Var 4,Comb FuncCall ("Prelude","++") [Var 2,Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransFunctions","constStoreVarIdx") [],Comb ConsCall ("Prelude","[]") []]]]]]]])),Func ("TransFunctions","newBranches._#lambda74._#lambda75.combConstr.306") 2 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("FlatCurry","Expr") []))) (Rule [1,2] (Comb FuncCall ("TransFunctions","funcCall") [Comb FuncCall ("TransFunctions","combConstrName") [],Comb ConsCall ("Prelude",":") [Comb ConsCall ("FlatCurry","Var") [Var 1],Comb ConsCall ("Prelude",":") [Comb ConsCall ("FlatCurry","Var") [Var 2],Comb ConsCall ("Prelude","[]") []]]])),Func ("TransFunctions","newBranches._#lambda74._#lambda75.guardCall.306") 6 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("FlatCurry","Expr") []))))))) (Rule [1,2,3,4,5,6] (Comb FuncCall ("TransFunctions","strictCall") [Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("TransFunctions","funcCall") [Var 1],Comb FuncCall ("Prelude","map") [Comb (ConsPartCall 1) ("FlatCurry","Var") [],Comb FuncCall ("Prelude","++") [Var 3,Comb ConsCall ("Prelude",":") [Var 6,Comb FuncCall ("Prelude","++") [Var 4,Var 2]]]]],Comb FuncCall ("TransFunctions","newBranches._#lambda74._#lambda75.combConstr.306") [Var 5,Comb FuncCall ("TransFunctions","constStoreVarIdx") []]])),Func ("TransFunctions","transCompleteExpr") 1 Public (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("TransFunctions","Mo") [TCons ("TransFunctions","State") [],TCons ("FlatCurry","Expr") []])) (Rule [1] (Comb FuncCall ("TransFunctions","bindM") [Comb FuncCall ("TransFunctions","strictSupply") [],Comb (FuncPartCall 1) ("TransFunctions","transCompleteExpr._#lambda76") [Var 1]])),Func ("TransFunctions","transCompleteExpr._#lambda76") 2 Private (FuncType (TCons ("FlatCurry","Expr") []) (FuncType (TCons ("Prelude","Bool") []) (TCons ("TransFunctions","Mo") [TCons ("TransFunctions","State") [],TCons ("FlatCurry","Expr") []]))) (Rule [1,2] (Comb FuncCall ("TransFunctions","bindM") [Comb FuncCall ("TransFunctions","getNextID") [],Comb (FuncPartCall 1) ("TransFunctions","transCompleteExpr._#lambda76._#lambda77") [Var 1,Var 2]])),Func ("TransFunctions","transCompleteExpr._#lambda76._#lambda77") 3 Private (FuncType (TCons ("FlatCurry","Expr") []) (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("TransFunctions","Mo") [TCons ("TransFunctions","State") [],TCons ("FlatCurry","Expr") []])))) (Rule [1,2,3] (Comb FuncCall ("TransFunctions","bindM") [Comb FuncCall ("TransFunctions","transExpr") [Var 1],Comb (FuncPartCall 1) ("TransFunctions","transCompleteExpr._#lambda76._#lambda77._#lambda78") [Var 3,Var 2]])),Func ("TransFunctions","transCompleteExpr._#lambda76._#lambda77._#lambda78") 3 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Int") []],TCons ("FlatCurry","Expr") []]) (TCons ("TransFunctions","Mo") [TCons ("TransFunctions","State") [],TCons ("FlatCurry","Expr") []])))) (Rule [1,2,3] (Case  Flex (Var 3) [Branch (Pattern ("Prelude","(,)") [4,5]) (Let [(6,Case  Rigid (Var 4) [Branch (Pattern ("Prelude","[]") []) (Var 5),Branch (Pattern ("Prelude",":") [7,8]) (Case  Rigid (Var 8) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("TransFunctions","letIdVar") [Var 2],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Var 7,Comb ConsCall ("FlatCurry","Var") [Comb FuncCall ("TransFunctions","suppVarIdx") []]],Comb ConsCall ("Prelude","[]") []]],Var 5]),Branch (Pattern ("Prelude",":") [9,10]) (Comb FuncCall ("Prelude","failed") [])])])] (Comb FuncCall ("TransFunctions","bindM_") [Comb FuncCall ("TransFunctions","setNextID") [Var 1],Comb FuncCall ("TransFunctions","returnM") [Var 6]]))])),Func ("TransFunctions","transExpr") 1 Public (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("TransFunctions","Mo") [TCons ("TransFunctions","State") [],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Int") []],TCons ("FlatCurry","Expr") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","Var") [2]) (Comb FuncCall ("TransFunctions","returnM") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","[]") [],Var 1]]),Branch (Pattern ("FlatCurry","Lit") [3]) (Case  Flex (Var 3) [Branch (Pattern ("FlatCurry","Intc") [4]) (Comb FuncCall ("TransFunctions","returnM") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("TransFunctions","int") [Var 4]]]),Branch (Pattern ("FlatCurry","Floatc") [5]) (Comb FuncCall ("TransFunctions","returnM") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("TransFunctions","float") [Var 5]]]),Branch (Pattern ("FlatCurry","Charc") [6]) (Comb FuncCall ("TransFunctions","returnM") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("TransFunctions","char") [Var 6]]])]),Branch (Pattern ("FlatCurry","Comb") [7,8,9]) (Case  Flex (Var 7) [Branch (Pattern ("FlatCurry","ConsCall") []) (Comb FuncCall ("TransFunctions","bindM") [Comb FuncCall ("TransFunctions","renameCons") [Var 8],Comb (FuncPartCall 1) ("TransFunctions","transExpr._#lambda80") [Var 9]]),Branch (Pattern ("FlatCurry","ConsPartCall") [10]) (Comb FuncCall ("TransFunctions","bindM") [Comb FuncCall ("TransFunctions","isDetMode") [],Comb (FuncPartCall 1) ("TransFunctions","transExpr._#lambda82") [Var 9,Var 10,Var 8]]),Branch (Pattern ("FlatCurry","FuncCall") []) (Comb FuncCall ("TransFunctions","bindM") [Comb FuncCall ("TransFunctions","getCompOption") [Comb (FuncPartCall 1) ("TransFunctions","transExpr._#lambda85") []],Comb (FuncPartCall 1) ("TransFunctions","transExpr._#lambda86") [Var 9,Var 8]]),Branch (Pattern ("FlatCurry","FuncPartCall") [11]) (Comb FuncCall ("TransFunctions","bindM") [Comb FuncCall ("TransFunctions","getCompOption") [Comb (FuncPartCall 1) ("TransFunctions","transExpr._#lambda93") []],Comb (FuncPartCall 1) ("TransFunctions","transExpr._#lambda94") [Var 9,Var 11,Var 8]])]),Branch (Pattern ("FlatCurry","Let") [12,13]) (Let [(14,Comb FuncCall ("Prelude","unzip") [Var 12]),(15,Comb FuncCall ("TransFunctions","transExpr._#selFP7#vs") [Var 14]),(16,Comb FuncCall ("TransFunctions","transExpr._#selFP8#es") [Var 14])] (Comb FuncCall ("TransFunctions","bindM") [Comb FuncCall ("TransFunctions","bindM") [Comb FuncCall ("TransFunctions","mapM") [Comb (FuncPartCall 1) ("TransFunctions","transExpr") [],Var 16],Comb (FuncPartCall 1) ("TransFunctions","unzipArgs") []],Comb (FuncPartCall 1) ("TransFunctions","transExpr._#lambda101") [Var 13,Var 15]])),Branch (Pattern ("FlatCurry","Or") [17,18]) (Comb FuncCall ("TransFunctions","transExpr") [Comb FuncCall ("TransFunctions","qmark") [Var 17,Var 18]]),Branch (Pattern ("FlatCurry","Free") [19,20]) (Comb FuncCall ("TransFunctions","bindM") [Comb FuncCall ("TransFunctions","transExpr") [Var 20],Comb (FuncPartCall 1) ("TransFunctions","transExpr._#lambda103") [Var 19]]),Branch (Pattern ("FlatCurry","Case") [21,22,23]) (Comb FuncCall ("TransFunctions","returnM") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","[]") [],Var 1]]),Branch (Pattern ("FlatCurry","Typed") [24,25]) (Comb FuncCall ("TransFunctions","bindM") [Comb FuncCall ("TransFunctions","isDetMode") [],Comb (FuncPartCall 1) ("TransFunctions","transExpr._#lambda106") [Var 24,Var 25]])])),Func ("TransFunctions","transExpr._#lambda80") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","Expr") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("TransFunctions","Mo") [TCons ("TransFunctions","State") [],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Int") []],TCons ("FlatCurry","Expr") []]]))) (Rule [1,2] (Comb FuncCall ("TransFunctions","bindM") [Comb FuncCall ("TransFunctions","bindM") [Comb FuncCall ("TransFunctions","mapM") [Comb (FuncPartCall 1) ("TransFunctions","transExpr") [],Var 1],Comb (FuncPartCall 1) ("TransFunctions","unzipArgs") []],Comb (FuncPartCall 1) ("TransFunctions","transExpr._#lambda80._#lambda81") [Var 2]])),Func ("TransFunctions","transExpr._#lambda80._#lambda81") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Int") []],TCons ("Prelude","[]") [TCons ("FlatCurry","Expr") []]]) (TCons ("TransFunctions","Mo") [TCons ("TransFunctions","State") [],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Int") []],TCons ("FlatCurry","Expr") []]]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb FuncCall ("TransFunctions","genIds") [Var 3,Comb ConsCall ("FlatCurry","Comb") [Comb ConsCall ("FlatCurry","ConsCall") [],Var 1,Var 4]])])),Func ("TransFunctions","transExpr._#lambda82") 4 Private (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","Expr") []]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","Bool") []) (TCons ("TransFunctions","Mo") [TCons ("TransFunctions","State") [],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Int") []],TCons ("FlatCurry","Expr") []]]))))) (Rule [1,2,3,4] (Comb FuncCall ("TransFunctions","bindM") [Comb FuncCall ("TransFunctions","renameCons") [Var 3],Comb (FuncPartCall 1) ("TransFunctions","transExpr._#lambda82._#lambda83") [Var 4,Var 1,Var 2]])),Func ("TransFunctions","transExpr._#lambda82._#lambda83") 4 Private (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","Expr") []]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("TransFunctions","Mo") [TCons ("TransFunctions","State") [],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Int") []],TCons ("FlatCurry","Expr") []]]))))) (Rule [1,2,3,4] (Comb FuncCall ("TransFunctions","bindM") [Comb FuncCall ("TransFunctions","bindM") [Comb FuncCall ("TransFunctions","mapM") [Comb (FuncPartCall 1) ("TransFunctions","transExpr") [],Var 2],Comb (FuncPartCall 1) ("TransFunctions","unzipArgs") []],Comb (FuncPartCall 1) ("TransFunctions","transExpr._#lambda82._#lambda83._#lambda84") [Var 1,Var 3,Var 4]])),Func ("TransFunctions","transExpr._#lambda82._#lambda83._#lambda84") 4 Private (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Int") []],TCons ("Prelude","[]") [TCons ("FlatCurry","Expr") []]]) (TCons ("TransFunctions","Mo") [TCons ("TransFunctions","State") [],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Int") []],TCons ("FlatCurry","Expr") []]]))))) (Rule [1,2,3,4] (Case  Flex (Var 4) [Branch (Pattern ("Prelude","(,)") [5,6]) (Comb FuncCall ("TransFunctions","genIds") [Var 5,Comb FuncCall ("TransFunctions","myWrap") [Var 1,Comb ConsCall ("Prelude","True") [],Comb ConsCall ("Base","D") [],Comb ConsCall ("Base","FO") [],Var 2,Comb ConsCall ("FlatCurry","Comb") [Comb ConsCall ("FlatCurry","ConsPartCall") [Var 2],Var 3,Var 6]]])])),Func ("TransFunctions","transExpr._#lambda85") 1 Private (FuncType (TCons ("CompilerOpts","Options") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Comb FuncCall ("Prelude",">") [Comb FuncCall ("CompilerOpts","_#selR@Options.optOptimization") [Var 1],Comb ConsCall ("CompilerOpts","OptimNone") []])),Func ("TransFunctions","transExpr._#lambda86") 3 Private (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","Expr") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","Bool") []) (TCons ("TransFunctions","Mo") [TCons ("TransFunctions","State") [],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Int") []],TCons ("FlatCurry","Expr") []]])))) (Rule [1,2,3] (Comb FuncCall ("TransFunctions","bindM") [Comb FuncCall ("TransFunctions","getNDClass") [Var 2],Comb (FuncPartCall 1) ("TransFunctions","transExpr._#lambda86._#lambda87") [Var 1,Var 3,Var 2]])),Func ("TransFunctions","transExpr._#lambda86._#lambda87") 4 Private (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","Expr") []]) (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Base","NDClass") []) (TCons ("TransFunctions","Mo") [TCons ("TransFunctions","State") [],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Int") []],TCons ("FlatCurry","Expr") []]]))))) (Rule [1,2,3,4] (Comb FuncCall ("TransFunctions","bindM") [Comb FuncCall ("TransFunctions","getFunHOClass") [Var 3],Comb (FuncPartCall 1) ("TransFunctions","transExpr._#lambda86._#lambda87._#lambda88") [Var 1,Var 4,Var 2,Var 3]])),Func ("TransFunctions","transExpr._#lambda86._#lambda87._#lambda88") 5 Private (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","Expr") []]) (FuncType (TCons ("Base","NDClass") []) (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Base","HOClass") []) (TCons ("TransFunctions","Mo") [TCons ("TransFunctions","State") [],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Int") []],TCons ("FlatCurry","Expr") []]])))))) (Rule [1,2,3,4,5] (Comb FuncCall ("TransFunctions","bindM") [Comb FuncCall ("TransFunctions","isDetMode") [],Comb (FuncPartCall 1) ("TransFunctions","transExpr._#lambda86._#lambda87._#lambda88._#lambda89") [Var 1,Var 5,Var 2,Var 3,Var 4]])),Func ("TransFunctions","transExpr._#lambda86._#lambda87._#lambda88._#lambda89") 6 Private (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","Expr") []]) (FuncType (TCons ("Base","HOClass") []) (FuncType (TCons ("Base","NDClass") []) (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","Bool") []) (TCons ("TransFunctions","Mo") [TCons ("TransFunctions","State") [],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Int") []],TCons ("FlatCurry","Expr") []]]))))))) (Rule [1,2,3,4,5,6] (Comb FuncCall ("TransFunctions","bindM") [Comb FuncCall ("TransFunctions","renameFun") [Var 5],Comb (FuncPartCall 1) ("TransFunctions","transExpr._#lambda86._#lambda87._#lambda88._#lambda89._#lambda90") [Var 6,Var 1,Var 2,Var 3,Var 4]])),Func ("TransFunctions","transExpr._#lambda86._#lambda87._#lambda88._#lambda89._#lambda90") 6 Private (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","Expr") []]) (FuncType (TCons ("Base","HOClass") []) (FuncType (TCons ("Base","NDClass") []) (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("TransFunctions","Mo") [TCons ("TransFunctions","State") [],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Int") []],TCons ("FlatCurry","Expr") []]]))))))) (Rule [1,2,3,4,5,6] (Comb FuncCall ("TransFunctions","bindM") [Comb FuncCall ("TransFunctions","bindM") [Comb FuncCall ("TransFunctions","mapM") [Comb (FuncPartCall 1) ("TransFunctions","transExpr") [],Var 2],Comb (FuncPartCall 1) ("TransFunctions","unzipArgs") []],Comb (FuncPartCall 1) ("TransFunctions","transExpr._#lambda86._#lambda87._#lambda88._#lambda89._#lambda90._#lambda91") [Var 1,Var 3,Var 4,Var 5,Var 6]])),Func ("TransFunctions","transExpr._#lambda86._#lambda87._#lambda88._#lambda89._#lambda90._#lambda91") 6 Private (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Base","HOClass") []) (FuncType (TCons ("Base","NDClass") []) (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Int") []],TCons ("Prelude","[]") [TCons ("FlatCurry","Expr") []]]) (TCons ("TransFunctions","Mo") [TCons ("TransFunctions","State") [],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Int") []],TCons ("FlatCurry","Expr") []]]))))))) (Rule [1,2,3,4,5,6] (Case  Flex (Var 6) [Branch (Pattern ("Prelude","(,)") [7,8]) (Case  Rigid (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","==") [Var 3,Comb ConsCall ("Base","D") []],Comb FuncCall ("Prelude","&&") [Var 4,Comb FuncCall ("Prelude","||") [Comb FuncCall ("Prelude","==") [Var 2,Comb ConsCall ("Base","FO") []],Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","==") [Var 2,Comb ConsCall ("Base","HO") []],Var 1]]]]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("TransFunctions","genIds") [Var 7,Comb ConsCall ("FlatCurry","Comb") [Comb ConsCall ("FlatCurry","FuncCall") [],Var 5,Comb FuncCall ("Prelude","++") [Var 8,Comb ConsCall ("Prelude",":") [Comb ConsCall ("FlatCurry","Var") [Comb FuncCall ("TransFunctions","constStoreVarIdx") []],Comb ConsCall ("Prelude","[]") []]]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("TransFunctions","bindM") [Comb FuncCall ("TransFunctions","takeNextID") [],Comb (FuncPartCall 1) ("TransFunctions","transExpr._#lambda86._#lambda87._#lambda88._#lambda89._#lambda90._#lambda91._#lambda92") [Var 8,Var 7,Var 5]])])])),Func ("TransFunctions","transExpr._#lambda86._#lambda87._#lambda88._#lambda89._#lambda90._#lambda91._#lambda92") 4 Private (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","Expr") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","Int") []) (TCons ("TransFunctions","Mo") [TCons ("TransFunctions","State") [],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Int") []],TCons ("FlatCurry","Expr") []]]))))) (Rule [1,2,3,4] (Comb FuncCall ("TransFunctions","genIds") [Comb ConsCall ("Prelude",":") [Var 4,Var 2],Comb ConsCall ("FlatCurry","Comb") [Comb ConsCall ("FlatCurry","FuncCall") [],Var 3,Comb FuncCall ("Prelude","++") [Var 1,Comb ConsCall ("Prelude",":") [Comb ConsCall ("FlatCurry","Var") [Var 4],Comb ConsCall ("Prelude",":") [Comb ConsCall ("FlatCurry","Var") [Comb FuncCall ("TransFunctions","constStoreVarIdx") []],Comb ConsCall ("Prelude","[]") []]]]]])),Func ("TransFunctions","transExpr._#lambda93") 1 Private (FuncType (TCons ("CompilerOpts","Options") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Comb FuncCall ("Prelude",">") [Comb FuncCall ("CompilerOpts","_#selR@Options.optOptimization") [Var 1],Comb ConsCall ("CompilerOpts","OptimNone") []])),Func ("TransFunctions","transExpr._#lambda94") 4 Private (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","Expr") []]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","Bool") []) (TCons ("TransFunctions","Mo") [TCons ("TransFunctions","State") [],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Int") []],TCons ("FlatCurry","Expr") []]]))))) (Rule [1,2,3,4] (Comb FuncCall ("TransFunctions","bindM") [Comb FuncCall ("TransFunctions","getNDClass") [Var 3],Comb (FuncPartCall 1) ("TransFunctions","transExpr._#lambda94._#lambda95") [Var 1,Var 2,Var 4,Var 3]])),Func ("TransFunctions","transExpr._#lambda94._#lambda95") 5 Private (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","Expr") []]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Base","NDClass") []) (TCons ("TransFunctions","Mo") [TCons ("TransFunctions","State") [],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Int") []],TCons ("FlatCurry","Expr") []]])))))) (Rule [1,2,3,4,5] (Comb FuncCall ("TransFunctions","bindM") [Comb FuncCall ("TransFunctions","getFunHOClass") [Var 4],Comb (FuncPartCall 1) ("TransFunctions","transExpr._#lambda94._#lambda95._#lambda96") [Var 1,Var 2,Var 5,Var 3,Var 4]])),Func ("TransFunctions","transExpr._#lambda94._#lambda95._#lambda96") 6 Private (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","Expr") []]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Base","NDClass") []) (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Base","HOClass") []) (TCons ("TransFunctions","Mo") [TCons ("TransFunctions","State") [],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Int") []],TCons ("FlatCurry","Expr") []]]))))))) (Rule [1,2,3,4,5,6] (Comb FuncCall ("TransFunctions","bindM") [Comb FuncCall ("TransFunctions","isDetMode") [],Comb (FuncPartCall 1) ("TransFunctions","transExpr._#lambda94._#lambda95._#lambda96._#lambda97") [Var 1,Var 6,Var 2,Var 3,Var 4,Var 5]])),Func ("TransFunctions","transExpr._#lambda94._#lambda95._#lambda96._#lambda97") 7 Private (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","Expr") []]) (FuncType (TCons ("Base","HOClass") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Base","NDClass") []) (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","Bool") []) (TCons ("TransFunctions","Mo") [TCons ("TransFunctions","State") [],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Int") []],TCons ("FlatCurry","Expr") []]])))))))) (Rule [1,2,3,4,5,6,7] (Comb FuncCall ("TransFunctions","bindM") [Comb FuncCall ("TransFunctions","renameFun") [Var 6],Comb (FuncPartCall 1) ("TransFunctions","transExpr._#lambda94._#lambda95._#lambda96._#lambda97._#lambda98") [Var 7,Var 1,Var 2,Var 3,Var 4,Var 5]])),Func ("TransFunctions","transExpr._#lambda94._#lambda95._#lambda96._#lambda97._#lambda98") 7 Private (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","Expr") []]) (FuncType (TCons ("Base","HOClass") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Base","NDClass") []) (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("TransFunctions","Mo") [TCons ("TransFunctions","State") [],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Int") []],TCons ("FlatCurry","Expr") []]])))))))) (Rule [1,2,3,4,5,6,7] (Comb FuncCall ("TransFunctions","bindM") [Comb FuncCall ("TransFunctions","bindM") [Comb FuncCall ("TransFunctions","mapM") [Comb (FuncPartCall 1) ("TransFunctions","transExpr") [],Var 2],Comb (FuncPartCall 1) ("TransFunctions","unzipArgs") []],Comb (FuncPartCall 1) ("TransFunctions","transExpr._#lambda94._#lambda95._#lambda96._#lambda97._#lambda98._#lambda99") [Var 1,Var 3,Var 4,Var 5,Var 6,Var 7]])),Func ("TransFunctions","transExpr._#lambda94._#lambda95._#lambda96._#lambda97._#lambda98._#lambda99") 7 Private (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Base","HOClass") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Base","NDClass") []) (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Int") []],TCons ("Prelude","[]") [TCons ("FlatCurry","Expr") []]]) (TCons ("TransFunctions","Mo") [TCons ("TransFunctions","State") [],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Int") []],TCons ("FlatCurry","Expr") []]])))))))) (Rule [1,2,3,4,5,6,7] (Case  Flex (Var 7) [Branch (Pattern ("Prelude","(,)") [8,9]) (Comb FuncCall ("TransFunctions","genIds") [Var 8,Comb FuncCall ("TransFunctions","myWrap") [Var 1,Var 5,Var 4,Var 2,Var 3,Comb ConsCall ("FlatCurry","Comb") [Comb ConsCall ("FlatCurry","FuncPartCall") [Var 3],Var 6,Var 9]]])])),Func ("TransFunctions","transExpr._#selFP7#vs") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Int") []],TCons ("Prelude","[]") [TCons ("FlatCurry","Expr") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("TransFunctions","transExpr._#selFP8#es") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Int") []],TCons ("Prelude","[]") [TCons ("FlatCurry","Expr") []]]) (TCons ("Prelude","[]") [TCons ("FlatCurry","Expr") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("TransFunctions","transExpr._#lambda101") 3 Private (FuncType (TCons ("FlatCurry","Expr") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Int") []],TCons ("Prelude","[]") [TCons ("FlatCurry","Expr") []]]) (TCons ("TransFunctions","Mo") [TCons ("TransFunctions","State") [],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Int") []],TCons ("FlatCurry","Expr") []]])))) (Rule [1,2,3] (Case  Flex (Var 3) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb FuncCall ("TransFunctions","bindM") [Comb FuncCall ("TransFunctions","transExpr") [Var 1],Comb (FuncPartCall 1) ("TransFunctions","transExpr._#lambda101._#lambda102") [Var 5,Var 4,Var 2]])])),Func ("TransFunctions","transExpr._#lambda101._#lambda102") 4 Private (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","Expr") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Int") []],TCons ("FlatCurry","Expr") []]) (TCons ("TransFunctions","Mo") [TCons ("TransFunctions","State") [],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Int") []],TCons ("FlatCurry","Expr") []]]))))) (Rule [1,2,3,4] (Case  Flex (Var 4) [Branch (Pattern ("Prelude","(,)") [5,6]) (Comb FuncCall ("TransFunctions","genIds") [Comb FuncCall ("Prelude","++") [Var 2,Var 5],Comb ConsCall ("FlatCurry","Let") [Comb FuncCall ("Prelude","zip") [Var 3,Var 1],Var 6]])])),Func ("TransFunctions","transExpr._#lambda103") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Int") []],TCons ("FlatCurry","Expr") []]) (TCons ("TransFunctions","Mo") [TCons ("TransFunctions","State") [],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Int") []],TCons ("FlatCurry","Expr") []]]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb FuncCall ("TransFunctions","bindM") [Comb FuncCall ("TransFunctions","takeNextIDs") [Comb FuncCall ("Prelude","length") [Var 1]],Comb (FuncPartCall 1) ("TransFunctions","transExpr._#lambda103._#lambda104") [Var 4,Var 3,Var 1]])])),Func ("TransFunctions","transExpr._#lambda103._#lambda104") 4 Private (FuncType (TCons ("FlatCurry","Expr") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("TransFunctions","Mo") [TCons ("TransFunctions","State") [],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Int") []],TCons ("FlatCurry","Expr") []]]))))) (Rule [1,2,3,4] (Comb FuncCall ("TransFunctions","genIds") [Comb FuncCall ("Prelude","++") [Var 2,Var 4],Comb ConsCall ("FlatCurry","Let") [Comb FuncCall ("Prelude","zipWith") [Comb (FuncPartCall 2) ("TransFunctions","transExpr._#lambda103._#lambda104._#lambda105") [],Var 3,Var 4],Var 1]])),Func ("TransFunctions","transExpr._#lambda103._#lambda104._#lambda105") 2 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","Expr") []]))) (Rule [1,2] (Comb ConsCall ("Prelude","(,)") [Var 1,Comb FuncCall ("TransFunctions","generate") [Comb ConsCall ("FlatCurry","Var") [Var 2]]])),Func ("TransFunctions","transExpr._#lambda106") 3 Private (FuncType (TCons ("FlatCurry","Expr") []) (FuncType (TCons ("FlatCurry","TypeExpr") []) (FuncType (TCons ("Prelude","Bool") []) (TCons ("TransFunctions","Mo") [TCons ("TransFunctions","State") [],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Int") []],TCons ("FlatCurry","Expr") []]])))) (Rule [1,2,3] (Comb FuncCall ("TransFunctions","bindM") [Comb FuncCall ("TransFunctions","transExpr") [Var 1],Comb (FuncPartCall 1) ("TransFunctions","transExpr._#lambda106._#lambda107") [Var 3,Var 2]])),Func ("TransFunctions","transExpr._#lambda106._#lambda107") 3 Private (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("FlatCurry","TypeExpr") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Int") []],TCons ("FlatCurry","Expr") []]) (TCons ("TransFunctions","Mo") [TCons ("TransFunctions","State") [],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Int") []],TCons ("FlatCurry","Expr") []]])))) (Rule [1,2,3] (Case  Flex (Var 3) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb FuncCall ("TransFunctions","genIds") [Var 4,Comb ConsCall ("FlatCurry","Typed") [Var 5,Comb FuncCall ("TransFunctions","check42") [Comb FuncCall ("TransFunctions","transExprType") [Var 1],Var 2]]])])),Func ("TransFunctions","genIds") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("TransFunctions","Mo") [TCons ("TransFunctions","State") [],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Int") []],TCons ("FlatCurry","Expr") []]]))) (Rule [1,2] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("TransFunctions","returnM") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","[]") [],Var 2]]),Branch (Pattern ("Prelude",":") [3,4]) (Comb FuncCall ("TransFunctions","bindM") [Comb FuncCall ("TransFunctions","strictSupply") [],Comb (FuncPartCall 1) ("TransFunctions","genIds._#lambda108") [Var 2,Var 1]])])),Func ("TransFunctions","genIds._#lambda108") 3 Private (FuncType (TCons ("FlatCurry","Expr") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (FuncType (TCons ("Prelude","Bool") []) (TCons ("TransFunctions","Mo") [TCons ("TransFunctions","State") [],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Int") []],TCons ("FlatCurry","Expr") []]])))) (Rule [1,2,3] (Comb FuncCall ("TransFunctions","bindM") [Comb FuncCall ("TransFunctions","getNextID") [],Comb (FuncPartCall 1) ("TransFunctions","genIds._#lambda108._#lambda109") [Var 1,Var 2,Var 3]])),Func ("TransFunctions","genIds._#lambda108._#lambda109") 4 Private (FuncType (TCons ("FlatCurry","Expr") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("TransFunctions","Mo") [TCons ("TransFunctions","State") [],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Int") []],TCons ("FlatCurry","Expr") []]]))))) (Rule [1,2,3,4] (Let [(5,Comb FuncCall ("Splits","mkSplits") [Var 4,Var 2]),(6,Comb FuncCall ("TransFunctions","genIds._#lambda108._#lambda109._#selFP10#vroot") [Var 5]),(7,Comb FuncCall ("TransFunctions","genIds._#lambda108._#lambda109._#selFP11#v'") [Var 5]),(8,Comb FuncCall ("TransFunctions","genIds._#lambda108._#lambda109._#selFP12#vs") [Var 5])] (Comb FuncCall ("TransFunctions","bindM_") [Comb FuncCall ("TransFunctions","setNextID") [Var 7],Comb FuncCall ("TransFunctions","returnM") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Var 6,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("TransFunctions","genIds._#lambda108._#lambda109.addSplit.425") [Var 3],Var 1,Var 8]]]]))),Func ("TransFunctions","genIds._#lambda108._#lambda109._#selFP10#vroot") 1 Private (FuncType (TCons ("Prelude","(,,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","(,,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") [],TCons ("Prelude","Int") []]]]) (TCons ("Prelude","Int") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,)") [2,3,4]) (Var 2)])),Func ("TransFunctions","genIds._#lambda108._#lambda109._#selFP11#v'") 1 Private (FuncType (TCons ("Prelude","(,,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","(,,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") [],TCons ("Prelude","Int") []]]]) (TCons ("Prelude","Int") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,)") [2,3,4]) (Var 3)])),Func ("TransFunctions","genIds._#lambda108._#lambda109._#selFP12#vs") 1 Private (FuncType (TCons ("Prelude","(,,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","(,,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") [],TCons ("Prelude","Int") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") [],TCons ("Prelude","Int") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,)") [2,3,4]) (Var 4)])),Func ("TransFunctions","genIds._#lambda108._#lambda109.addSplit.425") 3 Private (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","(,,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") [],TCons ("Prelude","Int") []]) (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("FlatCurry","Expr") [])))) (Rule [1,2,3] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","(,,)") [4,5,6]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("TransFunctions","letIdVar") [Var 1],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Var 5,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("TransFunctions","leftSupply") [],Comb ConsCall ("Prelude",":") [Comb ConsCall ("FlatCurry","Var") [Var 4],Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Var 6,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("TransFunctions","rightSupply") [],Comb ConsCall ("Prelude",":") [Comb ConsCall ("FlatCurry","Var") [Var 4],Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude","[]") []]]],Var 3])])),Func ("TransFunctions","idVar") 0 Public (TCons ("Prelude","Int") []) (Rule [] (Lit (Intc  2000))),Func ("TransFunctions","suppVarIdx") 0 Public (TCons ("Prelude","Int") []) (Rule [] (Lit (Intc  3000))),Func ("TransFunctions","constStoreVarIdx") 0 Public (TCons ("Prelude","Int") []) (Rule [] (Lit (Intc  3500))),Func ("TransFunctions","freshVars") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []])) (Rule [1] (Comb FuncCall ("Prelude","filter") [Comb (FuncPartCall 1) ("Prelude","flip") [Comb (FuncPartCall 1) ("Prelude","elem") [],Var 1],Comb FuncCall ("Prelude","enumFrom") [Lit (Intc  0)]])),Func ("TransFunctions","unzipArgs") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Int") []],TVar 0]]) (TCons ("TransFunctions","Mo") [TCons ("TransFunctions","State") [],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Int") []],TCons ("Prelude","[]") [TVar 0]]])) (Rule [1] (Let [(2,Comb FuncCall ("Prelude","unzip") [Var 1]),(3,Comb FuncCall ("TransFunctions","unzipArgs._#selFP14#is") [Var 2]),(4,Comb FuncCall ("TransFunctions","unzipArgs._#selFP15#es") [Var 2])] (Comb FuncCall ("TransFunctions","returnM") [Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Prelude","concat") [Var 3],Var 4]]))),Func ("TransFunctions","unzipArgs._#selFP14#is") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Int") []]],TCons ("Prelude","[]") [TVar 623]]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Int") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("TransFunctions","unzipArgs._#selFP15#es") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Int") []]],TCons ("Prelude","[]") [TVar 623]]) (TCons ("Prelude","[]") [TVar 623])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("TransFunctions","myWrap") 6 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Base","NDClass") []) (FuncType (TCons ("Base","HOClass") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("FlatCurry","Expr") []))))))) (Rule [1,2,3,4,5,6] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("TransFunctions","wrapCs") [Var 5,Var 6]),Branch (Pattern ("Prelude","False") []) (Let [(7,Case  Rigid (Comb FuncCall ("Prelude","&&") [Var 2,Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","==") [Var 3,Comb ConsCall ("Base","D") []],Comb FuncCall ("Prelude","==") [Var 4,Comb ConsCall ("Base","FO") []]]]) [Branch (Pattern ("Prelude","True") []) (Comb (FuncPartCall 1) ("TransFunctions","wrapDX") []),Branch (Pattern ("Prelude","False") []) (Comb (FuncPartCall 1) ("TransFunctions","wrapNX") [])])] (Comb FuncCall ("TransFunctions","newWrap") [Var 5,Var 7,Comb FuncCall ("TransFunctions","wrapCs") [Var 5,Var 6]]))])),Func ("TransFunctions","wrapCs") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("FlatCurry","Expr") []))) (Rule [1,2] (Let [(3,Case  Rigid (Var 2) [Branch (Pattern ("FlatCurry","Comb") [4,5,6]) (Case  Rigid (Var 4) [Branch (Pattern ("FlatCurry","ConsPartCall") [7]) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("FlatCurry","FuncCall") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("FlatCurry","ConsCall") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("FlatCurry","FuncPartCall") [8]) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("FlatCurry","Var") [9]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("FlatCurry","Lit") [10]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("FlatCurry","Let") [11,12]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("FlatCurry","Free") [13,14]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("FlatCurry","Or") [15,16]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("FlatCurry","Case") [17,18,19]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("FlatCurry","Typed") [20,21]) (Comb ConsCall ("Prelude","False") [])])] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 1,Lit (Intc  1)]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 3) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("TransFunctions","addCs") [Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransFunctions","funId") [],Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude","[]") []]]]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude",">") [Var 1,Lit (Intc  1)]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("TransFunctions","addCs") [Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransFunctions","wrapCs.mkWraps.453") [Comb FuncCall ("Prelude","-") [Var 1,Lit (Intc  1)],Case  Rigid (Var 3) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("TransFunctions","addCs") [Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransFunctions","funId") [],Comb ConsCall ("Prelude","[]") []]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("TransFunctions","funId") [])]],Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude","[]") []]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])]))),Func ("TransFunctions","wrapCs.mkWraps.453") 2 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("FlatCurry","Expr") []))) (Rule [1,2] (Case  Rigid (Comb FuncCall ("Prelude","<") [Var 1,Lit (Intc  2)]) [Branch (Pattern ("Prelude","True") []) (Var 2),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("TransFunctions","wrapCs.mkWraps.453") [Comb FuncCall ("Prelude","-") [Var 1,Lit (Intc  1)],Comb FuncCall ("TransFunctions","addCs") [Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude","[]") []]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])),Func ("TransFunctions","newWrap") 3 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","Expr") []]) (TCons ("FlatCurry","Expr") [])) (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("FlatCurry","Expr") [])))) (Rule [1,2,3] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 1,Lit (Intc  0)]) [Branch (Pattern ("Prelude","True") []) (Var 3),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 1,Lit (Intc  1)]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","apply") [Var 2,Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransFunctions","funId") [],Comb ConsCall ("Prelude",":") [Var 3,Comb ConsCall ("Prelude","[]") []]]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 1,Lit (Intc  2)]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("TransFunctions","wrapDX") [Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","apply") [Var 2,Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransFunctions","funId") [],Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude",":") [Var 3,Comb ConsCall ("Prelude","[]") []]]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 1,Lit (Intc  3)]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("TransFunctions","wrapDX") [Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransFunctions","wrapDX") [Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","apply") [Var 2,Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransFunctions","funId") [],Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude",":") [Var 3,Comb ConsCall ("Prelude","[]") []]]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 1,Lit (Intc  4)]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("TransFunctions","wrapDX") [Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransFunctions","wrapDX") [Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransFunctions","wrapDX") [Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","apply") [Var 2,Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransFunctions","funId") [],Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude",":") [Var 3,Comb ConsCall ("Prelude","[]") []]]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude",">") [Var 1,Lit (Intc  4)]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("TransFunctions","wrapDX") [Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransFunctions","newWrap.wraps.471") [Comb FuncCall ("Prelude","-") [Var 1,Lit (Intc  1)],Comb FuncCall ("Prelude","apply") [Var 2,Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransFunctions","funId") [],Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude",":") [Var 3,Comb ConsCall ("Prelude","[]") []]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])])])])),Func ("TransFunctions","newWrap.wraps.471") 2 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("FlatCurry","Expr") []))) (Rule [1,2] (Case  Rigid (Comb FuncCall ("Prelude","<=") [Var 1,Lit (Intc  1)]) [Branch (Pattern ("Prelude","True") []) (Var 2),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("TransFunctions","wrapDX") [Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransFunctions","newWrap.wraps.471") [Comb FuncCall ("Prelude","-") [Var 1,Lit (Intc  1)],Var 2],Comb ConsCall ("Prelude","[]") []]])])),Func ("TransFunctions","wrapDX") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","Expr") []]) (TCons ("FlatCurry","Expr") [])) (Rule [1] (Comb FuncCall ("TransFunctions","fun") [Lit (Intc  2),Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Names","basics") [],Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'D'),Comb ConsCall ("Prelude",":") [Lit (Charc  'X'),Comb ConsCall ("Prelude","[]") []]]]]]]],Var 1])),Func ("TransFunctions","wrapNX") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","Expr") []]) (TCons ("FlatCurry","Expr") [])) (Rule [1] (Comb FuncCall ("TransFunctions","fun") [Lit (Intc  2),Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Names","basics") [],Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'N'),Comb ConsCall ("Prelude",":") [Lit (Charc  'X'),Comb ConsCall ("Prelude","[]") []]]]]]]],Var 1])),Func ("TransFunctions","addCs") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","Expr") []]) (TCons ("FlatCurry","Expr") [])) (Rule [1] (Comb FuncCall ("TransFunctions","fun") [Lit (Intc  2),Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Names","basics") [],Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude","[]") []]]]]]]]]],Var 1])),Func ("TransFunctions","funId") 0 Public (TCons ("FlatCurry","Expr") []) (Rule [] (Comb FuncCall ("TransFunctions","fun") [Lit (Intc  1),Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Names","prelude") [],Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude","[]") []])),Func ("TransFunctions","letIdVar") 1 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","Expr") []]]) (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("FlatCurry","Expr") [])))) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","True") []) (Comb (FuncPartCall 2) ("TransFunctions","strictLet") []),Branch (Pattern ("Prelude","False") []) (Comb (FuncPartCall 2) ("TransFunctions","lazyLet") [])])),Func ("TransFunctions","curryInt") 0 Public (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (Rule [] (Comb FuncCall ("Names","renameQName") [Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Names","prelude") [],Comb ConsCall ("Prelude",":") [Lit (Charc  'I'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude","[]") []]]]]])),Func ("TransFunctions","curryFloat") 0 Public (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (Rule [] (Comb FuncCall ("Names","renameQName") [Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Names","prelude") [],Comb ConsCall ("Prelude",":") [Lit (Charc  'F'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude","[]") []]]]]]]])),Func ("TransFunctions","curryChar") 0 Public (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (Rule [] (Comb FuncCall ("Names","renameQName") [Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Names","prelude") [],Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude","[]") []]]]]]])),Func ("TransFunctions","combConstrName") 0 Public (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (Rule [] (Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Names","basics") [],Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude","[]") []]]]]]])),Func ("TransFunctions","tOrRef") 0 Public (TCons ("FlatCurry","TypeExpr") []) (Rule [] (Comb ConsCall ("FlatCurry","TCons") [Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Names","basics") [],Comb ConsCall ("Prelude",":") [Lit (Charc  'I'),Comb ConsCall ("Prelude",":") [Lit (Charc  'D'),Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude","[]") []])),Func ("TransFunctions","tConstraint") 0 Public (TCons ("FlatCurry","TypeExpr") []) (Rule [] (Comb ConsCall ("FlatCurry","TCons") [Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Names","basics") [],Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]],Comb ConsCall ("Prelude","[]") []])),Func ("TransFunctions","supplyType") 0 Public (TCons ("FlatCurry","TypeExpr") []) (Rule [] (Comb ConsCall ("FlatCurry","TCons") [Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Names","basics") [],Comb ConsCall ("Prelude",":") [Lit (Charc  'I'),Comb ConsCall ("Prelude",":") [Lit (Charc  'D'),Comb ConsCall ("Prelude",":") [Lit (Charc  'S'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude","[]") []]]]]]]]]],Comb ConsCall ("Prelude","[]") []])),Func ("TransFunctions","storeType") 0 Public (TCons ("FlatCurry","TypeExpr") []) (Rule [] (Comb ConsCall ("FlatCurry","TCons") [Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Names","basics") [],Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'S'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]],Comb ConsCall ("Prelude","[]") []])),Func ("TransFunctions","funcType") 2 Public (FuncType (TCons ("FlatCurry","TypeExpr") []) (FuncType (TCons ("FlatCurry","TypeExpr") []) (TCons ("FlatCurry","TypeExpr") []))) (Rule [1,2] (Comb ConsCall ("FlatCurry","TCons") [Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Names","basics") [],Comb ConsCall ("Prelude",":") [Lit (Charc  'F'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude","[]") []]]]]],Comb ConsCall ("Prelude",":") [Var 1,Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude","[]") []]]])),Func ("TransFunctions","list2FCList") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","Expr") []]) (TCons ("FlatCurry","Expr") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("TransFunctions","consCall") [Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Names","prelude") [],Comb ConsCall ("Prelude",":") [Lit (Charc  '['),Comb ConsCall ("Prelude",":") [Lit (Charc  ']'),Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude",":") [2,3]) (Comb FuncCall ("TransFunctions","consCall") [Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Names","prelude") [],Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransFunctions","list2FCList") [Var 3],Comb ConsCall ("Prelude","[]") []]]])])),Func ("TransFunctions","pair2FCPair") 1 Public (FuncType (TCons ("Prelude","(,)") [TCons ("FlatCurry","Expr") [],TCons ("FlatCurry","Expr") []]) (TCons ("FlatCurry","Expr") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Comb FuncCall ("TransFunctions","consCall") [Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Names","prelude") [],Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb ConsCall ("Prelude",":") [Lit (Charc  ','),Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude",":") [Var 3,Comb ConsCall ("Prelude","[]") []]]])])),Func ("TransFunctions","lazyLet") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","Expr") []]]) (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("FlatCurry","Expr") []))) (Rule [1,2] (Comb ConsCall ("FlatCurry","Let") [Var 1,Var 2])),Func ("TransFunctions","strictLet") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","Expr") []]]) (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("FlatCurry","Expr") []))) (Rule [1,2] (Comb FuncCall ("Prelude","$") [Comb (ConsPartCall 1) ("FlatCurry","Let") [Var 1],Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Prelude","foldr") [Comb (FuncPartCall 2) ("TransFunctions","seqCall") [],Var 2],Comb FuncCall ("Prelude","map") [Comb FuncCall ("Prelude",".") [Comb (ConsPartCall 1) ("FlatCurry","Var") [],Comb (FuncPartCall 1) ("Prelude","fst") []],Var 1]]])),Func ("TransFunctions","seqCall") 2 Public (FuncType (TCons ("FlatCurry","Expr") []) (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("FlatCurry","Expr") []))) (Rule [1,2] (Comb FuncCall ("TransFunctions","funcCall") [Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Names","prelude") [],Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'q'),Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude",":") [Var 1,Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude","[]") []]]])),Func ("TransFunctions","strictCall") 2 Public (FuncType (TCons ("FlatCurry","Expr") []) (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("FlatCurry","Expr") []))) (Rule [1,2] (Comb FuncCall ("TransFunctions","funcCall") [Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Names","prelude") [],Comb ConsCall ("Prelude",":") [Lit (Charc  '$'),Comb ConsCall ("Prelude",":") [Lit (Charc  '!'),Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude",":") [Var 1,Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude","[]") []]]])),Func ("TransFunctions","funcCall") 2 Public (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","Expr") []]) (TCons ("FlatCurry","Expr") []))) (Rule [1,2] (Comb ConsCall ("FlatCurry","Comb") [Comb ConsCall ("FlatCurry","FuncCall") [],Var 1,Var 2])),Func ("TransFunctions","lambdaCall") 2 Public (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","Expr") []]) (TCons ("FlatCurry","Expr") []))) (Rule [1,2] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb ConsCall ("FlatCurry","Comb") [Comb ConsCall ("FlatCurry","FuncCall") [],Comb ConsCall ("Prelude","(,)") [Var 3,Comb ConsCall ("Prelude",":") [Lit (Charc  '\\'),Var 4]],Var 2])])),Func ("TransFunctions","consCall") 2 Public (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","Expr") []]) (TCons ("FlatCurry","Expr") []))) (Rule [1,2] (Comb ConsCall ("FlatCurry","Comb") [Comb ConsCall ("FlatCurry","ConsCall") [],Var 1,Var 2])),Func ("TransFunctions","constant") 1 Public (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("FlatCurry","Expr") [])) (Rule [1] (Comb FuncCall ("TransFunctions","consCall") [Var 1,Comb ConsCall ("Prelude","[]") []])),Func ("TransFunctions","fun") 3 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","Expr") []]) (TCons ("FlatCurry","Expr") [])))) (Rule [1,2,3] (Case  Rigid (Comb FuncCall ("Prelude","==") [Comb FuncCall ("Prelude","length") [Var 3],Var 1]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("TransFunctions","funcCall") [Var 2,Var 3]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("FlatCurry","Comb") [Comb ConsCall ("FlatCurry","FuncPartCall") [Comb FuncCall ("Prelude","-") [Comb FuncCall ("Prelude","length") [Var 3],Var 1]],Var 2,Var 3]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])),Func ("TransFunctions","int") 1 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("FlatCurry","Expr") [])) (Rule [1] (Comb FuncCall ("TransFunctions","funcCall") [Comb FuncCall ("TransFunctions","curryInt") [],Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransFunctions","constant") [Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Names","prelude") [],Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractHaskellPrinter","showInt") [Var 1],Comb ConsCall ("Prelude",":") [Lit (Charc  '#'),Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude","[]") []]])),Func ("TransFunctions","char") 1 Public (FuncType (TCons ("Prelude","Char") []) (TCons ("FlatCurry","Expr") [])) (Rule [1] (Let [(2,Case  Rigid (Comb FuncCall ("Prelude","<") [Comb FuncCall ("Prelude","ord") [Var 1],Lit (Intc  127)]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransFunctions","constant") [Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Names","prelude") [],Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractHaskellPrinter","showLiteral") [Comb ConsCall ("AbstractHaskell","Charc") [Var 1]],Comb ConsCall ("Prelude",":") [Lit (Charc  '#'),Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransFunctions","funcCall") [Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Names","basics") [],Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'A'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransFunctions","constant") [Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Names","prelude") [],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","show") [Comb FuncCall ("Prelude","ord") [Var 1]],Comb ConsCall ("Prelude",":") [Lit (Charc  '#'),Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])] (Comb FuncCall ("TransFunctions","funcCall") [Comb FuncCall ("TransFunctions","curryChar") [],Var 2]))),Func ("TransFunctions","float") 1 Public (FuncType (TCons ("Prelude","Float") []) (TCons ("FlatCurry","Expr") [])) (Rule [1] (Comb FuncCall ("TransFunctions","funcCall") [Comb FuncCall ("TransFunctions","curryFloat") [],Comb ConsCall ("Prelude",":") [Comb FuncCall ("TransFunctions","constant") [Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Names","prelude") [],Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractHaskellPrinter","showFloat") [Var 1],Comb ConsCall ("Prelude",":") [Lit (Charc  '#'),Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude","[]") []]])),Func ("TransFunctions","liftOr") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","Expr") []]) (TCons ("FlatCurry","Expr") [])) (Rule [] (Comb (FuncPartCall 1) ("TransFunctions","funcCall") [Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Names","basics") [],Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude","[]") []]]]]]]]])),Func ("TransFunctions","liftOrs") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","Expr") []]) (TCons ("FlatCurry","Expr") [])) (Rule [] (Comb (FuncPartCall 1) ("TransFunctions","funcCall") [Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Names","basics") [],Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude","[]") []]]]]]]]]])),Func ("TransFunctions","liftGuard") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","Expr") []]) (TCons ("FlatCurry","Expr") [])) (Rule [] (Comb (FuncPartCall 1) ("TransFunctions","funcCall") [Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Names","basics") [],Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]])),Func ("TransFunctions","liftFail") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","Expr") []]) (TCons ("FlatCurry","Expr") [])) (Rule [] (Comb (FuncPartCall 1) ("TransFunctions","funcCall") [Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Names","basics") [],Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]])),Func ("TransFunctions","qmark") 2 Public (FuncType (TCons ("FlatCurry","Expr") []) (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("FlatCurry","Expr") []))) (Rule [1,2] (Comb FuncCall ("TransFunctions","funcCall") [Comb FuncCall ("Names","renameQName") [Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Names","prelude") [],Comb ConsCall ("Prelude",":") [Lit (Charc  '?'),Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude",":") [Var 1,Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude","[]") []]]])),Func ("TransFunctions","splitSupply") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","Expr") []]) (TCons ("FlatCurry","Expr") [])) (Rule [] (Comb (FuncPartCall 1) ("TransFunctions","funcCall") [Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Names","basics") [],Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'S'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]])),Func ("TransFunctions","initSupply") 0 Public (TCons ("FlatCurry","Expr") []) (Rule [] (Comb FuncCall ("TransFunctions","funcCall") [Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Names","basics") [],Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'I'),Comb ConsCall ("Prelude",":") [Lit (Charc  'D'),Comb ConsCall ("Prelude",":") [Lit (Charc  'S'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]],Comb ConsCall ("Prelude","[]") []])),Func ("TransFunctions","leftSupply") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","Expr") []]) (TCons ("FlatCurry","Expr") [])) (Rule [] (Comb (FuncPartCall 1) ("TransFunctions","funcCall") [Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Names","basics") [],Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'S'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]])),Func ("TransFunctions","rightSupply") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","Expr") []]) (TCons ("FlatCurry","Expr") [])) (Rule [] (Comb (FuncPartCall 1) ("TransFunctions","funcCall") [Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Names","basics") [],Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'S'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]])),Func ("TransFunctions","generate") 1 Public (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("FlatCurry","Expr") [])) (Rule [1] (Comb FuncCall ("TransFunctions","funcCall") [Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Names","basics") [],Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]]]],Comb ConsCall ("Prelude",":") [Var 1,Comb ConsCall ("Prelude","[]") []]])),Func ("TransFunctions","defFailInfo") 0 Public (TCons ("FlatCurry","Expr") []) (Rule [] (Comb FuncCall ("TransFunctions","funcCall") [Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Names","basics") [],Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'F'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'I'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]],Comb ConsCall ("Prelude","[]") []])),Func ("TransFunctions","defCover") 0 Public (TCons ("FlatCurry","Expr") []) (Rule [] (Comb FuncCall ("TransFunctions","funcCall") [Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Names","basics") [],Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'v'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude","[]") []]]]]]]]]],Comb ConsCall ("Prelude","[]") []])),Func ("TransFunctions","defaultModules") 0 Public (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (Rule [] (Comb ConsCall ("Prelude",":") [Comb FuncCall ("Names","basics") [],Comb ConsCall ("Prelude","[]") []])),Func ("TransFunctions","primTypes") 0 Public (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]]) (Rule [] (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Prelude","map") [Comb (FuncPartCall 1) ("TransFunctions","primTypes._#lambda111") []],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc  'T'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude",":") [Lit (Charc  'B'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude","[]") []]]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc  'F'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]],Comb ConsCall ("Prelude",":") [Lit (Charc  'B'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude","[]") []]]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc  'I'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude",":") [Lit (Charc  'I'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc  'F'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude","[]") []]]]]],Comb ConsCall ("Prelude",":") [Lit (Charc  'F'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude","[]") []]]]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude","[]") []]]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc  'S'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb ConsCall ("Prelude",":") [Lit (Charc  'S'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude","[]") []]]]]]]]],Comb ConsCall ("Prelude","[]") []]]]]]]])),Func ("TransFunctions","primTypes._#lambda111") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Names","renameQName") [Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Names","prelude") [],Var 2]],Comb FuncCall ("Names","renameQName") [Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Names","prelude") [],Var 3]]])])),Func ("TransFunctions","tupleArity") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","Maybe") [TCons ("Prelude","Int") []])) (Rule [1] (Let [(2,Comb FuncCall ("Prelude","-") [Comb FuncCall ("Prelude","length") [Var 1],Lit (Intc  1)])] (Case  Rigid (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude",">") [Var 2,Lit (Intc  1)],Comb FuncCall ("Prelude","==") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","replicate") [Comb FuncCall ("Prelude","-") [Var 2,Lit (Intc  1)],Lit (Charc  ',')],Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude","[]") []]]]]]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","Just") [Var 2]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])]))),Func ("TransFunctions","maxTupleArity") 0 Public (TCons ("Prelude","Int") []) (Rule [] (Lit (Intc  15))),Func ("TransFunctions","tupleType") 1 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","replicate") [Comb FuncCall ("Prelude","-") [Var 1,Lit (Intc  1)],Lit (Charc  ',')],Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude","[]") []]]]))] []