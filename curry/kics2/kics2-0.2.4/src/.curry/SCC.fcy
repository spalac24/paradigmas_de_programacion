Prog "SCC" ["Prelude","RedBlackTree","SetRBT"] [Type ("SCC","Node") Private [0,1] [Cons ("SCC","Node") 4 Private [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TVar 1],TCons ("Prelude","[]") [TVar 1],TVar 0]]] [Func ("SCC","cmpNode") 2 Private (FuncType (TCons ("SCC","Node") [TVar 0,TVar 1]) (FuncType (TCons ("SCC","Node") [TVar 0,TVar 1]) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Comb FuncCall ("Prelude","<") [Comb FuncCall ("SCC","key") [Var 1],Comb FuncCall ("SCC","key") [Var 2]])),Func ("SCC","key") 1 Private (FuncType (TCons ("SCC","Node") [TVar 0,TVar 1]) (TCons ("Prelude","Int") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("SCC","Node") [2,3,4,5]) (Var 2)])),Func ("SCC","bvs") 1 Private (FuncType (TCons ("SCC","Node") [TVar 0,TVar 1]) (TCons ("Prelude","[]") [TVar 1])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("SCC","Node") [2,3,4,5]) (Var 3)])),Func ("SCC","fvs") 1 Private (FuncType (TCons ("SCC","Node") [TVar 0,TVar 1]) (TCons ("Prelude","[]") [TVar 1])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("SCC","Node") [2,3,4,5]) (Var 4)])),Func ("SCC","node") 1 Private (FuncType (TCons ("SCC","Node") [TVar 0,TVar 1]) (TVar 0)) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("SCC","Node") [2,3,4,5]) (Var 5)])),Func ("SCC","scc") 2 Public (FuncType (FuncType (TVar 0) (TCons ("Prelude","[]") [TVar 1])) (FuncType (FuncType (TVar 0) (TCons ("Prelude","[]") [TVar 1])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 0]])))) (Rule [1,2] (Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","map") [Comb (FuncPartCall 1) ("Prelude","map") [Comb (FuncPartCall 1) ("SCC","node") []]],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("SCC","tsort'") [],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("SCC","tsort") [],Comb (FuncPartCall 1) ("Prelude","zipWith") [Comb (FuncPartCall 2) ("SCC","scc.wrap.24") [Var 1,Var 2],Comb FuncCall ("Prelude","enumFrom") [Lit (Intc  0)]]]]])),Func ("SCC","scc.wrap.24") 4 Private (FuncType (FuncType (TVar 137) (TCons ("Prelude","[]") [TVar 139])) (FuncType (FuncType (TVar 137) (TCons ("Prelude","[]") [TVar 139])) (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 137) (TCons ("SCC","Node") [TVar 137,TVar 139]))))) (Rule [1,2,3,4] (Comb ConsCall ("SCC","Node") [Var 3,Comb FuncCall ("Prelude","apply") [Var 1,Var 4],Comb FuncCall ("Prelude","apply") [Var 2,Var 4],Var 4])),Func ("SCC","tsort") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("SCC","Node") [TVar 0,TVar 1]]) (TCons ("Prelude","[]") [TCons ("SCC","Node") [TVar 0,TVar 1]])) (Rule [1] (Comb FuncCall ("Prelude","snd") [Comb FuncCall ("SCC","tsort.dfs.29") [Var 1,Var 1,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("SetRBT","emptySetRBT") [],Comb (FuncPartCall 2) ("SCC","cmpNode") []],Comb ConsCall ("Prelude","[]") []]])),Func ("SCC","tsort.dfs.29") 4 Private (FuncType (TCons ("Prelude","[]") [TCons ("SCC","Node") [TVar 82,TVar 83]]) (FuncType (TCons ("Prelude","[]") [TCons ("SCC","Node") [TVar 82,TVar 83]]) (FuncType (TCons ("RedBlackTree","RedBlackTree") [TCons ("SCC","Node") [TVar 82,TVar 83]]) (FuncType (TCons ("Prelude","[]") [TCons ("SCC","Node") [TVar 82,TVar 83]]) (TCons ("Prelude","(,)") [TCons ("RedBlackTree","RedBlackTree") [TCons ("SCC","Node") [TVar 82,TVar 83]],TCons ("Prelude","[]") [TCons ("SCC","Node") [TVar 82,TVar 83]]]))))) (Rule [1,2,3,4] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","(,)") [Var 3,Var 4]),Branch (Pattern ("Prelude",":") [5,6]) (Let [(7,Comb FuncCall ("SCC","tsort.dfs.29") [Var 1,Comb FuncCall ("SCC","tsort.dfs.29.defs.33") [Var 1,Var 5],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("SetRBT","insertRBT") [],Var 5],Var 3],Var 4]),(8,Comb FuncCall ("SCC","tsort.dfs.29._#selFP2#marks'") [Var 7]),(9,Comb FuncCall ("SCC","tsort.dfs.29._#selFP3#stack'") [Var 7])] (Case  Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("SetRBT","elemRBT") [Var 5],Var 3]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("SCC","tsort.dfs.29") [Var 1,Var 6,Var 3,Var 4]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("SCC","tsort.dfs.29") [Var 1,Var 6,Var 8,Comb ConsCall ("Prelude",":") [Var 5,Var 9]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])]))])),Func ("SCC","tsort.dfs.29.defs.33") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("SCC","Node") [TVar 82,TVar 83]]) (FuncType (TCons ("SCC","Node") [TVar 0,TVar 83]) (TCons ("Prelude","[]") [TCons ("SCC","Node") [TVar 82,TVar 83]]))) (Rule [1,2] (Comb FuncCall ("Prelude","filter") [Comb FuncCall ("Prelude",".") [Comb FuncCall ("Prelude","any") [Comb (FuncPartCall 1) ("Prelude","flip") [Comb (FuncPartCall 1) ("Prelude","elem") [],Comb FuncCall ("SCC","fvs") [Var 2]]],Comb (FuncPartCall 1) ("SCC","bvs") []],Var 1])),Func ("SCC","tsort.dfs.29._#selFP2#marks'") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("RedBlackTree","RedBlackTree") [TCons ("SCC","Node") [TVar 82,TVar 83]],TCons ("Prelude","[]") [TCons ("SCC","Node") [TVar 82,TVar 83]]]) (TCons ("RedBlackTree","RedBlackTree") [TCons ("SCC","Node") [TVar 82,TVar 83]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("SCC","tsort.dfs.29._#selFP3#stack'") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("RedBlackTree","RedBlackTree") [TCons ("SCC","Node") [TVar 82,TVar 83]],TCons ("Prelude","[]") [TCons ("SCC","Node") [TVar 82,TVar 83]]]) (TCons ("Prelude","[]") [TCons ("SCC","Node") [TVar 82,TVar 83]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("SCC","tsort'") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("SCC","Node") [TVar 0,TVar 1]]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("SCC","Node") [TVar 0,TVar 1]]])) (Rule [1] (Comb FuncCall ("Prelude","snd") [Comb FuncCall ("SCC","tsort'.dfs.38") [Var 1,Var 1,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("SetRBT","emptySetRBT") [],Comb (FuncPartCall 2) ("SCC","cmpNode") []],Comb ConsCall ("Prelude","[]") []]])),Func ("SCC","tsort'.dfs.38") 4 Private (FuncType (TCons ("Prelude","[]") [TCons ("SCC","Node") [TVar 128,TVar 129]]) (FuncType (TCons ("Prelude","[]") [TCons ("SCC","Node") [TVar 128,TVar 129]]) (FuncType (TCons ("RedBlackTree","RedBlackTree") [TCons ("SCC","Node") [TVar 128,TVar 129]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("SCC","Node") [TVar 128,TVar 129]]]) (TCons ("Prelude","(,)") [TCons ("RedBlackTree","RedBlackTree") [TCons ("SCC","Node") [TVar 128,TVar 129]],TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("SCC","Node") [TVar 128,TVar 129]]]]))))) (Rule [1,2,3,4] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","(,)") [Var 3,Var 4]),Branch (Pattern ("Prelude",":") [5,6]) (Let [(7,Comb FuncCall ("SCC","tsort'.dfs.38") [Var 1,Comb FuncCall ("SCC","tsort'.dfs.38.uses.42") [Var 1,Var 5],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("SetRBT","insertRBT") [],Var 5],Var 3],Comb ConsCall ("Prelude","[]") []]),(8,Comb FuncCall ("SCC","tsort'.dfs.38._#selFP5#marks'") [Var 7]),(9,Comb FuncCall ("SCC","tsort'.dfs.38._#selFP6#stack'") [Var 7])] (Case  Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("SetRBT","elemRBT") [Var 5],Var 3]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("SCC","tsort'.dfs.38") [Var 1,Var 6,Var 3,Var 4]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("SCC","tsort'.dfs.38") [Var 1,Var 6,Var 8,Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Var 5,Comb FuncCall ("Prelude","concat") [Var 9]],Var 4]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])]))])),Func ("SCC","tsort'.dfs.38.uses.42") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("SCC","Node") [TVar 128,TVar 129]]) (FuncType (TCons ("SCC","Node") [TVar 0,TVar 129]) (TCons ("Prelude","[]") [TCons ("SCC","Node") [TVar 128,TVar 129]]))) (Rule [1,2] (Comb FuncCall ("Prelude","filter") [Comb FuncCall ("Prelude",".") [Comb FuncCall ("Prelude","any") [Comb (FuncPartCall 1) ("Prelude","flip") [Comb (FuncPartCall 1) ("Prelude","elem") [],Comb FuncCall ("SCC","bvs") [Var 2]]],Comb (FuncPartCall 1) ("SCC","fvs") []],Var 1])),Func ("SCC","tsort'.dfs.38._#selFP5#marks'") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("RedBlackTree","RedBlackTree") [TCons ("SCC","Node") [TVar 128,TVar 129]],TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("SCC","Node") [TVar 128,TVar 129]]]]) (TCons ("RedBlackTree","RedBlackTree") [TCons ("SCC","Node") [TVar 128,TVar 129]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("SCC","tsort'.dfs.38._#selFP6#stack'") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("RedBlackTree","RedBlackTree") [TCons ("SCC","Node") [TVar 128,TVar 129]],TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("SCC","Node") [TVar 128,TVar 129]]]]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("SCC","Node") [TVar 128,TVar 129]]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)]))] []