Prog "TransFunctions" ["AbstractHaskell","AbstractHaskellPrinter","Analysis","Base","CompilerOpts","FiniteMap","FlatCurry","FlatCurryGoodies","List","Maybe","Message","Names","Prelude","Splits"] [Type ("TransFunctions","_#Rec:State") Public [] [Cons ("TransFunctions","_#Lab:typeMap") 1 Public [TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]],Cons ("TransFunctions","_#Lab:ndResult") 1 Public [TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Base","NDClass") []]],Cons ("TransFunctions","_#Lab:hoResultFun") 1 Public [TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Base","HOClass") []]],Cons ("TransFunctions","_#Lab:hoResultCons") 1 Public [TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Base","HOClass") []]],Cons ("TransFunctions","_#Lab:nextID") 1 Public [TCons ("Prelude","Int") []],Cons ("TransFunctions","_#Lab:detMode") 1 Public [TCons ("Prelude","Bool") []],Cons ("TransFunctions","_#Lab:compOptions") 1 Public [TCons ("CompilerOpts","Options") []]],TypeSyn ("TransFunctions","AnalysisResult") Public [] (TCons ("Prelude","(,,,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]],TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Base","NDClass") []],TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Base","HOClass") []],TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Base","HOClass") []]]),TypeSyn ("TransFunctions","TypeMap") Public [] (TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]),TypeSyn ("TransFunctions","M") Public [0] (TCons ("TransFunctions","Mo") [TCons ("TransFunctions","State") [],TVar 0]),Type ("TransFunctions","Mo") Public [0,1] [Cons ("TransFunctions","M") 1 Public [FuncType (TVar 0) (TCons ("Prelude","IO") [TCons ("Prelude","(,)") [TVar 1,TVar 0]])]],Type ("TransFunctions","State") Public [] []] [Func ("TransFunctions","_#selR@State.typeMap") 1 Public (FuncType (TCons ("TransFunctions","State") []) (TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("TransFunctions","_#updR@State.typeMap") 2 Public (FuncType (TCons ("TransFunctions","State") []) (FuncType (TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("TransFunctions","State") []))) (Rule [] (Var 0)),Func ("TransFunctions","_#selR@State.ndResult") 1 Public (FuncType (TCons ("TransFunctions","State") []) (TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Base","NDClass") []])) (Rule [] (Var 0)),Func ("TransFunctions","_#updR@State.ndResult") 2 Public (FuncType (TCons ("TransFunctions","State") []) (FuncType (TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Base","NDClass") []]) (TCons ("TransFunctions","State") []))) (Rule [] (Var 0)),Func ("TransFunctions","_#selR@State.hoResultFun") 1 Public (FuncType (TCons ("TransFunctions","State") []) (TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Base","HOClass") []])) (Rule [] (Var 0)),Func ("TransFunctions","_#updR@State.hoResultFun") 2 Public (FuncType (TCons ("TransFunctions","State") []) (FuncType (TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Base","HOClass") []]) (TCons ("TransFunctions","State") []))) (Rule [] (Var 0)),Func ("TransFunctions","_#selR@State.hoResultCons") 1 Public (FuncType (TCons ("TransFunctions","State") []) (TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Base","HOClass") []])) (Rule [] (Var 0)),Func ("TransFunctions","_#updR@State.hoResultCons") 2 Public (FuncType (TCons ("TransFunctions","State") []) (FuncType (TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Base","HOClass") []]) (TCons ("TransFunctions","State") []))) (Rule [] (Var 0)),Func ("TransFunctions","_#selR@State.nextID") 1 Public (FuncType (TCons ("TransFunctions","State") []) (TCons ("Prelude","Int") [])) (Rule [] (Var 0)),Func ("TransFunctions","_#updR@State.nextID") 2 Public (FuncType (TCons ("TransFunctions","State") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("TransFunctions","State") []))) (Rule [] (Var 0)),Func ("TransFunctions","_#selR@State.detMode") 1 Public (FuncType (TCons ("TransFunctions","State") []) (TCons ("Prelude","Bool") [])) (Rule [] (Var 0)),Func ("TransFunctions","_#updR@State.detMode") 2 Public (FuncType (TCons ("TransFunctions","State") []) (FuncType (TCons ("Prelude","Bool") []) (TCons ("TransFunctions","State") []))) (Rule [] (Var 0)),Func ("TransFunctions","_#selR@State.compOptions") 1 Public (FuncType (TCons ("TransFunctions","State") []) (TCons ("CompilerOpts","Options") [])) (Rule [] (Var 0)),Func ("TransFunctions","_#updR@State.compOptions") 2 Public (FuncType (TCons ("TransFunctions","State") []) (FuncType (TCons ("CompilerOpts","Options") []) (TCons ("TransFunctions","State") []))) (Rule [] (Var 0)),Func ("TransFunctions","unM") 1 Public (FuncType (TCons ("TransFunctions","Mo") [TVar 0,TVar 1]) (FuncType (TVar 0) (TCons ("Prelude","IO") [TCons ("Prelude","(,)") [TVar 1,TVar 0]]))) (Rule [] (Var 0)),Func ("TransFunctions","returnM") 1 Public (FuncType (TVar 0) (TCons ("TransFunctions","Mo") [TVar 1,TVar 0])) (Rule [] (Var 0)),Func ("TransFunctions","bindM") 2 Public (FuncType (TCons ("TransFunctions","Mo") [TVar 0,TVar 1]) (FuncType (FuncType (TVar 1) (TCons ("TransFunctions","Mo") [TVar 0,TVar 2])) (TCons ("TransFunctions","Mo") [TVar 0,TVar 2]))) (Rule [] (Var 0)),Func ("TransFunctions","bindM_") 2 Public (FuncType (TCons ("TransFunctions","Mo") [TVar 0,TVar 1]) (FuncType (TCons ("TransFunctions","Mo") [TVar 0,TVar 2]) (TCons ("TransFunctions","Mo") [TVar 0,TVar 2]))) (Rule [] (Var 0)),Func ("TransFunctions","getState") 0 Public (TCons ("TransFunctions","Mo") [TVar 0,TVar 0]) (Rule [] (Var 0)),Func ("TransFunctions","putState") 1 Public (FuncType (TVar 0) (TCons ("TransFunctions","Mo") [TVar 0,TCons ("Prelude","()") []])) (Rule [] (Var 0)),Func ("TransFunctions","updState") 1 Public (FuncType (FuncType (TVar 0) (TVar 0)) (TCons ("TransFunctions","Mo") [TVar 0,TCons ("Prelude","()") []])) (Rule [] (Var 0)),Func ("TransFunctions","liftIO") 1 Public (FuncType (TCons ("Prelude","IO") [TVar 0]) (TCons ("TransFunctions","Mo") [TVar 1,TVar 0])) (Rule [] (Var 0)),Func ("TransFunctions","mapM") 2 Public (FuncType (FuncType (TVar 0) (TCons ("TransFunctions","Mo") [TVar 1,TVar 2])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("TransFunctions","Mo") [TVar 1,TCons ("Prelude","[]") [TVar 2]]))) (Rule [] (Var 0)),Func ("TransFunctions","defaultState") 0 Public (TCons ("TransFunctions","State") []) (Rule [] (Var 0)),Func ("TransFunctions","addTypeMap") 1 Public (FuncType (TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("TransFunctions","Mo") [TCons ("TransFunctions","State") [],TCons ("Prelude","()") []])) (Rule [] (Var 0)),Func ("TransFunctions","getType") 1 Public (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("TransFunctions","Mo") [TCons ("TransFunctions","State") [],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("TransFunctions","addNDAnalysis") 1 Public (FuncType (TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Base","NDClass") []]) (TCons ("TransFunctions","Mo") [TCons ("TransFunctions","State") [],TCons ("Prelude","()") []])) (Rule [] (Var 0)),Func ("TransFunctions","getNDClass") 1 Public (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("TransFunctions","Mo") [TCons ("TransFunctions","State") [],TCons ("Base","NDClass") []])) (Rule [] (Var 0)),Func ("TransFunctions","addHOFunAnalysis") 1 Public (FuncType (TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Base","HOClass") []]) (TCons ("TransFunctions","Mo") [TCons ("TransFunctions","State") [],TCons ("Prelude","()") []])) (Rule [] (Var 0)),Func ("TransFunctions","getFunHOClass") 1 Public (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("TransFunctions","Mo") [TCons ("TransFunctions","State") [],TCons ("Base","HOClass") []])) (Rule [] (Var 0)),Func ("TransFunctions","addHOConsAnalysis") 1 Public (FuncType (TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Base","HOClass") []]) (TCons ("TransFunctions","Mo") [TCons ("TransFunctions","State") [],TCons ("Prelude","()") []])) (Rule [] (Var 0)),Func ("TransFunctions","getConsHOClass") 1 Public (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("TransFunctions","Mo") [TCons ("TransFunctions","State") [],TCons ("Base","HOClass") []])) (Rule [] (Var 0)),Func ("TransFunctions","getNextID") 0 Public (TCons ("TransFunctions","Mo") [TCons ("TransFunctions","State") [],TCons ("Prelude","Int") []]) (Rule [] (Var 0)),Func ("TransFunctions","setNextID") 1 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("TransFunctions","Mo") [TCons ("TransFunctions","State") [],TCons ("Prelude","()") []])) (Rule [] (Var 0)),Func ("TransFunctions","takeNextID") 0 Public (TCons ("TransFunctions","Mo") [TCons ("TransFunctions","State") [],TCons ("Prelude","Int") []]) (Rule [] (Var 0)),Func ("TransFunctions","takeNextIDs") 1 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("TransFunctions","Mo") [TCons ("TransFunctions","State") [],TCons ("Prelude","[]") [TCons ("Prelude","Int") []]])) (Rule [] (Var 0)),Func ("TransFunctions","isDetMode") 0 Public (TCons ("TransFunctions","Mo") [TCons ("TransFunctions","State") [],TCons ("Prelude","Bool") []]) (Rule [] (Var 0)),Func ("TransFunctions","setDetMode") 1 Public (FuncType (TCons ("Prelude","Bool") []) (TCons ("TransFunctions","Mo") [TCons ("TransFunctions","State") [],TCons ("Prelude","()") []])) (Rule [] (Var 0)),Func ("TransFunctions","doInDetMode") 2 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("TransFunctions","Mo") [TCons ("TransFunctions","State") [],TVar 0]) (TCons ("TransFunctions","Mo") [TCons ("TransFunctions","State") [],TVar 0]))) (Rule [] (Var 0)),Func ("TransFunctions","getCompOptions") 0 Public (TCons ("TransFunctions","Mo") [TCons ("TransFunctions","State") [],TCons ("CompilerOpts","Options") []]) (Rule [] (Var 0)),Func ("TransFunctions","getCompOption") 1 Public (FuncType (FuncType (TCons ("CompilerOpts","Options") []) (TVar 0)) (TCons ("TransFunctions","Mo") [TCons ("TransFunctions","State") [],TVar 0])) (Rule [] (Var 0)),Func ("TransFunctions","strictSupply") 0 Public (TCons ("TransFunctions","Mo") [TCons ("TransFunctions","State") [],TCons ("Prelude","Bool") []]) (Rule [] (Var 0)),Func ("TransFunctions","transProg") 1 Public (FuncType (TCons ("FlatCurry","Prog") []) (TCons ("TransFunctions","Mo") [TCons ("TransFunctions","State") [],TCons ("Prelude","(,)") [TCons ("FlatCurry","Prog") [],TCons ("Prelude","(,,,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]],TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Base","NDClass") []],TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Base","HOClass") []],TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Base","HOClass") []]]]])) (Rule [] (Var 0)),Func ("TransFunctions","getConsMap") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","TypeDecl") []]) (TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("TransFunctions","transFunc") 1 Public (FuncType (TCons ("FlatCurry","FuncDecl") []) (TCons ("TransFunctions","Mo") [TCons ("TransFunctions","State") [],TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]])) (Rule [] (Var 0)),Func ("TransFunctions","transPureFunc") 1 Public (FuncType (TCons ("FlatCurry","FuncDecl") []) (TCons ("TransFunctions","Mo") [TCons ("TransFunctions","State") [],TCons ("FlatCurry","FuncDecl") []])) (Rule [] (Var 0)),Func ("TransFunctions","transNDFunc") 1 Public (FuncType (TCons ("FlatCurry","FuncDecl") []) (TCons ("TransFunctions","Mo") [TCons ("TransFunctions","State") [],TCons ("FlatCurry","FuncDecl") []])) (Rule [] (Var 0)),Func ("TransFunctions","renameFun") 1 Public (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("TransFunctions","Mo") [TCons ("TransFunctions","State") [],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("TransFunctions","renameCons") 1 Public (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("TransFunctions","Mo") [TCons ("TransFunctions","State") [],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("TransFunctions","check42") 2 Public (FuncType (FuncType (TCons ("FlatCurry","TypeExpr") []) (TCons ("FlatCurry","TypeExpr") [])) (FuncType (TCons ("FlatCurry","TypeExpr") []) (TCons ("FlatCurry","TypeExpr") []))) (Rule [] (Var 0)),Func ("TransFunctions","transExprType") 1 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("FlatCurry","TypeExpr") []) (TCons ("FlatCurry","TypeExpr") []))) (Rule [] (Var 0)),Func ("TransFunctions","transTypeExpr") 0 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("FlatCurry","TypeExpr") []) (TCons ("FlatCurry","TypeExpr") []))) (Rule [] (Var 0)),Func ("TransFunctions","transNDTypeExpr") 0 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("FlatCurry","TypeExpr") []) (TCons ("FlatCurry","TypeExpr") []))) (Rule [] (Var 0)),Func ("TransFunctions","transTypeExprWith") 4 Public (FuncType (FuncType (TCons ("FlatCurry","TypeExpr") []) (FuncType (TCons ("FlatCurry","TypeExpr") []) (TCons ("FlatCurry","TypeExpr") []))) (FuncType (FuncType (TCons ("FlatCurry","TypeExpr") []) (TCons ("FlatCurry","TypeExpr") [])) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("FlatCurry","TypeExpr") []) (TCons ("FlatCurry","TypeExpr") []))))) (Rule [] (Var 0)),Func ("TransFunctions","transHOTypeExprWith") 2 Public (FuncType (FuncType (TCons ("FlatCurry","TypeExpr") []) (FuncType (TCons ("FlatCurry","TypeExpr") []) (TCons ("FlatCurry","TypeExpr") []))) (FuncType (TCons ("FlatCurry","TypeExpr") []) (TCons ("FlatCurry","TypeExpr") []))) (Rule [] (Var 0)),Func ("TransFunctions","transRule") 1 Public (FuncType (TCons ("FlatCurry","FuncDecl") []) (TCons ("TransFunctions","Mo") [TCons ("TransFunctions","State") [],TCons ("FlatCurry","Rule") []])) (Rule [] (Var 0)),Func ("TransFunctions","transBody") 3 Public (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("TransFunctions","Mo") [TCons ("TransFunctions","State") [],TCons ("FlatCurry","Expr") []])))) (Rule [] (Var 0)),Func ("TransFunctions","addUnifIntCharRule") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","BranchExpr") []]) (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","BranchExpr") []]) (TCons ("Prelude","[]") [TCons ("FlatCurry","BranchExpr") []]))) (Rule [] (Var 0)),Func ("TransFunctions","consNameFromPattern") 1 Public (FuncType (TCons ("FlatCurry","BranchExpr") []) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [] (Var 0)),Func ("TransFunctions","transBranch") 1 Public (FuncType (TCons ("FlatCurry","BranchExpr") []) (TCons ("TransFunctions","Mo") [TCons ("TransFunctions","State") [],TCons ("FlatCurry","BranchExpr") []])) (Rule [] (Var 0)),Func ("TransFunctions","transPattern") 1 Public (FuncType (TCons ("FlatCurry","Pattern") []) (TCons ("TransFunctions","Mo") [TCons ("TransFunctions","State") [],TCons ("FlatCurry","Pattern") []])) (Rule [] (Var 0)),Func ("TransFunctions","newBranches") 4 Public (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("TransFunctions","Mo") [TCons ("TransFunctions","State") [],TCons ("Prelude","[]") [TCons ("FlatCurry","BranchExpr") []]]))))) (Rule [] (Var 0)),Func ("TransFunctions","transCompleteExpr") 1 Public (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("TransFunctions","Mo") [TCons ("TransFunctions","State") [],TCons ("FlatCurry","Expr") []])) (Rule [] (Var 0)),Func ("TransFunctions","transExpr") 1 Public (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("TransFunctions","Mo") [TCons ("TransFunctions","State") [],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Int") []],TCons ("FlatCurry","Expr") []]])) (Rule [] (Var 0)),Func ("TransFunctions","genIds") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("TransFunctions","Mo") [TCons ("TransFunctions","State") [],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Int") []],TCons ("FlatCurry","Expr") []]]))) (Rule [] (Var 0)),Func ("TransFunctions","idVar") 0 Public (TCons ("Prelude","Int") []) (Rule [] (Var 0)),Func ("TransFunctions","suppVarIdx") 0 Public (TCons ("Prelude","Int") []) (Rule [] (Var 0)),Func ("TransFunctions","constStoreVarIdx") 0 Public (TCons ("Prelude","Int") []) (Rule [] (Var 0)),Func ("TransFunctions","freshVars") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []])) (Rule [] (Var 0)),Func ("TransFunctions","unzipArgs") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Int") []],TVar 0]]) (TCons ("TransFunctions","Mo") [TCons ("TransFunctions","State") [],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Int") []],TCons ("Prelude","[]") [TVar 0]]])) (Rule [] (Var 0)),Func ("TransFunctions","myWrap") 6 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Base","NDClass") []) (FuncType (TCons ("Base","HOClass") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("FlatCurry","Expr") []))))))) (Rule [] (Var 0)),Func ("TransFunctions","wrapCs") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("FlatCurry","Expr") []))) (Rule [] (Var 0)),Func ("TransFunctions","newWrap") 3 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","Expr") []]) (TCons ("FlatCurry","Expr") [])) (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("FlatCurry","Expr") [])))) (Rule [] (Var 0)),Func ("TransFunctions","wrapDX") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","Expr") []]) (TCons ("FlatCurry","Expr") [])) (Rule [] (Var 0)),Func ("TransFunctions","wrapNX") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","Expr") []]) (TCons ("FlatCurry","Expr") [])) (Rule [] (Var 0)),Func ("TransFunctions","addCs") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","Expr") []]) (TCons ("FlatCurry","Expr") [])) (Rule [] (Var 0)),Func ("TransFunctions","funId") 0 Public (TCons ("FlatCurry","Expr") []) (Rule [] (Var 0)),Func ("TransFunctions","letIdVar") 1 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","Expr") []]]) (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("FlatCurry","Expr") [])))) (Rule [] (Var 0)),Func ("TransFunctions","curryInt") 0 Public (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (Rule [] (Var 0)),Func ("TransFunctions","curryFloat") 0 Public (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (Rule [] (Var 0)),Func ("TransFunctions","curryChar") 0 Public (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (Rule [] (Var 0)),Func ("TransFunctions","combConstrName") 0 Public (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (Rule [] (Var 0)),Func ("TransFunctions","tOrRef") 0 Public (TCons ("FlatCurry","TypeExpr") []) (Rule [] (Var 0)),Func ("TransFunctions","tConstraint") 0 Public (TCons ("FlatCurry","TypeExpr") []) (Rule [] (Var 0)),Func ("TransFunctions","supplyType") 0 Public (TCons ("FlatCurry","TypeExpr") []) (Rule [] (Var 0)),Func ("TransFunctions","storeType") 0 Public (TCons ("FlatCurry","TypeExpr") []) (Rule [] (Var 0)),Func ("TransFunctions","funcType") 2 Public (FuncType (TCons ("FlatCurry","TypeExpr") []) (FuncType (TCons ("FlatCurry","TypeExpr") []) (TCons ("FlatCurry","TypeExpr") []))) (Rule [] (Var 0)),Func ("TransFunctions","list2FCList") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","Expr") []]) (TCons ("FlatCurry","Expr") [])) (Rule [] (Var 0)),Func ("TransFunctions","pair2FCPair") 1 Public (FuncType (TCons ("Prelude","(,)") [TCons ("FlatCurry","Expr") [],TCons ("FlatCurry","Expr") []]) (TCons ("FlatCurry","Expr") [])) (Rule [] (Var 0)),Func ("TransFunctions","lazyLet") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","Expr") []]]) (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("FlatCurry","Expr") []))) (Rule [] (Var 0)),Func ("TransFunctions","strictLet") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","Expr") []]]) (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("FlatCurry","Expr") []))) (Rule [] (Var 0)),Func ("TransFunctions","seqCall") 2 Public (FuncType (TCons ("FlatCurry","Expr") []) (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("FlatCurry","Expr") []))) (Rule [] (Var 0)),Func ("TransFunctions","strictCall") 2 Public (FuncType (TCons ("FlatCurry","Expr") []) (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("FlatCurry","Expr") []))) (Rule [] (Var 0)),Func ("TransFunctions","funcCall") 2 Public (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","Expr") []]) (TCons ("FlatCurry","Expr") []))) (Rule [] (Var 0)),Func ("TransFunctions","lambdaCall") 2 Public (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","Expr") []]) (TCons ("FlatCurry","Expr") []))) (Rule [] (Var 0)),Func ("TransFunctions","consCall") 2 Public (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","Expr") []]) (TCons ("FlatCurry","Expr") []))) (Rule [] (Var 0)),Func ("TransFunctions","constant") 1 Public (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("FlatCurry","Expr") [])) (Rule [] (Var 0)),Func ("TransFunctions","fun") 3 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","Expr") []]) (TCons ("FlatCurry","Expr") [])))) (Rule [] (Var 0)),Func ("TransFunctions","int") 1 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("FlatCurry","Expr") [])) (Rule [] (Var 0)),Func ("TransFunctions","char") 1 Public (FuncType (TCons ("Prelude","Char") []) (TCons ("FlatCurry","Expr") [])) (Rule [] (Var 0)),Func ("TransFunctions","float") 1 Public (FuncType (TCons ("Prelude","Float") []) (TCons ("FlatCurry","Expr") [])) (Rule [] (Var 0)),Func ("TransFunctions","liftOr") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","Expr") []]) (TCons ("FlatCurry","Expr") [])) (Rule [] (Var 0)),Func ("TransFunctions","liftOrs") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","Expr") []]) (TCons ("FlatCurry","Expr") [])) (Rule [] (Var 0)),Func ("TransFunctions","liftGuard") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","Expr") []]) (TCons ("FlatCurry","Expr") [])) (Rule [] (Var 0)),Func ("TransFunctions","liftFail") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","Expr") []]) (TCons ("FlatCurry","Expr") [])) (Rule [] (Var 0)),Func ("TransFunctions","qmark") 2 Public (FuncType (TCons ("FlatCurry","Expr") []) (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("FlatCurry","Expr") []))) (Rule [] (Var 0)),Func ("TransFunctions","splitSupply") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","Expr") []]) (TCons ("FlatCurry","Expr") [])) (Rule [] (Var 0)),Func ("TransFunctions","initSupply") 0 Public (TCons ("FlatCurry","Expr") []) (Rule [] (Var 0)),Func ("TransFunctions","leftSupply") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","Expr") []]) (TCons ("FlatCurry","Expr") [])) (Rule [] (Var 0)),Func ("TransFunctions","rightSupply") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","Expr") []]) (TCons ("FlatCurry","Expr") [])) (Rule [] (Var 0)),Func ("TransFunctions","generate") 1 Public (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("FlatCurry","Expr") [])) (Rule [] (Var 0)),Func ("TransFunctions","defFailInfo") 0 Public (TCons ("FlatCurry","Expr") []) (Rule [] (Var 0)),Func ("TransFunctions","defCover") 0 Public (TCons ("FlatCurry","Expr") []) (Rule [] (Var 0)),Func ("TransFunctions","defaultModules") 0 Public (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (Rule [] (Var 0)),Func ("TransFunctions","primTypes") 0 Public (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]]) (Rule [] (Var 0)),Func ("TransFunctions","tupleArity") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","Maybe") [TCons ("Prelude","Int") []])) (Rule [] (Var 0)),Func ("TransFunctions","maxTupleArity") 0 Public (TCons ("Prelude","Int") []) (Rule [] (Var 0)),Func ("TransFunctions","tupleType") 1 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Var 0))] []