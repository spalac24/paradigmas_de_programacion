Prog "TotallyDefined" ["Analysis","FlatCurry","FlatCurryGoodies","GenericProgInfo","List","Prelude"] [Type ("TotallyDefined","Completeness") Public [] [Cons ("TotallyDefined","Complete") 0 Public [],Cons ("TotallyDefined","InComplete") 0 Public [],Cons ("TotallyDefined","InCompleteOr") 0 Public []]] [Func ("TotallyDefined","siblingCons") 0 Public (TCons ("Analysis","Analysis") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]]) (Rule [] (Comb FuncCall ("Analysis","simpleConstructorAnalysis") [Comb ConsCall ("Prelude",":") [Lit (Charc  'S'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'b'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]],Comb (FuncPartCall 2) ("TotallyDefined","siblingCons.consNamesOfType.2") []])),Func ("TotallyDefined","siblingCons.consNamesOfType.2") 2 Private (FuncType (TCons ("FlatCurry","ConsDecl") []) (FuncType (TCons ("FlatCurry","TypeDecl") []) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("FlatCurry","Type") [3,4,5,6]) (Comb FuncCall ("Prelude","filter") [Comb (FuncPartCall 1) ("Prelude","flip") [Comb (FuncPartCall 2) ("Prelude","/=") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FlatCurryGoodies","consName") [],Var 1]],Comb FuncCall ("Prelude","map") [Comb FuncCall ("FlatCurryGoodies","consName") [],Var 6]]),Branch (Pattern ("FlatCurry","TypeSyn") [7,8,9,10]) (Comb ConsCall ("Prelude","[]") [])])),Func ("TotallyDefined","totalAnalysis") 0 Public (TCons ("Analysis","Analysis") [TCons ("Prelude","Bool") []]) (Rule [] (Comb FuncCall ("Analysis","combinedDependencyFuncAnalysis") [Comb ConsCall ("Prelude",":") [Lit (Charc  'T'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude","[]") []]]]]],Comb FuncCall ("TotallyDefined","patCompAnalysis") [],Comb ConsCall ("Prelude","True") [],Comb (FuncPartCall 3) ("TotallyDefined","analyseTotally") []])),Func ("TotallyDefined","analyseTotally") 3 Private (FuncType (TCons ("GenericProgInfo","ProgInfo") [TCons ("TotallyDefined","Completeness") []]) (FuncType (TCons ("FlatCurry","FuncDecl") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","Bool") []]]) (TCons ("Prelude","Bool") [])))) (Rule [1,2,3] (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","maybe") [Comb ConsCall ("Prelude","False") [],Comb (FuncPartCall 1) ("TotallyDefined","analyseTotally._#lambda1") [],Comb FuncCall ("GenericProgInfo","lookupProgInfo") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FlatCurryGoodies","funcName") [],Var 2],Var 1]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","all") [Comb (FuncPartCall 1) ("Prelude","snd") []],Var 3]])),Func ("TotallyDefined","analyseTotally._#lambda1") 1 Private (FuncType (TCons ("TotallyDefined","Completeness") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Comb FuncCall ("Prelude","==") [Var 1,Comb ConsCall ("TotallyDefined","Complete") []])),Func ("TotallyDefined","showTotally") 1 Public (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]])])),Func ("TotallyDefined","patCompAnalysis") 0 Public (TCons ("Analysis","Analysis") [TCons ("TotallyDefined","Completeness") []]) (Rule [] (Comb FuncCall ("Analysis","combinedSimpleFuncAnalysis") [Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]],Comb FuncCall ("TotallyDefined","siblingCons") [],Comb (FuncPartCall 2) ("TotallyDefined","analysePatComplete") []])),Func ("TotallyDefined","showComplete") 1 Public (FuncType (TCons ("TotallyDefined","Completeness") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("TotallyDefined","Complete") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]]]),Branch (Pattern ("TotallyDefined","InComplete") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]),Branch (Pattern ("TotallyDefined","InCompleteOr") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'j'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])])),Func ("TotallyDefined","analysePatComplete") 2 Private (FuncType (TCons ("GenericProgInfo","ProgInfo") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]]) (FuncType (TCons ("FlatCurry","FuncDecl") []) (TCons ("TotallyDefined","Completeness") []))) (Rule [1,2] (Comb FuncCall ("TotallyDefined","analysePatComplete.anaFun.33") [Var 1,Var 2])),Func ("TotallyDefined","analysePatComplete.anaFun.33") 2 Private (FuncType (TCons ("GenericProgInfo","ProgInfo") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]]) (FuncType (TCons ("FlatCurry","FuncDecl") []) (TCons ("TotallyDefined","Completeness") []))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("FlatCurry","Func") [3,4,5,6,7]) (Case  Flex (Var 7) [Branch (Pattern ("FlatCurry","Rule") [8,9]) (Comb FuncCall ("TotallyDefined","isComplete") [Var 1,Var 9]),Branch (Pattern ("FlatCurry","External") [10]) (Comb ConsCall ("TotallyDefined","Complete") [])])])),Func ("TotallyDefined","isComplete") 2 Private (FuncType (TCons ("GenericProgInfo","ProgInfo") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]]) (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("TotallyDefined","Completeness") []))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("FlatCurry","Var") [3]) (Comb ConsCall ("TotallyDefined","Complete") []),Branch (Pattern ("FlatCurry","Lit") [4]) (Comb ConsCall ("TotallyDefined","Complete") []),Branch (Pattern ("FlatCurry","Comb") [5,6,7]) (Case  Rigid (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","==") [Var 6,Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude","[]") []]]]]]]]],Comb FuncCall ("Prelude","==") [Comb FuncCall ("Prelude","length") [Var 7],Lit (Intc  1)]]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("TotallyDefined","isComplete") [Var 1,Comb FuncCall ("Prelude","head") [Var 7]]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("TotallyDefined","Complete") [])]),Branch (Pattern ("FlatCurry","Free") [8,9]) (Comb ConsCall ("TotallyDefined","Complete") []),Branch (Pattern ("FlatCurry","Let") [10,11]) (Comb ConsCall ("TotallyDefined","Complete") []),Branch (Pattern ("FlatCurry","Or") [12,13]) (Comb FuncCall ("TotallyDefined","combineOrResults") [Comb FuncCall ("TotallyDefined","isComplete") [Var 1,Var 12],Comb FuncCall ("TotallyDefined","isComplete") [Var 1,Var 13]]),Branch (Pattern ("FlatCurry","Case") [14,15,16]) (Case  Flex (Var 16) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("TotallyDefined","InComplete") []),Branch (Pattern ("Prelude",":") [17,18]) (Case  Flex (Var 17) [Branch (Pattern ("FlatCurry","Branch") [19,20]) (Case  Flex (Var 19) [Branch (Pattern ("FlatCurry","LPattern") [21]) (Comb ConsCall ("TotallyDefined","InComplete") []),Branch (Pattern ("FlatCurry","Pattern") [22,23]) (Comb FuncCall ("TotallyDefined","combineAndResults") [Comb FuncCall ("TotallyDefined","isComplete.checkAllCons.89") [Var 1,Comb FuncCall ("Prelude","maybe") [Comb ConsCall ("Prelude","[]") [],Comb (FuncPartCall 1) ("Prelude","id") [],Comb FuncCall ("GenericProgInfo","lookupProgInfo") [Var 22,Var 1]],Var 18],Comb FuncCall ("TotallyDefined","isComplete") [Var 1,Var 20]])])])])])),Func ("TotallyDefined","isComplete.checkAllCons.89") 3 Private (FuncType (TCons ("GenericProgInfo","ProgInfo") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","BranchExpr") []]) (TCons ("TotallyDefined","Completeness") [])))) (Rule [1,2,3] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("TotallyDefined","Complete") []),Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("TotallyDefined","InComplete") []),Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 6) [Branch (Pattern ("FlatCurry","Branch") [8,9]) (Case  Flex (Var 8) [Branch (Pattern ("FlatCurry","LPattern") [10]) (Comb ConsCall ("TotallyDefined","InComplete") []),Branch (Pattern ("FlatCurry","Pattern") [11,12]) (Comb FuncCall ("TotallyDefined","combineAndResults") [Comb FuncCall ("TotallyDefined","isComplete.checkAllCons.89") [Var 1,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("List","delete") [],Var 11],Comb ConsCall ("Prelude",":") [Var 4,Var 5]],Var 7],Comb FuncCall ("TotallyDefined","isComplete") [Var 1,Var 9]])])])])])),Func ("TotallyDefined","combineOrResults") 2 Private (FuncType (TCons ("TotallyDefined","Completeness") []) (FuncType (TCons ("TotallyDefined","Completeness") []) (TCons ("TotallyDefined","Completeness") []))) (Rule [1,2] (Case  Flex (Var 1) [Branch (Pattern ("TotallyDefined","Complete") []) (Comb ConsCall ("TotallyDefined","Complete") []),Branch (Pattern ("TotallyDefined","InComplete") []) (Case  Flex (Var 2) [Branch (Pattern ("TotallyDefined","Complete") []) (Comb ConsCall ("TotallyDefined","Complete") []),Branch (Pattern ("TotallyDefined","InComplete") []) (Comb ConsCall ("TotallyDefined","InCompleteOr") []),Branch (Pattern ("TotallyDefined","InCompleteOr") []) (Comb ConsCall ("TotallyDefined","InCompleteOr") [])]),Branch (Pattern ("TotallyDefined","InCompleteOr") []) (Case  Flex (Var 2) [Branch (Pattern ("TotallyDefined","Complete") []) (Comb ConsCall ("TotallyDefined","Complete") []),Branch (Pattern ("TotallyDefined","InComplete") []) (Comb ConsCall ("TotallyDefined","InCompleteOr") []),Branch (Pattern ("TotallyDefined","InCompleteOr") []) (Comb ConsCall ("TotallyDefined","InCompleteOr") [])])])),Func ("TotallyDefined","combineAndResults") 2 Private (FuncType (TCons ("TotallyDefined","Completeness") []) (FuncType (TCons ("TotallyDefined","Completeness") []) (TCons ("TotallyDefined","Completeness") []))) (Rule [1,2] (Case  Flex (Var 1) [Branch (Pattern ("TotallyDefined","InComplete") []) (Comb ConsCall ("TotallyDefined","InComplete") []),Branch (Pattern ("TotallyDefined","Complete") []) (Case  Flex (Var 2) [Branch (Pattern ("TotallyDefined","Complete") []) (Comb ConsCall ("TotallyDefined","Complete") []),Branch (Pattern ("TotallyDefined","InComplete") []) (Comb ConsCall ("TotallyDefined","InComplete") []),Branch (Pattern ("TotallyDefined","InCompleteOr") []) (Comb ConsCall ("TotallyDefined","InCompleteOr") [])]),Branch (Pattern ("TotallyDefined","InCompleteOr") []) (Case  Flex (Var 2) [Branch (Pattern ("TotallyDefined","Complete") []) (Comb ConsCall ("TotallyDefined","InCompleteOr") []),Branch (Pattern ("TotallyDefined","InComplete") []) (Comb ConsCall ("TotallyDefined","InComplete") []),Branch (Pattern ("TotallyDefined","InCompleteOr") []) (Comb ConsCall ("TotallyDefined","InCompleteOr") [])])]))] []