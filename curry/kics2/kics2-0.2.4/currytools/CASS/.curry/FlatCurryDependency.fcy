Prog "FlatCurryDependency" ["FlatCurry","List","Prelude","RedBlackTree","SetRBT"] [] [Func ("FlatCurryDependency","dependsDirectlyOnTypes") 1 Public (FuncType (TCons ("FlatCurry","TypeDecl") []) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","Type") [2,3,4,5]) (Comb FuncCall ("List","nub") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","concatMap") [Comb (FuncPartCall 1) ("FlatCurryDependency","dependsDirectlyOnTypes._#lambda1") []],Var 5]]),Branch (Pattern ("FlatCurry","TypeSyn") [6,7,8,9]) (Comb FuncCall ("List","nub") [Comb FuncCall ("FlatCurryDependency","tconsOf") [Var 9]])])),Func ("FlatCurryDependency","dependsDirectlyOnTypes._#lambda1") 1 Private (FuncType (TCons ("FlatCurry","ConsDecl") []) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","Cons") [2,3,4,5]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","concatMap") [Comb (FuncPartCall 1) ("FlatCurryDependency","tconsOf") []],Var 5])])),Func ("FlatCurryDependency","tconsOf") 1 Private (FuncType (TCons ("FlatCurry","TypeExpr") []) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","TVar") [2]) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("FlatCurry","FuncType") [3,4]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("FlatCurryDependency","tconsOf") [Var 3],Comb FuncCall ("FlatCurryDependency","tconsOf") [Var 4]]),Branch (Pattern ("FlatCurry","TCons") [5,6]) (Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude","[]") []])])),Func ("FlatCurryDependency","callsDirectly") 1 Public (FuncType (TCons ("FlatCurry","FuncDecl") []) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("SetRBT","setRBT2list") [],Comb FuncCall ("Prelude","snd") [Comb FuncCall ("FlatCurryDependency","directlyDependent") [Var 1]]])),Func ("FlatCurryDependency","directlyDependent") 1 Private (FuncType (TCons ("FlatCurry","FuncDecl") []) (TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("RedBlackTree","RedBlackTree") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","Func") [2,3,4,5,6]) (Case  Flex (Var 6) [Branch (Pattern ("FlatCurry","Rule") [7,8]) (Comb ConsCall ("Prelude","(,)") [Var 2,Comb FuncCall ("FlatCurryDependency","funcSetOfExpr") [Var 8]]),Branch (Pattern ("FlatCurry","External") [9]) (Comb ConsCall ("Prelude","(,)") [Var 2,Comb FuncCall ("FlatCurryDependency","emptySet") []])])])),Func ("FlatCurryDependency","funcSetOfExpr") 1 Private (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("RedBlackTree","RedBlackTree") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","Var") [2]) (Comb FuncCall ("FlatCurryDependency","emptySet") []),Branch (Pattern ("FlatCurry","Lit") [3]) (Comb FuncCall ("FlatCurryDependency","emptySet") []),Branch (Pattern ("FlatCurry","Comb") [4,5,6]) (Case  Rigid (Comb FuncCall ("FlatCurryDependency","isConstructorComb") [Var 4]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FlatCurryDependency","unionMap") [Comb (FuncPartCall 1) ("FlatCurryDependency","funcSetOfExpr") []],Var 6]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("SetRBT","insertRBT") [],Var 5],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FlatCurryDependency","unionMap") [Comb (FuncPartCall 1) ("FlatCurryDependency","funcSetOfExpr") []],Var 6]])]),Branch (Pattern ("FlatCurry","Free") [7,8]) (Comb FuncCall ("FlatCurryDependency","funcSetOfExpr") [Var 8]),Branch (Pattern ("FlatCurry","Let") [9,10]) (Comb FuncCall ("SetRBT","unionRBT") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FlatCurryDependency","unionMap") [Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("FlatCurryDependency","funcSetOfExpr") [],Comb (FuncPartCall 1) ("Prelude","snd") []]],Var 9],Comb FuncCall ("FlatCurryDependency","funcSetOfExpr") [Var 10]]),Branch (Pattern ("FlatCurry","Or") [11,12]) (Comb FuncCall ("SetRBT","unionRBT") [Comb FuncCall ("FlatCurryDependency","funcSetOfExpr") [Var 11],Comb FuncCall ("FlatCurryDependency","funcSetOfExpr") [Var 12]]),Branch (Pattern ("FlatCurry","Case") [13,14,15]) (Comb FuncCall ("SetRBT","unionRBT") [Comb FuncCall ("FlatCurryDependency","funcSetOfExpr") [Var 14],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FlatCurryDependency","unionMap") [Comb (FuncPartCall 1) ("FlatCurryDependency","funcSetOfExpr.funcSetOfBranch.54") []],Var 15]])])),Func ("FlatCurryDependency","funcSetOfExpr.funcSetOfBranch.54") 1 Private (FuncType (TCons ("FlatCurry","BranchExpr") []) (TCons ("RedBlackTree","RedBlackTree") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","Branch") [2,3]) (Comb FuncCall ("FlatCurryDependency","funcSetOfExpr") [Var 3])])),Func ("FlatCurryDependency","isConstructorComb") 1 Private (FuncType (TCons ("FlatCurry","CombType") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Case  Rigid (Var 1) [Branch (Pattern ("FlatCurry","ConsCall") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("FlatCurry","ConsPartCall") [2]) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("FlatCurry","FuncCall") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("FlatCurry","FuncPartCall") [3]) (Comb ConsCall ("Prelude","False") [])])),Func ("FlatCurryDependency","unionMap") 1 Private (FuncType (FuncType (TVar 0) (TCons ("RedBlackTree","RedBlackTree") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("RedBlackTree","RedBlackTree") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1] (Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","foldr") [Comb (FuncPartCall 2) ("SetRBT","unionRBT") [],Comb FuncCall ("FlatCurryDependency","emptySet") []],Comb (FuncPartCall 1) ("Prelude","map") [Var 1]])),Func ("FlatCurryDependency","emptySet") 0 Private (TCons ("RedBlackTree","RedBlackTree") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (Rule [] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("SetRBT","emptySetRBT") [],Comb (FuncPartCall 2) ("FlatCurryDependency","leqQName") []])),Func ("FlatCurryDependency","leqQName") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Case  Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [5,6]) (Comb FuncCall ("Prelude","<=") [Comb FuncCall ("Prelude","++") [Var 3,Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Var 4]],Comb FuncCall ("Prelude","++") [Var 5,Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Var 6]]])])]))] []