Prog "ServerFormats" ["GenericProgInfo","Prelude","XML","FlatCurry"] [] [Func ("ServerFormats","serverFormats") 0 Public (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (Rule [] (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'X'),Comb ConsCall ("Prelude",":") [Lit (Charc  'M'),Comb ConsCall ("Prelude",":") [Lit (Charc  'L'),Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  'T'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude","[]") []]]]]]]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'T'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude","[]") []]]])),Func ("ServerFormats","formatResult") 5 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","Maybe") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Either") [TCons ("GenericProgInfo","ProgInfo") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))))) (Rule [1,2,3,4,5] (Case  Flex (Var 5) [Branch (Pattern ("Prelude","Right") [6]) (Let [(7,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'E'),Comb ConsCall ("Prelude",":") [Lit (Charc  'R'),Comb ConsCall ("Prelude",":") [Lit (Charc  'R'),Comb ConsCall ("Prelude",":") [Lit (Charc  'O'),Comb ConsCall ("Prelude",":") [Lit (Charc  'R'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]],Var 6])] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 2,Comb ConsCall ("Prelude",":") [Lit (Charc  'X'),Comb ConsCall ("Prelude",":") [Lit (Charc  'M'),Comb ConsCall ("Prelude",":") [Lit (Charc  'L'),Comb ConsCall ("Prelude","[]") []]]]]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("XML","showXmlDoc") [Comb FuncCall ("XML","xml") [Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude","[]") []]]]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("XML","xtxt") [Var 7],Comb ConsCall ("Prelude","[]") []]]]),Branch (Pattern ("Prelude","False") []) (Var 7)])),Branch (Pattern ("Prelude","Left") [8]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude","Just") [9]) (Let [(10,Comb FuncCall ("GenericProgInfo","lookupProgInfo") [Comb ConsCall ("Prelude","(,)") [Var 1,Var 9],Var 8])] (Case  Rigid (Var 10) [Branch (Pattern ("Prelude","Nothing") []) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'E'),Comb ConsCall ("Prelude",":") [Lit (Charc  'R'),Comb ConsCall ("Prelude",":") [Lit (Charc  'R'),Comb ConsCall ("Prelude",":") [Lit (Charc  'O'),Comb ConsCall ("Prelude",":") [Lit (Charc  'R'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]],Comb FuncCall ("Prelude","++") [Var 9,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]],Var 1]]]),Branch (Pattern ("Prelude","Just") [11]) (Case  Rigid (Var 2) [Branch (Pattern ("Prelude",":") [12,13]) (Let [(14,Var 12)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 14,Lit (Charc  'C')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 13) [Branch (Pattern ("Prelude",":") [15,16]) (Let [(17,Var 15)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 17,Lit (Charc  'u')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 16) [Branch (Pattern ("Prelude",":") [18,19]) (Let [(20,Var 18)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 20,Lit (Charc  'r')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 19) [Branch (Pattern ("Prelude",":") [21,22]) (Let [(23,Var 21)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 23,Lit (Charc  'r')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 22) [Branch (Pattern ("Prelude",":") [24,25]) (Let [(26,Var 24)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 26,Lit (Charc  'y')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 25) [Branch (Pattern ("Prelude",":") [27,28]) (Let [(29,Var 27)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 29,Lit (Charc  'T')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 28) [Branch (Pattern ("Prelude",":") [30,31]) (Let [(32,Var 30)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 32,Lit (Charc  'e')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 31) [Branch (Pattern ("Prelude",":") [33,34]) (Let [(35,Var 33)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 35,Lit (Charc  'r')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 34) [Branch (Pattern ("Prelude",":") [36,37]) (Let [(38,Var 36)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 38,Lit (Charc  'm')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 37) [Branch (Pattern ("Prelude","[]") []) (Var 11),Branch (Pattern ("Prelude",":") [39,40]) (Comb FuncCall ("Prelude","failed") [])]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","failed") [])]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","failed") [])]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","failed") [])]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","failed") [])]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","failed") [])]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","failed") [])]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","failed") [])]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","failed") [])]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 14,Lit (Charc  'T')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 13) [Branch (Pattern ("Prelude",":") [41,42]) (Let [(43,Var 41)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 43,Lit (Charc  'e')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 42) [Branch (Pattern ("Prelude",":") [44,45]) (Let [(46,Var 44)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 46,Lit (Charc  'x')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 45) [Branch (Pattern ("Prelude",":") [47,48]) (Let [(49,Var 47)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 49,Lit (Charc  't')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 48) [Branch (Pattern ("Prelude","[]") []) (Var 11),Branch (Pattern ("Prelude",":") [50,51]) (Comb FuncCall ("Prelude","failed") [])]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","failed") [])]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","failed") [])]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","failed") [])]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 14,Lit (Charc  'X')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 13) [Branch (Pattern ("Prelude",":") [52,53]) (Let [(54,Var 52)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 54,Lit (Charc  'M')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 53) [Branch (Pattern ("Prelude",":") [55,56]) (Let [(57,Var 55)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 57,Lit (Charc  'L')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 56) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("XML","showXmlDoc") [Comb FuncCall ("XML","xml") [Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude","[]") []]]]]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("XML","xtxt") [Var 11],Comb ConsCall ("Prelude","[]") []]]]),Branch (Pattern ("Prelude",":") [58,59]) (Comb FuncCall ("Prelude","failed") [])]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","failed") [])]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","failed") [])]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","failed") [])])])),Branch (Pattern ("Prelude","Nothing") []) (Let [(60,Comb FuncCall ("ServerFormats","formatResult._#selFP4#pubents") [Comb FuncCall ("GenericProgInfo","progInfo2Lists") [Var 8]]),(61,Comb FuncCall ("ServerFormats","formatResult._#selFP5#privents") [Comb FuncCall ("GenericProgInfo","progInfo2Lists") [Var 8]]),(62,Case  Rigid (Var 4) [Branch (Pattern ("Prelude","True") []) (Var 60),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","++") [Var 60,Var 61])])] (Case  Rigid (Var 2) [Branch (Pattern ("Prelude",":") [63,64]) (Let [(65,Var 63)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 65,Lit (Charc  'C')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 64) [Branch (Pattern ("Prelude",":") [66,67]) (Let [(68,Var 66)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 68,Lit (Charc  'u')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 67) [Branch (Pattern ("Prelude",":") [69,70]) (Let [(71,Var 69)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 71,Lit (Charc  'r')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 70) [Branch (Pattern ("Prelude",":") [72,73]) (Let [(74,Var 72)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 74,Lit (Charc  'r')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 73) [Branch (Pattern ("Prelude",":") [75,76]) (Let [(77,Var 75)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 77,Lit (Charc  'y')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 76) [Branch (Pattern ("Prelude",":") [78,79]) (Let [(80,Var 78)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 80,Lit (Charc  'T')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 79) [Branch (Pattern ("Prelude",":") [81,82]) (Let [(83,Var 81)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 83,Lit (Charc  'e')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 82) [Branch (Pattern ("Prelude",":") [84,85]) (Let [(86,Var 84)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 86,Lit (Charc  'r')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 85) [Branch (Pattern ("Prelude",":") [87,88]) (Let [(89,Var 87)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 89,Lit (Charc  'm')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 88) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","show") [Var 62]),Branch (Pattern ("Prelude",":") [90,91]) (Comb FuncCall ("Prelude","failed") [])]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","failed") [])]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","failed") [])]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","failed") [])]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","failed") [])]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","failed") [])]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","failed") [])]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","failed") [])]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","failed") [])]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 65,Lit (Charc  'T')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 64) [Branch (Pattern ("Prelude",":") [92,93]) (Let [(94,Var 92)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 94,Lit (Charc  'e')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 93) [Branch (Pattern ("Prelude",":") [95,96]) (Let [(97,Var 95)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 97,Lit (Charc  'x')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 96) [Branch (Pattern ("Prelude",":") [98,99]) (Let [(100,Var 98)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 100,Lit (Charc  't')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 99) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("ServerFormats","formatAsText") [],Var 62]),Branch (Pattern ("Prelude",":") [101,102]) (Comb FuncCall ("Prelude","failed") [])]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","failed") [])]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","failed") [])]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","failed") [])]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 65,Lit (Charc  'X')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 64) [Branch (Pattern ("Prelude",":") [103,104]) (Let [(105,Var 103)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 105,Lit (Charc  'M')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 104) [Branch (Pattern ("Prelude",":") [106,107]) (Let [(108,Var 106)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 108,Lit (Charc  'L')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 107) [Branch (Pattern ("Prelude","[]") []) (Let [(109,Comb FuncCall ("GenericProgInfo","progInfo2XML") [Var 8]),(110,Comb FuncCall ("ServerFormats","formatResult._#selFP2#pubxml") [Var 109]),(111,Comb FuncCall ("ServerFormats","formatResult._#selFP3#privxml") [Var 109])] (Comb FuncCall ("XML","showXmlDoc") [Comb FuncCall ("XML","xml") [Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb FuncCall ("Prelude","++") [Var 110,Case  Rigid (Var 4) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude","False") []) (Var 111)]]]])),Branch (Pattern ("Prelude",":") [112,113]) (Comb FuncCall ("Prelude","failed") [])]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","failed") [])]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","failed") [])]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","failed") [])]))])])),Func ("ServerFormats","formatResult._#selFP4#pubents") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]],TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("ServerFormats","formatResult._#selFP5#privents") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]],TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("ServerFormats","formatResult._#selFP2#pubxml") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("XML","XmlExp") []],TCons ("Prelude","[]") [TCons ("XML","XmlExp") []]]) (TCons ("Prelude","[]") [TCons ("XML","XmlExp") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("ServerFormats","formatResult._#selFP3#privxml") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("XML","XmlExp") []],TCons ("Prelude","[]") [TCons ("XML","XmlExp") []]]) (TCons ("Prelude","[]") [TCons ("XML","XmlExp") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("ServerFormats","formatAsText") 0 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","unlines") [],Comb (FuncPartCall 1) ("Prelude","map") [Comb (FuncPartCall 1) ("ServerFormats","formatAsText._#lambda4") []]])),Func ("ServerFormats","formatAsText._#lambda4") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Case  Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb FuncCall ("Prelude","++") [Var 4,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Var 5,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []],Var 3]]]])])]))] []