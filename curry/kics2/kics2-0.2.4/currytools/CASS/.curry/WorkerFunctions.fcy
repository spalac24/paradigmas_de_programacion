Prog "WorkerFunctions" ["Analysis","Configuration","CurryFiles","FiniteMap","FlatCurry","FlatCurryDependency","FlatCurryGoodies","GenericProgInfo","IOExts","List","LoadAnalysis","Maybe","Prelude","RedBlackTree","SCC","SetRBT","System","ReadShowTerm","AnalysisDependencies"] [TypeSyn ("WorkerFunctions","ProgInfoStore") Public [0] (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("GenericProgInfo","ProgInfo") [TVar 0]]])] [Func ("WorkerFunctions","newProgInfoStoreRef") 0 Public (TCons ("Prelude","IO") [TCons ("IOExts","IORef") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("GenericProgInfo","ProgInfo") [TVar 0]]]]]) (Rule [] (Comb FuncCall ("IOExts","newIORef") [Comb ConsCall ("Prelude","[]") []])),Func ("WorkerFunctions","analysisClient") 2 Public (FuncType (TCons ("Analysis","Analysis") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []]))) (Rule [1,2] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("IOExts","newIORef") [Comb ConsCall ("Prelude","[]") []],Comb (FuncPartCall 1) ("WorkerFunctions","analysisClient._#lambda1") [Var 1,Var 2]])),Func ("WorkerFunctions","analysisClient._#lambda1") 3 Private (FuncType (TCons ("Analysis","Analysis") [TVar 633]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("IOExts","IORef") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("GenericProgInfo","ProgInfo") [TVar 633]]]]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []])))) (Rule [1,2,3] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Configuration","getFPMethod") [],Comb (FuncPartCall 1) ("WorkerFunctions","analysisClient._#lambda1._#lambda2") [Var 1,Var 2,Var 3]])),Func ("WorkerFunctions","analysisClient._#lambda1._#lambda2") 4 Private (FuncType (TCons ("Analysis","Analysis") [TVar 633]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("IOExts","IORef") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("GenericProgInfo","ProgInfo") [TVar 633]]]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []]))))) (Rule [1,2,3,4] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","mapIO_") [Comb (FuncPartCall 1) ("WorkerFunctions","analysisClientWithStore") [Var 3,Var 1,Var 4]],Var 2])),Func ("WorkerFunctions","analysisClientWithStore") 4 Public (FuncType (TCons ("IOExts","IORef") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("GenericProgInfo","ProgInfo") [TVar 0]]]]) (FuncType (TCons ("Analysis","Analysis") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []]))))) (Rule [1,2,3,4] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("CurryFiles","readNewestFlatCurry") [Var 4],Comb (FuncPartCall 1) ("WorkerFunctions","analysisClientWithStore._#lambda3") [Var 2,Var 3,Var 4,Var 1]])),Func ("WorkerFunctions","analysisClientWithStore._#lambda3") 5 Private (FuncType (TCons ("Analysis","Analysis") [TVar 596]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("IOExts","IORef") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("GenericProgInfo","ProgInfo") [TVar 596]]]]) (FuncType (TCons ("FlatCurry","Prog") []) (TCons ("Prelude","IO") [TCons ("Prelude","()") []])))))) (Rule [1,2,3,4,5] (Let [(6,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FlatCurryGoodies","progImports") [],Var 5]),(7,Comb FuncCall ("Analysis","analysisName") [Var 1])] (Comb FuncCall ("Prelude",">>=") [Case  Rigid (Comb FuncCall ("Analysis","isSimpleAnalysis") [Var 1]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","return") [Comb FuncCall ("GenericProgInfo","emptyProgInfo") []]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("WorkerFunctions","getInterfaceInfosWS") [Var 4,Comb FuncCall ("Analysis","analysisName") [Var 1],Var 6])],Comb (FuncPartCall 1) ("WorkerFunctions","analysisClientWithStore._#lambda3._#lambda4") [Var 1,Var 7,Var 2,Var 3,Var 5,Var 4]]))),Func ("WorkerFunctions","analysisClientWithStore._#lambda3._#lambda4") 7 Private (FuncType (TCons ("Analysis","Analysis") [TVar 596]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("FlatCurry","Prog") []) (FuncType (TCons ("IOExts","IORef") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("GenericProgInfo","ProgInfo") [TVar 596]]]]) (FuncType (TCons ("GenericProgInfo","ProgInfo") [TVar 596]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []])))))))) (Rule [1,2,3,4,5,6,7] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("System","getCPUTime") [],Comb (FuncPartCall 1) ("WorkerFunctions","analysisClientWithStore._#lambda3._#lambda4._#lambda5") [Var 1,Var 2,Var 3,Var 7,Var 4,Var 5,Var 6]])),Func ("WorkerFunctions","analysisClientWithStore._#lambda3._#lambda4._#lambda5") 8 Private (FuncType (TCons ("Analysis","Analysis") [TVar 596]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("GenericProgInfo","ProgInfo") [TVar 596]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("FlatCurry","Prog") []) (FuncType (TCons ("IOExts","IORef") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("GenericProgInfo","ProgInfo") [TVar 596]]]]) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","IO") [TCons ("Prelude","()") []]))))))))) (Rule [1,2,3,4,5,6,7,8] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("WorkerFunctions","getStartValues") [Var 1,Var 6],Comb (FuncPartCall 1) ("WorkerFunctions","analysisClientWithStore._#lambda3._#lambda4._#lambda5._#lambda6") [Var 1,Var 2,Var 3,Var 4,Var 5,Var 6,Var 8,Var 7]])),Func ("WorkerFunctions","analysisClientWithStore._#lambda3._#lambda4._#lambda5._#lambda6") 9 Private (FuncType (TCons ("Analysis","Analysis") [TVar 596]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("GenericProgInfo","ProgInfo") [TVar 596]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("FlatCurry","Prog") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("IOExts","IORef") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("GenericProgInfo","ProgInfo") [TVar 596]]]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TVar 596]]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []])))))))))) (Rule [1,2,3,4,5,6,7,8,9] (Comb FuncCall ("Prelude",">>=") [Case  Rigid (Comb FuncCall ("Analysis","isCombinedAnalysis") [Var 1]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("WorkerFunctions","execCombinedAnalysis") [Var 1,Var 6,Var 4,Var 9,Var 5,Var 3]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("WorkerFunctions","runAnalysis") [Var 1,Var 6,Var 4,Var 9,Var 3])],Comb (FuncPartCall 1) ("WorkerFunctions","analysisClientWithStore._#lambda3._#lambda4._#lambda5._#lambda6._#lambda7") [Var 2,Var 5,Var 7,Var 8]])),Func ("WorkerFunctions","analysisClientWithStore._#lambda3._#lambda4._#lambda5._#lambda6._#lambda7") 5 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("IOExts","IORef") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("GenericProgInfo","ProgInfo") [TVar 596]]]]) (FuncType (TCons ("GenericProgInfo","ProgInfo") [TVar 596]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []])))))) (Rule [1,2,3,4,5] (Comb FuncCall ("Prelude",">>") [Comb FuncCall ("LoadAnalysis","storeAnalysisResult") [Var 1,Var 2,Var 5],Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("System","getCPUTime") [],Comb (FuncPartCall 1) ("WorkerFunctions","analysisClientWithStore._#lambda3._#lambda4._#lambda5._#lambda6._#lambda7._#lambda8") [Var 1,Var 2,Var 5,Var 3,Var 4]]])),Func ("WorkerFunctions","analysisClientWithStore._#lambda3._#lambda4._#lambda5._#lambda6._#lambda7._#lambda8") 6 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("GenericProgInfo","ProgInfo") [TVar 596]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("IOExts","IORef") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("GenericProgInfo","ProgInfo") [TVar 596]]]]) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","IO") [TCons ("Prelude","()") []]))))))) (Rule [1,2,3,4,5,6] (Comb FuncCall ("Prelude",">>") [Comb FuncCall ("Configuration","debugMessageLevel") [Lit (Intc  1),Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'A'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]],Comb FuncCall ("Prelude","++") [Var 1,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '/'),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Var 2,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","show") [Comb FuncCall ("Prelude","-") [Var 6,Var 4]],Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]],Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("IOExts","readIORef") [Var 5],Comb (FuncPartCall 1) ("WorkerFunctions","analysisClientWithStore._#lambda3._#lambda4._#lambda5._#lambda6._#lambda7._#lambda8._#lambda9") [Var 2,Var 3,Var 5]]])),Func ("WorkerFunctions","analysisClientWithStore._#lambda3._#lambda4._#lambda5._#lambda6._#lambda7._#lambda8._#lambda9") 4 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("GenericProgInfo","ProgInfo") [TVar 596]) (FuncType (TCons ("IOExts","IORef") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("GenericProgInfo","ProgInfo") [TVar 596]]]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("GenericProgInfo","ProgInfo") [TVar 596]]]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []]))))) (Rule [1,2,3,4] (Comb FuncCall ("IOExts","writeIORef") [Var 3,Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Var 1,Comb FuncCall ("GenericProgInfo","publicProgInfo") [Var 2]],Var 4]])),Func ("WorkerFunctions","getInterfaceInfosWS") 3 Public (FuncType (TCons ("IOExts","IORef") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("GenericProgInfo","ProgInfo") [TVar 0]]]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","IO") [TCons ("GenericProgInfo","ProgInfo") [TVar 0]])))) (Rule [1,2,3] (Case  Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","return") [Comb FuncCall ("GenericProgInfo","emptyProgInfo") []]),Branch (Pattern ("Prelude",":") [4,5]) (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("IOExts","readIORef") [Var 1],Comb (FuncPartCall 1) ("WorkerFunctions","getInterfaceInfosWS._#lambda11") [Var 2,Var 4,Var 5,Var 1]])])),Func ("WorkerFunctions","getInterfaceInfosWS.loadAndStoreAnalysis.25") 4 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("IOExts","IORef") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("GenericProgInfo","ProgInfo") [TVar 18]]]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("GenericProgInfo","ProgInfo") [TVar 18]]]) (TCons ("Prelude","IO") [TCons ("GenericProgInfo","ProgInfo") [TVar 18]]))))) (Rule [1,2,3,4] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("LoadAnalysis","loadPublicAnalysis") [Var 1,Var 2],Comb (FuncPartCall 1) ("WorkerFunctions","getInterfaceInfosWS.loadAndStoreAnalysis.25._#lambda10") [Var 4,Var 2,Var 3]])),Func ("WorkerFunctions","getInterfaceInfosWS.loadAndStoreAnalysis.25._#lambda10") 4 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("GenericProgInfo","ProgInfo") [TVar 18]]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("IOExts","IORef") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("GenericProgInfo","ProgInfo") [TVar 18]]]]) (FuncType (TCons ("GenericProgInfo","ProgInfo") [TVar 18]) (TCons ("Prelude","IO") [TCons ("GenericProgInfo","ProgInfo") [TVar 18]]))))) (Rule [1,2,3,4] (Comb FuncCall ("Prelude",">>") [Comb FuncCall ("IOExts","writeIORef") [Var 3,Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Var 2,Var 4],Var 1]],Comb FuncCall ("Prelude","return") [Var 4]])),Func ("WorkerFunctions","getInterfaceInfosWS._#lambda11") 5 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("IOExts","IORef") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("GenericProgInfo","ProgInfo") [TVar 18]]]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("GenericProgInfo","ProgInfo") [TVar 18]]]) (TCons ("Prelude","IO") [TCons ("GenericProgInfo","ProgInfo") [TVar 18]])))))) (Rule [1,2,3,4,5] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Prelude","maybe") [Comb FuncCall ("WorkerFunctions","getInterfaceInfosWS.loadAndStoreAnalysis.25") [Var 1,Var 2,Var 4,Var 5],Comb (FuncPartCall 1) ("Prelude","return") [],Comb FuncCall ("Prelude","lookup") [Var 2,Var 5]],Comb (FuncPartCall 1) ("WorkerFunctions","getInterfaceInfosWS._#lambda11._#lambda12") [Var 1,Var 3,Var 4]])),Func ("WorkerFunctions","getInterfaceInfosWS._#lambda11._#lambda12") 4 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("IOExts","IORef") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("GenericProgInfo","ProgInfo") [TVar 18]]]]) (FuncType (TCons ("GenericProgInfo","ProgInfo") [TVar 18]) (TCons ("Prelude","IO") [TCons ("GenericProgInfo","ProgInfo") [TVar 18]]))))) (Rule [1,2,3,4] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("WorkerFunctions","getInterfaceInfosWS") [Var 3,Var 1,Var 2],Comb (FuncPartCall 1) ("WorkerFunctions","getInterfaceInfosWS._#lambda11._#lambda12._#lambda13") [Var 4]])),Func ("WorkerFunctions","getInterfaceInfosWS._#lambda11._#lambda12._#lambda13") 2 Private (FuncType (TCons ("GenericProgInfo","ProgInfo") [TVar 18]) (FuncType (TCons ("GenericProgInfo","ProgInfo") [TVar 18]) (TCons ("Prelude","IO") [TCons ("GenericProgInfo","ProgInfo") [TVar 18]]))) (Rule [1,2] (Comb FuncCall ("Prelude","return") [Comb FuncCall ("GenericProgInfo","combineProgInfo") [Var 1,Var 2]])),Func ("WorkerFunctions","getStartValues") 2 Public (FuncType (TCons ("Analysis","Analysis") [TVar 0]) (FuncType (TCons ("FlatCurry","Prog") []) (TCons ("Prelude","IO") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TVar 0]]]))) (Rule [1,2] (Case  Rigid (Comb FuncCall ("Analysis","isSimpleAnalysis") [Var 1]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","return") [Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude","False") []) (Let [(3,Case  Rigid (Var 1) [Branch (Pattern ("Analysis","DependencyFuncAnalysis") [4,5,6]) (Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("WorkerFunctions","getStartValues._#lambda15") [Var 1],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FlatCurryGoodies","progFuncs") [],Var 2]]),Branch (Pattern ("Analysis","CombinedDependencyFuncAnalysis") [7,8,9,10,11]) (Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("WorkerFunctions","getStartValues._#lambda16") [Var 1],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FlatCurryGoodies","progFuncs") [],Var 2]]),Branch (Pattern ("Analysis","DependencyTypeAnalysis") [12,13,14]) (Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("WorkerFunctions","getStartValues._#lambda17") [Var 1],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FlatCurryGoodies","progTypes") [],Var 2]]),Branch (Pattern ("Analysis","CombinedDependencyTypeAnalysis") [15,16,17,18,19]) (Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("WorkerFunctions","getStartValues._#lambda18") [Var 1],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FlatCurryGoodies","progTypes") [],Var 2]]),Branch (Pattern ("Analysis","SimpleFuncAnalysis") [20,21]) (Comb FuncCall ("Prelude","failed") []),Branch (Pattern ("Analysis","SimpleTypeAnalysis") [22,23]) (Comb FuncCall ("Prelude","failed") []),Branch (Pattern ("Analysis","SimpleConstructorAnalysis") [24,25]) (Comb FuncCall ("Prelude","failed") []),Branch (Pattern ("Analysis","CombinedSimpleFuncAnalysis") [26,27,28,29]) (Comb FuncCall ("Prelude","failed") []),Branch (Pattern ("Analysis","CombinedSimpleTypeAnalysis") [30,31,32,33]) (Comb FuncCall ("Prelude","failed") [])])] (Comb FuncCall ("Prelude","return") [Var 3]))])),Func ("WorkerFunctions","getStartValues._#lambda15") 2 Private (FuncType (TCons ("Analysis","Analysis") [TVar 75]) (FuncType (TCons ("FlatCurry","FuncDecl") []) (TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TVar 75]))) (Rule [1,2] (Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FlatCurryGoodies","funcName") [],Var 2],Comb FuncCall ("Analysis","startValue") [Var 1]])),Func ("WorkerFunctions","getStartValues._#lambda16") 2 Private (FuncType (TCons ("Analysis","Analysis") [TVar 75]) (FuncType (TCons ("FlatCurry","FuncDecl") []) (TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TVar 75]))) (Rule [1,2] (Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FlatCurryGoodies","funcName") [],Var 2],Comb FuncCall ("Analysis","startValue") [Var 1]])),Func ("WorkerFunctions","getStartValues._#lambda17") 2 Private (FuncType (TCons ("Analysis","Analysis") [TVar 75]) (FuncType (TCons ("FlatCurry","TypeDecl") []) (TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TVar 75]))) (Rule [1,2] (Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FlatCurryGoodies","typeName") [],Var 2],Comb FuncCall ("Analysis","startValue") [Var 1]])),Func ("WorkerFunctions","getStartValues._#lambda18") 2 Private (FuncType (TCons ("Analysis","Analysis") [TVar 75]) (FuncType (TCons ("FlatCurry","TypeDecl") []) (TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TVar 75]))) (Rule [1,2] (Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FlatCurryGoodies","typeName") [],Var 2],Comb FuncCall ("Analysis","startValue") [Var 1]])),Func ("WorkerFunctions","funcInfos2ProgInfo") 2 Public (FuncType (TCons ("FlatCurry","Prog") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TVar 0]]) (TCons ("GenericProgInfo","ProgInfo") [TVar 0]))) (Rule [1,2] (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("GenericProgInfo","lists2ProgInfo") [],Comb FuncCall ("WorkerFunctions","map2") [Comb (FuncPartCall 1) ("WorkerFunctions","funcInfos2ProgInfo._#lambda19") [Var 2],Comb FuncCall ("List","partition") [Comb (FuncPartCall 1) ("WorkerFunctions","isVisibleFunc") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FlatCurryGoodies","progFuncs") [],Var 1]]]])),Func ("WorkerFunctions","funcInfos2ProgInfo._#lambda19") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TVar 105]]) (FuncType (TCons ("FlatCurry","FuncDecl") []) (TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TVar 105]))) (Rule [1,2] (Let [(3,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FlatCurryGoodies","funcName") [],Var 2])] (Comb ConsCall ("Prelude","(,)") [Var 3,Comb FuncCall ("Maybe","fromJust") [Comb FuncCall ("Prelude","lookup") [Var 3,Var 1]]]))),Func ("WorkerFunctions","typeInfos2ProgInfo") 2 Public (FuncType (TCons ("FlatCurry","Prog") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TVar 0]]) (TCons ("GenericProgInfo","ProgInfo") [TVar 0]))) (Rule [1,2] (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("GenericProgInfo","lists2ProgInfo") [],Comb FuncCall ("WorkerFunctions","map2") [Comb (FuncPartCall 1) ("WorkerFunctions","typeInfos2ProgInfo._#lambda20") [Var 2],Comb FuncCall ("List","partition") [Comb (FuncPartCall 1) ("WorkerFunctions","isVisibleType") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FlatCurryGoodies","progTypes") [],Var 1]]]])),Func ("WorkerFunctions","typeInfos2ProgInfo._#lambda20") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TVar 121]]) (FuncType (TCons ("FlatCurry","TypeDecl") []) (TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TVar 121]))) (Rule [1,2] (Let [(3,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FlatCurryGoodies","typeName") [],Var 2])] (Comb ConsCall ("Prelude","(,)") [Var 3,Comb FuncCall ("Maybe","fromJust") [Comb FuncCall ("Prelude","lookup") [Var 3,Var 1]]]))),Func ("WorkerFunctions","map2") 2 Public (FuncType (FuncType (TVar 0) (TVar 1)) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TVar 0]]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 1],TCons ("Prelude","[]") [TVar 1]]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Prelude","map") [Var 1,Var 3],Comb FuncCall ("Prelude","map") [Var 1,Var 4]])])),Func ("WorkerFunctions","updateList") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TVar 1]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TVar 1]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TVar 1]]))) (Rule [1,2] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Var 2),Branch (Pattern ("Prelude",":") [3,4]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Comb FuncCall ("WorkerFunctions","updateList") [Var 4,Comb FuncCall ("WorkerFunctions","updateValue") [Comb ConsCall ("Prelude","(,)") [Var 5,Var 6],Var 2]])])])),Func ("WorkerFunctions","updateValue") 2 Public (FuncType (TCons ("Prelude","(,)") [TVar 0,TVar 1]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TVar 1]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TVar 1]]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [3,4]) (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [5,6]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude","(,)") [7,8]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 5,Var 7]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Var 5,Var 6],Var 4]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Var 7,Var 8],Comb FuncCall ("WorkerFunctions","updateValue") [Comb ConsCall ("Prelude","(,)") [Var 5,Var 6],Var 4]])])])])])),Func ("WorkerFunctions","execCombinedAnalysis") 6 Public (FuncType (TCons ("Analysis","Analysis") [TVar 0]) (FuncType (TCons ("FlatCurry","Prog") []) (FuncType (TCons ("GenericProgInfo","ProgInfo") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TVar 0]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("GenericProgInfo","ProgInfo") [TVar 0]]))))))) (Rule [1,2,3,4,5,6] (Case  Rigid (Var 1) [Branch (Pattern ("Analysis","CombinedSimpleFuncAnalysis") [7,8,9,10]) (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Prelude","apply") [Var 10,Var 5],Comb (FuncPartCall 1) ("WorkerFunctions","execCombinedAnalysis._#lambda22") [Var 8,Var 6,Var 3,Var 2,Var 4]]),Branch (Pattern ("Analysis","CombinedSimpleTypeAnalysis") [11,12,13,14]) (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Prelude","apply") [Var 14,Var 5],Comb (FuncPartCall 1) ("WorkerFunctions","execCombinedAnalysis._#lambda23") [Var 12,Var 6,Var 3,Var 2,Var 4]]),Branch (Pattern ("Analysis","CombinedDependencyFuncAnalysis") [15,16,17,18,19]) (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Prelude","apply") [Var 19,Var 5],Comb (FuncPartCall 1) ("WorkerFunctions","execCombinedAnalysis._#lambda24") [Var 16,Var 6,Var 3,Var 2,Var 18,Var 4]]),Branch (Pattern ("Analysis","CombinedDependencyTypeAnalysis") [20,21,22,23,24]) (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Prelude","apply") [Var 24,Var 5],Comb (FuncPartCall 1) ("WorkerFunctions","execCombinedAnalysis._#lambda25") [Var 21,Var 6,Var 3,Var 2,Var 23,Var 4]]),Branch (Pattern ("Analysis","SimpleFuncAnalysis") [25,26]) (Comb FuncCall ("Prelude","failed") []),Branch (Pattern ("Analysis","SimpleTypeAnalysis") [27,28]) (Comb FuncCall ("Prelude","failed") []),Branch (Pattern ("Analysis","SimpleConstructorAnalysis") [29,30]) (Comb FuncCall ("Prelude","failed") []),Branch (Pattern ("Analysis","DependencyFuncAnalysis") [31,32,33]) (Comb FuncCall ("Prelude","failed") []),Branch (Pattern ("Analysis","DependencyTypeAnalysis") [34,35,36]) (Comb FuncCall ("Prelude","failed") [])])),Func ("WorkerFunctions","execCombinedAnalysis._#lambda22") 6 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("GenericProgInfo","ProgInfo") [TVar 577]) (FuncType (TCons ("FlatCurry","Prog") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TVar 577]]) (FuncType (FuncType (TCons ("FlatCurry","FuncDecl") []) (TVar 577)) (TCons ("Prelude","IO") [TCons ("GenericProgInfo","ProgInfo") [TVar 577]]))))))) (Rule [1,2,3,4,5,6] (Comb FuncCall ("WorkerFunctions","runAnalysis") [Comb ConsCall ("Analysis","SimpleFuncAnalysis") [Var 1,Var 6],Var 4,Var 3,Var 5,Var 2])),Func ("WorkerFunctions","execCombinedAnalysis._#lambda23") 6 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("GenericProgInfo","ProgInfo") [TVar 577]) (FuncType (TCons ("FlatCurry","Prog") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TVar 577]]) (FuncType (FuncType (TCons ("FlatCurry","TypeDecl") []) (TVar 577)) (TCons ("Prelude","IO") [TCons ("GenericProgInfo","ProgInfo") [TVar 577]]))))))) (Rule [1,2,3,4,5,6] (Comb FuncCall ("WorkerFunctions","runAnalysis") [Comb ConsCall ("Analysis","SimpleTypeAnalysis") [Var 1,Var 6],Var 4,Var 3,Var 5,Var 2])),Func ("WorkerFunctions","execCombinedAnalysis._#lambda24") 7 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("GenericProgInfo","ProgInfo") [TVar 577]) (FuncType (TCons ("FlatCurry","Prog") []) (FuncType (TVar 577) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TVar 577]]) (FuncType (FuncType (TCons ("FlatCurry","FuncDecl") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TVar 577]]) (TVar 577))) (TCons ("Prelude","IO") [TCons ("GenericProgInfo","ProgInfo") [TVar 577]])))))))) (Rule [1,2,3,4,5,6,7] (Comb FuncCall ("WorkerFunctions","runAnalysis") [Comb ConsCall ("Analysis","DependencyFuncAnalysis") [Var 1,Var 5,Var 7],Var 4,Var 3,Var 6,Var 2])),Func ("WorkerFunctions","execCombinedAnalysis._#lambda25") 7 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("GenericProgInfo","ProgInfo") [TVar 577]) (FuncType (TCons ("FlatCurry","Prog") []) (FuncType (TVar 577) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TVar 577]]) (FuncType (FuncType (TCons ("FlatCurry","TypeDecl") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TVar 577]]) (TVar 577))) (TCons ("Prelude","IO") [TCons ("GenericProgInfo","ProgInfo") [TVar 577]])))))))) (Rule [1,2,3,4,5,6,7] (Comb FuncCall ("WorkerFunctions","runAnalysis") [Comb ConsCall ("Analysis","DependencyTypeAnalysis") [Var 1,Var 5,Var 7],Var 4,Var 3,Var 6,Var 2])),Func ("WorkerFunctions","runAnalysis") 5 Public (FuncType (TCons ("Analysis","Analysis") [TVar 0]) (FuncType (TCons ("FlatCurry","Prog") []) (FuncType (TCons ("GenericProgInfo","ProgInfo") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TVar 0]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("GenericProgInfo","ProgInfo") [TVar 0]])))))) (Rule [1,2,3,4,5] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("LoadAnalysis","loadDefaultAnalysisValues") [Comb FuncCall ("Analysis","analysisName") [Var 1],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FlatCurryGoodies","progName") [],Var 2]],Comb (FuncPartCall 1) ("WorkerFunctions","runAnalysis._#lambda26") [Var 1,Var 5,Var 3,Var 2,Var 4]])),Func ("WorkerFunctions","runAnalysis._#lambda26") 6 Private (FuncType (TCons ("Analysis","Analysis") [TVar 517]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("GenericProgInfo","ProgInfo") [TVar 517]) (FuncType (TCons ("FlatCurry","Prog") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TVar 517]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TVar 517]]) (TCons ("Prelude","IO") [TCons ("GenericProgInfo","ProgInfo") [TVar 517]]))))))) (Rule [1,2,3,4,5,6] (Let [(7,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FlatCurryGoodies","updProgFuncs") [Comb (FuncPartCall 1) ("Prelude","filter") [Comb (FuncPartCall 1) ("WorkerFunctions","runAnalysis._#lambda26._#lambda27") [Var 6]]],Var 4]),(8,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FlatCurryGoodies","updProgFuncs") [Comb (FuncPartCall 1) ("Prelude","filter") [Comb (FuncPartCall 1) ("WorkerFunctions","runAnalysis._#lambda26._#lambda28") [Var 6]]],Var 4]),(9,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FlatCurryGoodies","updProgTypes") [Comb (FuncPartCall 1) ("Prelude","filter") [Comb (FuncPartCall 1) ("WorkerFunctions","runAnalysis._#lambda26._#lambda29") [Var 6]]],Var 4]),(10,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FlatCurryGoodies","updProgTypes") [Comb (FuncPartCall 1) ("Prelude","filter") [Comb (FuncPartCall 1) ("WorkerFunctions","runAnalysis._#lambda26._#lambda30") [Var 6]]],Var 4]),(11,Case  Rigid (Var 1) [Branch (Pattern ("Analysis","SimpleFuncAnalysis") [12,13]) (Comb ConsCall ("Prelude","(,)") [Var 8,Comb FuncCall ("WorkerFunctions","funcInfos2ProgInfo") [Var 7,Var 6]]),Branch (Pattern ("Analysis","SimpleTypeAnalysis") [14,15]) (Comb ConsCall ("Prelude","(,)") [Var 10,Comb FuncCall ("WorkerFunctions","typeInfos2ProgInfo") [Var 9,Var 6]]),Branch (Pattern ("Analysis","SimpleConstructorAnalysis") [16,17]) (Case  Rigid (Comb FuncCall ("Prelude","null") [Var 6]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","(,)") [Var 4,Comb FuncCall ("GenericProgInfo","emptyProgInfo") []]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","error") [Comb ConsCall ("Prelude",":") [Lit (Charc  'S'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'A'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'v'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  '!'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])]),Branch (Pattern ("Analysis","DependencyFuncAnalysis") [18,19,20]) (Comb ConsCall ("Prelude","(,)") [Var 8,Comb FuncCall ("WorkerFunctions","funcInfos2ProgInfo") [Var 7,Var 6]]),Branch (Pattern ("Analysis","DependencyTypeAnalysis") [21,22,23]) (Comb ConsCall ("Prelude","(,)") [Var 10,Comb FuncCall ("WorkerFunctions","typeInfos2ProgInfo") [Var 9,Var 6]]),Branch (Pattern ("Analysis","CombinedSimpleFuncAnalysis") [24,25,26,27]) (Comb FuncCall ("Prelude","failed") []),Branch (Pattern ("Analysis","CombinedSimpleTypeAnalysis") [28,29,30,31]) (Comb FuncCall ("Prelude","failed") []),Branch (Pattern ("Analysis","CombinedDependencyFuncAnalysis") [32,33,34,35,36]) (Comb FuncCall ("Prelude","failed") []),Branch (Pattern ("Analysis","CombinedDependencyTypeAnalysis") [37,38,39,40,41]) (Comb FuncCall ("Prelude","failed") [])]),(42,Comb FuncCall ("WorkerFunctions","runAnalysis._#lambda26._#selFP2#progWithoutDefaults") [Var 11]),(43,Comb FuncCall ("WorkerFunctions","runAnalysis._#lambda26._#selFP3#defaultproginfo") [Var 11]),(44,Comb FuncCall ("WorkerFunctions","executeAnalysis") [Var 1,Var 42,Comb FuncCall ("GenericProgInfo","combineProgInfo") [Var 3,Var 43],Var 5,Var 2])] (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Prelude","return") [],Comb FuncCall ("GenericProgInfo","combineProgInfo") [Var 43,Var 44]]))),Func ("WorkerFunctions","runAnalysis._#lambda26._#lambda27") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TVar 517]]) (FuncType (TCons ("FlatCurry","FuncDecl") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","elem") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FlatCurryGoodies","funcName") [],Var 2]],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Prelude","fst") [],Var 1]])),Func ("WorkerFunctions","runAnalysis._#lambda26._#lambda28") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TVar 517]]) (FuncType (TCons ("FlatCurry","FuncDecl") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","notElem") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FlatCurryGoodies","funcName") [],Var 2]],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Prelude","fst") [],Var 1]])),Func ("WorkerFunctions","runAnalysis._#lambda26._#lambda29") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TVar 517]]) (FuncType (TCons ("FlatCurry","TypeDecl") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","elem") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FlatCurryGoodies","typeName") [],Var 2]],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Prelude","fst") [],Var 1]])),Func ("WorkerFunctions","runAnalysis._#lambda26._#lambda30") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TVar 517]]) (FuncType (TCons ("FlatCurry","TypeDecl") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","notElem") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FlatCurryGoodies","typeName") [],Var 2]],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Prelude","fst") [],Var 1]])),Func ("WorkerFunctions","runAnalysis._#lambda26._#selFP2#progWithoutDefaults") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("FlatCurry","Prog") [],TCons ("GenericProgInfo","ProgInfo") [TVar 517]]) (TCons ("FlatCurry","Prog") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("WorkerFunctions","runAnalysis._#lambda26._#selFP3#defaultproginfo") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("FlatCurry","Prog") [],TCons ("GenericProgInfo","ProgInfo") [TVar 517]]) (TCons ("GenericProgInfo","ProgInfo") [TVar 517])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("WorkerFunctions","executeAnalysis") 5 Public (FuncType (TCons ("Analysis","Analysis") [TVar 0]) (FuncType (TCons ("FlatCurry","Prog") []) (FuncType (TCons ("GenericProgInfo","ProgInfo") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TVar 0]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("GenericProgInfo","ProgInfo") [TVar 0])))))) (Rule [1,2,3,4,5] (Case  Flex (Var 1) [Branch (Pattern ("Analysis","SimpleFuncAnalysis") [6,7]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("GenericProgInfo","lists2ProgInfo") [],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("WorkerFunctions","map2") [Comb (FuncPartCall 1) ("WorkerFunctions","executeAnalysis._#lambda32") [Var 7]],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("List","partition") [Comb (FuncPartCall 1) ("WorkerFunctions","isVisibleFunc") []],Comb FuncCall ("FlatCurryGoodies","progFuncs") []]]],Var 2]),Branch (Pattern ("Analysis","SimpleTypeAnalysis") [8,9]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("GenericProgInfo","lists2ProgInfo") [],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("WorkerFunctions","map2") [Comb (FuncPartCall 1) ("WorkerFunctions","executeAnalysis._#lambda33") [Var 9]],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("List","partition") [Comb (FuncPartCall 1) ("WorkerFunctions","isVisibleType") []],Comb FuncCall ("FlatCurryGoodies","progTypes") []]]],Var 2]),Branch (Pattern ("Analysis","SimpleConstructorAnalysis") [10,11]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("GenericProgInfo","lists2ProgInfo") [],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("WorkerFunctions","map2") [Comb (FuncPartCall 1) ("WorkerFunctions","executeAnalysis._#lambda34") [Var 11]],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("List","partition") [Comb (FuncPartCall 1) ("WorkerFunctions","executeAnalysis.isVisibleCons.164") []],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Prelude","concatMap") [Comb (FuncPartCall 1) ("WorkerFunctions","executeAnalysis._#lambda35") []],Comb FuncCall ("FlatCurryGoodies","progTypes") []]]]],Var 2]),Branch (Pattern ("Analysis","DependencyFuncAnalysis") [12,13,14]) (Case  Rigid (Var 5) [Branch (Pattern ("Prelude",":") [15,16]) (Let [(17,Var 15)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 17,Lit (Charc  's')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 16) [Branch (Pattern ("Prelude",":") [18,19]) (Let [(20,Var 18)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 20,Lit (Charc  'i')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 19) [Branch (Pattern ("Prelude",":") [21,22]) (Let [(23,Var 21)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 23,Lit (Charc  'm')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 22) [Branch (Pattern ("Prelude",":") [24,25]) (Let [(26,Var 24)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 26,Lit (Charc  'p')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 25) [Branch (Pattern ("Prelude",":") [27,28]) (Let [(29,Var 27)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 29,Lit (Charc  'l')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 28) [Branch (Pattern ("Prelude",":") [30,31]) (Let [(32,Var 30)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 32,Lit (Charc  'e')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 31) [Branch (Pattern ("Prelude","[]") []) (Let [(33,Comb FuncCall ("WorkerFunctions","map2") [Comb (FuncPartCall 1) ("WorkerFunctions","addCalledFunctions") [],Comb FuncCall ("List","partition") [Comb (FuncPartCall 1) ("WorkerFunctions","isVisibleFunc") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FlatCurryGoodies","progFuncs") [],Var 2]]]),(34,Comb FuncCall ("WorkerFunctions","funcInfos2ProgInfo") [Var 2,Var 4])] (Comb FuncCall ("WorkerFunctions","simpleIteration") [Var 14,Comb FuncCall ("FlatCurryGoodies","funcName") [],Var 33,Var 3,Var 34])),Branch (Pattern ("Prelude",":") [35,36]) (Comb FuncCall ("WorkerFunctions","errorUnknownFixpoint") [])]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("WorkerFunctions","errorUnknownFixpoint") [])])),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("WorkerFunctions","errorUnknownFixpoint") [])]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("WorkerFunctions","errorUnknownFixpoint") [])])),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("WorkerFunctions","errorUnknownFixpoint") [])]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("WorkerFunctions","errorUnknownFixpoint") [])])),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("WorkerFunctions","errorUnknownFixpoint") [])]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("WorkerFunctions","errorUnknownFixpoint") [])])),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("WorkerFunctions","errorUnknownFixpoint") [])]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("WorkerFunctions","errorUnknownFixpoint") [])])),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("WorkerFunctions","errorUnknownFixpoint") [])]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 17,Lit (Charc  'w')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 16) [Branch (Pattern ("Prelude",":") [37,38]) (Let [(39,Var 37)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 39,Lit (Charc  'l')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 38) [Branch (Pattern ("Prelude",":") [40,41]) (Let [(42,Var 40)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 42,Lit (Charc  'i')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 41) [Branch (Pattern ("Prelude",":") [43,44]) (Let [(45,Var 43)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 45,Lit (Charc  's')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 44) [Branch (Pattern ("Prelude",":") [46,47]) (Let [(48,Var 46)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 48,Lit (Charc  't')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 47) [Branch (Pattern ("Prelude","[]") []) (Let [(49,Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("WorkerFunctions","addCalledFunctions") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FlatCurryGoodies","progFuncs") [],Var 2]])] (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("WorkerFunctions","funcInfos2ProgInfo") [Var 2],Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("FiniteMap","fmToList") [],Comb FuncCall ("WorkerFunctions","wlIteration") [Var 14,Comb FuncCall ("FlatCurryGoodies","funcName") [],Var 49,Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("SetRBT","emptySetRBT") [],Comb (FuncPartCall 2) ("Prelude","<") []],Var 3,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FiniteMap","listToFM") [Comb (FuncPartCall 2) ("Prelude","<") []],Var 4]]]])),Branch (Pattern ("Prelude",":") [50,51]) (Let [(52,Var 50)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 52,Lit (Charc  's')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 51) [Branch (Pattern ("Prelude",":") [53,54]) (Let [(55,Var 53)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 55,Lit (Charc  'c')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 54) [Branch (Pattern ("Prelude",":") [56,57]) (Let [(58,Var 56)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 58,Lit (Charc  'c')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 57) [Branch (Pattern ("Prelude","[]") []) (Let [(59,Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("WorkerFunctions","addCalledFunctions") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FlatCurryGoodies","progFuncs") [],Var 2]]),(60,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("SCC","scc") [Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","flip") [Comb (ConsPartCall 2) ("Prelude",":") [],Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude",".") [Comb FuncCall ("FlatCurryGoodies","funcName") [],Comb (FuncPartCall 1) ("Prelude","fst") []]],Comb (FuncPartCall 1) ("Prelude","snd") []],Var 59])] (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("WorkerFunctions","funcInfos2ProgInfo") [Var 2],Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("FiniteMap","fmToList") [],Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("WorkerFunctions","executeAnalysis._#lambda38") [Var 14,Var 3],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FiniteMap","listToFM") [Comb (FuncPartCall 2) ("Prelude","<") []],Var 4],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","reverse") [],Var 60]]]])),Branch (Pattern ("Prelude",":") [61,62]) (Comb FuncCall ("WorkerFunctions","errorUnknownFixpoint") [])]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("WorkerFunctions","errorUnknownFixpoint") [])])),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("WorkerFunctions","errorUnknownFixpoint") [])]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("WorkerFunctions","errorUnknownFixpoint") [])])),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("WorkerFunctions","errorUnknownFixpoint") [])]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("WorkerFunctions","errorUnknownFixpoint") [])]))]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("WorkerFunctions","errorUnknownFixpoint") [])])),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("WorkerFunctions","errorUnknownFixpoint") [])]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("WorkerFunctions","errorUnknownFixpoint") [])])),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("WorkerFunctions","errorUnknownFixpoint") [])]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("WorkerFunctions","errorUnknownFixpoint") [])])),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("WorkerFunctions","errorUnknownFixpoint") [])]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("WorkerFunctions","errorUnknownFixpoint") [])])),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("WorkerFunctions","errorUnknownFixpoint") [])]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("WorkerFunctions","errorUnknownFixpoint") [])])])),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("WorkerFunctions","errorUnknownFixpoint") [])]),Branch (Pattern ("Analysis","DependencyTypeAnalysis") [63,64,65]) (Case  Rigid (Var 5) [Branch (Pattern ("Prelude",":") [66,67]) (Let [(68,Var 66)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 68,Lit (Charc  's')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 67) [Branch (Pattern ("Prelude",":") [69,70]) (Let [(71,Var 69)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 71,Lit (Charc  'i')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 70) [Branch (Pattern ("Prelude",":") [72,73]) (Let [(74,Var 72)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 74,Lit (Charc  'm')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 73) [Branch (Pattern ("Prelude",":") [75,76]) (Let [(77,Var 75)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 77,Lit (Charc  'p')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 76) [Branch (Pattern ("Prelude",":") [78,79]) (Let [(80,Var 78)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 80,Lit (Charc  'l')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 79) [Branch (Pattern ("Prelude",":") [81,82]) (Let [(83,Var 81)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 83,Lit (Charc  'e')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 82) [Branch (Pattern ("Prelude","[]") []) (Let [(84,Comb FuncCall ("WorkerFunctions","map2") [Comb (FuncPartCall 1) ("WorkerFunctions","addUsedTypes") [],Comb FuncCall ("List","partition") [Comb (FuncPartCall 1) ("WorkerFunctions","isVisibleType") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FlatCurryGoodies","progTypes") [],Var 2]]]),(85,Comb FuncCall ("WorkerFunctions","typeInfos2ProgInfo") [Var 2,Var 4])] (Comb FuncCall ("WorkerFunctions","simpleIteration") [Var 65,Comb FuncCall ("FlatCurryGoodies","typeName") [],Var 84,Var 3,Var 85])),Branch (Pattern ("Prelude",":") [86,87]) (Comb FuncCall ("WorkerFunctions","errorUnknownFixpoint") [])]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("WorkerFunctions","errorUnknownFixpoint") [])])),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("WorkerFunctions","errorUnknownFixpoint") [])]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("WorkerFunctions","errorUnknownFixpoint") [])])),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("WorkerFunctions","errorUnknownFixpoint") [])]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("WorkerFunctions","errorUnknownFixpoint") [])])),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("WorkerFunctions","errorUnknownFixpoint") [])]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("WorkerFunctions","errorUnknownFixpoint") [])])),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("WorkerFunctions","errorUnknownFixpoint") [])]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("WorkerFunctions","errorUnknownFixpoint") [])])),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("WorkerFunctions","errorUnknownFixpoint") [])]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 68,Lit (Charc  'w')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 67) [Branch (Pattern ("Prelude",":") [88,89]) (Let [(90,Var 88)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 90,Lit (Charc  'l')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 89) [Branch (Pattern ("Prelude",":") [91,92]) (Let [(93,Var 91)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 93,Lit (Charc  'i')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 92) [Branch (Pattern ("Prelude",":") [94,95]) (Let [(96,Var 94)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 96,Lit (Charc  's')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 95) [Branch (Pattern ("Prelude",":") [97,98]) (Let [(99,Var 97)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 99,Lit (Charc  't')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 98) [Branch (Pattern ("Prelude","[]") []) (Let [(100,Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("WorkerFunctions","addUsedTypes") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FlatCurryGoodies","progTypes") [],Var 2]])] (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("WorkerFunctions","typeInfos2ProgInfo") [Var 2],Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("FiniteMap","fmToList") [],Comb FuncCall ("WorkerFunctions","wlIteration") [Var 65,Comb FuncCall ("FlatCurryGoodies","typeName") [],Var 100,Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("SetRBT","emptySetRBT") [],Comb (FuncPartCall 2) ("Prelude","<") []],Var 3,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FiniteMap","listToFM") [Comb (FuncPartCall 2) ("Prelude","<") []],Var 4]]]])),Branch (Pattern ("Prelude",":") [101,102]) (Let [(103,Var 101)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 103,Lit (Charc  's')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 102) [Branch (Pattern ("Prelude",":") [104,105]) (Let [(106,Var 104)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 106,Lit (Charc  'c')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 105) [Branch (Pattern ("Prelude",":") [107,108]) (Let [(109,Var 107)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 109,Lit (Charc  'c')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 108) [Branch (Pattern ("Prelude","[]") []) (Let [(110,Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("WorkerFunctions","addUsedTypes") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FlatCurryGoodies","progTypes") [],Var 2]]),(111,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("SCC","scc") [Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","flip") [Comb (ConsPartCall 2) ("Prelude",":") [],Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude",".") [Comb FuncCall ("FlatCurryGoodies","typeName") [],Comb (FuncPartCall 1) ("Prelude","fst") []]],Comb (FuncPartCall 1) ("Prelude","snd") []],Var 110])] (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("WorkerFunctions","typeInfos2ProgInfo") [Var 2],Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("FiniteMap","fmToList") [],Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("WorkerFunctions","executeAnalysis._#lambda40") [Var 65,Var 3],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FiniteMap","listToFM") [Comb (FuncPartCall 2) ("Prelude","<") []],Var 4],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","reverse") [],Var 111]]]])),Branch (Pattern ("Prelude",":") [112,113]) (Comb FuncCall ("WorkerFunctions","errorUnknownFixpoint") [])]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("WorkerFunctions","errorUnknownFixpoint") [])])),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("WorkerFunctions","errorUnknownFixpoint") [])]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("WorkerFunctions","errorUnknownFixpoint") [])])),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("WorkerFunctions","errorUnknownFixpoint") [])]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("WorkerFunctions","errorUnknownFixpoint") [])]))]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("WorkerFunctions","errorUnknownFixpoint") [])])),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("WorkerFunctions","errorUnknownFixpoint") [])]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("WorkerFunctions","errorUnknownFixpoint") [])])),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("WorkerFunctions","errorUnknownFixpoint") [])]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("WorkerFunctions","errorUnknownFixpoint") [])])),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("WorkerFunctions","errorUnknownFixpoint") [])]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("WorkerFunctions","errorUnknownFixpoint") [])])),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("WorkerFunctions","errorUnknownFixpoint") [])]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("WorkerFunctions","errorUnknownFixpoint") [])])])),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("WorkerFunctions","errorUnknownFixpoint") [])])])),Func ("WorkerFunctions","executeAnalysis._#lambda32") 2 Private (FuncType (FuncType (TCons ("FlatCurry","FuncDecl") []) (TVar 400)) (FuncType (TCons ("FlatCurry","FuncDecl") []) (TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TVar 400]))) (Rule [1,2] (Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FlatCurryGoodies","funcName") [],Var 2],Comb FuncCall ("Prelude","apply") [Var 1,Var 2]])),Func ("WorkerFunctions","executeAnalysis._#lambda33") 2 Private (FuncType (FuncType (TCons ("FlatCurry","TypeDecl") []) (TVar 400)) (FuncType (TCons ("FlatCurry","TypeDecl") []) (TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TVar 400]))) (Rule [1,2] (Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FlatCurryGoodies","typeName") [],Var 2],Comb FuncCall ("Prelude","apply") [Var 1,Var 2]])),Func ("WorkerFunctions","executeAnalysis.isVisibleCons.164") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("FlatCurry","ConsDecl") [],TVar 0]) (TCons ("Prelude","Bool") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Comb FuncCall ("Prelude","==") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FlatCurryGoodies","consVisibility") [],Var 2],Comb ConsCall ("FlatCurry","Public") []])])),Func ("WorkerFunctions","executeAnalysis._#lambda34") 2 Private (FuncType (FuncType (TCons ("FlatCurry","ConsDecl") []) (FuncType (TCons ("FlatCurry","TypeDecl") []) (TVar 400))) (FuncType (TCons ("Prelude","(,)") [TCons ("FlatCurry","ConsDecl") [],TCons ("FlatCurry","TypeDecl") []]) (TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TVar 400]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FlatCurryGoodies","consName") [],Var 3],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 1,Var 3],Var 4]])])),Func ("WorkerFunctions","executeAnalysis._#lambda35") 1 Private (FuncType (TCons ("FlatCurry","TypeDecl") []) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("FlatCurry","ConsDecl") [],TCons ("FlatCurry","TypeDecl") []]])) (Rule [1] (Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("WorkerFunctions","executeAnalysis._#lambda35._#lambda36") [Var 1],Comb FuncCall ("WorkerFunctions","consDeclsOfType") [Var 1]])),Func ("WorkerFunctions","executeAnalysis._#lambda35._#lambda36") 2 Private (FuncType (TCons ("FlatCurry","TypeDecl") []) (FuncType (TCons ("FlatCurry","ConsDecl") []) (TCons ("Prelude","(,)") [TCons ("FlatCurry","ConsDecl") [],TCons ("FlatCurry","TypeDecl") []]))) (Rule [1,2] (Comb ConsCall ("Prelude","(,)") [Var 2,Var 1])),Func ("WorkerFunctions","executeAnalysis._#lambda38") 4 Private (FuncType (FuncType (TCons ("FlatCurry","FuncDecl") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TVar 400]]) (TVar 400))) (FuncType (TCons ("GenericProgInfo","ProgInfo") [TVar 400]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("FlatCurry","FuncDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]]]) (FuncType (TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TVar 400]) (TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TVar 400]))))) (Rule [1,2,3,4] (Comb FuncCall ("WorkerFunctions","wlIteration") [Var 1,Comb FuncCall ("FlatCurryGoodies","funcName") [],Var 3,Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("SetRBT","emptySetRBT") [],Comb (FuncPartCall 2) ("Prelude","<") []],Var 2,Var 4])),Func ("WorkerFunctions","executeAnalysis._#lambda40") 4 Private (FuncType (FuncType (TCons ("FlatCurry","TypeDecl") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TVar 400]]) (TVar 400))) (FuncType (TCons ("GenericProgInfo","ProgInfo") [TVar 400]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("FlatCurry","TypeDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]]]) (FuncType (TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TVar 400]) (TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TVar 400]))))) (Rule [1,2,3,4] (Comb FuncCall ("WorkerFunctions","wlIteration") [Var 1,Comb FuncCall ("FlatCurryGoodies","typeName") [],Var 3,Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("SetRBT","emptySetRBT") [],Comb (FuncPartCall 2) ("Prelude","<") []],Var 2,Var 4])),Func ("WorkerFunctions","errorUnknownFixpoint") 0 Public (TVar 0) (Rule [] (Comb FuncCall ("Prelude","error") [Comb ConsCall ("Prelude",":") [Lit (Charc  'U'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'k'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'v'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '\''),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  '\''),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  '!'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])),Func ("WorkerFunctions","addCalledFunctions") 1 Public (FuncType (TCons ("FlatCurry","FuncDecl") []) (TCons ("Prelude","(,)") [TCons ("FlatCurry","FuncDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]])) (Rule [1] (Comb ConsCall ("Prelude","(,)") [Var 1,Comb FuncCall ("FlatCurryDependency","callsDirectly") [Var 1]])),Func ("WorkerFunctions","addUsedTypes") 1 Public (FuncType (TCons ("FlatCurry","TypeDecl") []) (TCons ("Prelude","(,)") [TCons ("FlatCurry","TypeDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]])) (Rule [1] (Comb ConsCall ("Prelude","(,)") [Var 1,Comb FuncCall ("FlatCurryDependency","dependsDirectlyOnTypes") [Var 1]])),Func ("WorkerFunctions","consDeclsOfType") 1 Public (FuncType (TCons ("FlatCurry","TypeDecl") []) (TCons ("Prelude","[]") [TCons ("FlatCurry","ConsDecl") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","Type") [2,3,4,5]) (Var 5),Branch (Pattern ("FlatCurry","TypeSyn") [6,7,8,9]) (Comb ConsCall ("Prelude","[]") [])])),Func ("WorkerFunctions","simpleIteration") 5 Public (FuncType (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TVar 1]]) (TVar 1))) (FuncType (FuncType (TVar 0) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]]],TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]]]]) (FuncType (TCons ("GenericProgInfo","ProgInfo") [TVar 1]) (FuncType (TCons ("GenericProgInfo","ProgInfo") [TVar 1]) (TCons ("GenericProgInfo","ProgInfo") [TVar 1])))))) (Rule [1,2,3,4,5] (Let [(6,Comb FuncCall ("GenericProgInfo","combineProgInfo") [Var 5,Var 4]),(7,Comb FuncCall ("WorkerFunctions","map2") [Comb (FuncPartCall 1) ("WorkerFunctions","simpleIteration._#lambda41") [Var 1,Var 6,Var 2],Var 3]),(8,Comb FuncCall ("GenericProgInfo","lists2ProgInfo") [Var 7])] (Case  Rigid (Comb FuncCall ("GenericProgInfo","equalProgInfo") [Var 5,Var 8]) [Branch (Pattern ("Prelude","True") []) (Var 5),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("WorkerFunctions","simpleIteration") [Var 1,Var 2,Var 3,Var 4,Var 8])]))),Func ("WorkerFunctions","simpleIteration._#lambda41") 4 Private (FuncType (FuncType (TVar 149) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TVar 161]]) (TVar 161))) (FuncType (TCons ("GenericProgInfo","ProgInfo") [TVar 161]) (FuncType (FuncType (TVar 149) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (FuncType (TCons ("Prelude","(,)") [TVar 149,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]]) (TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TVar 161]))))) (Rule [1,2,3,4] (Case  Flex (Var 4) [Branch (Pattern ("Prelude","(,)") [5,6]) (Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Prelude","apply") [Var 3,Var 5],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 1,Var 5],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("WorkerFunctions","simpleIteration._#lambda41._#lambda42") [Var 2],Var 6]]])])),Func ("WorkerFunctions","simpleIteration._#lambda41._#lambda42") 2 Private (FuncType (TCons ("GenericProgInfo","ProgInfo") [TVar 161]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TVar 161]))) (Rule [1,2] (Comb ConsCall ("Prelude","(,)") [Var 2,Comb FuncCall ("Maybe","fromJust") [Comb FuncCall ("GenericProgInfo","lookupProgInfo") [Var 2,Var 1]]])),Func ("WorkerFunctions","wlIteration") 7 Public (FuncType (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TVar 1]]) (TVar 1))) (FuncType (FuncType (TVar 0) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]]]) (FuncType (TCons ("RedBlackTree","RedBlackTree") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (FuncType (TCons ("GenericProgInfo","ProgInfo") [TVar 1]) (FuncType (TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TVar 1]) (TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TVar 1])))))))) (Rule [1,2,3,4,5,6,7] (Case  Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Case  Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("SetRBT","isEmptySetRBT") [],Var 5]) [Branch (Pattern ("Prelude","True") []) (Var 7),Branch (Pattern ("Prelude","False") []) (Let [(8,Comb FuncCall ("List","partition") [Comb (FuncPartCall 1) ("WorkerFunctions","wlIteration._#lambda43") [Var 5],Var 4]),(9,Comb FuncCall ("WorkerFunctions","wlIteration._#selFP5#declsToDo") [Var 8]),(10,Comb FuncCall ("WorkerFunctions","wlIteration._#selFP6#declsDone") [Var 8])] (Comb FuncCall ("WorkerFunctions","wlIteration") [Var 1,Var 2,Var 9,Var 10,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("SetRBT","emptySetRBT") [],Comb (FuncPartCall 2) ("Prelude","<") []],Var 6,Var 7]))]),Branch (Pattern ("Prelude",":") [11,12]) (Case  Flex (Var 11) [Branch (Pattern ("Prelude","(,)") [13,14]) (Let [(15,Comb FuncCall ("Prelude","apply") [Var 2,Var 13]),(16,Comb FuncCall ("WorkerFunctions","wlIteration.lookupVal.248") [Var 7,Var 6,Var 15]),(17,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 1,Var 13],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("WorkerFunctions","wlIteration._#lambda44") [Var 7,Var 6],Var 14]])] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 16,Var 17]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("WorkerFunctions","wlIteration") [Var 1,Var 2,Var 12,Comb ConsCall ("Prelude",":") [Var 11,Var 4],Var 5,Var 6,Var 7]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("WorkerFunctions","wlIteration") [Var 1,Var 2,Var 12,Comb ConsCall ("Prelude",":") [Var 11,Var 4],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("SetRBT","insertRBT") [],Var 15],Var 5],Var 6,Comb FuncCall ("FiniteMap","updFM") [Var 7,Var 15,Comb (FuncPartCall 1) ("Prelude","const") [Var 17]]])]))])])),Func ("WorkerFunctions","wlIteration._#lambda43") 2 Private (FuncType (TCons ("RedBlackTree","RedBlackTree") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (FuncType (TCons ("Prelude","(,)") [TVar 192,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]]) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","any") [Comb (FuncPartCall 1) ("Prelude","flip") [Comb (FuncPartCall 1) ("SetRBT","elemRBT") [],Var 1]],Var 4])])),Func ("WorkerFunctions","wlIteration._#selFP5#declsToDo") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 192,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]]],TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 192,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 192,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("WorkerFunctions","wlIteration._#selFP6#declsDone") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 192,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]]],TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 192,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 192,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("WorkerFunctions","wlIteration.lookupVal.248") 3 Private (FuncType (TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TVar 231]) (FuncType (TCons ("GenericProgInfo","ProgInfo") [TVar 231]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TVar 231)))) (Rule [1,2,3] (Comb FuncCall ("Prelude","maybe") [Comb FuncCall ("Maybe","fromJust") [Comb FuncCall ("FiniteMap","lookupFM") [Var 1,Var 3]],Comb (FuncPartCall 1) ("Prelude","id") [],Comb FuncCall ("GenericProgInfo","lookupProgInfo") [Var 3,Var 2]])),Func ("WorkerFunctions","wlIteration._#lambda44") 3 Private (FuncType (TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TVar 231]) (FuncType (TCons ("GenericProgInfo","ProgInfo") [TVar 231]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TVar 231])))) (Rule [1,2,3] (Comb ConsCall ("Prelude","(,)") [Var 3,Comb FuncCall ("WorkerFunctions","wlIteration.lookupVal.248") [Var 1,Var 2,Var 3]])),Func ("WorkerFunctions","isVisibleFunc") 1 Public (FuncType (TCons ("FlatCurry","FuncDecl") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Comb FuncCall ("Prelude","==") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FlatCurryGoodies","funcVisibility") [],Var 1],Comb ConsCall ("FlatCurry","Public") []])),Func ("WorkerFunctions","isVisibleType") 1 Public (FuncType (TCons ("FlatCurry","TypeDecl") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Comb FuncCall ("Prelude","==") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FlatCurryGoodies","typeVisibility") [],Var 1],Comb ConsCall ("FlatCurry","Public") []]))] []