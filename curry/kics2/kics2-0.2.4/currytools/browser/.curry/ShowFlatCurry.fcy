Prog "ShowFlatCurry" ["Char","FlatCurry","FlatCurryGoodies","FlatCurryShow","FlexRigid","List","Prelude","Sort"] [] [Func ("ShowFlatCurry","showInterface") 2 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("FlatCurry","Prog") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("FlatCurry","Prog") [3,4,5,6,7]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","concatMap") [Comb (FuncPartCall 1) ("ShowFlatCurry","showInterfaceImport") []],Var 4],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","concatMap") [Comb (FuncPartCall 1) ("ShowFlatCurry","showInterfaceOpDecl") []],Comb FuncCall ("Sort","mergeSort") [Comb (FuncPartCall 2) ("ShowFlatCurry","leqOp") [],Var 7]],Comb FuncCall ("Prelude","++") [Case  Rigid (Comb FuncCall ("Prelude","null") [Var 7]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude","[]") []])],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","concatMap") [Comb (FuncPartCall 1) ("ShowFlatCurry","showInterfaceType") [Comb (FuncPartCall 1) ("FlatCurry","showQNameInModule") [Var 3]]],Comb FuncCall ("Sort","mergeSort") [Comb (FuncPartCall 2) ("ShowFlatCurry","leqType") [],Var 5]],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","concatMap") [Comb (FuncPartCall 1) ("ShowFlatCurry","showInterfaceFunc") [Comb (FuncPartCall 1) ("FlatCurry","showQNameInModule") [Var 3],Var 1]],Comb FuncCall ("Sort","mergeSort") [Comb (FuncPartCall 2) ("ShowFlatCurry","leqFunc") [],Var 6]],Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude","[]") []]]]]]]]])])),Func ("ShowFlatCurry","showInterfaceImport") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]]]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb FuncCall ("Prelude","++") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude","[]") []]]])])),Func ("ShowFlatCurry","showInterfaceOpDecl") 1 Private (FuncType (TCons ("FlatCurry","OpDecl") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","Op") [2,3,4]) (Case  Flex (Var 3) [Branch (Pattern ("FlatCurry","InfixOp") []) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","show") [Var 4],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Comb FuncCall ("ShowFlatCurry","showOp") [Var 2],Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude","[]") []]]]]]),Branch (Pattern ("FlatCurry","InfixlOp") []) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","show") [Var 4],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Comb FuncCall ("ShowFlatCurry","showOp") [Var 2],Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude","[]") []]]]]]),Branch (Pattern ("FlatCurry","InfixrOp") []) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","show") [Var 4],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Comb FuncCall ("ShowFlatCurry","showOp") [Var 2],Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude","[]") []]]]]])])])),Func ("ShowFlatCurry","showOp") 1 Private (FuncType (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Case  Rigid (Comb FuncCall ("Char","isAlpha") [Comb FuncCall ("Prelude","head") [Var 3]]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  '`'),Comb FuncCall ("Prelude","++") [Var 3,Comb ConsCall ("Prelude",":") [Lit (Charc  '`'),Comb ConsCall ("Prelude","[]") []]]]),Branch (Pattern ("Prelude","False") []) (Var 3)])])),Func ("ShowFlatCurry","showInterfaceType") 2 Private (FuncType (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (FuncType (TCons ("FlatCurry","TypeDecl") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("FlatCurry","Type") [3,4,5,6]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude","(,)") [7,8]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 4,Comb ConsCall ("FlatCurry","Public") []]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]],Comb FuncCall ("Prelude","++") [Var 8,Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","concatMap") [Comb (FuncPartCall 1) ("ShowFlatCurry","showInterfaceType._#lambda1") []],Var 5],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '='),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","concat") [Comb FuncCall ("List","intersperse") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '|'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("ShowFlatCurry","showExportConsDecl") [Var 1],Comb FuncCall ("Prelude","filter") [Comb (FuncPartCall 1) ("ShowFlatCurry","showInterfaceType._#lambda2") [],Var 6]]]],Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude","[]") []]]]]]]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","[]") [])])]),Branch (Pattern ("FlatCurry","TypeSyn") [9,10,11,12]) (Case  Flex (Var 9) [Branch (Pattern ("Prelude","(,)") [13,14]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 10,Comb ConsCall ("FlatCurry","Public") []]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]],Comb FuncCall ("Prelude","++") [Var 14,Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","concatMap") [Comb (FuncPartCall 1) ("ShowFlatCurry","showInterfaceType._#lambda3") []],Var 11],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '='),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("Prelude","++") [Comb FuncCall ("FlatCurryShow","showCurryType") [Var 1,Comb ConsCall ("Prelude","True") [],Var 12],Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude","[]") []]]]]]]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","[]") [])])])])),Func ("ShowFlatCurry","showInterfaceType._#lambda1") 1 Private (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","chr") [Comb FuncCall ("Prelude","+") [Lit (Intc  97),Var 1]],Comb ConsCall ("Prelude","[]") []]])),Func ("ShowFlatCurry","showInterfaceType._#lambda2") 1 Private (FuncType (TCons ("FlatCurry","ConsDecl") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","Cons") [2,3,4,5]) (Comb FuncCall ("Prelude","==") [Var 4,Comb ConsCall ("FlatCurry","Public") []])])),Func ("ShowFlatCurry","showInterfaceType._#lambda3") 1 Private (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","chr") [Comb FuncCall ("Prelude","+") [Lit (Intc  97),Var 1]],Comb ConsCall ("Prelude","[]") []]])),Func ("ShowFlatCurry","showExportConsDecl") 2 Private (FuncType (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (FuncType (TCons ("FlatCurry","ConsDecl") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("FlatCurry","Cons") [3,4,5,6]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude","(,)") [7,8]) (Comb FuncCall ("Prelude","++") [Var 8,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","concatMap") [Comb (FuncPartCall 1) ("ShowFlatCurry","showExportConsDecl._#lambda4") [Var 1]],Var 6]])])])),Func ("ShowFlatCurry","showExportConsDecl._#lambda4") 2 Private (FuncType (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (FuncType (TCons ("FlatCurry","TypeExpr") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1,2] (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("FlatCurryShow","showCurryType") [Var 1,Comb ConsCall ("Prelude","True") [],Var 2]])),Func ("ShowFlatCurry","showInterfaceFunc") 3 Private (FuncType (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("FlatCurry","FuncDecl") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1,2,3] (Case  Flex (Var 3) [Branch (Pattern ("FlatCurry","Func") [4,5,6,7,8]) (Case  Flex (Var 4) [Branch (Pattern ("Prelude","(,)") [9,10]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 6,Comb ConsCall ("FlatCurry","Public") []]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("FlatCurryShow","showCurryId") [Var 10],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("Prelude","++") [Comb FuncCall ("FlatCurryShow","showCurryType") [Var 1,Comb ConsCall ("Prelude","False") [],Var 7],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude","[]") []],Case  Rigid (Var 2) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("FlatCurryShow","showCurryId") [Var 10],Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","[]") [])]]]]]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","[]") [])])])])),Func ("ShowFlatCurry","showCurryMod") 2 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("FlatCurry","Prog") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("FlatCurry","Prog") [3,4,5,6,7]) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb FuncCall ("Prelude","++") [Var 3,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Comb FuncCall ("ShowFlatCurry","showTypeExports") [Var 5],Comb FuncCall ("Prelude","++") [Comb FuncCall ("ShowFlatCurry","showFuncExports") [Var 6],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude","[]") []]]]]]]]]],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","concatMap") [Comb (FuncPartCall 1) ("ShowFlatCurry","showInterfaceImport") []],Var 4],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","concatMap") [Comb (FuncPartCall 1) ("ShowFlatCurry","showInterfaceOpDecl") []],Var 7],Comb FuncCall ("Prelude","++") [Case  Rigid (Comb FuncCall ("Prelude","null") [Var 7]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude","[]") []])],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","concatMap") [Comb (FuncPartCall 1) ("ShowFlatCurry","showCurryDataDecl") [Comb (FuncPartCall 1) ("FlatCurry","showQNameInModule") [Var 3]]],Var 5],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","concatMap") [Comb (FuncPartCall 1) ("ShowFlatCurry","showCurryFuncDecl") [Comb (FuncPartCall 1) ("FlatCurry","showQNameInModule") [Var 3],Comb (FuncPartCall 1) ("FlatCurry","showQNameInModule") [Var 3],Var 1]],Var 6],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]],Comb FuncCall ("Prelude","++") [Var 3,Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]])])),Func ("ShowFlatCurry","showTypeExports") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","TypeDecl") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","concatMap") [Comb (FuncPartCall 1) ("Prelude","flip") [Comb (FuncPartCall 2) ("Prelude","++") [],Comb ConsCall ("Prelude",":") [Lit (Charc  ','),Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","concatMap") [Comb (FuncPartCall 1) ("ShowFlatCurry","showTypeExports.exptype.42") []],Var 1]])),Func ("ShowFlatCurry","showTypeExports.expc.42") 1 Private (FuncType (TCons ("FlatCurry","ConsDecl") []) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","Cons") [2,3,4,5]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 4,Comb ConsCall ("FlatCurry","Public") []]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","snd") [Var 2],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","[]") [])])])),Func ("ShowFlatCurry","showTypeExports.expcons.42") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","ConsDecl") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","concat") [Comb FuncCall ("List","intersperse") [Comb ConsCall ("Prelude",":") [Lit (Charc  ','),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","concatMap") [Comb (FuncPartCall 1) ("ShowFlatCurry","showTypeExports.expc.42") []],Var 1]]],Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude","[]") []]]])),Func ("ShowFlatCurry","showTypeExports.exptype.42") 1 Private (FuncType (TCons ("FlatCurry","TypeDecl") []) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","Type") [2,3,4,5]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 3,Comb ConsCall ("FlatCurry","Public") []]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","snd") [Var 2],Let [(6,Comb FuncCall ("ShowFlatCurry","showTypeExports.expcons.42") [Var 5])] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 6,Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude","[]") []]]]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude","False") []) (Var 6)])],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","[]") [])]),Branch (Pattern ("FlatCurry","TypeSyn") [7,8,9,10]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 8,Comb ConsCall ("FlatCurry","Public") []]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","snd") [Var 7],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","[]") [])])])),Func ("ShowFlatCurry","showFuncExports") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Comb FuncCall ("Prelude","concat") [Comb FuncCall ("List","intersperse") [Comb ConsCall ("Prelude",":") [Lit (Charc  ','),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","concatMap") [Comb (FuncPartCall 1) ("ShowFlatCurry","showFuncExports.expfun.59") []],Var 1]]])),Func ("ShowFlatCurry","showFuncExports.expfun.59") 1 Private (FuncType (TCons ("FlatCurry","FuncDecl") []) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","Func") [2,3,4,5,6]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 4,Comb ConsCall ("FlatCurry","Public") []]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","snd") [Var 2],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","[]") [])])])),Func ("ShowFlatCurry","showCurryDataDecl") 2 Private (FuncType (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (FuncType (TCons ("FlatCurry","TypeDecl") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("FlatCurry","Type") [3,4,5,6]) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","snd") [Var 3],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","concatMap") [Comb (FuncPartCall 1) ("ShowFlatCurry","showCurryDataDecl._#lambda5") []],Var 5],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '='),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","concat") [Comb FuncCall ("List","intersperse") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '|'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("ShowFlatCurry","showCurryConsDecl") [Var 1],Var 6]]],Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude","[]") []]]]]]]),Branch (Pattern ("FlatCurry","TypeSyn") [7,8,9,10]) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","snd") [Var 7],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","concatMap") [Comb (FuncPartCall 1) ("ShowFlatCurry","showCurryDataDecl._#lambda6") []],Var 9],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '='),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("Prelude","++") [Comb FuncCall ("FlatCurryShow","showCurryType") [Var 1,Comb ConsCall ("Prelude","True") [],Var 10],Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude","[]") []]]]]]])])),Func ("ShowFlatCurry","showCurryDataDecl._#lambda5") 1 Private (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","chr") [Comb FuncCall ("Prelude","+") [Lit (Intc  97),Var 1]],Comb ConsCall ("Prelude","[]") []]])),Func ("ShowFlatCurry","showCurryDataDecl._#lambda6") 1 Private (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","chr") [Comb FuncCall ("Prelude","+") [Lit (Intc  97),Var 1]],Comb ConsCall ("Prelude","[]") []]])),Func ("ShowFlatCurry","showCurryConsDecl") 2 Private (FuncType (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (FuncType (TCons ("FlatCurry","ConsDecl") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("FlatCurry","Cons") [3,4,5,6]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","snd") [Var 3],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","concatMap") [Comb (FuncPartCall 1) ("ShowFlatCurry","showCurryConsDecl._#lambda7") [Var 1]],Var 6]])])),Func ("ShowFlatCurry","showCurryConsDecl._#lambda7") 2 Private (FuncType (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (FuncType (TCons ("FlatCurry","TypeExpr") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1,2] (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("FlatCurryShow","showCurryType") [Var 1,Comb ConsCall ("Prelude","True") [],Var 2]])),Func ("ShowFlatCurry","showCurryFuncDecl") 4 Private (FuncType (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (FuncType (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("FlatCurry","FuncDecl") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (Rule [1,2,3,4] (Case  Flex (Var 4) [Branch (Pattern ("FlatCurry","Func") [5,6,7,8,9]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("FlatCurryShow","showCurryId") [Comb FuncCall ("Prelude","snd") [Var 5]],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("Prelude","++") [Comb FuncCall ("FlatCurryShow","showCurryType") [Var 1,Comb ConsCall ("Prelude","False") [],Var 8],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("ShowFlatCurry","showCurryRule") [Var 2,Var 3,Var 5,Var 9]]]]])])),Func ("ShowFlatCurry","showCurryRule") 4 Private (FuncType (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("FlatCurry","Rule") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (Rule [1,2,3,4] (Case  Flex (Var 4) [Branch (Pattern ("FlatCurry","External") [5]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("FlatCurryShow","showCurryId") [Comb FuncCall ("Prelude","snd") [Var 3]],Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]),Branch (Pattern ("FlatCurry","Rule") [6,7]) (Case  Rigid (Var 2) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("ShowFlatCurry","showCurryRuleAsCase") [Var 1,Var 3,Comb ConsCall ("FlatCurry","Rule") [Var 6,Var 7]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("ShowFlatCurry","showCurryRuleAsPatterns") [Var 1,Var 3,Comb ConsCall ("FlatCurry","Rule") [Var 6,Var 7]])])])),Func ("ShowFlatCurry","showCurryRuleAsCase") 3 Private (FuncType (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("FlatCurry","Rule") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1,2,3] (Case  Flex (Var 3) [Branch (Pattern ("FlatCurry","Rule") [4,5]) (Case  Rigid (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","==") [Comb FuncCall ("Prelude","length") [Var 4],Lit (Intc  2)],Comb FuncCall ("Prelude","not") [Comb FuncCall ("Char","isAlpha") [Comb FuncCall ("Prelude","head") [Comb FuncCall ("Prelude","snd") [Var 2]]]]]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("FlatCurryShow","showCurryVar") [Comb FuncCall ("Prelude","head") [Var 4]],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Var 1,Var 2],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Comb FuncCall ("FlatCurryShow","showCurryVar") [Comb FuncCall ("Prelude","!!") [Var 4,Lit (Intc  1)]],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '='),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("Prelude","++") [Comb FuncCall ("FlatCurryShow","showCurryExpr") [Var 1,Comb ConsCall ("Prelude","False") [],Lit (Intc  0),Var 5],Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Var 1,Var 2],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","concat") [Comb FuncCall ("List","intersperse") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("FlatCurryShow","showCurryVar") [],Var 4]]],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '='),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("Prelude","++") [Comb FuncCall ("FlatCurryShow","showCurryExpr") [Var 1,Comb ConsCall ("Prelude","False") [],Lit (Intc  0),Var 5],Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude","[]") []]]]]]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])]),Branch (Pattern ("FlatCurry","External") [6]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("FlatCurryShow","showCurryId") [Comb FuncCall ("Prelude","snd") [Var 2]],Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]])])),Func ("ShowFlatCurry","showCurryRuleAsPatterns") 3 Private (FuncType (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("FlatCurry","Rule") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1,2,3] (Case  Flex (Var 3) [Branch (Pattern ("FlatCurry","Rule") [4,5]) (Let [(6,Comb FuncCall ("ShowFlatCurry","rule2equations") [Comb FuncCall ("ShowFlatCurry","shallowPattern2Expr") [Var 2,Var 4],Var 5])] (Comb FuncCall ("Prelude","++") [Comb FuncCall ("ShowFlatCurry","showCurryRuleAsPatterns.showEvalAnnot.102") [Var 2,Var 1,Comb FuncCall ("FlexRigid","getFlexRigid") [Var 5]],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","concatMap") [Comb (FuncPartCall 1) ("ShowFlatCurry","showCurryRuleAsPatterns._#lambda8") [Var 1]],Var 6],Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude","[]") []]]]))])),Func ("ShowFlatCurry","showCurryRuleAsPatterns.showEvalAnnot.102") 3 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (FuncType (TCons ("FlexRigid","FlexRigidResult") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1,2,3] (Case  Flex (Var 3) [Branch (Pattern ("FlexRigid","ConflictFR") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Var 2,Var 1],Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'v'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  '&'),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'O'),Comb ConsCall ("Prelude",":") [Lit (Charc  'N'),Comb ConsCall ("Prelude",":") [Lit (Charc  'F'),Comb ConsCall ("Prelude",":") [Lit (Charc  'L'),Comb ConsCall ("Prelude",":") [Lit (Charc  'I'),Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'T'),Comb ConsCall ("Prelude",":") [Lit (Charc  'I'),Comb ConsCall ("Prelude",":") [Lit (Charc  'N'),Comb ConsCall ("Prelude",":") [Lit (Charc  'G'),Comb ConsCall ("Prelude",":") [Lit (Charc  '!'),Comb ConsCall ("Prelude",":") [Lit (Charc  '!'),Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]),Branch (Pattern ("FlexRigid","UnknownFR") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("FlexRigid","KnownRigid") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Var 2,Var 1],Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'v'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]),Branch (Pattern ("FlexRigid","KnownFlex") []) (Comb ConsCall ("Prelude","[]") [])])),Func ("ShowFlatCurry","showCurryRuleAsPatterns._#lambda8") 2 Private (FuncType (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (FuncType (TCons ("Prelude","(,)") [TCons ("FlatCurry","Expr") [],TCons ("FlatCurry","Expr") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb FuncCall ("ShowFlatCurry","showCurryPatternRule") [Var 1,Var 3,Var 4])])),Func ("ShowFlatCurry","splitFreeVars") 1 Private (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Int") []],TCons ("FlatCurry","Expr") []])) (Rule [1] (Case  Rigid (Var 1) [Branch (Pattern ("FlatCurry","Free") [2,3]) (Comb ConsCall ("Prelude","(,)") [Var 2,Var 3]),Branch (Pattern ("FlatCurry","Var") [4]) (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","[]") [],Var 1]),Branch (Pattern ("FlatCurry","Lit") [5]) (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","[]") [],Var 1]),Branch (Pattern ("FlatCurry","Comb") [6,7,8]) (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","[]") [],Var 1]),Branch (Pattern ("FlatCurry","Let") [9,10]) (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","[]") [],Var 1]),Branch (Pattern ("FlatCurry","Or") [11,12]) (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","[]") [],Var 1]),Branch (Pattern ("FlatCurry","Case") [13,14,15]) (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","[]") [],Var 1]),Branch (Pattern ("FlatCurry","Typed") [16,17]) (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","[]") [],Var 1])])),Func ("ShowFlatCurry","showCurryPatternRule") 3 Private (FuncType (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (FuncType (TCons ("FlatCurry","Expr") []) (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1,2,3] (Let [(4,Comb FuncCall ("ShowFlatCurry","splitFreeVars") [Var 3]),(5,Comb FuncCall ("ShowFlatCurry","showCurryPatternRule._#selFP2#vars") [Var 4]),(6,Comb FuncCall ("ShowFlatCurry","showCurryPatternRule._#selFP3#e") [Var 4])] (Comb FuncCall ("Prelude","++") [Comb FuncCall ("FlatCurryShow","showCurryExpr") [Var 1,Comb ConsCall ("Prelude","False") [],Lit (Intc  0),Var 2],Comb FuncCall ("Prelude","++") [Comb FuncCall ("ShowFlatCurry","showCurryCRHS") [Var 1,Var 6],Comb FuncCall ("Prelude","++") [Case  Rigid (Comb FuncCall ("Prelude","==") [Var 5,Comb ConsCall ("Prelude","[]") []]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","concat") [Comb FuncCall ("List","intersperse") [Comb ConsCall ("Prelude",":") [Lit (Charc  ','),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("FlatCurryShow","showCurryVar") [],Var 5]]],Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]])],Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude","[]") []]]]]))),Func ("ShowFlatCurry","showCurryPatternRule._#selFP2#vars") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Int") []],TCons ("FlatCurry","Expr") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("ShowFlatCurry","showCurryPatternRule._#selFP3#e") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Int") []],TCons ("FlatCurry","Expr") []]) (TCons ("FlatCurry","Expr") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("ShowFlatCurry","showCurryCRHS") 2 Private (FuncType (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1,2] (Case  Rigid (Comb FuncCall ("ShowFlatCurry","isGuardedExpr") [Var 2]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '|'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("ShowFlatCurry","showCurryCRHS.showCurryCondRule.126") [Var 1,Var 2]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '='),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("FlatCurryShow","showCurryExpr") [Var 1,Comb ConsCall ("Prelude","False") [],Lit (Intc  2),Var 2]])])),Func ("ShowFlatCurry","showCurryCRHS.showCurryCondRule.126") 2 Private (FuncType (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("FlatCurry","Comb") [3,4,5]) (Case  Flex (Var 5) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case  Flex (Var 9) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("FlatCurryShow","showCurryExpr") [Var 1,Comb ConsCall ("Prelude","False") [],Lit (Intc  2),Var 6],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '='),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("FlatCurryShow","showCurryExpr") [Var 1,Comb ConsCall ("Prelude","False") [],Lit (Intc  4),Var 8]]])])])])])),Func ("ShowFlatCurry","rule2equations") 2 Private (FuncType (TCons ("FlatCurry","Expr") []) (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("FlatCurry","Expr") [],TCons ("FlatCurry","Expr") []]]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("FlatCurry","Or") [3,4]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("ShowFlatCurry","rule2equations") [Var 1,Var 3],Comb FuncCall ("ShowFlatCurry","rule2equations") [Var 1,Var 4]]),Branch (Pattern ("FlatCurry","Case") [5,6,7]) (Case  Rigid (Comb FuncCall ("ShowFlatCurry","isVarExpr") [Var 6]) [Branch (Pattern ("Prelude","True") []) (Let [(8,Comb FuncCall ("ShowFlatCurry","rule2equations._#selFP5#i") [Var 6])] (Comb FuncCall ("ShowFlatCurry","caseIntoLhs") [Var 1,Var 8,Var 7])),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Var 1,Comb ConsCall ("FlatCurry","Case") [Var 5,Var 6,Var 7]],Comb ConsCall ("Prelude","[]") []])]),Branch (Pattern ("FlatCurry","Var") [9]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Var 1,Comb ConsCall ("FlatCurry","Var") [Var 9]],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("FlatCurry","Lit") [10]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Var 1,Comb ConsCall ("FlatCurry","Lit") [Var 10]],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("FlatCurry","Comb") [11,12,13]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Var 1,Comb ConsCall ("FlatCurry","Comb") [Var 11,Var 12,Var 13]],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("FlatCurry","Free") [14,15]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Var 1,Comb ConsCall ("FlatCurry","Free") [Var 14,Var 15]],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("FlatCurry","Let") [16,17]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Var 1,Comb ConsCall ("FlatCurry","Let") [Var 16,Var 17]],Comb ConsCall ("Prelude","[]") []])])),Func ("ShowFlatCurry","rule2equations._#selFP5#i") 1 Private (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("Prelude","Int") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","Var") [2]) (Var 2)])),Func ("ShowFlatCurry","caseIntoLhs") 3 Private (FuncType (TCons ("FlatCurry","Expr") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","BranchExpr") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("FlatCurry","Expr") [],TCons ("FlatCurry","Expr") []]])))) (Rule [1,2,3] (Case  Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 4) [Branch (Pattern ("FlatCurry","Branch") [6,7]) (Case  Flex (Var 6) [Branch (Pattern ("FlatCurry","Pattern") [8,9]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("ShowFlatCurry","rule2equations") [Comb FuncCall ("ShowFlatCurry","substitute") [Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude",":") [Comb FuncCall ("ShowFlatCurry","shallowPattern2Expr") [Var 8,Var 9],Comb ConsCall ("Prelude","[]") []],Var 1],Var 7],Comb FuncCall ("ShowFlatCurry","caseIntoLhs") [Var 1,Var 2,Var 5]]),Branch (Pattern ("FlatCurry","LPattern") [10]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("ShowFlatCurry","rule2equations") [Comb FuncCall ("ShowFlatCurry","substitute") [Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude",":") [Comb ConsCall ("FlatCurry","Lit") [Var 10],Comb ConsCall ("Prelude","[]") []],Var 1],Var 7],Comb FuncCall ("ShowFlatCurry","caseIntoLhs") [Var 1,Var 2,Var 5]])])])])),Func ("ShowFlatCurry","shallowPattern2Expr") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("FlatCurry","Expr") []))) (Rule [1,2] (Comb ConsCall ("FlatCurry","Comb") [Comb ConsCall ("FlatCurry","ConsCall") [],Var 1,Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("ShowFlatCurry","shallowPattern2Expr._#lambda10") [],Var 2]])),Func ("ShowFlatCurry","shallowPattern2Expr._#lambda10") 1 Private (FuncType (TCons ("Prelude","Int") []) (TCons ("FlatCurry","Expr") [])) (Rule [1] (Comb ConsCall ("FlatCurry","Var") [Var 1])),Func ("ShowFlatCurry","substitute") 3 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","Expr") []]) (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("FlatCurry","Expr") [])))) (Rule [1,2,3] (Comb FuncCall ("ShowFlatCurry","substituteAll") [Var 1,Var 2,Lit (Intc  0),Var 3])),Func ("ShowFlatCurry","substituteAll") 4 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","Expr") []]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("FlatCurry","Expr") []))))) (Rule [1,2,3,4] (Case  Flex (Var 4) [Branch (Pattern ("FlatCurry","Var") [5]) (Comb FuncCall ("ShowFlatCurry","substituteAll.replaceVar.165") [Var 3,Var 1,Var 2,Var 5]),Branch (Pattern ("FlatCurry","Lit") [6]) (Comb ConsCall ("FlatCurry","Lit") [Var 6]),Branch (Pattern ("FlatCurry","Comb") [7,8,9]) (Comb ConsCall ("FlatCurry","Comb") [Var 7,Var 8,Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("ShowFlatCurry","substituteAll") [Var 1,Var 2,Var 3],Var 9]]),Branch (Pattern ("FlatCurry","Let") [10,11]) (Comb ConsCall ("FlatCurry","Let") [Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("ShowFlatCurry","substituteAll._#lambda11") [Var 3,Var 2,Var 1],Var 10],Comb FuncCall ("ShowFlatCurry","substituteAll") [Var 1,Var 2,Var 3,Var 11]]),Branch (Pattern ("FlatCurry","Free") [12,13]) (Comb ConsCall ("FlatCurry","Free") [Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Prelude","flip") [Comb (FuncPartCall 2) ("Prelude","+") [],Var 3],Var 12],Comb FuncCall ("ShowFlatCurry","substituteAll") [Var 1,Var 2,Var 3,Var 13]]),Branch (Pattern ("FlatCurry","Or") [14,15]) (Comb ConsCall ("FlatCurry","Or") [Comb FuncCall ("ShowFlatCurry","substituteAll") [Var 1,Var 2,Var 3,Var 14],Comb FuncCall ("ShowFlatCurry","substituteAll") [Var 1,Var 2,Var 3,Var 15]]),Branch (Pattern ("FlatCurry","Case") [16,17,18]) (Comb ConsCall ("FlatCurry","Case") [Var 16,Comb FuncCall ("ShowFlatCurry","substituteAll") [Var 1,Var 2,Var 3,Var 17],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("ShowFlatCurry","substituteAllCase") [Var 1,Var 2,Var 3],Var 18]])])),Func ("ShowFlatCurry","substituteAll.replaceVar.165") 4 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","Expr") []]) (FuncType (TCons ("Prelude","Int") []) (TCons ("FlatCurry","Expr") []))))) (Rule [1,2,3,4] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("FlatCurry","Var") [Comb FuncCall ("Prelude","+") [Var 1,Var 4]])]),Branch (Pattern ("Prelude",":") [5,6]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [7,8]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 5,Var 4]) [Branch (Pattern ("Prelude","True") []) (Var 7),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("ShowFlatCurry","substituteAll.replaceVar.165") [Var 1,Var 6,Var 8,Var 4])])])])),Func ("ShowFlatCurry","substituteAll._#lambda11") 4 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","Expr") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","Expr") []]) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","Expr") []]))))) (Rule [1,2,3,4] (Case  Flex (Var 4) [Branch (Pattern ("Prelude","(,)") [5,6]) (Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Prelude","+") [Var 5,Var 1],Comb FuncCall ("ShowFlatCurry","substituteAll") [Var 3,Var 2,Var 1,Var 6]])])),Func ("ShowFlatCurry","substituteAllCase") 4 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","Expr") []]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("FlatCurry","BranchExpr") []) (TCons ("FlatCurry","BranchExpr") []))))) (Rule [1,2,3,4] (Case  Flex (Var 4) [Branch (Pattern ("FlatCurry","Branch") [5,6]) (Case  Flex (Var 5) [Branch (Pattern ("FlatCurry","Pattern") [7,8]) (Comb ConsCall ("FlatCurry","Branch") [Comb ConsCall ("FlatCurry","Pattern") [Var 7,Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Prelude","flip") [Comb (FuncPartCall 2) ("Prelude","+") [],Var 3],Var 8]],Comb FuncCall ("ShowFlatCurry","substituteAll") [Var 1,Var 2,Var 3,Var 6]]),Branch (Pattern ("FlatCurry","LPattern") [9]) (Comb ConsCall ("FlatCurry","Branch") [Comb ConsCall ("FlatCurry","LPattern") [Var 9],Comb FuncCall ("ShowFlatCurry","substituteAll") [Var 1,Var 2,Var 3,Var 6]])])])),Func ("ShowFlatCurry","isGuardedExpr") 1 Private (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Case  Rigid (Var 1) [Branch (Pattern ("FlatCurry","Comb") [2,3,4]) (Comb FuncCall ("Prelude","==") [Var 3,Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude","[]") []]]]]]]),Branch (Pattern ("FlatCurry","Var") [5]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("FlatCurry","Lit") [6]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("FlatCurry","Let") [7,8]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("FlatCurry","Free") [9,10]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("FlatCurry","Or") [11,12]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("FlatCurry","Case") [13,14,15]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("FlatCurry","Typed") [16,17]) (Comb ConsCall ("Prelude","False") [])])),Func ("ShowFlatCurry","isVarExpr") 1 Private (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Case  Rigid (Var 1) [Branch (Pattern ("FlatCurry","Var") [2]) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("FlatCurry","Lit") [3]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("FlatCurry","Comb") [4,5,6]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("FlatCurry","Let") [7,8]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("FlatCurry","Free") [9,10]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("FlatCurry","Or") [11,12]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("FlatCurry","Case") [13,14,15]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("FlatCurry","Typed") [16,17]) (Comb ConsCall ("Prelude","False") [])])),Func ("ShowFlatCurry","leqOp") 2 Private (FuncType (TCons ("FlatCurry","OpDecl") []) (FuncType (TCons ("FlatCurry","OpDecl") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","Op") [3,4,5]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude","(,)") [6,7]) (Case  Flex (Var 2) [Branch (Pattern ("FlatCurry","Op") [8,9,10]) (Case  Flex (Var 8) [Branch (Pattern ("Prelude","(,)") [11,12]) (Comb FuncCall ("Prelude","||") [Comb FuncCall ("Prelude",">") [Var 5,Var 10],Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","==") [Var 5,Var 10],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Sort","leqString") [],Var 7],Var 12]]])])])])])),Func ("ShowFlatCurry","leqType") 2 Private (FuncType (TCons ("FlatCurry","TypeDecl") []) (FuncType (TCons ("FlatCurry","TypeDecl") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Sort","leqString") [],Comb FuncCall ("ShowFlatCurry","leqType.tname.214") [Var 1]],Comb FuncCall ("ShowFlatCurry","leqType.tname.214") [Var 2]])),Func ("ShowFlatCurry","leqType.tname.214") 1 Private (FuncType (TCons ("FlatCurry","TypeDecl") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","Type") [2,3,4,5]) (Case  Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [6,7]) (Var 7)]),Branch (Pattern ("FlatCurry","TypeSyn") [8,9,10,11]) (Case  Flex (Var 8) [Branch (Pattern ("Prelude","(,)") [12,13]) (Var 13)])])),Func ("ShowFlatCurry","leqFunc") 2 Public (FuncType (TCons ("FlatCurry","FuncDecl") []) (FuncType (TCons ("FlatCurry","FuncDecl") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","Func") [3,4,5,6,7]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude","(,)") [8,9]) (Case  Flex (Var 2) [Branch (Pattern ("FlatCurry","Func") [10,11,12,13,14]) (Case  Flex (Var 10) [Branch (Pattern ("Prelude","(,)") [15,16]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Sort","leqString") [],Var 9],Var 16])])])])])),Func ("ShowFlatCurry","showFuncDeclAsCurry") 1 Public (FuncType (TCons ("FlatCurry","FuncDecl") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Comb FuncCall ("ShowFlatCurry","showCurryFuncDecl") [Comb (FuncPartCall 1) ("FlatCurry","showQNameInModule") [Comb FuncCall ("ShowFlatCurry","funcModule") [Var 1]],Comb (FuncPartCall 1) ("FlatCurry","showQNameInModule") [Comb FuncCall ("ShowFlatCurry","funcModule") [Var 1]],Comb ConsCall ("Prelude","False") [],Var 1])),Func ("ShowFlatCurry","showFuncDeclAsFlatCurry") 1 Public (FuncType (TCons ("FlatCurry","FuncDecl") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Comb FuncCall ("ShowFlatCurry","showCurryFuncDecl") [Comb (FuncPartCall 1) ("FlatCurry","showQNameInModule") [Comb FuncCall ("ShowFlatCurry","funcModule") [Var 1]],Comb (FuncPartCall 1) ("FlatCurry","showQNameInModule") [Comb FuncCall ("ShowFlatCurry","funcModule") [Var 1]],Comb ConsCall ("Prelude","True") [],Var 1])),Func ("ShowFlatCurry","funcModule") 1 Public (FuncType (TCons ("FlatCurry","FuncDecl") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Comb FuncCall ("Prelude","fst") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FlatCurryGoodies","funcName") [],Var 1]]))] []