Prog "CalledByAnalysis" ["FlatCurry","Prelude","List"] [] [Func ("CalledByAnalysis","calledBy") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]]])) (Rule [1] (Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("CalledByAnalysis","calledBy.cfFun.2") [Var 1],Var 1])),Func ("CalledByAnalysis","calledBy.cfFun.2") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]) (FuncType (TCons ("FlatCurry","FuncDecl") []) (TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("FlatCurry","Func") [3,4,5,6,7]) (Comb ConsCall ("Prelude","(,)") [Var 3,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","concatMap") [Comb (FuncPartCall 1) ("CalledByAnalysis","getCalls") [Var 3]],Var 1]])])),Func ("CalledByAnalysis","getCalls") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("FlatCurry","FuncDecl") []) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("FlatCurry","Func") [3,4,5,6,7]) (Case  Flex (Var 7) [Branch (Pattern ("FlatCurry","External") [8]) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("FlatCurry","Rule") [9,10]) (Case  Rigid (Comb FuncCall ("CalledByAnalysis","isCalled") [Var 1,Var 10]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Var 3,Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])])),Func ("CalledByAnalysis","isCalled") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("FlatCurry","Var") [3]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("FlatCurry","Lit") [4]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("FlatCurry","Comb") [5,6,7]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 6,Var 1]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","any") [Comb (FuncPartCall 1) ("CalledByAnalysis","isCalled") [Var 1]],Var 7]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])]),Branch (Pattern ("FlatCurry","Free") [8,9]) (Comb FuncCall ("CalledByAnalysis","isCalled") [Var 1,Var 9]),Branch (Pattern ("FlatCurry","Let") [10,11]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","any") [Comb (FuncPartCall 1) ("CalledByAnalysis","isCalled") [Var 1]],Comb ConsCall ("Prelude",":") [Var 11,Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Prelude","snd") [],Var 10]]]),Branch (Pattern ("FlatCurry","Or") [12,13]) (Comb FuncCall ("Prelude","||") [Comb FuncCall ("CalledByAnalysis","isCalled") [Var 1,Var 12],Comb FuncCall ("CalledByAnalysis","isCalled") [Var 1,Var 13]]),Branch (Pattern ("FlatCurry","Case") [14,15,16]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","any") [Comb (FuncPartCall 1) ("CalledByAnalysis","isCalled.isCalledCase.44") [Var 1]],Var 16])])),Func ("CalledByAnalysis","isCalled.isCalledCase.44") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("FlatCurry","BranchExpr") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("FlatCurry","Branch") [3,4]) (Comb FuncCall ("CalledByAnalysis","isCalled") [Var 1,Var 4])]))] []