Prog "CurryDocRead" ["Char","FlatCurry","Prelude","TotallyDefined"] [Type ("CurryDocRead","SourceLine") Public [] [Cons ("CurryDocRead","Comment") 1 Public [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],Cons ("CurryDocRead","FuncDef") 1 Public [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],Cons ("CurryDocRead","DataDef") 1 Public [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],Cons ("CurryDocRead","ModDef") 0 Public [],Cons ("CurryDocRead","OtherLine") 0 Public []],Type ("CurryDocRead","AnaInfo") Public [] [Cons ("CurryDocRead","AnaInfo") 4 Public [FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","Bool") []),FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("TotallyDefined","Completeness") []),FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","Bool") []),FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","Bool") [])]]] [Func ("CurryDocRead","readComments") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("CurryDocRead","SourceLine") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]]])) (Rule [1] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Prelude","readFile") [Var 1],Comb (FuncPartCall 1) ("CurryDocRead","readComments._#lambda1") []])),Func ("CurryDocRead","readComments._#lambda1") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("CurryDocRead","SourceLine") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]]])) (Rule [1] (Comb FuncCall ("Prelude","return") [Comb FuncCall ("Prelude","$") [Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("CurryDocRead","groupLines") [],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","filter") [Comb (FuncPartCall 1) ("Prelude","flip") [Comb (FuncPartCall 2) ("Prelude","/=") [],Comb ConsCall ("CurryDocRead","OtherLine") []]],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","map") [Comb (FuncPartCall 1) ("CurryDocRead","classifyLine") []],Comb (FuncPartCall 1) ("Prelude","lines") []]]],Var 1]])),Func ("CurryDocRead","classifyLine") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("CurryDocRead","SourceLine") [])) (Rule [1] (Let [(2,Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","takeWhile") [Comb (FuncPartCall 1) ("CurryDocRead","isIdChar") []],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","dropWhile") [Comb (FuncPartCall 1) ("Prelude","flip") [Comb (FuncPartCall 2) ("Prelude","==") [],Lit (Charc  ' ')]],Comb (FuncPartCall 1) ("Prelude","dropWhile") [Comb (FuncPartCall 1) ("CurryDocRead","isIdChar") []]]])] (Case  Rigid (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","==") [Comb FuncCall ("Prelude","take") [Lit (Intc  3),Var 1],Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","all") [Comb (FuncPartCall 1) ("Char","isSpace") []],Comb FuncCall ("Prelude","drop") [Lit (Intc  3),Var 1]]]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("CurryDocRead","Comment") [Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Comb FuncCall ("Prelude","take") [Lit (Intc  4),Var 1],Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("CurryDocRead","Comment") [Comb FuncCall ("Prelude","drop") [Lit (Intc  4),Var 1]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Comb FuncCall ("Prelude","take") [Lit (Intc  7),Var 1],Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("CurryDocRead","ModDef") []),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Comb FuncCall ("Prelude","take") [Lit (Intc  7),Var 1],Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("CurryDocRead","ModDef") []),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Let [(3,Comb FuncCall ("CurryDocRead","getFirstId") [Var 1])] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 3,Comb ConsCall ("Prelude","[]") []]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("CurryDocRead","OtherLine") []),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","||") [Comb FuncCall ("Prelude","==") [Var 3,Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude","[]") []]]]]],Comb FuncCall ("Prelude","==") [Var 3,Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("CurryDocRead","DataDef") [Comb FuncCall ("Prelude","apply") [Var 2,Var 1]]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("CurryDocRead","FuncDef") [Var 3])])])),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])])]))),Func ("CurryDocRead","getFirstId") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [2,3]) (Case  Rigid (Comb FuncCall ("Char","isAlpha") [Var 2]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","takeWhile") [Comb (FuncPartCall 1) ("CurryDocRead","isIdChar") [],Comb ConsCall ("Prelude",":") [Var 2,Var 3]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 2,Lit (Charc  '(')]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","takeWhile") [Comb (FuncPartCall 1) ("Prelude","flip") [Comb (FuncPartCall 2) ("Prelude","/=") [],Lit (Charc  ')')],Var 3]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])])),Func ("CurryDocRead","isIdChar") 1 Public (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Comb FuncCall ("Prelude","||") [Comb FuncCall ("Char","isAlphaNum") [Var 1],Comb FuncCall ("Prelude","||") [Comb FuncCall ("Prelude","==") [Var 1,Lit (Charc  '_')],Comb FuncCall ("Prelude","==") [Var 1,Lit (Charc  '\'')]]])),Func ("CurryDocRead","groupLines") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("CurryDocRead","SourceLine") []]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("CurryDocRead","SourceLine") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]])) (Rule [1] (Let [(2,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","break") [Comb (FuncPartCall 1) ("Prelude","flip") [Comb (FuncPartCall 2) ("Prelude","==") [],Comb ConsCall ("CurryDocRead","ModDef") []]],Var 1]),(3,Comb FuncCall ("CurryDocRead","groupLines._#selFP2#modcmts") [Var 2]),(4,Comb FuncCall ("CurryDocRead","groupLines._#selFP3#progcmts") [Var 2])] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 4,Comb ConsCall ("Prelude","[]") []]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("CurryDocRead","groupProgLines") [Var 1]]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","concatMap") [Comb (FuncPartCall 1) ("CurryDocRead","groupLines.getComment.22") []],Var 3],Comb FuncCall ("CurryDocRead","groupProgLines") [Comb FuncCall ("Prelude","filter") [Comb (FuncPartCall 1) ("Prelude","flip") [Comb (FuncPartCall 2) ("Prelude","/=") [],Comb ConsCall ("CurryDocRead","ModDef") []],Comb FuncCall ("Prelude","tail") [Var 4]]]])]))),Func ("CurryDocRead","groupLines.getComment.22") 1 Private (FuncType (TCons ("CurryDocRead","SourceLine") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("CurryDocRead","Comment") [2]) (Comb FuncCall ("Prelude","++") [Var 2,Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude","[]") []]]),Branch (Pattern ("CurryDocRead","FuncDef") [3]) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("CurryDocRead","DataDef") [4]) (Comb ConsCall ("Prelude","[]") [])])),Func ("CurryDocRead","groupLines._#selFP2#modcmts") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("CurryDocRead","SourceLine") []],TCons ("Prelude","[]") [TCons ("CurryDocRead","SourceLine") []]]) (TCons ("Prelude","[]") [TCons ("CurryDocRead","SourceLine") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("CurryDocRead","groupLines._#selFP3#progcmts") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("CurryDocRead","SourceLine") []],TCons ("Prelude","[]") [TCons ("CurryDocRead","SourceLine") []]]) (TCons ("Prelude","[]") [TCons ("CurryDocRead","SourceLine") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("CurryDocRead","groupProgLines") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("CurryDocRead","SourceLine") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("CurryDocRead","SourceLine") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 2) [Branch (Pattern ("CurryDocRead","Comment") [4]) (Comb FuncCall ("CurryDocRead","groupComment") [Var 4,Var 3]),Branch (Pattern ("CurryDocRead","FuncDef") [5]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("CurryDocRead","FuncDef") [Var 5],Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("CurryDocRead","skipFuncDefs") [Var 5,Var 3]]),Branch (Pattern ("CurryDocRead","DataDef") [6]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("CurryDocRead","DataDef") [Var 6],Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("CurryDocRead","skipDataDefs") [Var 6,Var 3]])])])),Func ("CurryDocRead","groupComment") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("CurryDocRead","SourceLine") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("CurryDocRead","SourceLine") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [3,4]) (Case  Flex (Var 3) [Branch (Pattern ("CurryDocRead","Comment") [5]) (Comb FuncCall ("CurryDocRead","groupComment") [Comb FuncCall ("Prelude","++") [Var 1,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude","[]") []],Var 5]],Var 4]),Branch (Pattern ("CurryDocRead","FuncDef") [6]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("CurryDocRead","FuncDef") [Var 6],Var 1],Comb FuncCall ("CurryDocRead","skipFuncDefs") [Var 6,Var 4]]),Branch (Pattern ("CurryDocRead","DataDef") [7]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("CurryDocRead","DataDef") [Var 7],Var 1],Comb FuncCall ("CurryDocRead","skipDataDefs") [Var 7,Var 4]])])])),Func ("CurryDocRead","skipFuncDefs") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("CurryDocRead","SourceLine") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("CurryDocRead","SourceLine") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [3,4]) (Case  Flex (Var 3) [Branch (Pattern ("CurryDocRead","Comment") [5]) (Comb FuncCall ("CurryDocRead","groupProgLines") [Comb ConsCall ("Prelude",":") [Comb ConsCall ("CurryDocRead","Comment") [Var 5],Var 4]]),Branch (Pattern ("CurryDocRead","DataDef") [6]) (Comb FuncCall ("CurryDocRead","groupProgLines") [Comb ConsCall ("Prelude",":") [Comb ConsCall ("CurryDocRead","DataDef") [Var 6],Var 4]]),Branch (Pattern ("CurryDocRead","FuncDef") [7]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 1,Var 7]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CurryDocRead","skipFuncDefs") [Var 1,Var 4]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CurryDocRead","groupProgLines") [Comb ConsCall ("Prelude",":") [Comb ConsCall ("CurryDocRead","FuncDef") [Var 7],Var 4]])])])])),Func ("CurryDocRead","skipDataDefs") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("CurryDocRead","SourceLine") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("CurryDocRead","SourceLine") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [3,4]) (Case  Flex (Var 3) [Branch (Pattern ("CurryDocRead","Comment") [5]) (Comb FuncCall ("CurryDocRead","groupProgLines") [Comb ConsCall ("Prelude",":") [Comb ConsCall ("CurryDocRead","Comment") [Var 5],Var 4]]),Branch (Pattern ("CurryDocRead","FuncDef") [6]) (Comb FuncCall ("CurryDocRead","groupProgLines") [Comb ConsCall ("Prelude",":") [Comb ConsCall ("CurryDocRead","FuncDef") [Var 6],Var 4]]),Branch (Pattern ("CurryDocRead","DataDef") [7]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 1,Var 7]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CurryDocRead","skipDataDefs") [Var 1,Var 4]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CurryDocRead","groupProgLines") [Comb ConsCall ("Prelude",":") [Comb ConsCall ("CurryDocRead","DataDef") [Var 7],Var 4]])])])])),Func ("CurryDocRead","getFuncComment") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("CurryDocRead","SourceLine") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [3,4]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Case  Flex (Var 5) [Branch (Pattern ("CurryDocRead","FuncDef") [7]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 1,Var 7]) [Branch (Pattern ("Prelude","True") []) (Var 6),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CurryDocRead","getFuncComment") [Var 1,Var 4])]),Branch (Pattern ("CurryDocRead","DataDef") [8]) (Comb FuncCall ("CurryDocRead","getFuncComment") [Var 1,Var 4])])])])),Func ("CurryDocRead","getConsComment") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","Maybe") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("Prelude",":") [3,4]) (Let [(5,Comb FuncCall ("Prelude","span") [Comb (FuncPartCall 1) ("CurryDocRead","isIdChar") [],Var 3]),(6,Comb FuncCall ("CurryDocRead","getConsComment._#selFP8#consname") [Var 5]),(7,Comb FuncCall ("CurryDocRead","getConsComment._#selFP9#rconscmt") [Var 5])] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 6,Var 2]) [Branch (Pattern ("Prelude","True") []) (Let [(8,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","break") [Comb (FuncPartCall 1) ("Prelude","flip") [Comb (FuncPartCall 2) ("Prelude","==") [],Lit (Charc  '-')]],Var 3]),(9,Comb FuncCall ("CurryDocRead","getConsComment._#selFP6#conscall") [Var 8]),(10,Comb FuncCall ("CurryDocRead","getConsComment._#selFP7#callcmt") [Var 8])] (Comb ConsCall ("Prelude","Just") [Case  Rigid (Comb FuncCall ("Prelude","null") [Var 10]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","(,)") [Var 6,Var 7]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","(,)") [Var 9,Var 10])]])),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CurryDocRead","getConsComment") [Var 4,Var 2])]))])),Func ("CurryDocRead","getConsComment._#selFP8#consname") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("CurryDocRead","getConsComment._#selFP9#rconscmt") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("CurryDocRead","getConsComment._#selFP6#conscall") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("CurryDocRead","getConsComment._#selFP7#callcmt") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("CurryDocRead","getDataComment") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("CurryDocRead","SourceLine") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [3,4]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Case  Flex (Var 5) [Branch (Pattern ("CurryDocRead","DataDef") [7]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 1,Var 7]) [Branch (Pattern ("Prelude","True") []) (Var 6),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CurryDocRead","getDataComment") [Var 1,Var 4])]),Branch (Pattern ("CurryDocRead","FuncDef") [8]) (Comb FuncCall ("CurryDocRead","getDataComment") [Var 1,Var 4])])])])),Func ("CurryDocRead","getCommentType") 2 Public (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TVar 1]]) (TCons ("Prelude","[]") [TVar 1]))) (Rule [1,2] (Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Prelude","snd") [],Comb FuncCall ("Prelude","filter") [Comb (FuncPartCall 1) ("CurryDocRead","getCommentType._#lambda2") [Var 1],Var 2]])),Func ("CurryDocRead","getCommentType._#lambda2") 2 Private (FuncType (TVar 230) (FuncType (TCons ("Prelude","(,)") [TVar 230,TVar 240]) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Comb FuncCall ("Prelude","==") [Comb FuncCall ("Prelude","fst") [Var 2],Var 1])),Func ("CurryDocRead","splitComment") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]])) (Rule [1] (Comb FuncCall ("CurryDocRead","splitCommentMain") [Comb FuncCall ("Prelude","lines") [Var 1]])),Func ("CurryDocRead","splitCommentMain") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","[]") [],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude",":") [2,3]) (Case  Rigid (Comb FuncCall ("Prelude","||") [Comb FuncCall ("Prelude","==") [Var 2,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","/=") [Comb FuncCall ("Prelude","head") [Var 2],Lit (Charc  '@')]]) [Branch (Pattern ("Prelude","True") []) (Let [(4,Comb FuncCall ("CurryDocRead","splitCommentMain") [Var 3]),(5,Comb FuncCall ("CurryDocRead","splitCommentMain._#selFP11#maincmt") [Var 4]),(6,Comb FuncCall ("CurryDocRead","splitCommentMain._#selFP12#rest") [Var 4])] (Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Prelude","++") [Var 2,Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Var 5]],Var 6])),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("CurryDocRead","splitCommentParams") [Comb FuncCall ("Prelude","takeWhile") [Comb (FuncPartCall 1) ("Char","isAlpha") [],Comb FuncCall ("Prelude","tail") [Var 2]],Comb FuncCall ("Prelude","dropWhile") [Comb (FuncPartCall 1) ("Char","isAlpha") [],Comb FuncCall ("Prelude","tail") [Var 2]],Var 3]])])])),Func ("CurryDocRead","splitCommentMain._#selFP11#maincmt") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("CurryDocRead","splitCommentMain._#selFP12#rest") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("CurryDocRead","splitCommentParams") 3 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case  Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Var 1,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("CurryDocRead","skipWhiteSpace") [],Var 2]],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude",":") [4,5]) (Case  Rigid (Comb FuncCall ("Prelude","||") [Comb FuncCall ("Prelude","==") [Var 4,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","/=") [Comb FuncCall ("Prelude","head") [Var 4],Lit (Charc  '@')]]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CurryDocRead","splitCommentParams") [Var 1,Comb FuncCall ("Prelude","++") [Var 2,Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Var 4]],Var 5]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Var 1,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("CurryDocRead","skipWhiteSpace") [],Var 2]],Comb FuncCall ("CurryDocRead","splitCommentParams") [Comb FuncCall ("Prelude","takeWhile") [Comb (FuncPartCall 1) ("Char","isAlpha") [],Comb FuncCall ("Prelude","tail") [Var 4]],Comb FuncCall ("Prelude","dropWhile") [Comb (FuncPartCall 1) ("Char","isAlpha") [],Comb FuncCall ("Prelude","tail") [Var 4]],Var 5]])])])),Func ("CurryDocRead","getNondetInfo") 1 Public (FuncType (TCons ("CurryDocRead","AnaInfo") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","Bool") []))) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("CurryDocRead","AnaInfo") [2,3,4,5]) (Var 2)])),Func ("CurryDocRead","getCompleteInfo") 1 Public (FuncType (TCons ("CurryDocRead","AnaInfo") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("TotallyDefined","Completeness") []))) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("CurryDocRead","AnaInfo") [2,3,4,5]) (Var 3)])),Func ("CurryDocRead","getIndetInfo") 1 Public (FuncType (TCons ("CurryDocRead","AnaInfo") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","Bool") []))) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("CurryDocRead","AnaInfo") [2,3,4,5]) (Var 4)])),Func ("CurryDocRead","getOpCompleteInfo") 1 Public (FuncType (TCons ("CurryDocRead","AnaInfo") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","Bool") []))) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("CurryDocRead","AnaInfo") [2,3,4,5]) (Var 5)])),Func ("CurryDocRead","getFunctionInfo") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TVar 0]]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TVar 0))) (Rule [1,2] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","error") [Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'N'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],Comb FuncCall ("Prelude","show") [Var 2]]]),Branch (Pattern ("Prelude",":") [3,4]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 5,Var 2]) [Branch (Pattern ("Prelude","True") []) (Var 6),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CurryDocRead","getFunctionInfo") [Var 4,Var 2])])])])),Func ("CurryDocRead","isFunctionType") 1 Public (FuncType (TCons ("FlatCurry","TypeExpr") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","TVar") [2]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("FlatCurry","FuncType") [3,4]) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("FlatCurry","TCons") [5,6]) (Comb ConsCall ("Prelude","False") [])])),Func ("CurryDocRead","skipWhiteSpace") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Comb (FuncPartCall 1) ("Prelude","dropWhile") [Comb (FuncPartCall 1) ("CurryDocRead","isWhiteSpace") []])),Func ("CurryDocRead","isWhiteSpace") 1 Public (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Comb FuncCall ("Prelude","||") [Comb FuncCall ("Prelude","==") [Var 1,Lit (Charc  ' ')],Comb FuncCall ("Prelude","==") [Var 1,Lit (Charc  '\010')]])),Func ("CurryDocRead","showId") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Rigid (Comb FuncCall ("Char","isAlpha") [Comb FuncCall ("Prelude","head") [Var 1]]) [Branch (Pattern ("Prelude","True") []) (Var 1),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Var 1],Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude","[]") []]])])),Func ("CurryDocRead","brackets") 2 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1,2] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","False") []) (Var 2),Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Var 2,Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude","[]") []]]])])),Func ("CurryDocRead","getLastName") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Comb FuncCall ("Prelude",".") [Comb FuncCall ("Prelude","reverse") [],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","takeWhile") [Comb (FuncPartCall 1) ("Prelude","flip") [Comb (FuncPartCall 2) ("Prelude","/=") [],Lit (Charc  '/')]],Comb FuncCall ("Prelude","reverse") []]]))] []