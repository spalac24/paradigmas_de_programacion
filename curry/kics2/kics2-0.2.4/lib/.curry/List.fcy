Prog "List" ["Maybe","Prelude"] [] [Func ("List","elemIndex") 1 Public (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","Maybe") [TCons ("Prelude","Int") []]))) (Rule [1] (Comb FuncCall ("List","findIndex") [Comb (FuncPartCall 1) ("Prelude","==") [Var 1]])),Func ("List","elemIndices") 1 Public (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]))) (Rule [1] (Comb (FuncPartCall 1) ("List","findIndices") [Comb (FuncPartCall 1) ("Prelude","==") [Var 1]])),Func ("List","find") 1 Public (FuncType (FuncType (TVar 0) (TCons ("Prelude","Bool") [])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","Maybe") [TVar 0]))) (Rule [1] (Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Maybe","listToMaybe") [],Comb (FuncPartCall 1) ("Prelude","filter") [Var 1]])),Func ("List","findIndex") 1 Public (FuncType (FuncType (TVar 0) (TCons ("Prelude","Bool") [])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","Maybe") [TCons ("Prelude","Int") []]))) (Rule [1] (Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Maybe","listToMaybe") [],Comb (FuncPartCall 1) ("List","findIndices") [Var 1]])),Func ("List","findIndices") 2 Public (FuncType (FuncType (TVar 0) (TCons ("Prelude","Bool") [])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]))) (Rule [1,2] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("List","findIndices._#lambda3") [Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","zip") [Var 2,Comb FuncCall ("Prelude","enumFrom") [Lit (Intc  0)]]])),Func ("List","findIndices._#lambda3") 3 Private (FuncType (FuncType (TVar 6) (TCons ("Prelude","Bool") [])) (FuncType (TCons ("Prelude","(,)") [TVar 6,TCons ("Prelude","Int") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []])))) (Rule [1,2,3] (Case  Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb FuncCall ("Prelude","++") [Case  Rigid (Comb FuncCall ("Prelude","apply") [Var 1,Var 4]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","[]") [])],Var 3])])),Func ("List","nub") 1 Public (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0])) (Rule [1] (Comb FuncCall ("List","nubBy") [Comb (FuncPartCall 2) ("Prelude","==") [],Var 1])),Func ("List","nubBy") 2 Public (FuncType (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [3,4]) (Comb ConsCall ("Prelude",":") [Var 3,Comb FuncCall ("List","nubBy") [Var 1,Comb FuncCall ("Prelude","filter") [Comb (FuncPartCall 1) ("List","nubBy._#lambda5") [Var 1,Var 3],Var 4]]])])),Func ("List","nubBy._#lambda5") 3 Private (FuncType (FuncType (TVar 44) (FuncType (TVar 44) (TCons ("Prelude","Bool") []))) (FuncType (TVar 44) (FuncType (TVar 44) (TCons ("Prelude","Bool") [])))) (Rule [1,2,3] (Comb FuncCall ("Prelude","not") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 1,Var 2],Var 3]])),Func ("List","delete") 0 Public (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0]))) (Rule [] (Comb (FuncPartCall 2) ("List","deleteBy") [Comb (FuncPartCall 2) ("Prelude","==") []])),Func ("List","deleteBy") 3 Public (FuncType (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))) (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0])))) (Rule [1,2,3] (Case  Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [4,5]) (Case  Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 1,Var 2],Var 4]) [Branch (Pattern ("Prelude","True") []) (Var 5),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude",":") [Var 4,Comb FuncCall ("List","deleteBy") [Var 1,Var 2,Var 5]])])])),Func ("List","\\\\") 2 Public (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0]))) (Rule [1,2] (Comb FuncCall ("Prelude","foldl") [Comb (FuncPartCall 2) ("Prelude","flip") [Comb FuncCall ("List","delete") []],Var 1,Var 2])),Func ("List","union") 2 Public (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0]))) (Rule [1,2] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Var 2),Branch (Pattern ("Prelude",":") [3,4]) (Case  Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","elem") [Var 3],Var 2]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("List","union") [Var 4,Var 2]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude",":") [Var 3,Comb FuncCall ("List","union") [Var 4,Var 2]])])])),Func ("List","intersect") 2 Public (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0]))) (Rule [1,2] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [3,4]) (Case  Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","elem") [Var 3],Var 2]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Var 3,Comb FuncCall ("List","intersect") [Var 4,Var 2]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("List","intersect") [Var 4,Var 2])])])),Func ("List","intersperse") 2 Public (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [3,4]) (Case  Flex (Var 4) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude",":") [Var 3,Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude",":") [5,6]) (Comb ConsCall ("Prelude",":") [Var 3,Comb ConsCall ("Prelude",":") [Var 1,Comb FuncCall ("List","intersperse") [Var 1,Comb ConsCall ("Prelude",":") [Var 5,Var 6]]]])])])),Func ("List","intercalate") 2 Public (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 0]]) (TCons ("Prelude","[]") [TVar 0]))) (Rule [1,2] (Comb FuncCall ("Prelude","concat") [Comb FuncCall ("List","intersperse") [Var 1,Var 2]])),Func ("List","transpose") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 0]]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 0]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("List","transpose") [Var 3]),Branch (Pattern ("Prelude",":") [4,5]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Var 4,Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Prelude","head") [],Var 3]],Comb FuncCall ("List","transpose") [Comb ConsCall ("Prelude",":") [Var 5,Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Prelude","tail") [],Var 3]]]])])])),Func ("List","permutations") 1 Public (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 0]])) (Rule [1] (Comb ConsCall ("Prelude",":") [Var 1,Comb FuncCall ("List","permutations.perms.57") [Var 1,Comb ConsCall ("Prelude","[]") []]])),Func ("List","permutations.perms.57") 2 Private (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 0]]))) (Rule [1,2] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [3,4]) (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("List","permutations.perms.57.interleave.62") [Var 3,Var 4],Comb FuncCall ("List","permutations.perms.57") [Var 4,Comb ConsCall ("Prelude",":") [Var 3,Var 2]],Comb FuncCall ("List","permutations") [Var 2]])])),Func ("List","permutations.perms.57.interleave'.62") 5 Private (FuncType (TVar 161) (FuncType (TCons ("Prelude","[]") [TVar 161]) (FuncType (FuncType (TCons ("Prelude","[]") [TVar 161]) (TVar 0)) (FuncType (TCons ("Prelude","[]") [TVar 161]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 161],TCons ("Prelude","[]") [TVar 0]])))))) (Rule [1,2,3,4,5] (Case  Flex (Var 4) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","(,)") [Var 2,Var 5]),Branch (Pattern ("Prelude",":") [6,7]) (Let [(8,Comb FuncCall ("List","permutations.perms.57.interleave'.62") [Var 1,Var 2,Comb FuncCall ("Prelude",".") [Var 3,Comb (ConsPartCall 1) ("Prelude",":") [Var 6]],Var 7,Var 5]),(9,Comb FuncCall ("List","permutations.perms.57.interleave'.62._#selFP2#us") [Var 8]),(10,Comb FuncCall ("List","permutations.perms.57.interleave'.62._#selFP3#zs") [Var 8])] (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Var 6,Var 9],Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","apply") [Var 3,Comb ConsCall ("Prelude",":") [Var 1,Comb ConsCall ("Prelude",":") [Var 6,Var 9]]],Var 10]]))])),Func ("List","permutations.perms.57.interleave'.62._#selFP2#us") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 161],TCons ("Prelude","[]") [TVar 167]]) (TCons ("Prelude","[]") [TVar 161])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("List","permutations.perms.57.interleave'.62._#selFP3#zs") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 161],TCons ("Prelude","[]") [TVar 167]]) (TCons ("Prelude","[]") [TVar 167])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("List","permutations.perms.57.interleave.62") 4 Private (FuncType (TVar 161) (FuncType (TCons ("Prelude","[]") [TVar 161]) (FuncType (TCons ("Prelude","[]") [TVar 161]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 161]]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 161]]))))) (Rule [1,2,3,4] (Let [(5,Comb FuncCall ("List","permutations.perms.57.interleave'.62") [Var 1,Var 2,Comb (FuncPartCall 1) ("Prelude","id") [],Var 3,Var 4])] (Comb FuncCall ("List","permutations.perms.57.interleave.62._#selFP5#zs") [Var 5]))),Func ("List","permutations.perms.57.interleave.62._#selFP5#zs") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 161],TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 161]]]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 161]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("List","partition") 2 Public (FuncType (FuncType (TVar 0) (TCons ("Prelude","Bool") [])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TVar 0]]))) (Rule [1,2] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("List","partition.select.76") [Var 1],Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","[]") [],Comb ConsCall ("Prelude","[]") []],Var 2])),Func ("List","partition.select.76") 3 Private (FuncType (FuncType (TVar 211) (TCons ("Prelude","Bool") [])) (FuncType (TVar 211) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 211],TCons ("Prelude","[]") [TVar 211]]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 211],TCons ("Prelude","[]") [TVar 211]])))) (Rule [1,2,3] (Case  Flex (Var 3) [Branch (Pattern ("Prelude","(,)") [4,5]) (Case  Rigid (Comb FuncCall ("Prelude","apply") [Var 1,Var 2]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Var 2,Var 4],Var 5]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","(,)") [Var 4,Comb ConsCall ("Prelude",":") [Var 2,Var 5]])])])),Func ("List","group") 0 Public (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 0]])) (Rule [] (Comb (FuncPartCall 1) ("List","groupBy") [Comb (FuncPartCall 2) ("Prelude","==") []])),Func ("List","groupBy") 2 Public (FuncType (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 0]]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [3,4]) (Let [(5,Comb FuncCall ("Prelude","span") [Comb FuncCall ("Prelude","apply") [Var 1,Var 3],Var 4]),(6,Comb FuncCall ("List","groupBy._#selFP7#ys") [Var 5]),(7,Comb FuncCall ("List","groupBy._#selFP8#zs") [Var 5])] (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Var 3,Var 6],Comb FuncCall ("List","groupBy") [Var 1,Var 7]]))])),Func ("List","groupBy._#selFP7#ys") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 219],TCons ("Prelude","[]") [TVar 219]]) (TCons ("Prelude","[]") [TVar 219])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("List","groupBy._#selFP8#zs") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 219],TCons ("Prelude","[]") [TVar 219]]) (TCons ("Prelude","[]") [TVar 219])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("List","splitOn") 2 Public (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 0]]))) (Rule [1,2] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","error") [Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'O'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]),Branch (Pattern ("Prelude",":") [3,4]) (Case  Flex (Var 4) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("List","split") [Comb (FuncPartCall 1) ("Prelude","==") [Var 3],Var 2]),Branch (Pattern ("Prelude",":") [5,6]) (Let [(7,Comb FuncCall ("Prelude","length") [Var 1])] (Comb FuncCall ("List","splitOn.go.96") [Var 7,Var 1,Var 2]))])])),Func ("List","splitOn.go.96") 3 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TVar 297]) (FuncType (TCons ("Prelude","[]") [TVar 297]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 297]])))) (Rule [1,2,3] (Case  Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","[]") [],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude",":") [4,5]) (Case  Rigid (Comb FuncCall ("List","isPrefixOf") [Var 2,Var 3]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("List","splitOn.go.96") [Var 1,Var 2,Comb FuncCall ("Prelude","drop") [Var 1,Var 3]]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Let [(6,Comb FuncCall ("List","splitOn.go.96") [Var 1,Var 2,Var 5]),(7,Comb FuncCall ("List","splitOn.go.96._#selFP10#zs") [Var 6]),(8,Comb FuncCall ("List","splitOn.go.96._#selFP11#zss") [Var 6])] (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Var 4,Var 7],Var 8])),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])),Func ("List","splitOn.go.96._#selFP10#zs") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 297]]) (TCons ("Prelude","[]") [TVar 297])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Var 2)])),Func ("List","splitOn.go.96._#selFP11#zss") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 297]]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 297]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Var 3)])),Func ("List","split") 2 Public (FuncType (FuncType (TVar 0) (TCons ("Prelude","Bool") [])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 0]]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","[]") [],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude",":") [3,4]) (Case  Rigid (Comb FuncCall ("Prelude","apply") [Var 1,Var 3]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("List","split") [Var 1,Var 4]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Let [(5,Comb FuncCall ("List","split") [Var 1,Var 4]),(6,Comb FuncCall ("List","split._#selFP13#ys") [Var 5]),(7,Comb FuncCall ("List","split._#selFP14#yss") [Var 5])] (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Var 3,Var 6],Var 7])),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])),Func ("List","split._#selFP13#ys") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 239]]) (TCons ("Prelude","[]") [TVar 239])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Var 2)])),Func ("List","split._#selFP14#yss") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 239]]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 239]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Var 3)])),Func ("List","inits") 1 Public (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 0]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","[]") [],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude",":") [2,3]) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","[]") [],Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","map") [Comb (ConsPartCall 1) ("Prelude",":") [Var 2],Comb FuncCall ("List","inits") [Var 3]]])])),Func ("List","tails") 1 Public (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 0]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","[]") [],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude",":") [2,3]) (Comb ConsCall ("Prelude",":") [Var 1,Comb FuncCall ("List","tails") [Var 3]])])),Func ("List","replace") 3 Public (FuncType (TVar 0) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0])))) (Rule [1,2,3] (Case  Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [4,5]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 2,Lit (Intc  0)]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Var 1,Var 5]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Var 4,Comb FuncCall ("List","replace") [Var 1,Comb FuncCall ("Prelude","-") [Var 2,Lit (Intc  1)],Var 5]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])),Func ("List","isPrefixOf") 2 Public (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Prelude",":") [3,4]) (Case  Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude",":") [5,6]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","==") [Var 3,Var 5],Comb FuncCall ("List","isPrefixOf") [Var 4,Var 6]])])])),Func ("List","isSuffixOf") 2 Public (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Comb FuncCall ("List","isPrefixOf") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","reverse") [],Var 1],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","reverse") [],Var 2]])),Func ("List","isInfixOf") 2 Public (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","any") [Comb (FuncPartCall 1) ("List","isPrefixOf") [Var 1]],Comb FuncCall ("List","tails") [Var 2]])),Func ("List","sortBy") 1 Public (FuncType (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0]))) (Rule [1] (Comb (FuncPartCall 1) ("Prelude","foldr") [Comb (FuncPartCall 2) ("List","insertBy") [Var 1],Comb ConsCall ("Prelude","[]") []])),Func ("List","insertBy") 3 Public (FuncType (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))) (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0])))) (Rule [1,2,3] (Case  Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude",":") [4,5]) (Case  Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 1,Var 2],Var 4]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude",":") [Var 4,Var 5]]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude",":") [Var 4,Comb FuncCall ("List","insertBy") [Var 1,Var 2,Var 5]])])])),Func ("List","last") 1 Public (FuncType (TCons ("Prelude","[]") [TVar 0]) (TVar 0)) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Var 2),Branch (Pattern ("Prelude",":") [4,5]) (Comb FuncCall ("List","last") [Comb ConsCall ("Prelude",":") [Var 4,Var 5]])])])),Func ("List","init") 1 Public (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [4,5]) (Comb ConsCall ("Prelude",":") [Var 2,Comb FuncCall ("List","init") [Comb ConsCall ("Prelude",":") [Var 4,Var 5]]])])])),Func ("List","sum") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","Int") [])) (Rule [1] (Comb FuncCall ("Prelude","foldl") [Comb (FuncPartCall 2) ("Prelude","+") [],Lit (Intc  0),Var 1])),Func ("List","product") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","Int") [])) (Rule [1] (Comb FuncCall ("Prelude","foldl") [Comb (FuncPartCall 2) ("Prelude","*") [],Lit (Intc  1),Var 1])),Func ("List","maximum") 1 Public (FuncType (TCons ("Prelude","[]") [TVar 0]) (TVar 0)) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Comb FuncCall ("Prelude","foldl1") [Comb (FuncPartCall 2) ("Prelude","max") [],Var 1])])),Func ("List","minimum") 1 Public (FuncType (TCons ("Prelude","[]") [TVar 0]) (TVar 0)) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Comb FuncCall ("Prelude","foldl1") [Comb (FuncPartCall 2) ("Prelude","max") [],Var 1])])),Func ("List","scanl") 3 Public (FuncType (FuncType (TVar 0) (FuncType (TVar 1) (TVar 0))) (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TVar 1]) (TCons ("Prelude","[]") [TVar 0])))) (Rule [1,2,3] (Comb ConsCall ("Prelude",":") [Var 2,Case  Rigid (Var 3) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [4,5]) (Comb FuncCall ("List","scanl") [Var 1,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 1,Var 2],Var 4],Var 5])]])),Func ("List","scanl1") 2 Public (FuncType (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0))) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [3,4]) (Comb FuncCall ("List","scanl") [Var 1,Var 3,Var 4])])),Func ("List","scanr") 3 Public (FuncType (FuncType (TVar 0) (FuncType (TVar 1) (TVar 1))) (FuncType (TVar 1) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 1])))) (Rule [1,2,3] (Case  Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude",":") [4,5]) (Let [(6,Comb FuncCall ("List","scanr") [Var 1,Var 2,Var 5]),(7,Comb FuncCall ("List","scanr._#selFP16#qs") [Var 6]),(8,Comb FuncCall ("List","scanr._#selFP17#q") [Var 6])] (Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 1,Var 4],Var 8],Var 7]))])),Func ("List","scanr._#selFP16#qs") 1 Private (FuncType (TCons ("Prelude","[]") [TVar 458]) (TCons ("Prelude","[]") [TVar 458])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Var 1)])),Func ("List","scanr._#selFP17#q") 1 Private (FuncType (TCons ("Prelude","[]") [TVar 458]) (TVar 458)) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Var 2)])),Func ("List","scanr1") 2 Public (FuncType (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0))) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [3,4]) (Case  Flex (Var 4) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude",":") [Var 3,Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude",":") [5,6]) (Let [(7,Comb FuncCall ("List","scanr1") [Var 1,Var 4]),(8,Comb FuncCall ("List","scanr1._#selFP19#qs") [Var 7]),(9,Comb FuncCall ("List","scanr1._#selFP20#q") [Var 7])] (Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 1,Var 3],Var 9],Var 8]))])])),Func ("List","scanr1._#selFP19#qs") 1 Private (FuncType (TCons ("Prelude","[]") [TVar 482]) (TCons ("Prelude","[]") [TVar 482])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Var 1)])),Func ("List","scanr1._#selFP20#q") 1 Private (FuncType (TCons ("Prelude","[]") [TVar 482]) (TVar 482)) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Var 2)])),Func ("List","mapAccumL") 3 Public (FuncType (FuncType (TVar 0) (FuncType (TVar 1) (TCons ("Prelude","(,)") [TVar 0,TVar 2]))) (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TVar 1]) (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TVar 2]])))) (Rule [1,2,3] (Case  Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","(,)") [Var 2,Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude",":") [4,5]) (Let [(6,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 1,Var 2],Var 4]),(7,Comb FuncCall ("List","mapAccumL._#selFP25#s'") [Var 6]),(8,Comb FuncCall ("List","mapAccumL._#selFP26#y") [Var 6]),(9,Comb FuncCall ("List","mapAccumL") [Var 1,Var 7,Var 5]),(10,Comb FuncCall ("List","mapAccumL._#selFP23#s''") [Var 9]),(11,Comb FuncCall ("List","mapAccumL._#selFP24#ys") [Var 9])] (Comb ConsCall ("Prelude","(,)") [Var 10,Comb ConsCall ("Prelude",":") [Var 8,Var 11]]))])),Func ("List","mapAccumL._#selFP25#s'") 1 Private (FuncType (TCons ("Prelude","(,)") [TVar 498,TVar 503]) (TVar 498)) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("List","mapAccumL._#selFP26#y") 1 Private (FuncType (TCons ("Prelude","(,)") [TVar 498,TVar 503]) (TVar 503)) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("List","mapAccumL._#selFP23#s''") 1 Private (FuncType (TCons ("Prelude","(,)") [TVar 498,TCons ("Prelude","[]") [TVar 503]]) (TVar 498)) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("List","mapAccumL._#selFP24#ys") 1 Private (FuncType (TCons ("Prelude","(,)") [TVar 498,TCons ("Prelude","[]") [TVar 503]]) (TCons ("Prelude","[]") [TVar 503])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("List","mapAccumR") 3 Public (FuncType (FuncType (TVar 0) (FuncType (TVar 1) (TCons ("Prelude","(,)") [TVar 0,TVar 2]))) (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TVar 1]) (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TVar 2]])))) (Rule [1,2,3] (Case  Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","(,)") [Var 2,Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude",":") [4,5]) (Let [(6,Comb FuncCall ("List","mapAccumR") [Var 1,Var 2,Var 5]),(7,Comb FuncCall ("List","mapAccumR._#selFP31#s'") [Var 6]),(8,Comb FuncCall ("List","mapAccumR._#selFP32#ys") [Var 6]),(9,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 1,Var 7],Var 4]),(10,Comb FuncCall ("List","mapAccumR._#selFP29#s''") [Var 9]),(11,Comb FuncCall ("List","mapAccumR._#selFP30#y") [Var 9])] (Comb ConsCall ("Prelude","(,)") [Var 10,Comb ConsCall ("Prelude",":") [Var 11,Var 8]]))])),Func ("List","mapAccumR._#selFP31#s'") 1 Private (FuncType (TCons ("Prelude","(,)") [TVar 522,TCons ("Prelude","[]") [TVar 530]]) (TVar 522)) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("List","mapAccumR._#selFP32#ys") 1 Private (FuncType (TCons ("Prelude","(,)") [TVar 522,TCons ("Prelude","[]") [TVar 530]]) (TCons ("Prelude","[]") [TVar 530])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("List","mapAccumR._#selFP29#s''") 1 Private (FuncType (TCons ("Prelude","(,)") [TVar 522,TVar 530]) (TVar 522)) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("List","mapAccumR._#selFP30#y") 1 Private (FuncType (TCons ("Prelude","(,)") [TVar 522,TVar 530]) (TVar 530)) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("List","cycle") 1 Public (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Let [(4,Comb FuncCall ("Prelude","++") [Var 1,Var 4])] (Var 4))])),Func ("List","unfoldr") 2 Public (FuncType (FuncType (TVar 0) (TCons ("Prelude","Maybe") [TCons ("Prelude","(,)") [TVar 1,TVar 0]])) (FuncType (TVar 0) (TCons ("Prelude","[]") [TVar 1]))) (Rule [1,2] (Case  Rigid (Comb FuncCall ("Prelude","apply") [Var 1,Var 2]) [Branch (Pattern ("Prelude","Just") [3]) (Case  Rigid (Var 3) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb ConsCall ("Prelude",":") [Var 4,Comb FuncCall ("List","unfoldr") [Var 1,Var 5]])]),Branch (Pattern ("Prelude","Nothing") []) (Comb ConsCall ("Prelude","[]") [])]))] [Op ("List","\\\\") InfixOp 5]