Prog "RedBlackTree" ["Prelude"] [Type ("RedBlackTree","RedBlackTree") Public [0] [Cons ("RedBlackTree","RedBlackTree") 4 Private [FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") [])),FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") [])),FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") [])),TCons ("RedBlackTree","Tree") [TVar 0]]],Type ("RedBlackTree","Color") Private [] [Cons ("RedBlackTree","Red") 0 Private [],Cons ("RedBlackTree","Black") 0 Private [],Cons ("RedBlackTree","DoublyBlack") 0 Private []],Type ("RedBlackTree","Tree") Private [0] [Cons ("RedBlackTree","Tree") 4 Private [TCons ("RedBlackTree","Color") [],TVar 0,TCons ("RedBlackTree","Tree") [TVar 0],TCons ("RedBlackTree","Tree") [TVar 0]],Cons ("RedBlackTree","Empty") 0 Private []]] [Func ("RedBlackTree","empty") 3 Public (FuncType (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))) (FuncType (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))) (FuncType (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))) (TCons ("RedBlackTree","RedBlackTree") [TVar 0])))) (Rule [1,2,3] (Comb ConsCall ("RedBlackTree","RedBlackTree") [Var 1,Var 2,Var 3,Comb ConsCall ("RedBlackTree","Empty") []])),Func ("RedBlackTree","isEmpty") 1 Public (FuncType (TCons ("RedBlackTree","RedBlackTree") [TVar 0]) (TCons ("Prelude","Bool") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","RedBlackTree") [2,3,4,5]) (Case  Flex (Var 5) [Branch (Pattern ("RedBlackTree","Empty") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Comb ConsCall ("Prelude","False") [])])])),Func ("RedBlackTree","newTreeLike") 1 Public (FuncType (TCons ("RedBlackTree","RedBlackTree") [TVar 0]) (TCons ("RedBlackTree","RedBlackTree") [TVar 0])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","RedBlackTree") [2,3,4,5]) (Comb ConsCall ("RedBlackTree","RedBlackTree") [Var 2,Var 3,Var 4,Comb ConsCall ("RedBlackTree","Empty") []])])),Func ("RedBlackTree","lookup") 2 Public (FuncType (TVar 0) (FuncType (TCons ("RedBlackTree","RedBlackTree") [TVar 0]) (TCons ("Prelude","Maybe") [TVar 0]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("RedBlackTree","RedBlackTree") [3,4,5,6]) (Comb FuncCall ("RedBlackTree","lookupTree") [Var 4,Var 5,Var 1,Var 6])])),Func ("RedBlackTree","lookupTree") 4 Private (FuncType (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))) (FuncType (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))) (FuncType (TVar 0) (FuncType (TCons ("RedBlackTree","Tree") [TVar 0]) (TCons ("Prelude","Maybe") [TVar 0]))))) (Rule [1,2,3,4] (Case  Flex (Var 4) [Branch (Pattern ("RedBlackTree","Empty") []) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("RedBlackTree","Tree") [5,6,7,8]) (Case  Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 1,Var 3],Var 6]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","Just") [Var 6]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 2,Var 3],Var 6]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("RedBlackTree","lookupTree") [Var 1,Var 2,Var 3,Var 7]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("RedBlackTree","lookupTree") [Var 1,Var 2,Var 3,Var 8]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])])),Func ("RedBlackTree","update") 2 Public (FuncType (TVar 0) (FuncType (TCons ("RedBlackTree","RedBlackTree") [TVar 0]) (TCons ("RedBlackTree","RedBlackTree") [TVar 0]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("RedBlackTree","RedBlackTree") [3,4,5,6]) (Comb ConsCall ("RedBlackTree","RedBlackTree") [Var 3,Var 4,Var 5,Comb FuncCall ("RedBlackTree","updateTree") [Var 3,Var 5,Var 1,Var 6]])])),Func ("RedBlackTree","updateTree") 4 Private (FuncType (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))) (FuncType (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))) (FuncType (TVar 0) (FuncType (TCons ("RedBlackTree","Tree") [TVar 0]) (TCons ("RedBlackTree","Tree") [TVar 0]))))) (Rule [1,2,3,4] (Let [(5,Comb FuncCall ("RedBlackTree","updateTree.upd.34") [Var 3,Var 1,Var 2,Var 4]),(6,Comb FuncCall ("RedBlackTree","updateTree._#selFP2#e2") [Var 5]),(7,Comb FuncCall ("RedBlackTree","updateTree._#selFP3#l") [Var 5]),(8,Comb FuncCall ("RedBlackTree","updateTree._#selFP4#r") [Var 5])] (Comb ConsCall ("RedBlackTree","Tree") [Comb ConsCall ("RedBlackTree","Black") [],Var 6,Var 7,Var 8]))),Func ("RedBlackTree","updateTree.upd.34") 4 Private (FuncType (TVar 182) (FuncType (FuncType (TVar 182) (FuncType (TVar 182) (TCons ("Prelude","Bool") []))) (FuncType (FuncType (TVar 182) (FuncType (TVar 182) (TCons ("Prelude","Bool") []))) (FuncType (TCons ("RedBlackTree","Tree") [TVar 182]) (TCons ("RedBlackTree","Tree") [TVar 182]))))) (Rule [1,2,3,4] (Case  Flex (Var 4) [Branch (Pattern ("RedBlackTree","Empty") []) (Comb ConsCall ("RedBlackTree","Tree") [Comb ConsCall ("RedBlackTree","Red") [],Var 1,Comb ConsCall ("RedBlackTree","Empty") [],Comb ConsCall ("RedBlackTree","Empty") []]),Branch (Pattern ("RedBlackTree","Tree") [5,6,7,8]) (Case  Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 2,Var 1],Var 6]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("RedBlackTree","Tree") [Var 5,Var 1,Var 7,Var 8]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 3,Var 1],Var 6]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("RedBlackTree","balanceL") [Comb ConsCall ("RedBlackTree","Tree") [Var 5,Var 6,Comb FuncCall ("RedBlackTree","updateTree.upd.34") [Var 1,Var 2,Var 3,Var 7],Var 8]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("RedBlackTree","balanceR") [Comb ConsCall ("RedBlackTree","Tree") [Var 5,Var 6,Var 7,Comb FuncCall ("RedBlackTree","updateTree.upd.34") [Var 1,Var 2,Var 3,Var 8]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])])),Func ("RedBlackTree","updateTree._#selFP2#e2") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 182]) (TVar 182)) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Var 3)])),Func ("RedBlackTree","updateTree._#selFP3#l") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 182]) (TCons ("RedBlackTree","Tree") [TVar 182])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Var 4)])),Func ("RedBlackTree","updateTree._#selFP4#r") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 182]) (TCons ("RedBlackTree","Tree") [TVar 182])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Var 5)])),Func ("RedBlackTree","delete") 2 Public (FuncType (TVar 0) (FuncType (TCons ("RedBlackTree","RedBlackTree") [TVar 0]) (TCons ("RedBlackTree","RedBlackTree") [TVar 0]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("RedBlackTree","RedBlackTree") [3,4,5,6]) (Comb ConsCall ("RedBlackTree","RedBlackTree") [Var 3,Var 4,Var 5,Comb FuncCall ("RedBlackTree","delete.blackenRoot.43") [Comb FuncCall ("RedBlackTree","deleteTree") [Var 4,Var 5,Var 1,Var 6]]])])),Func ("RedBlackTree","delete.blackenRoot.43") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 0]) (TCons ("RedBlackTree","Tree") [TVar 0])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Empty") []) (Comb ConsCall ("RedBlackTree","Empty") []),Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Comb ConsCall ("RedBlackTree","Tree") [Comb ConsCall ("RedBlackTree","Black") [],Var 3,Var 4,Var 5])])),Func ("RedBlackTree","deleteTree") 4 Private (FuncType (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))) (FuncType (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))) (FuncType (TVar 0) (FuncType (TCons ("RedBlackTree","Tree") [TVar 0]) (TCons ("RedBlackTree","Tree") [TVar 0]))))) (Rule [1,2,3,4] (Case  Flex (Var 4) [Branch (Pattern ("RedBlackTree","Empty") []) (Comb ConsCall ("RedBlackTree","Empty") []),Branch (Pattern ("RedBlackTree","Tree") [5,6,7,8]) (Case  Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 1,Var 3],Var 6]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 7,Comb ConsCall ("RedBlackTree","Empty") []]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("RedBlackTree","deleteTree.addColor.55") [Var 5,Var 8]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 8,Comb ConsCall ("RedBlackTree","Empty") []]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("RedBlackTree","deleteTree.addColor.55") [Var 5,Var 7]),Branch (Pattern ("Prelude","False") []) (Let [(9,Comb FuncCall ("RedBlackTree","deleteTree.rightMost.55") [Var 7])] (Comb FuncCall ("RedBlackTree","delBalanceL") [Comb ConsCall ("RedBlackTree","Tree") [Var 5,Var 9,Comb FuncCall ("RedBlackTree","deleteTree") [Var 1,Var 2,Var 9,Var 7],Var 8]]))])]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 2,Var 3],Var 6]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("RedBlackTree","delBalanceL") [Comb ConsCall ("RedBlackTree","Tree") [Var 5,Var 6,Comb FuncCall ("RedBlackTree","deleteTree") [Var 1,Var 2,Var 3,Var 7],Var 8]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("RedBlackTree","delBalanceR") [Comb ConsCall ("RedBlackTree","Tree") [Var 5,Var 6,Var 7,Comb FuncCall ("RedBlackTree","deleteTree") [Var 1,Var 2,Var 3,Var 8]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])])),Func ("RedBlackTree","deleteTree.addColor.55") 2 Private (FuncType (TCons ("RedBlackTree","Color") []) (FuncType (TCons ("RedBlackTree","Tree") [TVar 0]) (TCons ("RedBlackTree","Tree") [TVar 0]))) (Rule [1,2] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Red") []) (Var 2),Branch (Pattern ("RedBlackTree","Black") []) (Case  Flex (Var 2) [Branch (Pattern ("RedBlackTree","Empty") []) (Comb ConsCall ("RedBlackTree","Empty") []),Branch (Pattern ("RedBlackTree","Tree") [3,4,5,6]) (Case  Flex (Var 3) [Branch (Pattern ("RedBlackTree","Red") []) (Comb ConsCall ("RedBlackTree","Tree") [Comb ConsCall ("RedBlackTree","Black") [],Var 4,Var 5,Var 6]),Branch (Pattern ("RedBlackTree","Black") []) (Comb ConsCall ("RedBlackTree","Tree") [Comb ConsCall ("RedBlackTree","DoublyBlack") [],Var 4,Var 5,Var 6])])])])),Func ("RedBlackTree","deleteTree.rightMost.55") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 0]) (TVar 0)) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 5,Comb ConsCall ("RedBlackTree","Empty") []]) [Branch (Pattern ("Prelude","True") []) (Var 3),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("RedBlackTree","deleteTree.rightMost.55") [Var 5])])])),Func ("RedBlackTree","tree2list") 1 Public (FuncType (TCons ("RedBlackTree","RedBlackTree") [TVar 0]) (TCons ("Prelude","[]") [TVar 0])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","RedBlackTree") [2,3,4,5]) (Comb FuncCall ("RedBlackTree","tree2listTree") [Var 5])])),Func ("RedBlackTree","tree2listTree") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 0]) (TCons ("Prelude","[]") [TVar 0])) (Rule [1] (Comb FuncCall ("RedBlackTree","tree2listTree.t2l.76") [Var 1,Comb ConsCall ("Prelude","[]") []])),Func ("RedBlackTree","tree2listTree.t2l.76") 2 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0]))) (Rule [1,2] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Empty") []) (Var 2),Branch (Pattern ("RedBlackTree","Tree") [3,4,5,6]) (Comb FuncCall ("RedBlackTree","tree2listTree.t2l.76") [Var 5,Comb ConsCall ("Prelude",":") [Var 4,Comb FuncCall ("RedBlackTree","tree2listTree.t2l.76") [Var 6,Var 2]]])])),Func ("RedBlackTree","sort") 2 Public (FuncType (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0]))) (Rule [1,2] (Comb FuncCall ("RedBlackTree","tree2list") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("RedBlackTree","update") [],Comb FuncCall ("RedBlackTree","empty") [Comb (FuncPartCall 2) ("RedBlackTree","sort._#lambda1") [],Comb (FuncPartCall 2) ("Prelude","==") [],Var 1],Var 2]])),Func ("RedBlackTree","sort._#lambda1") 2 Private (FuncType (TVar 519) (FuncType (TVar 519) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Comb ConsCall ("Prelude","False") [])),Func ("RedBlackTree","setInsertEquivalence") 2 Public (FuncType (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))) (FuncType (TCons ("RedBlackTree","RedBlackTree") [TVar 0]) (TCons ("RedBlackTree","RedBlackTree") [TVar 0]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("RedBlackTree","RedBlackTree") [3,4,5,6]) (Comb ConsCall ("RedBlackTree","RedBlackTree") [Var 1,Var 4,Var 5,Var 6])])),Func ("RedBlackTree","rbt") 1 Private (FuncType (TCons ("RedBlackTree","RedBlackTree") [TVar 0]) (TCons ("RedBlackTree","Tree") [TVar 0])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","RedBlackTree") [2,3,4,5]) (Var 5)])),Func ("RedBlackTree","isBlack") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 0]) (TCons ("Prelude","Bool") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Empty") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Comb FuncCall ("Prelude","==") [Var 2,Comb ConsCall ("RedBlackTree","Black") []])])),Func ("RedBlackTree","isRed") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 0]) (TCons ("Prelude","Bool") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Empty") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Comb FuncCall ("Prelude","==") [Var 2,Comb ConsCall ("RedBlackTree","Red") []])])),Func ("RedBlackTree","isDoublyBlack") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 0]) (TCons ("Prelude","Bool") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Empty") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Comb FuncCall ("Prelude","==") [Var 2,Comb ConsCall ("RedBlackTree","DoublyBlack") []])])),Func ("RedBlackTree","element") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 0]) (TVar 0)) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Var 3)])),Func ("RedBlackTree","left") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 0]) (TCons ("RedBlackTree","Tree") [TVar 0])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Var 4)])),Func ("RedBlackTree","right") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 0]) (TCons ("RedBlackTree","Tree") [TVar 0])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Var 5)])),Func ("RedBlackTree","singleBlack") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 0]) (TCons ("RedBlackTree","Tree") [TVar 0])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Empty") []) (Comb ConsCall ("RedBlackTree","Empty") []),Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 2) [Branch (Pattern ("RedBlackTree","DoublyBlack") []) (Comb ConsCall ("RedBlackTree","Tree") [Comb ConsCall ("RedBlackTree","Black") [],Var 3,Var 4,Var 5])])])),Func ("RedBlackTree","balanceL") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 0]) (TCons ("RedBlackTree","Tree") [TVar 0])) (Rule [1] (Let [(2,Comb FuncCall ("RedBlackTree","left") [Var 1])] (Case  Rigid (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("RedBlackTree","isRed") [Var 2],Comb FuncCall ("RedBlackTree","isRed") [Comb FuncCall ("RedBlackTree","left") [Var 2]]]) [Branch (Pattern ("Prelude","True") []) (Let [(3,Comb FuncCall ("RedBlackTree","balanceL._#selFP6#z") [Var 1]),(4,Comb FuncCall ("RedBlackTree","balanceL._#selFP7#y") [Var 1]),(5,Comb FuncCall ("RedBlackTree","balanceL._#selFP8#x") [Var 1]),(6,Comb FuncCall ("RedBlackTree","balanceL._#selFP9#a") [Var 1]),(7,Comb FuncCall ("RedBlackTree","balanceL._#selFP10#b") [Var 1]),(8,Comb FuncCall ("RedBlackTree","balanceL._#selFP11#c") [Var 1]),(9,Comb FuncCall ("RedBlackTree","balanceL._#selFP12#d") [Var 1])] (Comb ConsCall ("RedBlackTree","Tree") [Comb ConsCall ("RedBlackTree","Red") [],Var 4,Comb ConsCall ("RedBlackTree","Tree") [Comb ConsCall ("RedBlackTree","Black") [],Var 5,Var 6,Var 7],Comb ConsCall ("RedBlackTree","Tree") [Comb ConsCall ("RedBlackTree","Black") [],Var 3,Var 8,Var 9]])),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("RedBlackTree","isRed") [Var 2],Comb FuncCall ("RedBlackTree","isRed") [Comb FuncCall ("RedBlackTree","right") [Var 2]]]) [Branch (Pattern ("Prelude","True") []) (Let [(10,Comb FuncCall ("RedBlackTree","balanceL._#selFP14#z") [Var 1]),(11,Comb FuncCall ("RedBlackTree","balanceL._#selFP15#x") [Var 1]),(12,Comb FuncCall ("RedBlackTree","balanceL._#selFP16#a") [Var 1]),(13,Comb FuncCall ("RedBlackTree","balanceL._#selFP17#y") [Var 1]),(14,Comb FuncCall ("RedBlackTree","balanceL._#selFP18#b") [Var 1]),(15,Comb FuncCall ("RedBlackTree","balanceL._#selFP19#c") [Var 1]),(16,Comb FuncCall ("RedBlackTree","balanceL._#selFP20#d") [Var 1])] (Comb ConsCall ("RedBlackTree","Tree") [Comb ConsCall ("RedBlackTree","Red") [],Var 13,Comb ConsCall ("RedBlackTree","Tree") [Comb ConsCall ("RedBlackTree","Black") [],Var 11,Var 12,Var 14],Comb ConsCall ("RedBlackTree","Tree") [Comb ConsCall ("RedBlackTree","Black") [],Var 10,Var 15,Var 16]])),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Var 1),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])]))),Func ("RedBlackTree","balanceL._#selFP6#z") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 87]) (TVar 87)) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 4) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Case  Flex (Var 8) [Branch (Pattern ("RedBlackTree","Tree") [10,11,12,13]) (Var 3)])])])),Func ("RedBlackTree","balanceL._#selFP7#y") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 87]) (TVar 87)) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 4) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Case  Flex (Var 8) [Branch (Pattern ("RedBlackTree","Tree") [10,11,12,13]) (Var 7)])])])),Func ("RedBlackTree","balanceL._#selFP8#x") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 87]) (TVar 87)) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 4) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Case  Flex (Var 8) [Branch (Pattern ("RedBlackTree","Tree") [10,11,12,13]) (Var 11)])])])),Func ("RedBlackTree","balanceL._#selFP9#a") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 87]) (TCons ("RedBlackTree","Tree") [TVar 87])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 4) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Case  Flex (Var 8) [Branch (Pattern ("RedBlackTree","Tree") [10,11,12,13]) (Var 12)])])])),Func ("RedBlackTree","balanceL._#selFP10#b") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 87]) (TCons ("RedBlackTree","Tree") [TVar 87])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 4) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Case  Flex (Var 8) [Branch (Pattern ("RedBlackTree","Tree") [10,11,12,13]) (Var 13)])])])),Func ("RedBlackTree","balanceL._#selFP11#c") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 87]) (TCons ("RedBlackTree","Tree") [TVar 87])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 4) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Case  Flex (Var 8) [Branch (Pattern ("RedBlackTree","Tree") [10,11,12,13]) (Var 9)])])])),Func ("RedBlackTree","balanceL._#selFP12#d") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 87]) (TCons ("RedBlackTree","Tree") [TVar 87])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 4) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Case  Flex (Var 8) [Branch (Pattern ("RedBlackTree","Tree") [10,11,12,13]) (Var 5)])])])),Func ("RedBlackTree","balanceL._#selFP14#z") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 87]) (TVar 87)) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 4) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Case  Flex (Var 9) [Branch (Pattern ("RedBlackTree","Tree") [10,11,12,13]) (Var 3)])])])),Func ("RedBlackTree","balanceL._#selFP15#x") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 87]) (TVar 87)) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 4) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Case  Flex (Var 9) [Branch (Pattern ("RedBlackTree","Tree") [10,11,12,13]) (Var 7)])])])),Func ("RedBlackTree","balanceL._#selFP16#a") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 87]) (TCons ("RedBlackTree","Tree") [TVar 87])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 4) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Case  Flex (Var 9) [Branch (Pattern ("RedBlackTree","Tree") [10,11,12,13]) (Var 8)])])])),Func ("RedBlackTree","balanceL._#selFP17#y") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 87]) (TVar 87)) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 4) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Case  Flex (Var 9) [Branch (Pattern ("RedBlackTree","Tree") [10,11,12,13]) (Var 11)])])])),Func ("RedBlackTree","balanceL._#selFP18#b") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 87]) (TCons ("RedBlackTree","Tree") [TVar 87])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 4) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Case  Flex (Var 9) [Branch (Pattern ("RedBlackTree","Tree") [10,11,12,13]) (Var 12)])])])),Func ("RedBlackTree","balanceL._#selFP19#c") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 87]) (TCons ("RedBlackTree","Tree") [TVar 87])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 4) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Case  Flex (Var 9) [Branch (Pattern ("RedBlackTree","Tree") [10,11,12,13]) (Var 13)])])])),Func ("RedBlackTree","balanceL._#selFP20#d") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 87]) (TCons ("RedBlackTree","Tree") [TVar 87])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 4) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Case  Flex (Var 9) [Branch (Pattern ("RedBlackTree","Tree") [10,11,12,13]) (Var 5)])])])),Func ("RedBlackTree","balanceR") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 0]) (TCons ("RedBlackTree","Tree") [TVar 0])) (Rule [1] (Let [(2,Comb FuncCall ("RedBlackTree","right") [Var 1])] (Case  Rigid (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("RedBlackTree","isRed") [Var 2],Comb FuncCall ("RedBlackTree","isRed") [Comb FuncCall ("RedBlackTree","right") [Var 2]]]) [Branch (Pattern ("Prelude","True") []) (Let [(3,Comb FuncCall ("RedBlackTree","balanceR._#selFP22#x") [Var 1]),(4,Comb FuncCall ("RedBlackTree","balanceR._#selFP23#a") [Var 1]),(5,Comb FuncCall ("RedBlackTree","balanceR._#selFP24#y") [Var 1]),(6,Comb FuncCall ("RedBlackTree","balanceR._#selFP25#b") [Var 1]),(7,Comb FuncCall ("RedBlackTree","balanceR._#selFP26#z") [Var 1]),(8,Comb FuncCall ("RedBlackTree","balanceR._#selFP27#c") [Var 1]),(9,Comb FuncCall ("RedBlackTree","balanceR._#selFP28#d") [Var 1])] (Comb ConsCall ("RedBlackTree","Tree") [Comb ConsCall ("RedBlackTree","Red") [],Var 5,Comb ConsCall ("RedBlackTree","Tree") [Comb ConsCall ("RedBlackTree","Black") [],Var 3,Var 4,Var 6],Comb ConsCall ("RedBlackTree","Tree") [Comb ConsCall ("RedBlackTree","Black") [],Var 7,Var 8,Var 9]])),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("RedBlackTree","isRed") [Var 2],Comb FuncCall ("RedBlackTree","isRed") [Comb FuncCall ("RedBlackTree","left") [Var 2]]]) [Branch (Pattern ("Prelude","True") []) (Let [(10,Comb FuncCall ("RedBlackTree","balanceR._#selFP30#x") [Var 1]),(11,Comb FuncCall ("RedBlackTree","balanceR._#selFP31#a") [Var 1]),(12,Comb FuncCall ("RedBlackTree","balanceR._#selFP32#z") [Var 1]),(13,Comb FuncCall ("RedBlackTree","balanceR._#selFP33#y") [Var 1]),(14,Comb FuncCall ("RedBlackTree","balanceR._#selFP34#b") [Var 1]),(15,Comb FuncCall ("RedBlackTree","balanceR._#selFP35#c") [Var 1]),(16,Comb FuncCall ("RedBlackTree","balanceR._#selFP36#d") [Var 1])] (Comb ConsCall ("RedBlackTree","Tree") [Comb ConsCall ("RedBlackTree","Red") [],Var 13,Comb ConsCall ("RedBlackTree","Tree") [Comb ConsCall ("RedBlackTree","Black") [],Var 10,Var 11,Var 14],Comb ConsCall ("RedBlackTree","Tree") [Comb ConsCall ("RedBlackTree","Black") [],Var 12,Var 15,Var 16]])),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Var 1),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])]))),Func ("RedBlackTree","balanceR._#selFP22#x") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 130]) (TVar 130)) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 5) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Case  Flex (Var 9) [Branch (Pattern ("RedBlackTree","Tree") [10,11,12,13]) (Var 3)])])])),Func ("RedBlackTree","balanceR._#selFP23#a") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 130]) (TCons ("RedBlackTree","Tree") [TVar 130])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 5) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Case  Flex (Var 9) [Branch (Pattern ("RedBlackTree","Tree") [10,11,12,13]) (Var 4)])])])),Func ("RedBlackTree","balanceR._#selFP24#y") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 130]) (TVar 130)) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 5) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Case  Flex (Var 9) [Branch (Pattern ("RedBlackTree","Tree") [10,11,12,13]) (Var 7)])])])),Func ("RedBlackTree","balanceR._#selFP25#b") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 130]) (TCons ("RedBlackTree","Tree") [TVar 130])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 5) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Case  Flex (Var 9) [Branch (Pattern ("RedBlackTree","Tree") [10,11,12,13]) (Var 8)])])])),Func ("RedBlackTree","balanceR._#selFP26#z") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 130]) (TVar 130)) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 5) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Case  Flex (Var 9) [Branch (Pattern ("RedBlackTree","Tree") [10,11,12,13]) (Var 11)])])])),Func ("RedBlackTree","balanceR._#selFP27#c") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 130]) (TCons ("RedBlackTree","Tree") [TVar 130])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 5) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Case  Flex (Var 9) [Branch (Pattern ("RedBlackTree","Tree") [10,11,12,13]) (Var 12)])])])),Func ("RedBlackTree","balanceR._#selFP28#d") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 130]) (TCons ("RedBlackTree","Tree") [TVar 130])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 5) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Case  Flex (Var 9) [Branch (Pattern ("RedBlackTree","Tree") [10,11,12,13]) (Var 13)])])])),Func ("RedBlackTree","balanceR._#selFP30#x") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 130]) (TVar 130)) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 5) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Case  Flex (Var 8) [Branch (Pattern ("RedBlackTree","Tree") [10,11,12,13]) (Var 3)])])])),Func ("RedBlackTree","balanceR._#selFP31#a") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 130]) (TCons ("RedBlackTree","Tree") [TVar 130])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 5) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Case  Flex (Var 8) [Branch (Pattern ("RedBlackTree","Tree") [10,11,12,13]) (Var 4)])])])),Func ("RedBlackTree","balanceR._#selFP32#z") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 130]) (TVar 130)) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 5) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Case  Flex (Var 8) [Branch (Pattern ("RedBlackTree","Tree") [10,11,12,13]) (Var 7)])])])),Func ("RedBlackTree","balanceR._#selFP33#y") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 130]) (TVar 130)) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 5) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Case  Flex (Var 8) [Branch (Pattern ("RedBlackTree","Tree") [10,11,12,13]) (Var 11)])])])),Func ("RedBlackTree","balanceR._#selFP34#b") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 130]) (TCons ("RedBlackTree","Tree") [TVar 130])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 5) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Case  Flex (Var 8) [Branch (Pattern ("RedBlackTree","Tree") [10,11,12,13]) (Var 12)])])])),Func ("RedBlackTree","balanceR._#selFP35#c") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 130]) (TCons ("RedBlackTree","Tree") [TVar 130])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 5) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Case  Flex (Var 8) [Branch (Pattern ("RedBlackTree","Tree") [10,11,12,13]) (Var 13)])])])),Func ("RedBlackTree","balanceR._#selFP36#d") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 130]) (TCons ("RedBlackTree","Tree") [TVar 130])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 5) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Case  Flex (Var 8) [Branch (Pattern ("RedBlackTree","Tree") [10,11,12,13]) (Var 9)])])])),Func ("RedBlackTree","delBalanceL") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 0]) (TCons ("RedBlackTree","Tree") [TVar 0])) (Rule [1] (Case  Rigid (Comb FuncCall ("RedBlackTree","isDoublyBlack") [Comb FuncCall ("RedBlackTree","left") [Var 1]]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("RedBlackTree","reviseLeft") [Var 1]),Branch (Pattern ("Prelude","False") []) (Var 1)])),Func ("RedBlackTree","reviseLeft") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 0]) (TCons ("RedBlackTree","Tree") [TVar 0])) (Rule [1] (Let [(2,Comb FuncCall ("RedBlackTree","right") [Var 1]),(3,Comb FuncCall ("RedBlackTree","isBlack") [Var 2])] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 2,Comb ConsCall ("RedBlackTree","Empty") []]) [Branch (Pattern ("Prelude","True") []) (Var 1),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","&&") [Var 3,Comb FuncCall ("RedBlackTree","isRed") [Comb FuncCall ("RedBlackTree","left") [Var 2]]]) [Branch (Pattern ("Prelude","True") []) (Let [(4,Comb FuncCall ("RedBlackTree","reviseLeft._#selFP38#col") [Var 1]),(5,Comb FuncCall ("RedBlackTree","reviseLeft._#selFP39#x") [Var 1]),(6,Comb FuncCall ("RedBlackTree","reviseLeft._#selFP40#a") [Var 1]),(7,Comb FuncCall ("RedBlackTree","reviseLeft._#selFP41#z") [Var 1]),(8,Comb FuncCall ("RedBlackTree","reviseLeft._#selFP42#y") [Var 1]),(9,Comb FuncCall ("RedBlackTree","reviseLeft._#selFP43#b") [Var 1]),(10,Comb FuncCall ("RedBlackTree","reviseLeft._#selFP44#c") [Var 1]),(11,Comb FuncCall ("RedBlackTree","reviseLeft._#selFP45#d") [Var 1])] (Comb ConsCall ("RedBlackTree","Tree") [Var 4,Var 8,Comb ConsCall ("RedBlackTree","Tree") [Comb ConsCall ("RedBlackTree","Black") [],Var 5,Comb FuncCall ("RedBlackTree","singleBlack") [Var 6],Var 9],Comb ConsCall ("RedBlackTree","Tree") [Comb ConsCall ("RedBlackTree","Black") [],Var 7,Var 10,Var 11]])),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","&&") [Var 3,Comb FuncCall ("RedBlackTree","isRed") [Comb FuncCall ("RedBlackTree","right") [Var 2]]]) [Branch (Pattern ("Prelude","True") []) (Let [(12,Comb FuncCall ("RedBlackTree","reviseLeft._#selFP47#col") [Var 1]),(13,Comb FuncCall ("RedBlackTree","reviseLeft._#selFP48#x") [Var 1]),(14,Comb FuncCall ("RedBlackTree","reviseLeft._#selFP49#a") [Var 1]),(15,Comb FuncCall ("RedBlackTree","reviseLeft._#selFP50#y") [Var 1]),(16,Comb FuncCall ("RedBlackTree","reviseLeft._#selFP51#b") [Var 1]),(17,Comb FuncCall ("RedBlackTree","reviseLeft._#selFP52#z") [Var 1]),(18,Comb FuncCall ("RedBlackTree","reviseLeft._#selFP53#c") [Var 1]),(19,Comb FuncCall ("RedBlackTree","reviseLeft._#selFP54#d") [Var 1])] (Comb ConsCall ("RedBlackTree","Tree") [Var 12,Var 15,Comb ConsCall ("RedBlackTree","Tree") [Comb ConsCall ("RedBlackTree","Black") [],Var 13,Comb FuncCall ("RedBlackTree","singleBlack") [Var 14],Var 16],Comb ConsCall ("RedBlackTree","Tree") [Comb ConsCall ("RedBlackTree","Black") [],Var 17,Var 18,Var 19]])),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Var 3) [Branch (Pattern ("Prelude","True") []) (Let [(20,Comb FuncCall ("RedBlackTree","reviseLeft._#selFP56#col") [Var 1]),(21,Comb FuncCall ("RedBlackTree","reviseLeft._#selFP57#x") [Var 1]),(22,Comb FuncCall ("RedBlackTree","reviseLeft._#selFP58#a") [Var 1]),(23,Comb FuncCall ("RedBlackTree","reviseLeft._#selFP59#y") [Var 1]),(24,Comb FuncCall ("RedBlackTree","reviseLeft._#selFP60#b") [Var 1]),(25,Comb FuncCall ("RedBlackTree","reviseLeft._#selFP61#c") [Var 1])] (Comb ConsCall ("RedBlackTree","Tree") [Case  Rigid (Comb FuncCall ("Prelude","==") [Var 20,Comb ConsCall ("RedBlackTree","Red") []]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("RedBlackTree","Black") []),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("RedBlackTree","DoublyBlack") [])],Var 21,Comb FuncCall ("RedBlackTree","singleBlack") [Var 22],Comb ConsCall ("RedBlackTree","Tree") [Comb ConsCall ("RedBlackTree","Red") [],Var 23,Var 24,Var 25]])),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Let [(26,Comb FuncCall ("RedBlackTree","reviseLeft._#selFP63#x") [Var 1]),(27,Comb FuncCall ("RedBlackTree","reviseLeft._#selFP64#a") [Var 1]),(28,Comb FuncCall ("RedBlackTree","reviseLeft._#selFP65#y") [Var 1]),(29,Comb FuncCall ("RedBlackTree","reviseLeft._#selFP66#b") [Var 1]),(30,Comb FuncCall ("RedBlackTree","reviseLeft._#selFP67#c") [Var 1])] (Comb ConsCall ("RedBlackTree","Tree") [Comb ConsCall ("RedBlackTree","Black") [],Var 28,Comb FuncCall ("RedBlackTree","reviseLeft") [Comb ConsCall ("RedBlackTree","Tree") [Comb ConsCall ("RedBlackTree","Red") [],Var 26,Var 27,Var 29]],Var 30])),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])])]))),Func ("RedBlackTree","reviseLeft._#selFP38#col") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 248]) (TCons ("RedBlackTree","Color") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 5) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Case  Flex (Var 8) [Branch (Pattern ("RedBlackTree","Tree") [10,11,12,13]) (Var 2)])])])),Func ("RedBlackTree","reviseLeft._#selFP39#x") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 248]) (TVar 248)) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 5) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Case  Flex (Var 8) [Branch (Pattern ("RedBlackTree","Tree") [10,11,12,13]) (Var 3)])])])),Func ("RedBlackTree","reviseLeft._#selFP40#a") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 248]) (TCons ("RedBlackTree","Tree") [TVar 248])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 5) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Case  Flex (Var 8) [Branch (Pattern ("RedBlackTree","Tree") [10,11,12,13]) (Var 4)])])])),Func ("RedBlackTree","reviseLeft._#selFP41#z") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 248]) (TVar 248)) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 5) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Case  Flex (Var 8) [Branch (Pattern ("RedBlackTree","Tree") [10,11,12,13]) (Var 7)])])])),Func ("RedBlackTree","reviseLeft._#selFP42#y") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 248]) (TVar 248)) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 5) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Case  Flex (Var 8) [Branch (Pattern ("RedBlackTree","Tree") [10,11,12,13]) (Var 11)])])])),Func ("RedBlackTree","reviseLeft._#selFP43#b") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 248]) (TCons ("RedBlackTree","Tree") [TVar 248])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 5) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Case  Flex (Var 8) [Branch (Pattern ("RedBlackTree","Tree") [10,11,12,13]) (Var 12)])])])),Func ("RedBlackTree","reviseLeft._#selFP44#c") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 248]) (TCons ("RedBlackTree","Tree") [TVar 248])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 5) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Case  Flex (Var 8) [Branch (Pattern ("RedBlackTree","Tree") [10,11,12,13]) (Var 13)])])])),Func ("RedBlackTree","reviseLeft._#selFP45#d") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 248]) (TCons ("RedBlackTree","Tree") [TVar 248])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 5) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Case  Flex (Var 8) [Branch (Pattern ("RedBlackTree","Tree") [10,11,12,13]) (Var 9)])])])),Func ("RedBlackTree","reviseLeft._#selFP47#col") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 248]) (TCons ("RedBlackTree","Color") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 5) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Case  Flex (Var 9) [Branch (Pattern ("RedBlackTree","Tree") [10,11,12,13]) (Var 2)])])])),Func ("RedBlackTree","reviseLeft._#selFP48#x") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 248]) (TVar 248)) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 5) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Case  Flex (Var 9) [Branch (Pattern ("RedBlackTree","Tree") [10,11,12,13]) (Var 3)])])])),Func ("RedBlackTree","reviseLeft._#selFP49#a") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 248]) (TCons ("RedBlackTree","Tree") [TVar 248])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 5) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Case  Flex (Var 9) [Branch (Pattern ("RedBlackTree","Tree") [10,11,12,13]) (Var 4)])])])),Func ("RedBlackTree","reviseLeft._#selFP50#y") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 248]) (TVar 248)) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 5) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Case  Flex (Var 9) [Branch (Pattern ("RedBlackTree","Tree") [10,11,12,13]) (Var 7)])])])),Func ("RedBlackTree","reviseLeft._#selFP51#b") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 248]) (TCons ("RedBlackTree","Tree") [TVar 248])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 5) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Case  Flex (Var 9) [Branch (Pattern ("RedBlackTree","Tree") [10,11,12,13]) (Var 8)])])])),Func ("RedBlackTree","reviseLeft._#selFP52#z") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 248]) (TVar 248)) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 5) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Case  Flex (Var 9) [Branch (Pattern ("RedBlackTree","Tree") [10,11,12,13]) (Var 11)])])])),Func ("RedBlackTree","reviseLeft._#selFP53#c") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 248]) (TCons ("RedBlackTree","Tree") [TVar 248])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 5) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Case  Flex (Var 9) [Branch (Pattern ("RedBlackTree","Tree") [10,11,12,13]) (Var 12)])])])),Func ("RedBlackTree","reviseLeft._#selFP54#d") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 248]) (TCons ("RedBlackTree","Tree") [TVar 248])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 5) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Case  Flex (Var 9) [Branch (Pattern ("RedBlackTree","Tree") [10,11,12,13]) (Var 13)])])])),Func ("RedBlackTree","reviseLeft._#selFP56#col") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 248]) (TCons ("RedBlackTree","Color") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 5) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Var 2)])])),Func ("RedBlackTree","reviseLeft._#selFP57#x") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 248]) (TVar 248)) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 5) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Var 3)])])),Func ("RedBlackTree","reviseLeft._#selFP58#a") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 248]) (TCons ("RedBlackTree","Tree") [TVar 248])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 5) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Var 4)])])),Func ("RedBlackTree","reviseLeft._#selFP59#y") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 248]) (TVar 248)) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 5) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Var 7)])])),Func ("RedBlackTree","reviseLeft._#selFP60#b") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 248]) (TCons ("RedBlackTree","Tree") [TVar 248])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 5) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Var 8)])])),Func ("RedBlackTree","reviseLeft._#selFP61#c") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 248]) (TCons ("RedBlackTree","Tree") [TVar 248])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 5) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Var 9)])])),Func ("RedBlackTree","reviseLeft._#selFP63#x") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 248]) (TVar 248)) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 5) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Var 3)])])),Func ("RedBlackTree","reviseLeft._#selFP64#a") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 248]) (TCons ("RedBlackTree","Tree") [TVar 248])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 5) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Var 4)])])),Func ("RedBlackTree","reviseLeft._#selFP65#y") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 248]) (TVar 248)) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 5) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Var 7)])])),Func ("RedBlackTree","reviseLeft._#selFP66#b") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 248]) (TCons ("RedBlackTree","Tree") [TVar 248])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 5) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Var 8)])])),Func ("RedBlackTree","reviseLeft._#selFP67#c") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 248]) (TCons ("RedBlackTree","Tree") [TVar 248])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 5) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Var 9)])])),Func ("RedBlackTree","delBalanceR") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 0]) (TCons ("RedBlackTree","Tree") [TVar 0])) (Rule [1] (Case  Rigid (Comb FuncCall ("RedBlackTree","isDoublyBlack") [Comb FuncCall ("RedBlackTree","right") [Var 1]]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("RedBlackTree","reviseRight") [Var 1]),Branch (Pattern ("Prelude","False") []) (Var 1)])),Func ("RedBlackTree","reviseRight") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 0]) (TCons ("RedBlackTree","Tree") [TVar 0])) (Rule [1] (Let [(2,Comb FuncCall ("RedBlackTree","left") [Var 1]),(3,Comb FuncCall ("RedBlackTree","isBlack") [Var 2])] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 2,Comb ConsCall ("RedBlackTree","Empty") []]) [Branch (Pattern ("Prelude","True") []) (Var 1),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","&&") [Var 3,Comb FuncCall ("RedBlackTree","isRed") [Comb FuncCall ("RedBlackTree","left") [Var 2]]]) [Branch (Pattern ("Prelude","True") []) (Let [(4,Comb FuncCall ("RedBlackTree","reviseRight._#selFP69#col") [Var 1]),(5,Comb FuncCall ("RedBlackTree","reviseRight._#selFP70#x") [Var 1]),(6,Comb FuncCall ("RedBlackTree","reviseRight._#selFP71#y") [Var 1]),(7,Comb FuncCall ("RedBlackTree","reviseRight._#selFP72#z") [Var 1]),(8,Comb FuncCall ("RedBlackTree","reviseRight._#selFP73#d") [Var 1]),(9,Comb FuncCall ("RedBlackTree","reviseRight._#selFP74#c") [Var 1]),(10,Comb FuncCall ("RedBlackTree","reviseRight._#selFP75#b") [Var 1]),(11,Comb FuncCall ("RedBlackTree","reviseRight._#selFP76#a") [Var 1])] (Comb ConsCall ("RedBlackTree","Tree") [Var 4,Var 6,Comb ConsCall ("RedBlackTree","Tree") [Comb ConsCall ("RedBlackTree","Black") [],Var 7,Var 8,Var 9],Comb ConsCall ("RedBlackTree","Tree") [Comb ConsCall ("RedBlackTree","Black") [],Var 5,Var 10,Comb FuncCall ("RedBlackTree","singleBlack") [Var 11]]])),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","&&") [Var 3,Comb FuncCall ("RedBlackTree","isRed") [Comb FuncCall ("RedBlackTree","right") [Var 2]]]) [Branch (Pattern ("Prelude","True") []) (Let [(12,Comb FuncCall ("RedBlackTree","reviseRight._#selFP78#col") [Var 1]),(13,Comb FuncCall ("RedBlackTree","reviseRight._#selFP79#x") [Var 1]),(14,Comb FuncCall ("RedBlackTree","reviseRight._#selFP80#z") [Var 1]),(15,Comb FuncCall ("RedBlackTree","reviseRight._#selFP81#d") [Var 1]),(16,Comb FuncCall ("RedBlackTree","reviseRight._#selFP82#y") [Var 1]),(17,Comb FuncCall ("RedBlackTree","reviseRight._#selFP83#c") [Var 1]),(18,Comb FuncCall ("RedBlackTree","reviseRight._#selFP84#b") [Var 1]),(19,Comb FuncCall ("RedBlackTree","reviseRight._#selFP85#a") [Var 1])] (Comb ConsCall ("RedBlackTree","Tree") [Var 12,Var 16,Comb ConsCall ("RedBlackTree","Tree") [Comb ConsCall ("RedBlackTree","Black") [],Var 14,Var 15,Var 17],Comb ConsCall ("RedBlackTree","Tree") [Comb ConsCall ("RedBlackTree","Black") [],Var 13,Var 18,Comb FuncCall ("RedBlackTree","singleBlack") [Var 19]]])),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Var 3) [Branch (Pattern ("Prelude","True") []) (Let [(20,Comb FuncCall ("RedBlackTree","reviseRight._#selFP87#col") [Var 1]),(21,Comb FuncCall ("RedBlackTree","reviseRight._#selFP88#x") [Var 1]),(22,Comb FuncCall ("RedBlackTree","reviseRight._#selFP89#y") [Var 1]),(23,Comb FuncCall ("RedBlackTree","reviseRight._#selFP90#c") [Var 1]),(24,Comb FuncCall ("RedBlackTree","reviseRight._#selFP91#b") [Var 1]),(25,Comb FuncCall ("RedBlackTree","reviseRight._#selFP92#a") [Var 1])] (Comb ConsCall ("RedBlackTree","Tree") [Case  Rigid (Comb FuncCall ("Prelude","==") [Var 20,Comb ConsCall ("RedBlackTree","Red") []]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("RedBlackTree","Black") []),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("RedBlackTree","DoublyBlack") [])],Var 21,Comb ConsCall ("RedBlackTree","Tree") [Comb ConsCall ("RedBlackTree","Red") [],Var 22,Var 23,Var 24],Comb FuncCall ("RedBlackTree","singleBlack") [Var 25]])),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Let [(26,Comb FuncCall ("RedBlackTree","reviseRight._#selFP94#x") [Var 1]),(27,Comb FuncCall ("RedBlackTree","reviseRight._#selFP95#y") [Var 1]),(28,Comb FuncCall ("RedBlackTree","reviseRight._#selFP96#c") [Var 1]),(29,Comb FuncCall ("RedBlackTree","reviseRight._#selFP97#b") [Var 1]),(30,Comb FuncCall ("RedBlackTree","reviseRight._#selFP98#a") [Var 1])] (Comb ConsCall ("RedBlackTree","Tree") [Comb ConsCall ("RedBlackTree","Black") [],Var 27,Var 28,Comb FuncCall ("RedBlackTree","reviseRight") [Comb ConsCall ("RedBlackTree","Tree") [Comb ConsCall ("RedBlackTree","Red") [],Var 26,Var 29,Var 30]]])),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])])]))),Func ("RedBlackTree","reviseRight._#selFP69#col") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 326]) (TCons ("RedBlackTree","Color") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 4) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Case  Flex (Var 8) [Branch (Pattern ("RedBlackTree","Tree") [10,11,12,13]) (Var 2)])])])),Func ("RedBlackTree","reviseRight._#selFP70#x") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 326]) (TVar 326)) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 4) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Case  Flex (Var 8) [Branch (Pattern ("RedBlackTree","Tree") [10,11,12,13]) (Var 3)])])])),Func ("RedBlackTree","reviseRight._#selFP71#y") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 326]) (TVar 326)) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 4) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Case  Flex (Var 8) [Branch (Pattern ("RedBlackTree","Tree") [10,11,12,13]) (Var 7)])])])),Func ("RedBlackTree","reviseRight._#selFP72#z") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 326]) (TVar 326)) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 4) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Case  Flex (Var 8) [Branch (Pattern ("RedBlackTree","Tree") [10,11,12,13]) (Var 11)])])])),Func ("RedBlackTree","reviseRight._#selFP73#d") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 326]) (TCons ("RedBlackTree","Tree") [TVar 326])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 4) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Case  Flex (Var 8) [Branch (Pattern ("RedBlackTree","Tree") [10,11,12,13]) (Var 12)])])])),Func ("RedBlackTree","reviseRight._#selFP74#c") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 326]) (TCons ("RedBlackTree","Tree") [TVar 326])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 4) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Case  Flex (Var 8) [Branch (Pattern ("RedBlackTree","Tree") [10,11,12,13]) (Var 13)])])])),Func ("RedBlackTree","reviseRight._#selFP75#b") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 326]) (TCons ("RedBlackTree","Tree") [TVar 326])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 4) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Case  Flex (Var 8) [Branch (Pattern ("RedBlackTree","Tree") [10,11,12,13]) (Var 9)])])])),Func ("RedBlackTree","reviseRight._#selFP76#a") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 326]) (TCons ("RedBlackTree","Tree") [TVar 326])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 4) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Case  Flex (Var 8) [Branch (Pattern ("RedBlackTree","Tree") [10,11,12,13]) (Var 5)])])])),Func ("RedBlackTree","reviseRight._#selFP78#col") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 326]) (TCons ("RedBlackTree","Color") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 4) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Case  Flex (Var 9) [Branch (Pattern ("RedBlackTree","Tree") [10,11,12,13]) (Var 2)])])])),Func ("RedBlackTree","reviseRight._#selFP79#x") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 326]) (TVar 326)) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 4) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Case  Flex (Var 9) [Branch (Pattern ("RedBlackTree","Tree") [10,11,12,13]) (Var 3)])])])),Func ("RedBlackTree","reviseRight._#selFP80#z") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 326]) (TVar 326)) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 4) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Case  Flex (Var 9) [Branch (Pattern ("RedBlackTree","Tree") [10,11,12,13]) (Var 7)])])])),Func ("RedBlackTree","reviseRight._#selFP81#d") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 326]) (TCons ("RedBlackTree","Tree") [TVar 326])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 4) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Case  Flex (Var 9) [Branch (Pattern ("RedBlackTree","Tree") [10,11,12,13]) (Var 8)])])])),Func ("RedBlackTree","reviseRight._#selFP82#y") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 326]) (TVar 326)) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 4) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Case  Flex (Var 9) [Branch (Pattern ("RedBlackTree","Tree") [10,11,12,13]) (Var 11)])])])),Func ("RedBlackTree","reviseRight._#selFP83#c") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 326]) (TCons ("RedBlackTree","Tree") [TVar 326])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 4) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Case  Flex (Var 9) [Branch (Pattern ("RedBlackTree","Tree") [10,11,12,13]) (Var 12)])])])),Func ("RedBlackTree","reviseRight._#selFP84#b") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 326]) (TCons ("RedBlackTree","Tree") [TVar 326])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 4) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Case  Flex (Var 9) [Branch (Pattern ("RedBlackTree","Tree") [10,11,12,13]) (Var 13)])])])),Func ("RedBlackTree","reviseRight._#selFP85#a") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 326]) (TCons ("RedBlackTree","Tree") [TVar 326])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 4) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Case  Flex (Var 9) [Branch (Pattern ("RedBlackTree","Tree") [10,11,12,13]) (Var 5)])])])),Func ("RedBlackTree","reviseRight._#selFP87#col") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 326]) (TCons ("RedBlackTree","Color") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 4) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Var 2)])])),Func ("RedBlackTree","reviseRight._#selFP88#x") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 326]) (TVar 326)) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 4) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Var 3)])])),Func ("RedBlackTree","reviseRight._#selFP89#y") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 326]) (TVar 326)) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 4) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Var 7)])])),Func ("RedBlackTree","reviseRight._#selFP90#c") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 326]) (TCons ("RedBlackTree","Tree") [TVar 326])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 4) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Var 8)])])),Func ("RedBlackTree","reviseRight._#selFP91#b") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 326]) (TCons ("RedBlackTree","Tree") [TVar 326])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 4) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Var 9)])])),Func ("RedBlackTree","reviseRight._#selFP92#a") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 326]) (TCons ("RedBlackTree","Tree") [TVar 326])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 4) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Var 5)])])),Func ("RedBlackTree","reviseRight._#selFP94#x") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 326]) (TVar 326)) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 4) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Var 3)])])),Func ("RedBlackTree","reviseRight._#selFP95#y") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 326]) (TVar 326)) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 4) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Var 7)])])),Func ("RedBlackTree","reviseRight._#selFP96#c") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 326]) (TCons ("RedBlackTree","Tree") [TVar 326])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 4) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Var 8)])])),Func ("RedBlackTree","reviseRight._#selFP97#b") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 326]) (TCons ("RedBlackTree","Tree") [TVar 326])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 4) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Var 9)])])),Func ("RedBlackTree","reviseRight._#selFP98#a") 1 Private (FuncType (TCons ("RedBlackTree","Tree") [TVar 326]) (TCons ("RedBlackTree","Tree") [TVar 326])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("RedBlackTree","Tree") [2,3,4,5]) (Case  Flex (Var 4) [Branch (Pattern ("RedBlackTree","Tree") [6,7,8,9]) (Var 5)])]))] []