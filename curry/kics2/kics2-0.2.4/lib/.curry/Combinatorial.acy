CurryProg "Combinatorial"
 ["Prelude"]
 []
 [CFunc ("Combinatorial","permute") 1 Public (CFuncType (CTCons ("Prelude","[]") [CTVar (0,"a")]) (CTCons ("Prelude","[]") [CTVar (0,"a")])) (CRules CFlex [CRule [CPComb ("Prelude","[]") []] [(CSymbol ("Prelude","success"),CSymbol ("Prelude","[]"))] [],CRule [CPComb ("Prelude",":") [CPVar (0,"x"),CPVar (1,"xs")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Combinatorial","ndinsert")) (CApply (CSymbol ("Combinatorial","permute")) (CVar (1,"xs"))))] [CLocalFunc (CFunc ("Combinatorial","ndinsert") 1 Private (CFuncType (CTCons ("Prelude","[]") [CTVar (1,"_11")]) (CTCons ("Prelude","[]") [CTVar (1,"_11")])) (CRules CFlex [CRule [CPComb ("Prelude","[]") []] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",":")) (CVar (0,"x"))) (CSymbol ("Prelude","[]")))] [],CRule [CPComb ("Prelude",":") [CPVar (2,"y"),CPVar (3,"ys")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","?")) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (0,"x"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (2,"y"))) (CVar (3,"ys"))))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (2,"y"))) (CApply (CSymbol ("Combinatorial","ndinsert")) (CVar (3,"ys")))))] []]))]]),
  CFunc ("Combinatorial","subset") 1 Public (CFuncType (CTCons ("Prelude","[]") [CTVar (0,"a")]) (CTCons ("Prelude","[]") [CTVar (0,"a")])) (CRules CFlex [CRule [CPComb ("Prelude","[]") []] [(CSymbol ("Prelude","success"),CSymbol ("Prelude","[]"))] [],CRule [CPComb ("Prelude",":") [CPVar (0,"x"),CPVar (1,"xs")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",":")) (CVar (0,"x"))) (CApply (CSymbol ("Combinatorial","subset")) (CVar (1,"xs"))))] [],CRule [CPComb ("Prelude",":") [CPVar (2,"_"),CPVar (3,"xs")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Combinatorial","subset")) (CVar (3,"xs")))] []]),
  CFunc ("Combinatorial","allSubsets") 1 Private (CFuncType (CTCons ("Prelude","[]") [CTVar (0,"a")]) (CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTVar (0,"a")]])) (CRules CFlex [CRule [CPVar (0,"list")] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Prelude","findall")) (CLambda [CPVar (1,"x0")] (CApply (CApply (CSymbol ("Prelude","=:=")) (CApply (CSymbol ("Combinatorial","subset")) (CVar (0,"list")))) (CVar (1,"x0")))))] []]),
  CFunc ("Combinatorial","splitSet") 1 Public (CFuncType (CTCons ("Prelude","[]") [CTVar (0,"a")]) (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTVar (0,"a")],CTCons ("Prelude","[]") [CTVar (0,"a")]])) (CRules CFlex [CRule [CPComb ("Prelude","[]") []] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","(,)")) (CSymbol ("Prelude","[]"))) (CSymbol ("Prelude","[]")))] [],CRule [CPComb ("Prelude",":") [CPVar (0,"x"),CPVar (1,"xs")]] [(CSymbol ("Prelude","success"),CLetDecl [CLocalPat (CPComb ("Prelude","(,)") [CPVar (2,"u"),CPVar (3,"v")]) (CApply (CSymbol ("Combinatorial","splitSet")) (CVar (1,"xs"))) []] (CApply (CApply (CSymbol ("Prelude","?")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (0,"x"))) (CVar (2,"u")))) (CVar (3,"v")))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CVar (2,"u"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (0,"x"))) (CVar (3,"v"))))))] []]),
  CFunc ("Combinatorial","sizedSubset") 2 Public (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Prelude","[]") [CTVar (0,"a")]) (CTCons ("Prelude","[]") [CTVar (0,"a")]))) (CRules CFlex [CRule [CPVar (0,"c"),CPVar (1,"l")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (0,"c"))) (CLit (CIntc 0)))) (CSymbol ("Prelude","[]"))) (CApply (CSymbol ("Combinatorial","aux")) (CVar (1,"l"))))] [CLocalFunc (CFunc ("Combinatorial","aux") 1 Private (CFuncType (CTCons ("Prelude","[]") [CTVar (0,"a")]) (CTCons ("Prelude","[]") [CTVar (0,"a")])) (CRules CFlex [CRule [CPComb ("Prelude",":") [CPVar (2,"x"),CPVar (3,"xs")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","?")) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (2,"x"))) (CApply (CApply (CSymbol ("Combinatorial","sizedSubset")) (CApply (CApply (CSymbol ("Prelude","-")) (CVar (0,"c"))) (CLit (CIntc 1)))) (CVar (3,"xs"))))) (CApply (CApply (CSymbol ("Combinatorial","sizedSubset")) (CVar (0,"c"))) (CVar (3,"xs"))))] []]))]]),
  CFunc ("Combinatorial","partition") 1 Public (CFuncType (CTCons ("Prelude","[]") [CTVar (0,"a")]) (CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTVar (0,"a")]])) (CRules CFlex [CRule [CPComb ("Prelude","[]") []] [(CSymbol ("Prelude","success"),CSymbol ("Prelude","[]"))] [],CRule [CPComb ("Prelude",":") [CPVar (0,"x"),CPVar (1,"xs")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Combinatorial","insert")) (CVar (0,"x"))) (CApply (CSymbol ("Combinatorial","partition")) (CVar (1,"xs"))))] [CLocalFunc (CFunc ("Combinatorial","insert") 2 Private (CFuncType (CTVar (0,"a")) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTVar (0,"a")]]) (CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTVar (0,"a")]]))) (CRules CFlex [CRule [CPVar (2,"e"),CPComb ("Prelude","[]") []] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (2,"e"))) (CSymbol ("Prelude","[]")))) (CSymbol ("Prelude","[]")))] [],CRule [CPVar (3,"e"),CPComb ("Prelude",":") [CPVar (4,"y"),CPVar (5,"ys")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","?")) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (3,"e"))) (CVar (4,"y")))) (CVar (5,"ys")))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (4,"y"))) (CApply (CApply (CSymbol ("Combinatorial","insert")) (CVar (3,"e"))) (CVar (5,"ys")))))] []]))]])]
 []
