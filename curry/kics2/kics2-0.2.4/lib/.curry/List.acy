CurryProg "List"
 ["Prelude","Maybe"]
 []
 [CFunc ("List","elemIndex") 1 Public (CFuncType (CTVar (0,"a")) (CFuncType (CTCons ("Prelude","[]") [CTVar (0,"a")]) (CTCons ("Prelude","Maybe") [CTCons ("Prelude","Int") []]))) (CRules CFlex [CRule [CPVar (0,"x")] [(CSymbol ("Prelude","success"),CApply (CSymbol ("List","findIndex")) (CLambda [CPVar (1,"x0")] (CApply (CApply (CSymbol ("Prelude","==")) (CVar (0,"x"))) (CVar (1,"x0")))))] []]),
  CFunc ("List","elemIndices") 1 Public (CFuncType (CTVar (0,"a")) (CFuncType (CTCons ("Prelude","[]") [CTVar (0,"a")]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Int") []]))) (CRules CFlex [CRule [CPVar (0,"x")] [(CSymbol ("Prelude","success"),CApply (CSymbol ("List","findIndices")) (CLambda [CPVar (1,"x0")] (CApply (CApply (CSymbol ("Prelude","==")) (CVar (0,"x"))) (CVar (1,"x0")))))] []]),
  CFunc ("List","find") 1 Public (CFuncType (CFuncType (CTVar (0,"a")) (CTCons ("Prelude","Bool") [])) (CFuncType (CTCons ("Prelude","[]") [CTVar (0,"a")]) (CTCons ("Prelude","Maybe") [CTVar (0,"a")]))) (CRules CFlex [CRule [CPVar (0,"p")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Maybe","listToMaybe"))) (CApply (CSymbol ("Prelude","filter")) (CVar (0,"p"))))] []]),
  CFunc ("List","findIndex") 1 Public (CFuncType (CFuncType (CTVar (0,"a")) (CTCons ("Prelude","Bool") [])) (CFuncType (CTCons ("Prelude","[]") [CTVar (0,"a")]) (CTCons ("Prelude","Maybe") [CTCons ("Prelude","Int") []]))) (CRules CFlex [CRule [CPVar (0,"p")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Maybe","listToMaybe"))) (CApply (CSymbol ("List","findIndices")) (CVar (0,"p"))))] []]),
  CFunc ("List","findIndices") 2 Public (CFuncType (CFuncType (CTVar (0,"a")) (CTCons ("Prelude","Bool") [])) (CFuncType (CTCons ("Prelude","[]") [CTVar (0,"a")]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Int") []]))) (CRules CFlex [CRule [CPVar (0,"p"),CPVar (1,"xs")] [(CSymbol ("Prelude","success"),CListComp (CVar (3,"i")) [CSPat (CPComb ("Prelude","(,)") [CPVar (2,"x"),CPVar (3,"i")]) (CApply (CApply (CSymbol ("Prelude","zip")) (CVar (1,"xs"))) (CApply (CSymbol ("Prelude","enumFrom")) (CLit (CIntc 0)))),CSExpr (CApply (CVar (0,"p")) (CVar (2,"x")))])] []]),
  CFunc ("List","nub") 1 Public (CFuncType (CTCons ("Prelude","[]") [CTVar (0,"a")]) (CTCons ("Prelude","[]") [CTVar (0,"a")])) (CRules CFlex [CRule [CPVar (0,"xs")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("List","nubBy")) (CSymbol ("Prelude","=="))) (CVar (0,"xs")))] []]),
  CFunc ("List","nubBy") 2 Public (CFuncType (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (0,"a")) (CTCons ("Prelude","Bool") []))) (CFuncType (CTCons ("Prelude","[]") [CTVar (0,"a")]) (CTCons ("Prelude","[]") [CTVar (0,"a")]))) (CRules CFlex [CRule [CPVar (0,"_"),CPComb ("Prelude","[]") []] [(CSymbol ("Prelude","success"),CSymbol ("Prelude","[]"))] [],CRule [CPVar (1,"eq"),CPComb ("Prelude",":") [CPVar (2,"x"),CPVar (3,"xs")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",":")) (CVar (2,"x"))) (CApply (CApply (CSymbol ("List","nubBy")) (CVar (1,"eq"))) (CApply (CApply (CSymbol ("Prelude","filter")) (CLambda [CPVar (4,"y")] (CApply (CSymbol ("Prelude","not")) (CApply (CApply (CVar (1,"eq")) (CVar (2,"x"))) (CVar (4,"y")))))) (CVar (3,"xs")))))] []]),
  CFunc ("List","delete") 0 Public (CFuncType (CTVar (0,"a")) (CFuncType (CTCons ("Prelude","[]") [CTVar (0,"a")]) (CTCons ("Prelude","[]") [CTVar (0,"a")]))) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("List","deleteBy")) (CSymbol ("Prelude","==")))] []]),
  CFunc ("List","deleteBy") 3 Public (CFuncType (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (0,"a")) (CTCons ("Prelude","Bool") []))) (CFuncType (CTVar (0,"a")) (CFuncType (CTCons ("Prelude","[]") [CTVar (0,"a")]) (CTCons ("Prelude","[]") [CTVar (0,"a")])))) (CRules CFlex [CRule [CPVar (0,"_"),CPVar (1,"_"),CPComb ("Prelude","[]") []] [(CSymbol ("Prelude","success"),CSymbol ("Prelude","[]"))] [],CRule [CPVar (2,"eq"),CPVar (3,"x"),CPComb ("Prelude",":") [CPVar (4,"y"),CPVar (5,"ys")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CVar (2,"eq")) (CVar (3,"x"))) (CVar (4,"y")))) (CVar (5,"ys"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (4,"y"))) (CApply (CApply (CApply (CSymbol ("List","deleteBy")) (CVar (2,"eq"))) (CVar (3,"x"))) (CVar (5,"ys")))))] []]),
  CFunc ("List","\\\\") 2 Public (CFuncType (CTCons ("Prelude","[]") [CTVar (0,"a")]) (CFuncType (CTCons ("Prelude","[]") [CTVar (0,"a")]) (CTCons ("Prelude","[]") [CTVar (0,"a")]))) (CRules CFlex [CRule [CPVar (0,"xs"),CPVar (1,"ys")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","foldl")) (CApply (CSymbol ("Prelude","flip")) (CSymbol ("List","delete")))) (CVar (0,"xs"))) (CVar (1,"ys")))] []]),
  CFunc ("List","union") 2 Public (CFuncType (CTCons ("Prelude","[]") [CTVar (0,"a")]) (CFuncType (CTCons ("Prelude","[]") [CTVar (0,"a")]) (CTCons ("Prelude","[]") [CTVar (0,"a")]))) (CRules CFlex [CRule [CPComb ("Prelude","[]") [],CPVar (0,"ys")] [(CSymbol ("Prelude","success"),CVar (0,"ys"))] [],CRule [CPComb ("Prelude",":") [CPVar (1,"x"),CPVar (2,"xs")],CPVar (3,"ys")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","elem")) (CVar (1,"x"))) (CVar (3,"ys")))) (CApply (CApply (CSymbol ("List","union")) (CVar (2,"xs"))) (CVar (3,"ys")))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (1,"x"))) (CApply (CApply (CSymbol ("List","union")) (CVar (2,"xs"))) (CVar (3,"ys")))))] []]),
  CFunc ("List","intersect") 2 Public (CFuncType (CTCons ("Prelude","[]") [CTVar (0,"a")]) (CFuncType (CTCons ("Prelude","[]") [CTVar (0,"a")]) (CTCons ("Prelude","[]") [CTVar (0,"a")]))) (CRules CFlex [CRule [CPComb ("Prelude","[]") [],CPVar (0,"_")] [(CSymbol ("Prelude","success"),CSymbol ("Prelude","[]"))] [],CRule [CPComb ("Prelude",":") [CPVar (1,"x"),CPVar (2,"xs")],CPVar (3,"ys")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","elem")) (CVar (1,"x"))) (CVar (3,"ys")))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (1,"x"))) (CApply (CApply (CSymbol ("List","intersect")) (CVar (2,"xs"))) (CVar (3,"ys"))))) (CApply (CApply (CSymbol ("List","intersect")) (CVar (2,"xs"))) (CVar (3,"ys"))))] []]),
  CFunc ("List","intersperse") 2 Public (CFuncType (CTVar (0,"a")) (CFuncType (CTCons ("Prelude","[]") [CTVar (0,"a")]) (CTCons ("Prelude","[]") [CTVar (0,"a")]))) (CRules CFlex [CRule [CPVar (0,"_"),CPComb ("Prelude","[]") []] [(CSymbol ("Prelude","success"),CSymbol ("Prelude","[]"))] [],CRule [CPVar (1,"_"),CPComb ("Prelude",":") [CPVar (2,"x"),CPComb ("Prelude","[]") []]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",":")) (CVar (2,"x"))) (CSymbol ("Prelude","[]")))] [],CRule [CPVar (3,"sep"),CPComb ("Prelude",":") [CPVar (4,"x1"),CPComb ("Prelude",":") [CPVar (5,"x2"),CPVar (6,"xs")]]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",":")) (CVar (4,"x1"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (3,"sep"))) (CApply (CApply (CSymbol ("List","intersperse")) (CVar (3,"sep"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (5,"x2"))) (CVar (6,"xs"))))))] []]),
  CFunc ("List","intercalate") 2 Public (CFuncType (CTCons ("Prelude","[]") [CTVar (0,"a")]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTVar (0,"a")]]) (CTCons ("Prelude","[]") [CTVar (0,"a")]))) (CRules CFlex [CRule [CPVar (0,"xs"),CPVar (1,"xss")] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Prelude","concat")) (CApply (CApply (CSymbol ("List","intersperse")) (CVar (0,"xs"))) (CVar (1,"xss"))))] []]),
  CFunc ("List","transpose") 1 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTVar (0,"a")]]) (CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTVar (0,"a")]])) (CRules CFlex [CRule [CPComb ("Prelude","[]") []] [(CSymbol ("Prelude","success"),CSymbol ("Prelude","[]"))] [],CRule [CPComb ("Prelude",":") [CPComb ("Prelude","[]") [],CPVar (0,"xss")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("List","transpose")) (CVar (0,"xss")))] [],CRule [CPComb ("Prelude",":") [CPComb ("Prelude",":") [CPVar (1,"x"),CPVar (2,"xs")],CPVar (3,"xss")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (1,"x"))) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("Prelude","head"))) (CVar (3,"xss"))))) (CApply (CSymbol ("List","transpose")) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (2,"xs"))) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("Prelude","tail"))) (CVar (3,"xss"))))))] []]),
  CFunc ("List","permutations") 1 Public (CFuncType (CTCons ("Prelude","[]") [CTVar (0,"a")]) (CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTVar (0,"a")]])) (CRules CFlex [CRule [CPVar (0,"xs0")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",":")) (CVar (0,"xs0"))) (CApply (CApply (CSymbol ("List","perms")) (CVar (0,"xs0"))) (CSymbol ("Prelude","[]"))))] [CLocalFunc (CFunc ("List","perms") 2 Private (CFuncType (CTCons ("Prelude","[]") [CTVar (0,"a")]) (CFuncType (CTCons ("Prelude","[]") [CTVar (0,"a")]) (CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTVar (0,"a")]]))) (CRules CFlex [CRule [CPComb ("Prelude","[]") [],CPVar (1,"_")] [(CSymbol ("Prelude","success"),CSymbol ("Prelude","[]"))] [],CRule [CPComb ("Prelude",":") [CPVar (2,"t"),CPVar (3,"ts")],CPVar (4,"is")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","foldr")) (CSymbol ("List","interleave"))) (CApply (CApply (CSymbol ("List","perms")) (CVar (3,"ts"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (2,"t"))) (CVar (4,"is"))))) (CApply (CSymbol ("List","permutations")) (CVar (4,"is"))))] [CLocalFunc (CFunc ("List","interleave") 2 Private (CFuncType (CTCons ("Prelude","[]") [CTVar (1,"_161")]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTVar (1,"_161")]]) (CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTVar (1,"_161")]]))) (CRules CFlex [CRule [CPVar (5,"xs"),CPVar (6,"r")] [(CSymbol ("Prelude","success"),CLetDecl [CLocalPat (CPComb ("Prelude","(,)") [CPVar (7,"_"),CPVar (8,"zs")]) (CApply (CApply (CApply (CSymbol ("List","interleave'")) (CSymbol ("Prelude","id"))) (CVar (5,"xs"))) (CVar (6,"r"))) []] (CVar (8,"zs")))] []])),CLocalFunc (CFunc ("List","interleave'") 3 Private (CFuncType (CFuncType (CTCons ("Prelude","[]") [CTVar (1,"_161")]) (CTVar (0,"a"))) (CFuncType (CTCons ("Prelude","[]") [CTVar (1,"_161")]) (CFuncType (CTCons ("Prelude","[]") [CTVar (0,"a")]) (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTVar (1,"_161")],CTCons ("Prelude","[]") [CTVar (0,"a")]])))) (CRules CFlex [CRule [CPVar (5,"_"),CPComb ("Prelude","[]") [],CPVar (6,"r")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","(,)")) (CVar (3,"ts"))) (CVar (6,"r")))] [],CRule [CPVar (7,"f"),CPComb ("Prelude",":") [CPVar (8,"y"),CPVar (9,"ys")],CPVar (10,"r")] [(CSymbol ("Prelude","success"),CLetDecl [CLocalPat (CPComb ("Prelude","(,)") [CPVar (11,"us"),CPVar (12,"zs")]) (CApply (CApply (CApply (CSymbol ("List","interleave'")) (CApply (CApply (CSymbol ("Prelude",".")) (CVar (7,"f"))) (CLambda [CPVar (13,"x0")] (CApply (CApply (CSymbol ("Prelude",":")) (CVar (8,"y"))) (CVar (13,"x0")))))) (CVar (9,"ys"))) (CVar (10,"r"))) []] (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (8,"y"))) (CVar (11,"us")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CVar (7,"f")) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (2,"t"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (8,"y"))) (CVar (11,"us")))))) (CVar (12,"zs")))))] []]))]]))]]),
  CFunc ("List","partition") 2 Public (CFuncType (CFuncType (CTVar (0,"a")) (CTCons ("Prelude","Bool") [])) (CFuncType (CTCons ("Prelude","[]") [CTVar (0,"a")]) (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTVar (0,"a")],CTCons ("Prelude","[]") [CTVar (0,"a")]]))) (CRules CFlex [CRule [CPVar (0,"p"),CPVar (1,"xs")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","foldr")) (CSymbol ("List","select"))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CSymbol ("Prelude","[]"))) (CSymbol ("Prelude","[]")))) (CVar (1,"xs")))] [CLocalFunc (CFunc ("List","select") 2 Private (CFuncType (CTVar (1,"_211")) (CFuncType (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTVar (1,"_211")],CTCons ("Prelude","[]") [CTVar (1,"_211")]]) (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTVar (1,"_211")],CTCons ("Prelude","[]") [CTVar (1,"_211")]]))) (CRules CFlex [CRule [CPVar (2,"x"),CPComb ("Prelude","(,)") [CPVar (3,"ts"),CPVar (4,"fs")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CVar (0,"p")) (CVar (2,"x")))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (2,"x"))) (CVar (3,"ts")))) (CVar (4,"fs")))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CVar (3,"ts"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (2,"x"))) (CVar (4,"fs")))))] []]))]]),
  CFunc ("List","group") 0 Public (CFuncType (CTCons ("Prelude","[]") [CTVar (0,"a")]) (CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTVar (0,"a")]])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("List","groupBy")) (CSymbol ("Prelude","==")))] []]),
  CFunc ("List","groupBy") 2 Public (CFuncType (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (0,"a")) (CTCons ("Prelude","Bool") []))) (CFuncType (CTCons ("Prelude","[]") [CTVar (0,"a")]) (CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTVar (0,"a")]]))) (CRules CFlex [CRule [CPVar (0,"_"),CPComb ("Prelude","[]") []] [(CSymbol ("Prelude","success"),CSymbol ("Prelude","[]"))] [],CRule [CPVar (1,"eq"),CPComb ("Prelude",":") [CPVar (2,"x"),CPVar (3,"xs")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (2,"x"))) (CVar (4,"ys")))) (CApply (CApply (CSymbol ("List","groupBy")) (CVar (1,"eq"))) (CVar (5,"zs"))))] [CLocalPat (CPComb ("Prelude","(,)") [CPVar (4,"ys"),CPVar (5,"zs")]) (CApply (CApply (CSymbol ("Prelude","span")) (CApply (CVar (1,"eq")) (CVar (2,"x")))) (CVar (3,"xs"))) []]]),
  CFunc ("List","splitOn") 2 Public (CFuncType (CTCons ("Prelude","[]") [CTVar (0,"a")]) (CFuncType (CTCons ("Prelude","[]") [CTVar (0,"a")]) (CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTVar (0,"a")]]))) (CRules CFlex [CRule [CPComb ("Prelude","[]") [],CPVar (0,"_")] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Prelude","error")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'O'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'w'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'h'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'y'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CSymbol ("Prelude","[]")))))))))))))))))))))))))))))))))))))))] [],CRule [CPComb ("Prelude",":") [CPVar (1,"x"),CPComb ("Prelude","[]") []],CPVar (2,"xs")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("List","split")) (CLambda [CPVar (3,"x0")] (CApply (CApply (CSymbol ("Prelude","==")) (CVar (1,"x"))) (CVar (3,"x0"))))) (CVar (2,"xs")))] [],CRule [CPAs (7,"sep") (CPComb ("Prelude",":") [CPVar (4,"_"),CPComb ("Prelude",":") [CPVar (5,"_"),CPVar (6,"_")]]),CPVar (8,"xs")] [(CSymbol ("Prelude","success"),CApply (CSymbol ("List","go")) (CVar (8,"xs")))] [CLocalFunc (CFunc ("List","go") 1 Private (CFuncType (CTCons ("Prelude","[]") [CTVar (1,"_297")]) (CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTVar (1,"_297")]])) (CRules CFlex [CRule [CPComb ("Prelude","[]") []] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",":")) (CSymbol ("Prelude","[]"))) (CSymbol ("Prelude","[]")))] [],CRule [CPAs (12,"l") (CPComb ("Prelude",":") [CPVar (10,"y"),CPVar (11,"ys")])] [(CApply (CApply (CSymbol ("List","isPrefixOf")) (CVar (7,"sep"))) (CVar (12,"l")),CApply (CApply (CSymbol ("Prelude",":")) (CSymbol ("Prelude","[]"))) (CApply (CSymbol ("List","go")) (CApply (CApply (CSymbol ("Prelude","drop")) (CVar (9,"len"))) (CVar (12,"l"))))),(CSymbol ("Prelude","otherwise"),CLetDecl [CLocalPat (CPComb ("Prelude",":") [CPVar (13,"zs"),CPVar (14,"zss")]) (CApply (CSymbol ("List","go")) (CVar (11,"ys"))) []] (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (10,"y"))) (CVar (13,"zs")))) (CVar (14,"zss"))))] []])),CLocalPat (CPVar (9,"len")) (CApply (CSymbol ("Prelude","length")) (CVar (7,"sep"))) []]]),
  CFunc ("List","split") 2 Public (CFuncType (CFuncType (CTVar (0,"a")) (CTCons ("Prelude","Bool") [])) (CFuncType (CTCons ("Prelude","[]") [CTVar (0,"a")]) (CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTVar (0,"a")]]))) (CRules CFlex [CRule [CPVar (0,"_"),CPComb ("Prelude","[]") []] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",":")) (CSymbol ("Prelude","[]"))) (CSymbol ("Prelude","[]")))] [],CRule [CPVar (1,"p"),CPComb ("Prelude",":") [CPVar (2,"x"),CPVar (3,"xs")]] [(CApply (CVar (1,"p")) (CVar (2,"x")),CApply (CApply (CSymbol ("Prelude",":")) (CSymbol ("Prelude","[]"))) (CApply (CApply (CSymbol ("List","split")) (CVar (1,"p"))) (CVar (3,"xs")))),(CSymbol ("Prelude","otherwise"),CLetDecl [CLocalPat (CPComb ("Prelude",":") [CPVar (4,"ys"),CPVar (5,"yss")]) (CApply (CApply (CSymbol ("List","split")) (CVar (1,"p"))) (CVar (3,"xs"))) []] (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (2,"x"))) (CVar (4,"ys")))) (CVar (5,"yss"))))] []]),
  CFunc ("List","inits") 1 Public (CFuncType (CTCons ("Prelude","[]") [CTVar (0,"a")]) (CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTVar (0,"a")]])) (CRules CFlex [CRule [CPComb ("Prelude","[]") []] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",":")) (CSymbol ("Prelude","[]"))) (CSymbol ("Prelude","[]")))] [],CRule [CPComb ("Prelude",":") [CPVar (0,"x"),CPVar (1,"xs")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CSymbol ("Prelude","[]"))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude","map")) (CLambda [CPVar (2,"x0")] (CApply (CApply (CSymbol ("Prelude",":")) (CVar (0,"x"))) (CVar (2,"x0"))))) (CApply (CSymbol ("List","inits")) (CVar (1,"xs")))))] []]),
  CFunc ("List","tails") 1 Public (CFuncType (CTCons ("Prelude","[]") [CTVar (0,"a")]) (CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTVar (0,"a")]])) (CRules CFlex [CRule [CPComb ("Prelude","[]") []] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",":")) (CSymbol ("Prelude","[]"))) (CSymbol ("Prelude","[]")))] [],CRule [CPAs (2,"xxs") (CPComb ("Prelude",":") [CPVar (0,"_"),CPVar (1,"xs")])] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",":")) (CVar (2,"xxs"))) (CApply (CSymbol ("List","tails")) (CVar (1,"xs"))))] []]),
  CFunc ("List","replace") 3 Public (CFuncType (CTVar (0,"a")) (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Prelude","[]") [CTVar (0,"a")]) (CTCons ("Prelude","[]") [CTVar (0,"a")])))) (CRules CFlex [CRule [CPVar (0,"_"),CPVar (1,"_"),CPComb ("Prelude","[]") []] [(CSymbol ("Prelude","success"),CSymbol ("Prelude","[]"))] [],CRule [CPVar (2,"x"),CPVar (3,"p"),CPComb ("Prelude",":") [CPVar (4,"y"),CPVar (5,"ys")]] [(CApply (CApply (CSymbol ("Prelude","==")) (CVar (3,"p"))) (CLit (CIntc 0)),CApply (CApply (CSymbol ("Prelude",":")) (CVar (2,"x"))) (CVar (5,"ys"))),(CSymbol ("Prelude","otherwise"),CApply (CApply (CSymbol ("Prelude",":")) (CVar (4,"y"))) (CApply (CApply (CApply (CSymbol ("List","replace")) (CVar (2,"x"))) (CApply (CApply (CSymbol ("Prelude","-")) (CVar (3,"p"))) (CLit (CIntc 1)))) (CVar (5,"ys"))))] []]),
  CFunc ("List","isPrefixOf") 2 Public (CFuncType (CTCons ("Prelude","[]") [CTVar (0,"a")]) (CFuncType (CTCons ("Prelude","[]") [CTVar (0,"a")]) (CTCons ("Prelude","Bool") []))) (CRules CFlex [CRule [CPComb ("Prelude","[]") [],CPVar (0,"_")] [(CSymbol ("Prelude","success"),CSymbol ("Prelude","True"))] [],CRule [CPComb ("Prelude",":") [CPVar (1,"_"),CPVar (2,"_")],CPComb ("Prelude","[]") []] [(CSymbol ("Prelude","success"),CSymbol ("Prelude","False"))] [],CRule [CPComb ("Prelude",":") [CPVar (3,"x"),CPVar (4,"xs")],CPComb ("Prelude",":") [CPVar (5,"y"),CPVar (6,"ys")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","&&")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (3,"x"))) (CVar (5,"y")))) (CApply (CApply (CSymbol ("List","isPrefixOf")) (CVar (4,"xs"))) (CVar (6,"ys"))))] []]),
  CFunc ("List","isSuffixOf") 2 Public (CFuncType (CTCons ("Prelude","[]") [CTVar (0,"a")]) (CFuncType (CTCons ("Prelude","[]") [CTVar (0,"a")]) (CTCons ("Prelude","Bool") []))) (CRules CFlex [CRule [CPVar (0,"xs"),CPVar (1,"ys")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("List","isPrefixOf")) (CApply (CSymbol ("Prelude","reverse")) (CVar (0,"xs")))) (CApply (CSymbol ("Prelude","reverse")) (CVar (1,"ys"))))] []]),
  CFunc ("List","isInfixOf") 2 Public (CFuncType (CTCons ("Prelude","[]") [CTVar (0,"a")]) (CFuncType (CTCons ("Prelude","[]") [CTVar (0,"a")]) (CTCons ("Prelude","Bool") []))) (CRules CFlex [CRule [CPVar (0,"xs"),CPVar (1,"ys")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","any")) (CApply (CSymbol ("List","isPrefixOf")) (CVar (0,"xs")))) (CApply (CSymbol ("List","tails")) (CVar (1,"ys"))))] []]),
  CFunc ("List","sortBy") 1 Public (CFuncType (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (0,"a")) (CTCons ("Prelude","Bool") []))) (CFuncType (CTCons ("Prelude","[]") [CTVar (0,"a")]) (CTCons ("Prelude","[]") [CTVar (0,"a")]))) (CRules CFlex [CRule [CPVar (0,"le")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","foldr")) (CApply (CSymbol ("List","insertBy")) (CVar (0,"le")))) (CSymbol ("Prelude","[]")))] []]),
  CFunc ("List","insertBy") 3 Public (CFuncType (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (0,"a")) (CTCons ("Prelude","Bool") []))) (CFuncType (CTVar (0,"a")) (CFuncType (CTCons ("Prelude","[]") [CTVar (0,"a")]) (CTCons ("Prelude","[]") [CTVar (0,"a")])))) (CRules CFlex [CRule [CPVar (0,"_"),CPVar (1,"x"),CPComb ("Prelude","[]") []] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",":")) (CVar (1,"x"))) (CSymbol ("Prelude","[]")))] [],CRule [CPVar (2,"le"),CPVar (3,"x"),CPComb ("Prelude",":") [CPVar (4,"y"),CPVar (5,"ys")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CVar (2,"le")) (CVar (3,"x"))) (CVar (4,"y")))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (3,"x"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (4,"y"))) (CVar (5,"ys"))))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (4,"y"))) (CApply (CApply (CApply (CSymbol ("List","insertBy")) (CVar (2,"le"))) (CVar (3,"x"))) (CVar (5,"ys")))))] []]),
  CFunc ("List","last") 1 Public (CFuncType (CTCons ("Prelude","[]") [CTVar (0,"a")]) (CTVar (0,"a"))) (CRules CFlex [CRule [CPComb ("Prelude",":") [CPVar (0,"x"),CPComb ("Prelude","[]") []]] [(CSymbol ("Prelude","success"),CVar (0,"x"))] [],CRule [CPComb ("Prelude",":") [CPVar (1,"_"),CPComb ("Prelude",":") [CPVar (2,"x"),CPVar (3,"xs")]]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("List","last")) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (2,"x"))) (CVar (3,"xs"))))] []]),
  CFunc ("List","init") 1 Public (CFuncType (CTCons ("Prelude","[]") [CTVar (0,"a")]) (CTCons ("Prelude","[]") [CTVar (0,"a")])) (CRules CFlex [CRule [CPComb ("Prelude",":") [CPVar (0,"_"),CPComb ("Prelude","[]") []]] [(CSymbol ("Prelude","success"),CSymbol ("Prelude","[]"))] [],CRule [CPComb ("Prelude",":") [CPVar (1,"x"),CPComb ("Prelude",":") [CPVar (2,"y"),CPVar (3,"xs")]]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",":")) (CVar (1,"x"))) (CApply (CSymbol ("List","init")) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (2,"y"))) (CVar (3,"xs")))))] []]),
  CFunc ("List","sum") 1 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Int") []]) (CTCons ("Prelude","Int") [])) (CRules CFlex [CRule [CPVar (0,"ns")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","foldl")) (CSymbol ("Prelude","+"))) (CLit (CIntc 0))) (CVar (0,"ns")))] []]),
  CFunc ("List","product") 1 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Int") []]) (CTCons ("Prelude","Int") [])) (CRules CFlex [CRule [CPVar (0,"ns")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","foldl")) (CSymbol ("Prelude","*"))) (CLit (CIntc 1))) (CVar (0,"ns")))] []]),
  CFunc ("List","maximum") 1 Public (CFuncType (CTCons ("Prelude","[]") [CTVar (0,"a")]) (CTVar (0,"a"))) (CRules CFlex [CRule [CPAs (2,"xs") (CPComb ("Prelude",":") [CPVar (0,"_"),CPVar (1,"_")])] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","foldl1")) (CSymbol ("Prelude","max"))) (CVar (2,"xs")))] []]),
  CFunc ("List","minimum") 1 Public (CFuncType (CTCons ("Prelude","[]") [CTVar (0,"a")]) (CTVar (0,"a"))) (CRules CFlex [CRule [CPAs (2,"xs") (CPComb ("Prelude",":") [CPVar (0,"_"),CPVar (1,"_")])] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","foldl1")) (CSymbol ("Prelude","max"))) (CVar (2,"xs")))] []]),
  CFunc ("List","scanl") 3 Public (CFuncType (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (1,"b")) (CTVar (0,"a")))) (CFuncType (CTVar (0,"a")) (CFuncType (CTCons ("Prelude","[]") [CTVar (1,"b")]) (CTCons ("Prelude","[]") [CTVar (0,"a")])))) (CRules CFlex [CRule [CPVar (0,"f"),CPVar (1,"q"),CPVar (2,"ls")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",":")) (CVar (1,"q"))) (CCase (CVar (2,"ls")) [CBranch (CPComb ("Prelude","[]") []) (CSymbol ("Prelude","[]")),CBranch (CPComb ("Prelude",":") [CPVar (3,"x"),CPVar (4,"xs")]) (CApply (CApply (CApply (CSymbol ("List","scanl")) (CVar (0,"f"))) (CApply (CApply (CVar (0,"f")) (CVar (1,"q"))) (CVar (3,"x")))) (CVar (4,"xs")))]))] []]),
  CFunc ("List","scanl1") 2 Public (CFuncType (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (0,"a")) (CTVar (0,"a")))) (CFuncType (CTCons ("Prelude","[]") [CTVar (0,"a")]) (CTCons ("Prelude","[]") [CTVar (0,"a")]))) (CRules CFlex [CRule [CPVar (0,"_"),CPComb ("Prelude","[]") []] [(CSymbol ("Prelude","success"),CSymbol ("Prelude","[]"))] [],CRule [CPVar (1,"f"),CPComb ("Prelude",":") [CPVar (2,"x"),CPVar (3,"xs")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("List","scanl")) (CVar (1,"f"))) (CVar (2,"x"))) (CVar (3,"xs")))] []]),
  CFunc ("List","scanr") 3 Public (CFuncType (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (1,"b")) (CTVar (1,"b")))) (CFuncType (CTVar (1,"b")) (CFuncType (CTCons ("Prelude","[]") [CTVar (0,"a")]) (CTCons ("Prelude","[]") [CTVar (1,"b")])))) (CRules CFlex [CRule [CPVar (0,"_"),CPVar (1,"q0"),CPComb ("Prelude","[]") []] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",":")) (CVar (1,"q0"))) (CSymbol ("Prelude","[]")))] [],CRule [CPVar (2,"f"),CPVar (3,"q0"),CPComb ("Prelude",":") [CPVar (4,"x"),CPVar (5,"xs")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CVar (2,"f")) (CVar (4,"x"))) (CVar (7,"q")))) (CVar (6,"qs")))] [CLocalPat (CPAs (6,"qs") (CPComb ("Prelude",":") [CPVar (7,"q"),CPVar (8,"_")])) (CApply (CApply (CApply (CSymbol ("List","scanr")) (CVar (2,"f"))) (CVar (3,"q0"))) (CVar (5,"xs"))) []]]),
  CFunc ("List","scanr1") 2 Public (CFuncType (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (0,"a")) (CTVar (0,"a")))) (CFuncType (CTCons ("Prelude","[]") [CTVar (0,"a")]) (CTCons ("Prelude","[]") [CTVar (0,"a")]))) (CRules CFlex [CRule [CPVar (0,"_"),CPComb ("Prelude","[]") []] [(CSymbol ("Prelude","success"),CSymbol ("Prelude","[]"))] [],CRule [CPVar (1,"_"),CPComb ("Prelude",":") [CPVar (2,"x"),CPComb ("Prelude","[]") []]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",":")) (CVar (2,"x"))) (CSymbol ("Prelude","[]")))] [],CRule [CPVar (3,"f"),CPComb ("Prelude",":") [CPVar (4,"x"),CPAs (7,"xs") (CPComb ("Prelude",":") [CPVar (5,"_"),CPVar (6,"_")])]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CVar (3,"f")) (CVar (4,"x"))) (CVar (9,"q")))) (CVar (8,"qs")))] [CLocalPat (CPAs (8,"qs") (CPComb ("Prelude",":") [CPVar (9,"q"),CPVar (10,"_")])) (CApply (CApply (CSymbol ("List","scanr1")) (CVar (3,"f"))) (CVar (7,"xs"))) []]]),
  CFunc ("List","mapAccumL") 3 Public (CFuncType (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (1,"b")) (CTCons ("Prelude","(,)") [CTVar (0,"a"),CTVar (2,"c")]))) (CFuncType (CTVar (0,"a")) (CFuncType (CTCons ("Prelude","[]") [CTVar (1,"b")]) (CTCons ("Prelude","(,)") [CTVar (0,"a"),CTCons ("Prelude","[]") [CTVar (2,"c")]])))) (CRules CFlex [CRule [CPVar (0,"_"),CPVar (1,"s"),CPComb ("Prelude","[]") []] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","(,)")) (CVar (1,"s"))) (CSymbol ("Prelude","[]")))] [],CRule [CPVar (2,"f"),CPVar (3,"s"),CPComb ("Prelude",":") [CPVar (4,"x"),CPVar (5,"xs")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","(,)")) (CVar (8,"s''"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (7,"y"))) (CVar (9,"ys"))))] [CLocalPat (CPComb ("Prelude","(,)") [CPVar (6,"s'"),CPVar (7,"y")]) (CApply (CApply (CVar (2,"f")) (CVar (3,"s"))) (CVar (4,"x"))) [],CLocalPat (CPComb ("Prelude","(,)") [CPVar (8,"s''"),CPVar (9,"ys")]) (CApply (CApply (CApply (CSymbol ("List","mapAccumL")) (CVar (2,"f"))) (CVar (6,"s'"))) (CVar (5,"xs"))) []]]),
  CFunc ("List","mapAccumR") 3 Public (CFuncType (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (1,"b")) (CTCons ("Prelude","(,)") [CTVar (0,"a"),CTVar (2,"c")]))) (CFuncType (CTVar (0,"a")) (CFuncType (CTCons ("Prelude","[]") [CTVar (1,"b")]) (CTCons ("Prelude","(,)") [CTVar (0,"a"),CTCons ("Prelude","[]") [CTVar (2,"c")]])))) (CRules CFlex [CRule [CPVar (0,"_"),CPVar (1,"s"),CPComb ("Prelude","[]") []] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","(,)")) (CVar (1,"s"))) (CSymbol ("Prelude","[]")))] [],CRule [CPVar (2,"f"),CPVar (3,"s"),CPComb ("Prelude",":") [CPVar (4,"x"),CPVar (5,"xs")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","(,)")) (CVar (6,"s''"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (7,"y"))) (CVar (9,"ys"))))] [CLocalPat (CPComb ("Prelude","(,)") [CPVar (6,"s''"),CPVar (7,"y")]) (CApply (CApply (CVar (2,"f")) (CVar (8,"s'"))) (CVar (4,"x"))) [],CLocalPat (CPComb ("Prelude","(,)") [CPVar (8,"s'"),CPVar (9,"ys")]) (CApply (CApply (CApply (CSymbol ("List","mapAccumR")) (CVar (2,"f"))) (CVar (3,"s"))) (CVar (5,"xs"))) []]]),
  CFunc ("List","cycle") 1 Public (CFuncType (CTCons ("Prelude","[]") [CTVar (0,"a")]) (CTCons ("Prelude","[]") [CTVar (0,"a")])) (CRules CFlex [CRule [CPAs (2,"xs") (CPComb ("Prelude",":") [CPVar (0,"_"),CPVar (1,"_")])] [(CSymbol ("Prelude","success"),CVar (3,"ys"))] [CLocalPat (CPVar (3,"ys")) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (2,"xs"))) (CVar (3,"ys"))) []]]),
  CFunc ("List","unfoldr") 2 Public (CFuncType (CFuncType (CTVar (0,"a")) (CTCons ("Prelude","Maybe") [CTCons ("Prelude","(,)") [CTVar (1,"b"),CTVar (0,"a")]])) (CFuncType (CTVar (0,"a")) (CTCons ("Prelude","[]") [CTVar (1,"b")]))) (CRules CFlex [CRule [CPVar (0,"f"),CPVar (1,"b")] [(CSymbol ("Prelude","success"),CCase (CApply (CVar (0,"f")) (CVar (1,"b"))) [CBranch (CPComb ("Prelude","Just") [CPComb ("Prelude","(,)") [CPVar (2,"a"),CPVar (3,"new_b")]]) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (2,"a"))) (CApply (CApply (CSymbol ("List","unfoldr")) (CVar (0,"f"))) (CVar (3,"new_b")))),CBranch (CPComb ("Prelude","Nothing") []) (CSymbol ("Prelude","[]"))])] []])]
 [COp ("List","\\\\") CInfixOp 5]
