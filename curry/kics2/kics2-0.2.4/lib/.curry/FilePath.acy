CurryProg "FilePath"
 ["Prelude","Char","List","Maybe","System"]
 [CTypeSyn ("FilePath","FilePath") Public [] (CTCons ("Prelude","String") [])]
 [CFunc ("FilePath","pathSeparator") 0 Public (CTCons ("Prelude","Char") []) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CSymbol ("System","isWindows"))) (CLit (CCharc '\\'))) (CLit (CCharc '/')))] []]),
  CFunc ("FilePath","pathSeparators") 0 Public (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CSymbol ("System","isWindows"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\\'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '/'))) (CSymbol ("Prelude","[]"))))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '/'))) (CSymbol ("Prelude","[]"))))] []]),
  CFunc ("FilePath","isPathSeparator") 0 Public (CFuncType (CTCons ("Prelude","Char") []) (CTCons ("Prelude","Bool") [])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CLambda [CPVar (0,"x0")] (CApply (CApply (CSymbol ("Prelude","elem")) (CVar (0,"x0"))) (CSymbol ("FilePath","pathSeparators"))))] []]),
  CFunc ("FilePath","searchPathSeparator") 0 Public (CTCons ("Prelude","Char") []) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CSymbol ("System","isWindows"))) (CLit (CCharc ';'))) (CLit (CCharc ':')))] []]),
  CFunc ("FilePath","isSearchPathSeparator") 0 Public (CFuncType (CTCons ("Prelude","Char") []) (CTCons ("Prelude","Bool") [])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CLambda [CPVar (0,"x0")] (CApply (CApply (CSymbol ("Prelude","==")) (CVar (0,"x0"))) (CSymbol ("FilePath","searchPathSeparator"))))] []]),
  CFunc ("FilePath","extSeparator") 0 Public (CTCons ("Prelude","Char") []) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CLit (CCharc '.'))] []]),
  CFunc ("FilePath","isExtSeparator") 0 Public (CFuncType (CTCons ("Prelude","Char") []) (CTCons ("Prelude","Bool") [])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CLambda [CPVar (0,"x0")] (CApply (CApply (CSymbol ("Prelude","==")) (CVar (0,"x0"))) (CSymbol ("FilePath","extSeparator"))))] []]),
  CFunc ("FilePath","splitSearchPath") 0 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CSymbol ("FilePath","f"))] [CLocalFunc (CFunc ("FilePath","f") 1 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]])) (CRules CFlex [CRule [CPVar (0,"xs")] [(CSymbol ("Prelude","success"),CCase (CApply (CApply (CSymbol ("Prelude","break")) (CSymbol ("FilePath","isSearchPathSeparator"))) (CVar (0,"xs"))) [CBranch (CPComb ("Prelude","(,)") [CPVar (1,"pre"),CPComb ("Prelude","[]") []]) (CApply (CSymbol ("FilePath","g")) (CVar (1,"pre"))),CBranch (CPComb ("Prelude","(,)") [CPVar (2,"pre"),CPComb ("Prelude",":") [CPVar (3,"_"),CPVar (4,"post")]]) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("FilePath","g")) (CVar (2,"pre")))) (CApply (CSymbol ("FilePath","f")) (CVar (4,"post"))))])] []])),CLocalFunc (CFunc ("FilePath","g") 1 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]])) (CRules CFlex [CRule [CPComb ("Prelude","[]") []] [(CSymbol ("Prelude","success"),CListComp (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '.'))) (CSymbol ("Prelude","[]"))) [CSExpr (CSymbol ("System","isPosix"))])] [],CRule [CPAs (2,"x") (CPComb ("Prelude",":") [CPVar (0,"_"),CPVar (1,"_")])] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",":")) (CVar (2,"x"))) (CSymbol ("Prelude","[]")))] []]))]]),
  CFunc ("FilePath","getSearchPath") 0 Public (CTCons ("Prelude","IO") [CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]]) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",">>=")) (CApply (CSymbol ("System","getEnviron")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'P'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'A'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'T'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'H'))) (CSymbol ("Prelude","[]")))))))) (CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Prelude","return"))) (CSymbol ("FilePath","splitSearchPath"))))] []]),
  CFunc ("FilePath","splitExtension") 1 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]])) (CRules CFlex [CRule [CPVar (0,"x")] [(CSymbol ("Prelude","success"),CCase (CVar (4,"d")) [CBranch (CPComb ("Prelude","[]") []) (CApply (CApply (CSymbol ("Prelude","(,)")) (CVar (0,"x"))) (CSymbol ("Prelude","[]"))),CBranch (CPComb ("Prelude",":") [CPVar (5,"y"),CPVar (6,"ys")]) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (1,"a"))) (CApply (CSymbol ("Prelude","reverse")) (CVar (6,"ys"))))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (5,"y"))) (CApply (CSymbol ("Prelude","reverse")) (CVar (3,"c")))))])] [CLocalPat (CPComb ("Prelude","(,)") [CPVar (1,"a"),CPVar (2,"b")]) (CApply (CSymbol ("FilePath","splitFileName_")) (CVar (0,"x"))) [],CLocalPat (CPComb ("Prelude","(,)") [CPVar (3,"c"),CPVar (4,"d")]) (CApply (CApply (CSymbol ("Prelude","$")) (CApply (CSymbol ("Prelude","break")) (CSymbol ("FilePath","isExtSeparator")))) (CApply (CSymbol ("Prelude","reverse")) (CVar (2,"b")))) []]]),
  CFunc ("FilePath","takeExtension") 0 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Prelude","snd"))) (CSymbol ("FilePath","splitExtension")))] []]),
  CFunc ("FilePath","replaceExtension") 2 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]))) (CRules CFlex [CRule [CPVar (0,"x"),CPVar (1,"y")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("FilePath","<.>")) (CApply (CSymbol ("FilePath","dropExtension")) (CVar (0,"x")))) (CVar (1,"y")))] []]),
  CFunc ("FilePath","<.>") 0 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]))) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CSymbol ("FilePath","addExtension"))] []]),
  CFunc ("FilePath","dropExtension") 0 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Prelude","fst"))) (CSymbol ("FilePath","splitExtension")))] []]),
  CFunc ("FilePath","addExtension") 2 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]))) (CRules CFlex [CRule [CPVar (0,"file"),CPComb ("Prelude","[]") []] [(CSymbol ("Prelude","success"),CVar (0,"file"))] [],CRule [CPVar (1,"file"),CPAs (4,"xs") (CPComb ("Prelude",":") [CPVar (2,"x"),CPVar (3,"_")])] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("FilePath","joinDrive")) (CVar (6,"a"))) (CVar (5,"res")))] [CLocalPat (CPVar (5,"res")) (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CSymbol ("FilePath","isExtSeparator")) (CVar (2,"x")))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (7,"b"))) (CVar (4,"xs")))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (7,"b"))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CSymbol ("FilePath","extSeparator"))) (CSymbol ("Prelude","[]")))) (CVar (4,"xs"))))) [],CLocalPat (CPComb ("Prelude","(,)") [CPVar (6,"a"),CPVar (7,"b")]) (CApply (CSymbol ("FilePath","splitDrive")) (CVar (1,"file"))) []]]),
  CFunc ("FilePath","hasExtension") 0 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","Bool") [])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",".")) (CApply (CSymbol ("Prelude","any")) (CSymbol ("FilePath","isExtSeparator")))) (CSymbol ("FilePath","takeFileName")))] []]),
  CFunc ("FilePath","splitExtensions") 1 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]])) (CRules CFlex [CRule [CPVar (0,"x")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (1,"a"))) (CVar (3,"c")))) (CVar (4,"d")))] [CLocalPat (CPComb ("Prelude","(,)") [CPVar (1,"a"),CPVar (2,"b")]) (CApply (CSymbol ("FilePath","splitFileName_")) (CVar (0,"x"))) [],CLocalPat (CPComb ("Prelude","(,)") [CPVar (3,"c"),CPVar (4,"d")]) (CApply (CApply (CSymbol ("Prelude","break")) (CSymbol ("FilePath","isExtSeparator"))) (CVar (2,"b"))) []]]),
  CFunc ("FilePath","dropExtensions") 0 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Prelude","fst"))) (CSymbol ("FilePath","splitExtensions")))] []]),
  CFunc ("FilePath","takeExtensions") 0 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Prelude","snd"))) (CSymbol ("FilePath","splitExtensions")))] []]),
  CFunc ("FilePath","isLetter") 1 Private (CFuncType (CTCons ("Prelude","Char") []) (CTCons ("Prelude","Bool") [])) (CRules CFlex [CRule [CPVar (0,"x")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","||")) (CApply (CApply (CSymbol ("Prelude","&&")) (CApply (CApply (CSymbol ("Prelude",">=")) (CVar (0,"x"))) (CLit (CCharc 'a')))) (CApply (CApply (CSymbol ("Prelude","<=")) (CVar (0,"x"))) (CLit (CCharc 'z'))))) (CApply (CApply (CSymbol ("Prelude","&&")) (CApply (CApply (CSymbol ("Prelude",">=")) (CVar (0,"x"))) (CLit (CCharc 'A')))) (CApply (CApply (CSymbol ("Prelude","<=")) (CVar (0,"x"))) (CLit (CCharc 'Z')))))] []]),
  CFunc ("FilePath","splitDrive") 1 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]])) (CRules CFlex [CRule [CPVar (0,"x")] [(CSymbol ("System","isPosix"),CApply (CApply (CSymbol ("Prelude","span")) (CLambda [CPVar (4,"x0")] (CApply (CApply (CSymbol ("Prelude","==")) (CVar (4,"x0"))) (CLit (CCharc '/'))))) (CVar (0,"x"))),(CApply (CSymbol ("Maybe","isJust")) (CVar (1,"dl")),CApply (CSymbol ("Maybe","fromJust")) (CVar (1,"dl"))),(CApply (CSymbol ("Maybe","isJust")) (CVar (2,"unc")),CApply (CSymbol ("Maybe","fromJust")) (CVar (2,"unc"))),(CApply (CSymbol ("Maybe","isJust")) (CVar (3,"shr")),CApply (CSymbol ("Maybe","fromJust")) (CVar (3,"shr"))),(CSymbol ("Prelude","otherwise"),CApply (CApply (CSymbol ("Prelude","(,)")) (CSymbol ("Prelude","[]"))) (CVar (0,"x")))] [CLocalPat (CPVar (1,"dl")) (CApply (CSymbol ("FilePath","readDriveLetter")) (CVar (0,"x"))) [],CLocalPat (CPVar (2,"unc")) (CApply (CSymbol ("FilePath","readDriveUNC")) (CVar (0,"x"))) [],CLocalPat (CPVar (3,"shr")) (CApply (CSymbol ("FilePath","readDriveShare")) (CVar (0,"x"))) []]]),
  CFunc ("FilePath","addSlash") 2 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]))) (CRules CFlex [CRule [CPVar (0,"a"),CPVar (1,"xs")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (0,"a"))) (CVar (2,"c")))) (CVar (3,"d")))] [CLocalPat (CPComb ("Prelude","(,)") [CPVar (2,"c"),CPVar (3,"d")]) (CApply (CApply (CSymbol ("Prelude","span")) (CSymbol ("FilePath","isPathSeparator"))) (CVar (1,"xs"))) []]]),
  CFunc ("FilePath","readDriveUNC") 1 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","Maybe") [CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]])) (CRules CFlex [CRule [CPVar (0,"path")] [(CSymbol ("Prelude","success"),CCase (CVar (0,"path")) [CBranch (CPComb ("Prelude",":") [CPVar (1,"s1"),CPComb ("Prelude",":") [CPVar (2,"s2"),CPComb ("Prelude",":") [CPLit (CCharc '?'),CPComb ("Prelude",":") [CPVar (3,"s3"),CPVar (4,"xs")]]]]) (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","all")) (CSymbol ("FilePath","isPathSeparator"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (1,"s1"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (2,"s2"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (3,"s3"))) (CSymbol ("Prelude","[]"))))))) (CLetDecl [CLocalPat (CPVar (5,"rdl")) (CCase (CApply (CSymbol ("FilePath","readDriveLetter")) (CVar (4,"xs"))) [CBranch (CPComb ("Prelude","Just") [CPComb ("Prelude","(,)") [CPVar (6,"a"),CPVar (7,"b")]]) (CApply (CSymbol ("Prelude","Just")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (1,"s1"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (2,"s2"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '?'))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (3,"s3"))) (CVar (6,"a"))))))) (CVar (7,"b")))),CBranch (CPComb ("Prelude","Nothing") []) (CSymbol ("Prelude","Nothing"))]) []] (CCase (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("Char","toUpper"))) (CVar (4,"xs"))) [CBranch (CPComb ("Prelude",":") [CPLit (CCharc 'U'),CPComb ("Prelude",":") [CPLit (CCharc 'N'),CPComb ("Prelude",":") [CPLit (CCharc 'C'),CPComb ("Prelude",":") [CPVar (8,"s4"),CPVar (9,"_")]]]]) (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CSymbol ("FilePath","isPathSeparator")) (CVar (8,"s4")))) (CLetDecl [CLocalPat (CPComb ("Prelude","(,)") [CPVar (10,"a"),CPVar (11,"b")]) (CApply (CSymbol ("FilePath","readDriveShareName")) (CApply (CApply (CSymbol ("Prelude","drop")) (CLit (CIntc 4))) (CVar (4,"xs")))) []] (CApply (CSymbol ("Prelude","Just")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (1,"s1"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (2,"s2"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '?'))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (3,"s3"))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude","take")) (CLit (CIntc 4))) (CVar (4,"xs")))) (CVar (10,"a")))))))) (CVar (11,"b")))))) (CVar (5,"rdl"))),CBranch (CPVar (12,"_")) (CVar (5,"rdl"))]))) (CSymbol ("Prelude","Nothing"))),CBranch (CPVar (13,"_")) (CSymbol ("Prelude","Nothing"))])] []]),
  CFunc ("FilePath","readDriveLetter") 1 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","Maybe") [CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]])) (CRules CFlex [CRule [CPVar (0,"path")] [(CSymbol ("Prelude","success"),CCase (CVar (0,"path")) [CBranch (CPComb ("Prelude",":") [CPVar (1,"x"),CPComb ("Prelude",":") [CPLit (CCharc ':'),CPComb ("Prelude",":") [CPVar (2,"y"),CPVar (3,"xs")]]]) (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","&&")) (CApply (CSymbol ("FilePath","isLetter")) (CVar (1,"x")))) (CApply (CSymbol ("FilePath","isPathSeparator")) (CVar (2,"y"))))) (CApply (CApply (CSymbol ("Prelude","$")) (CSymbol ("Prelude","Just"))) (CApply (CApply (CSymbol ("FilePath","addSlash")) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (1,"x"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ':'))) (CSymbol ("Prelude","[]"))))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (2,"y"))) (CVar (3,"xs")))))) (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CSymbol ("FilePath","isLetter")) (CVar (1,"x")))) (CApply (CSymbol ("Prelude","Just")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (1,"x"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ':'))) (CSymbol ("Prelude","[]"))))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (2,"y"))) (CVar (3,"xs")))))) (CSymbol ("Prelude","Nothing")))),CBranch (CPComb ("Prelude",":") [CPVar (4,"x"),CPComb ("Prelude",":") [CPLit (CCharc ':'),CPVar (5,"xs")]]) (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CSymbol ("FilePath","isLetter")) (CVar (4,"x")))) (CApply (CSymbol ("Prelude","Just")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (4,"x"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ':'))) (CSymbol ("Prelude","[]"))))) (CVar (5,"xs"))))) (CSymbol ("Prelude","Nothing"))),CBranch (CPVar (6,"_")) (CSymbol ("Prelude","Nothing"))])] []]),
  CFunc ("FilePath","readDriveShare") 1 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","Maybe") [CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]])) (CRules CFlex [CRule [CPVar (0,"path")] [(CSymbol ("Prelude","success"),CCase (CVar (0,"path")) [CBranch (CPComb ("Prelude",":") [CPVar (1,"s1"),CPComb ("Prelude",":") [CPVar (2,"s2"),CPVar (3,"xs")]]) (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","&&")) (CApply (CSymbol ("FilePath","isPathSeparator")) (CVar (1,"s1")))) (CApply (CSymbol ("FilePath","isPathSeparator")) (CVar (2,"s2"))))) (CLetDecl [CLocalPat (CPComb ("Prelude","(,)") [CPVar (4,"a"),CPVar (5,"b")]) (CApply (CSymbol ("FilePath","readDriveShareName")) (CVar (3,"xs"))) []] (CApply (CSymbol ("Prelude","Just")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (1,"s1"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (2,"s2"))) (CVar (4,"a"))))) (CVar (5,"b")))))) (CSymbol ("Prelude","Nothing"))),CBranch (CPVar (6,"_")) (CSymbol ("Prelude","Nothing"))])] []]),
  CFunc ("FilePath","readDriveShareName") 1 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]])) (CRules CFlex [CRule [CPVar (0,"name")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("FilePath","addSlash")) (CVar (1,"a"))) (CVar (2,"b")))] [CLocalPat (CPComb ("Prelude","(,)") [CPVar (1,"a"),CPVar (2,"b")]) (CApply (CApply (CSymbol ("Prelude","break")) (CSymbol ("FilePath","isPathSeparator"))) (CVar (0,"name"))) []]]),
  CFunc ("FilePath","joinDrive") 2 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]))) (CRules CFlex [CRule [CPVar (0,"a"),CPVar (1,"b")] [(CSymbol ("System","isPosix"),CApply (CApply (CSymbol ("Prelude","++")) (CVar (0,"a"))) (CVar (1,"b"))),(CApply (CSymbol ("Prelude","null")) (CVar (0,"a")),CVar (1,"b")),(CApply (CSymbol ("Prelude","null")) (CVar (1,"b")),CVar (0,"a")),(CApply (CSymbol ("FilePath","isPathSeparator")) (CApply (CSymbol ("List","last")) (CVar (0,"a"))),CApply (CApply (CSymbol ("Prelude","++")) (CVar (0,"a"))) (CVar (1,"b"))),(CSymbol ("Prelude","otherwise"),CCase (CVar (0,"a")) [CBranch (CPComb ("Prelude",":") [CPVar (2,"a1"),CPComb ("Prelude",":") [CPLit (CCharc ':'),CPComb ("Prelude","[]") []]]) (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CSymbol ("FilePath","isLetter")) (CVar (2,"a1")))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (0,"a"))) (CVar (1,"b")))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (0,"a"))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CSymbol ("FilePath","pathSeparator"))) (CSymbol ("Prelude","[]")))) (CVar (1,"b"))))),CBranch (CPVar (3,"_")) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (0,"a"))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CSymbol ("FilePath","pathSeparator"))) (CSymbol ("Prelude","[]")))) (CVar (1,"b"))))])] []]),
  CFunc ("FilePath","takeDrive") 0 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Prelude","fst"))) (CSymbol ("FilePath","splitDrive")))] []]),
  CFunc ("FilePath","dropDrive") 0 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Prelude","snd"))) (CSymbol ("FilePath","splitDrive")))] []]),
  CFunc ("FilePath","hasDrive") 0 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","Bool") [])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Prelude","not"))) (CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Prelude","null"))) (CSymbol ("FilePath","takeDrive"))))] []]),
  CFunc ("FilePath","isDrive") 0 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","Bool") [])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Prelude","null"))) (CSymbol ("FilePath","dropDrive")))] []]),
  CFunc ("FilePath","splitFileName") 1 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]])) (CRules CFlex [CRule [CPVar (0,"x")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CSymbol ("Prelude","null")) (CVar (1,"dir")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '.'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '/'))) (CSymbol ("Prelude","[]"))))) (CVar (1,"dir")))) (CVar (2,"name")))] [CLocalPat (CPComb ("Prelude","(,)") [CPVar (1,"dir"),CPVar (2,"name")]) (CApply (CSymbol ("FilePath","splitFileName_")) (CVar (0,"x"))) []]]),
  CFunc ("FilePath","splitFileName_") 1 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]])) (CRules CFlex [CRule [CPVar (0,"x")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (3,"c"))) (CApply (CSymbol ("Prelude","reverse")) (CVar (2,"b"))))) (CApply (CSymbol ("Prelude","reverse")) (CVar (1,"a"))))] [CLocalPat (CPComb ("Prelude","(,)") [CPVar (1,"a"),CPVar (2,"b")]) (CApply (CApply (CSymbol ("Prelude","$")) (CApply (CSymbol ("Prelude","break")) (CSymbol ("FilePath","isPathSeparator")))) (CApply (CSymbol ("Prelude","reverse")) (CVar (4,"d")))) [],CLocalPat (CPComb ("Prelude","(,)") [CPVar (3,"c"),CPVar (4,"d")]) (CApply (CSymbol ("FilePath","splitDrive")) (CVar (0,"x"))) []]]),
  CFunc ("FilePath","replaceFileName") 2 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]))) (CRules CFlex [CRule [CPVar (0,"x"),CPVar (1,"y")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("FilePath","</>")) (CVar (2,"a"))) (CVar (1,"y")))] [CLocalPat (CPComb ("Prelude","(,)") [CPVar (2,"a"),CPVar (3,"_")]) (CApply (CSymbol ("FilePath","splitFileName_")) (CVar (0,"x"))) []]]),
  CFunc ("FilePath","dropFileName") 0 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Prelude","fst"))) (CSymbol ("FilePath","splitFileName")))] []]),
  CFunc ("FilePath","takeFileName") 0 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Prelude","snd"))) (CSymbol ("FilePath","splitFileName")))] []]),
  CFunc ("FilePath","takeBaseName") 0 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("FilePath","dropExtension"))) (CSymbol ("FilePath","takeFileName")))] []]),
  CFunc ("FilePath","replaceBaseName") 2 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]))) (CRules CFlex [CRule [CPVar (0,"pth"),CPVar (1,"nam")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("FilePath","combineAlways")) (CVar (2,"a"))) (CApply (CApply (CSymbol ("FilePath","<.>")) (CVar (1,"nam"))) (CVar (4,"ext"))))] [CLocalPat (CPComb ("Prelude","(,)") [CPVar (2,"a"),CPVar (3,"b")]) (CApply (CSymbol ("FilePath","splitFileName_")) (CVar (0,"pth"))) [],CLocalPat (CPVar (4,"ext")) (CApply (CSymbol ("FilePath","takeExtension")) (CVar (3,"b"))) []]]),
  CFunc ("FilePath","hasTrailingPathSeparator") 1 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","Bool") [])) (CRules CFlex [CRule [CPComb ("Prelude","[]") []] [(CSymbol ("Prelude","success"),CSymbol ("Prelude","False"))] [],CRule [CPAs (2,"x") (CPComb ("Prelude",":") [CPVar (0,"_"),CPVar (1,"_")])] [(CSymbol ("Prelude","success"),CApply (CSymbol ("FilePath","isPathSeparator")) (CApply (CSymbol ("List","last")) (CVar (2,"x"))))] []]),
  CFunc ("FilePath","addTrailingPathSeparator") 1 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CRules CFlex [CRule [CPVar (0,"x")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CSymbol ("FilePath","hasTrailingPathSeparator")) (CVar (0,"x")))) (CVar (0,"x"))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (0,"x"))) (CApply (CApply (CSymbol ("Prelude",":")) (CSymbol ("FilePath","pathSeparator"))) (CSymbol ("Prelude","[]")))))] []]),
  CFunc ("FilePath","dropTrailingPathSeparator") 1 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CRules CFlex [CRule [CPVar (0,"x")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","&&")) (CApply (CSymbol ("FilePath","hasTrailingPathSeparator")) (CVar (0,"x")))) (CApply (CSymbol ("Prelude","not")) (CApply (CSymbol ("FilePath","isDrive")) (CVar (0,"x")))))) (CLetDecl [CLocalPat (CPVar (1,"x'")) (CApply (CApply (CSymbol ("Prelude","$")) (CSymbol ("Prelude","reverse"))) (CApply (CApply (CSymbol ("Prelude","$")) (CApply (CSymbol ("Prelude","dropWhile")) (CSymbol ("FilePath","isPathSeparator")))) (CApply (CSymbol ("Prelude","reverse")) (CVar (0,"x"))))) []] (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CSymbol ("Prelude","null")) (CVar (1,"x'")))) (CApply (CApply (CSymbol ("Prelude",":")) (CSymbol ("FilePath","pathSeparator"))) (CSymbol ("Prelude","[]")))) (CVar (1,"x'"))))) (CVar (0,"x")))] []]),
  CFunc ("FilePath","takeDirectory") 1 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CRules CFlex [CRule [CPVar (0,"x")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CSymbol ("FilePath","isDrive")) (CVar (2,"file")))) (CVar (2,"file"))) (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","&&")) (CApply (CSymbol ("Prelude","null")) (CVar (1,"res")))) (CApply (CSymbol ("Prelude","not")) (CApply (CSymbol ("Prelude","null")) (CVar (2,"file")))))) (CVar (2,"file"))) (CVar (1,"res"))))] [CLocalPat (CPVar (1,"res")) (CApply (CApply (CSymbol ("Prelude","$")) (CSymbol ("Prelude","reverse"))) (CApply (CApply (CSymbol ("Prelude","$")) (CApply (CSymbol ("Prelude","dropWhile")) (CSymbol ("FilePath","isPathSeparator")))) (CApply (CSymbol ("Prelude","reverse")) (CVar (2,"file"))))) [],CLocalPat (CPVar (2,"file")) (CApply (CSymbol ("FilePath","dropFileName")) (CVar (0,"x"))) [],CLocalPat (CPVar (3,"_")) (CApply (CSymbol ("List","isPrefixOf")) (CVar (0,"x"))) []]]),
  CFunc ("FilePath","replaceDirectory") 2 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]))) (CRules CFlex [CRule [CPVar (0,"x"),CPVar (1,"dir")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("FilePath","combineAlways")) (CVar (1,"dir"))) (CApply (CSymbol ("FilePath","takeFileName")) (CVar (0,"x"))))] []]),
  CFunc ("FilePath","combine") 2 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]))) (CRules CFlex [CRule [CPVar (0,"a"),CPVar (1,"b")] [(CApply (CApply (CSymbol ("Prelude","||")) (CApply (CSymbol ("FilePath","hasDrive")) (CVar (1,"b")))) (CApply (CApply (CSymbol ("Prelude","&&")) (CApply (CSymbol ("Prelude","not")) (CApply (CSymbol ("Prelude","null")) (CVar (1,"b"))))) (CApply (CSymbol ("FilePath","isPathSeparator")) (CApply (CSymbol ("Prelude","head")) (CVar (1,"b"))))),CVar (1,"b")),(CSymbol ("Prelude","otherwise"),CApply (CApply (CSymbol ("FilePath","combineAlways")) (CVar (0,"a"))) (CVar (1,"b")))] []]),
  CFunc ("FilePath","combineAlways") 2 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]))) (CRules CFlex [CRule [CPVar (0,"a"),CPVar (1,"b")] [(CApply (CSymbol ("Prelude","null")) (CVar (0,"a")),CVar (1,"b")),(CApply (CSymbol ("Prelude","null")) (CVar (1,"b")),CVar (0,"a")),(CApply (CSymbol ("FilePath","isPathSeparator")) (CApply (CSymbol ("List","last")) (CVar (0,"a"))),CApply (CApply (CSymbol ("Prelude","++")) (CVar (0,"a"))) (CVar (1,"b"))),(CApply (CSymbol ("FilePath","isDrive")) (CVar (0,"a")),CApply (CApply (CSymbol ("FilePath","joinDrive")) (CVar (0,"a"))) (CVar (1,"b"))),(CSymbol ("Prelude","otherwise"),CApply (CApply (CSymbol ("Prelude","++")) (CVar (0,"a"))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CSymbol ("FilePath","pathSeparator"))) (CSymbol ("Prelude","[]")))) (CVar (1,"b"))))] []]),
  CFunc ("FilePath","</>") 0 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]))) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CSymbol ("FilePath","combine"))] []]),
  CFunc ("FilePath","splitPath") 1 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]])) (CRules CFlex [CRule [CPVar (0,"x")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CListComp (CVar (1,"drive")) [CSExpr (CApply (CApply (CSymbol ("Prelude","/=")) (CVar (1,"drive"))) (CSymbol ("Prelude","[]")))])) (CApply (CSymbol ("FilePath","f")) (CVar (2,"path"))))] [CLocalPat (CPComb ("Prelude","(,)") [CPVar (1,"drive"),CPVar (2,"path")]) (CApply (CSymbol ("FilePath","splitDrive")) (CVar (0,"x"))) [],CLocalFunc (CFunc ("FilePath","f") 1 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]])) (CRules CFlex [CRule [CPComb ("Prelude","[]") []] [(CSymbol ("Prelude","success"),CSymbol ("Prelude","[]"))] [],CRule [CPAs (5,"y") (CPComb ("Prelude",":") [CPVar (3,"_"),CPVar (4,"_")])] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (6,"a"))) (CVar (8,"c")))) (CApply (CSymbol ("FilePath","f")) (CVar (9,"d"))))] [CLocalPat (CPComb ("Prelude","(,)") [CPVar (6,"a"),CPVar (7,"b")]) (CApply (CApply (CSymbol ("Prelude","break")) (CSymbol ("FilePath","isPathSeparator"))) (CVar (5,"y"))) [],CLocalPat (CPComb ("Prelude","(,)") [CPVar (8,"c"),CPVar (9,"d")]) (CApply (CApply (CSymbol ("Prelude","break")) (CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Prelude","not"))) (CSymbol ("FilePath","isPathSeparator")))) (CVar (7,"b"))) []]]))]]),
  CFunc ("FilePath","splitDirectories") 1 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]])) (CRules CFlex [CRule [CPVar (0,"path")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CSymbol ("FilePath","hasDrive")) (CVar (0,"path")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("Prelude","head")) (CVar (1,"pathComponents")))) (CApply (CSymbol ("FilePath","f")) (CApply (CSymbol ("Prelude","tail")) (CVar (1,"pathComponents")))))) (CApply (CSymbol ("FilePath","f")) (CVar (1,"pathComponents"))))] [CLocalPat (CPVar (1,"pathComponents")) (CApply (CSymbol ("FilePath","splitPath")) (CVar (0,"path"))) [],CLocalFunc (CFunc ("FilePath","f") 1 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]) (CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]])) (CRules CFlex [CRule [CPVar (2,"xs")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("FilePath","g"))) (CVar (2,"xs")))] []])),CLocalFunc (CFunc ("FilePath","g") 1 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CRules CFlex [CRule [CPVar (2,"x")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CSymbol ("Prelude","null")) (CVar (3,"res")))) (CVar (2,"x"))) (CVar (3,"res")))] [CLocalPat (CPVar (3,"res")) (CApply (CApply (CSymbol ("Prelude","takeWhile")) (CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Prelude","not"))) (CSymbol ("FilePath","isPathSeparator")))) (CVar (2,"x"))) []]]))]]),
  CFunc ("FilePath","joinPath") 1 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CRules CFlex [CRule [CPVar (0,"x")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","foldr")) (CSymbol ("FilePath","combine"))) (CSymbol ("Prelude","[]"))) (CVar (0,"x")))] []]),
  CFunc ("FilePath","equalFilePath") 2 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","Bool") []))) (CRules CFlex [CRule [CPVar (0,"a"),CPVar (1,"b")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","==")) (CApply (CSymbol ("FilePath","f")) (CVar (0,"a")))) (CApply (CSymbol ("FilePath","f")) (CVar (1,"b"))))] [CLocalFunc (CFunc ("FilePath","f") 1 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CRules CFlex [CRule [CPVar (2,"x")] [(CSymbol ("System","isWindows"),CApply (CApply (CSymbol ("Prelude","$")) (CSymbol ("FilePath","dropTrailSlash"))) (CApply (CApply (CSymbol ("Prelude","$")) (CApply (CSymbol ("Prelude","map")) (CSymbol ("Char","toLower")))) (CApply (CSymbol ("FilePath","normalise")) (CVar (2,"x"))))),(CSymbol ("Prelude","otherwise"),CApply (CApply (CSymbol ("Prelude","$")) (CSymbol ("FilePath","dropTrailSlash"))) (CApply (CSymbol ("FilePath","normalise")) (CVar (2,"x"))))] []])),CLocalFunc (CFunc ("FilePath","dropTrailSlash") 1 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CRules CFlex [CRule [CPVar (2,"x")] [(CApply (CApply (CSymbol ("Prelude","&&")) (CApply (CApply (CSymbol ("Prelude",">=")) (CApply (CSymbol ("Prelude","length")) (CVar (2,"x")))) (CLit (CIntc 2)))) (CApply (CSymbol ("FilePath","isPathSeparator")) (CApply (CSymbol ("List","last")) (CVar (2,"x")))),CApply (CSymbol ("List","init")) (CVar (2,"x"))),(CSymbol ("Prelude","otherwise"),CVar (2,"x"))] []]))]]),
  CFunc ("FilePath","makeRelative") 2 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]))) (CRules CFlex [CRule [CPVar (0,"root"),CPVar (1,"path")] [(CApply (CApply (CSymbol ("FilePath","equalFilePath")) (CVar (0,"root"))) (CVar (1,"path")),CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '.'))) (CSymbol ("Prelude","[]"))),(CApply (CApply (CSymbol ("Prelude","/=")) (CApply (CSymbol ("FilePath","takeAbs")) (CVar (0,"root")))) (CApply (CSymbol ("FilePath","takeAbs")) (CVar (1,"path"))),CVar (1,"path")),(CSymbol ("Prelude","otherwise"),CApply (CApply (CSymbol ("FilePath","f")) (CApply (CSymbol ("FilePath","dropAbs")) (CVar (0,"root")))) (CApply (CSymbol ("FilePath","dropAbs")) (CVar (1,"path"))))] [CLocalFunc (CFunc ("FilePath","f") 2 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]))) (CRules CFlex [CRule [CPComb ("Prelude","[]") [],CPVar (2,"y")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","dropWhile")) (CSymbol ("FilePath","isPathSeparator"))) (CVar (2,"y")))] [],CRule [CPAs (5,"x") (CPComb ("Prelude",":") [CPVar (3,"_"),CPVar (4,"_")]),CPVar (6,"y")] [(CSymbol ("Prelude","success"),CLetDecl [CLocalPat (CPComb ("Prelude","(,)") [CPVar (7,"x1"),CPVar (8,"x2")]) (CApply (CSymbol ("FilePath","g")) (CVar (5,"x"))) [],CLocalPat (CPComb ("Prelude","(,)") [CPVar (9,"y1"),CPVar (10,"y2")]) (CApply (CSymbol ("FilePath","g")) (CVar (6,"y"))) []] (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("FilePath","equalFilePath")) (CVar (7,"x1"))) (CVar (9,"y1")))) (CApply (CApply (CSymbol ("FilePath","f")) (CVar (8,"x2"))) (CVar (10,"y2")))) (CVar (1,"path"))))] []])),CLocalFunc (CFunc ("FilePath","g") 1 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]])) (CRules CFlex [CRule [CPVar (2,"x")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude","dropWhile")) (CSymbol ("FilePath","isPathSeparator"))) (CVar (3,"a")))) (CApply (CApply (CSymbol ("Prelude","dropWhile")) (CSymbol ("FilePath","isPathSeparator"))) (CVar (4,"b"))))] [CLocalPat (CPComb ("Prelude","(,)") [CPVar (3,"a"),CPVar (4,"b")]) (CApply (CApply (CSymbol ("Prelude","$")) (CApply (CSymbol ("Prelude","break")) (CSymbol ("FilePath","isPathSeparator")))) (CApply (CApply (CSymbol ("Prelude","dropWhile")) (CSymbol ("FilePath","isPathSeparator"))) (CVar (2,"x")))) []]])),CLocalFunc (CFunc ("FilePath","dropAbs") 1 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CRules CFlex [CRule [CPComb ("Prelude","[]") []] [(CSymbol ("Prelude","success"),CApply (CSymbol ("FilePath","dropDrive")) (CSymbol ("Prelude","[]")))] [],CRule [CPComb ("Prelude",":") [CPVar (2,"x"),CPVar (3,"xs")]] [(CApply (CSymbol ("FilePath","isPathSeparator")) (CVar (2,"x")),CVar (3,"xs")),(CSymbol ("Prelude","otherwise"),CApply (CSymbol ("FilePath","dropDrive")) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (2,"x"))) (CVar (3,"xs"))))] []])),CLocalFunc (CFunc ("FilePath","takeAbs") 1 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CRules CFlex [CRule [CPComb ("Prelude","[]") []] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","$")) (CApply (CSymbol ("Prelude","map")) (CLambda [CPVar (2,"y")] (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CSymbol ("FilePath","isPathSeparator")) (CVar (2,"y")))) (CSymbol ("FilePath","pathSeparator"))) (CApply (CSymbol ("Char","toLower")) (CVar (2,"y"))))))) (CApply (CSymbol ("FilePath","takeDrive")) (CSymbol ("Prelude","[]"))))] [],CRule [CPAs (5,"xs") (CPComb ("Prelude",":") [CPVar (3,"x"),CPVar (4,"_")])] [(CApply (CSymbol ("FilePath","isPathSeparator")) (CVar (3,"x")),CApply (CApply (CSymbol ("Prelude",":")) (CSymbol ("FilePath","pathSeparator"))) (CSymbol ("Prelude","[]"))),(CSymbol ("Prelude","otherwise"),CApply (CApply (CSymbol ("Prelude","$")) (CApply (CSymbol ("Prelude","map")) (CLambda [CPVar (6,"y")] (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CSymbol ("FilePath","isPathSeparator")) (CVar (6,"y")))) (CSymbol ("FilePath","pathSeparator"))) (CApply (CSymbol ("Char","toLower")) (CVar (6,"y"))))))) (CApply (CSymbol ("FilePath","takeDrive")) (CVar (5,"xs"))))] []]))]]),
  CFunc ("FilePath","normalise") 1 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CRules CFlex [CRule [CPVar (0,"path")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("FilePath","joinDrive")) (CApply (CSymbol ("FilePath","normaliseDrive")) (CVar (1,"drv")))) (CApply (CVar (3,"f")) (CVar (2,"pth"))))) (CListComp (CSymbol ("FilePath","pathSeparator")) [CSExpr (CApply (CSymbol ("FilePath","isDirPath")) (CVar (2,"pth")))]))] [CLocalPat (CPComb ("Prelude","(,)") [CPVar (1,"drv"),CPVar (2,"pth")]) (CApply (CSymbol ("FilePath","splitDrive")) (CVar (0,"path"))) [],CLocalFunc (CFunc ("FilePath","isDirPath") 1 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","Bool") [])) (CRules CFlex [CRule [CPVar (4,"xs")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","||")) (CApply (CSymbol ("FilePath","lastSep")) (CVar (4,"xs")))) (CApply (CApply (CSymbol ("Prelude","&&")) (CApply (CSymbol ("Prelude","not")) (CApply (CSymbol ("Prelude","null")) (CVar (4,"xs"))))) (CApply (CApply (CSymbol ("Prelude","&&")) (CApply (CApply (CSymbol ("Prelude","==")) (CApply (CSymbol ("List","last")) (CVar (4,"xs")))) (CLit (CCharc '.')))) (CApply (CSymbol ("FilePath","lastSep")) (CApply (CSymbol ("List","init")) (CVar (4,"xs")))))))] []])),CLocalFunc (CFunc ("FilePath","lastSep") 1 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","Bool") [])) (CRules CFlex [CRule [CPVar (4,"xs")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","&&")) (CApply (CSymbol ("Prelude","not")) (CApply (CSymbol ("Prelude","null")) (CVar (4,"xs"))))) (CApply (CSymbol ("FilePath","isPathSeparator")) (CApply (CSymbol ("List","last")) (CVar (4,"xs")))))] []])),CLocalPat (CPVar (3,"f")) (CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("FilePath","joinPath"))) (CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("FilePath","dropDots"))) (CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("FilePath","splitDirectories"))) (CSymbol ("FilePath","propSep"))))) [],CLocalFunc (CFunc ("FilePath","propSep") 1 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CRules CFlex [CRule [CPComb ("Prelude","[]") []] [(CSymbol ("Prelude","success"),CSymbol ("Prelude","[]"))] [],CRule [CPAs (5,"xs") (CPComb ("Prelude",":") [CPVar (4,"x"),CPComb ("Prelude","[]") []])] [(CApply (CSymbol ("FilePath","isPathSeparator")) (CVar (4,"x")),CApply (CApply (CSymbol ("Prelude",":")) (CSymbol ("FilePath","pathSeparator"))) (CSymbol ("Prelude","[]"))),(CSymbol ("Prelude","otherwise"),CVar (5,"xs"))] [],CRule [CPComb ("Prelude",":") [CPVar (6,"x"),CPComb ("Prelude",":") [CPVar (7,"y"),CPVar (8,"xs")]]] [(CApply (CApply (CSymbol ("Prelude","&&")) (CApply (CSymbol ("FilePath","isPathSeparator")) (CVar (6,"x")))) (CApply (CSymbol ("FilePath","isPathSeparator")) (CVar (7,"y"))),CApply (CSymbol ("FilePath","propSep")) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (6,"x"))) (CVar (8,"xs")))),(CApply (CSymbol ("FilePath","isPathSeparator")) (CVar (6,"x")),CApply (CApply (CSymbol ("Prelude",":")) (CSymbol ("FilePath","pathSeparator"))) (CApply (CSymbol ("FilePath","propSep")) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (7,"y"))) (CVar (8,"xs"))))),(CSymbol ("Prelude","otherwise"),CApply (CApply (CSymbol ("Prelude",":")) (CVar (6,"x"))) (CApply (CSymbol ("FilePath","propSep")) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (7,"y"))) (CVar (8,"xs")))))] []])),CLocalFunc (CFunc ("FilePath","dropDots") 1 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]) (CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]])) (CRules CFlex [CRule [CPVar (4,"xs")] [(CApply (CApply (CSymbol ("Prelude","all")) (CLambda [CPVar (5,"x0")] (CApply (CApply (CSymbol ("Prelude","==")) (CVar (5,"x0"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '.'))) (CSymbol ("Prelude","[]")))))) (CVar (4,"xs")),CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '.'))) (CSymbol ("Prelude","[]")))) (CSymbol ("Prelude","[]"))),(CSymbol ("Prelude","otherwise"),CApply (CApply (CSymbol ("FilePath","dropDots'")) (CSymbol ("Prelude","[]"))) (CVar (4,"xs")))] []])),CLocalFunc (CFunc ("FilePath","dropDots'") 2 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]) (CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]))) (CRules CFlex [CRule [CPVar (4,"acc"),CPComb ("Prelude","[]") []] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Prelude","reverse")) (CVar (4,"acc")))] [],CRule [CPVar (5,"acc"),CPComb ("Prelude",":") [CPVar (6,"x"),CPVar (7,"xs")]] [(CApply (CApply (CSymbol ("Prelude","==")) (CVar (6,"x"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '.'))) (CSymbol ("Prelude","[]"))),CApply (CApply (CSymbol ("FilePath","dropDots'")) (CVar (5,"acc"))) (CVar (7,"xs"))),(CSymbol ("Prelude","otherwise"),CApply (CApply (CSymbol ("FilePath","dropDots'")) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (6,"x"))) (CVar (5,"acc")))) (CVar (7,"xs")))] []]))]]),
  CFunc ("FilePath","normaliseDrive") 1 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CRules CFlex [CRule [CPVar (0,"drive")] [(CSymbol ("System","isPosix"),CVar (0,"drive")),(CSymbol ("Prelude","otherwise"),CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","$")) (CSymbol ("Maybe","isJust"))) (CApply (CSymbol ("FilePath","readDriveLetter")) (CVar (1,"x2"))))) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("Char","toUpper"))) (CVar (1,"x2")))) (CVar (0,"drive")))] [CLocalPat (CPVar (1,"x2")) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("FilePath","repSlash"))) (CVar (0,"drive"))) [],CLocalFunc (CFunc ("FilePath","repSlash") 1 Private (CFuncType (CTCons ("Prelude","Char") []) (CTCons ("Prelude","Char") [])) (CRules CFlex [CRule [CPVar (2,"x")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CSymbol ("FilePath","isPathSeparator")) (CVar (2,"x")))) (CSymbol ("FilePath","pathSeparator"))) (CVar (2,"x")))] []]))]]),
  CFunc ("FilePath","badCharacters") 0 Private (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ':'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '*'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '?'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '>'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '<'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '|'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '"'))) (CSymbol ("Prelude","[]")))))))))] []]),
  CFunc ("FilePath","badElements") 0 Private (CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'C'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'O'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'N'))) (CSymbol ("Prelude","[]")))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'P'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'R'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'N'))) (CSymbol ("Prelude","[]")))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'A'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'U'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'X'))) (CSymbol ("Prelude","[]")))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'N'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'U'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'L'))) (CSymbol ("Prelude","[]")))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'C'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'O'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'M'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '1'))) (CSymbol ("Prelude","[]"))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'C'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'O'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'M'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '2'))) (CSymbol ("Prelude","[]"))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'C'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'O'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'M'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '3'))) (CSymbol ("Prelude","[]"))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'C'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'O'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'M'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '4'))) (CSymbol ("Prelude","[]"))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'C'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'O'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'M'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '5'))) (CSymbol ("Prelude","[]"))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'C'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'O'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'M'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '6'))) (CSymbol ("Prelude","[]"))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'C'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'O'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'M'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '7'))) (CSymbol ("Prelude","[]"))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'C'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'O'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'M'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '8'))) (CSymbol ("Prelude","[]"))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'C'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'O'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'M'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '9'))) (CSymbol ("Prelude","[]"))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'L'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'P'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'T'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '1'))) (CSymbol ("Prelude","[]"))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'L'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'P'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'T'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '2'))) (CSymbol ("Prelude","[]"))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'L'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'P'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'T'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '3'))) (CSymbol ("Prelude","[]"))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'L'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'P'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'T'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '4'))) (CSymbol ("Prelude","[]"))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'L'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'P'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'T'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '5'))) (CSymbol ("Prelude","[]"))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'L'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'P'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'T'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '6'))) (CSymbol ("Prelude","[]"))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'L'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'P'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'T'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '7'))) (CSymbol ("Prelude","[]"))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'L'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'P'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'T'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '8'))) (CSymbol ("Prelude","[]"))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'L'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'P'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'T'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '9'))) (CSymbol ("Prelude","[]"))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'C'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'L'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'O'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'C'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'K'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '$'))) (CSymbol ("Prelude","[]"))))))))) (CSymbol ("Prelude","[]")))))))))))))))))))))))))] []]),
  CFunc ("FilePath","isValid") 1 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","Bool") [])) (CRules CFlex [CRule [CPComb ("Prelude","[]") []] [(CSymbol ("Prelude","success"),CSymbol ("Prelude","False"))] [],CRule [CPAs (2,"path") (CPComb ("Prelude",":") [CPVar (0,"_"),CPVar (1,"_")])] [(CSymbol ("System","isPosix"),CSymbol ("Prelude","True")),(CSymbol ("Prelude","otherwise"),CApply (CApply (CSymbol ("Prelude","&&")) (CApply (CSymbol ("Prelude","not")) (CApply (CApply (CSymbol ("Prelude","any")) (CLambda [CPVar (4,"x0")] (CApply (CApply (CSymbol ("Prelude","elem")) (CVar (4,"x0"))) (CSymbol ("FilePath","badCharacters"))))) (CVar (3,"x2"))))) (CApply (CApply (CSymbol ("Prelude","&&")) (CApply (CSymbol ("Prelude","not")) (CApply (CApply (CSymbol ("Prelude","$")) (CApply (CSymbol ("Prelude","any")) (CSymbol ("FilePath","f")))) (CApply (CSymbol ("FilePath","splitDirectories")) (CVar (3,"x2")))))) (CApply (CSymbol ("Prelude","not")) (CApply (CApply (CSymbol ("Prelude","&&")) (CApply (CApply (CSymbol ("Prelude",">=")) (CApply (CSymbol ("Prelude","length")) (CVar (2,"path")))) (CLit (CIntc 2)))) (CApply (CApply (CSymbol ("Prelude","all")) (CSymbol ("FilePath","isPathSeparator"))) (CVar (2,"path")))))))] [CLocalPat (CPVar (3,"x2")) (CApply (CSymbol ("FilePath","dropDrive")) (CVar (2,"path"))) [],CLocalFunc (CFunc ("FilePath","f") 1 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","Bool") [])) (CRules CFlex [CRule [CPVar (4,"x")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","elem")) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("Char","toUpper"))) (CApply (CSymbol ("FilePath","dropExtensions")) (CVar (4,"x"))))) (CSymbol ("FilePath","badElements")))] []]))]]),
  CFunc ("FilePath","makeValid") 1 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CRules CFlex [CRule [CPComb ("Prelude","[]") []] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '_'))) (CSymbol ("Prelude","[]")))] [],CRule [CPAs (2,"path") (CPComb ("Prelude",":") [CPVar (0,"_"),CPVar (1,"_")])] [(CSymbol ("System","isPosix"),CVar (2,"path")),(CApply (CApply (CSymbol ("Prelude","&&")) (CApply (CApply (CSymbol ("Prelude",">=")) (CApply (CSymbol ("Prelude","length")) (CVar (2,"path")))) (CLit (CIntc 2)))) (CApply (CApply (CSymbol ("Prelude","all")) (CSymbol ("FilePath","isPathSeparator"))) (CVar (2,"path"))),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude","take")) (CLit (CIntc 2))) (CVar (2,"path")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'v'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]")))))))),(CSymbol ("Prelude","otherwise"),CApply (CApply (CSymbol ("Prelude","$")) (CApply (CSymbol ("FilePath","joinDrive")) (CVar (3,"drv")))) (CApply (CApply (CSymbol ("Prelude","$")) (CSymbol ("FilePath","validElements"))) (CApply (CSymbol ("FilePath","validChars")) (CVar (4,"pth")))))] [CLocalPat (CPComb ("Prelude","(,)") [CPVar (3,"drv"),CPVar (4,"pth")]) (CApply (CSymbol ("FilePath","splitDrive")) (CVar (2,"path"))) [],CLocalFunc (CFunc ("FilePath","validChars") 1 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CRules CFlex [CRule [CPVar (5,"x")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("FilePath","f"))) (CVar (5,"x")))] []])),CLocalFunc (CFunc ("FilePath","f") 1 Private (CFuncType (CTCons ("Prelude","Char") []) (CTCons ("Prelude","Char") [])) (CRules CFlex [CRule [CPVar (5,"x")] [(CApply (CApply (CSymbol ("Prelude","elem")) (CVar (5,"x"))) (CSymbol ("FilePath","badCharacters")),CLit (CCharc '_')),(CSymbol ("Prelude","otherwise"),CVar (5,"x"))] []])),CLocalFunc (CFunc ("FilePath","validElements") 1 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CRules CFlex [CRule [CPVar (5,"x")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","$")) (CSymbol ("FilePath","joinPath"))) (CApply (CApply (CSymbol ("Prelude","$")) (CApply (CSymbol ("Prelude","map")) (CSymbol ("FilePath","g")))) (CApply (CSymbol ("FilePath","splitPath")) (CVar (5,"x")))))] []])),CLocalFunc (CFunc ("FilePath","g") 1 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CRules CFlex [CRule [CPVar (5,"x")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("FilePath","h")) (CApply (CSymbol ("Prelude","reverse")) (CVar (7,"b"))))) (CApply (CSymbol ("Prelude","reverse")) (CVar (6,"a"))))] [CLocalPat (CPComb ("Prelude","(,)") [CPVar (6,"a"),CPVar (7,"b")]) (CApply (CApply (CSymbol ("Prelude","$")) (CApply (CSymbol ("Prelude","span")) (CSymbol ("FilePath","isPathSeparator")))) (CApply (CSymbol ("Prelude","reverse")) (CVar (5,"x")))) []]])),CLocalFunc (CFunc ("FilePath","h") 1 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CRules CFlex [CRule [CPVar (5,"x")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","elem")) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("Char","toUpper"))) (CVar (6,"a")))) (CSymbol ("FilePath","badElements")))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (6,"a"))) (CApply (CApply (CSymbol ("FilePath","<.>")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '_'))) (CSymbol ("Prelude","[]")))) (CVar (7,"b"))))) (CVar (5,"x")))] [CLocalPat (CPComb ("Prelude","(,)") [CPVar (6,"a"),CPVar (7,"b")]) (CApply (CSymbol ("FilePath","splitExtensions")) (CVar (5,"x"))) []]]))]]),
  CFunc ("FilePath","isRelative") 0 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","Bool") [])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("FilePath","isRelativeDrive"))) (CSymbol ("FilePath","takeDrive")))] []]),
  CFunc ("FilePath","isRelativeDrive") 1 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","Bool") [])) (CRules CFlex [CRule [CPVar (0,"x")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","||")) (CApply (CSymbol ("Prelude","null")) (CVar (0,"x")))) (CApply (CApply (CApply (CSymbol ("Prelude","maybe")) (CSymbol ("Prelude","False"))) (CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Prelude","not"))) (CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("FilePath","isPathSeparator"))) (CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("List","last"))) (CSymbol ("Prelude","fst")))))) (CApply (CSymbol ("FilePath","readDriveLetter")) (CVar (0,"x")))))] []]),
  CFunc ("FilePath","isAbsolute") 0 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","Bool") [])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Prelude","not"))) (CSymbol ("FilePath","isRelative")))] []])]
 [COp ("FilePath","<.>") CInfixrOp 7,COp ("FilePath","</>") CInfixrOp 5]
