CurryProg "AllSolutions"
 ["Prelude","SearchTree"]
 []
 [CFunc ("AllSolutions","getAllValues") 1 Public (CFuncType (CTVar (0,"a")) (CTCons ("Prelude","IO") [CTCons ("Prelude","[]") [CTVar (0,"a")]])) (CRules CFlex [CRule [CPVar (0,"e")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",">>=")) (CApply (CSymbol ("SearchTree","getSearchTree")) (CVar (0,"e")))) (CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Prelude","return"))) (CSymbol ("SearchTree","allValuesDFS"))))] []]),
  CFunc ("AllSolutions","getOneValue") 1 Public (CFuncType (CTVar (0,"a")) (CTCons ("Prelude","IO") [CTCons ("Prelude","Maybe") [CTVar (0,"a")]])) (CRules CFlex [CRule [CPVar (0,"x")] [(CSymbol ("Prelude","success"),CDoExpr [CSPat (CPVar (1,"st")) (CApply (CSymbol ("SearchTree","getSearchTree")) (CVar (0,"x"))),CSLet [CLocalPat (CPVar (2,"vals")) (CApply (CSymbol ("SearchTree","allValuesDFS")) (CVar (1,"st"))) []],CSExpr (CApply (CSymbol ("Prelude","return")) (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CSymbol ("Prelude","null")) (CVar (2,"vals")))) (CSymbol ("Prelude","Nothing"))) (CApply (CSymbol ("Prelude","Just")) (CApply (CSymbol ("Prelude","head")) (CVar (2,"vals"))))))])] []]),
  CFunc ("AllSolutions","getAllSolutions") 1 Public (CFuncType (CFuncType (CTVar (0,"a")) (CTCons ("Prelude","Success") [])) (CTCons ("Prelude","IO") [CTCons ("Prelude","[]") [CTVar (0,"a")]])) (CRules CFlex [CRule [CPVar (0,"c")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",">>=")) (CApply (CSymbol ("AllSolutions","getAllValues")) (CLetDecl [CLocalVar (1,"x")] (CApply (CApply (CSymbol ("Prelude","(,)")) (CVar (1,"x"))) (CApply (CVar (0,"c")) (CVar (1,"x"))))))) (CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Prelude","return"))) (CApply (CSymbol ("Prelude","map")) (CSymbol ("Prelude","fst")))))] []]),
  CFunc ("AllSolutions","getOneSolution") 1 Public (CFuncType (CFuncType (CTVar (0,"a")) (CTCons ("Prelude","Success") [])) (CTCons ("Prelude","IO") [CTCons ("Prelude","Maybe") [CTVar (0,"a")]])) (CRules CFlex [CRule [CPVar (0,"c")] [(CSymbol ("Prelude","success"),CDoExpr [CSPat (CPVar (1,"sols")) (CApply (CSymbol ("AllSolutions","getAllSolutions")) (CVar (0,"c"))),CSExpr (CApply (CSymbol ("Prelude","return")) (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CSymbol ("Prelude","null")) (CVar (1,"sols")))) (CSymbol ("Prelude","Nothing"))) (CApply (CSymbol ("Prelude","Just")) (CApply (CSymbol ("Prelude","head")) (CVar (1,"sols"))))))])] []]),
  CFunc ("AllSolutions","getAllFailures") 2 Public (CFuncType (CTVar (0,"a")) (CFuncType (CFuncType (CTVar (0,"a")) (CTCons ("Prelude","Success") [])) (CTCons ("Prelude","IO") [CTCons ("Prelude","[]") [CTVar (0,"a")]]))) (CRules CFlex [CRule [CPVar (0,"generator"),CPVar (1,"test")] [(CSymbol ("Prelude","success"),CDoExpr [CSPat (CPVar (2,"xs")) (CApply (CSymbol ("AllSolutions","getAllValues")) (CVar (0,"generator"))),CSPat (CPVar (3,"failures")) (CApply (CApply (CSymbol ("Prelude","mapIO")) (CApply (CSymbol ("AllSolutions","naf")) (CVar (1,"test")))) (CVar (2,"xs"))),CSExpr (CApply (CApply (CSymbol ("Prelude","$")) (CSymbol ("Prelude","return"))) (CApply (CSymbol ("Prelude","concat")) (CVar (3,"failures"))))])] []]),
  CFunc ("AllSolutions","naf") 2 Private (CFuncType (CFuncType (CTVar (0,"a")) (CTCons ("Prelude","Success") [])) (CFuncType (CTVar (0,"a")) (CTCons ("Prelude","IO") [CTCons ("Prelude","[]") [CTVar (0,"a")]]))) (CRules CFlex [CRule [CPVar (0,"c"),CPVar (1,"x")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",">>=")) (CApply (CSymbol ("AllSolutions","getOneSolution")) (CApply (CApply (CSymbol ("AllSolutions","lambda")) (CVar (0,"c"))) (CVar (1,"x"))))) (CApply (CSymbol ("AllSolutions","returner")) (CVar (1,"x"))))] []]),
  CFunc ("AllSolutions","lambda") 3 Private (CFuncType (CFuncType (CTVar (0,"a")) (CTCons ("Prelude","Success") [])) (CFuncType (CTVar (0,"a")) (CFuncType (CTCons ("Prelude","()") []) (CTCons ("Prelude","Success") [])))) (CRules CFlex [CRule [CPVar (0,"c"),CPVar (1,"x"),CPVar (2,"_")] [(CSymbol ("Prelude","success"),CApply (CVar (0,"c")) (CVar (1,"x")))] []]),
  CFunc ("AllSolutions","returner") 2 Private (CFuncType (CTVar (0,"a")) (CFuncType (CTCons ("Prelude","Maybe") [CTVar (1,"b")]) (CTCons ("Prelude","IO") [CTCons ("Prelude","[]") [CTVar (0,"a")]]))) (CRules CFlex [CRule [CPVar (0,"x"),CPVar (1,"mbl")] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Prelude","return")) (CApply (CApply (CApply (CSymbol ("Prelude","maybe")) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (0,"x"))) (CSymbol ("Prelude","[]")))) (CApply (CSymbol ("Prelude","const")) (CSymbol ("Prelude","[]")))) (CVar (1,"mbl"))))] []])]
 []
