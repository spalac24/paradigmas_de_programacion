Prog "KeyDatabaseSQLite" ["Global","IO","IOExts","List","Maybe","Prelude","ReadNumeric","ReadShowTerm"] [TypeSyn ("KeyDatabaseSQLite","DBFile") Private [] (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]),TypeSyn ("KeyDatabaseSQLite","TableName") Private [] (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]),TypeSyn ("KeyDatabaseSQLite","ColName") Private [] (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]),TypeSyn ("KeyDatabaseSQLite","Key") Private [] (TCons ("Prelude","Int") []),TypeSyn ("KeyDatabaseSQLite","KeyPred") Private [0] (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (TCons ("KeyDatabaseSQLite","Dynamic") []))),TypeSyn ("KeyDatabaseSQLite","Row") Private [] (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]),TypeSyn ("KeyDatabaseSQLite","Stack") Private [] (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]),Type ("KeyDatabaseSQLite","Query") Public [0] [Cons ("KeyDatabaseSQLite","Query") 1 Private [TCons ("Prelude","IO") [TVar 0]]],Type ("KeyDatabaseSQLite","Transaction") Public [0] [Cons ("KeyDatabaseSQLite","Trans") 1 Private [TCons ("Prelude","IO") [TCons ("KeyDatabaseSQLite","TransResult") [TVar 0]]]],Type ("KeyDatabaseSQLite","TransResult") Private [0] [Cons ("KeyDatabaseSQLite","OK") 1 Private [TVar 0],Cons ("KeyDatabaseSQLite","Error") 1 Private [TCons ("KeyDatabaseSQLite","TError") []]],Type ("KeyDatabaseSQLite","Dynamic") Public [] [Cons ("KeyDatabaseSQLite","DBInfo") 3 Private [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]],Type ("KeyDatabaseSQLite","ColVal") Public [] [Cons ("KeyDatabaseSQLite","ColVal") 2 Private [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]],Type ("KeyDatabaseSQLite","TError") Public [] [Cons ("KeyDatabaseSQLite","TError") 2 Public [TCons ("KeyDatabaseSQLite","TErrorKind") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]],Type ("KeyDatabaseSQLite","TErrorKind") Public [] [Cons ("KeyDatabaseSQLite","KeyNotExistsError") 0 Public [],Cons ("KeyDatabaseSQLite","NoRelationshipError") 0 Public [],Cons ("KeyDatabaseSQLite","DuplicateKeyError") 0 Public [],Cons ("KeyDatabaseSQLite","KeyRequiredError") 0 Public [],Cons ("KeyDatabaseSQLite","UniqueError") 0 Public [],Cons ("KeyDatabaseSQLite","MinError") 0 Public [],Cons ("KeyDatabaseSQLite","MaxError") 0 Public [],Cons ("KeyDatabaseSQLite","UserDefinedError") 0 Public [],Cons ("KeyDatabaseSQLite","ExecutionError") 0 Public []]] [Func ("KeyDatabaseSQLite","path'to'sqlite3") 0 Private (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (Rule [] (Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'q'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  '3'),Comb ConsCall ("Prelude","[]") []]]]]]]])),Func ("KeyDatabaseSQLite","runQ") 1 Public (FuncType (TCons ("KeyDatabaseSQLite","Query") [TVar 0]) (TCons ("Prelude","IO") [TVar 0])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("KeyDatabaseSQLite","Query") [2]) (Var 2)])),Func ("KeyDatabaseSQLite","transformQ") 2 Public (FuncType (FuncType (TVar 0) (TVar 1)) (FuncType (TCons ("KeyDatabaseSQLite","Query") [TVar 0]) (TCons ("KeyDatabaseSQLite","Query") [TVar 1]))) (Rule [1,2] (Comb ConsCall ("KeyDatabaseSQLite","Query") [Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("KeyDatabaseSQLite","runQ") [Var 2],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","return") [],Var 1]]])),Func ("KeyDatabaseSQLite","unTrans") 1 Private (FuncType (TCons ("KeyDatabaseSQLite","Transaction") [TVar 0]) (TCons ("Prelude","IO") [TCons ("KeyDatabaseSQLite","TransResult") [TVar 0]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("KeyDatabaseSQLite","Trans") [2]) (Var 2)])),Func ("KeyDatabaseSQLite","runT") 1 Public (FuncType (TCons ("KeyDatabaseSQLite","Transaction") [TVar 0]) (TCons ("Prelude","IO") [TCons ("Prelude","Either") [TVar 0,TCons ("KeyDatabaseSQLite","TError") []]])) (Rule [1] (Comb FuncCall ("Prelude",">>") [Comb FuncCall ("KeyDatabaseSQLite","beginTransaction") [],Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("KeyDatabaseSQLite","catchTrans") [],Comb FuncCall ("KeyDatabaseSQLite","unTrans") [Var 1]],Comb (FuncPartCall 1) ("KeyDatabaseSQLite","runT._#lambda1") []]])),Func ("KeyDatabaseSQLite","runT._#lambda1") 1 Private (FuncType (TCons ("KeyDatabaseSQLite","TransResult") [TVar 90]) (TCons ("Prelude","IO") [TCons ("Prelude","Either") [TVar 90,TCons ("KeyDatabaseSQLite","TError") []]])) (Rule [1] (Case  Rigid (Var 1) [Branch (Pattern ("KeyDatabaseSQLite","Error") [2]) (Comb FuncCall ("Prelude",">>") [Comb FuncCall ("KeyDatabaseSQLite","rollbackTransaction") [],Comb FuncCall ("Prelude","return") [Comb ConsCall ("Prelude","Right") [Var 2]]]),Branch (Pattern ("KeyDatabaseSQLite","OK") [3]) (Comb FuncCall ("Prelude",">>") [Comb FuncCall ("KeyDatabaseSQLite","commitTransaction") [],Comb FuncCall ("Prelude","return") [Comb ConsCall ("Prelude","Left") [Var 3]]])])),Func ("KeyDatabaseSQLite","catchTrans") 1 Private (FuncType (TCons ("Prelude","IO") [TCons ("KeyDatabaseSQLite","TransResult") [TVar 0]]) (TCons ("Prelude","IO") [TCons ("KeyDatabaseSQLite","TransResult") [TVar 0]])) (Rule [1] (Comb FuncCall ("Prelude","catch") [Var 1,Comb (FuncPartCall 1) ("KeyDatabaseSQLite","catchTrans._#lambda3") []])),Func ("KeyDatabaseSQLite","catchTrans._#lambda3") 1 Private (FuncType (TCons ("Prelude","IOError") []) (TCons ("Prelude","IO") [TCons ("KeyDatabaseSQLite","TransResult") [TVar 989]])) (Rule [1] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Global","readGlobal") [Comb FuncCall ("KeyDatabaseSQLite","lastQueryError") []],Comb (FuncPartCall 1) ("KeyDatabaseSQLite","catchTrans._#lambda3._#lambda4") [Var 1]])),Func ("KeyDatabaseSQLite","catchTrans._#lambda3._#lambda4") 2 Private (FuncType (TCons ("Prelude","IOError") []) (FuncType (TCons ("Prelude","Maybe") [TCons ("KeyDatabaseSQLite","TError") []]) (TCons ("Prelude","IO") [TCons ("KeyDatabaseSQLite","TransResult") [TVar 990]]))) (Rule [1,2] (Comb FuncCall ("Prelude",">>") [Comb FuncCall ("Global","writeGlobal") [Comb FuncCall ("KeyDatabaseSQLite","lastQueryError") [],Comb ConsCall ("Prelude","Nothing") []],Comb FuncCall ("Prelude","$") [Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","return") [],Comb (ConsPartCall 1) ("KeyDatabaseSQLite","Error") []],Comb FuncCall ("Prelude","maybe") [Comb ConsCall ("KeyDatabaseSQLite","TError") [Comb ConsCall ("KeyDatabaseSQLite","ExecutionError") [],Comb FuncCall ("Prelude","showError") [Var 1]],Comb (FuncPartCall 1) ("Prelude","id") [],Var 2]]])),Func ("KeyDatabaseSQLite","runJustT") 1 Public (FuncType (TCons ("KeyDatabaseSQLite","Transaction") [TVar 0]) (TCons ("Prelude","IO") [TVar 0])) (Rule [1] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("KeyDatabaseSQLite","runT") [Var 1],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","return") [],Comb (FuncPartCall 1) ("Prelude","either") [Comb (FuncPartCall 1) ("Prelude","id") [],Comb (FuncPartCall 1) ("KeyDatabaseSQLite","runJustT._#lambda5") []]]])),Func ("KeyDatabaseSQLite","runJustT._#lambda5") 1 Private (FuncType (TCons ("KeyDatabaseSQLite","TError") []) (TVar 991)) (Rule [1] (Comb FuncCall ("Prelude","error") [Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'T'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]],Comb FuncCall ("KeyDatabaseSQLite","showTError") [Var 1]]])),Func ("KeyDatabaseSQLite","getDB") 1 Public (FuncType (TCons ("KeyDatabaseSQLite","Query") [TVar 0]) (TCons ("KeyDatabaseSQLite","Transaction") [TVar 0])) (Rule [1] (Comb FuncCall ("Prelude","$") [Comb FuncCall ("Prelude",".") [Comb (ConsPartCall 1) ("KeyDatabaseSQLite","Trans") [],Comb (FuncPartCall 1) ("KeyDatabaseSQLite","catchTrans") []],Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("KeyDatabaseSQLite","runQ") [Var 1],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","return") [],Comb (ConsPartCall 1) ("KeyDatabaseSQLite","OK") []]]])),Func ("KeyDatabaseSQLite","transIO") 1 Private (FuncType (TCons ("Prelude","IO") [TVar 0]) (TCons ("KeyDatabaseSQLite","Transaction") [TVar 0])) (Rule [1] (Comb ConsCall ("KeyDatabaseSQLite","Trans") [Comb FuncCall ("Prelude",">>=") [Var 1,Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","return") [],Comb (ConsPartCall 1) ("KeyDatabaseSQLite","OK") []]]])),Func ("KeyDatabaseSQLite","returnT") 0 Public (FuncType (TVar 0) (TCons ("KeyDatabaseSQLite","Transaction") [TVar 0])) (Rule [] (Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("KeyDatabaseSQLite","transIO") [],Comb (FuncPartCall 1) ("Prelude","return") []])),Func ("KeyDatabaseSQLite","doneT") 0 Public (TCons ("KeyDatabaseSQLite","Transaction") [TCons ("Prelude","()") []]) (Rule [] (Comb FuncCall ("KeyDatabaseSQLite","transIO") [Comb FuncCall ("Prelude","done") []])),Func ("KeyDatabaseSQLite","errorT") 0 Public (FuncType (TCons ("KeyDatabaseSQLite","TError") []) (TCons ("KeyDatabaseSQLite","Transaction") [TVar 0])) (Rule [] (Comb FuncCall ("Prelude",".") [Comb (ConsPartCall 1) ("KeyDatabaseSQLite","Trans") [],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","return") [],Comb (ConsPartCall 1) ("KeyDatabaseSQLite","Error") []]])),Func ("KeyDatabaseSQLite","failT") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("KeyDatabaseSQLite","Transaction") [TVar 0])) (Rule [] (Comb FuncCall ("Prelude",".") [Comb FuncCall ("KeyDatabaseSQLite","errorT") [],Comb (ConsPartCall 1) ("KeyDatabaseSQLite","TError") [Comb ConsCall ("KeyDatabaseSQLite","UserDefinedError") []]])),Func ("KeyDatabaseSQLite","|>>=") 2 Public (FuncType (TCons ("KeyDatabaseSQLite","Transaction") [TVar 0]) (FuncType (FuncType (TVar 0) (TCons ("KeyDatabaseSQLite","Transaction") [TVar 1])) (TCons ("KeyDatabaseSQLite","Transaction") [TVar 1]))) (Rule [1,2] (Case  Flex (Var 1) [Branch (Pattern ("KeyDatabaseSQLite","Trans") [3]) (Comb FuncCall ("Prelude","$") [Comb (ConsPartCall 1) ("KeyDatabaseSQLite","Trans") [],Comb FuncCall ("Prelude",">>=") [Var 3,Comb (FuncPartCall 1) ("KeyDatabaseSQLite","|>>=._#lambda6") [Var 2]]])])),Func ("KeyDatabaseSQLite","|>>=._#lambda6") 2 Private (FuncType (FuncType (TVar 185) (TCons ("KeyDatabaseSQLite","Transaction") [TVar 188])) (FuncType (TCons ("KeyDatabaseSQLite","TransResult") [TVar 185]) (TCons ("Prelude","IO") [TCons ("KeyDatabaseSQLite","TransResult") [TVar 188]]))) (Rule [1,2] (Case  Rigid (Var 2) [Branch (Pattern ("KeyDatabaseSQLite","Error") [3]) (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Prelude","return") [],Comb ConsCall ("KeyDatabaseSQLite","Error") [Var 3]]),Branch (Pattern ("KeyDatabaseSQLite","OK") [4]) (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("KeyDatabaseSQLite","unTrans") [],Comb FuncCall ("Prelude","apply") [Var 1,Var 4]])])),Func ("KeyDatabaseSQLite","|>>") 2 Public (FuncType (TCons ("KeyDatabaseSQLite","Transaction") [TVar 0]) (FuncType (TCons ("KeyDatabaseSQLite","Transaction") [TVar 1]) (TCons ("KeyDatabaseSQLite","Transaction") [TVar 1]))) (Rule [1,2] (Comb FuncCall ("KeyDatabaseSQLite","|>>=") [Var 1,Comb (FuncPartCall 1) ("Prelude","const") [Var 2]])),Func ("KeyDatabaseSQLite","sequenceT") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("KeyDatabaseSQLite","Transaction") [TVar 0]]) (TCons ("KeyDatabaseSQLite","Transaction") [TCons ("Prelude","[]") [TVar 0]])) (Rule [] (Comb (FuncPartCall 1) ("Prelude","foldr") [Comb (FuncPartCall 2) ("KeyDatabaseSQLite","sequenceT.seqT.45") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("KeyDatabaseSQLite","returnT") [],Comb ConsCall ("Prelude","[]") []]])),Func ("KeyDatabaseSQLite","sequenceT.seqT.45") 2 Private (FuncType (TCons ("KeyDatabaseSQLite","Transaction") [TVar 0]) (FuncType (TCons ("KeyDatabaseSQLite","Transaction") [TCons ("Prelude","[]") [TVar 0]]) (TCons ("KeyDatabaseSQLite","Transaction") [TCons ("Prelude","[]") [TVar 0]]))) (Rule [1,2] (Comb FuncCall ("KeyDatabaseSQLite","|>>=") [Var 1,Comb (FuncPartCall 1) ("KeyDatabaseSQLite","sequenceT.seqT.45._#lambda8") [Var 2]])),Func ("KeyDatabaseSQLite","sequenceT.seqT.45._#lambda8") 2 Private (FuncType (TCons ("KeyDatabaseSQLite","Transaction") [TCons ("Prelude","[]") [TVar 205]]) (FuncType (TVar 205) (TCons ("KeyDatabaseSQLite","Transaction") [TCons ("Prelude","[]") [TVar 205]]))) (Rule [1,2] (Comb FuncCall ("KeyDatabaseSQLite","|>>=") [Var 1,Comb (FuncPartCall 1) ("KeyDatabaseSQLite","sequenceT.seqT.45._#lambda8._#lambda9") [Var 2]])),Func ("KeyDatabaseSQLite","sequenceT.seqT.45._#lambda8._#lambda9") 2 Private (FuncType (TVar 205) (FuncType (TCons ("Prelude","[]") [TVar 205]) (TCons ("KeyDatabaseSQLite","Transaction") [TCons ("Prelude","[]") [TVar 205]]))) (Rule [1,2] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("KeyDatabaseSQLite","returnT") [],Comb ConsCall ("Prelude",":") [Var 1,Var 2]])),Func ("KeyDatabaseSQLite","sequenceT_") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("KeyDatabaseSQLite","Transaction") [TVar 0]]) (TCons ("KeyDatabaseSQLite","Transaction") [TCons ("Prelude","()") []])) (Rule [] (Comb (FuncPartCall 1) ("Prelude","foldr") [Comb (FuncPartCall 2) ("KeyDatabaseSQLite","|>>") [],Comb FuncCall ("KeyDatabaseSQLite","doneT") []])),Func ("KeyDatabaseSQLite","mapT") 1 Public (FuncType (FuncType (TVar 0) (TCons ("KeyDatabaseSQLite","Transaction") [TVar 1])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("KeyDatabaseSQLite","Transaction") [TCons ("Prelude","[]") [TVar 1]]))) (Rule [1] (Comb FuncCall ("Prelude",".") [Comb FuncCall ("KeyDatabaseSQLite","sequenceT") [],Comb (FuncPartCall 1) ("Prelude","map") [Var 1]])),Func ("KeyDatabaseSQLite","mapT_") 1 Public (FuncType (FuncType (TVar 0) (TCons ("KeyDatabaseSQLite","Transaction") [TVar 1])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("KeyDatabaseSQLite","Transaction") [TCons ("Prelude","()") []]))) (Rule [1] (Comb FuncCall ("Prelude",".") [Comb FuncCall ("KeyDatabaseSQLite","sequenceT_") [],Comb (FuncPartCall 1) ("Prelude","map") [Var 1]])),Func ("KeyDatabaseSQLite","dbInfo") 1 Private (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (TCons ("KeyDatabaseSQLite","Dynamic") []))) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]])) (Rule [1] (Let [(2,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 1,Comb FuncCall ("KeyDatabaseSQLite","ignored") []],Comb FuncCall ("KeyDatabaseSQLite","ignored") []]),(3,Comb FuncCall ("KeyDatabaseSQLite","dbInfo._#selFP2#db") [Var 2]),(4,Comb FuncCall ("KeyDatabaseSQLite","dbInfo._#selFP3#table") [Var 2]),(5,Comb FuncCall ("KeyDatabaseSQLite","dbInfo._#selFP4#cols") [Var 2])] (Comb ConsCall ("Prelude","(,)") [Var 3,Comb ConsCall ("Prelude","(,)") [Var 4,Var 5]]))),Func ("KeyDatabaseSQLite","dbInfo._#selFP2#db") 1 Private (FuncType (TCons ("KeyDatabaseSQLite","Dynamic") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("KeyDatabaseSQLite","DBInfo") [2,3,4]) (Var 2)])),Func ("KeyDatabaseSQLite","dbInfo._#selFP3#table") 1 Private (FuncType (TCons ("KeyDatabaseSQLite","Dynamic") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("KeyDatabaseSQLite","DBInfo") [2,3,4]) (Var 3)])),Func ("KeyDatabaseSQLite","dbInfo._#selFP4#cols") 1 Private (FuncType (TCons ("KeyDatabaseSQLite","Dynamic") []) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("KeyDatabaseSQLite","DBInfo") [2,3,4]) (Var 4)])),Func ("KeyDatabaseSQLite","ignored") 0 Private (TVar 0) (Rule [] (Comb FuncCall ("Prelude","error") [Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'b'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])),Func ("KeyDatabaseSQLite","dbFile") 0 Private (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (TCons ("KeyDatabaseSQLite","Dynamic") []))) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","fst") [],Comb (FuncPartCall 1) ("KeyDatabaseSQLite","dbInfo") []])),Func ("KeyDatabaseSQLite","tableName") 0 Private (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (TCons ("KeyDatabaseSQLite","Dynamic") []))) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","fst") [],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","snd") [],Comb (FuncPartCall 1) ("KeyDatabaseSQLite","dbInfo") []]])),Func ("KeyDatabaseSQLite","colNames") 0 Private (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (TCons ("KeyDatabaseSQLite","Dynamic") []))) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [] (Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","snd") [],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","snd") [],Comb (FuncPartCall 1) ("KeyDatabaseSQLite","dbInfo") []]])),Func ("KeyDatabaseSQLite","persistentSQLite") 5 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (TCons ("KeyDatabaseSQLite","Dynamic") [])))))) (Rule [1,2,3,4,5] (Case  Rigid (Comb FuncCall ("Prelude","null") [Var 3]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("KeyDatabaseSQLite","DBInfo") [Var 1,Var 2,Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude","[]") []]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","elem") [Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude","[]") []]]]]]]]],Var 3]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","error") [Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'b'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("KeyDatabaseSQLite","DBInfo") [Var 1,Var 2,Var 3]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])),Func ("KeyDatabaseSQLite","existsDBKey") 2 Public (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (TCons ("KeyDatabaseSQLite","Dynamic") []))) (FuncType (TCons ("Prelude","Int") []) (TCons ("KeyDatabaseSQLite","Query") [TCons ("Prelude","Bool") []]))) (Rule [1,2] (Comb FuncCall ("Prelude","$") [Comb (ConsPartCall 1) ("KeyDatabaseSQLite","Query") [],Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("KeyDatabaseSQLite","selectInt") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb ConsCall ("Prelude",":") [Lit (Charc  '*'),Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude","[]") []]]]]]]]]],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '='),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]],Comb FuncCall ("Prelude","show") [Var 2]]],Comb (FuncPartCall 1) ("KeyDatabaseSQLite","existsDBKey._#lambda10") []]])),Func ("KeyDatabaseSQLite","existsDBKey._#lambda10") 1 Private (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","IO") [TCons ("Prelude","Bool") []])) (Rule [1] (Comb FuncCall ("Prelude","$!") [Comb (FuncPartCall 1) ("Prelude","return") [],Comb FuncCall ("Prelude",">") [Var 1,Lit (Intc  0)]])),Func ("KeyDatabaseSQLite","allDBKeys") 1 Public (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (TCons ("KeyDatabaseSQLite","Dynamic") []))) (TCons ("KeyDatabaseSQLite","Query") [TCons ("Prelude","[]") [TCons ("Prelude","Int") []]])) (Rule [1] (Comb FuncCall ("Prelude","$") [Comb (ConsPartCall 1) ("KeyDatabaseSQLite","Query") [],Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("KeyDatabaseSQLite","selectRows") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb ConsCall ("Prelude","[]") []],Comb (FuncPartCall 1) ("KeyDatabaseSQLite","allDBKeys._#lambda11") []]])),Func ("KeyDatabaseSQLite","allDBKeys._#lambda11") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","IO") [TCons ("Prelude","[]") [TCons ("Prelude","Int") []]])) (Rule [1] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","mapIO") [Comb (FuncPartCall 1) ("KeyDatabaseSQLite","readIntOrExit") []],Var 1])),Func ("KeyDatabaseSQLite","allDBInfos") 1 Public (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (TCons ("KeyDatabaseSQLite","Dynamic") []))) (TCons ("KeyDatabaseSQLite","Query") [TCons ("Prelude","[]") [TVar 0]])) (Rule [1] (Comb FuncCall ("Prelude","$") [Comb (ConsPartCall 1) ("KeyDatabaseSQLite","Query") [],Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("KeyDatabaseSQLite","selectRows") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc  '*'),Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude","[]") []],Comb (FuncPartCall 1) ("KeyDatabaseSQLite","allDBInfos._#lambda12") []]])),Func ("KeyDatabaseSQLite","allDBInfos._#lambda12") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","IO") [TCons ("Prelude","[]") [TVar 992]])) (Rule [1] (Comb FuncCall ("Prelude","$!!") [Comb (FuncPartCall 1) ("Prelude","return") [],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("KeyDatabaseSQLite","readInfo") [],Var 1]])),Func ("KeyDatabaseSQLite","readInfo") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TVar 0)) (Rule [1] (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("ReadShowTerm","readQTerm") [],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude","[]") []]]]])),Func ("KeyDatabaseSQLite","allDBKeyInfos") 1 Public (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (TCons ("KeyDatabaseSQLite","Dynamic") []))) (TCons ("KeyDatabaseSQLite","Query") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TVar 0]]])) (Rule [1] (Comb FuncCall ("Prelude","$") [Comb (ConsPartCall 1) ("KeyDatabaseSQLite","Query") [],Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("KeyDatabaseSQLite","selectRows") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude",":") [Lit (Charc  ','),Comb ConsCall ("Prelude",":") [Lit (Charc  '*'),Comb ConsCall ("Prelude","[]") []]]]]]]]]],Comb ConsCall ("Prelude","[]") []],Comb (FuncPartCall 1) ("KeyDatabaseSQLite","allDBKeyInfos._#lambda13") []]])),Func ("KeyDatabaseSQLite","allDBKeyInfos._#lambda13") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","IO") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TVar 993]]])) (Rule [1] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","mapIO") [Comb (FuncPartCall 1) ("KeyDatabaseSQLite","readKeyInfo") []],Var 1])),Func ("KeyDatabaseSQLite","readKeyInfo") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TVar 0]])) (Rule [1] (Let [(2,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","break") [Comb (FuncPartCall 1) ("Prelude","==") [Lit (Charc  ',')]],Var 1]),(3,Comb FuncCall ("KeyDatabaseSQLite","readKeyInfo._#selFP6#keyStr") [Var 2]),(4,Comb FuncCall ("KeyDatabaseSQLite","readKeyInfo._#selFP7#infoStr") [Var 2])] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("KeyDatabaseSQLite","readIntOrExit") [Var 3],Comb (FuncPartCall 1) ("KeyDatabaseSQLite","readKeyInfo._#lambda14") [Var 4]]))),Func ("KeyDatabaseSQLite","readKeyInfo._#selFP6#keyStr") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Var 2)])])),Func ("KeyDatabaseSQLite","readKeyInfo._#selFP7#infoStr") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Var 5)])])),Func ("KeyDatabaseSQLite","readKeyInfo._#lambda14") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","IO") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TVar 994]]))) (Rule [1,2] (Comb FuncCall ("Prelude","$!!") [Comb (FuncPartCall 1) ("Prelude","return") [],Comb ConsCall ("Prelude","(,)") [Var 2,Comb FuncCall ("KeyDatabaseSQLite","readInfo") [Var 1]]])),Func ("KeyDatabaseSQLite","@=") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (TCons ("KeyDatabaseSQLite","ColVal") []))) (Rule [1,2] (Comb FuncCall ("Prelude","$") [Comb FuncCall ("Prelude",".") [Comb (ConsPartCall 1) ("KeyDatabaseSQLite","ColVal") [Var 1],Comb (FuncPartCall 1) ("KeyDatabaseSQLite","quote") []],Comb FuncCall ("ReadShowTerm","showQTerm") [Var 2]])),Func ("KeyDatabaseSQLite","someDBKeys") 2 Public (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (TCons ("KeyDatabaseSQLite","Dynamic") []))) (FuncType (TCons ("Prelude","[]") [TCons ("KeyDatabaseSQLite","ColVal") []]) (TCons ("KeyDatabaseSQLite","Query") [TCons ("Prelude","[]") [TCons ("Prelude","Int") []]]))) (Rule [1,2] (Comb FuncCall ("Prelude","$") [Comb (ConsPartCall 1) ("KeyDatabaseSQLite","Query") [],Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("KeyDatabaseSQLite","selectSomeRows") [Var 1,Var 2,Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude","[]") []]]]]]]]],Comb (FuncPartCall 1) ("KeyDatabaseSQLite","someDBKeys._#lambda15") []]])),Func ("KeyDatabaseSQLite","someDBKeys._#lambda15") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","IO") [TCons ("Prelude","[]") [TCons ("Prelude","Int") []]])) (Rule [1] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","mapIO") [Comb (FuncPartCall 1) ("KeyDatabaseSQLite","readIntOrExit") []],Var 1])),Func ("KeyDatabaseSQLite","someDBInfos") 2 Public (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (TCons ("KeyDatabaseSQLite","Dynamic") []))) (FuncType (TCons ("Prelude","[]") [TCons ("KeyDatabaseSQLite","ColVal") []]) (TCons ("KeyDatabaseSQLite","Query") [TCons ("Prelude","[]") [TVar 0]]))) (Rule [1,2] (Comb FuncCall ("Prelude","$") [Comb (ConsPartCall 1) ("KeyDatabaseSQLite","Query") [],Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("KeyDatabaseSQLite","selectSomeRows") [Var 1,Var 2,Comb ConsCall ("Prelude",":") [Lit (Charc  '*'),Comb ConsCall ("Prelude","[]") []]],Comb (FuncPartCall 1) ("KeyDatabaseSQLite","someDBInfos._#lambda16") []]])),Func ("KeyDatabaseSQLite","someDBInfos._#lambda16") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","IO") [TCons ("Prelude","[]") [TVar 995]])) (Rule [1] (Comb FuncCall ("Prelude","$!!") [Comb (FuncPartCall 1) ("Prelude","return") [],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("KeyDatabaseSQLite","readInfo") [],Var 1]])),Func ("KeyDatabaseSQLite","someDBKeyInfos") 2 Public (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (TCons ("KeyDatabaseSQLite","Dynamic") []))) (FuncType (TCons ("Prelude","[]") [TCons ("KeyDatabaseSQLite","ColVal") []]) (TCons ("KeyDatabaseSQLite","Query") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TVar 0]]]))) (Rule [1,2] (Comb FuncCall ("Prelude","$") [Comb (ConsPartCall 1) ("KeyDatabaseSQLite","Query") [],Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("KeyDatabaseSQLite","selectSomeRows") [Var 1,Var 2,Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude",":") [Lit (Charc  ','),Comb ConsCall ("Prelude",":") [Lit (Charc  '*'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]],Comb (FuncPartCall 1) ("KeyDatabaseSQLite","someDBKeyInfos._#lambda17") []]])),Func ("KeyDatabaseSQLite","someDBKeyInfos._#lambda17") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","IO") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TVar 996]]])) (Rule [1] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","mapIO") [Comb (FuncPartCall 1) ("KeyDatabaseSQLite","readKeyInfo") []],Var 1])),Func ("KeyDatabaseSQLite","someDBKeyProjections") 3 Public (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (TCons ("KeyDatabaseSQLite","Dynamic") []))) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (FuncType (TCons ("Prelude","[]") [TCons ("KeyDatabaseSQLite","ColVal") []]) (TCons ("KeyDatabaseSQLite","Query") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TVar 1]]])))) (Rule [1,2,3] (Comb FuncCall ("Prelude","$") [Comb (ConsPartCall 1) ("KeyDatabaseSQLite","Query") [],Let [(4,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("KeyDatabaseSQLite","commaSep") [],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Prelude","!!") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("KeyDatabaseSQLite","colNames") [],Var 1]],Var 2]])] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("KeyDatabaseSQLite","selectSomeRows") [Var 1,Var 3,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude",":") [Lit (Charc  ','),Comb ConsCall ("Prelude","[]") []]]]]]]]],Var 4]],Comb (FuncPartCall 1) ("KeyDatabaseSQLite","someDBKeyProjections._#lambda18") []])])),Func ("KeyDatabaseSQLite","someDBKeyProjections._#lambda18") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","IO") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TVar 997]]])) (Rule [1] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","mapIO") [Comb (FuncPartCall 1) ("KeyDatabaseSQLite","readKeyInfo") []],Var 1])),Func ("KeyDatabaseSQLite","getDBInfo") 2 Public (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (TCons ("KeyDatabaseSQLite","Dynamic") []))) (FuncType (TCons ("Prelude","Int") []) (TCons ("KeyDatabaseSQLite","Query") [TCons ("Prelude","Maybe") [TVar 0]]))) (Rule [1,2] (Comb FuncCall ("Prelude","$") [Comb (ConsPartCall 1) ("KeyDatabaseSQLite","Query") [],Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("KeyDatabaseSQLite","selectRows") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc  '*'),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '='),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]],Comb FuncCall ("Prelude","show") [Var 2]]],Comb (FuncPartCall 1) ("KeyDatabaseSQLite","getDBInfo._#lambda19") []]])),Func ("KeyDatabaseSQLite","getDBInfo.readHeadIfExists.108") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","IO") [TCons ("Prelude","Maybe") [TVar 0]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","return") [Comb ConsCall ("Prelude","Nothing") []]),Branch (Pattern ("Prelude",":") [2,3]) (Comb FuncCall ("Prelude","$!!") [Comb (FuncPartCall 1) ("Prelude","return") [],Comb ConsCall ("Prelude","Just") [Comb FuncCall ("KeyDatabaseSQLite","readInfo") [Var 2]]])])),Func ("KeyDatabaseSQLite","getDBInfo._#lambda19") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","IO") [TCons ("Prelude","Maybe") [TVar 998]])) (Rule [1] (Comb FuncCall ("KeyDatabaseSQLite","getDBInfo.readHeadIfExists.108") [Var 1])),Func ("KeyDatabaseSQLite","getDBInfos") 2 Public (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (TCons ("KeyDatabaseSQLite","Dynamic") []))) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("KeyDatabaseSQLite","Query") [TCons ("Prelude","Maybe") [TCons ("Prelude","[]") [TVar 0]]]))) (Rule [1,2] (Comb FuncCall ("Prelude","$") [Comb (ConsPartCall 1) ("KeyDatabaseSQLite","Query") [],Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("KeyDatabaseSQLite","selectRows") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude",":") [Lit (Charc  ','),Comb ConsCall ("Prelude",":") [Lit (Charc  '*'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("KeyDatabaseSQLite","commaSep") [],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Prelude","show") [],Var 2]],Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude","[]") []]]]],Comb (FuncPartCall 1) ("KeyDatabaseSQLite","getDBInfos._#lambda22") [Var 2]]])),Func ("KeyDatabaseSQLite","getDBInfos.sortByIndexInGivenList.116") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","IO") [TCons ("Prelude","Maybe") [TCons ("Prelude","[]") [TVar 0]]]))) (Rule [1,2] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","mapIO") [Comb (FuncPartCall 1) ("KeyDatabaseSQLite","readKeyInfo") []],Var 2],Comb (FuncPartCall 1) ("KeyDatabaseSQLite","getDBInfos.sortByIndexInGivenList.116._#lambda20") [Var 1]])),Func ("KeyDatabaseSQLite","getDBInfos.sortByIndexInGivenList.116._#lambda20") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TVar 715]]) (TCons ("Prelude","IO") [TCons ("Prelude","Maybe") [TCons ("Prelude","[]") [TVar 715]]]))) (Rule [1,2] (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Prelude","return") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Maybe","mapMMaybe") [Comb (FuncPartCall 1) ("KeyDatabaseSQLite","getDBInfos.sortByIndexInGivenList.116._#lambda20._#lambda21") [Var 2]],Var 1]])),Func ("KeyDatabaseSQLite","getDBInfos.sortByIndexInGivenList.116._#lambda20._#lambda21") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TVar 715]]) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Maybe") [TVar 715]))) (Rule [1,2] (Comb FuncCall ("Prelude","lookup") [Var 2,Var 1])),Func ("KeyDatabaseSQLite","getDBInfos._#lambda22") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","IO") [TCons ("Prelude","Maybe") [TCons ("Prelude","[]") [TVar 999]]]))) (Rule [1,2] (Comb FuncCall ("KeyDatabaseSQLite","getDBInfos.sortByIndexInGivenList.116") [Var 1,Var 2])),Func ("KeyDatabaseSQLite","commaSep") 0 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","concat") [],Comb (FuncPartCall 1) ("List","intersperse") [Comb ConsCall ("Prelude",":") [Lit (Charc  ','),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]])),Func ("KeyDatabaseSQLite","deleteDBEntry") 2 Public (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (TCons ("KeyDatabaseSQLite","Dynamic") []))) (FuncType (TCons ("Prelude","Int") []) (TCons ("KeyDatabaseSQLite","Transaction") [TCons ("Prelude","()") []]))) (Rule [1,2] (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("KeyDatabaseSQLite","modify") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '='),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]],Comb FuncCall ("Prelude","show") [Var 2]]])),Func ("KeyDatabaseSQLite","deleteDBEntries") 2 Public (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (TCons ("KeyDatabaseSQLite","Dynamic") []))) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("KeyDatabaseSQLite","Transaction") [TCons ("Prelude","()") []]))) (Rule [1,2] (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("KeyDatabaseSQLite","modify") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("KeyDatabaseSQLite","commaSep") [],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Prelude","show") [],Var 2]],Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude","[]") []]]]])),Func ("KeyDatabaseSQLite","updateDBEntry") 3 Public (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (TCons ("KeyDatabaseSQLite","Dynamic") []))) (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (TCons ("KeyDatabaseSQLite","Transaction") [TCons ("Prelude","()") []])))) (Rule [1,2,3] (Comb FuncCall ("KeyDatabaseSQLite","|>>") [Comb FuncCall ("KeyDatabaseSQLite","errorUnlessKeyExists") [Var 1,Var 2,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'D'),Comb ConsCall ("Prelude",":") [Lit (Charc  'B'),Comb ConsCall ("Prelude",":") [Lit (Charc  'E'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  ','),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]],Comb FuncCall ("Prelude","show") [Var 2]]],Comb FuncCall ("KeyDatabaseSQLite","modify") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("KeyDatabaseSQLite","commaSep") [],Comb FuncCall ("KeyDatabaseSQLite","colVals") [Var 1,Var 3]],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '='),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]],Comb FuncCall ("Prelude","show") [Var 2]]]]]])),Func ("KeyDatabaseSQLite","errorUnlessKeyExists") 3 Private (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (TCons ("KeyDatabaseSQLite","Dynamic") []))) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("KeyDatabaseSQLite","Transaction") [TCons ("Prelude","()") []])))) (Rule [1,2,3] (Comb FuncCall ("KeyDatabaseSQLite","|>>=") [Comb FuncCall ("KeyDatabaseSQLite","getDB") [Comb FuncCall ("KeyDatabaseSQLite","existsDBKey") [Var 1,Var 2]],Comb (FuncPartCall 1) ("KeyDatabaseSQLite","errorUnlessKeyExists._#lambda23") [Var 3]])),Func ("KeyDatabaseSQLite","errorUnlessKeyExists._#lambda23") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","Bool") []) (TCons ("KeyDatabaseSQLite","Transaction") [TCons ("Prelude","()") []]))) (Rule [1,2] (Case  Rigid (Comb FuncCall ("Prelude","not") [Var 2]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","$") [Comb FuncCall ("KeyDatabaseSQLite","errorT") [],Comb ConsCall ("KeyDatabaseSQLite","TError") [Comb ConsCall ("KeyDatabaseSQLite","KeyNotExistsError") [],Var 1]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("KeyDatabaseSQLite","doneT") [])])),Func ("KeyDatabaseSQLite","colVals") 2 Private (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (TCons ("KeyDatabaseSQLite","Dynamic") []))) (FuncType (TVar 0) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]))) (Rule [1,2] (Comb FuncCall ("Prelude","zipWith") [Comb (FuncPartCall 2) ("KeyDatabaseSQLite","colVals._#lambda24") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("KeyDatabaseSQLite","colNames") [],Var 1],Comb FuncCall ("KeyDatabaseSQLite","infoVals") [Var 1,Var 2]])),Func ("KeyDatabaseSQLite","colVals._#lambda24") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1,2] (Comb FuncCall ("Prelude","++") [Var 1,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '='),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]],Var 2]])),Func ("KeyDatabaseSQLite","infoVals") 2 Private (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (TCons ("KeyDatabaseSQLite","Dynamic") []))) (FuncType (TVar 0) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]))) (Rule [1,2] (Case  Rigid (Comb FuncCall ("Prelude","$") [Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","null") [],Comb (FuncPartCall 1) ("Prelude","tail") []],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("KeyDatabaseSQLite","colNames") [],Var 1]]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("KeyDatabaseSQLite","quote") [],Comb FuncCall ("ReadShowTerm","showQTerm") [Var 2]],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Prelude","map") [Comb (FuncPartCall 1) ("KeyDatabaseSQLite","quote") []],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("KeyDatabaseSQLite","showTupleArgs") [],Var 2]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])),Func ("KeyDatabaseSQLite","quote") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '\''),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","concatMap") [Comb (FuncPartCall 1) ("KeyDatabaseSQLite","quote.quoteChar.139") []],Var 1],Comb ConsCall ("Prelude",":") [Lit (Charc  '\''),Comb ConsCall ("Prelude","[]") []]]])),Func ("KeyDatabaseSQLite","quote.quoteChar.139") 1 Private (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 1,Lit (Charc  '\'')]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  '\''),Comb ConsCall ("Prelude",":") [Lit (Charc  '\''),Comb ConsCall ("Prelude","[]") []]]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude",":") [Var 1,Comb ConsCall ("Prelude","[]") []])])),Func ("KeyDatabaseSQLite","newDBEntry") 2 Public (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (TCons ("KeyDatabaseSQLite","Dynamic") []))) (FuncType (TVar 0) (TCons ("KeyDatabaseSQLite","Transaction") [TCons ("Prelude","Int") []]))) (Rule [1,2] (Comb FuncCall ("KeyDatabaseSQLite","|>>") [Comb FuncCall ("KeyDatabaseSQLite","modify") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'v'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb ConsCall ("Prelude","[]") []]]]]]]]],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("KeyDatabaseSQLite","commaSep") [],Comb FuncCall ("KeyDatabaseSQLite","infoVals") [Var 1,Var 2]],Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("KeyDatabaseSQLite","getDB") [Comb FuncCall ("Prelude","$") [Comb (ConsPartCall 1) ("KeyDatabaseSQLite","Query") [],Comb FuncCall ("KeyDatabaseSQLite","selectInt") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]],Comb ConsCall ("Prelude","[]") []]]]])),Func ("KeyDatabaseSQLite","newDBKeyEntry") 3 Public (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (TCons ("KeyDatabaseSQLite","Dynamic") []))) (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (TCons ("KeyDatabaseSQLite","Transaction") [TCons ("Prelude","()") []])))) (Rule [1,2,3] (Comb FuncCall ("KeyDatabaseSQLite","|>>=") [Comb FuncCall ("KeyDatabaseSQLite","getDB") [Comb FuncCall ("KeyDatabaseSQLite","existsDBKey") [Var 1,Var 2]],Comb (FuncPartCall 1) ("KeyDatabaseSQLite","newDBKeyEntry._#lambda25") [Var 3,Var 2,Var 1]])),Func ("KeyDatabaseSQLite","newDBKeyEntry._#lambda25") 4 Private (FuncType (TVar 950) (FuncType (TCons ("Prelude","Int") []) (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 950) (TCons ("KeyDatabaseSQLite","Dynamic") []))) (FuncType (TCons ("Prelude","Bool") []) (TCons ("KeyDatabaseSQLite","Transaction") [TCons ("Prelude","()") []]))))) (Rule [1,2,3,4] (Case  Rigid (Var 4) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","$") [Comb FuncCall ("Prelude",".") [Comb FuncCall ("KeyDatabaseSQLite","errorT") [],Comb (ConsPartCall 1) ("KeyDatabaseSQLite","TError") [Comb ConsCall ("KeyDatabaseSQLite","DuplicateKeyError") []]],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'b'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'k'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],Comb FuncCall ("Prelude","show") [Var 2]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("KeyDatabaseSQLite","|>>=") [Comb FuncCall ("KeyDatabaseSQLite","|>>") [Comb FuncCall ("KeyDatabaseSQLite","modify") [Var 3,Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'v'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb ConsCall ("Prelude","[]") []]]]]]]]],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("KeyDatabaseSQLite","commaSep") [],Comb FuncCall ("KeyDatabaseSQLite","infoVals") [Var 3,Var 1]],Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("KeyDatabaseSQLite","getDB") [Comb FuncCall ("Prelude","$") [Comb (ConsPartCall 1) ("KeyDatabaseSQLite","Query") [],Comb FuncCall ("KeyDatabaseSQLite","selectInt") [Var 3,Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]],Comb ConsCall ("Prelude","[]") []]]]],Comb (FuncPartCall 1) ("KeyDatabaseSQLite","newDBKeyEntry._#lambda25._#lambda26") [Var 2,Var 3]])])),Func ("KeyDatabaseSQLite","newDBKeyEntry._#lambda25._#lambda26") 3 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 950) (TCons ("KeyDatabaseSQLite","Dynamic") []))) (FuncType (TCons ("Prelude","Int") []) (TCons ("KeyDatabaseSQLite","Transaction") [TCons ("Prelude","()") []])))) (Rule [1,2,3] (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("KeyDatabaseSQLite","modify") [Var 2,Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '='),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","show") [Var 1],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '='),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]],Comb FuncCall ("Prelude","show") [Var 3]]]]])),Func ("KeyDatabaseSQLite","cleanDB") 1 Public (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (TCons ("KeyDatabaseSQLite","Dynamic") []))) (TCons ("KeyDatabaseSQLite","Transaction") [TCons ("Prelude","()") []])) (Rule [1] (Comb FuncCall ("KeyDatabaseSQLite","modify") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]],Comb ConsCall ("Prelude","[]") []])),Func ("KeyDatabaseSQLite","sqlite3") 2 Private (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (TCons ("KeyDatabaseSQLite","Dynamic") []))) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("IO","Handle") []]))) (Rule [1,2] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("KeyDatabaseSQLite","getDBHandle") [Var 1],Comb (FuncPartCall 1) ("KeyDatabaseSQLite","sqlite3._#lambda27") [Var 2]])),Func ("KeyDatabaseSQLite","sqlite3._#lambda27") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("IO","Handle") []) (TCons ("Prelude","IO") [TCons ("IO","Handle") []]))) (Rule [1,2] (Comb FuncCall ("Prelude",">>") [Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("KeyDatabaseSQLite","hPutAndFlush") [Var 2],Comb FuncCall ("Prelude","++") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc  ';'),Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("Prelude","return") [Var 2]])),Func ("KeyDatabaseSQLite","hPutAndFlush") 2 Private (FuncType (TCons ("IO","Handle") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []]))) (Rule [1,2] (Comb FuncCall ("Prelude",">>") [Comb FuncCall ("IO","hPutStrLn") [Var 1,Var 2],Comb FuncCall ("IO","hFlush") [Var 1]])),Func ("KeyDatabaseSQLite","modify") 3 Private (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (TCons ("KeyDatabaseSQLite","Dynamic") []))) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("KeyDatabaseSQLite","Transaction") [TCons ("Prelude","()") []])))) (Rule [1,2,3] (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("KeyDatabaseSQLite","transIO") [],Comb FuncCall ("Prelude",">>") [Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("KeyDatabaseSQLite","sqlite3") [Var 1],Comb FuncCall ("Prelude","++") [Var 2,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("KeyDatabaseSQLite","tableName") [],Var 1],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []],Var 3]]]]],Comb FuncCall ("Prelude","done") []]])),Func ("KeyDatabaseSQLite","selectInt") 3 Private (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (TCons ("KeyDatabaseSQLite","Dynamic") []))) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","Int") []])))) (Rule [1,2,3] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("KeyDatabaseSQLite","sqlite3") [Var 1],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]],Comb FuncCall ("Prelude","++") [Var 2,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("KeyDatabaseSQLite","tableName") [],Var 1],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []],Var 3]]]]]],Comb (FuncPartCall 1) ("KeyDatabaseSQLite","selectInt._#lambda28") []])),Func ("KeyDatabaseSQLite","selectInt._#lambda28") 1 Private (FuncType (TCons ("IO","Handle") []) (TCons ("Prelude","IO") [TCons ("Prelude","Int") []])) (Rule [1] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("IO","hGetLine") [Var 1],Comb (FuncPartCall 1) ("KeyDatabaseSQLite","readIntOrExit") []])),Func ("KeyDatabaseSQLite","readIntOrExit") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","Int") []])) (Rule [1] (Let [(2,Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("KeyDatabaseSQLite","dbError") [Comb ConsCall ("KeyDatabaseSQLite","ExecutionError") []],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'I'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'O'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'E'),Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '\''),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","show") [Var 1],Comb ConsCall ("Prelude",":") [Lit (Charc  '\''),Comb ConsCall ("Prelude","[]") []]]]])] (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Prelude","maybe") [Var 2,Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","return") [],Comb (FuncPartCall 1) ("Prelude","fst") []]],Comb FuncCall ("ReadNumeric","readInt") [Var 1]]))),Func ("KeyDatabaseSQLite","selectRows") 3 Private (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (TCons ("KeyDatabaseSQLite","Dynamic") []))) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("KeyDatabaseSQLite","sqlite3") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'b'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'b'),Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb ConsCall ("Prelude",":") [Lit (Charc  '8'),Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]],Comb (FuncPartCall 1) ("KeyDatabaseSQLite","selectRows._#lambda29") [Var 2,Var 3,Var 1]])),Func ("KeyDatabaseSQLite","selectRows._#lambda29") 4 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 509) (TCons ("KeyDatabaseSQLite","Dynamic") []))) (FuncType (TCons ("IO","Handle") []) (TCons ("Prelude","IO") [TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [1,2,3,4] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("IO","hGetLine") [Var 4],Comb (FuncPartCall 1) ("KeyDatabaseSQLite","selectRows._#lambda29._#lambda30") [Var 1,Var 2,Var 4,Var 3]])),Func ("KeyDatabaseSQLite","selectRows._#lambda29._#lambda30") 5 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("IO","Handle") []) (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 509) (TCons ("KeyDatabaseSQLite","Dynamic") []))) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))) (Rule [1,2,3,4,5] (Comb FuncCall ("Prelude",">>") [Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("KeyDatabaseSQLite","hPutAndFlush") [Var 3],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb FuncCall ("Prelude","++") [Var 1,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("KeyDatabaseSQLite","tableName") [],Var 4],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Var 2,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ';'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]],Comb FuncCall ("Prelude","++") [Comb FuncCall ("KeyDatabaseSQLite","quote") [Var 5],Comb ConsCall ("Prelude",":") [Lit (Charc  ';'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]],Comb FuncCall ("KeyDatabaseSQLite","hGetLinesBefore") [Var 3,Var 5]])),Func ("KeyDatabaseSQLite","hGetLinesBefore") 2 Private (FuncType (TCons ("IO","Handle") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("IO","hGetLine") [Var 1],Comb (FuncPartCall 1) ("KeyDatabaseSQLite","hGetLinesBefore._#lambda31") [Var 1,Var 2]])),Func ("KeyDatabaseSQLite","hGetLinesBefore._#lambda31") 3 Private (FuncType (TCons ("IO","Handle") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 3,Var 2]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","return") [Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("KeyDatabaseSQLite","hGetLinesBefore") [Var 1,Var 2],Comb (FuncPartCall 1) ("KeyDatabaseSQLite","hGetLinesBefore._#lambda31._#lambda32") [Var 3]])])),Func ("KeyDatabaseSQLite","hGetLinesBefore._#lambda31._#lambda32") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","IO") [TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Comb FuncCall ("Prelude","return") [Comb ConsCall ("Prelude",":") [Var 1,Var 2]])),Func ("KeyDatabaseSQLite","selectSomeRows") 3 Private (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (TCons ("KeyDatabaseSQLite","Dynamic") []))) (FuncType (TCons ("Prelude","[]") [TCons ("KeyDatabaseSQLite","ColVal") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("KeyDatabaseSQLite","selectRows") [Var 1,Var 3],Case  Rigid (Comb FuncCall ("Prelude","null") [Var 2]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]],Comb FuncCall ("KeyDatabaseSQLite","showColVals") [Var 1,Var 2]])]])),Func ("KeyDatabaseSQLite","showColVals") 2 Private (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (TCons ("KeyDatabaseSQLite","Dynamic") []))) (FuncType (TCons ("Prelude","[]") [TCons ("KeyDatabaseSQLite","ColVal") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  '1'),Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude",":") [3,4]) (Comb FuncCall ("Prelude","$") [Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","concat") [],Comb (FuncPartCall 1) ("List","intersperse") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'A'),Comb ConsCall ("Prelude",":") [Lit (Charc  'N'),Comb ConsCall ("Prelude",":") [Lit (Charc  'D'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("KeyDatabaseSQLite","showColVals.showCV.177") [Var 1],Comb ConsCall ("Prelude",":") [Var 3,Var 4]]])])),Func ("KeyDatabaseSQLite","showColVals.showCV.177") 2 Private (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 601) (TCons ("KeyDatabaseSQLite","Dynamic") []))) (FuncType (TCons ("KeyDatabaseSQLite","ColVal") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("KeyDatabaseSQLite","ColVal") [3,4]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","!!") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("KeyDatabaseSQLite","colNames") [],Var 1],Var 3],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '='),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]],Var 4]])])),Func ("KeyDatabaseSQLite","closeDBHandles") 0 Public (TCons ("Prelude","IO") [TCons ("Prelude","()") []]) (Rule [] (Comb FuncCall ("Prelude",">>") [Comb FuncCall ("KeyDatabaseSQLite","withAllDBHandles") [Comb (FuncPartCall 1) ("IO","hClose") []],Comb FuncCall ("Global","writeGlobal") [Comb FuncCall ("KeyDatabaseSQLite","openDBHandles") [],Comb ConsCall ("Prelude","[]") []]])),Func ("KeyDatabaseSQLite","dbError") 2 Private (FuncType (TCons ("KeyDatabaseSQLite","TErrorKind") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TVar 0]))) (Rule [1,2] (Comb FuncCall ("Prelude",">>") [Comb FuncCall ("Prelude","$") [Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Global","writeGlobal") [Comb FuncCall ("KeyDatabaseSQLite","lastQueryError") []],Comb (ConsPartCall 1) ("Prelude","Just") []],Comb ConsCall ("KeyDatabaseSQLite","TError") [Var 1,Var 2]],Comb FuncCall ("Prelude","error") [Var 2]])),Func ("KeyDatabaseSQLite","lastQueryError") 0 Private (TCons ("Global","Global") [TCons ("Prelude","Maybe") [TCons ("KeyDatabaseSQLite","TError") []]]) (Rule [] (Comb FuncCall ("Global","global") [Comb ConsCall ("Prelude","Nothing") [],Comb ConsCall ("Global","Temporary") []])),Func ("KeyDatabaseSQLite","getDBHandle") 1 Private (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (TCons ("KeyDatabaseSQLite","Dynamic") []))) (TCons ("Prelude","IO") [TCons ("IO","Handle") []])) (Rule [1] (Comb FuncCall ("Prelude",">>") [Comb FuncCall ("KeyDatabaseSQLite","ensureDBFor") [Var 1],Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("KeyDatabaseSQLite","readDBHandle") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("KeyDatabaseSQLite","dbFile") [],Var 1]]])),Func ("KeyDatabaseSQLite","ensureDBFor") 1 Private (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (TCons ("KeyDatabaseSQLite","Dynamic") []))) (TCons ("Prelude","IO") [TCons ("Prelude","()") []])) (Rule [1] (Let [(2,Comb FuncCall ("KeyDatabaseSQLite","dbInfo") [Var 1]),(3,Comb FuncCall ("KeyDatabaseSQLite","ensureDBFor._#selFP9#db") [Var 2]),(4,Comb FuncCall ("KeyDatabaseSQLite","ensureDBFor._#selFP10#table") [Var 2]),(5,Comb FuncCall ("KeyDatabaseSQLite","ensureDBFor._#selFP11#cols") [Var 2])] (Comb FuncCall ("Prelude",">>") [Comb FuncCall ("KeyDatabaseSQLite","ensureDBHandle") [Var 3],Comb FuncCall ("KeyDatabaseSQLite","ensureDBTable") [Var 3,Var 4,Var 5]]))),Func ("KeyDatabaseSQLite","ensureDBFor._#selFP9#db") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude","(,)") [4,5]) (Var 2)])])),Func ("KeyDatabaseSQLite","ensureDBFor._#selFP10#table") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude","(,)") [4,5]) (Var 4)])])),Func ("KeyDatabaseSQLite","ensureDBFor._#selFP11#cols") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude","(,)") [4,5]) (Var 5)])])),Func ("KeyDatabaseSQLite","readDBHandle") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("IO","Handle") []])) (Rule [1] (Let [(2,Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("KeyDatabaseSQLite","dbError") [Comb ConsCall ("KeyDatabaseSQLite","ExecutionError") []],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'D'),Comb ConsCall ("Prelude",":") [Lit (Charc  'B'),Comb ConsCall ("Prelude",":") [Lit (Charc  'H'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '\''),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]],Comb FuncCall ("Prelude","++") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc  '\''),Comb ConsCall ("Prelude","[]") []]]]])] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Global","readGlobal") [Comb FuncCall ("KeyDatabaseSQLite","openDBHandles") []],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","maybe") [Var 2,Comb (FuncPartCall 1) ("Prelude","return") []],Comb (FuncPartCall 1) ("Prelude","lookup") [Var 1]]]))),Func ("KeyDatabaseSQLite","openDBHandles") 0 Private (TCons ("Global","Global") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("IO","Handle") []]]]) (Rule [] (Comb FuncCall ("Global","global") [Comb ConsCall ("Prelude","[]") [],Comb ConsCall ("Global","Temporary") []])),Func ("KeyDatabaseSQLite","withAllDBHandles") 1 Private (FuncType (FuncType (TCons ("IO","Handle") []) (TCons ("Prelude","IO") [TVar 0])) (TCons ("Prelude","IO") [TCons ("Prelude","()") []])) (Rule [1] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Global","readGlobal") [Comb FuncCall ("KeyDatabaseSQLite","openDBHandles") []],Comb (FuncPartCall 1) ("KeyDatabaseSQLite","withAllDBHandles._#lambda33") [Var 1]])),Func ("KeyDatabaseSQLite","withAllDBHandles._#lambda33") 2 Private (FuncType (FuncType (TCons ("IO","Handle") []) (TCons ("Prelude","IO") [TVar 53])) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("IO","Handle") []]]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []]))) (Rule [1,2] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","mapIO_") [Comb FuncCall ("Prelude",".") [Var 1,Comb (FuncPartCall 1) ("Prelude","snd") []]],Var 2])),Func ("KeyDatabaseSQLite","ensureDBHandle") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []])) (Rule [1] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Global","readGlobal") [Comb FuncCall ("KeyDatabaseSQLite","openDBHandles") []],Comb (FuncPartCall 1) ("KeyDatabaseSQLite","ensureDBHandle._#lambda36") [Var 1]])),Func ("KeyDatabaseSQLite","ensureDBHandle.addNewDBHandle.200") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("IO","Handle") []]]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []]))) (Rule [1,2] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("IOExts","connectToCommand") [],Comb FuncCall ("Prelude","++") [Comb FuncCall ("KeyDatabaseSQLite","path'to'sqlite3") [],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []],Var 1]]],Comb (FuncPartCall 1) ("KeyDatabaseSQLite","ensureDBHandle.addNewDBHandle.200._#lambda34") [Var 1,Var 2]])),Func ("KeyDatabaseSQLite","ensureDBHandle.addNewDBHandle.200._#lambda34") 3 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("IO","Handle") []]]) (FuncType (TCons ("IO","Handle") []) (TCons ("Prelude","IO") [TCons ("Prelude","()") []])))) (Rule [1,2,3] (Comb FuncCall ("Prelude",">>") [Comb FuncCall ("KeyDatabaseSQLite","hPutAndFlush") [Var 3,Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '\''),Comb ConsCall ("Prelude",":") [Lit (Charc  ','),Comb ConsCall ("Prelude",":") [Lit (Charc  '\''),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]],Comb FuncCall ("Prelude",">>") [Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Global","writeGlobal") [Comb FuncCall ("KeyDatabaseSQLite","openDBHandles") []],Comb FuncCall ("List","insertBy") [Comb (FuncPartCall 2) ("KeyDatabaseSQLite","on") [Comb (FuncPartCall 2) ("Prelude","<=") [],Comb (FuncPartCall 1) ("Prelude","fst") []],Comb ConsCall ("Prelude","(,)") [Var 1,Var 3],Var 2]],Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Global","readGlobal") [Comb FuncCall ("KeyDatabaseSQLite","currentlyInTransaction") []],Comb (FuncPartCall 1) ("KeyDatabaseSQLite","ensureDBHandle.addNewDBHandle.200._#lambda34._#lambda35") [Var 3]]]])),Func ("KeyDatabaseSQLite","ensureDBHandle.addNewDBHandle.200._#lambda34._#lambda35") 2 Private (FuncType (TCons ("IO","Handle") []) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","IO") [TCons ("Prelude","()") []]))) (Rule [1,2] (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("KeyDatabaseSQLite","unless") [Comb FuncCall ("Prelude","not") [Var 2]],Comb FuncCall ("IO","hPutStrLn") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc  'b'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ';'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]])),Func ("KeyDatabaseSQLite","ensureDBHandle._#lambda36") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("IO","Handle") []]]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []]))) (Rule [1,2] (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("KeyDatabaseSQLite","unless") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","elem") [Var 1],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Prelude","fst") [],Var 2]]],Comb FuncCall ("KeyDatabaseSQLite","ensureDBHandle.addNewDBHandle.200") [Var 1,Var 2]])),Func ("KeyDatabaseSQLite","unless") 2 Private (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","IO") [TCons ("Prelude","()") []]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []]))) (Rule [1,2] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","False") []) (Var 2),Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","done") [])])),Func ("KeyDatabaseSQLite","on") 4 Private (FuncType (FuncType (TVar 0) (FuncType (TVar 0) (TVar 1))) (FuncType (FuncType (TVar 2) (TVar 0)) (FuncType (TVar 2) (FuncType (TVar 2) (TVar 1))))) (Rule [1,2,3,4] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 1,Comb FuncCall ("Prelude","apply") [Var 2,Var 3]],Comb FuncCall ("Prelude","apply") [Var 2,Var 4]])),Func ("KeyDatabaseSQLite","ensureDBTable") 3 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []])))) (Rule [1,2,3] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Global","readGlobal") [Comb FuncCall ("KeyDatabaseSQLite","knownDBTables") []],Comb (FuncPartCall 1) ("KeyDatabaseSQLite","ensureDBTable._#lambda37") [Var 3,Var 1,Var 2]])),Func ("KeyDatabaseSQLite","ensureDBTable._#lambda37") 4 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []]))))) (Rule [1,2,3,4] (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("KeyDatabaseSQLite","unless") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","elem") [Comb ConsCall ("Prelude","(,)") [Var 2,Var 3]],Var 4]],Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("KeyDatabaseSQLite","readDBHandle") [Var 2],Comb (FuncPartCall 1) ("KeyDatabaseSQLite","ensureDBTable._#lambda37._#lambda38") [Var 1,Var 2,Var 4,Var 3]]])),Func ("KeyDatabaseSQLite","ensureDBTable._#lambda37._#lambda38") 5 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("IO","Handle") []) (TCons ("Prelude","IO") [TCons ("Prelude","()") []])))))) (Rule [1,2,3,4,5] (Comb FuncCall ("Prelude",">>") [Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("KeyDatabaseSQLite","hPutAndFlush") [Var 5],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'b'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]],Comb FuncCall ("Prelude","++") [Var 4,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("KeyDatabaseSQLite","commaSep") [],Var 1],Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude",":") [Lit (Charc  ';'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Global","writeGlobal") [Comb FuncCall ("KeyDatabaseSQLite","knownDBTables") []],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Var 2,Var 4],Var 3]]])),Func ("KeyDatabaseSQLite","knownDBTables") 0 Private (TCons ("Global","Global") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]]) (Rule [] (Comb FuncCall ("Global","global") [Comb ConsCall ("Prelude","[]") [],Comb ConsCall ("Global","Temporary") []])),Func ("KeyDatabaseSQLite","beginTransaction") 0 Private (TCons ("Prelude","IO") [TCons ("Prelude","()") []]) (Rule [] (Comb FuncCall ("Prelude",">>") [Comb FuncCall ("Global","writeGlobal") [Comb FuncCall ("KeyDatabaseSQLite","currentlyInTransaction") [],Comb ConsCall ("Prelude","True") []],Comb FuncCall ("KeyDatabaseSQLite","withAllDBHandles") [Comb (FuncPartCall 1) ("Prelude","flip") [Comb (FuncPartCall 2) ("KeyDatabaseSQLite","hPutAndFlush") [],Comb ConsCall ("Prelude",":") [Lit (Charc  'b'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ';'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]])),Func ("KeyDatabaseSQLite","commitTransaction") 0 Private (TCons ("Prelude","IO") [TCons ("Prelude","()") []]) (Rule [] (Comb FuncCall ("Prelude",">>") [Comb FuncCall ("KeyDatabaseSQLite","withAllDBHandles") [Comb (FuncPartCall 1) ("Prelude","flip") [Comb (FuncPartCall 2) ("KeyDatabaseSQLite","hPutAndFlush") [],Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  ';'),Comb ConsCall ("Prelude","[]") []]]]]]]]]],Comb FuncCall ("Global","writeGlobal") [Comb FuncCall ("KeyDatabaseSQLite","currentlyInTransaction") [],Comb ConsCall ("Prelude","False") []]])),Func ("KeyDatabaseSQLite","rollbackTransaction") 0 Private (TCons ("Prelude","IO") [TCons ("Prelude","()") []]) (Rule [] (Comb FuncCall ("Prelude",">>") [Comb FuncCall ("KeyDatabaseSQLite","withAllDBHandles") [Comb (FuncPartCall 1) ("Prelude","flip") [Comb (FuncPartCall 2) ("KeyDatabaseSQLite","hPutAndFlush") [],Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'b'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'k'),Comb ConsCall ("Prelude",":") [Lit (Charc  ';'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]],Comb FuncCall ("Global","writeGlobal") [Comb FuncCall ("KeyDatabaseSQLite","currentlyInTransaction") [],Comb ConsCall ("Prelude","False") []]])),Func ("KeyDatabaseSQLite","currentlyInTransaction") 0 Private (TCons ("Global","Global") [TCons ("Prelude","Bool") []]) (Rule [] (Comb FuncCall ("Global","global") [Comb ConsCall ("Prelude","False") [],Comb ConsCall ("Global","Temporary") []])),Func ("KeyDatabaseSQLite","showTupleArgs") 0 Private (FuncType (TVar 0) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [] (Comb FuncCall ("Prelude",".") [Comb FuncCall ("KeyDatabaseSQLite","splitTLC") [],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("KeyDatabaseSQLite","removeOuterParens") [],Comb (FuncPartCall 1) ("ReadShowTerm","showQTerm") []]])),Func ("KeyDatabaseSQLite","removeOuterParens") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 2) [Branch (LPattern (Charc  '(')) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("KeyDatabaseSQLite","init") [],Var 3])])])),Func ("KeyDatabaseSQLite","init") 0 Private (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0])) (Rule [] (Comb FuncCall ("Prelude",".") [Comb FuncCall ("Prelude","reverse") [],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","tail") [],Comb FuncCall ("Prelude","reverse") []]])),Func ("KeyDatabaseSQLite","splitTLC") 0 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [] (Comb (FuncPartCall 1) ("KeyDatabaseSQLite","parse") [Comb ConsCall ("Prelude","[]") []])),Func ("KeyDatabaseSQLite","parse") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [3,4]) (Case  Rigid (Comb ConsCall ("Prelude","(,)") [Var 1,Comb ConsCall ("Prelude",":") [Var 3,Var 4]]) [Branch (Pattern ("Prelude","(,)") [5,6]) (Case  Rigid (Var 5) [Branch (Pattern ("Prelude",":") [7,8]) (Let [(9,Var 7)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 9,Lit (Charc  '\'')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 6) [Branch (Pattern ("Prelude",":") [10,11]) (Let [(12,Var 10)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 12,Lit (Charc  '\'')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 11) [Branch (Pattern ("Prelude",":") [13,14]) (Let [(15,Var 13)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 15,Lit (Charc  '\'')]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("KeyDatabaseSQLite","<:") [Lit (Charc  '\''),Comb FuncCall ("KeyDatabaseSQLite","<:") [Lit (Charc  '\''),Comb FuncCall ("KeyDatabaseSQLite","parse") [Var 8,Var 14]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("KeyDatabaseSQLite","next") [Var 3,Var 1],Comb FuncCall ("KeyDatabaseSQLite","parse") [Comb FuncCall ("KeyDatabaseSQLite","updStack") [Var 3,Var 1],Var 4]])])),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("KeyDatabaseSQLite","next") [Var 3,Var 1],Comb FuncCall ("KeyDatabaseSQLite","parse") [Comb FuncCall ("KeyDatabaseSQLite","updStack") [Var 3,Var 1],Var 4]])]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("KeyDatabaseSQLite","next") [Var 3,Var 1],Comb FuncCall ("KeyDatabaseSQLite","parse") [Comb FuncCall ("KeyDatabaseSQLite","updStack") [Var 3,Var 1],Var 4]])])),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("KeyDatabaseSQLite","next") [Var 3,Var 1],Comb FuncCall ("KeyDatabaseSQLite","parse") [Comb FuncCall ("KeyDatabaseSQLite","updStack") [Var 3,Var 1],Var 4]])]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("KeyDatabaseSQLite","next") [Var 3,Var 1],Comb FuncCall ("KeyDatabaseSQLite","parse") [Comb FuncCall ("KeyDatabaseSQLite","updStack") [Var 3,Var 1],Var 4]])])),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("KeyDatabaseSQLite","next") [Var 3,Var 1],Comb FuncCall ("KeyDatabaseSQLite","parse") [Comb FuncCall ("KeyDatabaseSQLite","updStack") [Var 3,Var 1],Var 4]])])])])),Func ("KeyDatabaseSQLite","next") 3 Private (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])))) (Rule [1,2,3] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 1,Lit (Charc  ',')]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","[]") [],Var 3]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("KeyDatabaseSQLite","<:") [Var 1,Var 3])]),Branch (Pattern ("Prelude",":") [4,5]) (Comb FuncCall ("KeyDatabaseSQLite","<:") [Var 1,Var 3])])),Func ("KeyDatabaseSQLite","<:") 2 Private (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Var 1,Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude",":") [3,4]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Var 1,Var 3],Var 4])])),Func ("KeyDatabaseSQLite","updStack") 2 Private (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1,2] (Case  Rigid (Comb ConsCall ("Prelude","(,)") [Var 1,Var 2]) [Branch (Pattern ("Prelude","(,)") [3,4]) (Case  Rigid (Var 4) [Branch (Pattern ("Prelude",":") [5,6]) (Let [(7,Var 5)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 7,Lit (Charc  '\\')]) [Branch (Pattern ("Prelude","True") []) (Var 6),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 7,Lit (Charc  '"')]) [Branch (Pattern ("Prelude","True") []) (Let [(8,Var 3)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 8,Lit (Charc  '\\')]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  '\\'),Var 4]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 8,Lit (Charc  '"')]) [Branch (Pattern ("Prelude","True") []) (Var 6),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 8,Lit (Charc  '\'')]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  '"'),Var 6]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 8,Lit (Charc  '(')]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  '"'),Var 6]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 8,Lit (Charc  '[')]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  '"'),Var 6]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  '"'),Var 6])])])])])])),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 7,Lit (Charc  '\'')]) [Branch (Pattern ("Prelude","True") []) (Let [(9,Var 3)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 9,Lit (Charc  '\\')]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  '\\'),Var 4]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 9,Lit (Charc  '"')]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  '\''),Var 6]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 9,Lit (Charc  '\'')]) [Branch (Pattern ("Prelude","True") []) (Var 6),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 9,Lit (Charc  '(')]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  '\''),Var 6]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 9,Lit (Charc  '[')]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  '\''),Var 6]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  '\''),Var 6])])])])])])),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 7,Lit (Charc  '(')]) [Branch (Pattern ("Prelude","True") []) (Let [(10,Var 3)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 10,Lit (Charc  '\\')]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  '\\'),Var 4]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 10,Lit (Charc  '"')]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  '"'),Var 4]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 10,Lit (Charc  '\'')]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  '\''),Var 4]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 10,Lit (Charc  '(')]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Var 4]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 10,Lit (Charc  ')')]) [Branch (Pattern ("Prelude","True") []) (Var 6),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 10,Lit (Charc  '[')]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  '['),Var 4]),Branch (Pattern ("Prelude","False") []) (Var 4)])])])])])])),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 7,Lit (Charc  '[')]) [Branch (Pattern ("Prelude","True") []) (Let [(11,Var 3)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 11,Lit (Charc  '\\')]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  '\\'),Var 4]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 11,Lit (Charc  '"')]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  '"'),Var 4]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 11,Lit (Charc  '\'')]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  '\''),Var 4]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 11,Lit (Charc  '(')]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Var 4]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 11,Lit (Charc  '[')]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  '['),Var 4]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 11,Lit (Charc  ']')]) [Branch (Pattern ("Prelude","True") []) (Var 6),Branch (Pattern ("Prelude","False") []) (Var 4)])])])])])])),Branch (Pattern ("Prelude","False") []) (Let [(12,Var 3)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 12,Lit (Charc  '\\')]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  '\\'),Var 4]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 12,Lit (Charc  '"')]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  '"'),Var 4]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 12,Lit (Charc  '\'')]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  '\''),Var 4]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 12,Lit (Charc  '(')]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Var 4]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 12,Lit (Charc  '[')]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  '['),Var 4]),Branch (Pattern ("Prelude","False") []) (Var 4)])])])])]))])])])])])),Branch (Pattern ("Prelude","[]") []) (Let [(13,Var 3)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 13,Lit (Charc  '\\')]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  '\\'),Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 13,Lit (Charc  '"')]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  '"'),Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 13,Lit (Charc  '\'')]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  '\''),Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 13,Lit (Charc  '(')]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 13,Lit (Charc  '[')]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  '['),Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","[]") [])])])])])]))])])),Func ("KeyDatabaseSQLite","showTError") 1 Public (FuncType (TCons ("KeyDatabaseSQLite","TError") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("KeyDatabaseSQLite","TError") [2,3]) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'T'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","show") [Var 2],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]],Var 3]]])]))] [Op ("KeyDatabaseSQLite","|>>") InfixlOp 1,Op ("KeyDatabaseSQLite","|>>=") InfixlOp 1]