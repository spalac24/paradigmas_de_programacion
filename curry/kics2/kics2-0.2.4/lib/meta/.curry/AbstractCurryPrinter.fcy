Prog "AbstractCurryPrinter" ["AbstractCurry","Char","FiniteMap","List","Maybe","Prelude","Sort","Read"] [TypeSyn ("AbstractCurryPrinter","NameFM") Private [] (TCons ("FiniteMap","FM") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","()") []]),TypeSyn ("AbstractCurryPrinter","Options") Private [] (TCons ("Prelude","(,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","()") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])] [Func ("AbstractCurryPrinter","showProg") 1 Public (FuncType (TCons ("AbstractCurry","CurryProg") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("AbstractCurry","CurryProg") [2,3,4,5,6]) (Let [(7,Comb FuncCall ("AbstractCurryPrinter","showExports") [Var 4,Var 5])] (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb FuncCall ("Prelude","++") [Var 2,Comb FuncCall ("Prelude","++") [Case  Rigid (Comb FuncCall ("Prelude","null") [Var 7]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb FuncCall ("AbstractCurryPrinter","parens") [Var 7]])],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude","[]") []]]]]]]]],Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractCurryPrinter","showImports") [Var 3],Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractCurryPrinter","showOpDecls") [Var 6],Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractCurryPrinter","showTypeDecls") [Var 4],Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractCurryPrinter","prefixInter") [Comb (FuncPartCall 1) ("AbstractCurryPrinter","showFuncDeclOpt") [Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("AbstractCurryPrinter","nameFM") [],Var 5],Var 2]],Var 5,Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]))])),Func ("AbstractCurryPrinter","defaultOptions") 0 Private (TCons ("Prelude","(,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","()") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (Rule [] (Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("FiniteMap","emptyFM") [Comb (FuncPartCall 2) ("AbstractCurryPrinter","lessString") []],Comb ConsCall ("Prelude","[]") []])),Func ("AbstractCurryPrinter","showExports") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("AbstractCurry","CTypeDecl") []]) (FuncType (TCons ("Prelude","[]") [TCons ("AbstractCurry","CFuncDecl") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1,2] (Let [(3,Comb FuncCall ("Prelude","filter") [Comb (FuncPartCall 1) ("AbstractCurryPrinter","showExports.isPublicType.7") [],Var 1]),(4,Comb FuncCall ("List","partition") [Comb (FuncPartCall 1) ("AbstractCurryPrinter","showExports.allPublicCons.7") [],Var 3]),(5,Comb FuncCall ("AbstractCurryPrinter","showExports._#selFP2#withCons") [Var 4]),(6,Comb FuncCall ("AbstractCurryPrinter","showExports._#selFP3#withoutCons") [Var 4])] (Comb FuncCall ("Prelude","concat") [Comb FuncCall ("List","intersperse") [Comb ConsCall ("Prelude",":") [Lit (Charc  ','),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","map") [Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","flip") [Comb (FuncPartCall 2) ("Prelude","++") [],Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude","[]") []]]]]],Comb (FuncPartCall 1) ("AbstractCurryPrinter","showExports.getTypeName.7") []],Var 5],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("AbstractCurryPrinter","showExports.getTypeName.7") [],Var 6],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("AbstractCurryPrinter","showExports.getFuncName.7") [],Comb FuncCall ("Prelude","filter") [Comb (FuncPartCall 1) ("AbstractCurryPrinter","showExports.isPublicFunc.7") [],Var 2]]]]]]))),Func ("AbstractCurryPrinter","showExports.isPublicType.7") 1 Private (FuncType (TCons ("AbstractCurry","CTypeDecl") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("AbstractCurry","CType") [2,3,4,5]) (Comb FuncCall ("Prelude","==") [Var 3,Comb ConsCall ("AbstractCurry","Public") []]),Branch (Pattern ("AbstractCurry","CTypeSyn") [6,7,8,9]) (Comb FuncCall ("Prelude","==") [Var 7,Comb ConsCall ("AbstractCurry","Public") []])])),Func ("AbstractCurryPrinter","showExports.isPublicFunc.7") 1 Private (FuncType (TCons ("AbstractCurry","CFuncDecl") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("AbstractCurry","CFunc") [2,3,4,5,6]) (Comb FuncCall ("Prelude","==") [Var 4,Comb ConsCall ("AbstractCurry","Public") []]),Branch (Pattern ("AbstractCurry","CmtFunc") [7,8,9,10,11,12]) (Comb FuncCall ("Prelude","==") [Var 10,Comb ConsCall ("AbstractCurry","Public") []])])),Func ("AbstractCurryPrinter","showExports.getTypeName.7") 1 Private (FuncType (TCons ("AbstractCurry","CTypeDecl") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("AbstractCurry","CType") [2,3,4,5]) (Case  Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [6,7]) (Var 7)]),Branch (Pattern ("AbstractCurry","CTypeSyn") [8,9,10,11]) (Case  Flex (Var 8) [Branch (Pattern ("Prelude","(,)") [12,13]) (Var 13)])])),Func ("AbstractCurryPrinter","showExports.allPublicCons.7") 1 Private (FuncType (TCons ("AbstractCurry","CTypeDecl") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("AbstractCurry","CType") [2,3,4,5]) (Comb FuncCall ("Prelude","==") [Comb FuncCall ("Prelude","length") [Comb FuncCall ("Prelude","filter") [Comb (FuncPartCall 1) ("AbstractCurryPrinter","showExports.allPublicCons.7.isPublicCons.47") [],Var 5]],Comb FuncCall ("Prelude","length") [Var 5]]),Branch (Pattern ("AbstractCurry","CTypeSyn") [6,7,8,9]) (Comb ConsCall ("Prelude","False") [])])),Func ("AbstractCurryPrinter","showExports.allPublicCons.7.isPublicCons.47") 1 Private (FuncType (TCons ("AbstractCurry","CConsDecl") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("AbstractCurry","CCons") [2,3,4,5]) (Comb FuncCall ("Prelude","==") [Var 4,Comb ConsCall ("AbstractCurry","Public") []])])),Func ("AbstractCurryPrinter","showExports.getFuncName.7") 1 Private (FuncType (TCons ("AbstractCurry","CFuncDecl") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("AbstractCurry","CFunc") [2,3,4,5,6]) (Case  Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [7,8]) (Case  Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("AbstractCurryPrinter","isInfixOpName") [],Var 8]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("AbstractCurryPrinter","parens") [Var 8]),Branch (Pattern ("Prelude","False") []) (Var 8)])]),Branch (Pattern ("AbstractCurry","CmtFunc") [9,10,11,12,13,14]) (Case  Flex (Var 10) [Branch (Pattern ("Prelude","(,)") [15,16]) (Case  Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("AbstractCurryPrinter","isInfixOpName") [],Var 16]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("AbstractCurryPrinter","parens") [Var 16]),Branch (Pattern ("Prelude","False") []) (Var 16)])])])),Func ("AbstractCurryPrinter","showExports._#selFP2#withCons") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("AbstractCurry","CTypeDecl") []],TCons ("Prelude","[]") [TCons ("AbstractCurry","CTypeDecl") []]]) (TCons ("Prelude","[]") [TCons ("AbstractCurry","CTypeDecl") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("AbstractCurryPrinter","showExports._#selFP3#withoutCons") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("AbstractCurry","CTypeDecl") []],TCons ("Prelude","[]") [TCons ("AbstractCurry","CTypeDecl") []]]) (TCons ("Prelude","[]") [TCons ("AbstractCurry","CTypeDecl") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("AbstractCurryPrinter","showImports") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractCurryPrinter","prefixInter") [Comb (FuncPartCall 1) ("AbstractCurryPrinter","showImport") [],Comb FuncCall ("Prelude","filter") [Comb (FuncPartCall 1) ("Prelude","flip") [Comb (FuncPartCall 2) ("Prelude","/=") [],Comb FuncCall ("AbstractCurryPrinter","prelude") []],Var 1],Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude","[]") []]],Case  Rigid (Comb FuncCall ("Prelude","==") [Var 1,Comb ConsCall ("Prelude",":") [Comb FuncCall ("AbstractCurryPrinter","prelude") [],Comb ConsCall ("Prelude","[]") []]]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude","[]") []]])]])),Func ("AbstractCurryPrinter","showImport") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Rigid (Comb FuncCall ("Prelude","/=") [Var 1,Comb FuncCall ("AbstractCurryPrinter","prelude") []]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]]],Var 1]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","[]") [])])),Func ("AbstractCurryPrinter","showOpDecls") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("AbstractCurry","COpDecl") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractCurryPrinter","prefixInter") [Comb (FuncPartCall 1) ("AbstractCurryPrinter","showOpDecl") [],Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude","[]") []]],Case  Rigid (Comb FuncCall ("Prelude","==") [Var 1,Comb ConsCall ("Prelude","[]") []]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude","[]") []]])]])),Func ("AbstractCurryPrinter","showOpDecl") 1 Private (FuncType (TCons ("AbstractCurry","COpDecl") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("AbstractCurry","COp") [2,3,4]) (Case  Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [5,6]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractCurryPrinter","showFixity") [Var 3],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","show") [Var 4],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []],Case  Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("AbstractCurryPrinter","isInfixOpName") [],Var 6]) [Branch (Pattern ("Prelude","True") []) (Var 6),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("AbstractCurryPrinter","backQuotes") [Var 6])]]]]])])])),Func ("AbstractCurryPrinter","showFixity") 1 Private (FuncType (TCons ("AbstractCurry","CFixity") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("AbstractCurry","CInfixOp") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude","[]") []]]]]]),Branch (Pattern ("AbstractCurry","CInfixlOp") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude","[]") []]]]]]]),Branch (Pattern ("AbstractCurry","CInfixrOp") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude","[]") []]]]]]])])),Func ("AbstractCurryPrinter","showTypeDecls") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("AbstractCurry","CTypeDecl") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractCurryPrinter","prefixInter") [Comb (FuncPartCall 1) ("AbstractCurryPrinter","showTypeDecl") [],Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude","[]") []]]],Case  Rigid (Comb FuncCall ("Prelude","==") [Var 1,Comb ConsCall ("Prelude","[]") []]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude","[]") []]])]])),Func ("AbstractCurryPrinter","showTypeDecl") 1 Public (FuncType (TCons ("AbstractCurry","CTypeDecl") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("AbstractCurry","CTypeSyn") [2,3,4,5]) (Case  Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [6,7]) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]],Comb FuncCall ("Prelude","++") [Var 7,Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractCurryPrinter","prefixMap") [Comb (FuncPartCall 1) ("AbstractCurryPrinter","showTypeExpr") [Comb ConsCall ("Prelude","False") []],Comb FuncCall ("Prelude","map") [Comb (ConsPartCall 1) ("AbstractCurry","CTVar") [],Var 4],Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '='),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("AbstractCurryPrinter","showTypeExpr") [Comb ConsCall ("Prelude","False") [],Var 5]]]]])]),Branch (Pattern ("AbstractCurry","CType") [8,9,10,11]) (Case  Flex (Var 8) [Branch (Pattern ("Prelude","(,)") [12,13]) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]],Comb FuncCall ("Prelude","++") [Var 13,Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractCurryPrinter","prefixMap") [Comb (FuncPartCall 1) ("AbstractCurryPrinter","showTypeExpr") [Comb ConsCall ("Prelude","False") []],Comb FuncCall ("Prelude","map") [Comb (ConsPartCall 1) ("AbstractCurry","CTVar") [],Var 10],Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("AbstractCurryPrinter","showBlock") [Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '='),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("AbstractCurryPrinter","combineMap") [Comb (FuncPartCall 1) ("AbstractCurryPrinter","showConsDecl") [],Var 11,Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude",":") [Lit (Charc  '|'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]])])])),Func ("AbstractCurryPrinter","showConsDecl") 1 Private (FuncType (TCons ("AbstractCurry","CConsDecl") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("AbstractCurry","CCons") [2,3,4,5]) (Case  Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [6,7]) (Comb FuncCall ("Prelude","++") [Var 7,Comb FuncCall ("AbstractCurryPrinter","prefixMap") [Comb (FuncPartCall 1) ("AbstractCurryPrinter","showTypeExpr") [Comb ConsCall ("Prelude","True") []],Var 5,Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]])])])),Func ("AbstractCurryPrinter","showTypeExpr") 2 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("AbstractCurry","CTypeExpr") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("AbstractCurry","CTVar") [3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb FuncCall ("AbstractCurryPrinter","showTypeVar") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("AbstractCurryPrinter","showIdentifier") [],Var 5]])]),Branch (Pattern ("AbstractCurry","CFuncType") [6,7]) (Comb FuncCall ("AbstractCurryPrinter","maybeShowBrackets") [Var 1,Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractCurryPrinter","showTypeExpr") [Comb FuncCall ("AbstractCurryPrinter","isCFuncType") [Var 6],Var 6],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  '>'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("AbstractCurryPrinter","showTypeExpr") [Comb ConsCall ("Prelude","False") [],Var 7]]]]),Branch (Pattern ("AbstractCurry","CTCons") [8,9]) (Case  Flex (Var 8) [Branch (Pattern ("Prelude","(,)") [10,11]) (Case  Rigid (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","==") [Var 10,Comb FuncCall ("AbstractCurryPrinter","prelude") []],Comb FuncCall ("Prelude","==") [Var 11,Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("AbstractCurryPrinter","maybeShowBrackets") [Comb FuncCall ("Prelude","&&") [Var 1,Comb FuncCall ("Prelude","not") [Comb FuncCall ("Prelude","null") [Var 9]]],Comb FuncCall ("AbstractCurryPrinter","showTypeCons") [Var 10,Var 11,Var 9]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])])),Func ("AbstractCurryPrinter","showTypeVar") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Rigid (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","==") [Var 2,Lit (Charc  'a')],Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","not") [Comb FuncCall ("Prelude","null") [Var 3]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","all") [Comb (FuncPartCall 1) ("Char","isDigit") []],Var 3]]]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Var 3]]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude",":") [Var 2,Var 3])])])),Func ("AbstractCurryPrinter","showIdentifier") 0 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Comb (FuncPartCall 1) ("Prelude","filter") [Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","not") [],Comb (FuncPartCall 1) ("Prelude","flip") [Comb (FuncPartCall 1) ("Prelude","elem") [],Comb ConsCall ("Prelude",":") [Lit (Charc  '<'),Comb ConsCall ("Prelude",":") [Lit (Charc  '>'),Comb ConsCall ("Prelude","[]") []]]]]])),Func ("AbstractCurryPrinter","isCFuncType") 1 Private (FuncType (TCons ("AbstractCurry","CTypeExpr") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Case  Rigid (Var 1) [Branch (Pattern ("AbstractCurry","CFuncType") [2,3]) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("AbstractCurry","CTVar") [4]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractCurry","CTCons") [5,6]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractCurry","CRecordType") [7,8]) (Comb ConsCall ("Prelude","False") [])])),Func ("AbstractCurryPrinter","showFuncDecl") 0 Public (FuncType (TCons ("AbstractCurry","CFuncDecl") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Comb (FuncPartCall 1) ("AbstractCurryPrinter","showFuncDeclOpt") [Comb FuncCall ("AbstractCurryPrinter","defaultOptions") []])),Func ("AbstractCurryPrinter","showFuncDeclOpt") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","()") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("AbstractCurry","CFuncDecl") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("AbstractCurry","CmtFunc") [3,4,5,6,7,8]) (Comb FuncCall ("AbstractCurryPrinter","showCmtFunc") [Var 1,Var 3,Comb ConsCall ("AbstractCurry","CFunc") [Var 4,Var 5,Var 6,Var 7,Var 8]]),Branch (Pattern ("AbstractCurry","CFunc") [9,10,11,12,13]) (Comb FuncCall ("AbstractCurryPrinter","showCmtFunc") [Var 1,Comb ConsCall ("Prelude","[]") [],Var 2])])),Func ("AbstractCurryPrinter","showCmtFunc") 3 Private (FuncType (TCons ("Prelude","(,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","()") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("AbstractCurry","CFuncDecl") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1,2,3] (Case  Flex (Var 3) [Branch (Pattern ("AbstractCurry","CFunc") [4,5,6,7,8]) (Case  Flex (Var 4) [Branch (Pattern ("Prelude","(,)") [9,10]) (Case  Flex (Var 8) [Branch (Pattern ("AbstractCurry","CRules") [11,12]) (Let [(13,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("AbstractCurryPrinter","isInfixOpName") [],Var 10]),(14,Case  Rigid (Var 13) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("AbstractCurryPrinter","parens") [Var 10]),Branch (Pattern ("Prelude","False") []) (Var 10)])] (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("AbstractCurryPrinter","funcComment") [],Var 2],Comb FuncCall ("Prelude","++") [Case  Rigid (Comb FuncCall ("Prelude","==") [Var 11,Comb ConsCall ("AbstractCurry","CFlex") []]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","++") [Var 14,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'v'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]],Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractCurryPrinter","showEvalAnnot") [Var 11],Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude","[]") []]]]])],Comb FuncCall ("Prelude","++") [Case  Rigid (Comb FuncCall ("AbstractCurryPrinter","isUntyped") [Var 7]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","++") [Var 14,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractCurryPrinter","showTypeExpr") [Comb ConsCall ("Prelude","False") [],Var 7],Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude","[]") []]]]])],Case  Rigid (Var 13) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("AbstractCurryPrinter","showCmtFunc.rulePrints.142") [Var 14,Var 10,Var 1,Var 12,Var 5]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","++") [Var 10,Comb FuncCall ("AbstractCurryPrinter","prefixInter") [Comb (FuncPartCall 1) ("AbstractCurryPrinter","showRule") [Var 1],Var 12,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude","[]") []],Var 10]]])]]]])),Branch (Pattern ("AbstractCurry","CExternal") [15]) (Let [(16,Case  Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("AbstractCurryPrinter","isInfixOpName") [],Var 10]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("AbstractCurryPrinter","parens") [Var 10]),Branch (Pattern ("Prelude","False") []) (Var 10)])] (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("AbstractCurryPrinter","funcComment") [],Var 2],Comb FuncCall ("Prelude","++") [Var 16,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractCurryPrinter","showTypeExpr") [Comb ConsCall ("Prelude","False") [],Var 7],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Var 16,Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]))])])])),Func ("AbstractCurryPrinter","showCmtFunc.insertName.142") 4 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (Rule [1,2,3,4] (Case  Flex (Var 4) [Branch (Pattern ("Prelude","(,)") [5,6]) (Case  Rigid (Comb FuncCall ("Prelude","/=") [Var 3,Lit (Intc  0)]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","++") [Var 5,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Var 2,Var 6]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","++") [Var 1,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Var 5,Var 6]]])])])),Func ("AbstractCurryPrinter","showCmtFunc.rulePrints.142") 5 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","()") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("AbstractCurry","CRule") []]) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))))) (Rule [1,2,3,4,5] (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Prelude","concat") [],Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("List","intersperse") [Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude","map") [Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("AbstractCurryPrinter","showCmtFunc.insertName.142") [Var 1,Var 2,Var 5],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","span") [Comb (FuncPartCall 1) ("Prelude","flip") [Comb (FuncPartCall 2) ("Prelude","/=") [],Lit (Charc  ' ')]],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","tail") [],Comb (FuncPartCall 1) ("AbstractCurryPrinter","showRule") [Var 3]]]],Var 4]]])),Func ("AbstractCurryPrinter","funcComment") 0 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","unlines") [],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","map") [Comb (FuncPartCall 1) ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]],Comb (FuncPartCall 1) ("Prelude","lines") []]])),Func ("AbstractCurryPrinter","showLocalFuncDecl") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","()") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("AbstractCurry","CFuncDecl") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1] (Comb (FuncPartCall 1) ("AbstractCurryPrinter","showFuncDeclOpt") [Var 1])),Func ("AbstractCurryPrinter","showRule") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","()") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("AbstractCurry","CRule") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("AbstractCurry","CRule") [3,4,5]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractCurryPrinter","prefixMap") [Comb (FuncPartCall 1) ("AbstractCurryPrinter","showPattern") [],Var 3,Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractCurryPrinter","showGuards") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc  '='),Comb ConsCall ("Prelude","[]") []],Var 4],Case  Rigid (Comb FuncCall ("Prelude","null") [Var 5]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]],Comb FuncCall ("AbstractCurryPrinter","showBlock") [Comb FuncCall ("AbstractCurryPrinter","prefixMap") [Comb (FuncPartCall 1) ("AbstractCurryPrinter","showLocalDecl") [Var 1],Var 5,Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude","[]") []]]]])]]])])),Func ("AbstractCurryPrinter","showEvalAnnot") 1 Private (FuncType (TCons ("AbstractCurry","CEvalAnnot") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("AbstractCurry","CFlex") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude","[]") []]]]]),Branch (Pattern ("AbstractCurry","CRigid") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude","[]") []]]]]]),Branch (Pattern ("AbstractCurry","CChoice") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]])])),Func ("AbstractCurryPrinter","showGuards") 3 Private (FuncType (TCons ("Prelude","(,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","()") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("AbstractCurry","CExpr") [],TCons ("AbstractCurry","CExpr") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1,2,3] (Case  Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 4) [Branch (Pattern ("Prelude","(,)") [6,7]) (Case  Rigid (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","==") [Var 5,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","==") [Var 6,Comb ConsCall ("AbstractCurry","CSymbol") [Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("AbstractCurryPrinter","prelude") [],Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb FuncCall ("Prelude","++") [Var 2,Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb FuncCall ("AbstractCurryPrinter","showExprOpt") [Var 1,Var 7]]]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb FuncCall ("AbstractCurryPrinter","showBlock") [Comb FuncCall ("AbstractCurryPrinter","combineMap") [Comb (FuncPartCall 1) ("AbstractCurryPrinter","showGuard") [Var 1,Var 2],Var 3,Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude","[]") []]]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])])),Func ("AbstractCurryPrinter","showGuard") 3 Private (FuncType (TCons ("Prelude","(,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","()") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("AbstractCurry","CExpr") [],TCons ("AbstractCurry","CExpr") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1,2,3] (Case  Flex (Var 3) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '|'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractCurryPrinter","showExprOpt") [Var 1,Var 4],Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb FuncCall ("Prelude","++") [Var 2,Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb FuncCall ("AbstractCurryPrinter","showExprOpt") [Var 1,Var 5]]]]]])])),Func ("AbstractCurryPrinter","showLocalDecl") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","()") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("AbstractCurry","CLocalDecl") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("AbstractCurry","CLocalFunc") [3]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("AbstractCurryPrinter","showLocalFuncDecl") [Var 1],Var 3]),Branch (Pattern ("AbstractCurry","CLocalPat") [4,5,6]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractCurryPrinter","showPattern") [Var 4],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '='),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractCurryPrinter","showExprOpt") [Var 1,Var 5],Case  Rigid (Comb FuncCall ("Prelude","null") [Var 6]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]],Comb FuncCall ("AbstractCurryPrinter","showBlock") [Comb FuncCall ("AbstractCurryPrinter","prefixMap") [Comb (FuncPartCall 1) ("AbstractCurryPrinter","showLocalDecl") [Var 1],Var 6,Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude","[]") []]]]])]]]]),Branch (Pattern ("AbstractCurry","CLocalVar") [7]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractCurryPrinter","showPattern") [Comb ConsCall ("AbstractCurry","CPVar") [Var 7]],Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]])])),Func ("AbstractCurryPrinter","showExpr") 0 Public (FuncType (TCons ("AbstractCurry","CExpr") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Comb (FuncPartCall 1) ("AbstractCurryPrinter","showExprOpt") [Comb FuncCall ("AbstractCurryPrinter","defaultOptions") []])),Func ("AbstractCurryPrinter","showExprOpt") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","()") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("AbstractCurry","CExpr") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("AbstractCurry","CVar") [3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("AbstractCurryPrinter","showIdentifier") [],Var 5])]),Branch (Pattern ("AbstractCurry","CLit") [6]) (Comb FuncCall ("AbstractCurryPrinter","showLiteral") [Var 6]),Branch (Pattern ("AbstractCurry","CSymbol") [7]) (Case  Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("AbstractCurryPrinter","isInfixOpName") [],Comb FuncCall ("Prelude","snd") [Var 7]]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("AbstractCurryPrinter","parens") [Comb FuncCall ("AbstractCurryPrinter","showSymbol") [Var 1,Var 7]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("AbstractCurryPrinter","showSymbol") [Var 1,Var 7])]),Branch (Pattern ("AbstractCurry","CApply") [8,9]) (Comb FuncCall ("AbstractCurryPrinter","showApplication") [Var 1,Comb ConsCall ("AbstractCurry","CApply") [Var 8,Var 9]]),Branch (Pattern ("AbstractCurry","CLambda") [10,11]) (Comb FuncCall ("AbstractCurryPrinter","showLambdaOrSection") [Var 1,Var 10,Var 11]),Branch (Pattern ("AbstractCurry","CLetDecl") [12,13]) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("AbstractCurryPrinter","showBlock") [Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractCurryPrinter","combineMap") [Comb (FuncPartCall 1) ("AbstractCurryPrinter","showLocalDecl") [Var 1],Var 12,Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]],Comb FuncCall ("AbstractCurryPrinter","showBoxedExpr") [Var 1,Var 13]]]]]),Branch (Pattern ("AbstractCurry","CDoExpr") [14]) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude","[]") []]]]]]]]],Comb FuncCall ("AbstractCurryPrinter","showBlock") [Comb FuncCall ("AbstractCurryPrinter","combineMap") [Comb (FuncPartCall 1) ("AbstractCurryPrinter","showStatement") [Var 1],Var 14,Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude","[]") []]]]]),Branch (Pattern ("AbstractCurry","CListComp") [15,16]) (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("AbstractCurryPrinter","brackets") [],Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractCurryPrinter","showBoxedExpr") [Var 1,Var 15],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '|'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("AbstractCurryPrinter","combineMap") [Comb (FuncPartCall 1) ("AbstractCurryPrinter","showStatement") [Var 1],Var 16,Comb ConsCall ("Prelude",":") [Lit (Charc  ','),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]]),Branch (Pattern ("AbstractCurry","CCase") [17,18]) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]],Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractCurryPrinter","showBoxedExpr") [Var 1,Var 17],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("AbstractCurryPrinter","showBlock") [Comb FuncCall ("AbstractCurryPrinter","combineMap") [Comb (FuncPartCall 1) ("AbstractCurryPrinter","showBranchExpr") [Var 1],Var 18,Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude","[]") []]]]]]])])),Func ("AbstractCurryPrinter","showSymbol") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","()") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1,2] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Case  Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [5,6]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 4,Var 5]) [Branch (Pattern ("Prelude","True") []) (Var 6),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Maybe","isJust") [Comb FuncCall ("FiniteMap","lookupFM") [Var 3,Var 6]]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","++") [Var 5,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude","[]") []],Var 6]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Var 6),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])])])),Func ("AbstractCurryPrinter","showLambdaOrSection") 3 Private (FuncType (TCons ("Prelude","(,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","()") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("AbstractCurry","CPattern") []]) (FuncType (TCons ("AbstractCurry","CExpr") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1,2,3] (Case  Rigid (Var 2) [Branch (Pattern ("Prelude",":") [4,5]) (Case  Rigid (Var 4) [Branch (Pattern ("AbstractCurry","CPVar") [6]) (Case  Rigid (Var 5) [Branch (Pattern ("Prelude","[]") []) (Case  Rigid (Var 3) [Branch (Pattern ("AbstractCurry","CApply") [7,8]) (Case  Rigid (Var 7) [Branch (Pattern ("AbstractCurry","CApply") [9,10]) (Case  Rigid (Var 9) [Branch (Pattern ("AbstractCurry","CSymbol") [11]) (Case  Rigid (Var 11) [Branch (Pattern ("Prelude","(,)") [12,13]) (Case  Rigid (Var 8) [Branch (Pattern ("AbstractCurry","CVar") [14]) (Case  Rigid (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("AbstractCurryPrinter","isInfixOpName") [],Var 13],Comb FuncCall ("Prelude","&&") [Comb FuncCall ("AbstractCurryPrinter","isAtom") [Var 10],Comb FuncCall ("Prelude","/=") [Comb ConsCall ("AbstractCurry","CVar") [Var 14],Var 10]]]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 6,Var 14]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("AbstractCurryPrinter","parens") [Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractCurryPrinter","showBoxedExpr") [Var 1,Var 10],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []],Var 13]]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 10,Comb ConsCall ("AbstractCurry","CVar") [Var 6]]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("AbstractCurryPrinter","parens") [Comb FuncCall ("Prelude","++") [Var 13,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("AbstractCurryPrinter","showExprOpt") [Var 1,Comb ConsCall ("AbstractCurry","CVar") [Var 14]]]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3])])]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3])]),Branch (Pattern ("AbstractCurry","CLit") [15]) (Case  Rigid (Var 10) [Branch (Pattern ("AbstractCurry","CVar") [16]) (Case  Rigid (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("AbstractCurryPrinter","isInfixOpName") [],Var 13],Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","==") [Var 6,Var 16],Comb FuncCall ("Prelude","&&") [Comb FuncCall ("AbstractCurryPrinter","isAtom") [Comb ConsCall ("AbstractCurry","CLit") [Var 15]],Comb FuncCall ("Prelude","/=") [Comb ConsCall ("AbstractCurry","CVar") [Var 16],Comb ConsCall ("AbstractCurry","CLit") [Var 15]]]]]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("AbstractCurryPrinter","parens") [Comb FuncCall ("Prelude","++") [Var 13,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("AbstractCurryPrinter","showBoxedExpr") [Var 1,Comb ConsCall ("AbstractCurry","CLit") [Var 15]]]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3])]),Branch (Pattern ("AbstractCurry","CLit") [17]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CSymbol") [18]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CApply") [19,20]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CLambda") [21,22]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CLetDecl") [23,24]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CDoExpr") [25]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CListComp") [26,27]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CCase") [28,29]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CRecConstr") [30]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CRecSelect") [31,32]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CRecUpdate") [33,34]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3])]),Branch (Pattern ("AbstractCurry","CSymbol") [35]) (Case  Rigid (Var 10) [Branch (Pattern ("AbstractCurry","CVar") [36]) (Case  Rigid (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("AbstractCurryPrinter","isInfixOpName") [],Var 13],Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","==") [Var 6,Var 36],Comb FuncCall ("Prelude","&&") [Comb FuncCall ("AbstractCurryPrinter","isAtom") [Comb ConsCall ("AbstractCurry","CSymbol") [Var 35]],Comb FuncCall ("Prelude","/=") [Comb ConsCall ("AbstractCurry","CVar") [Var 36],Comb ConsCall ("AbstractCurry","CSymbol") [Var 35]]]]]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("AbstractCurryPrinter","parens") [Comb FuncCall ("Prelude","++") [Var 13,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("AbstractCurryPrinter","showBoxedExpr") [Var 1,Comb ConsCall ("AbstractCurry","CSymbol") [Var 35]]]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3])]),Branch (Pattern ("AbstractCurry","CLit") [37]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CSymbol") [38]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CApply") [39,40]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CLambda") [41,42]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CLetDecl") [43,44]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CDoExpr") [45]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CListComp") [46,47]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CCase") [48,49]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CRecConstr") [50]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CRecSelect") [51,52]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CRecUpdate") [53,54]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3])]),Branch (Pattern ("AbstractCurry","CApply") [55,56]) (Case  Rigid (Var 10) [Branch (Pattern ("AbstractCurry","CVar") [57]) (Case  Rigid (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("AbstractCurryPrinter","isInfixOpName") [],Var 13],Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","==") [Var 6,Var 57],Comb FuncCall ("Prelude","&&") [Comb FuncCall ("AbstractCurryPrinter","isAtom") [Comb ConsCall ("AbstractCurry","CApply") [Var 55,Var 56]],Comb FuncCall ("Prelude","/=") [Comb ConsCall ("AbstractCurry","CVar") [Var 57],Comb ConsCall ("AbstractCurry","CApply") [Var 55,Var 56]]]]]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("AbstractCurryPrinter","parens") [Comb FuncCall ("Prelude","++") [Var 13,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("AbstractCurryPrinter","showBoxedExpr") [Var 1,Comb ConsCall ("AbstractCurry","CApply") [Var 55,Var 56]]]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3])]),Branch (Pattern ("AbstractCurry","CLit") [58]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CSymbol") [59]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CApply") [60,61]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CLambda") [62,63]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CLetDecl") [64,65]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CDoExpr") [66]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CListComp") [67,68]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CCase") [69,70]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CRecConstr") [71]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CRecSelect") [72,73]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CRecUpdate") [74,75]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3])]),Branch (Pattern ("AbstractCurry","CLambda") [76,77]) (Case  Rigid (Var 10) [Branch (Pattern ("AbstractCurry","CVar") [78]) (Case  Rigid (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("AbstractCurryPrinter","isInfixOpName") [],Var 13],Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","==") [Var 6,Var 78],Comb FuncCall ("Prelude","&&") [Comb FuncCall ("AbstractCurryPrinter","isAtom") [Comb ConsCall ("AbstractCurry","CLambda") [Var 76,Var 77]],Comb FuncCall ("Prelude","/=") [Comb ConsCall ("AbstractCurry","CVar") [Var 78],Comb ConsCall ("AbstractCurry","CLambda") [Var 76,Var 77]]]]]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("AbstractCurryPrinter","parens") [Comb FuncCall ("Prelude","++") [Var 13,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("AbstractCurryPrinter","showBoxedExpr") [Var 1,Comb ConsCall ("AbstractCurry","CLambda") [Var 76,Var 77]]]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3])]),Branch (Pattern ("AbstractCurry","CLit") [79]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CSymbol") [80]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CApply") [81,82]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CLambda") [83,84]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CLetDecl") [85,86]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CDoExpr") [87]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CListComp") [88,89]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CCase") [90,91]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CRecConstr") [92]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CRecSelect") [93,94]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CRecUpdate") [95,96]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3])]),Branch (Pattern ("AbstractCurry","CLetDecl") [97,98]) (Case  Rigid (Var 10) [Branch (Pattern ("AbstractCurry","CVar") [99]) (Case  Rigid (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("AbstractCurryPrinter","isInfixOpName") [],Var 13],Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","==") [Var 6,Var 99],Comb FuncCall ("Prelude","&&") [Comb FuncCall ("AbstractCurryPrinter","isAtom") [Comb ConsCall ("AbstractCurry","CLetDecl") [Var 97,Var 98]],Comb FuncCall ("Prelude","/=") [Comb ConsCall ("AbstractCurry","CVar") [Var 99],Comb ConsCall ("AbstractCurry","CLetDecl") [Var 97,Var 98]]]]]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("AbstractCurryPrinter","parens") [Comb FuncCall ("Prelude","++") [Var 13,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("AbstractCurryPrinter","showBoxedExpr") [Var 1,Comb ConsCall ("AbstractCurry","CLetDecl") [Var 97,Var 98]]]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3])]),Branch (Pattern ("AbstractCurry","CLit") [100]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CSymbol") [101]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CApply") [102,103]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CLambda") [104,105]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CLetDecl") [106,107]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CDoExpr") [108]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CListComp") [109,110]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CCase") [111,112]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CRecConstr") [113]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CRecSelect") [114,115]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CRecUpdate") [116,117]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3])]),Branch (Pattern ("AbstractCurry","CDoExpr") [118]) (Case  Rigid (Var 10) [Branch (Pattern ("AbstractCurry","CVar") [119]) (Case  Rigid (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("AbstractCurryPrinter","isInfixOpName") [],Var 13],Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","==") [Var 6,Var 119],Comb FuncCall ("Prelude","&&") [Comb FuncCall ("AbstractCurryPrinter","isAtom") [Comb ConsCall ("AbstractCurry","CDoExpr") [Var 118]],Comb FuncCall ("Prelude","/=") [Comb ConsCall ("AbstractCurry","CVar") [Var 119],Comb ConsCall ("AbstractCurry","CDoExpr") [Var 118]]]]]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("AbstractCurryPrinter","parens") [Comb FuncCall ("Prelude","++") [Var 13,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("AbstractCurryPrinter","showBoxedExpr") [Var 1,Comb ConsCall ("AbstractCurry","CDoExpr") [Var 118]]]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3])]),Branch (Pattern ("AbstractCurry","CLit") [120]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CSymbol") [121]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CApply") [122,123]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CLambda") [124,125]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CLetDecl") [126,127]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CDoExpr") [128]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CListComp") [129,130]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CCase") [131,132]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CRecConstr") [133]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CRecSelect") [134,135]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CRecUpdate") [136,137]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3])]),Branch (Pattern ("AbstractCurry","CListComp") [138,139]) (Case  Rigid (Var 10) [Branch (Pattern ("AbstractCurry","CVar") [140]) (Case  Rigid (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("AbstractCurryPrinter","isInfixOpName") [],Var 13],Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","==") [Var 6,Var 140],Comb FuncCall ("Prelude","&&") [Comb FuncCall ("AbstractCurryPrinter","isAtom") [Comb ConsCall ("AbstractCurry","CListComp") [Var 138,Var 139]],Comb FuncCall ("Prelude","/=") [Comb ConsCall ("AbstractCurry","CVar") [Var 140],Comb ConsCall ("AbstractCurry","CListComp") [Var 138,Var 139]]]]]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("AbstractCurryPrinter","parens") [Comb FuncCall ("Prelude","++") [Var 13,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("AbstractCurryPrinter","showBoxedExpr") [Var 1,Comb ConsCall ("AbstractCurry","CListComp") [Var 138,Var 139]]]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3])]),Branch (Pattern ("AbstractCurry","CLit") [141]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CSymbol") [142]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CApply") [143,144]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CLambda") [145,146]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CLetDecl") [147,148]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CDoExpr") [149]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CListComp") [150,151]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CCase") [152,153]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CRecConstr") [154]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CRecSelect") [155,156]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CRecUpdate") [157,158]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3])]),Branch (Pattern ("AbstractCurry","CCase") [159,160]) (Case  Rigid (Var 10) [Branch (Pattern ("AbstractCurry","CVar") [161]) (Case  Rigid (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("AbstractCurryPrinter","isInfixOpName") [],Var 13],Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","==") [Var 6,Var 161],Comb FuncCall ("Prelude","&&") [Comb FuncCall ("AbstractCurryPrinter","isAtom") [Comb ConsCall ("AbstractCurry","CCase") [Var 159,Var 160]],Comb FuncCall ("Prelude","/=") [Comb ConsCall ("AbstractCurry","CVar") [Var 161],Comb ConsCall ("AbstractCurry","CCase") [Var 159,Var 160]]]]]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("AbstractCurryPrinter","parens") [Comb FuncCall ("Prelude","++") [Var 13,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("AbstractCurryPrinter","showBoxedExpr") [Var 1,Comb ConsCall ("AbstractCurry","CCase") [Var 159,Var 160]]]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3])]),Branch (Pattern ("AbstractCurry","CLit") [162]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CSymbol") [163]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CApply") [164,165]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CLambda") [166,167]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CLetDecl") [168,169]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CDoExpr") [170]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CListComp") [171,172]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CCase") [173,174]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CRecConstr") [175]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CRecSelect") [176,177]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CRecUpdate") [178,179]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3])]),Branch (Pattern ("AbstractCurry","CRecConstr") [180]) (Case  Rigid (Var 10) [Branch (Pattern ("AbstractCurry","CVar") [181]) (Case  Rigid (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("AbstractCurryPrinter","isInfixOpName") [],Var 13],Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","==") [Var 6,Var 181],Comb FuncCall ("Prelude","&&") [Comb FuncCall ("AbstractCurryPrinter","isAtom") [Comb ConsCall ("AbstractCurry","CRecConstr") [Var 180]],Comb FuncCall ("Prelude","/=") [Comb ConsCall ("AbstractCurry","CVar") [Var 181],Comb ConsCall ("AbstractCurry","CRecConstr") [Var 180]]]]]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("AbstractCurryPrinter","parens") [Comb FuncCall ("Prelude","++") [Var 13,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("AbstractCurryPrinter","showBoxedExpr") [Var 1,Comb ConsCall ("AbstractCurry","CRecConstr") [Var 180]]]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3])]),Branch (Pattern ("AbstractCurry","CLit") [182]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CSymbol") [183]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CApply") [184,185]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CLambda") [186,187]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CLetDecl") [188,189]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CDoExpr") [190]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CListComp") [191,192]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CCase") [193,194]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CRecConstr") [195]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CRecSelect") [196,197]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CRecUpdate") [198,199]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3])]),Branch (Pattern ("AbstractCurry","CRecSelect") [200,201]) (Case  Rigid (Var 10) [Branch (Pattern ("AbstractCurry","CVar") [202]) (Case  Rigid (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("AbstractCurryPrinter","isInfixOpName") [],Var 13],Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","==") [Var 6,Var 202],Comb FuncCall ("Prelude","&&") [Comb FuncCall ("AbstractCurryPrinter","isAtom") [Comb ConsCall ("AbstractCurry","CRecSelect") [Var 200,Var 201]],Comb FuncCall ("Prelude","/=") [Comb ConsCall ("AbstractCurry","CVar") [Var 202],Comb ConsCall ("AbstractCurry","CRecSelect") [Var 200,Var 201]]]]]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("AbstractCurryPrinter","parens") [Comb FuncCall ("Prelude","++") [Var 13,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("AbstractCurryPrinter","showBoxedExpr") [Var 1,Comb ConsCall ("AbstractCurry","CRecSelect") [Var 200,Var 201]]]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3])]),Branch (Pattern ("AbstractCurry","CLit") [203]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CSymbol") [204]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CApply") [205,206]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CLambda") [207,208]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CLetDecl") [209,210]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CDoExpr") [211]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CListComp") [212,213]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CCase") [214,215]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CRecConstr") [216]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CRecSelect") [217,218]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CRecUpdate") [219,220]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3])]),Branch (Pattern ("AbstractCurry","CRecUpdate") [221,222]) (Case  Rigid (Var 10) [Branch (Pattern ("AbstractCurry","CVar") [223]) (Case  Rigid (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("AbstractCurryPrinter","isInfixOpName") [],Var 13],Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","==") [Var 6,Var 223],Comb FuncCall ("Prelude","&&") [Comb FuncCall ("AbstractCurryPrinter","isAtom") [Comb ConsCall ("AbstractCurry","CRecUpdate") [Var 221,Var 222]],Comb FuncCall ("Prelude","/=") [Comb ConsCall ("AbstractCurry","CVar") [Var 223],Comb ConsCall ("AbstractCurry","CRecUpdate") [Var 221,Var 222]]]]]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("AbstractCurryPrinter","parens") [Comb FuncCall ("Prelude","++") [Var 13,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("AbstractCurryPrinter","showBoxedExpr") [Var 1,Comb ConsCall ("AbstractCurry","CRecUpdate") [Var 221,Var 222]]]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3])]),Branch (Pattern ("AbstractCurry","CLit") [224]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CSymbol") [225]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CApply") [226,227]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CLambda") [228,229]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CLetDecl") [230,231]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CDoExpr") [232]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CListComp") [233,234]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CCase") [235,236]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CRecConstr") [237]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CRecSelect") [238,239]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CRecUpdate") [240,241]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3])])])]),Branch (Pattern ("AbstractCurry","CVar") [242]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CLit") [243]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CApply") [244,245]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CLambda") [246,247]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CLetDecl") [248,249]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CDoExpr") [250]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CListComp") [251,252]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CCase") [253,254]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CRecConstr") [255]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CRecSelect") [256,257]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CRecUpdate") [258,259]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3])]),Branch (Pattern ("AbstractCurry","CVar") [260]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CLit") [261]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CSymbol") [262]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CLambda") [263,264]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CLetDecl") [265,266]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CDoExpr") [267]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CListComp") [268,269]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CCase") [270,271]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CRecConstr") [272]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CRecSelect") [273,274]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CRecUpdate") [275,276]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3])]),Branch (Pattern ("AbstractCurry","CVar") [277]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CLit") [278]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CSymbol") [279]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CLambda") [280,281]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CLetDecl") [282,283]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CDoExpr") [284]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CListComp") [285,286]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CCase") [287,288]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CRecConstr") [289]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CRecSelect") [290,291]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CRecUpdate") [292,293]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3])]),Branch (Pattern ("Prelude",":") [294,295]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3])]),Branch (Pattern ("AbstractCurry","CPLit") [296]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CPComb") [297,298]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CPAs") [299,300]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CPFuncComb") [301,302]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CPLazy") [303]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractCurry","CPRecord") [304,305]) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3])]),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("AbstractCurryPrinter","showLambda") [Var 1,Var 2,Var 3])])),Func ("AbstractCurryPrinter","showLambda") 3 Private (FuncType (TCons ("Prelude","(,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","()") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("AbstractCurry","CPattern") []]) (FuncType (TCons ("AbstractCurry","CExpr") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1,2,3] (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '\\'),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractCurryPrinter","combineMap") [Comb (FuncPartCall 1) ("AbstractCurryPrinter","showPattern") [],Var 2,Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  '>'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("AbstractCurryPrinter","showExprOpt") [Var 1,Var 3]]]])),Func ("AbstractCurryPrinter","showStatement") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","()") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("AbstractCurry","CStatement") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("AbstractCurry","CSExpr") [3]) (Comb FuncCall ("AbstractCurryPrinter","showExprOpt") [Var 1,Var 3]),Branch (Pattern ("AbstractCurry","CSPat") [4,5]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractCurryPrinter","showPattern") [Var 4],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '<'),Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("AbstractCurryPrinter","showExprOpt") [Var 1,Var 5]]]),Branch (Pattern ("AbstractCurry","CSLet") [6]) (Case  Rigid (Var 6) [Branch (Pattern ("Prelude",":") [7,8]) (Case  Rigid (Var 8) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("AbstractCurryPrinter","showLocalDecl") [Var 1,Var 7]]),Branch (Pattern ("Prelude",":") [9,10]) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("AbstractCurryPrinter","showBlock") [Comb FuncCall ("AbstractCurryPrinter","combineMap") [Comb (FuncPartCall 1) ("AbstractCurryPrinter","showLocalDecl") [Var 1],Var 6,Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude","[]") []]]]])]),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("AbstractCurryPrinter","showBlock") [Comb FuncCall ("AbstractCurryPrinter","combineMap") [Comb (FuncPartCall 1) ("AbstractCurryPrinter","showLocalDecl") [Var 1],Var 6,Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude","[]") []]]]])])])),Func ("AbstractCurryPrinter","showPattern") 1 Public (FuncType (TCons ("AbstractCurry","CPattern") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("AbstractCurry","CPVar") [2]) (Case  Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("AbstractCurryPrinter","showIdentifier") [],Var 4])]),Branch (Pattern ("AbstractCurry","CPLit") [5]) (Comb FuncCall ("AbstractCurryPrinter","showLiteral") [Var 5]),Branch (Pattern ("AbstractCurry","CPComb") [6,7]) (Case  Flex (Var 6) [Branch (Pattern ("Prelude","(,)") [8,9]) (Case  Flex (Var 7) [Branch (Pattern ("Prelude","[]") []) (Var 9),Branch (Pattern ("Prelude",":") [10,11]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 8,Comb FuncCall ("AbstractCurryPrinter","prelude") []]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("AbstractCurryPrinter","showPreludeCons") [Comb ConsCall ("AbstractCurry","CPComb") [Comb ConsCall ("Prelude","(,)") [Var 8,Var 9],Comb ConsCall ("Prelude",":") [Var 10,Var 11]]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("AbstractCurryPrinter","isAsPattern") [Var 10]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("AbstractCurryPrinter","showAsPatternList") [Var 10]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("AbstractCurryPrinter","parens") [],Comb FuncCall ("Prelude","++") [Var 9,Comb FuncCall ("AbstractCurryPrinter","prefixMap") [Comb (FuncPartCall 1) ("AbstractCurryPrinter","showPattern") [],Comb ConsCall ("Prelude",":") [Var 10,Var 11],Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])])]),Branch (Pattern ("AbstractCurry","CPAs") [12,13]) (Case  Flex (Var 12) [Branch (Pattern ("Prelude","(,)") [14,15]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("AbstractCurryPrinter","showIdentifier") [],Var 15],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '@'),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("AbstractCurryPrinter","showPattern") [Var 13]]])]),Branch (Pattern ("AbstractCurry","CPFuncComb") [16,17]) (Comb FuncCall ("AbstractCurryPrinter","showPattern") [Comb ConsCall ("AbstractCurry","CPComb") [Var 16,Var 17]])])),Func ("AbstractCurryPrinter","showPreludeCons") 1 Private (FuncType (TCons ("AbstractCurry","CPattern") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Let [(2,Comb FuncCall ("AbstractCurryPrinter","showPreludeCons._#selFP5#name") [Var 1]),(3,Comb FuncCall ("AbstractCurryPrinter","showPreludeCons._#selFP6#pattlist") [Var 1])] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 2,Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude","[]") []]]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("AbstractCurryPrinter","showPatternList") [Var 1]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("AbstractCurryPrinter","isTuple") [Var 2]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("AbstractCurryPrinter","parens") [],Comb FuncCall ("AbstractCurryPrinter","combineMap") [Comb (FuncPartCall 1) ("AbstractCurryPrinter","showPattern") [],Var 3,Comb ConsCall ("Prelude",":") [Lit (Charc  ','),Comb ConsCall ("Prelude","[]") []]]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("AbstractCurryPrinter","parens") [],Comb FuncCall ("Prelude","++") [Var 2,Comb FuncCall ("AbstractCurryPrinter","prefixMap") [Comb (FuncPartCall 1) ("AbstractCurryPrinter","showPattern") [],Var 3,Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])]))),Func ("AbstractCurryPrinter","showPreludeCons._#selFP5#name") 1 Private (FuncType (TCons ("AbstractCurry","CPattern") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("AbstractCurry","CPComb") [2,3]) (Case  Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Var 5)])])),Func ("AbstractCurryPrinter","showPreludeCons._#selFP6#pattlist") 1 Private (FuncType (TCons ("AbstractCurry","CPattern") []) (TCons ("Prelude","[]") [TCons ("AbstractCurry","CPattern") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("AbstractCurry","CPComb") [2,3]) (Case  Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Var 3)])])),Func ("AbstractCurryPrinter","showPatternList") 1 Private (FuncType (TCons ("AbstractCurry","CPattern") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Rigid (Comb FuncCall ("AbstractCurryPrinter","isClosedStringPattern") [Var 1]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("AbstractCurryPrinter","doubleQuotes") [],Comb FuncCall ("Prelude","filter") [Comb (FuncPartCall 1) ("Prelude","flip") [Comb (FuncPartCall 2) ("Prelude","/=") [],Lit (Charc  '\'')],Comb FuncCall ("Prelude","concat") [Comb FuncCall ("AbstractCurryPrinter","showPatListElems") [Var 1]]]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("AbstractCurryPrinter","isClosedPatternList") [Var 1]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("AbstractCurryPrinter","brackets") [],Comb FuncCall ("Prelude","concat") [Comb FuncCall ("List","intersperse") [Comb ConsCall ("Prelude",":") [Lit (Charc  ','),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("AbstractCurryPrinter","showPatListElems") [Var 1]]]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("AbstractCurryPrinter","isAsPattern") [Var 1]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("AbstractCurryPrinter","showAsPatternList") [Var 1]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("AbstractCurryPrinter","parens") [],Comb FuncCall ("Prelude","concat") [Comb FuncCall ("List","intersperse") [Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("AbstractCurryPrinter","showPatListElems") [Var 1]]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])])),Func ("AbstractCurryPrinter","showPatListElems") 1 Private (FuncType (TCons ("AbstractCurry","CPattern") []) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("AbstractCurry","CPComb") [2,3]) (Case  Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Case  Flex (Var 5) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 6) [Branch (LPattern (Charc  ':')) (Case  Flex (Var 7) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [8,9]) (Case  Flex (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case  Flex (Var 11) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude",":") [Comb FuncCall ("AbstractCurryPrinter","showPattern") [Var 8],Comb FuncCall ("AbstractCurryPrinter","showPatListElems") [Var 10]])])])])]),Branch (LPattern (Charc  '[')) (Case  Flex (Var 7) [Branch (Pattern ("Prelude",":") [12,13]) (Case  Flex (Var 12) [Branch (LPattern (Charc  ']')) (Case  Flex (Var 13) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") [])])])])])])])]),Branch (Pattern ("AbstractCurry","CPVar") [14]) (Comb ConsCall ("Prelude",":") [Comb FuncCall ("AbstractCurryPrinter","showPattern") [Comb ConsCall ("AbstractCurry","CPVar") [Var 14]],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("AbstractCurry","CPAs") [15,16]) (Comb ConsCall ("Prelude",":") [Comb FuncCall ("AbstractCurryPrinter","showPattern") [Comb ConsCall ("AbstractCurry","CPAs") [Var 15,Var 16]],Comb ConsCall ("Prelude","[]") []])])),Func ("AbstractCurryPrinter","isClosedPatternList") 1 Private (FuncType (TCons ("AbstractCurry","CPattern") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("AbstractCurry","CPComb") [2,3]) (Case  Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Case  Flex (Var 5) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 6) [Branch (LPattern (Charc  ':')) (Case  Flex (Var 7) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [8,9]) (Case  Flex (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case  Flex (Var 11) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","==") [Var 4,Comb FuncCall ("AbstractCurryPrinter","prelude") []],Comb FuncCall ("AbstractCurryPrinter","isClosedPatternList") [Var 10]])])])])]),Branch (LPattern (Charc  '[')) (Case  Flex (Var 7) [Branch (Pattern ("Prelude",":") [12,13]) (Case  Flex (Var 12) [Branch (LPattern (Charc  ']')) (Case  Flex (Var 13) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","==") [Var 4,Comb FuncCall ("AbstractCurryPrinter","prelude") []])])])])])])])]),Branch (Pattern ("AbstractCurry","CPVar") [14]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractCurry","CPAs") [15,16]) (Comb FuncCall ("AbstractCurryPrinter","isClosedPatternList") [Var 16])])),Func ("AbstractCurryPrinter","isClosedStringPattern") 1 Private (FuncType (TCons ("AbstractCurry","CPattern") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("AbstractCurry","CPComb") [2,3]) (Case  Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Case  Flex (Var 5) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 6) [Branch (LPattern (Charc  ':')) (Case  Flex (Var 7) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [8,9]) (Case  Flex (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case  Flex (Var 11) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","==") [Var 4,Comb FuncCall ("AbstractCurryPrinter","prelude") []],Comb FuncCall ("Prelude","&&") [Comb FuncCall ("AbstractCurryPrinter","isCharPattern") [Var 8],Comb FuncCall ("AbstractCurryPrinter","isClosedStringPattern") [Var 10]]])])])])]),Branch (LPattern (Charc  '[')) (Case  Flex (Var 7) [Branch (Pattern ("Prelude",":") [12,13]) (Case  Flex (Var 12) [Branch (LPattern (Charc  ']')) (Case  Flex (Var 13) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","==") [Var 4,Comb FuncCall ("AbstractCurryPrinter","prelude") []])])])])])])])]),Branch (Pattern ("AbstractCurry","CPVar") [14]) (Comb ConsCall ("Prelude","False") [])])),Func ("AbstractCurryPrinter","isCharPattern") 1 Private (FuncType (TCons ("AbstractCurry","CPattern") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Case  Rigid (Var 1) [Branch (Pattern ("AbstractCurry","CPLit") [2]) (Case  Rigid (Var 2) [Branch (Pattern ("AbstractCurry","CCharc") [3]) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("AbstractCurry","CIntc") [4]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractCurry","CFloatc") [5]) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("AbstractCurry","CPVar") [6]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractCurry","CPComb") [7,8]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractCurry","CPAs") [9,10]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractCurry","CPFuncComb") [11,12]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractCurry","CPLazy") [13]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractCurry","CPRecord") [14,15]) (Comb ConsCall ("Prelude","False") [])])),Func ("AbstractCurryPrinter","isAsPattern") 1 Private (FuncType (TCons ("AbstractCurry","CPattern") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Case  Rigid (Var 1) [Branch (Pattern ("AbstractCurry","CPAs") [2,3]) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("AbstractCurry","CPVar") [4]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractCurry","CPLit") [5]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractCurry","CPComb") [6,7]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractCurry","CPFuncComb") [8,9]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractCurry","CPLazy") [10]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractCurry","CPRecord") [11,12]) (Comb ConsCall ("Prelude","False") [])])),Func ("AbstractCurryPrinter","showAsPatternList") 1 Private (FuncType (TCons ("AbstractCurry","CPattern") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("AbstractCurry","CPAs") [2,3]) (Case  Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb FuncCall ("Prelude","++") [Var 5,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '@'),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("AbstractCurryPrinter","parens") [Comb FuncCall ("Prelude","concat") [Comb FuncCall ("List","intersperse") [Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("AbstractCurryPrinter","showPatListElems") [Var 3]]]]]])])])),Func ("AbstractCurryPrinter","showBranchExpr") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","()") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("AbstractCurry","CBranchExpr") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("AbstractCurry","CBranch") [3,4]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractCurryPrinter","showPattern") [Var 3],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  '>'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("AbstractCurryPrinter","showExprOpt") [Var 1,Var 4]]]),Branch (Pattern ("AbstractCurry","CGuardedBranch") [5,6]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractCurryPrinter","showPattern") [Var 5],Comb FuncCall ("AbstractCurryPrinter","showGuards") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  '>'),Comb ConsCall ("Prelude","[]") []]],Var 6]])])),Func ("AbstractCurryPrinter","showLiteral") 1 Private (FuncType (TCons ("AbstractCurry","CLiteral") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("AbstractCurry","CIntc") [2]) (Comb FuncCall ("Prelude","show") [Var 2]),Branch (Pattern ("AbstractCurry","CFloatc") [3]) (Comb FuncCall ("Prelude","show") [Var 3]),Branch (Pattern ("AbstractCurry","CCharc") [4]) (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("AbstractCurryPrinter","quotes") [],Comb FuncCall ("AbstractCurryPrinter","showCCharc") [Comb ConsCall ("AbstractCurry","CCharc") [Var 4]]])])),Func ("AbstractCurryPrinter","showCCharc") 1 Private (FuncType (TCons ("AbstractCurry","CLiteral") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("AbstractCurry","CCharc") [2]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 2,Lit (Charc  '\010')]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  '\\'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude","[]") []]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 2,Lit (Charc  '\013')]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  '\\'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude","[]") []]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 2,Lit (Charc  '\\')]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  '\\'),Comb ConsCall ("Prelude",":") [Lit (Charc  '\\'),Comb ConsCall ("Prelude","[]") []]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 2,Lit (Charc  '"')]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  '\\'),Comb ConsCall ("Prelude",":") [Lit (Charc  '"'),Comb ConsCall ("Prelude","[]") []]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])])])])),Func ("AbstractCurryPrinter","showBlock") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Comb FuncCall ("AbstractCurryPrinter","combineMap") [Comb (FuncPartCall 1) ("Prelude","id") [],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]],Comb FuncCall ("Prelude","filter") [Comb (FuncPartCall 1) ("Prelude","/=") [Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","lines") [Var 1]]],Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude","[]") []]])),Func ("AbstractCurryPrinter","showTypeCons") 3 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("AbstractCurry","CTypeExpr") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1,2,3] (Case  Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Var 2),Branch (Pattern ("Prelude",":") [4,5]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 1,Comb FuncCall ("AbstractCurryPrinter","prelude") []]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("AbstractCurryPrinter","showPreludeTypeCons") [Var 2,Comb ConsCall ("Prelude",":") [Var 4,Var 5]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","++") [Var 2,Comb FuncCall ("AbstractCurryPrinter","prefixMap") [Comb (FuncPartCall 1) ("AbstractCurryPrinter","showTypeExpr") [Comb ConsCall ("Prelude","True") []],Comb ConsCall ("Prelude",":") [Var 4,Var 5],Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])),Func ("AbstractCurryPrinter","showPreludeTypeCons") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("AbstractCurry","CTypeExpr") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1,2] (Case  Rigid (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","==") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc  '['),Comb ConsCall ("Prelude",":") [Lit (Charc  ']'),Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("Prelude","==") [Comb FuncCall ("Prelude","head") [Var 2],Comb ConsCall ("AbstractCurry","CTCons") [Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("AbstractCurryPrinter","prelude") [],Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude","[]") []]]]]],Comb ConsCall ("Prelude","[]") []]]]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  'S'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude","[]") []]]]]]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc  '['),Comb ConsCall ("Prelude",":") [Lit (Charc  ']'),Comb ConsCall ("Prelude","[]") []]]]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '['),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractCurryPrinter","showTypeExpr") [Comb ConsCall ("Prelude","False") [],Comb FuncCall ("Prelude","head") [Var 2]],Comb ConsCall ("Prelude",":") [Lit (Charc  ']'),Comb ConsCall ("Prelude","[]") []]]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("AbstractCurryPrinter","isTuple") [Var 1]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractCurryPrinter","combineMap") [Comb (FuncPartCall 1) ("AbstractCurryPrinter","showTypeExpr") [Comb ConsCall ("Prelude","False") []],Var 2,Comb ConsCall ("Prelude",":") [Lit (Charc  ','),Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude","[]") []]]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","++") [Var 1,Comb FuncCall ("AbstractCurryPrinter","prefixMap") [Comb (FuncPartCall 1) ("AbstractCurryPrinter","showTypeExpr") [Comb ConsCall ("Prelude","True") []],Var 2,Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])])),Func ("AbstractCurryPrinter","showApplication") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","()") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("AbstractCurry","CExpr") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1,2] (Case  Rigid (Comb FuncCall ("AbstractCurryPrinter","applicationHead") [Var 2]) [Branch (Pattern ("AbstractCurry","CSymbol") [3]) (Comb FuncCall ("AbstractCurryPrinter","showSymbolApplication") [Var 1,Var 3,Var 2]),Branch (Pattern ("AbstractCurry","CVar") [4]) (Comb FuncCall ("AbstractCurryPrinter","showSimpleApplication") [Var 1,Var 2]),Branch (Pattern ("AbstractCurry","CLit") [5]) (Comb FuncCall ("AbstractCurryPrinter","showSimpleApplication") [Var 1,Var 2]),Branch (Pattern ("AbstractCurry","CApply") [6,7]) (Comb FuncCall ("AbstractCurryPrinter","showSimpleApplication") [Var 1,Var 2]),Branch (Pattern ("AbstractCurry","CLambda") [8,9]) (Comb FuncCall ("AbstractCurryPrinter","showSimpleApplication") [Var 1,Var 2]),Branch (Pattern ("AbstractCurry","CLetDecl") [10,11]) (Comb FuncCall ("AbstractCurryPrinter","showSimpleApplication") [Var 1,Var 2]),Branch (Pattern ("AbstractCurry","CDoExpr") [12]) (Comb FuncCall ("AbstractCurryPrinter","showSimpleApplication") [Var 1,Var 2]),Branch (Pattern ("AbstractCurry","CListComp") [13,14]) (Comb FuncCall ("AbstractCurryPrinter","showSimpleApplication") [Var 1,Var 2]),Branch (Pattern ("AbstractCurry","CCase") [15,16]) (Comb FuncCall ("AbstractCurryPrinter","showSimpleApplication") [Var 1,Var 2]),Branch (Pattern ("AbstractCurry","CRecConstr") [17]) (Comb FuncCall ("AbstractCurryPrinter","showSimpleApplication") [Var 1,Var 2]),Branch (Pattern ("AbstractCurry","CRecSelect") [18,19]) (Comb FuncCall ("AbstractCurryPrinter","showSimpleApplication") [Var 1,Var 2]),Branch (Pattern ("AbstractCurry","CRecUpdate") [20,21]) (Comb FuncCall ("AbstractCurryPrinter","showSimpleApplication") [Var 1,Var 2])])),Func ("AbstractCurryPrinter","applicationHead") 1 Private (FuncType (TCons ("AbstractCurry","CExpr") []) (TCons ("AbstractCurry","CExpr") [])) (Rule [1] (Case  Rigid (Var 1) [Branch (Pattern ("AbstractCurry","CApply") [2,3]) (Comb FuncCall ("AbstractCurryPrinter","applicationHead") [Var 2]),Branch (Pattern ("AbstractCurry","CVar") [4]) (Var 1),Branch (Pattern ("AbstractCurry","CLit") [5]) (Var 1),Branch (Pattern ("AbstractCurry","CSymbol") [6]) (Var 1),Branch (Pattern ("AbstractCurry","CLambda") [7,8]) (Var 1),Branch (Pattern ("AbstractCurry","CLetDecl") [9,10]) (Var 1),Branch (Pattern ("AbstractCurry","CDoExpr") [11]) (Var 1),Branch (Pattern ("AbstractCurry","CListComp") [12,13]) (Var 1),Branch (Pattern ("AbstractCurry","CCase") [14,15]) (Var 1),Branch (Pattern ("AbstractCurry","CRecConstr") [16]) (Var 1),Branch (Pattern ("AbstractCurry","CRecSelect") [17,18]) (Var 1),Branch (Pattern ("AbstractCurry","CRecUpdate") [19,20]) (Var 1)])),Func ("AbstractCurryPrinter","showSymbolApplication") 3 Private (FuncType (TCons ("Prelude","(,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","()") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("AbstractCurry","CExpr") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1,2,3] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Case  Rigid (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","==") [Var 4,Comb FuncCall ("AbstractCurryPrinter","prelude") []],Comb FuncCall ("Prelude","==") [Var 5,Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude","[]") []]]]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("AbstractCurryPrinter","showListApplication") [Var 1,Var 3]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("AbstractCurryPrinter","isInfixOpName") [],Var 5]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("AbstractCurryPrinter","showInfixApplication") [Var 1,Comb ConsCall ("Prelude","(,)") [Var 4,Var 5],Var 3]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","==") [Var 4,Comb FuncCall ("AbstractCurryPrinter","prelude") []],Comb FuncCall ("Prelude","==") [Var 5,Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("AbstractCurryPrinter","showITEApplication") [Var 1,Var 3]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("AbstractCurryPrinter","isTuple") [Var 5]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("AbstractCurryPrinter","showTupleApplication") [Var 1,Var 3]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("AbstractCurryPrinter","showSimpleApplication") [Var 1,Var 3]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])])])])),Func ("AbstractCurryPrinter","showListApplication") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","()") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("AbstractCurry","CExpr") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1,2] (Case  Rigid (Comb FuncCall ("AbstractCurryPrinter","isStringList") [Var 2]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '"'),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractCurryPrinter","showCharListApplication") [Var 1,Var 2],Comb ConsCall ("Prelude",":") [Lit (Charc  '"'),Comb ConsCall ("Prelude","[]") []]]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("AbstractCurryPrinter","isClosedList") [Var 2]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("AbstractCurryPrinter","brackets") [],Comb FuncCall ("AbstractCurryPrinter","showConsListApplication") [Var 1,Var 2]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("AbstractCurryPrinter","parens") [],Comb FuncCall ("AbstractCurryPrinter","showSimpleListApplication") [Var 1,Var 2]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])),Func ("AbstractCurryPrinter","showCharListApplication") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","()") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("AbstractCurry","CExpr") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("AbstractCurry","CApply") [3,4]) (Case  Flex (Var 3) [Branch (Pattern ("AbstractCurry","CApply") [5,6]) (Case  Flex (Var 6) [Branch (Pattern ("AbstractCurry","CLit") [7]) (Case  Rigid (Var 4) [Branch (Pattern ("AbstractCurry","CSymbol") [8]) (Comb FuncCall ("AbstractCurryPrinter","showCCharc") [Var 7]),Branch (Pattern ("AbstractCurry","CVar") [9]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractCurryPrinter","showCCharc") [Var 7],Comb FuncCall ("AbstractCurryPrinter","showCharListApplication") [Var 1,Var 4]]),Branch (Pattern ("AbstractCurry","CLit") [10]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractCurryPrinter","showCCharc") [Var 7],Comb FuncCall ("AbstractCurryPrinter","showCharListApplication") [Var 1,Var 4]]),Branch (Pattern ("AbstractCurry","CApply") [11,12]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractCurryPrinter","showCCharc") [Var 7],Comb FuncCall ("AbstractCurryPrinter","showCharListApplication") [Var 1,Var 4]]),Branch (Pattern ("AbstractCurry","CLambda") [13,14]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractCurryPrinter","showCCharc") [Var 7],Comb FuncCall ("AbstractCurryPrinter","showCharListApplication") [Var 1,Var 4]]),Branch (Pattern ("AbstractCurry","CLetDecl") [15,16]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractCurryPrinter","showCCharc") [Var 7],Comb FuncCall ("AbstractCurryPrinter","showCharListApplication") [Var 1,Var 4]]),Branch (Pattern ("AbstractCurry","CDoExpr") [17]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractCurryPrinter","showCCharc") [Var 7],Comb FuncCall ("AbstractCurryPrinter","showCharListApplication") [Var 1,Var 4]]),Branch (Pattern ("AbstractCurry","CListComp") [18,19]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractCurryPrinter","showCCharc") [Var 7],Comb FuncCall ("AbstractCurryPrinter","showCharListApplication") [Var 1,Var 4]]),Branch (Pattern ("AbstractCurry","CCase") [20,21]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractCurryPrinter","showCCharc") [Var 7],Comb FuncCall ("AbstractCurryPrinter","showCharListApplication") [Var 1,Var 4]]),Branch (Pattern ("AbstractCurry","CRecConstr") [22]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractCurryPrinter","showCCharc") [Var 7],Comb FuncCall ("AbstractCurryPrinter","showCharListApplication") [Var 1,Var 4]]),Branch (Pattern ("AbstractCurry","CRecSelect") [23,24]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractCurryPrinter","showCCharc") [Var 7],Comb FuncCall ("AbstractCurryPrinter","showCharListApplication") [Var 1,Var 4]]),Branch (Pattern ("AbstractCurry","CRecUpdate") [25,26]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractCurryPrinter","showCCharc") [Var 7],Comb FuncCall ("AbstractCurryPrinter","showCharListApplication") [Var 1,Var 4]])])])])])),Func ("AbstractCurryPrinter","showConsListApplication") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","()") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("AbstractCurry","CExpr") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("AbstractCurry","CApply") [3,4]) (Case  Flex (Var 3) [Branch (Pattern ("AbstractCurry","CApply") [5,6]) (Case  Rigid (Var 4) [Branch (Pattern ("AbstractCurry","CSymbol") [7]) (Comb FuncCall ("AbstractCurryPrinter","showBoxedExpr") [Var 1,Var 6]),Branch (Pattern ("AbstractCurry","CVar") [8]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractCurryPrinter","showBoxedExpr") [Var 1,Var 6],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ','),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("AbstractCurryPrinter","showConsListApplication") [Var 1,Var 4]]]),Branch (Pattern ("AbstractCurry","CLit") [9]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractCurryPrinter","showBoxedExpr") [Var 1,Var 6],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ','),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("AbstractCurryPrinter","showConsListApplication") [Var 1,Var 4]]]),Branch (Pattern ("AbstractCurry","CApply") [10,11]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractCurryPrinter","showBoxedExpr") [Var 1,Var 6],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ','),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("AbstractCurryPrinter","showConsListApplication") [Var 1,Var 4]]]),Branch (Pattern ("AbstractCurry","CLambda") [12,13]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractCurryPrinter","showBoxedExpr") [Var 1,Var 6],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ','),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("AbstractCurryPrinter","showConsListApplication") [Var 1,Var 4]]]),Branch (Pattern ("AbstractCurry","CLetDecl") [14,15]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractCurryPrinter","showBoxedExpr") [Var 1,Var 6],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ','),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("AbstractCurryPrinter","showConsListApplication") [Var 1,Var 4]]]),Branch (Pattern ("AbstractCurry","CDoExpr") [16]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractCurryPrinter","showBoxedExpr") [Var 1,Var 6],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ','),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("AbstractCurryPrinter","showConsListApplication") [Var 1,Var 4]]]),Branch (Pattern ("AbstractCurry","CListComp") [17,18]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractCurryPrinter","showBoxedExpr") [Var 1,Var 6],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ','),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("AbstractCurryPrinter","showConsListApplication") [Var 1,Var 4]]]),Branch (Pattern ("AbstractCurry","CCase") [19,20]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractCurryPrinter","showBoxedExpr") [Var 1,Var 6],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ','),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("AbstractCurryPrinter","showConsListApplication") [Var 1,Var 4]]]),Branch (Pattern ("AbstractCurry","CRecConstr") [21]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractCurryPrinter","showBoxedExpr") [Var 1,Var 6],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ','),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("AbstractCurryPrinter","showConsListApplication") [Var 1,Var 4]]]),Branch (Pattern ("AbstractCurry","CRecSelect") [22,23]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractCurryPrinter","showBoxedExpr") [Var 1,Var 6],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ','),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("AbstractCurryPrinter","showConsListApplication") [Var 1,Var 4]]]),Branch (Pattern ("AbstractCurry","CRecUpdate") [24,25]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractCurryPrinter","showBoxedExpr") [Var 1,Var 6],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ','),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("AbstractCurryPrinter","showConsListApplication") [Var 1,Var 4]]])])])])),Func ("AbstractCurryPrinter","showSimpleListApplication") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","()") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("AbstractCurry","CExpr") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("AbstractCurry","CApply") [3,4]) (Case  Flex (Var 3) [Branch (Pattern ("AbstractCurry","CApply") [5,6]) (Case  Rigid (Var 4) [Branch (Pattern ("AbstractCurry","CSymbol") [7]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractCurryPrinter","showBoxedExpr") [Var 1,Var 6],Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude",":") [Lit (Charc  '['),Comb ConsCall ("Prelude",":") [Lit (Charc  ']'),Comb ConsCall ("Prelude","[]") []]]]]),Branch (Pattern ("AbstractCurry","CVar") [8]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractCurryPrinter","showBoxedExpr") [Var 1,Var 6],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("AbstractCurryPrinter","showBoxedExpr") [Var 1,Var 4]]]),Branch (Pattern ("AbstractCurry","CLit") [9]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractCurryPrinter","showBoxedExpr") [Var 1,Var 6],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("AbstractCurryPrinter","showBoxedExpr") [Var 1,Var 4]]]),Branch (Pattern ("AbstractCurry","CApply") [10,11]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractCurryPrinter","showBoxedExpr") [Var 1,Var 6],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("AbstractCurryPrinter","showBoxedExpr") [Var 1,Var 4]]]),Branch (Pattern ("AbstractCurry","CLambda") [12,13]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractCurryPrinter","showBoxedExpr") [Var 1,Var 6],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("AbstractCurryPrinter","showBoxedExpr") [Var 1,Var 4]]]),Branch (Pattern ("AbstractCurry","CLetDecl") [14,15]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractCurryPrinter","showBoxedExpr") [Var 1,Var 6],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("AbstractCurryPrinter","showBoxedExpr") [Var 1,Var 4]]]),Branch (Pattern ("AbstractCurry","CDoExpr") [16]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractCurryPrinter","showBoxedExpr") [Var 1,Var 6],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("AbstractCurryPrinter","showBoxedExpr") [Var 1,Var 4]]]),Branch (Pattern ("AbstractCurry","CListComp") [17,18]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractCurryPrinter","showBoxedExpr") [Var 1,Var 6],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("AbstractCurryPrinter","showBoxedExpr") [Var 1,Var 4]]]),Branch (Pattern ("AbstractCurry","CCase") [19,20]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractCurryPrinter","showBoxedExpr") [Var 1,Var 6],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("AbstractCurryPrinter","showBoxedExpr") [Var 1,Var 4]]]),Branch (Pattern ("AbstractCurry","CRecConstr") [21]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractCurryPrinter","showBoxedExpr") [Var 1,Var 6],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("AbstractCurryPrinter","showBoxedExpr") [Var 1,Var 4]]]),Branch (Pattern ("AbstractCurry","CRecSelect") [22,23]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractCurryPrinter","showBoxedExpr") [Var 1,Var 6],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("AbstractCurryPrinter","showBoxedExpr") [Var 1,Var 4]]]),Branch (Pattern ("AbstractCurry","CRecUpdate") [24,25]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractCurryPrinter","showBoxedExpr") [Var 1,Var 6],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("AbstractCurryPrinter","showBoxedExpr") [Var 1,Var 4]]])]),Branch (Pattern ("AbstractCurry","CSymbol") [26]) (Case  Flex (Var 26) [Branch (Pattern ("Prelude","(,)") [27,28]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractCurryPrinter","showBoxedExpr") [Var 1,Var 4],Var 28])])])])),Func ("AbstractCurryPrinter","showInfixApplication") 3 Private (FuncType (TCons ("Prelude","(,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","()") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("AbstractCurry","CExpr") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1,2,3] (Case  Flex (Var 3) [Branch (Pattern ("AbstractCurry","CApply") [4,5]) (Case  Rigid (Var 4) [Branch (Pattern ("AbstractCurry","CApply") [6,7]) (Case  Rigid (Var 6) [Branch (Pattern ("AbstractCurry","CApply") [8,9]) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractCurryPrinter","showBoxedExpr") [Var 1,Var 9],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractCurryPrinter","showSymbol") [Var 1,Var 2],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractCurryPrinter","showBoxedExpr") [Var 1,Var 7],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("AbstractCurryPrinter","showBoxedExpr") [Var 1,Var 5]]]]]]]]),Branch (Pattern ("AbstractCurry","CVar") [10]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractCurryPrinter","showBoxedExpr") [Var 1,Var 7],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractCurryPrinter","showSymbol") [Var 1,Var 2],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("AbstractCurryPrinter","showBoxedExpr") [Var 1,Var 5]]]]]),Branch (Pattern ("AbstractCurry","CLit") [11]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractCurryPrinter","showBoxedExpr") [Var 1,Var 7],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractCurryPrinter","showSymbol") [Var 1,Var 2],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("AbstractCurryPrinter","showBoxedExpr") [Var 1,Var 5]]]]]),Branch (Pattern ("AbstractCurry","CSymbol") [12]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractCurryPrinter","showBoxedExpr") [Var 1,Var 7],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractCurryPrinter","showSymbol") [Var 1,Var 2],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("AbstractCurryPrinter","showBoxedExpr") [Var 1,Var 5]]]]]),Branch (Pattern ("AbstractCurry","CLambda") [13,14]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractCurryPrinter","showBoxedExpr") [Var 1,Var 7],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractCurryPrinter","showSymbol") [Var 1,Var 2],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("AbstractCurryPrinter","showBoxedExpr") [Var 1,Var 5]]]]]),Branch (Pattern ("AbstractCurry","CLetDecl") [15,16]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractCurryPrinter","showBoxedExpr") [Var 1,Var 7],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractCurryPrinter","showSymbol") [Var 1,Var 2],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("AbstractCurryPrinter","showBoxedExpr") [Var 1,Var 5]]]]]),Branch (Pattern ("AbstractCurry","CDoExpr") [17]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractCurryPrinter","showBoxedExpr") [Var 1,Var 7],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractCurryPrinter","showSymbol") [Var 1,Var 2],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("AbstractCurryPrinter","showBoxedExpr") [Var 1,Var 5]]]]]),Branch (Pattern ("AbstractCurry","CListComp") [18,19]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractCurryPrinter","showBoxedExpr") [Var 1,Var 7],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractCurryPrinter","showSymbol") [Var 1,Var 2],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("AbstractCurryPrinter","showBoxedExpr") [Var 1,Var 5]]]]]),Branch (Pattern ("AbstractCurry","CCase") [20,21]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractCurryPrinter","showBoxedExpr") [Var 1,Var 7],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractCurryPrinter","showSymbol") [Var 1,Var 2],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("AbstractCurryPrinter","showBoxedExpr") [Var 1,Var 5]]]]]),Branch (Pattern ("AbstractCurry","CRecConstr") [22]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractCurryPrinter","showBoxedExpr") [Var 1,Var 7],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractCurryPrinter","showSymbol") [Var 1,Var 2],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("AbstractCurryPrinter","showBoxedExpr") [Var 1,Var 5]]]]]),Branch (Pattern ("AbstractCurry","CRecSelect") [23,24]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractCurryPrinter","showBoxedExpr") [Var 1,Var 7],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractCurryPrinter","showSymbol") [Var 1,Var 2],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("AbstractCurryPrinter","showBoxedExpr") [Var 1,Var 5]]]]]),Branch (Pattern ("AbstractCurry","CRecUpdate") [25,26]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractCurryPrinter","showBoxedExpr") [Var 1,Var 7],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractCurryPrinter","showSymbol") [Var 1,Var 2],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("AbstractCurryPrinter","showBoxedExpr") [Var 1,Var 5]]]]])]),Branch (Pattern ("AbstractCurry","CVar") [27]) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractCurryPrinter","showSymbol") [Var 1,Var 2],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("AbstractCurryPrinter","showBoxedExpr") [Var 1,Var 5]]]]),Branch (Pattern ("AbstractCurry","CLit") [28]) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractCurryPrinter","showSymbol") [Var 1,Var 2],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("AbstractCurryPrinter","showBoxedExpr") [Var 1,Var 5]]]]),Branch (Pattern ("AbstractCurry","CSymbol") [29]) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractCurryPrinter","showSymbol") [Var 1,Var 2],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("AbstractCurryPrinter","showBoxedExpr") [Var 1,Var 5]]]]),Branch (Pattern ("AbstractCurry","CLambda") [30,31]) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractCurryPrinter","showSymbol") [Var 1,Var 2],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("AbstractCurryPrinter","showBoxedExpr") [Var 1,Var 5]]]]),Branch (Pattern ("AbstractCurry","CLetDecl") [32,33]) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractCurryPrinter","showSymbol") [Var 1,Var 2],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("AbstractCurryPrinter","showBoxedExpr") [Var 1,Var 5]]]]),Branch (Pattern ("AbstractCurry","CDoExpr") [34]) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractCurryPrinter","showSymbol") [Var 1,Var 2],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("AbstractCurryPrinter","showBoxedExpr") [Var 1,Var 5]]]]),Branch (Pattern ("AbstractCurry","CListComp") [35,36]) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractCurryPrinter","showSymbol") [Var 1,Var 2],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("AbstractCurryPrinter","showBoxedExpr") [Var 1,Var 5]]]]),Branch (Pattern ("AbstractCurry","CCase") [37,38]) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractCurryPrinter","showSymbol") [Var 1,Var 2],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("AbstractCurryPrinter","showBoxedExpr") [Var 1,Var 5]]]]),Branch (Pattern ("AbstractCurry","CRecConstr") [39]) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractCurryPrinter","showSymbol") [Var 1,Var 2],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("AbstractCurryPrinter","showBoxedExpr") [Var 1,Var 5]]]]),Branch (Pattern ("AbstractCurry","CRecSelect") [40,41]) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractCurryPrinter","showSymbol") [Var 1,Var 2],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("AbstractCurryPrinter","showBoxedExpr") [Var 1,Var 5]]]]),Branch (Pattern ("AbstractCurry","CRecUpdate") [42,43]) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractCurryPrinter","showSymbol") [Var 1,Var 2],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("AbstractCurryPrinter","showBoxedExpr") [Var 1,Var 5]]]])])])),Func ("AbstractCurryPrinter","showITEApplication") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","()") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("AbstractCurry","CExpr") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("AbstractCurry","CApply") [3,4]) (Case  Flex (Var 3) [Branch (Pattern ("AbstractCurry","CApply") [5,6]) (Case  Flex (Var 5) [Branch (Pattern ("AbstractCurry","CApply") [7,8]) (Case  Flex (Var 7) [Branch (Pattern ("AbstractCurry","CSymbol") [9]) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractCurryPrinter","showExprOpt") [Var 1,Var 8],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]],Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractCurryPrinter","showExprOpt") [Var 1,Var 6],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]],Comb FuncCall ("AbstractCurryPrinter","showExprOpt") [Var 1,Var 4]]]]]]),Branch (Pattern ("AbstractCurry","CApply") [10,11]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractCurryPrinter","parens") [Comb FuncCall ("AbstractCurryPrinter","showITEApplication") [Var 1,Var 3]],Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb FuncCall ("AbstractCurryPrinter","showBoxedExpr") [Var 1,Var 4]]])])])])])),Func ("AbstractCurryPrinter","showTupleApplication") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","()") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("AbstractCurry","CExpr") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1,2] (Comb FuncCall ("AbstractCurryPrinter","parens") [Comb FuncCall ("AbstractCurryPrinter","showTupleApplication.p_showTuple.401") [Var 1,Var 2]])),Func ("AbstractCurryPrinter","showTupleApplication.p_showTuple.401") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","()") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("AbstractCurry","CExpr") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("AbstractCurry","CApply") [3,4]) (Case  Flex (Var 3) [Branch (Pattern ("AbstractCurry","CSymbol") [5]) (Comb FuncCall ("AbstractCurryPrinter","showExprOpt") [Var 1,Var 4]),Branch (Pattern ("AbstractCurry","CApply") [6,7]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractCurryPrinter","showTupleApplication.p_showTuple.401") [Var 1,Comb ConsCall ("AbstractCurry","CApply") [Var 6,Var 7]],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ','),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("AbstractCurryPrinter","showExprOpt") [Var 1,Var 4]]])])])),Func ("AbstractCurryPrinter","showSimpleApplication") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","()") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("AbstractCurry","CExpr") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1,2] (Case  Rigid (Var 2) [Branch (Pattern ("AbstractCurry","CApply") [3,4]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractCurryPrinter","showSimpleApplication") [Var 1,Var 3],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("AbstractCurryPrinter","showBoxedExpr") [Var 1,Var 4]]]),Branch (Pattern ("AbstractCurry","CVar") [5]) (Comb FuncCall ("AbstractCurryPrinter","showBoxedExpr") [Var 1,Var 2]),Branch (Pattern ("AbstractCurry","CLit") [6]) (Comb FuncCall ("AbstractCurryPrinter","showBoxedExpr") [Var 1,Var 2]),Branch (Pattern ("AbstractCurry","CSymbol") [7]) (Comb FuncCall ("AbstractCurryPrinter","showBoxedExpr") [Var 1,Var 2]),Branch (Pattern ("AbstractCurry","CLambda") [8,9]) (Comb FuncCall ("AbstractCurryPrinter","showBoxedExpr") [Var 1,Var 2]),Branch (Pattern ("AbstractCurry","CLetDecl") [10,11]) (Comb FuncCall ("AbstractCurryPrinter","showBoxedExpr") [Var 1,Var 2]),Branch (Pattern ("AbstractCurry","CDoExpr") [12]) (Comb FuncCall ("AbstractCurryPrinter","showBoxedExpr") [Var 1,Var 2]),Branch (Pattern ("AbstractCurry","CListComp") [13,14]) (Comb FuncCall ("AbstractCurryPrinter","showBoxedExpr") [Var 1,Var 2]),Branch (Pattern ("AbstractCurry","CCase") [15,16]) (Comb FuncCall ("AbstractCurryPrinter","showBoxedExpr") [Var 1,Var 2]),Branch (Pattern ("AbstractCurry","CRecConstr") [17]) (Comb FuncCall ("AbstractCurryPrinter","showBoxedExpr") [Var 1,Var 2]),Branch (Pattern ("AbstractCurry","CRecSelect") [18,19]) (Comb FuncCall ("AbstractCurryPrinter","showBoxedExpr") [Var 1,Var 2]),Branch (Pattern ("AbstractCurry","CRecUpdate") [20,21]) (Comb FuncCall ("AbstractCurryPrinter","showBoxedExpr") [Var 1,Var 2])])),Func ("AbstractCurryPrinter","showBoxedExpr") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","()") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("AbstractCurry","CExpr") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1,2] (Case  Rigid (Comb FuncCall ("AbstractCurryPrinter","isSimpleExpr") [Var 2]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("AbstractCurryPrinter","showExprOpt") [Var 1,Var 2]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("AbstractCurryPrinter","parens") [],Comb FuncCall ("AbstractCurryPrinter","showExprOpt") [Var 1,Var 2]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])),Func ("AbstractCurryPrinter","prefixMap") 3 Private (FuncType (FuncType (TVar 0) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1,2,3] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","concatMap") [Comb (FuncPartCall 1) ("Prelude","++") [Var 3]],Comb FuncCall ("Prelude","map") [Var 1,Var 2]])),Func ("AbstractCurryPrinter","prefixInter") 3 Private (FuncType (FuncType (TVar 0) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1,2,3] (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Prelude","concat") [],Comb FuncCall ("List","intersperse") [Var 3,Comb FuncCall ("Prelude","map") [Var 1,Var 2]]])),Func ("AbstractCurryPrinter","combineMap") 3 Private (FuncType (FuncType (TVar 0) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1,2,3] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [4,5]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Var 1,Var 4],Comb FuncCall ("AbstractCurryPrinter","prefixMap") [Var 1,Var 5,Var 3]])])),Func ("AbstractCurryPrinter","dropTags") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Let [(4,Var 2)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 4,Lit (Charc  '"')]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("AbstractCurryPrinter","dropTags") [],Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Prelude","tail") [],Comb FuncCall ("Prelude","dropWhile") [Comb (FuncPartCall 1) ("Prelude","flip") [Comb (FuncPartCall 2) ("Prelude","/=") [],Lit (Charc  '"')],Var 3]]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 4,Lit (Charc  '>')]) [Branch (Pattern ("Prelude","True") []) (Var 3),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("AbstractCurryPrinter","dropTags") [Var 3])])]))])),Func ("AbstractCurryPrinter","parens") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Comb FuncCall ("AbstractCurryPrinter","surroundWith") [Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude","[]") []],Var 1])),Func ("AbstractCurryPrinter","brackets") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Comb FuncCall ("AbstractCurryPrinter","surroundWith") [Comb ConsCall ("Prelude",":") [Lit (Charc  '['),Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude",":") [Lit (Charc  ']'),Comb ConsCall ("Prelude","[]") []],Var 1])),Func ("AbstractCurryPrinter","quotes") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Comb FuncCall ("AbstractCurryPrinter","surroundWith") [Comb ConsCall ("Prelude",":") [Lit (Charc  '\''),Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude",":") [Lit (Charc  '\''),Comb ConsCall ("Prelude","[]") []],Var 1])),Func ("AbstractCurryPrinter","doubleQuotes") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Comb FuncCall ("AbstractCurryPrinter","surroundWith") [Comb ConsCall ("Prelude",":") [Lit (Charc  '"'),Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude",":") [Lit (Charc  '"'),Comb ConsCall ("Prelude","[]") []],Var 1])),Func ("AbstractCurryPrinter","backQuotes") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Comb FuncCall ("AbstractCurryPrinter","surroundWith") [Comb ConsCall ("Prelude",":") [Lit (Charc  '`'),Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude",":") [Lit (Charc  '`'),Comb ConsCall ("Prelude","[]") []],Var 1])),Func ("AbstractCurryPrinter","surroundWith") 3 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1,2,3] (Comb FuncCall ("Prelude","concat") [Comb ConsCall ("Prelude",":") [Var 1,Comb ConsCall ("Prelude",":") [Var 3,Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude","[]") []]]]])),Func ("AbstractCurryPrinter","isInfixOpName") 0 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","Bool") [])) (Rule [] (Comb FuncCall ("Prelude","all") [Comb (FuncPartCall 1) ("Prelude","flip") [Comb (FuncPartCall 1) ("Prelude","elem") [],Comb FuncCall ("AbstractCurryPrinter","infixIDs") []]])),Func ("AbstractCurryPrinter","isStringList") 1 Private (FuncType (TCons ("AbstractCurry","CExpr") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("AbstractCurry","CSymbol") [2]) (Case  Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","==") [Var 3,Comb FuncCall ("AbstractCurryPrinter","prelude") []],Comb FuncCall ("Prelude","==") [Var 4,Comb ConsCall ("Prelude",":") [Lit (Charc  '['),Comb ConsCall ("Prelude",":") [Lit (Charc  ']'),Comb ConsCall ("Prelude","[]") []]]]])]),Branch (Pattern ("AbstractCurry","CVar") [5]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractCurry","CApply") [6,7]) (Case  Rigid (Var 6) [Branch (Pattern ("AbstractCurry","CApply") [8,9]) (Case  Rigid (Var 9) [Branch (Pattern ("AbstractCurry","CLit") [10]) (Case  Rigid (Var 10) [Branch (Pattern ("AbstractCurry","CCharc") [11]) (Comb FuncCall ("AbstractCurryPrinter","isStringList") [Var 7]),Branch (Pattern ("AbstractCurry","CIntc") [12]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractCurry","CFloatc") [13]) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("AbstractCurry","CVar") [14]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractCurry","CSymbol") [15]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractCurry","CApply") [16,17]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractCurry","CLambda") [18,19]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractCurry","CLetDecl") [20,21]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractCurry","CDoExpr") [22]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractCurry","CListComp") [23,24]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractCurry","CCase") [25,26]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractCurry","CRecConstr") [27]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractCurry","CRecSelect") [28,29]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractCurry","CRecUpdate") [30,31]) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("AbstractCurry","CVar") [32]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractCurry","CLit") [33]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractCurry","CSymbol") [34]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractCurry","CLambda") [35,36]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractCurry","CLetDecl") [37,38]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractCurry","CDoExpr") [39]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractCurry","CListComp") [40,41]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractCurry","CCase") [42,43]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractCurry","CRecConstr") [44]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractCurry","CRecSelect") [45,46]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractCurry","CRecUpdate") [47,48]) (Comb ConsCall ("Prelude","False") [])])])),Func ("AbstractCurryPrinter","isClosedList") 1 Private (FuncType (TCons ("AbstractCurry","CExpr") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Case  Rigid (Var 1) [Branch (Pattern ("AbstractCurry","CApply") [2,3]) (Case  Rigid (Var 2) [Branch (Pattern ("AbstractCurry","CApply") [4,5]) (Case  Rigid (Var 4) [Branch (Pattern ("AbstractCurry","CSymbol") [6]) (Case  Rigid (Var 6) [Branch (Pattern ("Prelude","(,)") [7,8]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","==") [Var 7,Comb FuncCall ("AbstractCurryPrinter","prelude") []],Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","==") [Var 8,Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("AbstractCurryPrinter","isClosedList") [Var 3]]])]),Branch (Pattern ("AbstractCurry","CVar") [9]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractCurry","CLit") [10]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractCurry","CApply") [11,12]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractCurry","CLambda") [13,14]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractCurry","CLetDecl") [15,16]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractCurry","CDoExpr") [17]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractCurry","CListComp") [18,19]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractCurry","CCase") [20,21]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractCurry","CRecConstr") [22]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractCurry","CRecSelect") [23,24]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractCurry","CRecUpdate") [25,26]) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("AbstractCurry","CVar") [27]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractCurry","CLit") [28]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractCurry","CSymbol") [29]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractCurry","CLambda") [30,31]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractCurry","CLetDecl") [32,33]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractCurry","CDoExpr") [34]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractCurry","CListComp") [35,36]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractCurry","CCase") [37,38]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractCurry","CRecConstr") [39]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractCurry","CRecSelect") [40,41]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractCurry","CRecUpdate") [42,43]) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("AbstractCurry","CSymbol") [44]) (Case  Rigid (Var 44) [Branch (Pattern ("Prelude","(,)") [45,46]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","==") [Var 45,Comb FuncCall ("AbstractCurryPrinter","prelude") []],Comb FuncCall ("Prelude","==") [Var 46,Comb ConsCall ("Prelude",":") [Lit (Charc  '['),Comb ConsCall ("Prelude",":") [Lit (Charc  ']'),Comb ConsCall ("Prelude","[]") []]]]])]),Branch (Pattern ("AbstractCurry","CVar") [47]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractCurry","CLit") [48]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractCurry","CLambda") [49,50]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractCurry","CLetDecl") [51,52]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractCurry","CDoExpr") [53]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractCurry","CListComp") [54,55]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractCurry","CCase") [56,57]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractCurry","CRecConstr") [58]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractCurry","CRecSelect") [59,60]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractCurry","CRecUpdate") [61,62]) (Comb ConsCall ("Prelude","False") [])])),Func ("AbstractCurryPrinter","isSimpleExpr") 1 Private (FuncType (TCons ("AbstractCurry","CExpr") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Case  Rigid (Var 1) [Branch (Pattern ("AbstractCurry","CVar") [2]) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("AbstractCurry","CLit") [3]) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("AbstractCurry","CSymbol") [4]) (Case  Rigid (Var 4) [Branch (Pattern ("Prelude","(,)") [5,6]) (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Prelude","not") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("AbstractCurryPrinter","isInfixOpName") [],Var 6]])]),Branch (Pattern ("AbstractCurry","CApply") [7,8]) (Case  Rigid (Comb FuncCall ("AbstractCurryPrinter","applicationHead") [Var 7]) [Branch (Pattern ("AbstractCurry","CSymbol") [9]) (Case  Rigid (Var 9) [Branch (Pattern ("Prelude","(,)") [10,11]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","==") [Var 10,Comb FuncCall ("AbstractCurryPrinter","prelude") []],Comb FuncCall ("Prelude","||") [Comb FuncCall ("Prelude","==") [Var 11,Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude","||") [Comb FuncCall ("Prelude","==") [Var 11,Comb ConsCall ("Prelude",":") [Lit (Charc  '['),Comb ConsCall ("Prelude",":") [Lit (Charc  ']'),Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("Prelude","||") [Comb FuncCall ("Prelude","==") [Var 11,Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("AbstractCurryPrinter","isTuple") [Var 11]]]]])]),Branch (Pattern ("AbstractCurry","CVar") [12]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractCurry","CLit") [13]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractCurry","CApply") [14,15]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractCurry","CLambda") [16,17]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractCurry","CLetDecl") [18,19]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractCurry","CDoExpr") [20]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractCurry","CListComp") [21,22]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractCurry","CCase") [23,24]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractCurry","CRecConstr") [25]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractCurry","CRecSelect") [26,27]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractCurry","CRecUpdate") [28,29]) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("AbstractCurry","CLambda") [30,31]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractCurry","CLetDecl") [32,33]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractCurry","CDoExpr") [34]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractCurry","CListComp") [35,36]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractCurry","CCase") [37,38]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractCurry","CRecConstr") [39]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractCurry","CRecSelect") [40,41]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractCurry","CRecUpdate") [42,43]) (Comb ConsCall ("Prelude","False") [])])),Func ("AbstractCurryPrinter","isAtom") 1 Private (FuncType (TCons ("AbstractCurry","CExpr") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Case  Rigid (Var 1) [Branch (Pattern ("AbstractCurry","CVar") [2]) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("AbstractCurry","CLit") [3]) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("AbstractCurry","CSymbol") [4]) (Case  Rigid (Var 4) [Branch (Pattern ("Prelude","(,)") [5,6]) (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Prelude","not") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("AbstractCurryPrinter","isInfixOpName") [],Var 6]])]),Branch (Pattern ("AbstractCurry","CApply") [7,8]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractCurry","CLambda") [9,10]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractCurry","CLetDecl") [11,12]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractCurry","CDoExpr") [13]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractCurry","CListComp") [14,15]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractCurry","CCase") [16,17]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractCurry","CRecConstr") [18]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractCurry","CRecSelect") [19,20]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractCurry","CRecUpdate") [21,22]) (Comb ConsCall ("Prelude","False") [])])),Func ("AbstractCurryPrinter","isUntyped") 1 Private (FuncType (TCons ("AbstractCurry","CTypeExpr") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Case  Rigid (Var 1) [Branch (Pattern ("AbstractCurry","CTCons") [2,3]) (Case  Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Case  Rigid (Var 3) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","==") [Var 4,Comb FuncCall ("AbstractCurryPrinter","prelude") []],Comb FuncCall ("Prelude","==") [Var 5,Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]),Branch (Pattern ("Prelude",":") [6,7]) (Comb ConsCall ("Prelude","False") [])])]),Branch (Pattern ("AbstractCurry","CTVar") [8]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractCurry","CFuncType") [9,10]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractCurry","CRecordType") [11,12]) (Comb ConsCall ("Prelude","False") [])])),Func ("AbstractCurryPrinter","isTuple") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","Bool") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude",":") [2,3]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","==") [Var 2,Lit (Charc  '(')],Comb FuncCall ("AbstractCurryPrinter","isTuple.p1_isTuple.519") [Var 3]])])),Func ("AbstractCurryPrinter","isTuple.p1_isTuple.519") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","Bool") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","==") [Var 2,Lit (Charc  ')')]),Branch (Pattern ("Prelude",":") [4,5]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","==") [Var 2,Lit (Charc  ',')],Comb FuncCall ("AbstractCurryPrinter","isTuple.p1_isTuple.519") [Comb ConsCall ("Prelude",":") [Var 4,Var 5]]])])])),Func ("AbstractCurryPrinter","infixIDs") 0 Private (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (Rule [] (Comb ConsCall ("Prelude",":") [Lit (Charc  '~'),Comb ConsCall ("Prelude",":") [Lit (Charc  '!'),Comb ConsCall ("Prelude",":") [Lit (Charc  '@'),Comb ConsCall ("Prelude",":") [Lit (Charc  '#'),Comb ConsCall ("Prelude",":") [Lit (Charc  '$'),Comb ConsCall ("Prelude",":") [Lit (Charc  '%'),Comb ConsCall ("Prelude",":") [Lit (Charc  '^'),Comb ConsCall ("Prelude",":") [Lit (Charc  '&'),Comb ConsCall ("Prelude",":") [Lit (Charc  '*'),Comb ConsCall ("Prelude",":") [Lit (Charc  '+'),Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  '='),Comb ConsCall ("Prelude",":") [Lit (Charc  '<'),Comb ConsCall ("Prelude",":") [Lit (Charc  '>'),Comb ConsCall ("Prelude",":") [Lit (Charc  '?'),Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude",":") [Lit (Charc  '/'),Comb ConsCall ("Prelude",":") [Lit (Charc  '|'),Comb ConsCall ("Prelude",":") [Lit (Charc  '\\'),Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]])),Func ("AbstractCurryPrinter","prelude") 0 Private (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (Rule [] (Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]])),Func ("AbstractCurryPrinter","maybeShowBrackets") 2 Private (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1,2] (Comb FuncCall ("Prelude","++") [Case  Rigid (Var 1) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","[]") [])],Comb FuncCall ("Prelude","++") [Var 2,Case  Rigid (Var 1) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","[]") [])]]])),Func ("AbstractCurryPrinter","nameFM") 0 Private (FuncType (TCons ("Prelude","[]") [TCons ("AbstractCurry","CFuncDecl") []]) (TCons ("FiniteMap","FM") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","()") []])) (Rule [] (Comb (FuncPartCall 1) ("Prelude","foldr") [Comb (FuncPartCall 2) ("AbstractCurryPrinter","addName") [],Comb FuncCall ("FiniteMap","emptyFM") [Comb (FuncPartCall 2) ("AbstractCurryPrinter","lessString") []]])),Func ("AbstractCurryPrinter","addName") 2 Private (FuncType (TCons ("AbstractCurry","CFuncDecl") []) (FuncType (TCons ("FiniteMap","FM") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","()") []]) (TCons ("FiniteMap","FM") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","()") []]))) (Rule [1,2] (Case  Flex (Var 1) [Branch (Pattern ("AbstractCurry","CFunc") [3,4,5,6,7]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude","(,)") [8,9]) (Comb FuncCall ("FiniteMap","addToFM") [Var 2,Var 9,Comb ConsCall ("Prelude","()") []])]),Branch (Pattern ("AbstractCurry","CmtFunc") [10,11,12,13,14,15]) (Case  Flex (Var 11) [Branch (Pattern ("Prelude","(,)") [16,17]) (Comb FuncCall ("FiniteMap","addToFM") [Var 2,Var 17,Comb ConsCall ("Prelude","()") []])])])),Func ("AbstractCurryPrinter","lessString") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Comb FuncCall ("Prelude","==") [Comb ConsCall ("Prelude","LT") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Sort","cmpString") [],Var 1],Var 2]]))] []