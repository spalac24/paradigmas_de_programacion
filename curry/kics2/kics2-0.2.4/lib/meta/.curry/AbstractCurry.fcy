Prog "AbstractCurry" ["Char","Directory","Distribution","FileGoodies","Prelude","ReadShowTerm"] [TypeSyn ("AbstractCurry","QName") Public [] (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]),TypeSyn ("AbstractCurry","CTVarIName") Public [] (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]),TypeSyn ("AbstractCurry","CField") Public [0] (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TVar 0]),TypeSyn ("AbstractCurry","CLabel") Public [] (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]),TypeSyn ("AbstractCurry","CVarIName") Public [] (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]),Type ("AbstractCurry","CurryProg") Public [] [Cons ("AbstractCurry","CurryProg") 5 Public [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","[]") [TCons ("AbstractCurry","CTypeDecl") []],TCons ("Prelude","[]") [TCons ("AbstractCurry","CFuncDecl") []],TCons ("Prelude","[]") [TCons ("AbstractCurry","COpDecl") []]]],Type ("AbstractCurry","CVisibility") Public [] [Cons ("AbstractCurry","Public") 0 Public [],Cons ("AbstractCurry","Private") 0 Public []],Type ("AbstractCurry","CTypeDecl") Public [] [Cons ("AbstractCurry","CType") 4 Public [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("AbstractCurry","CVisibility") [],TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]],TCons ("Prelude","[]") [TCons ("AbstractCurry","CConsDecl") []]],Cons ("AbstractCurry","CTypeSyn") 4 Public [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("AbstractCurry","CVisibility") [],TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]],TCons ("AbstractCurry","CTypeExpr") []]],Type ("AbstractCurry","CConsDecl") Public [] [Cons ("AbstractCurry","CCons") 4 Public [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","Int") [],TCons ("AbstractCurry","CVisibility") [],TCons ("Prelude","[]") [TCons ("AbstractCurry","CTypeExpr") []]]],Type ("AbstractCurry","CTypeExpr") Public [] [Cons ("AbstractCurry","CTVar") 1 Public [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]],Cons ("AbstractCurry","CFuncType") 2 Public [TCons ("AbstractCurry","CTypeExpr") [],TCons ("AbstractCurry","CTypeExpr") []],Cons ("AbstractCurry","CTCons") 2 Public [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","[]") [TCons ("AbstractCurry","CTypeExpr") []]],Cons ("AbstractCurry","CRecordType") 2 Public [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("AbstractCurry","CTypeExpr") []]],TCons ("Prelude","Maybe") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]]],Type ("AbstractCurry","COpDecl") Public [] [Cons ("AbstractCurry","COp") 3 Public [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("AbstractCurry","CFixity") [],TCons ("Prelude","Int") []]],Type ("AbstractCurry","CFixity") Public [] [Cons ("AbstractCurry","CInfixOp") 0 Public [],Cons ("AbstractCurry","CInfixlOp") 0 Public [],Cons ("AbstractCurry","CInfixrOp") 0 Public []],Type ("AbstractCurry","CFuncDecl") Public [] [Cons ("AbstractCurry","CFunc") 5 Public [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","Int") [],TCons ("AbstractCurry","CVisibility") [],TCons ("AbstractCurry","CTypeExpr") [],TCons ("AbstractCurry","CRules") []],Cons ("AbstractCurry","CmtFunc") 6 Public [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","Int") [],TCons ("AbstractCurry","CVisibility") [],TCons ("AbstractCurry","CTypeExpr") [],TCons ("AbstractCurry","CRules") []]],Type ("AbstractCurry","CRules") Public [] [Cons ("AbstractCurry","CRules") 2 Public [TCons ("AbstractCurry","CEvalAnnot") [],TCons ("Prelude","[]") [TCons ("AbstractCurry","CRule") []]],Cons ("AbstractCurry","CExternal") 1 Public [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]],Type ("AbstractCurry","CEvalAnnot") Public [] [Cons ("AbstractCurry","CFlex") 0 Public [],Cons ("AbstractCurry","CRigid") 0 Public [],Cons ("AbstractCurry","CChoice") 0 Public []],Type ("AbstractCurry","CRule") Public [] [Cons ("AbstractCurry","CRule") 3 Public [TCons ("Prelude","[]") [TCons ("AbstractCurry","CPattern") []],TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("AbstractCurry","CExpr") [],TCons ("AbstractCurry","CExpr") []]],TCons ("Prelude","[]") [TCons ("AbstractCurry","CLocalDecl") []]]],Type ("AbstractCurry","CLocalDecl") Public [] [Cons ("AbstractCurry","CLocalFunc") 1 Public [TCons ("AbstractCurry","CFuncDecl") []],Cons ("AbstractCurry","CLocalPat") 3 Public [TCons ("AbstractCurry","CPattern") [],TCons ("AbstractCurry","CExpr") [],TCons ("Prelude","[]") [TCons ("AbstractCurry","CLocalDecl") []]],Cons ("AbstractCurry","CLocalVar") 1 Public [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]],Type ("AbstractCurry","CExpr") Public [] [Cons ("AbstractCurry","CVar") 1 Public [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]],Cons ("AbstractCurry","CLit") 1 Public [TCons ("AbstractCurry","CLiteral") []],Cons ("AbstractCurry","CSymbol") 1 Public [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]],Cons ("AbstractCurry","CApply") 2 Public [TCons ("AbstractCurry","CExpr") [],TCons ("AbstractCurry","CExpr") []],Cons ("AbstractCurry","CLambda") 2 Public [TCons ("Prelude","[]") [TCons ("AbstractCurry","CPattern") []],TCons ("AbstractCurry","CExpr") []],Cons ("AbstractCurry","CLetDecl") 2 Public [TCons ("Prelude","[]") [TCons ("AbstractCurry","CLocalDecl") []],TCons ("AbstractCurry","CExpr") []],Cons ("AbstractCurry","CDoExpr") 1 Public [TCons ("Prelude","[]") [TCons ("AbstractCurry","CStatement") []]],Cons ("AbstractCurry","CListComp") 2 Public [TCons ("AbstractCurry","CExpr") [],TCons ("Prelude","[]") [TCons ("AbstractCurry","CStatement") []]],Cons ("AbstractCurry","CCase") 2 Public [TCons ("AbstractCurry","CExpr") [],TCons ("Prelude","[]") [TCons ("AbstractCurry","CBranchExpr") []]],Cons ("AbstractCurry","CRecConstr") 1 Public [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("AbstractCurry","CExpr") []]]],Cons ("AbstractCurry","CRecSelect") 2 Public [TCons ("AbstractCurry","CExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],Cons ("AbstractCurry","CRecUpdate") 2 Public [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("AbstractCurry","CExpr") []]],TCons ("AbstractCurry","CExpr") []]],Type ("AbstractCurry","CStatement") Public [] [Cons ("AbstractCurry","CSExpr") 1 Public [TCons ("AbstractCurry","CExpr") []],Cons ("AbstractCurry","CSPat") 2 Public [TCons ("AbstractCurry","CPattern") [],TCons ("AbstractCurry","CExpr") []],Cons ("AbstractCurry","CSLet") 1 Public [TCons ("Prelude","[]") [TCons ("AbstractCurry","CLocalDecl") []]]],Type ("AbstractCurry","CPattern") Public [] [Cons ("AbstractCurry","CPVar") 1 Public [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]],Cons ("AbstractCurry","CPLit") 1 Public [TCons ("AbstractCurry","CLiteral") []],Cons ("AbstractCurry","CPComb") 2 Public [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","[]") [TCons ("AbstractCurry","CPattern") []]],Cons ("AbstractCurry","CPAs") 2 Public [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("AbstractCurry","CPattern") []],Cons ("AbstractCurry","CPFuncComb") 2 Public [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","[]") [TCons ("AbstractCurry","CPattern") []]],Cons ("AbstractCurry","CPLazy") 1 Public [TCons ("AbstractCurry","CPattern") []],Cons ("AbstractCurry","CPRecord") 2 Public [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("AbstractCurry","CPattern") []]],TCons ("Prelude","Maybe") [TCons ("AbstractCurry","CPattern") []]]],Type ("AbstractCurry","CBranchExpr") Public [] [Cons ("AbstractCurry","CBranch") 2 Public [TCons ("AbstractCurry","CPattern") [],TCons ("AbstractCurry","CExpr") []],Cons ("AbstractCurry","CGuardedBranch") 2 Public [TCons ("AbstractCurry","CPattern") [],TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("AbstractCurry","CExpr") [],TCons ("AbstractCurry","CExpr") []]]]],Type ("AbstractCurry","CLiteral") Public [] [Cons ("AbstractCurry","CIntc") 1 Public [TCons ("Prelude","Int") []],Cons ("AbstractCurry","CFloatc") 1 Public [TCons ("Prelude","Float") []],Cons ("AbstractCurry","CCharc") 1 Public [TCons ("Prelude","Char") []]]] [Func ("AbstractCurry","readCurry") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("AbstractCurry","CurryProg") []])) (Rule [1] (Comb FuncCall ("AbstractCurry","readCurryWithParseOptions") [Var 1,Comb FuncCall ("Distribution","setQuiet") [Comb ConsCall ("Prelude","True") [],Comb FuncCall ("Distribution","defaultParams") []]])),Func ("AbstractCurry","readUntypedCurry") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("AbstractCurry","CurryProg") []])) (Rule [1] (Comb FuncCall ("AbstractCurry","readUntypedCurryWithParseOptions") [Var 1,Comb FuncCall ("Distribution","setQuiet") [Comb ConsCall ("Prelude","True") [],Comb FuncCall ("Distribution","defaultParams") []]])),Func ("AbstractCurry","readCurryWithParseOptions") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Distribution","FrontendParams") []) (TCons ("Prelude","IO") [TCons ("AbstractCurry","CurryProg") []]))) (Rule [1,2] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Directory","doesFileExist") [],Comb FuncCall ("Prelude","++") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude","[]") []]]]]]]]],Comb (FuncPartCall 1) ("AbstractCurry","readCurryWithParseOptions._#lambda1") [Var 2,Var 1]])),Func ("AbstractCurry","readCurryWithParseOptions._#lambda1") 3 Private (FuncType (TCons ("Distribution","FrontendParams") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","IO") [TCons ("AbstractCurry","CurryProg") []])))) (Rule [1,2,3] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Directory","doesFileExist") [],Comb FuncCall ("Prelude","++") [Var 2,Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude","[]") []]]]]]]]]],Comb (FuncPartCall 1) ("AbstractCurry","readCurryWithParseOptions._#lambda1._#lambda2") [Var 3,Var 1,Var 2]])),Func ("AbstractCurry","readCurryWithParseOptions._#lambda1._#lambda2") 4 Private (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Distribution","FrontendParams") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","IO") [TCons ("AbstractCurry","CurryProg") []]))))) (Rule [1,2,3,4] (Comb FuncCall ("Prelude",">>") [Case  Rigid (Comb FuncCall ("Prelude","||") [Var 1,Var 4]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Distribution","callFrontendWithParams") [Comb ConsCall ("Distribution","ACY") [],Var 2,Var 3]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","done") [])],Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Distribution","findFileInLoadPath") [],Comb FuncCall ("Prelude","++") [Var 3,Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude","[]") []]]]]]],Comb (FuncPartCall 1) ("AbstractCurry","readCurryWithParseOptions._#lambda1._#lambda2._#lambda3") []]])),Func ("AbstractCurry","readCurryWithParseOptions._#lambda1._#lambda2._#lambda3") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("AbstractCurry","CurryProg") []])) (Rule [1] (Comb FuncCall ("AbstractCurry","readAbstractCurryFile") [Var 1])),Func ("AbstractCurry","readUntypedCurryWithParseOptions") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Distribution","FrontendParams") []) (TCons ("Prelude","IO") [TCons ("AbstractCurry","CurryProg") []]))) (Rule [1,2] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Directory","doesFileExist") [Comb FuncCall ("Prelude","++") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude","[]") []]]]]]]]],Comb (FuncPartCall 1) ("AbstractCurry","readUntypedCurryWithParseOptions._#lambda4") [Var 2,Var 1]])),Func ("AbstractCurry","readUntypedCurryWithParseOptions._#lambda4") 3 Private (FuncType (TCons ("Distribution","FrontendParams") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","IO") [TCons ("AbstractCurry","CurryProg") []])))) (Rule [1,2,3] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Directory","doesFileExist") [Comb FuncCall ("Prelude","++") [Var 2,Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude","[]") []]]]]]]]]],Comb (FuncPartCall 1) ("AbstractCurry","readUntypedCurryWithParseOptions._#lambda4._#lambda5") [Var 3,Var 1,Var 2]])),Func ("AbstractCurry","readUntypedCurryWithParseOptions._#lambda4._#lambda5") 4 Private (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Distribution","FrontendParams") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","IO") [TCons ("AbstractCurry","CurryProg") []]))))) (Rule [1,2,3,4] (Comb FuncCall ("Prelude",">>") [Case  Rigid (Comb FuncCall ("Prelude","||") [Var 1,Var 4]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Distribution","callFrontendWithParams") [Comb ConsCall ("Distribution","UACY") [],Var 2,Var 3]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","done") [])],Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Distribution","findFileInLoadPath") [Comb FuncCall ("Prelude","++") [Var 3,Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb (FuncPartCall 1) ("AbstractCurry","readUntypedCurryWithParseOptions._#lambda4._#lambda5._#lambda6") []]])),Func ("AbstractCurry","readUntypedCurryWithParseOptions._#lambda4._#lambda5._#lambda6") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("AbstractCurry","CurryProg") []])) (Rule [1] (Comb FuncCall ("AbstractCurry","readAbstractCurryFile") [Var 1])),Func ("AbstractCurry","abstractCurryFileName") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Comb FuncCall ("Distribution","inCurrySubdir") [Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FileGoodies","stripSuffix") [],Var 1],Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude","[]") []]]]]]])),Func ("AbstractCurry","untypedAbstractCurryFileName") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Comb FuncCall ("Distribution","inCurrySubdir") [Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FileGoodies","stripSuffix") [],Var 1],Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude","[]") []]]]]]]])),Func ("AbstractCurry","readAbstractCurryFile") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("AbstractCurry","CurryProg") []])) (Rule [1] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Directory","doesFileExist") [Var 1],Comb (FuncPartCall 1) ("AbstractCurry","readAbstractCurryFile._#lambda8") [Var 1]])),Func ("AbstractCurry","readAbstractCurryFile.readExistingACY.20") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TVar 0])) (Rule [1] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Prelude","readFile") [Var 1],Comb (FuncPartCall 1) ("AbstractCurry","readAbstractCurryFile.readExistingACY.20._#lambda7") []])),Func ("AbstractCurry","readAbstractCurryFile.readExistingACY.20._#lambda7") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TVar 1])) (Rule [1] (Comb FuncCall ("Prelude","return") [Comb FuncCall ("ReadShowTerm","readUnqualifiedTerm") [Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'A'),Comb ConsCall ("Prelude",":") [Lit (Charc  'b'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb ConsCall ("Prelude","[]") []]],Var 1]])),Func ("AbstractCurry","readAbstractCurryFile._#lambda8") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","IO") [TVar 2]))) (Rule [1,2] (Case  Rigid (Var 2) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("AbstractCurry","readAbstractCurryFile.readExistingACY.20") [Var 1]),Branch (Pattern ("Prelude","False") []) (Let [(3,Comb FuncCall ("Distribution","inCurrySubdir") [Var 1])] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Directory","doesFileExist") [Var 3],Comb (FuncPartCall 1) ("AbstractCurry","readAbstractCurryFile._#lambda8._#lambda9") [Var 1,Var 3]]))])),Func ("AbstractCurry","readAbstractCurryFile._#lambda8._#lambda9") 3 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","IO") [TVar 3])))) (Rule [1,2,3] (Case  Rigid (Var 3) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("AbstractCurry","readAbstractCurryFile.readExistingACY.20") [Var 2]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","error") [Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'E'),Comb ConsCall ("Prelude",":") [Lit (Charc  'X'),Comb ConsCall ("Prelude",":") [Lit (Charc  'I'),Comb ConsCall ("Prelude",":") [Lit (Charc  'S'),Comb ConsCall ("Prelude",":") [Lit (Charc  'T'),Comb ConsCall ("Prelude",":") [Lit (Charc  'E'),Comb ConsCall ("Prelude",":") [Lit (Charc  'N'),Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'E'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'E'),Comb ConsCall ("Prelude",":") [Lit (Charc  'R'),Comb ConsCall ("Prelude",":") [Lit (Charc  'R'),Comb ConsCall ("Prelude",":") [Lit (Charc  'O'),Comb ConsCall ("Prelude",":") [Lit (Charc  'R'),Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'A'),Comb ConsCall ("Prelude",":") [Lit (Charc  'b'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '\''),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],Comb FuncCall ("Prelude","++") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc  '\''),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]])])),Func ("AbstractCurry","tryReadACYFile") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","Maybe") [TCons ("AbstractCurry","CurryProg") []]])) (Rule [1] (Let [(2,Comb FuncCall ("Prelude","return") [Comb ConsCall ("Prelude","Nothing") []])] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Directory","doesFileExist") [Var 1],Comb (FuncPartCall 1) ("AbstractCurry","tryReadACYFile._#lambda12") [Var 2,Var 1]]))),Func ("AbstractCurry","tryReadACYFile.tryRead.29") 2 Private (FuncType (TCons ("Prelude","IO") [TCons ("Prelude","Maybe") [TCons ("AbstractCurry","CurryProg") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","Maybe") [TCons ("AbstractCurry","CurryProg") []]]))) (Rule [1,2] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Prelude","readFile") [Var 2],Comb (FuncPartCall 1) ("AbstractCurry","tryReadACYFile.tryRead.29._#lambda10") [Var 1]])),Func ("AbstractCurry","tryReadACYFile.tryRead.29._#lambda10") 2 Private (FuncType (TCons ("Prelude","IO") [TCons ("Prelude","Maybe") [TCons ("AbstractCurry","CurryProg") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","Maybe") [TCons ("AbstractCurry","CurryProg") []]]))) (Rule [1,2] (Case  Rigid (Comb FuncCall ("ReadShowTerm","readsUnqualifiedTerm") [Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'A'),Comb ConsCall ("Prelude",":") [Lit (Charc  'b'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb ConsCall ("Prelude","[]") []]],Var 2]) [Branch (Pattern ("Prelude","[]") []) (Var 1),Branch (Pattern ("Prelude",":") [3,4]) (Case  Rigid (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Case  Rigid (Var 4) [Branch (Pattern ("Prelude","[]") []) (Case  Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","all") [Comb (FuncPartCall 1) ("Char","isSpace") []],Var 6]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Prelude","return") [],Comb ConsCall ("Prelude","Just") [Var 5]]),Branch (Pattern ("Prelude","False") []) (Var 1)]),Branch (Pattern ("Prelude",":") [7,8]) (Var 1)])])])),Func ("AbstractCurry","tryReadACYFile._#lambda12") 3 Private (FuncType (TCons ("Prelude","IO") [TCons ("Prelude","Maybe") [TCons ("AbstractCurry","CurryProg") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","IO") [TCons ("Prelude","Maybe") [TCons ("AbstractCurry","CurryProg") []]])))) (Rule [1,2,3] (Case  Rigid (Var 3) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("AbstractCurry","tryReadACYFile.tryRead.29") [Var 1,Var 2]),Branch (Pattern ("Prelude","False") []) (Let [(4,Comb FuncCall ("Distribution","inCurrySubdir") [Var 2])] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Directory","doesFileExist") [Var 4],Comb (FuncPartCall 1) ("AbstractCurry","tryReadACYFile._#lambda12._#lambda13") [Var 1,Var 4]]))])),Func ("AbstractCurry","tryReadACYFile._#lambda12._#lambda13") 3 Private (FuncType (TCons ("Prelude","IO") [TCons ("Prelude","Maybe") [TCons ("AbstractCurry","CurryProg") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","IO") [TCons ("Prelude","Maybe") [TCons ("AbstractCurry","CurryProg") []]])))) (Rule [1,2,3] (Case  Rigid (Var 3) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("AbstractCurry","tryReadACYFile.tryRead.29") [Var 1,Var 2]),Branch (Pattern ("Prelude","False") []) (Var 1)])),Func ("AbstractCurry","writeAbstractCurryFile") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("AbstractCurry","CurryProg") []) (TCons ("Prelude","IO") [TCons ("Prelude","()") []]))) (Rule [1,2] (Comb FuncCall ("Prelude","writeFile") [Var 1,Comb FuncCall ("ReadShowTerm","showTerm") [Var 2]]))] []