CurryProg "AnnotatedFlatCurry"
 ["Prelude","FlatCurry"]
 [CType ("AnnotatedFlatCurry","AProg") Public [(0,"a")] [CCons ("AnnotatedFlatCurry","AProg") 5 Public [CTCons ("Prelude","String") [],CTCons ("Prelude","[]") [CTCons ("Prelude","String") []],CTCons ("Prelude","[]") [CTCons ("FlatCurry","TypeDecl") []],CTCons ("Prelude","[]") [CTCons ("AnnotatedFlatCurry","AFuncDecl") [CTVar (0,"a")]],CTCons ("Prelude","[]") [CTCons ("FlatCurry","OpDecl") []]]],
  CTypeSyn ("AnnotatedFlatCurry","Arity") Public [] (CTCons ("Prelude","Int") []),
  CType ("AnnotatedFlatCurry","AFuncDecl") Public [(0,"a")] [CCons ("AnnotatedFlatCurry","AFunc") 5 Public [CTCons ("FlatCurry","QName") [],CTCons ("AnnotatedFlatCurry","Arity") [],CTCons ("FlatCurry","Visibility") [],CTCons ("FlatCurry","TypeExpr") [],CTCons ("AnnotatedFlatCurry","ARule") [CTVar (0,"a")]]],
  CType ("AnnotatedFlatCurry","ARule") Public [(0,"a")] [CCons ("AnnotatedFlatCurry","ARule") 3 Public [CTVar (0,"a"),CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("FlatCurry","VarIndex") [],CTVar (0,"a")]],CTCons ("AnnotatedFlatCurry","AExpr") [CTVar (0,"a")]],CCons ("AnnotatedFlatCurry","AExternal") 2 Public [CTVar (0,"a"),CTCons ("Prelude","String") []]],
  CType ("AnnotatedFlatCurry","AExpr") Public [(0,"a")] [CCons ("AnnotatedFlatCurry","AVar") 2 Public [CTVar (0,"a"),CTCons ("FlatCurry","VarIndex") []],CCons ("AnnotatedFlatCurry","ALit") 2 Public [CTVar (0,"a"),CTCons ("FlatCurry","Literal") []],CCons ("AnnotatedFlatCurry","AComb") 4 Public [CTVar (0,"a"),CTCons ("FlatCurry","CombType") [],CTCons ("Prelude","(,)") [CTCons ("FlatCurry","QName") [],CTVar (0,"a")],CTCons ("Prelude","[]") [CTCons ("AnnotatedFlatCurry","AExpr") [CTVar (0,"a")]]],CCons ("AnnotatedFlatCurry","ALet") 3 Public [CTVar (0,"a"),CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("FlatCurry","VarIndex") [],CTCons ("AnnotatedFlatCurry","AExpr") [CTVar (0,"a")]]],CTCons ("AnnotatedFlatCurry","AExpr") [CTVar (0,"a")]],CCons ("AnnotatedFlatCurry","AFree") 3 Public [CTVar (0,"a"),CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("FlatCurry","VarIndex") [],CTVar (0,"a")]],CTCons ("AnnotatedFlatCurry","AExpr") [CTVar (0,"a")]],CCons ("AnnotatedFlatCurry","AOr") 3 Public [CTVar (0,"a"),CTCons ("AnnotatedFlatCurry","AExpr") [CTVar (0,"a")],CTCons ("AnnotatedFlatCurry","AExpr") [CTVar (0,"a")]],CCons ("AnnotatedFlatCurry","ACase") 4 Public [CTVar (0,"a"),CTCons ("FlatCurry","CaseType") [],CTCons ("AnnotatedFlatCurry","AExpr") [CTVar (0,"a")],CTCons ("Prelude","[]") [CTCons ("AnnotatedFlatCurry","ABranchExpr") [CTVar (0,"a")]]],CCons ("AnnotatedFlatCurry","ATyped") 3 Public [CTVar (0,"a"),CTCons ("AnnotatedFlatCurry","AExpr") [CTVar (0,"a")],CTCons ("FlatCurry","TypeExpr") []]],
  CType ("AnnotatedFlatCurry","ABranchExpr") Public [(0,"a")] [CCons ("AnnotatedFlatCurry","ABranch") 2 Public [CTCons ("AnnotatedFlatCurry","APattern") [CTVar (0,"a")],CTCons ("AnnotatedFlatCurry","AExpr") [CTVar (0,"a")]]],
  CType ("AnnotatedFlatCurry","APattern") Public [(0,"a")] [CCons ("AnnotatedFlatCurry","APattern") 3 Public [CTVar (0,"a"),CTCons ("Prelude","(,)") [CTCons ("FlatCurry","QName") [],CTVar (0,"a")],CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("FlatCurry","VarIndex") [],CTVar (0,"a")]]],CCons ("AnnotatedFlatCurry","ALPattern") 2 Public [CTVar (0,"a"),CTCons ("FlatCurry","Literal") []]]]
 []
 []
