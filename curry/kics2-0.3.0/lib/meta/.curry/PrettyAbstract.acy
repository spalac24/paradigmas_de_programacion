CurryProg "PrettyAbstract"
 ["Prelude","Pretty","AbstractCurry","Char","System","Maybe","List"]
 [CTypeSyn ("PrettyAbstract","Precs") Private [] (CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("AbstractCurry","QName") [],CTCons ("Prelude","(,)") [CTCons ("AbstractCurry","CFixity") [],CTCons ("Prelude","Int") []]]])]
 [CFunc ("PrettyAbstract","qualifiedNames") 0 Private (CTCons ("Prelude","Bool") []) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CSymbol ("Prelude","True"))] []]),
  CFunc ("PrettyAbstract","debug") 0 Private (CTCons ("Prelude","Bool") []) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CSymbol ("Prelude","False"))] []]),
  CFunc ("PrettyAbstract","showPrecs") 2 Private (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (1,"b")) (CTCons ("Pretty","Doc") []))) (CRules CFlex [CRule [CPVar (0,"name"),CPVar (1,"prec")] [(CSymbol ("PrettyAbstract","debug"),CApply (CSymbol ("Pretty","text")) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '{'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '-'))) (CSymbol ("Prelude","[]"))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("Prelude","show")) (CVar (0,"name")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '@'))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("Prelude","show")) (CVar (1,"prec")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '-'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '}'))) (CSymbol ("Prelude","[]"))))))))),(CSymbol ("Prelude","otherwise"),CSymbol ("Pretty","empty"))] []]),
  CFunc ("PrettyAbstract","prelude") 0 Private (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'P'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]")))))))))] []]),
  CFunc ("PrettyAbstract","arrow") 0 Private (CTCons ("Pretty","Doc") []) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Pretty","text")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '-'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '>'))) (CSymbol ("Prelude","[]")))))] []]),
  CFunc ("PrettyAbstract","bar") 0 Private (CTCons ("Pretty","Doc") []) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Pretty","char")) (CLit (CCharc '|')))] []]),
  CFunc ("PrettyAbstract","dcolon") 0 Private (CTCons ("Pretty","Doc") []) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Pretty","text")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ':'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ':'))) (CSymbol ("Prelude","[]")))))] []]),
  CFunc ("PrettyAbstract","preludePrecs") 0 Public (CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]],CTCons ("Prelude","(,)") [CTCons ("AbstractCurry","CFixity") [],CTCons ("Prelude","Int") []]]]) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'P'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]")))))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '!'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '!'))) (CSymbol ("Prelude","[]")))))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CSymbol ("AbstractCurry","CInfixlOp"))) (CLit (CIntc 9))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'P'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]")))))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '.'))) (CSymbol ("Prelude","[]"))))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CSymbol ("AbstractCurry","CInfixrOp"))) (CLit (CIntc 9))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'P'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]")))))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CSymbol ("Prelude","[]"))))))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CSymbol ("AbstractCurry","CInfixlOp"))) (CLit (CIntc 7))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'P'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]")))))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'v'))) (CSymbol ("Prelude","[]"))))))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CSymbol ("AbstractCurry","CInfixlOp"))) (CLit (CIntc 7))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'P'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]")))))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '*'))) (CSymbol ("Prelude","[]"))))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CSymbol ("AbstractCurry","CInfixlOp"))) (CLit (CIntc 7))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'P'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]")))))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '-'))) (CSymbol ("Prelude","[]"))))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CSymbol ("AbstractCurry","CInfixlOp"))) (CLit (CIntc 6))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'P'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]")))))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '+'))) (CSymbol ("Prelude","[]"))))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CSymbol ("AbstractCurry","CInfixlOp"))) (CLit (CIntc 6))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'P'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]")))))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '+'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '+'))) (CSymbol ("Prelude","[]")))))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CSymbol ("AbstractCurry","CInfixrOp"))) (CLit (CIntc 5))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'P'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]")))))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '='))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ':'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '<'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '<'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '='))) (CSymbol ("Prelude","[]"))))))))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CSymbol ("AbstractCurry","CInfixOp"))) (CLit (CIntc 4))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'P'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]")))))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '='))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ':'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '<'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '='))) (CSymbol ("Prelude","[]")))))))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CSymbol ("AbstractCurry","CInfixOp"))) (CLit (CIntc 4))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'P'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]")))))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '>'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '='))) (CSymbol ("Prelude","[]")))))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CSymbol ("AbstractCurry","CInfixOp"))) (CLit (CIntc 4))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'P'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]")))))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '<'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '='))) (CSymbol ("Prelude","[]")))))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CSymbol ("AbstractCurry","CInfixOp"))) (CLit (CIntc 4))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'P'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]")))))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '>'))) (CSymbol ("Prelude","[]"))))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CSymbol ("AbstractCurry","CInfixOp"))) (CLit (CIntc 4))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'P'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]")))))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '<'))) (CSymbol ("Prelude","[]"))))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CSymbol ("AbstractCurry","CInfixOp"))) (CLit (CIntc 4))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'P'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]")))))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '/'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '='))) (CSymbol ("Prelude","[]")))))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CSymbol ("AbstractCurry","CInfixOp"))) (CLit (CIntc 4))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'P'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]")))))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '='))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '='))) (CSymbol ("Prelude","[]")))))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CSymbol ("AbstractCurry","CInfixOp"))) (CLit (CIntc 4))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'P'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]")))))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '='))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ':'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '='))) (CSymbol ("Prelude","[]"))))))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CSymbol ("AbstractCurry","CInfixOp"))) (CLit (CIntc 4))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'P'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]")))))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'E'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CSymbol ("Prelude","[]"))))))))))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CSymbol ("AbstractCurry","CInfixOp"))) (CLit (CIntc 4))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'P'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]")))))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CSymbol ("Prelude","[]")))))))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CSymbol ("AbstractCurry","CInfixOp"))) (CLit (CIntc 4))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'P'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]")))))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '&'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '&'))) (CSymbol ("Prelude","[]")))))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CSymbol ("AbstractCurry","CInfixrOp"))) (CLit (CIntc 3))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'P'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]")))))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '|'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '|'))) (CSymbol ("Prelude","[]")))))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CSymbol ("AbstractCurry","CInfixrOp"))) (CLit (CIntc 2))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'P'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]")))))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '>'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '>'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '='))) (CSymbol ("Prelude","[]"))))))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CSymbol ("AbstractCurry","CInfixlOp"))) (CLit (CIntc 1))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'P'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]")))))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '>'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '>'))) (CSymbol ("Prelude","[]")))))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CSymbol ("AbstractCurry","CInfixlOp"))) (CLit (CIntc 1))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'P'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]")))))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '?'))) (CSymbol ("Prelude","[]"))))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CSymbol ("AbstractCurry","CInfixrOp"))) (CLit (CIntc 0))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'P'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]")))))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '&'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '>'))) (CSymbol ("Prelude","[]")))))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CSymbol ("AbstractCurry","CInfixrOp"))) (CLit (CIntc 0))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'P'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]")))))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '&'))) (CSymbol ("Prelude","[]"))))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CSymbol ("AbstractCurry","CInfixrOp"))) (CLit (CIntc 0))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'P'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]")))))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'q'))) (CSymbol ("Prelude","[]"))))))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CSymbol ("AbstractCurry","CInfixrOp"))) (CLit (CIntc 0))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'P'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]")))))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '$'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '#'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '#'))) (CSymbol ("Prelude","[]"))))))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CSymbol ("AbstractCurry","CInfixrOp"))) (CLit (CIntc 0))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'P'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]")))))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '$'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '#'))) (CSymbol ("Prelude","[]")))))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CSymbol ("AbstractCurry","CInfixrOp"))) (CLit (CIntc 0))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'P'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]")))))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '$'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '!'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '!'))) (CSymbol ("Prelude","[]"))))))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CSymbol ("AbstractCurry","CInfixrOp"))) (CLit (CIntc 0))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'P'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]")))))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '$'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '!'))) (CSymbol ("Prelude","[]")))))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CSymbol ("AbstractCurry","CInfixrOp"))) (CLit (CIntc 0))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'P'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]")))))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '$'))) (CSymbol ("Prelude","[]"))))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CSymbol ("AbstractCurry","CInfixrOp"))) (CLit (CIntc 0))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'P'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]")))))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ':'))) (CSymbol ("Prelude","[]"))))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CSymbol ("AbstractCurry","CInfixrOp"))) (CLit (CIntc 5))))) (CSymbol ("Prelude","[]")))))))))))))))))))))))))))))))))))] []]),
  CFunc ("PrettyAbstract","prettyCProg") 1 Public (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("AbstractCurry","CurryProg") []) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]))) (CRules CFlex [CRule [CPVar (0,"w")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",".")) (CApply (CSymbol ("Pretty","pretty")) (CVar (0,"w")))) (CSymbol ("PrettyAbstract","cprogDoc")))] []]),
  CFunc ("PrettyAbstract","prettyCTypeExpr") 1 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("AbstractCurry","CTypeExpr") []) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]))) (CRules CFlex [CRule [CPVar (0,"mod")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",".")) (CApply (CSymbol ("Pretty","pretty")) (CLit (CIntc 78)))) (CApply (CApply (CSymbol ("PrettyAbstract","typeExprDoc")) (CVar (0,"mod"))) (CLit (CIntc 0))))] []]),
  CFunc ("PrettyAbstract","prettyCTypes") 1 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("AbstractCurry","CTypeDecl") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]))) (CRules CFlex [CRule [CPVar (0,"mod")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",".")) (CApply (CSymbol ("Pretty","pretty")) (CLit (CIntc 78)))) (CApply (CSymbol ("PrettyAbstract","typesDoc")) (CVar (0,"mod"))))] []]),
  CFunc ("PrettyAbstract","prettyCOps") 0 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("AbstractCurry","COpDecl") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",".")) (CApply (CSymbol ("Pretty","pretty")) (CLit (CIntc 78)))) (CSymbol ("PrettyAbstract","opsDoc")))] []]),
  CFunc ("PrettyAbstract","showCProg") 0 Public (CFuncType (CTCons ("AbstractCurry","CurryProg") []) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("PrettyAbstract","prettyCProg")) (CLit (CIntc 78)))] []]),
  CFunc ("PrettyAbstract","main") 0 Private (CTCons ("Prelude","IO") [CTCons ("Prelude","()") []]) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CDoExpr [CSPat (CPVar (1,"args")) (CSymbol ("System","getArgs")),CSExpr (CCase (CVar (1,"args")) [CBranch (CPComb ("Prelude",":") [CPComb ("Prelude",":") [CPLit (CCharc '-'),CPComb ("Prelude",":") [CPLit (CCharc '-'),CPComb ("Prelude",":") [CPLit (CCharc 'u'),CPComb ("Prelude",":") [CPLit (CCharc 'a'),CPComb ("Prelude",":") [CPLit (CCharc 'c'),CPComb ("Prelude",":") [CPLit (CCharc 'y'),CPComb ("Prelude","[]") []]]]]]],CPComb ("Prelude",":") [CPVar (2,"m"),CPComb ("Prelude","[]") []]]) (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CSymbol ("PrettyAbstract","checkMod")) (CVar (2,"m")))) (CApply (CSymbol ("PrettyAbstract","printUCProg")) (CVar (2,"m")))) (CVar (0,"usage"))),CBranch (CPComb ("Prelude",":") [CPVar (3,"m"),CPComb ("Prelude","[]") []]) (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CSymbol ("PrettyAbstract","checkMod")) (CVar (3,"m")))) (CApply (CSymbol ("PrettyAbstract","printCProg")) (CVar (3,"m")))) (CVar (0,"usage"))),CBranch (CPVar (4,"_")) (CVar (0,"usage"))])])] [CLocalPat (CPVar (0,"usage")) (CDoExpr [CSExpr (CApply (CSymbol ("Prelude","putStrLn")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'g'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ':'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'y'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'b'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '['))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '-'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '-'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'y'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ']'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '<'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '>'))) (CSymbol ("Prelude","[]"))))))))))))))))))))))))))))))))))))))))))))),CSExpr (CApply (CSymbol ("Prelude","putStrLn")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '-'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '-'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'y'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ':'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'y'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'A'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'b'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'C'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'y'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'g'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'f'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'y'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'A'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'b'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'C'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'y'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'g'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CSymbol ("Prelude","[]"))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))]) [],CLocalFunc (CFunc ("PrettyAbstract","checkMod") 1 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","Bool") [])) (CRules CFlex [CRule [CPVar (1,"m")] [(CApply (CApply (CSymbol ("Prelude","==")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '-'))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude","take")) (CLit (CIntc 1))) (CVar (1,"m"))),CSymbol ("Prelude","False")),(CSymbol ("Prelude","otherwise"),CApply (CApply (CSymbol ("Prelude","$")) (CSymbol ("PrettyAbstract","checkMod'"))) (CApply (CSymbol ("Prelude","reverse")) (CVar (1,"m"))))] []])),CLocalFunc (CFunc ("PrettyAbstract","checkMod'") 1 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","Bool") [])) (CRules CFlex [CRule [CPComb ("Prelude","[]") []] [(CSymbol ("Prelude","success"),CSymbol ("Prelude","True"))] [],CRule [CPComb ("Prelude",":") [CPVar (1,"c"),CPVar (2,"cs")]] [(CApply (CApply (CSymbol ("Prelude","==")) (CVar (1,"c"))) (CLit (CCharc '/')),CSymbol ("Prelude","True")),(CSymbol ("Prelude","otherwise"),CApply (CApply (CSymbol ("Prelude","&&")) (CApply (CApply (CSymbol ("Prelude","/=")) (CVar (1,"c"))) (CLit (CCharc '.')))) (CApply (CSymbol ("PrettyAbstract","checkMod'")) (CVar (2,"cs"))))] []]))]]),
  CFunc ("PrettyAbstract","printCProg") 1 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","IO") [CTCons ("Prelude","()") []])) (CRules CFlex [CRule [CPVar (0,"modulname")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",">>=")) (CApply (CSymbol ("AbstractCurry","readCurry")) (CVar (0,"modulname")))) (CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Prelude","putStrLn"))) (CSymbol ("PrettyAbstract","showCProg"))))] []]),
  CFunc ("PrettyAbstract","printUCProg") 1 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","IO") [CTCons ("Prelude","()") []])) (CRules CFlex [CRule [CPVar (0,"modulname")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",">>=")) (CApply (CSymbol ("AbstractCurry","readUntypedCurry")) (CVar (0,"modulname")))) (CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Prelude","putStrLn"))) (CSymbol ("PrettyAbstract","showCProg"))))] []]),
  CFunc ("PrettyAbstract","cprogDoc") 0 Public (CFuncType (CTCons ("AbstractCurry","CurryProg") []) (CTCons ("Pretty","Doc") [])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("PrettyAbstract","cprogDocWithPrecedences")) (CSymbol ("PrettyAbstract","preludePrecs")))] []]),
  CFunc ("PrettyAbstract","cprogDocWithPrecedences") 2 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]],CTCons ("Prelude","(,)") [CTCons ("AbstractCurry","CFixity") [],CTCons ("Prelude","Int") []]]]) (CFuncType (CTCons ("AbstractCurry","CurryProg") []) (CTCons ("Pretty","Doc") []))) (CRules CFlex [CRule [CPVar (0,"ps"),CPAs (6,"cprog") (CPComb ("AbstractCurry","CurryProg") [CPVar (1,"name"),CPVar (2,"imps"),CPVar (3,"types"),CPVar (4,"funcs"),CPVar (5,"ops")])] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Pretty","<$>")) (CApply (CApply (CSymbol ("PrettyAbstract","<$>>")) (CApply (CApply (CSymbol ("PrettyAbstract","<$>>")) (CApply (CApply (CSymbol ("PrettyAbstract","<$>>")) (CApply (CApply (CSymbol ("PrettyAbstract","<$>>")) (CApply (CApply (CApply (CSymbol ("PrettyAbstract","moduleHeaderDoc")) (CVar (1,"name"))) (CVar (6,"cprog"))) (CApply (CApply (CSymbol ("PrettyAbstract","exportedNames")) (CVar (1,"name"))) (CVar (6,"cprog"))))) (CApply (CSymbol ("PrettyAbstract","impsDoc")) (CVar (2,"imps"))))) (CApply (CSymbol ("PrettyAbstract","opsDoc")) (CVar (5,"ops"))))) (CApply (CApply (CSymbol ("PrettyAbstract","typesDoc")) (CVar (1,"name"))) (CVar (3,"types"))))) (CApply (CApply (CApply (CSymbol ("PrettyAbstract","funcsDoc")) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("PrettyAbstract","precs")) (CVar (5,"ops")))) (CVar (0,"ps")))) (CVar (1,"name"))) (CVar (4,"funcs"))))) (CSymbol ("Pretty","empty")))] []]),
  CFunc ("PrettyAbstract","precs") 0 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("AbstractCurry","COpDecl") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]],CTCons ("Prelude","(,)") [CTCons ("AbstractCurry","CFixity") [],CTCons ("Prelude","Int") []]]])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Prelude","map")) (CLambda [CPComb ("AbstractCurry","COp") [CPVar (0,"name"),CPVar (1,"fix"),CPVar (2,"i")]] (CApply (CApply (CSymbol ("Prelude","(,)")) (CVar (0,"name"))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CVar (1,"fix"))) (CVar (2,"i"))))))] []]),
  CFunc ("PrettyAbstract","<$>>") 2 Private (CFuncType (CTCons ("Pretty","Doc") []) (CFuncType (CTCons ("Pretty","Doc") []) (CTCons ("Pretty","Doc") []))) (CRules CFlex [CRule [CPVar (0,"d1"),CPVar (1,"d2")] [(CApply (CSymbol ("Pretty","isEmpty")) (CVar (0,"d1")),CVar (1,"d2")),(CApply (CSymbol ("Pretty","isEmpty")) (CVar (1,"d2")),CVar (0,"d1")),(CSymbol ("Prelude","otherwise"),CApply (CApply (CSymbol ("Pretty","<>")) (CApply (CApply (CSymbol ("Pretty","<$>")) (CVar (0,"d1"))) (CSymbol ("Pretty","line")))) (CVar (1,"d2")))] []]),
  CFunc ("PrettyAbstract","def") 3 Private (CFuncType (CTCons ("Pretty","Doc") []) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","Int") [],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]]) (CFuncType (CTCons ("Pretty","Doc") []) (CTCons ("Pretty","Doc") [])))) (CRules CFlex [CRule [CPVar (0,"name"),CPVar (1,"params"),CPVar (2,"body")] [(CSymbol ("Prelude","success"),CApply (CSymbol ("PrettyAbstract","block")) (CApply (CApply (CSymbol ("Pretty","<$>")) (CApply (CApply (CSymbol ("Pretty","<>")) (CVar (0,"name"))) (CVar (3,"paramDoc")))) (CVar (2,"body"))))] [CLocalPat (CPVar (3,"paramDoc")) (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CSymbol ("Prelude","null")) (CVar (1,"params")))) (CSymbol ("Pretty","empty"))) (CApply (CApply (CSymbol ("Pretty","<>")) (CSymbol ("Pretty","space"))) (CApply (CSymbol ("Pretty","align")) (CApply (CSymbol ("Pretty","fillSep")) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("PrettyAbstract","varDoc"))) (CVar (1,"params"))))))) []]]),
  CFunc ("PrettyAbstract","block") 0 Private (CFuncType (CTCons ("Pretty","Doc") []) (CTCons ("Pretty","Doc") [])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Pretty","group"))) (CApply (CSymbol ("Pretty","hang")) (CLit (CIntc 1))))] []]),
  CFunc ("PrettyAbstract","app") 2 Private (CFuncType (CTCons ("Pretty","Doc") []) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Pretty","Doc") []]) (CTCons ("Pretty","Doc") []))) (CRules CFlex [CRule [CPVar (0,"d"),CPVar (1,"ds")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CSymbol ("Prelude","null")) (CVar (1,"ds")))) (CVar (0,"d"))) (CApply (CSymbol ("PrettyAbstract","block")) (CApply (CApply (CApply (CApply (CSymbol ("Pretty","fillEncloseSep")) (CSymbol ("Pretty","empty"))) (CSymbol ("Pretty","empty"))) (CSymbol ("Pretty","space"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (0,"d"))) (CVar (1,"ds"))))))] []]),
  CFunc ("PrettyAbstract","par") 1 Private (CFuncType (CTCons ("Prelude","Maybe") [CTVar (0,"a")]) (CFuncType (CTCons ("Pretty","Doc") []) (CTCons ("Pretty","Doc") []))) (CRules CFlex [CRule [CPVar (0,"mPrec")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CSymbol ("Maybe","isJust")) (CVar (0,"mPrec")))) (CSymbol ("Pretty","parens"))) (CSymbol ("Prelude","id")))] []]),
  CFunc ("PrettyAbstract","precFillEncloseSep") 7 Private (CFuncType (CTCons ("Prelude","Bool") []) (CFuncType (CTCons ("Prelude","(,)") [CTCons ("AbstractCurry","CFixity") [],CTCons ("Prelude","Int") []]) (CFuncType (CTCons ("Prelude","Maybe") [CTCons ("Prelude","(,)") [CTCons ("AbstractCurry","CFixity") [],CTCons ("Prelude","Int") []]]) (CFuncType (CTCons ("Pretty","Doc") []) (CFuncType (CTCons ("Pretty","Doc") []) (CFuncType (CTCons ("Pretty","Doc") []) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Pretty","Doc") []]) (CTCons ("Pretty","Doc") [])))))))) (CRules CFlex [CRule [CPVar (0,"amILeft"),CPVar (1,"p1"),CPVar (2,"mp2"),CPVar (3,"l"),CPVar (4,"r"),CPVar (5,"s"),CPVar (6,"ds")] [(CApply (CSymbol ("Maybe","isNothing")) (CVar (2,"mp2")),CApply (CApply (CApply (CApply (CSymbol ("Pretty","fillEncloseSep")) (CSymbol ("Pretty","empty"))) (CSymbol ("Pretty","empty"))) (CVar (5,"s"))) (CVar (6,"ds"))),(CSymbol ("Prelude","otherwise"),CApply (CApply (CApply (CApply (CSymbol ("Pretty","fillEncloseSep")) (CApply (CApply (CApply (CSymbol ("PrettyAbstract","pre")) (CVar (1,"p1"))) (CVar (7,"p2"))) (CVar (3,"l")))) (CApply (CApply (CApply (CSymbol ("PrettyAbstract","pre")) (CVar (1,"p1"))) (CVar (7,"p2"))) (CVar (4,"r")))) (CVar (5,"s"))) (CVar (6,"ds")))] [CLocalPat (CPVar (7,"p2")) (CApply (CSymbol ("Maybe","fromJust")) (CVar (2,"mp2"))) [],CLocalFunc (CFunc ("PrettyAbstract","pre") 3 Private (CFuncType (CTCons ("Prelude","(,)") [CTCons ("AbstractCurry","CFixity") [],CTVar (0,"a")]) (CFuncType (CTCons ("Prelude","(,)") [CTCons ("AbstractCurry","CFixity") [],CTVar (0,"a")]) (CFuncType (CTCons ("Pretty","Doc") []) (CTCons ("Pretty","Doc") [])))) (CRules CFlex [CRule [CPComb ("Prelude","(,)") [CPVar (8,"fO"),CPVar (9,"pO")],CPComb ("Prelude","(,)") [CPVar (10,"fI"),CPVar (11,"pI")],CPVar (12,"br")] [(CApply (CApply (CSymbol ("Prelude",">")) (CVar (9,"pO"))) (CVar (11,"pI")),CSymbol ("Pretty","empty")),(CApply (CApply (CSymbol ("Prelude","<")) (CVar (9,"pO"))) (CVar (11,"pI")),CVar (12,"br")),(CApply (CApply (CSymbol ("Prelude","==")) (CVar (8,"fO"))) (CSymbol ("AbstractCurry","CInfixOp")),CVar (12,"br")),(CApply (CApply (CSymbol ("Prelude","/=")) (CVar (8,"fO"))) (CVar (10,"fI")),CVar (12,"br")),(CApply (CApply (CSymbol ("Prelude","&&")) (CVar (0,"amILeft"))) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (10,"fI"))) (CSymbol ("AbstractCurry","CInfixrOp"))),CVar (12,"br")),(CApply (CApply (CSymbol ("Prelude","&&")) (CApply (CSymbol ("Prelude","not")) (CVar (0,"amILeft")))) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (10,"fI"))) (CSymbol ("AbstractCurry","CInfixlOp"))),CVar (12,"br")),(CSymbol ("Prelude","True"),CSymbol ("Pretty","empty"))] []]))]]),
  CFunc ("PrettyAbstract","layout") 0 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Pretty","Doc") []]) (CTCons ("Pretty","Doc") [])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Pretty","align"))) (CApply (CSymbol ("Pretty","compose")) (CApply (CSymbol ("Pretty","combine")) (CApply (CSymbol ("Pretty","linesep")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ';'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]"))))))))] []]),
  CFunc ("PrettyAbstract","qname") 2 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]) (CTCons ("Pretty","Doc") []))) (CRules CFlex [CRule [CPVar (0,"prog"),CPAs (3,"mn") (CPComb ("Prelude","(,)") [CPVar (1,"mod"),CPVar (2,"name")])] [(CApply (CApply (CSymbol ("Prelude","||")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (3,"mn"))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CSymbol ("PrettyAbstract","prelude"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '['))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ']'))) (CSymbol ("Prelude","[]"))))))) (CApply (CSymbol ("PrettyAbstract","isTupleName")) (CVar (3,"mn"))),CApply (CSymbol ("Pretty","text")) (CVar (2,"name"))),(CApply (CSymbol ("PrettyAbstract","isInfixName")) (CVar (3,"mn")),CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","||")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (1,"mod"))) (CVar (0,"prog")))) (CApply (CApply (CSymbol ("Prelude","||")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (1,"mod"))) (CSymbol ("PrettyAbstract","prelude")))) (CApply (CSymbol ("Prelude","not")) (CSymbol ("PrettyAbstract","qualifiedNames")))))) (CApply (CSymbol ("Pretty","parens")) (CApply (CSymbol ("Pretty","text")) (CVar (2,"name"))))) (CApply (CSymbol ("Pretty","parens")) (CApply (CApply (CSymbol ("Pretty","<>")) (CApply (CApply (CSymbol ("Pretty","<>")) (CApply (CSymbol ("Pretty","text")) (CVar (1,"mod")))) (CSymbol ("Pretty","dot")))) (CApply (CSymbol ("Pretty","text")) (CVar (2,"name")))))),(CSymbol ("Prelude","otherwise"),CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","||")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (1,"mod"))) (CVar (0,"prog")))) (CApply (CApply (CSymbol ("Prelude","||")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (1,"mod"))) (CSymbol ("PrettyAbstract","prelude")))) (CApply (CSymbol ("Prelude","not")) (CSymbol ("PrettyAbstract","qualifiedNames")))))) (CApply (CSymbol ("Pretty","text")) (CApply (CSymbol ("PrettyAbstract","correctName")) (CVar (2,"name"))))) (CApply (CApply (CSymbol ("Pretty","<>")) (CApply (CApply (CSymbol ("Pretty","<>")) (CApply (CSymbol ("Pretty","text")) (CVar (1,"mod")))) (CSymbol ("Pretty","dot")))) (CApply (CSymbol ("Pretty","text")) (CVar (2,"name")))))] []]),
  CFunc ("PrettyAbstract","isTupleName") 1 Private (CFuncType (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]) (CTCons ("Prelude","Bool") [])) (CRules CFlex [CRule [CPComb ("Prelude","(,)") [CPVar (0,"mod"),CPVar (1,"name")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","&&")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (0,"mod"))) (CSymbol ("PrettyAbstract","prelude")))) (CApply (CApply (CSymbol ("Prelude","elem")) (CApply (CApply (CSymbol ("Prelude","take")) (CLit (CIntc 2))) (CVar (1,"name")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '('))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ')'))) (CSymbol ("Prelude","[]"))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '('))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ','))) (CSymbol ("Prelude","[]"))))) (CSymbol ("Prelude","[]"))))))] []]),
  CFunc ("PrettyAbstract","isInfixName") 1 Private (CFuncType (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]) (CTCons ("Prelude","Bool") [])) (CRules CFlex [CRule [CPComb ("Prelude","(,)") [CPVar (0,"_"),CPVar (1,"n")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","all")) (CLambda [CPVar (2,"x0")] (CApply (CApply (CSymbol ("Prelude","elem")) (CVar (2,"x0"))) (CSymbol ("PrettyAbstract","infixIDs"))))) (CVar (1,"n")))] []]),
  CFunc ("PrettyAbstract","infixIDs") 0 Private (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '~'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '!'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '@'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '#'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '$'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '%'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '^'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '&'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '*'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '+'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '-'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '='))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '<'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '>'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '?'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '.'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '/'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '|'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\\'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ':'))) (CSymbol ("Prelude","[]"))))))))))))))))))))))] []]),
  CFunc ("PrettyAbstract","correctName") 1 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CRules CFlex [CRule [CPVar (0,"name")] [(CSymbol ("Prelude","success"),CLetDecl [CLocalPat (CPVar (1,"name'")) (CApply (CApply (CSymbol ("Prelude","filter")) (CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Prelude","not"))) (CApply (CApply (CSymbol ("Prelude","flip")) (CSymbol ("Prelude","elem"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '#'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '.'))) (CSymbol ("Prelude","[]"))))))) (CVar (0,"name"))) []] (CCase (CVar (1,"name'")) [CBranch (CPComb ("Prelude",":") [CPLit (CCharc '_'),CPVar (2,"xs")]) (CVar (2,"xs")),CBranch (CPVar (3,"_")) (CVar (1,"name'"))]))] []]),
  CFunc ("PrettyAbstract","varDoc") 0 Private (CFuncType (CTCons ("Prelude","(,)") [CTCons ("Prelude","Int") [],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]) (CTCons ("Pretty","Doc") [])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Pretty","text"))) (CSymbol ("Prelude","snd")))] []]),
  CFunc ("PrettyAbstract","tvarDoc") 1 Private (CFuncType (CTCons ("Prelude","(,)") [CTCons ("Prelude","Int") [],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]) (CTCons ("Pretty","Doc") [])) (CRules CFlex [CRule [CPComb ("Prelude","(,)") [CPVar (0,"i"),CPVar (1,"v")]] [(CApply (CApply (CSymbol ("Prelude","||")) (CApply (CApply (CSymbol ("Prelude","&&")) (CApply (CApply (CSymbol ("Prelude","/=")) (CVar (1,"v"))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude","/=")) (CLit (CCharc '_'))) (CApply (CSymbol ("Prelude","head")) (CVar (1,"v")))))) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (1,"v"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '_'))) (CSymbol ("Prelude","[]")))),CApply (CSymbol ("Pretty","text")) (CVar (1,"v"))),(CApply (CApply (CSymbol ("Prelude",">")) (CVar (0,"i"))) (CLit (CIntc 25)),CApply (CSymbol ("Pretty","text")) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'x'))) (CSymbol ("Prelude","[]")))) (CApply (CSymbol ("Prelude","show")) (CVar (0,"i"))))),(CSymbol ("Prelude","otherwise"),CApply (CSymbol ("Pretty","text")) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("Prelude","chr")) (CApply (CApply (CSymbol ("Prelude","+")) (CLit (CIntc 97))) (CVar (0,"i"))))) (CSymbol ("Prelude","[]"))))] []]),
  CFunc ("PrettyAbstract","litDoc") 1 Private (CFuncType (CTCons ("AbstractCurry","CLiteral") []) (CTCons ("Pretty","Doc") [])) (CRules CFlex [CRule [CPComb ("AbstractCurry","CIntc") [CPVar (0,"n")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Pretty","int")) (CVar (0,"n")))] [],CRule [CPComb ("AbstractCurry","CFloatc") [CPVar (1,"x")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Pretty","float")) (CVar (1,"x")))] [],CRule [CPComb ("AbstractCurry","CCharc") [CPVar (2,"c")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Pretty","squotes")) (CApply (CSymbol ("Pretty","text")) (CApply (CSymbol ("PrettyAbstract","quoteChar")) (CVar (2,"c")))))] []]),
  CFunc ("PrettyAbstract","quoteChar") 1 Private (CFuncType (CTCons ("Prelude","Char") []) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CRules CFlex [CRule [CPVar (0,"c")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","maybe")) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (0,"c"))) (CSymbol ("Prelude","[]")))) (CSymbol ("Prelude","id"))) (CApply (CApply (CSymbol ("Prelude","lookup")) (CVar (0,"c"))) (CSymbol ("PrettyAbstract","specialChars"))))] []]),
  CFunc ("PrettyAbstract","specialChars") 0 Private (CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","Char") [],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]]) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CLit (CCharc '\\'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\\'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\\'))) (CSymbol ("Prelude","[]")))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CLit (CCharc '\n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\\'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CSymbol ("Prelude","[]")))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CLit (CCharc '\r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\\'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CSymbol ("Prelude","[]")))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CLit (CCharc '\t'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\\'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CSymbol ("Prelude","[]")))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CLit (CCharc '"'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\\'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '"'))) (CSymbol ("Prelude","[]")))))) (CSymbol ("Prelude","[]")))))))] []]),
  CFunc ("PrettyAbstract","moduleHeaderDoc") 3 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("AbstractCurry","CurryProg") []) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Pretty","Doc") []]) (CTCons ("Pretty","Doc") [])))) (CRules CFlex [CRule [CPVar (0,"name"),CPVar (1,"cprog"),CPVar (2,"exports")] [(CApply (CSymbol ("PrettyAbstract","hasPrivate")) (CVar (1,"cprog")),CApply (CApply (CSymbol ("Pretty","<+>")) (CApply (CApply (CSymbol ("Pretty","<+>")) (CApply (CApply (CSymbol ("Pretty","<+>")) (CApply (CSymbol ("Pretty","text")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]")))))))))) (CApply (CSymbol ("Pretty","text")) (CVar (0,"name"))))) (CApply (CSymbol ("PrettyAbstract","exportsDoc")) (CVar (2,"exports"))))) (CApply (CSymbol ("Pretty","text")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'w'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'h'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]"))))))))),(CSymbol ("Prelude","otherwise"),CApply (CApply (CSymbol ("Pretty","<+>")) (CApply (CApply (CSymbol ("Pretty","<+>")) (CApply (CSymbol ("Pretty","text")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]")))))))))) (CApply (CSymbol ("Pretty","text")) (CVar (0,"name"))))) (CApply (CSymbol ("Pretty","text")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'w'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'h'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]")))))))))] []]),
  CFunc ("PrettyAbstract","exportsDoc") 1 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Pretty","Doc") []]) (CTCons ("Pretty","Doc") [])) (CRules CFlex [CRule [CPVar (0,"xs")] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Pretty","group")) (CApply (CApply (CSymbol ("Pretty","nest")) (CLit (CIntc 1))) (CApply (CApply (CSymbol ("Pretty","<$>")) (CApply (CApply (CSymbol ("Pretty","<$>")) (CSymbol ("Pretty","lparen"))) (CApply (CSymbol ("Pretty","align")) (CApply (CSymbol ("Pretty","fillSep")) (CApply (CApply (CSymbol ("Pretty","punctuate")) (CSymbol ("Pretty","comma"))) (CVar (0,"xs"))))))) (CSymbol ("Pretty","rparen")))))] []]),
  CFunc ("PrettyAbstract","hasPrivate") 1 Private (CFuncType (CTCons ("AbstractCurry","CurryProg") []) (CTCons ("Prelude","Bool") [])) (CRules CFlex [CRule [CPComb ("AbstractCurry","CurryProg") [CPVar (0,"_"),CPVar (1,"_"),CPVar (2,"types"),CPVar (3,"funcs"),CPVar (4,"_")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","any")) (CLambda [CPVar (5,"x0")] (CApply (CApply (CSymbol ("Prelude","==")) (CSymbol ("AbstractCurry","Private"))) (CVar (5,"x0"))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("PrettyAbstract","typeCVisibility"))) (CVar (2,"types")))) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("PrettyAbstract","funcCVisibility"))) (CVar (3,"funcs")))))] []]),
  CFunc ("PrettyAbstract","exportedNames") 2 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("AbstractCurry","CurryProg") []) (CTCons ("Prelude","[]") [CTCons ("Pretty","Doc") []]))) (CRules CFlex [CRule [CPVar (0,"mod"),CPComb ("AbstractCurry","CurryProg") [CPVar (1,"_"),CPVar (2,"_"),CPVar (3,"types"),CPVar (4,"funcs"),CPVar (5,"_")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("PrettyAbstract","typeExpDoc"))) (CApply (CApply (CSymbol ("Prelude","filter")) (CApply (CApply (CSymbol ("Prelude",".")) (CLambda [CPVar (6,"x0")] (CApply (CApply (CSymbol ("Prelude","==")) (CSymbol ("AbstractCurry","Public"))) (CVar (6,"x0"))))) (CSymbol ("PrettyAbstract","typeCVisibility")))) (CVar (3,"types"))))) (CApply (CApply (CSymbol ("Prelude","map")) (CApply (CApply (CSymbol ("Prelude",".")) (CApply (CSymbol ("PrettyAbstract","qname")) (CVar (0,"mod")))) (CSymbol ("PrettyAbstract","funcName")))) (CApply (CApply (CSymbol ("Prelude","filter")) (CApply (CApply (CSymbol ("Prelude",".")) (CLambda [CPVar (7,"x0")] (CApply (CApply (CSymbol ("Prelude","==")) (CSymbol ("AbstractCurry","Public"))) (CVar (7,"x0"))))) (CSymbol ("PrettyAbstract","funcCVisibility")))) (CVar (4,"funcs")))))] [CLocalFunc (CFunc ("PrettyAbstract","typeExpDoc") 1 Private (CFuncType (CTCons ("AbstractCurry","CTypeDecl") []) (CTCons ("Pretty","Doc") [])) (CRules CFlex [CRule [CPVar (6,"tdecl")] [(CSymbol ("Prelude","success"),CLetDecl [CLocalPat (CPVar (7,"ecs")) (CApply (CApply (CSymbol ("Prelude","filter")) (CApply (CApply (CSymbol ("Prelude",".")) (CLambda [CPVar (8,"x0")] (CApply (CApply (CSymbol ("Prelude","==")) (CSymbol ("AbstractCurry","Public"))) (CVar (8,"x0"))))) (CSymbol ("PrettyAbstract","consCVisibility")))) (CApply (CApply (CApply (CSymbol ("PrettyAbstract","trCType")) (CLambda [CPVar (9,"_"),CPVar (10,"_"),CPVar (11,"_"),CPVar (12,"cs")] (CVar (12,"cs")))) (CLambda [CPVar (13,"_"),CPVar (14,"_"),CPVar (15,"_"),CPVar (16,"_")] (CSymbol ("Prelude","[]")))) (CVar (6,"tdecl")))) []] (CApply (CApply (CSymbol ("Pretty","<>")) (CApply (CApply (CSymbol ("PrettyAbstract","qname")) (CVar (0,"mod"))) (CApply (CSymbol ("PrettyAbstract","typeName")) (CVar (6,"tdecl"))))) (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CSymbol ("Prelude","null")) (CVar (7,"ecs")))) (CSymbol ("Pretty","empty"))) (CApply (CSymbol ("Pretty","text")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '('))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '.'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '.'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ')'))) (CSymbol ("Prelude","[]"))))))))))] []]))]]),
  CFunc ("PrettyAbstract","impsDoc") 1 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]) (CTCons ("Pretty","Doc") [])) (CRules CFlex [CRule [CPVar (0,"imps")] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Pretty","vcat")) (CApply (CApply (CSymbol ("Prelude","map")) (CApply (CApply (CSymbol ("Prelude",".")) (CLambda [CPVar (1,"x0")] (CApply (CApply (CSymbol ("Pretty","<+>")) (CApply (CSymbol ("Pretty","text")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CSymbol ("Prelude","[]")))))))))) (CVar (1,"x0"))))) (CSymbol ("Pretty","text")))) (CApply (CApply (CSymbol ("Prelude","filter")) (CLambda [CPVar (2,"x0")] (CApply (CApply (CSymbol ("Prelude","/=")) (CVar (2,"x0"))) (CSymbol ("PrettyAbstract","prelude"))))) (CVar (0,"imps")))))] []]),
  CFunc ("PrettyAbstract","opsDoc") 1 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("AbstractCurry","COpDecl") []]) (CTCons ("Pretty","Doc") [])) (CRules CFlex [CRule [CPVar (0,"ops")] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Pretty","vcat")) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("PrettyAbstract","opLineDoc"))) (CApply (CApply (CSymbol ("List","groupBy")) (CSymbol ("PrettyAbstract","eqCOpDecl"))) (CVar (0,"ops")))))] []]),
  CFunc ("PrettyAbstract","opLineDoc") 1 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("AbstractCurry","COpDecl") []]) (CTCons ("Pretty","Doc") [])) (CRules CFlex [CRule [CPComb ("Prelude","[]") []] [(CSymbol ("Prelude","success"),CSymbol ("Pretty","empty"))] [],CRule [CPAs (4,"ops") (CPComb ("Prelude",":") [CPComb ("AbstractCurry","COp") [CPVar (0,"_"),CPVar (1,"fix"),CPVar (2,"prec")],CPVar (3,"_")])] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Pretty","<+>")) (CApply (CApply (CSymbol ("Pretty","<+>")) (CApply (CApply (CSymbol ("Pretty","<>")) (CApply (CSymbol ("Pretty","text")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'f'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'x'))) (CSymbol ("Prelude","[]"))))))))) (CApply (CSymbol ("PrettyAbstract","fixDoc")) (CVar (1,"fix"))))) (CApply (CSymbol ("Pretty","int")) (CVar (2,"prec"))))) (CApply (CSymbol ("Pretty","align")) (CApply (CSymbol ("Pretty","hsep")) (CApply (CApply (CSymbol ("Pretty","punctuate")) (CSymbol ("Pretty","comma"))) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("PrettyAbstract","opDoc"))) (CVar (4,"ops")))))))] [CLocalFunc (CFunc ("PrettyAbstract","fixDoc") 1 Private (CFuncType (CTCons ("AbstractCurry","CFixity") []) (CTCons ("Pretty","Doc") [])) (CRules CFlex [CRule [CPComb ("AbstractCurry","CInfixOp") []] [(CSymbol ("Prelude","success"),CSymbol ("Pretty","empty"))] [],CRule [CPComb ("AbstractCurry","CInfixlOp") []] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Pretty","text")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CSymbol ("Prelude","[]"))))] [],CRule [CPComb ("AbstractCurry","CInfixrOp") []] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Pretty","text")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CSymbol ("Prelude","[]"))))] []]))]]),
  CFunc ("PrettyAbstract","eqCOpDecl") 2 Private (CFuncType (CTCons ("AbstractCurry","COpDecl") []) (CFuncType (CTCons ("AbstractCurry","COpDecl") []) (CTCons ("Prelude","Bool") []))) (CRules CFlex [CRule [CPComb ("AbstractCurry","COp") [CPVar (0,"_"),CPVar (1,"fix1"),CPVar (2,"prec1")],CPComb ("AbstractCurry","COp") [CPVar (3,"_"),CPVar (4,"fix2"),CPVar (5,"prec2")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","&&")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (1,"fix1"))) (CVar (4,"fix2")))) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (2,"prec1"))) (CVar (5,"prec2"))))] []]),
  CFunc ("PrettyAbstract","opDoc") 1 Private (CFuncType (CTCons ("AbstractCurry","COpDecl") []) (CTCons ("Pretty","Doc") [])) (CRules CFlex [CRule [CPComb ("AbstractCurry","COp") [CPAs (2,"n") (CPComb ("Prelude","(,)") [CPVar (0,"_"),CPVar (1,"name")]),CPVar (3,"_"),CPVar (4,"_")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Pretty","text")) (CVar (5,"infname")))] [CLocalPat (CPVar (5,"infname")) (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CSymbol ("PrettyAbstract","isInfixName")) (CVar (2,"n")))) (CVar (1,"name"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '`'))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (1,"name"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '`'))) (CSymbol ("Prelude","[]")))))) []]]),
  CFunc ("PrettyAbstract","typesDoc") 1 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("AbstractCurry","CTypeDecl") []]) (CTCons ("Pretty","Doc") []))) (CRules CFlex [CRule [CPVar (0,"mod")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Pretty","vcat"))) (CApply (CSymbol ("Prelude","map")) (CApply (CSymbol ("PrettyAbstract","typeDoc")) (CVar (0,"mod")))))] []]),
  CFunc ("PrettyAbstract","typeDoc") 2 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("AbstractCurry","CTypeDecl") []) (CTCons ("Pretty","Doc") []))) (CRules CFlex [CRule [CPVar (0,"mod"),CPComb ("AbstractCurry","CType") [CPVar (1,"name"),CPVar (2,"_"),CPVar (3,"params"),CPVar (4,"cs")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("PrettyAbstract","def")) (CApply (CApply (CSymbol ("Pretty","<+>")) (CApply (CSymbol ("Pretty","text")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CSymbol ("Prelude","[]")))))))) (CApply (CApply (CSymbol ("PrettyAbstract","qname")) (CVar (0,"mod"))) (CVar (1,"name"))))) (CVar (3,"params"))) (CApply (CApply (CSymbol ("PrettyAbstract","consDeclsDoc")) (CVar (0,"mod"))) (CVar (4,"cs"))))] [],CRule [CPVar (5,"mod"),CPComb ("AbstractCurry","CTypeSyn") [CPVar (6,"name"),CPVar (7,"_"),CPVar (8,"params"),CPVar (9,"syn")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("PrettyAbstract","def")) (CApply (CApply (CSymbol ("Pretty","<+>")) (CApply (CSymbol ("Pretty","text")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'y'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]")))))))) (CApply (CApply (CSymbol ("PrettyAbstract","qname")) (CVar (5,"mod"))) (CVar (6,"name"))))) (CVar (8,"params"))) (CApply (CApply (CSymbol ("Pretty","<+>")) (CSymbol ("Pretty","equals"))) (CApply (CApply (CApply (CSymbol ("PrettyAbstract","typeExprDoc")) (CVar (5,"mod"))) (CLit (CIntc 0))) (CVar (9,"syn")))))] []]),
  CFunc ("PrettyAbstract","consDeclsDoc") 2 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("AbstractCurry","CConsDecl") []]) (CTCons ("Pretty","Doc") []))) (CRules CFlex [CRule [CPVar (0,"mod"),CPVar (1,"consDecls")] [(CApply (CSymbol ("Prelude","null")) (CVar (1,"consDecls")),CSymbol ("Pretty","empty")),(CSymbol ("Prelude","otherwise"),CApply (CApply (CSymbol ("Prelude","$")) (CApply (CApply (CApply (CSymbol ("Pretty","fillEncloseSep")) (CApply (CApply (CSymbol ("Pretty","<>")) (CSymbol ("Pretty","equals"))) (CSymbol ("Pretty","space")))) (CSymbol ("Pretty","empty"))) (CApply (CApply (CSymbol ("Pretty","<>")) (CSymbol ("PrettyAbstract","bar"))) (CSymbol ("Pretty","space"))))) (CApply (CApply (CSymbol ("Prelude","map")) (CApply (CApply (CSymbol ("Prelude",".")) (CLambda [CPVar (2,"x0")] (CApply (CApply (CSymbol ("Pretty","<>")) (CVar (2,"x0"))) (CSymbol ("Pretty","space"))))) (CApply (CSymbol ("PrettyAbstract","consDeclDoc")) (CVar (0,"mod"))))) (CVar (1,"consDecls"))))] []]),
  CFunc ("PrettyAbstract","consDeclDoc") 2 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("AbstractCurry","CConsDecl") []) (CTCons ("Pretty","Doc") []))) (CRules CFlex [CRule [CPVar (0,"mod"),CPComb ("AbstractCurry","CCons") [CPVar (1,"name"),CPVar (2,"_"),CPVar (3,"_"),CPVar (4,"args")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("PrettyAbstract","app")) (CApply (CApply (CSymbol ("PrettyAbstract","qname")) (CVar (0,"mod"))) (CVar (1,"name")))) (CApply (CApply (CSymbol ("Prelude","map")) (CApply (CApply (CSymbol ("PrettyAbstract","typeExprDoc")) (CVar (0,"mod"))) (CLit (CIntc 2)))) (CVar (4,"args"))))] []]),
  CFunc ("PrettyAbstract","typeExprDoc") 3 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("AbstractCurry","CTypeExpr") []) (CTCons ("Pretty","Doc") [])))) (CRules CFlex [CRule [CPVar (0,"_"),CPVar (1,"_"),CPComb ("AbstractCurry","CTVar") [CPVar (2,"n")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("PrettyAbstract","tvarDoc")) (CVar (2,"n")))] [],CRule [CPVar (3,"mod"),CPVar (4,"p"),CPComb ("AbstractCurry","CTCons") [CPVar (5,"name"),CPVar (6,"args")]] [(CApply (CSymbol ("Prelude","null")) (CVar (6,"args")),CApply (CApply (CSymbol ("PrettyAbstract","qname")) (CVar (3,"mod"))) (CVar (5,"name"))),(CApply (CApply (CSymbol ("Prelude","==")) (CVar (5,"name"))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CSymbol ("PrettyAbstract","prelude"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '['))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ']'))) (CSymbol ("Prelude","[]"))))),CApply (CSymbol ("Pretty","brackets")) (CApply (CApply (CApply (CSymbol ("PrettyAbstract","typeExprDoc")) (CVar (3,"mod"))) (CLit (CIntc 0))) (CApply (CSymbol ("Prelude","head")) (CVar (6,"args"))))),(CApply (CSymbol ("PrettyAbstract","isTupleName")) (CVar (5,"name")),CApply (CSymbol ("Pretty","tupled")) (CApply (CApply (CSymbol ("Prelude","map")) (CApply (CApply (CSymbol ("PrettyAbstract","typeExprDoc")) (CVar (3,"mod"))) (CLit (CIntc 0)))) (CVar (6,"args")))),(CSymbol ("Prelude","otherwise"),CApply (CApply (CSymbol ("Prelude","$")) (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (4,"p"))) (CLit (CIntc 2)))) (CSymbol ("Pretty","parens"))) (CSymbol ("Prelude","id")))) (CApply (CApply (CSymbol ("PrettyAbstract","app")) (CApply (CApply (CSymbol ("PrettyAbstract","qname")) (CVar (3,"mod"))) (CVar (5,"name")))) (CApply (CApply (CSymbol ("Prelude","map")) (CApply (CApply (CSymbol ("PrettyAbstract","typeExprDoc")) (CVar (3,"mod"))) (CLit (CIntc 2)))) (CVar (6,"args")))))] [],CRule [CPVar (7,"mod"),CPVar (8,"p"),CPAs (11,"typ") (CPComb ("AbstractCurry","CFuncType") [CPVar (9,"_"),CPVar (10,"_")])] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","$")) (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude",">")) (CVar (8,"p"))) (CLit (CIntc 0)))) (CSymbol ("Pretty","parens"))) (CSymbol ("Prelude","id")))) (CApply (CApply (CApply (CApply (CSymbol ("Pretty","fillEncloseSep")) (CSymbol ("Pretty","empty"))) (CSymbol ("Pretty","empty"))) (CApply (CApply (CSymbol ("Pretty","<>")) (CApply (CApply (CSymbol ("Pretty","<>")) (CSymbol ("Pretty","space"))) (CSymbol ("PrettyAbstract","arrow")))) (CSymbol ("Pretty","space")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude","map")) (CApply (CApply (CSymbol ("PrettyAbstract","typeExprDoc")) (CVar (7,"mod"))) (CLit (CIntc 1)))) (CApply (CSymbol ("PrettyAbstract","argTypes")) (CVar (11,"typ"))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CApply (CSymbol ("PrettyAbstract","typeExprDoc")) (CVar (7,"mod"))) (CLit (CIntc 0))) (CApply (CSymbol ("PrettyAbstract","resultType")) (CVar (11,"typ"))))) (CSymbol ("Prelude","[]"))))))] []]),
  CFunc ("PrettyAbstract","isUntyped") 1 Private (CFuncType (CTCons ("AbstractCurry","CTypeExpr") []) (CTCons ("Prelude","Bool") [])) (CRules CFlex [CRule [CPVar (0,"typ")] [(CSymbol ("Prelude","success"),CCase (CVar (0,"typ")) [CBranch (CPComb ("AbstractCurry","CTCons") [CPComb ("Prelude","(,)") [CPComb ("Prelude",":") [CPLit (CCharc 'P'),CPComb ("Prelude",":") [CPLit (CCharc 'r'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude",":") [CPLit (CCharc 'l'),CPComb ("Prelude",":") [CPLit (CCharc 'u'),CPComb ("Prelude",":") [CPLit (CCharc 'd'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude","[]") []]]]]]]],CPComb ("Prelude",":") [CPLit (CCharc 'u'),CPComb ("Prelude",":") [CPLit (CCharc 'n'),CPComb ("Prelude",":") [CPLit (CCharc 't'),CPComb ("Prelude",":") [CPLit (CCharc 'y'),CPComb ("Prelude",":") [CPLit (CCharc 'p'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude",":") [CPLit (CCharc 'd'),CPComb ("Prelude","[]") []]]]]]]]],CPComb ("Prelude","[]") []]) (CSymbol ("Prelude","True")),CBranch (CPVar (1,"_")) (CSymbol ("Prelude","False"))])] []]),
  CFunc ("PrettyAbstract","funcsDoc") 3 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]],CTCons ("Prelude","(,)") [CTCons ("AbstractCurry","CFixity") [],CTCons ("Prelude","Int") []]]]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("AbstractCurry","CFuncDecl") []]) (CTCons ("Pretty","Doc") [])))) (CRules CFlex [CRule [CPVar (0,"pr"),CPVar (1,"mod"),CPVar (2,"funcs")] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Pretty","vcat")) (CApply (CApply (CSymbol ("Pretty","punctuate")) (CSymbol ("Pretty","line"))) (CApply (CApply (CSymbol ("Prelude","map")) (CApply (CApply (CSymbol ("PrettyAbstract","funcDoc")) (CVar (0,"pr"))) (CVar (1,"mod")))) (CVar (2,"funcs")))))] []]),
  CFunc ("PrettyAbstract","funcDoc") 3 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]],CTCons ("Prelude","(,)") [CTCons ("AbstractCurry","CFixity") [],CTCons ("Prelude","Int") []]]]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("AbstractCurry","CFuncDecl") []) (CTCons ("Pretty","Doc") [])))) (CRules CFlex [CRule [CPVar (0,"pr"),CPVar (1,"mod"),CPComb ("AbstractCurry","CFunc") [CPVar (2,"name"),CPVar (3,"_"),CPVar (4,"_"),CPVar (5,"typ"),CPVar (6,"rules")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Pretty","<>")) (CApply (CApply (CSymbol ("Pretty","<>")) (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CSymbol ("PrettyAbstract","hasRec")) (CVar (5,"typ")))) (CApply (CSymbol ("Pretty","text")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '-'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '-'))) (CSymbol ("Prelude","[]")))))) (CSymbol ("Pretty","empty")))) (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CSymbol ("PrettyAbstract","isUntyped")) (CVar (5,"typ")))) (CSymbol ("Pretty","empty"))) (CApply (CApply (CSymbol ("Pretty","<$>")) (CApply (CApply (CApply (CSymbol ("PrettyAbstract","funcTypeDeclDoc")) (CVar (1,"mod"))) (CVar (2,"name"))) (CVar (5,"typ")))) (CSymbol ("Pretty","empty")))))) (CApply (CApply (CApply (CApply (CSymbol ("PrettyAbstract","rulesDoc")) (CVar (0,"pr"))) (CVar (1,"mod"))) (CVar (2,"name"))) (CVar (6,"rules"))))] [],CRule [CPVar (7,"pr"),CPVar (8,"mod"),CPComb ("AbstractCurry","CmtFunc") [CPVar (9,"cmt"),CPVar (10,"name"),CPVar (11,"ar"),CPVar (12,"vis"),CPVar (13,"typ"),CPVar (14,"rules")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Pretty","<$>")) (CApply (CSymbol ("Pretty","vsep")) (CApply (CApply (CSymbol ("Prelude","map")) (CLambda [CPVar (15,"l")] (CApply (CSymbol ("Pretty","text")) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '-'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '-'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '-'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]"))))))) (CVar (15,"l")))))) (CApply (CSymbol ("Prelude","lines")) (CVar (9,"cmt")))))) (CApply (CApply (CApply (CSymbol ("PrettyAbstract","funcDoc")) (CVar (7,"pr"))) (CVar (8,"mod"))) (CApply (CApply (CApply (CApply (CApply (CSymbol ("AbstractCurry","CFunc")) (CVar (10,"name"))) (CVar (11,"ar"))) (CVar (12,"vis"))) (CVar (13,"typ"))) (CVar (14,"rules")))))] []]),
  CFunc ("PrettyAbstract","hasRec") 1 Private (CFuncType (CTCons ("AbstractCurry","CTypeExpr") []) (CTCons ("Prelude","Bool") [])) (CRules CFlex [CRule [CPComb ("AbstractCurry","CTVar") [CPVar (0,"_")]] [(CSymbol ("Prelude","success"),CSymbol ("Prelude","False"))] [],CRule [CPComb ("AbstractCurry","CFuncType") [CPVar (1,"t1"),CPVar (2,"t2")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","||")) (CApply (CSymbol ("PrettyAbstract","hasRec")) (CVar (1,"t1")))) (CApply (CSymbol ("PrettyAbstract","hasRec")) (CVar (2,"t2"))))] [],CRule [CPComb ("AbstractCurry","CTCons") [CPVar (3,"_"),CPVar (4,"ts")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","any")) (CSymbol ("PrettyAbstract","hasRec"))) (CVar (4,"ts")))] []]),
  CFunc ("PrettyAbstract","localDeclsDoc") 3 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]],CTCons ("Prelude","(,)") [CTCons ("AbstractCurry","CFixity") [],CTCons ("Prelude","Int") []]]]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("AbstractCurry","CLocalDecl") []]) (CTCons ("Pretty","Doc") [])))) (CRules CFlex [CRule [CPVar (0,"pr"),CPVar (1,"mod"),CPVar (2,"lds")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","$")) (CSymbol ("Pretty","align"))) (CApply (CApply (CSymbol ("Prelude","$")) (CSymbol ("Pretty","vsep"))) (CApply (CApply (CSymbol ("Prelude","$")) (CApply (CSymbol ("Pretty","punctuate")) (CSymbol ("Pretty","line")))) (CApply (CApply (CSymbol ("Prelude","map")) (CApply (CApply (CSymbol ("PrettyAbstract","localDeclDoc")) (CVar (0,"pr"))) (CVar (1,"mod")))) (CVar (2,"lds"))))))] []]),
  CFunc ("PrettyAbstract","localDeclDoc") 3 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]],CTCons ("Prelude","(,)") [CTCons ("AbstractCurry","CFixity") [],CTCons ("Prelude","Int") []]]]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("AbstractCurry","CLocalDecl") []) (CTCons ("Pretty","Doc") [])))) (CRules CFlex [CRule [CPVar (0,"pr"),CPVar (1,"mod"),CPComb ("AbstractCurry","CLocalFunc") [CPVar (2,"f")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("PrettyAbstract","funcDoc")) (CVar (0,"pr"))) (CVar (1,"mod"))) (CVar (2,"f")))] [],CRule [CPVar (3,"pr"),CPVar (4,"mod"),CPComb ("AbstractCurry","CLocalPat") [CPVar (5,"pn"),CPVar (6,"e"),CPVar (7,"lds")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","$")) (CApply (CSymbol ("Pretty","hang")) (CLit (CIntc 1)))) (CApply (CApply (CSymbol ("Pretty","<>")) (CApply (CApply (CSymbol ("Pretty","<+>")) (CApply (CApply (CSymbol ("Pretty","<+>")) (CApply (CApply (CSymbol ("PrettyAbstract","patternDoc")) (CVar (4,"mod"))) (CVar (5,"pn")))) (CSymbol ("Pretty","equals")))) (CApply (CApply (CApply (CApply (CApply (CSymbol ("PrettyAbstract","expDoc")) (CSymbol ("Prelude","unknown"))) (CVar (3,"pr"))) (CSymbol ("Prelude","Nothing"))) (CVar (4,"mod"))) (CVar (6,"e"))))) (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CSymbol ("Prelude","null")) (CVar (7,"lds")))) (CSymbol ("Pretty","empty"))) (CApply (CApply (CSymbol ("Pretty","<+>")) (CApply (CApply (CSymbol ("Pretty","<>")) (CSymbol ("Pretty","line"))) (CApply (CSymbol ("Pretty","text")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'w'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'h'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]")))))))))) (CApply (CApply (CApply (CSymbol ("PrettyAbstract","localDeclsDoc")) (CVar (3,"pr"))) (CVar (4,"mod"))) (CVar (7,"lds")))))))] [],CRule [CPVar (8,"_"),CPVar (9,"_"),CPComb ("AbstractCurry","CLocalVar") [CPVar (10,"vn")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","$")) (CApply (CSymbol ("Pretty","hang")) (CLit (CIntc 1)))) (CApply (CApply (CSymbol ("Pretty","<+>")) (CApply (CSymbol ("PrettyAbstract","tvarDoc")) (CVar (10,"vn")))) (CApply (CSymbol ("Pretty","text")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'f'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]")))))))))] []]),
  CFunc ("PrettyAbstract","funcTypeDeclDoc") 3 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]) (CFuncType (CTCons ("AbstractCurry","CTypeExpr") []) (CTCons ("Pretty","Doc") [])))) (CRules CFlex [CRule [CPVar (0,"mod"),CPVar (1,"name"),CPVar (2,"typ")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("PrettyAbstract","def")) (CApply (CApply (CSymbol ("PrettyAbstract","qname")) (CVar (0,"mod"))) (CVar (1,"name")))) (CSymbol ("Prelude","[]"))) (CApply (CApply (CApply (CSymbol ("PrettyAbstract","funcTypeDoc")) (CVar (0,"mod"))) (CApply (CSymbol ("PrettyAbstract","argTypes")) (CVar (2,"typ")))) (CApply (CSymbol ("PrettyAbstract","resultType")) (CVar (2,"typ")))))] []]),
  CFunc ("PrettyAbstract","funcTypeDoc") 3 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("AbstractCurry","CTypeExpr") []]) (CFuncType (CTCons ("AbstractCurry","CTypeExpr") []) (CTCons ("Pretty","Doc") [])))) (CRules CFlex [CRule [CPVar (0,"mod"),CPVar (1,"args"),CPVar (2,"res")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CSymbol ("Pretty","fillEncloseSep")) (CSymbol ("PrettyAbstract","dcolon"))) (CSymbol ("Pretty","empty"))) (CApply (CApply (CSymbol ("Pretty","<>")) (CSymbol ("Pretty","space"))) (CSymbol ("PrettyAbstract","arrow")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude","map")) (CApply (CApply (CSymbol ("Prelude",".")) (CLambda [CPVar (3,"x0")] (CApply (CApply (CSymbol ("Pretty","<>")) (CSymbol ("Pretty","space"))) (CVar (3,"x0"))))) (CApply (CApply (CSymbol ("PrettyAbstract","typeExprDoc")) (CVar (0,"mod"))) (CLit (CIntc 1))))) (CVar (1,"args")))) (CApply (CApply (CSymbol ("Prelude","map")) (CApply (CApply (CSymbol ("Prelude",".")) (CLambda [CPVar (4,"x0")] (CApply (CApply (CSymbol ("Pretty","<>")) (CSymbol ("Pretty","space"))) (CVar (4,"x0"))))) (CApply (CApply (CSymbol ("PrettyAbstract","typeExprDoc")) (CVar (0,"mod"))) (CLit (CIntc 1))))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (2,"res"))) (CSymbol ("Prelude","[]"))))))] []]),
  CFunc ("PrettyAbstract","rulesDoc") 4 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]],CTCons ("Prelude","(,)") [CTCons ("AbstractCurry","CFixity") [],CTCons ("Prelude","Int") []]]]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]) (CFuncType (CTCons ("AbstractCurry","CRules") []) (CTCons ("Pretty","Doc") []))))) (CRules CFlex [CRule [CPVar (0,"pr"),CPVar (1,"mod"),CPVar (2,"name"),CPComb ("AbstractCurry","CRules") [CPVar (3,"_"),CPVar (4,"rules")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Pretty","vsep")) (CApply (CApply (CSymbol ("Prelude","map")) (CApply (CApply (CApply (CSymbol ("PrettyAbstract","ruleDoc")) (CVar (0,"pr"))) (CVar (1,"mod"))) (CVar (2,"name")))) (CVar (4,"rules"))))] [],CRule [CPVar (5,"_"),CPVar (6,"mod"),CPVar (7,"name"),CPComb ("AbstractCurry","CExternal") [CPVar (8,"_")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Pretty","<+>")) (CApply (CApply (CSymbol ("PrettyAbstract","qname")) (CVar (6,"mod"))) (CVar (7,"name")))) (CApply (CSymbol ("Pretty","text")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'x'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CSymbol ("Prelude","[]"))))))))))))] []]),
  CFunc ("PrettyAbstract","ruleDoc") 4 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]],CTCons ("Prelude","(,)") [CTCons ("AbstractCurry","CFixity") [],CTCons ("Prelude","Int") []]]]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]) (CFuncType (CTCons ("AbstractCurry","CRule") []) (CTCons ("Pretty","Doc") []))))) (CRules CFlex [CRule [CPVar (0,"pr"),CPVar (1,"mod"),CPVar (2,"name"),CPComb ("AbstractCurry","CRule") [CPVar (3,"patterns"),CPVar (4,"choices"),CPVar (5,"localDecls")]] [(CApply (CApply (CSymbol ("Prelude","==")) (CApply (CSymbol ("Prelude","fst")) (CApply (CSymbol ("Prelude","head")) (CVar (4,"choices"))))) (CApply (CSymbol ("AbstractCurry","CSymbol")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'P'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]")))))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CSymbol ("Prelude","[]"))))))))))),CApply (CApply (CSymbol ("Prelude","$")) (CApply (CSymbol ("Pretty","hang")) (CLit (CIntc 2)))) (CApply (CApply (CSymbol ("Pretty","<>")) (CApply (CApply (CSymbol ("Prelude","$")) (CSymbol ("Pretty","group"))) (CApply (CApply (CSymbol ("Pretty","hang")) (CLit (CIntc 2))) (CApply (CApply (CSymbol ("Pretty","<$>")) (CApply (CApply (CSymbol ("Pretty","<+>")) (CVar (6,"nameAndParam"))) (CSymbol ("Pretty","equals")))) (CApply (CSymbol ("Pretty","align")) (CApply (CApply (CApply (CApply (CApply (CSymbol ("PrettyAbstract","expDoc")) (CSymbol ("Prelude","unknown"))) (CVar (0,"pr"))) (CSymbol ("Prelude","Nothing"))) (CVar (1,"mod"))) (CApply (CSymbol ("Prelude","snd")) (CApply (CSymbol ("Prelude","head")) (CVar (4,"choices")))))))))) (CVar (8,"whereDoc")))),(CSymbol ("Prelude","otherwise"),CApply (CApply (CSymbol ("Pretty","hang")) (CLit (CIntc 2))) (CApply (CApply (CSymbol ("Pretty","<>")) (CApply (CApply (CSymbol ("Pretty","hang")) (CLit (CIntc 2))) (CApply (CApply (CSymbol ("Pretty","<$>")) (CVar (6,"nameAndParam"))) (CApply (CSymbol ("Pretty","align")) (CApply (CSymbol ("Pretty","vsep")) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("PrettyAbstract","choiceDoc"))) (CVar (4,"choices")))))))) (CVar (8,"whereDoc"))))] [CLocalPat (CPVar (6,"nameAndParam")) (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","&&")) (CApply (CSymbol ("PrettyAbstract","isInfixName")) (CVar (2,"name")))) (CApply (CApply (CSymbol ("Prelude","==")) (CApply (CSymbol ("Prelude","length")) (CVar (3,"patterns")))) (CLit (CIntc 2))))) (CApply (CApply (CSymbol ("Pretty","<+>")) (CApply (CApply (CSymbol ("Pretty","<+>")) (CApply (CApply (CSymbol ("PrettyAbstract","patternDoc")) (CVar (1,"mod"))) (CApply (CApply (CSymbol ("Prelude","!!")) (CVar (3,"patterns"))) (CLit (CIntc 0))))) (CApply (CSymbol ("Pretty","text")) (CApply (CSymbol ("Prelude","snd")) (CVar (2,"name")))))) (CApply (CApply (CSymbol ("PrettyAbstract","patternDoc")) (CVar (1,"mod"))) (CApply (CApply (CSymbol ("Prelude","!!")) (CVar (3,"patterns"))) (CLit (CIntc 1)))))) (CApply (CApply (CSymbol ("Pretty","<>")) (CApply (CApply (CSymbol ("PrettyAbstract","qname")) (CVar (1,"mod"))) (CVar (2,"name")))) (CVar (7,"paramDoc")))) [],CLocalPat (CPVar (7,"paramDoc")) (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CSymbol ("Prelude","null")) (CVar (3,"patterns")))) (CSymbol ("Pretty","empty"))) (CApply (CApply (CSymbol ("Pretty","<>")) (CSymbol ("Pretty","space"))) (CApply (CApply (CSymbol ("PrettyAbstract","patternsDoc")) (CVar (1,"mod"))) (CVar (3,"patterns"))))) [],CLocalFunc (CFunc ("PrettyAbstract","choiceDoc") 1 Private (CFuncType (CTCons ("Prelude","(,)") [CTCons ("AbstractCurry","CExpr") [],CTCons ("AbstractCurry","CExpr") []]) (CTCons ("Pretty","Doc") [])) (CRules CFlex [CRule [CPComb ("Prelude","(,)") [CPVar (9,"e1"),CPVar (10,"e2")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Pretty","<+>")) (CApply (CApply (CSymbol ("Pretty","<+>")) (CApply (CApply (CSymbol ("Pretty","<+>")) (CApply (CSymbol ("Pretty","text")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '|'))) (CSymbol ("Prelude","[]"))))) (CApply (CSymbol ("Pretty","align")) (CApply (CApply (CApply (CApply (CApply (CSymbol ("PrettyAbstract","expDoc")) (CSymbol ("Prelude","unknown"))) (CVar (0,"pr"))) (CSymbol ("Prelude","Nothing"))) (CVar (1,"mod"))) (CVar (9,"e1")))))) (CSymbol ("Pretty","equals")))) (CApply (CApply (CApply (CApply (CApply (CSymbol ("PrettyAbstract","expDoc")) (CSymbol ("Prelude","unknown"))) (CVar (0,"pr"))) (CSymbol ("Prelude","Nothing"))) (CVar (1,"mod"))) (CVar (10,"e2"))))] []])),CLocalPat (CPVar (8,"whereDoc")) (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CSymbol ("Prelude","null")) (CVar (5,"localDecls")))) (CSymbol ("Pretty","empty"))) (CApply (CApply (CSymbol ("Pretty","<+>")) (CApply (CApply (CSymbol ("Pretty","<>")) (CSymbol ("Pretty","line"))) (CApply (CSymbol ("Pretty","text")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'w'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'h'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]")))))))))) (CApply (CApply (CApply (CSymbol ("PrettyAbstract","localDeclsDoc")) (CVar (0,"pr"))) (CVar (1,"mod"))) (CVar (5,"localDecls"))))) []]]),
  CFunc ("PrettyAbstract","expDoc") 5 Private (CFuncType (CTCons ("Prelude","Bool") []) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]],CTCons ("Prelude","(,)") [CTCons ("AbstractCurry","CFixity") [],CTCons ("Prelude","Int") []]]]) (CFuncType (CTCons ("Prelude","Maybe") [CTCons ("Prelude","(,)") [CTCons ("AbstractCurry","CFixity") [],CTCons ("Prelude","Int") []]]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("AbstractCurry","CExpr") []) (CTCons ("Pretty","Doc") [])))))) (CRules CFlex [CRule [CPVar (0,"amILeft"),CPVar (1,"pr"),CPVar (2,"mPrec"),CPVar (3,"mod"),CPVar (4,"exp")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","maybe")) (CApply (CApply (CApply (CSymbol ("Prelude","maybe")) (CApply (CApply (CApply (CApply (CApply (CSymbol ("PrettyAbstract","expDoc2")) (CVar (0,"amILeft"))) (CVar (1,"pr"))) (CVar (2,"mPrec"))) (CVar (3,"mod"))) (CVar (4,"exp")))) (CLambda [CPVar (5,"l")] (CApply (CSymbol ("Pretty","list")) (CApply (CApply (CSymbol ("Prelude","map")) (CApply (CApply (CApply (CApply (CSymbol ("PrettyAbstract","expDoc")) (CSymbol ("Prelude","unknown"))) (CVar (1,"pr"))) (CSymbol ("Prelude","Nothing"))) (CVar (3,"mod")))) (CVar (5,"l")))))) (CApply (CSymbol ("PrettyAbstract","toList")) (CVar (4,"exp"))))) (CLambda [CPVar (6,"s")] (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CSymbol ("Prelude","null")) (CVar (6,"s")))) (CApply (CSymbol ("Pretty","text")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '['))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ']'))) (CSymbol ("Prelude","[]")))))) (CApply (CSymbol ("Pretty","dquotes")) (CApply (CSymbol ("Pretty","text")) (CVar (6,"s"))))))) (CApply (CSymbol ("PrettyAbstract","toString")) (CVar (4,"exp"))))] []]),
  CFunc ("PrettyAbstract","toList") 1 Private (CFuncType (CTCons ("AbstractCurry","CExpr") []) (CTCons ("Prelude","Maybe") [CTCons ("Prelude","[]") [CTCons ("AbstractCurry","CExpr") []]])) (CRules CFlex [CRule [CPVar (0,"exp")] [(CSymbol ("Prelude","success"),CCase (CVar (0,"exp")) [CBranch (CPComb ("AbstractCurry","CSymbol") [CPComb ("Prelude","(,)") [CPComb ("Prelude",":") [CPLit (CCharc 'P'),CPComb ("Prelude",":") [CPLit (CCharc 'r'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude",":") [CPLit (CCharc 'l'),CPComb ("Prelude",":") [CPLit (CCharc 'u'),CPComb ("Prelude",":") [CPLit (CCharc 'd'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude","[]") []]]]]]]],CPComb ("Prelude",":") [CPLit (CCharc '['),CPComb ("Prelude",":") [CPLit (CCharc ']'),CPComb ("Prelude","[]") []]]]]) (CApply (CSymbol ("Prelude","Just")) (CSymbol ("Prelude","[]"))),CBranch (CPComb ("AbstractCurry","CApply") [CPComb ("AbstractCurry","CApply") [CPComb ("AbstractCurry","CSymbol") [CPComb ("Prelude","(,)") [CPComb ("Prelude",":") [CPLit (CCharc 'P'),CPComb ("Prelude",":") [CPLit (CCharc 'r'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude",":") [CPLit (CCharc 'l'),CPComb ("Prelude",":") [CPLit (CCharc 'u'),CPComb ("Prelude",":") [CPLit (CCharc 'd'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude","[]") []]]]]]]],CPComb ("Prelude",":") [CPLit (CCharc ':'),CPComb ("Prelude","[]") []]]],CPVar (1,"x")],CPVar (2,"xs")]) (CApply (CApply (CSymbol ("Maybe",">>-")) (CApply (CSymbol ("PrettyAbstract","toList")) (CVar (2,"xs")))) (CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Prelude","Just"))) (CLambda [CPVar (3,"x0")] (CApply (CApply (CSymbol ("Prelude",":")) (CVar (1,"x"))) (CVar (3,"x0")))))),CBranch (CPVar (4,"_")) (CSymbol ("Prelude","Nothing"))])] []]),
  CFunc ("PrettyAbstract","toString") 1 Private (CFuncType (CTCons ("AbstractCurry","CExpr") []) (CTCons ("Prelude","Maybe") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]])) (CRules CFlex [CRule [CPVar (0,"exp")] [(CSymbol ("Prelude","success"),CCase (CVar (0,"exp")) [CBranch (CPComb ("AbstractCurry","CSymbol") [CPComb ("Prelude","(,)") [CPComb ("Prelude",":") [CPLit (CCharc 'P'),CPComb ("Prelude",":") [CPLit (CCharc 'r'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude",":") [CPLit (CCharc 'l'),CPComb ("Prelude",":") [CPLit (CCharc 'u'),CPComb ("Prelude",":") [CPLit (CCharc 'd'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude","[]") []]]]]]]],CPComb ("Prelude",":") [CPLit (CCharc '['),CPComb ("Prelude",":") [CPLit (CCharc ']'),CPComb ("Prelude","[]") []]]]]) (CApply (CSymbol ("Prelude","Just")) (CSymbol ("Prelude","[]"))),CBranch (CPComb ("AbstractCurry","CApply") [CPComb ("AbstractCurry","CApply") [CPComb ("AbstractCurry","CSymbol") [CPComb ("Prelude","(,)") [CPComb ("Prelude",":") [CPLit (CCharc 'P'),CPComb ("Prelude",":") [CPLit (CCharc 'r'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude",":") [CPLit (CCharc 'l'),CPComb ("Prelude",":") [CPLit (CCharc 'u'),CPComb ("Prelude",":") [CPLit (CCharc 'd'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude","[]") []]]]]]]],CPComb ("Prelude",":") [CPLit (CCharc ':'),CPComb ("Prelude","[]") []]]],CPComb ("AbstractCurry","CLit") [CPComb ("AbstractCurry","CCharc") [CPVar (1,"c")]]],CPVar (2,"cs")]) (CApply (CApply (CSymbol ("Maybe",">>-")) (CApply (CSymbol ("PrettyAbstract","toString")) (CVar (2,"cs")))) (CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Prelude","Just"))) (CLambda [CPVar (3,"x0")] (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("PrettyAbstract","quoteChar")) (CVar (1,"c")))) (CVar (3,"x0")))))),CBranch (CPVar (4,"_")) (CSymbol ("Prelude","Nothing"))])] []]),
  CFunc ("PrettyAbstract","expDoc2") 5 Private (CFuncType (CTCons ("Prelude","Bool") []) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]],CTCons ("Prelude","(,)") [CTCons ("AbstractCurry","CFixity") [],CTCons ("Prelude","Int") []]]]) (CFuncType (CTCons ("Prelude","Maybe") [CTCons ("Prelude","(,)") [CTCons ("AbstractCurry","CFixity") [],CTCons ("Prelude","Int") []]]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("AbstractCurry","CExpr") []) (CTCons ("Pretty","Doc") [])))))) (CRules CFlex [CRule [CPVar (0,"_"),CPVar (1,"_"),CPVar (2,"mPrec"),CPVar (3,"_"),CPComb ("AbstractCurry","CVar") [CPVar (4,"n")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Pretty","<>")) (CApply (CApply (CSymbol ("PrettyAbstract","showPrecs")) (CVar (4,"n"))) (CVar (2,"mPrec")))) (CApply (CSymbol ("PrettyAbstract","varDoc")) (CVar (4,"n"))))] [],CRule [CPVar (5,"_"),CPVar (6,"_"),CPVar (7,"mPrec"),CPVar (8,"_"),CPComb ("AbstractCurry","CLit") [CPVar (9,"l")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Pretty","<>")) (CApply (CApply (CSymbol ("PrettyAbstract","showPrecs")) (CVar (9,"l"))) (CVar (7,"mPrec")))) (CApply (CSymbol ("PrettyAbstract","litDoc")) (CVar (9,"l"))))] [],CRule [CPVar (10,"_"),CPVar (11,"_"),CPVar (12,"mPrec"),CPVar (13,"mod"),CPComb ("AbstractCurry","CSymbol") [CPVar (14,"qn")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Pretty","<>")) (CApply (CApply (CSymbol ("PrettyAbstract","showPrecs")) (CVar (14,"qn"))) (CVar (12,"mPrec")))) (CApply (CApply (CSymbol ("PrettyAbstract","qname")) (CVar (13,"mod"))) (CVar (14,"qn"))))] [],CRule [CPVar (15,"_"),CPVar (16,"pr"),CPVar (17,"mPrec"),CPVar (18,"mod"),CPComb ("AbstractCurry","CLetDecl") [CPVar (19,"bs"),CPVar (20,"e")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","$")) (CApply (CSymbol ("PrettyAbstract","par")) (CVar (17,"mPrec")))) (CApply (CApply (CSymbol ("Prelude","$")) (CApply (CSymbol ("Pretty","hang")) (CLit (CIntc 1)))) (CApply (CApply (CSymbol ("Pretty","<+>")) (CApply (CApply (CSymbol ("Pretty","<$>")) (CApply (CApply (CSymbol ("Pretty","<+>")) (CApply (CSymbol ("Pretty","text")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CSymbol ("Prelude","[]"))))))) (CApply (CApply (CApply (CSymbol ("PrettyAbstract","localDeclsDoc")) (CVar (16,"pr"))) (CVar (18,"mod"))) (CVar (19,"bs"))))) (CApply (CSymbol ("Pretty","text")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CSymbol ("Prelude","[]"))))))) (CApply (CApply (CApply (CApply (CApply (CSymbol ("PrettyAbstract","expDoc")) (CSymbol ("Prelude","unknown"))) (CVar (16,"pr"))) (CSymbol ("Prelude","Nothing"))) (CVar (18,"mod"))) (CVar (20,"e"))))))] [],CRule [CPVar (21,"_"),CPVar (22,"pr"),CPVar (23,"mPrec"),CPVar (24,"mod"),CPComb ("AbstractCurry","CCase") [CPVar (25,"e"),CPVar (26,"bs")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","$")) (CApply (CSymbol ("PrettyAbstract","par")) (CVar (23,"mPrec")))) (CApply (CApply (CSymbol ("Prelude","$")) (CApply (CSymbol ("Pretty","hang")) (CLit (CIntc 1)))) (CApply (CApply (CSymbol ("Pretty","<$>")) (CApply (CApply (CSymbol ("Pretty","<+>")) (CApply (CApply (CSymbol ("Pretty","<+>")) (CApply (CSymbol ("Pretty","text")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]")))))))) (CApply (CSymbol ("Pretty","align")) (CApply (CApply (CApply (CApply (CApply (CSymbol ("PrettyAbstract","expDoc")) (CSymbol ("Prelude","unknown"))) (CVar (22,"pr"))) (CSymbol ("Prelude","Nothing"))) (CVar (24,"mod"))) (CVar (25,"e")))))) (CApply (CSymbol ("Pretty","text")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'f'))) (CSymbol ("Prelude","[]"))))))) (CApply (CSymbol ("PrettyAbstract","layout")) (CApply (CApply (CSymbol ("Prelude","map")) (CApply (CApply (CSymbol ("PrettyAbstract","branchDoc")) (CVar (22,"pr"))) (CVar (24,"mod")))) (CVar (26,"bs")))))))] [],CRule [CPVar (27,"_"),CPVar (28,"pr"),CPVar (29,"mPrec"),CPVar (30,"mod"),CPComb ("AbstractCurry","CLambda") [CPVar (31,"ps"),CPVar (32,"e")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","$")) (CApply (CSymbol ("PrettyAbstract","par")) (CVar (29,"mPrec")))) (CApply (CApply (CSymbol ("Prelude","$")) (CApply (CSymbol ("Pretty","hang")) (CLit (CIntc 1)))) (CApply (CApply (CSymbol ("Pretty","<+>")) (CApply (CApply (CSymbol ("Pretty","<+>")) (CApply (CApply (CSymbol ("Pretty","<+>")) (CSymbol ("Pretty","backslash"))) (CApply (CApply (CSymbol ("PrettyAbstract","patternsDoc")) (CVar (30,"mod"))) (CVar (31,"ps"))))) (CSymbol ("PrettyAbstract","arrow")))) (CApply (CApply (CApply (CApply (CApply (CSymbol ("PrettyAbstract","expDoc")) (CSymbol ("Prelude","unknown"))) (CVar (28,"pr"))) (CSymbol ("Prelude","Nothing"))) (CVar (30,"mod"))) (CVar (32,"e"))))))] [],CRule [CPVar (33,"amILeft"),CPVar (34,"pr"),CPVar (35,"mPrec"),CPVar (36,"mod"),CPComb ("AbstractCurry","CApply") [CPVar (37,"e1"),CPVar (38,"e2")]] [(CApply (CApply (CApply (CSymbol ("Prelude","maybe")) (CSymbol ("Prelude","False"))) (CSymbol ("PrettyAbstract","isTupleName"))) (CVar (41,"mfname")),CApply (CSymbol ("Pretty","tupled")) (CApply (CApply (CSymbol ("Prelude","map")) (CApply (CApply (CApply (CApply (CSymbol ("PrettyAbstract","expDoc")) (CSymbol ("Prelude","unknown"))) (CVar (34,"pr"))) (CSymbol ("Prelude","Nothing"))) (CVar (36,"mod")))) (CVar (42,"fargs")))),(CApply (CApply (CSymbol ("Prelude","&&")) (CApply (CApply (CApply (CSymbol ("Prelude","maybe")) (CSymbol ("Prelude","False"))) (CSymbol ("PrettyAbstract","isInfixName"))) (CVar (41,"mfname")))) (CApply (CApply (CSymbol ("Prelude","==")) (CApply (CSymbol ("Prelude","length")) (CVar (42,"fargs")))) (CLit (CIntc 2))),CApply (CApply (CSymbol ("Pretty","<>")) (CApply (CApply (CSymbol ("PrettyAbstract","showPrecs")) (CApply (CSymbol ("Prelude","snd")) (CVar (40,"fname")))) (CApply (CApply (CApply (CSymbol ("Prelude","(,,)")) (CVar (33,"amILeft"))) (CVar (45,"pOp"))) (CVar (35,"mPrec"))))) (CApply (CApply (CSymbol ("Prelude","$")) (CSymbol ("Pretty","align"))) (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CSymbol ("PrettyAbstract","precFillEncloseSep")) (CVar (33,"amILeft"))) (CVar (45,"pOp"))) (CVar (35,"mPrec"))) (CVar (43,"lbr"))) (CVar (44,"rbr"))) (CSymbol ("Pretty","empty"))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CApply (CApply (CApply (CSymbol ("PrettyAbstract","expDoc")) (CSymbol ("Prelude","True"))) (CVar (34,"pr"))) (CApply (CSymbol ("Prelude","Just")) (CVar (45,"pOp")))) (CVar (36,"mod"))) (CApply (CApply (CSymbol ("Prelude","!!")) (CVar (42,"fargs"))) (CLit (CIntc 0))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Pretty","<>")) (CSymbol ("Pretty","space"))) (CApply (CSymbol ("Pretty","text")) (CApply (CSymbol ("Prelude","snd")) (CVar (40,"fname")))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Pretty","<>")) (CSymbol ("Pretty","space"))) (CApply (CApply (CApply (CApply (CApply (CSymbol ("PrettyAbstract","expDoc")) (CSymbol ("Prelude","False"))) (CVar (34,"pr"))) (CApply (CSymbol ("Prelude","Just")) (CVar (45,"pOp")))) (CVar (36,"mod"))) (CApply (CApply (CSymbol ("Prelude","!!")) (CVar (42,"fargs"))) (CLit (CIntc 1)))))) (CSymbol ("Prelude","[]")))))))),(CApply (CApply (CSymbol ("Prelude","&&")) (CApply (CApply (CApply (CSymbol ("Prelude","maybe")) (CSymbol ("Prelude","False"))) (CSymbol ("PrettyAbstract","isInfixName"))) (CVar (41,"mfname")))) (CApply (CApply (CSymbol ("Prelude",">")) (CApply (CSymbol ("Prelude","length")) (CVar (42,"fargs")))) (CLit (CIntc 2))),CApply (CApply (CSymbol ("Prelude","$")) (CApply (CApply (CSymbol ("PrettyAbstract","appPar")) (CSymbol ("Prelude","True"))) (CVar (35,"mPrec")))) (CApply (CApply (CSymbol ("PrettyAbstract","app")) (CApply (CApply (CApply (CApply (CSymbol ("Pretty","fillEncloseSep")) (CSymbol ("Pretty","lparen"))) (CSymbol ("Pretty","rparen"))) (CSymbol ("Pretty","empty"))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CApply (CApply (CApply (CSymbol ("PrettyAbstract","expDoc")) (CSymbol ("Prelude","True"))) (CVar (34,"pr"))) (CApply (CSymbol ("Prelude","Just")) (CVar (45,"pOp")))) (CVar (36,"mod"))) (CApply (CApply (CSymbol ("Prelude","!!")) (CVar (42,"fargs"))) (CLit (CIntc 0))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Pretty","<>")) (CSymbol ("Pretty","space"))) (CApply (CSymbol ("Pretty","text")) (CApply (CSymbol ("Prelude","snd")) (CVar (40,"fname")))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Pretty","<>")) (CSymbol ("Pretty","space"))) (CApply (CApply (CApply (CApply (CApply (CSymbol ("PrettyAbstract","expDoc")) (CSymbol ("Prelude","False"))) (CVar (34,"pr"))) (CApply (CSymbol ("Prelude","Just")) (CVar (45,"pOp")))) (CVar (36,"mod"))) (CApply (CApply (CSymbol ("Prelude","!!")) (CVar (42,"fargs"))) (CLit (CIntc 1)))))) (CSymbol ("Prelude","[]"))))))) (CApply (CApply (CSymbol ("Prelude","map")) (CApply (CApply (CApply (CApply (CSymbol ("PrettyAbstract","expDoc")) (CSymbol ("Prelude","False"))) (CVar (34,"pr"))) (CApply (CSymbol ("Prelude","Just")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CSymbol ("Prelude","unknown"))) (CLit (CIntc 11))))) (CVar (36,"mod")))) (CApply (CApply (CSymbol ("Prelude","drop")) (CLit (CIntc 2))) (CVar (42,"fargs")))))),(CApply (CApply (CSymbol ("Prelude","&&")) (CApply (CApply (CApply (CSymbol ("Prelude","maybe")) (CSymbol ("Prelude","False"))) (CLambda [CPVar (49,"x0")] (CApply (CApply (CSymbol ("Prelude","==")) (CVar (49,"x0"))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'P'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]")))))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'f'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '_'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'h'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '_'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]")))))))))))))))))) (CVar (41,"mfname")))) (CApply (CApply (CSymbol ("Prelude","==")) (CApply (CSymbol ("Prelude","length")) (CVar (42,"fargs")))) (CLit (CIntc 3))),CApply (CApply (CSymbol ("Prelude","$")) (CApply (CSymbol ("PrettyAbstract","par")) (CVar (35,"mPrec")))) (CApply (CApply (CSymbol ("Prelude","$")) (CApply (CSymbol ("Pretty","hang")) (CLit (CIntc 1)))) (CVar (39,"ifThenElse")))),(CApply (CApply (CSymbol ("Prelude","&&")) (CApply (CApply (CApply (CSymbol ("Prelude","maybe")) (CSymbol ("Prelude","False"))) (CLambda [CPVar (50,"x0")] (CApply (CApply (CSymbol ("Prelude","==")) (CVar (50,"x0"))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'P'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]")))))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'f'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '_'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'h'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '_'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]")))))))))))))))))) (CVar (41,"mfname")))) (CApply (CApply (CSymbol ("Prelude",">")) (CApply (CSymbol ("Prelude","length")) (CVar (42,"fargs")))) (CLit (CIntc 3))),CApply (CApply (CSymbol ("Prelude","$")) (CApply (CApply (CSymbol ("PrettyAbstract","appPar")) (CSymbol ("Prelude","True"))) (CVar (35,"mPrec")))) (CApply (CApply (CSymbol ("Prelude","$")) (CApply (CSymbol ("Pretty","hang")) (CLit (CIntc 1)))) (CApply (CApply (CSymbol ("PrettyAbstract","app")) (CApply (CSymbol ("Pretty","parens")) (CVar (39,"ifThenElse")))) (CApply (CApply (CSymbol ("Prelude","map")) (CApply (CApply (CApply (CApply (CSymbol ("PrettyAbstract","expDoc")) (CSymbol ("Prelude","False"))) (CVar (34,"pr"))) (CApply (CSymbol ("Prelude","Just")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CSymbol ("Prelude","unknown"))) (CLit (CIntc 11))))) (CVar (36,"mod")))) (CApply (CApply (CSymbol ("Prelude","drop")) (CLit (CIntc 3))) (CVar (42,"fargs"))))))),(CSymbol ("Prelude","otherwise"),CApply (CApply (CSymbol ("Pretty","<>")) (CApply (CApply (CSymbol ("PrettyAbstract","showPrecs")) (CApply (CSymbol ("PrettyAbstract","name")) (CApply (CApply (CSymbol ("AbstractCurry","CApply")) (CVar (37,"e1"))) (CVar (38,"e2"))))) (CVar (35,"mPrec")))) (CApply (CApply (CSymbol ("Prelude","$")) (CApply (CApply (CSymbol ("PrettyAbstract","appPar")) (CApply (CSymbol ("Prelude","not")) (CApply (CSymbol ("Prelude","null")) (CVar (42,"fargs"))))) (CVar (35,"mPrec")))) (CApply (CApply (CSymbol ("PrettyAbstract","app")) (CApply (CApply (CApply (CApply (CApply (CSymbol ("PrettyAbstract","expDoc")) (CSymbol ("Prelude","False"))) (CVar (34,"pr"))) (CApply (CSymbol ("Prelude","Just")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CSymbol ("Prelude","unknown"))) (CLit (CIntc 11))))) (CVar (36,"mod"))) (CApply (CSymbol ("PrettyAbstract","name")) (CApply (CApply (CSymbol ("AbstractCurry","CApply")) (CVar (37,"e1"))) (CVar (38,"e2")))))) (CApply (CApply (CSymbol ("Prelude","map")) (CApply (CApply (CApply (CApply (CSymbol ("PrettyAbstract","expDoc")) (CSymbol ("Prelude","False"))) (CVar (34,"pr"))) (CApply (CSymbol ("Prelude","Just")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CSymbol ("Prelude","unknown"))) (CLit (CIntc 11))))) (CVar (36,"mod")))) (CVar (42,"fargs"))))))] [CLocalFunc (CFunc ("PrettyAbstract","appPar") 2 Private (CFuncType (CTCons ("Prelude","Bool") []) (CFuncType (CTCons ("Prelude","Maybe") [CTCons ("Prelude","(,)") [CTVar (0,"a"),CTCons ("Prelude","Int") []]]) (CFuncType (CTCons ("Pretty","Doc") []) (CTCons ("Pretty","Doc") [])))) (CRules CFlex [CRule [CPVar (46,"_"),CPComb ("Prelude","Nothing") []] [(CSymbol ("Prelude","success"),CSymbol ("Prelude","id"))] [],CRule [CPVar (47,"br"),CPComb ("Prelude","Just") [CPVar (48,"fNp")]] [(CApply (CApply (CSymbol ("Prelude","&&")) (CApply (CApply (CSymbol ("Prelude","==")) (CApply (CSymbol ("Prelude","snd")) (CVar (48,"fNp")))) (CLit (CIntc 11)))) (CVar (47,"br")),CSymbol ("Pretty","parens")),(CSymbol ("Prelude","otherwise"),CSymbol ("Prelude","id"))] []])),CLocalPat (CPVar (39,"ifThenElse")) (CApply (CApply (CSymbol ("Pretty","<+>")) (CApply (CApply (CSymbol ("Pretty","<$>")) (CApply (CApply (CSymbol ("Pretty","<+>")) (CApply (CApply (CSymbol ("Pretty","<$>")) (CApply (CApply (CSymbol ("Pretty","<+>")) (CApply (CSymbol ("Pretty","text")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'f'))) (CSymbol ("Prelude","[]")))))) (CApply (CSymbol ("Pretty","align")) (CApply (CApply (CApply (CApply (CApply (CSymbol ("PrettyAbstract","expDoc")) (CSymbol ("Prelude","unknown"))) (CVar (34,"pr"))) (CSymbol ("Prelude","Nothing"))) (CVar (36,"mod"))) (CApply (CApply (CSymbol ("Prelude","!!")) (CVar (42,"fargs"))) (CLit (CIntc 0))))))) (CApply (CSymbol ("Pretty","text")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'h'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CSymbol ("Prelude","[]"))))))))) (CApply (CSymbol ("Pretty","align")) (CApply (CApply (CApply (CApply (CApply (CSymbol ("PrettyAbstract","expDoc")) (CSymbol ("Prelude","unknown"))) (CVar (34,"pr"))) (CSymbol ("Prelude","Nothing"))) (CVar (36,"mod"))) (CApply (CApply (CSymbol ("Prelude","!!")) (CVar (42,"fargs"))) (CLit (CIntc 1))))))) (CApply (CSymbol ("Pretty","text")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]"))))))))) (CApply (CSymbol ("Pretty","align")) (CApply (CApply (CApply (CApply (CApply (CSymbol ("PrettyAbstract","expDoc")) (CSymbol ("Prelude","unknown"))) (CVar (34,"pr"))) (CSymbol ("Prelude","Nothing"))) (CVar (36,"mod"))) (CApply (CApply (CSymbol ("Prelude","!!")) (CVar (42,"fargs"))) (CLit (CIntc 2)))))) [],CLocalPat (CPVar (40,"fname")) (CApply (CApply (CApply (CSymbol ("Prelude","maybe")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CSymbol ("Prelude","[]"))) (CSymbol ("Prelude","[]")))) (CSymbol ("Prelude","id"))) (CVar (41,"mfname"))) [],CLocalPat (CPVar (41,"mfname")) (CCase (CApply (CSymbol ("PrettyAbstract","name")) (CApply (CApply (CSymbol ("AbstractCurry","CApply")) (CVar (37,"e1"))) (CVar (38,"e2")))) [CBranch (CPComb ("AbstractCurry","CSymbol") [CPVar (46,"qn")]) (CApply (CSymbol ("Prelude","Just")) (CVar (46,"qn"))),CBranch (CPVar (47,"_")) (CSymbol ("Prelude","Nothing"))]) [],CLocalPat (CPVar (42,"fargs")) (CApply (CSymbol ("PrettyAbstract","args")) (CApply (CApply (CSymbol ("AbstractCurry","CApply")) (CVar (37,"e1"))) (CVar (38,"e2")))) [],CLocalFunc (CFunc ("PrettyAbstract","name") 1 Private (CFuncType (CTCons ("AbstractCurry","CExpr") []) (CTCons ("AbstractCurry","CExpr") [])) (CRules CFlex [CRule [CPVar (48,"e")] [(CSymbol ("Prelude","success"),CCase (CVar (48,"e")) [CBranch (CPComb ("AbstractCurry","CApply") [CPVar (49,"e'"),CPVar (50,"_")]) (CApply (CSymbol ("PrettyAbstract","name")) (CVar (49,"e'"))),CBranch (CPVar (51,"_")) (CVar (48,"e"))])] []])),CLocalFunc (CFunc ("PrettyAbstract","args") 1 Private (CFuncType (CTCons ("AbstractCurry","CExpr") []) (CTCons ("Prelude","[]") [CTCons ("AbstractCurry","CExpr") []])) (CRules CFlex [CRule [CPVar (48,"e")] [(CSymbol ("Prelude","success"),CCase (CVar (48,"e")) [CBranch (CPComb ("AbstractCurry","CApply") [CPVar (49,"e1'"),CPVar (50,"e2'")]) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("PrettyAbstract","args")) (CVar (49,"e1'")))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (50,"e2'"))) (CSymbol ("Prelude","[]")))),CBranch (CPVar (51,"_")) (CSymbol ("Prelude","[]"))])] []])),CLocalPat (CPComb ("Prelude","(,)") [CPVar (43,"lbr"),CPVar (44,"rbr")]) (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CSymbol ("Maybe","isJust")) (CVar (35,"mPrec")))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CSymbol ("Pretty","lparen"))) (CSymbol ("Pretty","rparen")))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CSymbol ("Pretty","empty"))) (CSymbol ("Pretty","empty")))) [],CLocalPat (CPVar (45,"pOp")) (CCase (CApply (CApply (CSymbol ("Prelude","lookup")) (CVar (40,"fname"))) (CVar (34,"pr"))) [CBranch (CPComb ("Prelude","Just") [CPVar (48,"p'")]) (CVar (48,"p'")),CBranch (CPComb ("Prelude","Nothing") []) (CApply (CApply (CSymbol ("Prelude","(,)")) (CSymbol ("AbstractCurry","CInfixlOp"))) (CLit (CIntc 9)))]) []],CRule [CPVar (51,"_"),CPVar (52,"pr"),CPVar (53,"mPrec"),CPVar (54,"mod"),CPComb ("AbstractCurry","CDoExpr") [CPVar (55,"stms")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","$")) (CApply (CSymbol ("PrettyAbstract","par")) (CVar (53,"mPrec")))) (CApply (CApply (CSymbol ("Pretty","<+>")) (CApply (CSymbol ("Pretty","text")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CSymbol ("Prelude","[]")))))) (CApply (CSymbol ("PrettyAbstract","layout")) (CApply (CApply (CSymbol ("Prelude","map")) (CApply (CApply (CSymbol ("PrettyAbstract","statementDoc")) (CVar (52,"pr"))) (CVar (54,"mod")))) (CVar (55,"stms"))))))] [],CRule [CPVar (56,"_"),CPVar (57,"pr"),CPVar (58,"_"),CPVar (59,"mod"),CPComb ("AbstractCurry","CListComp") [CPVar (60,"e"),CPVar (61,"stms")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","$")) (CSymbol ("Pretty","brackets"))) (CApply (CApply (CSymbol ("Pretty","<+>")) (CApply (CApply (CSymbol ("Pretty","<+>")) (CApply (CApply (CApply (CApply (CApply (CSymbol ("PrettyAbstract","expDoc")) (CSymbol ("Prelude","unknown"))) (CVar (57,"pr"))) (CSymbol ("Prelude","Nothing"))) (CVar (59,"mod"))) (CVar (60,"e")))) (CApply (CSymbol ("Pretty","text")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '|'))) (CSymbol ("Prelude","[]")))))) (CApply (CApply (CApply (CApply (CSymbol ("Pretty","encloseSep")) (CSymbol ("Pretty","empty"))) (CSymbol ("Pretty","empty"))) (CSymbol ("Pretty","comma"))) (CApply (CApply (CSymbol ("Prelude","map")) (CApply (CApply (CSymbol ("PrettyAbstract","statementDoc")) (CVar (57,"pr"))) (CVar (59,"mod")))) (CVar (61,"stms"))))))] []]),
  CFunc ("PrettyAbstract","statementDoc") 3 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]],CTCons ("Prelude","(,)") [CTCons ("AbstractCurry","CFixity") [],CTCons ("Prelude","Int") []]]]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("AbstractCurry","CStatement") []) (CTCons ("Pretty","Doc") [])))) (CRules CFlex [CRule [CPVar (0,"pr"),CPVar (1,"mod"),CPComb ("AbstractCurry","CSExpr") [CPVar (2,"e")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","$")) (CApply (CSymbol ("Pretty","hang")) (CLit (CIntc 1)))) (CApply (CApply (CApply (CApply (CApply (CSymbol ("PrettyAbstract","expDoc")) (CSymbol ("Prelude","False"))) (CVar (0,"pr"))) (CSymbol ("Prelude","Nothing"))) (CVar (1,"mod"))) (CVar (2,"e"))))] [],CRule [CPVar (3,"pr"),CPVar (4,"mod"),CPComb ("AbstractCurry","CSPat") [CPVar (5,"p"),CPVar (6,"e")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","$")) (CApply (CSymbol ("Pretty","hang")) (CLit (CIntc 1)))) (CApply (CApply (CSymbol ("Pretty","<+>")) (CApply (CApply (CSymbol ("Pretty","<+>")) (CApply (CApply (CSymbol ("PrettyAbstract","patternDoc")) (CVar (4,"mod"))) (CVar (5,"p")))) (CApply (CSymbol ("Pretty","text")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '<'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '-'))) (CSymbol ("Prelude","[]"))))))) (CApply (CApply (CApply (CApply (CApply (CSymbol ("PrettyAbstract","expDoc")) (CSymbol ("Prelude","False"))) (CVar (3,"pr"))) (CSymbol ("Prelude","Nothing"))) (CVar (4,"mod"))) (CVar (6,"e")))))] [],CRule [CPVar (7,"pr"),CPVar (8,"mod"),CPComb ("AbstractCurry","CSLet") [CPVar (9,"localDecls")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Pretty","<+>")) (CApply (CSymbol ("Pretty","text")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CSymbol ("Prelude","[]"))))))) (CApply (CApply (CApply (CSymbol ("PrettyAbstract","localDeclsDoc")) (CVar (7,"pr"))) (CVar (8,"mod"))) (CVar (9,"localDecls"))))] []]),
  CFunc ("PrettyAbstract","branchDoc") 3 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]],CTCons ("Prelude","(,)") [CTCons ("AbstractCurry","CFixity") [],CTCons ("Prelude","Int") []]]]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("AbstractCurry","CBranchExpr") []) (CTCons ("Pretty","Doc") [])))) (CRules CFlex [CRule [CPVar (0,"pr"),CPVar (1,"mod"),CPComb ("AbstractCurry","CBranch") [CPVar (2,"pat"),CPVar (3,"e")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("PrettyAbstract","def")) (CApply (CApply (CSymbol ("Pretty","<+>")) (CApply (CApply (CSymbol ("PrettyAbstract","patternDoc")) (CVar (1,"mod"))) (CVar (2,"pat")))) (CSymbol ("PrettyAbstract","arrow")))) (CSymbol ("Prelude","[]"))) (CApply (CSymbol ("Pretty","align")) (CApply (CApply (CApply (CApply (CApply (CSymbol ("PrettyAbstract","expDoc")) (CSymbol ("Prelude","False"))) (CVar (0,"pr"))) (CSymbol ("Prelude","Nothing"))) (CVar (1,"mod"))) (CVar (3,"e")))))] []]),
  CFunc ("PrettyAbstract","patternsDoc") 1 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("AbstractCurry","CPattern") []]) (CTCons ("Pretty","Doc") []))) (CRules CFlex [CRule [CPVar (0,"mod")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Pretty","align"))) (CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Pretty","fillSep"))) (CApply (CSymbol ("Prelude","map")) (CApply (CSymbol ("PrettyAbstract","patternDoc")) (CVar (0,"mod"))))))] []]),
  CFunc ("PrettyAbstract","patternDoc") 2 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("AbstractCurry","CPattern") []) (CTCons ("Pretty","Doc") []))) (CRules CFlex [CRule [CPVar (0,"_"),CPComb ("AbstractCurry","CPVar") [CPVar (1,"vname")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("PrettyAbstract","tvarDoc")) (CVar (1,"vname")))] [],CRule [CPVar (2,"_"),CPComb ("AbstractCurry","CPLit") [CPVar (3,"l")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("PrettyAbstract","litDoc")) (CVar (3,"l")))] [],CRule [CPVar (4,"mod"),CPAs (7,"cpc") (CPComb ("AbstractCurry","CPComb") [CPVar (5,"qn"),CPVar (6,"pns")])] [(CApply (CSymbol ("Maybe","isJust")) (CVar (11,"mStringPatt")),CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CSymbol ("Prelude","null")) (CVar (13,"stringPatt")))) (CApply (CSymbol ("Pretty","text")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '['))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ']'))) (CSymbol ("Prelude","[]")))))) (CApply (CSymbol ("Pretty","dquotes")) (CApply (CSymbol ("Pretty","text")) (CVar (13,"stringPatt"))))),(CApply (CSymbol ("Maybe","isJust")) (CVar (10,"mListPatt")),CApply (CVar (8,"listDoc")) (CApply (CApply (CSymbol ("Prelude","map")) (CApply (CSymbol ("PrettyAbstract","patternDoc")) (CVar (4,"mod")))) (CVar (12,"listPatt")))),(CApply (CSymbol ("Prelude","null")) (CVar (6,"pns")),CApply (CApply (CSymbol ("PrettyAbstract","qname")) (CVar (4,"mod"))) (CVar (5,"qn"))),(CApply (CSymbol ("PrettyAbstract","isTupleName")) (CVar (5,"qn")),CApply (CVar (9,"tupleDoc")) (CApply (CApply (CSymbol ("Prelude","map")) (CApply (CSymbol ("PrettyAbstract","patternDoc")) (CVar (4,"mod")))) (CVar (6,"pns")))),(CApply (CApply (CSymbol ("Prelude","&&")) (CApply (CSymbol ("PrettyAbstract","isInfixName")) (CVar (5,"qn")))) (CApply (CApply (CSymbol ("Prelude","==")) (CApply (CSymbol ("Prelude","length")) (CVar (6,"pns")))) (CLit (CIntc 2))),CApply (CApply (CSymbol ("Prelude","$")) (CSymbol ("Pretty","parens"))) (CApply (CApply (CSymbol ("Pretty","<+>")) (CApply (CApply (CSymbol ("Pretty","<+>")) (CApply (CApply (CSymbol ("PrettyAbstract","patternDoc")) (CVar (4,"mod"))) (CApply (CApply (CSymbol ("Prelude","!!")) (CVar (6,"pns"))) (CLit (CIntc 0))))) (CApply (CSymbol ("Pretty","text")) (CApply (CSymbol ("Prelude","snd")) (CVar (5,"qn")))))) (CApply (CApply (CSymbol ("PrettyAbstract","patternDoc")) (CVar (4,"mod"))) (CApply (CApply (CSymbol ("Prelude","!!")) (CVar (6,"pns"))) (CLit (CIntc 1)))))),(CSymbol ("Prelude","otherwise"),CApply (CSymbol ("Pretty","parens")) (CApply (CApply (CSymbol ("Pretty","<+>")) (CApply (CApply (CSymbol ("PrettyAbstract","qname")) (CVar (4,"mod"))) (CVar (5,"qn")))) (CApply (CSymbol ("Pretty","group")) (CApply (CApply (CSymbol ("Pretty","hang")) (CLit (CIntc 0))) (CApply (CSymbol ("Pretty","vsep")) (CApply (CApply (CSymbol ("Prelude","map")) (CApply (CSymbol ("PrettyAbstract","patternDoc")) (CVar (4,"mod")))) (CVar (6,"pns"))))))))] [CLocalPat (CPVar (8,"listDoc")) (CApply (CApply (CApply (CSymbol ("Pretty","fillEncloseSep")) (CSymbol ("Pretty","lbracket"))) (CSymbol ("Pretty","rbracket"))) (CApply (CApply (CSymbol ("Pretty","<>")) (CSymbol ("Pretty","space"))) (CSymbol ("Pretty","comma")))) [],CLocalPat (CPVar (9,"tupleDoc")) (CApply (CApply (CApply (CSymbol ("Pretty","fillEncloseSep")) (CSymbol ("Pretty","lparen"))) (CSymbol ("Pretty","rparen"))) (CApply (CApply (CSymbol ("Pretty","<>")) (CSymbol ("Pretty","space"))) (CSymbol ("Pretty","comma")))) [],CLocalPat (CPVar (10,"mListPatt")) (CApply (CSymbol ("PrettyAbstract","toListPattern")) (CVar (7,"cpc"))) [],CLocalPat (CPVar (11,"mStringPatt")) (CApply (CSymbol ("PrettyAbstract","toStringPattern")) (CVar (7,"cpc"))) [],CLocalPat (CPVar (12,"listPatt")) (CApply (CSymbol ("Maybe","fromJust")) (CVar (10,"mListPatt"))) [],CLocalPat (CPVar (13,"stringPatt")) (CApply (CSymbol ("Maybe","fromJust")) (CVar (11,"mStringPatt"))) []],CRule [CPVar (14,"mod"),CPComb ("AbstractCurry","CPAs") [CPVar (15,"vn"),CPVar (16,"p")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Pretty","<>")) (CApply (CApply (CSymbol ("Pretty","<>")) (CApply (CSymbol ("PrettyAbstract","tvarDoc")) (CVar (15,"vn")))) (CApply (CSymbol ("Pretty","text")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '@'))) (CSymbol ("Prelude","[]")))))) (CApply (CApply (CSymbol ("PrettyAbstract","patternDoc")) (CVar (14,"mod"))) (CVar (16,"p"))))] [],CRule [CPVar (17,"mod"),CPComb ("AbstractCurry","CPFuncComb") [CPVar (18,"qn"),CPVar (19,"pns")]] [(CApply (CSymbol ("Prelude","null")) (CVar (19,"pns")),CApply (CApply (CSymbol ("PrettyAbstract","qname")) (CVar (17,"mod"))) (CVar (18,"qn"))),(CApply (CApply (CSymbol ("Prelude","&&")) (CApply (CSymbol ("PrettyAbstract","isInfixName")) (CVar (18,"qn")))) (CApply (CApply (CSymbol ("Prelude","==")) (CApply (CSymbol ("Prelude","length")) (CVar (19,"pns")))) (CLit (CIntc 2))),CApply (CApply (CSymbol ("Prelude","$")) (CSymbol ("Pretty","parens"))) (CApply (CApply (CSymbol ("Pretty","<>")) (CApply (CApply (CSymbol ("Pretty","<>")) (CApply (CApply (CSymbol ("PrettyAbstract","patternDoc")) (CVar (17,"mod"))) (CApply (CApply (CSymbol ("Prelude","!!")) (CVar (19,"pns"))) (CLit (CIntc 0))))) (CApply (CSymbol ("Pretty","text")) (CApply (CSymbol ("Prelude","snd")) (CVar (18,"qn")))))) (CApply (CApply (CSymbol ("PrettyAbstract","patternDoc")) (CVar (17,"mod"))) (CApply (CApply (CSymbol ("Prelude","!!")) (CVar (19,"pns"))) (CLit (CIntc 1)))))),(CSymbol ("Prelude","otherwise"),CApply (CSymbol ("Pretty","parens")) (CApply (CApply (CSymbol ("Pretty","<+>")) (CApply (CApply (CSymbol ("PrettyAbstract","qname")) (CVar (17,"mod"))) (CVar (18,"qn")))) (CApply (CSymbol ("Pretty","hsep")) (CApply (CApply (CSymbol ("Prelude","map")) (CApply (CSymbol ("PrettyAbstract","patternDoc")) (CVar (17,"mod")))) (CVar (19,"pns"))))))] []]),
  CFunc ("PrettyAbstract","toListPattern") 1 Private (CFuncType (CTCons ("AbstractCurry","CPattern") []) (CTCons ("Prelude","Maybe") [CTCons ("Prelude","[]") [CTCons ("AbstractCurry","CPattern") []]])) (CRules CFlex [CRule [CPVar (0,"patt")] [(CSymbol ("Prelude","success"),CCase (CVar (0,"patt")) [CBranch (CPComb ("AbstractCurry","CPComb") [CPComb ("Prelude","(,)") [CPComb ("Prelude",":") [CPLit (CCharc 'P'),CPComb ("Prelude",":") [CPLit (CCharc 'r'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude",":") [CPLit (CCharc 'l'),CPComb ("Prelude",":") [CPLit (CCharc 'u'),CPComb ("Prelude",":") [CPLit (CCharc 'd'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude","[]") []]]]]]]],CPComb ("Prelude",":") [CPLit (CCharc '['),CPComb ("Prelude",":") [CPLit (CCharc ']'),CPComb ("Prelude","[]") []]]],CPComb ("Prelude","[]") []]) (CApply (CSymbol ("Prelude","Just")) (CSymbol ("Prelude","[]"))),CBranch (CPComb ("AbstractCurry","CPComb") [CPComb ("Prelude","(,)") [CPComb ("Prelude",":") [CPLit (CCharc 'P'),CPComb ("Prelude",":") [CPLit (CCharc 'r'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude",":") [CPLit (CCharc 'l'),CPComb ("Prelude",":") [CPLit (CCharc 'u'),CPComb ("Prelude",":") [CPLit (CCharc 'd'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude","[]") []]]]]]]],CPComb ("Prelude",":") [CPLit (CCharc ':'),CPComb ("Prelude","[]") []]],CPComb ("Prelude",":") [CPVar (1,"x"),CPComb ("Prelude",":") [CPVar (2,"xs"),CPComb ("Prelude","[]") []]]]) (CApply (CApply (CSymbol ("Maybe",">>-")) (CApply (CSymbol ("PrettyAbstract","toListPattern")) (CVar (2,"xs")))) (CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Prelude","Just"))) (CLambda [CPVar (3,"x0")] (CApply (CApply (CSymbol ("Prelude",":")) (CVar (1,"x"))) (CVar (3,"x0")))))),CBranch (CPVar (4,"_")) (CSymbol ("Prelude","Nothing"))])] []]),
  CFunc ("PrettyAbstract","toStringPattern") 1 Private (CFuncType (CTCons ("AbstractCurry","CPattern") []) (CTCons ("Prelude","Maybe") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]])) (CRules CFlex [CRule [CPVar (0,"patt")] [(CSymbol ("Prelude","success"),CCase (CVar (0,"patt")) [CBranch (CPComb ("AbstractCurry","CPComb") [CPComb ("Prelude","(,)") [CPComb ("Prelude",":") [CPLit (CCharc 'P'),CPComb ("Prelude",":") [CPLit (CCharc 'r'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude",":") [CPLit (CCharc 'l'),CPComb ("Prelude",":") [CPLit (CCharc 'u'),CPComb ("Prelude",":") [CPLit (CCharc 'd'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude","[]") []]]]]]]],CPComb ("Prelude",":") [CPLit (CCharc '['),CPComb ("Prelude",":") [CPLit (CCharc ']'),CPComb ("Prelude","[]") []]]],CPComb ("Prelude","[]") []]) (CApply (CSymbol ("Prelude","Just")) (CSymbol ("Prelude","[]"))),CBranch (CPComb ("AbstractCurry","CPComb") [CPComb ("Prelude","(,)") [CPComb ("Prelude",":") [CPLit (CCharc 'P'),CPComb ("Prelude",":") [CPLit (CCharc 'r'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude",":") [CPLit (CCharc 'l'),CPComb ("Prelude",":") [CPLit (CCharc 'u'),CPComb ("Prelude",":") [CPLit (CCharc 'd'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude","[]") []]]]]]]],CPComb ("Prelude",":") [CPLit (CCharc ':'),CPComb ("Prelude","[]") []]],CPComb ("Prelude",":") [CPComb ("AbstractCurry","CPLit") [CPComb ("AbstractCurry","CCharc") [CPVar (1,"c")]],CPComb ("Prelude",":") [CPVar (2,"cs"),CPComb ("Prelude","[]") []]]]) (CApply (CApply (CSymbol ("Maybe",">>-")) (CApply (CSymbol ("PrettyAbstract","toStringPattern")) (CVar (2,"cs")))) (CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Prelude","Just"))) (CLambda [CPVar (3,"x0")] (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("PrettyAbstract","quoteChar")) (CVar (1,"c")))) (CVar (3,"x0")))))),CBranch (CPVar (4,"_")) (CSymbol ("Prelude","Nothing"))])] []]),
  CFunc ("PrettyAbstract","trCurryProg") 2 Private (CFuncType (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("AbstractCurry","CTypeDecl") []]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("AbstractCurry","CFuncDecl") []]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("AbstractCurry","COpDecl") []]) (CTVar (0,"a"))))))) (CFuncType (CTCons ("AbstractCurry","CurryProg") []) (CTVar (0,"a")))) (CRules CFlex [CRule [CPVar (0,"prog"),CPComb ("AbstractCurry","CurryProg") [CPVar (1,"name"),CPVar (2,"imps"),CPVar (3,"types"),CPVar (4,"funcs"),CPVar (5,"ops")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CApply (CVar (0,"prog")) (CVar (1,"name"))) (CVar (2,"imps"))) (CVar (3,"types"))) (CVar (4,"funcs"))) (CVar (5,"ops")))] []]),
  CFunc ("PrettyAbstract","trCType") 3 Private (CFuncType (CFuncType (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]) (CFuncType (CTCons ("AbstractCurry","CVisibility") []) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","Int") [],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("AbstractCurry","CConsDecl") []]) (CTVar (0,"a")))))) (CFuncType (CFuncType (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]) (CFuncType (CTCons ("AbstractCurry","CVisibility") []) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","Int") [],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]]) (CFuncType (CTCons ("AbstractCurry","CTypeExpr") []) (CTVar (0,"a")))))) (CFuncType (CTCons ("AbstractCurry","CTypeDecl") []) (CTVar (0,"a"))))) (CRules CFlex [CRule [CPVar (0,"typ"),CPVar (1,"_"),CPComb ("AbstractCurry","CType") [CPVar (2,"name"),CPVar (3,"vis"),CPVar (4,"params"),CPVar (5,"cs")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CVar (0,"typ")) (CVar (2,"name"))) (CVar (3,"vis"))) (CVar (4,"params"))) (CVar (5,"cs")))] [],CRule [CPVar (6,"_"),CPVar (7,"typesyn"),CPComb ("AbstractCurry","CTypeSyn") [CPVar (8,"name"),CPVar (9,"vis"),CPVar (10,"params"),CPVar (11,"syn")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CVar (7,"typesyn")) (CVar (8,"name"))) (CVar (9,"vis"))) (CVar (10,"params"))) (CVar (11,"syn")))] []]),
  CFunc ("PrettyAbstract","typeCVisibility") 0 Private (CFuncType (CTCons ("AbstractCurry","CTypeDecl") []) (CTCons ("AbstractCurry","CVisibility") [])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("PrettyAbstract","trCType")) (CLambda [CPVar (0,"_"),CPVar (1,"vis"),CPVar (2,"_"),CPVar (3,"_")] (CVar (1,"vis")))) (CLambda [CPVar (4,"_"),CPVar (5,"vis"),CPVar (6,"_"),CPVar (7,"_")] (CVar (5,"vis"))))] []]),
  CFunc ("PrettyAbstract","typeName") 0 Private (CFuncType (CTCons ("AbstractCurry","CTypeDecl") []) (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("PrettyAbstract","trCType")) (CLambda [CPVar (0,"name"),CPVar (1,"_"),CPVar (2,"_"),CPVar (3,"_")] (CVar (0,"name")))) (CLambda [CPVar (4,"name"),CPVar (5,"_"),CPVar (6,"_"),CPVar (7,"_")] (CVar (4,"name"))))] []]),
  CFunc ("PrettyAbstract","trCFunc") 2 Private (CFuncType (CFuncType (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]) (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("AbstractCurry","CVisibility") []) (CFuncType (CTCons ("AbstractCurry","CTypeExpr") []) (CFuncType (CTCons ("AbstractCurry","CRules") []) (CTVar (0,"a"))))))) (CFuncType (CTCons ("AbstractCurry","CFuncDecl") []) (CTVar (0,"a")))) (CRules CFlex [CRule [CPVar (0,"func"),CPComb ("AbstractCurry","CFunc") [CPVar (1,"name"),CPVar (2,"arity"),CPVar (3,"vis"),CPVar (4,"t"),CPVar (5,"rules")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CApply (CVar (0,"func")) (CVar (1,"name"))) (CVar (2,"arity"))) (CVar (3,"vis"))) (CVar (4,"t"))) (CVar (5,"rules")))] [],CRule [CPVar (6,"func"),CPComb ("AbstractCurry","CmtFunc") [CPVar (7,"_"),CPVar (8,"name"),CPVar (9,"arity"),CPVar (10,"vis"),CPVar (11,"t"),CPVar (12,"rules")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CApply (CVar (6,"func")) (CVar (8,"name"))) (CVar (9,"arity"))) (CVar (10,"vis"))) (CVar (11,"t"))) (CVar (12,"rules")))] []]),
  CFunc ("PrettyAbstract","funcName") 0 Private (CFuncType (CTCons ("AbstractCurry","CFuncDecl") []) (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("PrettyAbstract","trCFunc")) (CLambda [CPVar (0,"name"),CPVar (1,"_"),CPVar (2,"_"),CPVar (3,"_"),CPVar (4,"_")] (CVar (0,"name"))))] []]),
  CFunc ("PrettyAbstract","funcCVisibility") 0 Private (CFuncType (CTCons ("AbstractCurry","CFuncDecl") []) (CTCons ("AbstractCurry","CVisibility") [])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("PrettyAbstract","trCFunc")) (CLambda [CPVar (0,"_"),CPVar (1,"_"),CPVar (2,"vis"),CPVar (3,"_"),CPVar (4,"_")] (CVar (2,"vis"))))] []]),
  CFunc ("PrettyAbstract","trCCons") 2 Private (CFuncType (CFuncType (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]) (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("AbstractCurry","CVisibility") []) (CFuncType (CTCons ("Prelude","[]") [CTCons ("AbstractCurry","CTypeExpr") []]) (CTVar (0,"a")))))) (CFuncType (CTCons ("AbstractCurry","CConsDecl") []) (CTVar (0,"a")))) (CRules CFlex [CRule [CPVar (0,"cons"),CPComb ("AbstractCurry","CCons") [CPVar (1,"name"),CPVar (2,"arity"),CPVar (3,"vis"),CPVar (4,"args")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CVar (0,"cons")) (CVar (1,"name"))) (CVar (2,"arity"))) (CVar (3,"vis"))) (CVar (4,"args")))] []]),
  CFunc ("PrettyAbstract","consCVisibility") 0 Private (CFuncType (CTCons ("AbstractCurry","CConsDecl") []) (CTCons ("AbstractCurry","CVisibility") [])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("PrettyAbstract","trCCons")) (CLambda [CPVar (0,"_"),CPVar (1,"_"),CPVar (2,"vis"),CPVar (3,"_")] (CVar (2,"vis"))))] []]),
  CFunc ("PrettyAbstract","argTypes") 1 Private (CFuncType (CTCons ("AbstractCurry","CTypeExpr") []) (CTCons ("Prelude","[]") [CTCons ("AbstractCurry","CTypeExpr") []])) (CRules CFlex [CRule [CPComb ("AbstractCurry","CTVar") [CPVar (0,"_")]] [(CSymbol ("Prelude","success"),CSymbol ("Prelude","[]"))] [],CRule [CPComb ("AbstractCurry","CTCons") [CPVar (1,"_"),CPVar (2,"_")]] [(CSymbol ("Prelude","success"),CSymbol ("Prelude","[]"))] [],CRule [CPComb ("AbstractCurry","CFuncType") [CPVar (3,"dom"),CPVar (4,"ran")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",":")) (CVar (3,"dom"))) (CApply (CSymbol ("PrettyAbstract","argTypes")) (CVar (4,"ran"))))] []]),
  CFunc ("PrettyAbstract","resultType") 1 Private (CFuncType (CTCons ("AbstractCurry","CTypeExpr") []) (CTCons ("AbstractCurry","CTypeExpr") [])) (CRules CFlex [CRule [CPComb ("AbstractCurry","CTVar") [CPVar (0,"n")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("AbstractCurry","CTVar")) (CVar (0,"n")))] [],CRule [CPComb ("AbstractCurry","CTCons") [CPVar (1,"name"),CPVar (2,"args")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("AbstractCurry","CTCons")) (CVar (1,"name"))) (CVar (2,"args")))] [],CRule [CPComb ("AbstractCurry","CFuncType") [CPVar (3,"_"),CPVar (4,"ran")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("PrettyAbstract","resultType")) (CVar (4,"ran")))] []])]
 []
