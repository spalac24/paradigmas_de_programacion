Prog "PrettyAbstract" ["AbstractCurry","List","Maybe","Prelude","Pretty","System","Char"] [TypeSyn ("PrettyAbstract","Precs") Private [] (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","(,)") [TCons ("AbstractCurry","CFixity") [],TCons ("Prelude","Int") []]]])] [Func ("PrettyAbstract","qualifiedNames") 0 Private (TCons ("Prelude","Bool") []) (Rule [] (Comb ConsCall ("Prelude","True") [])),Func ("PrettyAbstract","debug") 0 Private (TCons ("Prelude","Bool") []) (Rule [] (Comb ConsCall ("Prelude","False") [])),Func ("PrettyAbstract","showPrecs") 2 Private (FuncType (TVar 0) (FuncType (TVar 1) (TCons ("Pretty","Doc") []))) (Rule [1,2] (Case  Rigid (Comb FuncCall ("PrettyAbstract","debug") []) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Pretty","text") [Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '{'),Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","show") [Var 1],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '@'),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","show") [Var 2],Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  '}'),Comb ConsCall ("Prelude","[]") []]]]]]]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Pretty","empty") []),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])),Func ("PrettyAbstract","prelude") 0 Private (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (Rule [] (Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]])),Func ("PrettyAbstract","arrow") 0 Private (TCons ("Pretty","Doc") []) (Rule [] (Comb FuncCall ("Pretty","text") [Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  '>'),Comb ConsCall ("Prelude","[]") []]]])),Func ("PrettyAbstract","bar") 0 Private (TCons ("Pretty","Doc") []) (Rule [] (Comb FuncCall ("Pretty","char") [Lit (Charc  '|')])),Func ("PrettyAbstract","dcolon") 0 Private (TCons ("Pretty","Doc") []) (Rule [] (Comb FuncCall ("Pretty","text") [Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude","[]") []]]])),Func ("PrettyAbstract","preludePrecs") 0 Public (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","(,)") [TCons ("AbstractCurry","CFixity") [],TCons ("Prelude","Int") []]]]) (Rule [] (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb ConsCall ("Prelude",":") [Lit (Charc  '!'),Comb ConsCall ("Prelude",":") [Lit (Charc  '!'),Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("AbstractCurry","CInfixlOp") [],Lit (Intc  9)]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("AbstractCurry","CInfixrOp") [],Lit (Intc  9)]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("AbstractCurry","CInfixlOp") [],Lit (Intc  7)]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'v'),Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("AbstractCurry","CInfixlOp") [],Lit (Intc  7)]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb ConsCall ("Prelude",":") [Lit (Charc  '*'),Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("AbstractCurry","CInfixlOp") [],Lit (Intc  7)]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("AbstractCurry","CInfixlOp") [],Lit (Intc  6)]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb ConsCall ("Prelude",":") [Lit (Charc  '+'),Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("AbstractCurry","CInfixlOp") [],Lit (Intc  6)]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb ConsCall ("Prelude",":") [Lit (Charc  '+'),Comb ConsCall ("Prelude",":") [Lit (Charc  '+'),Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("AbstractCurry","CInfixrOp") [],Lit (Intc  5)]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb ConsCall ("Prelude",":") [Lit (Charc  '='),Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude",":") [Lit (Charc  '<'),Comb ConsCall ("Prelude",":") [Lit (Charc  '<'),Comb ConsCall ("Prelude",":") [Lit (Charc  '='),Comb ConsCall ("Prelude","[]") []]]]]]],Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("AbstractCurry","CInfixOp") [],Lit (Intc  4)]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb ConsCall ("Prelude",":") [Lit (Charc  '='),Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude",":") [Lit (Charc  '<'),Comb ConsCall ("Prelude",":") [Lit (Charc  '='),Comb ConsCall ("Prelude","[]") []]]]]],Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("AbstractCurry","CInfixOp") [],Lit (Intc  4)]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb ConsCall ("Prelude",":") [Lit (Charc  '>'),Comb ConsCall ("Prelude",":") [Lit (Charc  '='),Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("AbstractCurry","CInfixOp") [],Lit (Intc  4)]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb ConsCall ("Prelude",":") [Lit (Charc  '<'),Comb ConsCall ("Prelude",":") [Lit (Charc  '='),Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("AbstractCurry","CInfixOp") [],Lit (Intc  4)]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb ConsCall ("Prelude",":") [Lit (Charc  '>'),Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("AbstractCurry","CInfixOp") [],Lit (Intc  4)]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb ConsCall ("Prelude",":") [Lit (Charc  '<'),Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("AbstractCurry","CInfixOp") [],Lit (Intc  4)]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb ConsCall ("Prelude",":") [Lit (Charc  '/'),Comb ConsCall ("Prelude",":") [Lit (Charc  '='),Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("AbstractCurry","CInfixOp") [],Lit (Intc  4)]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb ConsCall ("Prelude",":") [Lit (Charc  '='),Comb ConsCall ("Prelude",":") [Lit (Charc  '='),Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("AbstractCurry","CInfixOp") [],Lit (Intc  4)]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb ConsCall ("Prelude",":") [Lit (Charc  '='),Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude",":") [Lit (Charc  '='),Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("AbstractCurry","CInfixOp") [],Lit (Intc  4)]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'E'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude","[]") []]]]]]]]],Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("AbstractCurry","CInfixOp") [],Lit (Intc  4)]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude","[]") []]]]]],Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("AbstractCurry","CInfixOp") [],Lit (Intc  4)]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb ConsCall ("Prelude",":") [Lit (Charc  '&'),Comb ConsCall ("Prelude",":") [Lit (Charc  '&'),Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("AbstractCurry","CInfixrOp") [],Lit (Intc  3)]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb ConsCall ("Prelude",":") [Lit (Charc  '|'),Comb ConsCall ("Prelude",":") [Lit (Charc  '|'),Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("AbstractCurry","CInfixrOp") [],Lit (Intc  2)]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb ConsCall ("Prelude",":") [Lit (Charc  '>'),Comb ConsCall ("Prelude",":") [Lit (Charc  '>'),Comb ConsCall ("Prelude",":") [Lit (Charc  '='),Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("AbstractCurry","CInfixlOp") [],Lit (Intc  1)]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb ConsCall ("Prelude",":") [Lit (Charc  '>'),Comb ConsCall ("Prelude",":") [Lit (Charc  '>'),Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("AbstractCurry","CInfixlOp") [],Lit (Intc  1)]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb ConsCall ("Prelude",":") [Lit (Charc  '?'),Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("AbstractCurry","CInfixrOp") [],Lit (Intc  0)]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb ConsCall ("Prelude",":") [Lit (Charc  '&'),Comb ConsCall ("Prelude",":") [Lit (Charc  '>'),Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("AbstractCurry","CInfixrOp") [],Lit (Intc  0)]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb ConsCall ("Prelude",":") [Lit (Charc  '&'),Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("AbstractCurry","CInfixrOp") [],Lit (Intc  0)]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'q'),Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("AbstractCurry","CInfixrOp") [],Lit (Intc  0)]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb ConsCall ("Prelude",":") [Lit (Charc  '$'),Comb ConsCall ("Prelude",":") [Lit (Charc  '#'),Comb ConsCall ("Prelude",":") [Lit (Charc  '#'),Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("AbstractCurry","CInfixrOp") [],Lit (Intc  0)]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb ConsCall ("Prelude",":") [Lit (Charc  '$'),Comb ConsCall ("Prelude",":") [Lit (Charc  '#'),Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("AbstractCurry","CInfixrOp") [],Lit (Intc  0)]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb ConsCall ("Prelude",":") [Lit (Charc  '$'),Comb ConsCall ("Prelude",":") [Lit (Charc  '!'),Comb ConsCall ("Prelude",":") [Lit (Charc  '!'),Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("AbstractCurry","CInfixrOp") [],Lit (Intc  0)]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb ConsCall ("Prelude",":") [Lit (Charc  '$'),Comb ConsCall ("Prelude",":") [Lit (Charc  '!'),Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("AbstractCurry","CInfixrOp") [],Lit (Intc  0)]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb ConsCall ("Prelude",":") [Lit (Charc  '$'),Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("AbstractCurry","CInfixrOp") [],Lit (Intc  0)]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("AbstractCurry","CInfixrOp") [],Lit (Intc  5)]],Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])),Func ("PrettyAbstract","prettyCProg") 1 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("AbstractCurry","CurryProg") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1] (Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Pretty","pretty") [Var 1],Comb FuncCall ("PrettyAbstract","cprogDoc") []])),Func ("PrettyAbstract","prettyCTypeExpr") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("AbstractCurry","CTypeExpr") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1] (Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Pretty","pretty") [Lit (Intc  78)],Comb (FuncPartCall 1) ("PrettyAbstract","typeExprDoc") [Var 1,Lit (Intc  0)]])),Func ("PrettyAbstract","prettyCTypes") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("AbstractCurry","CTypeDecl") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1] (Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Pretty","pretty") [Lit (Intc  78)],Comb FuncCall ("PrettyAbstract","typesDoc") [Var 1]])),Func ("PrettyAbstract","prettyCOps") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("AbstractCurry","COpDecl") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Pretty","pretty") [Lit (Intc  78)],Comb (FuncPartCall 1) ("PrettyAbstract","opsDoc") []])),Func ("PrettyAbstract","showCProg") 0 Public (FuncType (TCons ("AbstractCurry","CurryProg") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Comb FuncCall ("PrettyAbstract","prettyCProg") [Lit (Intc  78)])),Func ("PrettyAbstract","main") 0 Private (TCons ("Prelude","IO") [TCons ("Prelude","()") []]) (Rule [] (Let [(1,Comb FuncCall ("Prelude",">>") [Comb FuncCall ("Prelude","putStrLn") [Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'b'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '['),Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  ']'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '<'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  '>'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],Comb FuncCall ("Prelude","putStrLn") [Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'A'),Comb ConsCall ("Prelude",":") [Lit (Charc  'b'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'A'),Comb ConsCall ("Prelude",":") [Lit (Charc  'b'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("System","getArgs") [],Comb (FuncPartCall 1) ("PrettyAbstract","main._#lambda1") [Var 1]]))),Func ("PrettyAbstract","main.checkMod'.66") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","Bool") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Prelude",":") [2,3]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 2,Lit (Charc  '/')]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","/=") [Var 2,Lit (Charc  '.')],Comb FuncCall ("PrettyAbstract","main.checkMod'.66") [Var 3]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])),Func ("PrettyAbstract","main.checkMod.66") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","Bool") [])) (Rule [1] (Case  Rigid (Comb FuncCall ("Prelude","==") [Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","take") [Lit (Intc  1),Var 1]]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("PrettyAbstract","main.checkMod'.66") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","reverse") [],Var 1]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])),Func ("PrettyAbstract","main._#lambda1") 2 Private (FuncType (TCons ("Prelude","IO") [TCons ("Prelude","()") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []]))) (Rule [1,2] (Case  Rigid (Var 2) [Branch (Pattern ("Prelude",":") [3,4]) (Case  Rigid (Var 3) [Branch (Pattern ("Prelude",":") [5,6]) (Let [(7,Var 5)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 7,Lit (Charc  '-')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 6) [Branch (Pattern ("Prelude",":") [8,9]) (Let [(10,Var 8)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 10,Lit (Charc  '-')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 9) [Branch (Pattern ("Prelude",":") [11,12]) (Let [(13,Var 11)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 13,Lit (Charc  'u')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 12) [Branch (Pattern ("Prelude",":") [14,15]) (Let [(16,Var 14)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 16,Lit (Charc  'a')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 15) [Branch (Pattern ("Prelude",":") [17,18]) (Let [(19,Var 17)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 19,Lit (Charc  'c')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 18) [Branch (Pattern ("Prelude",":") [20,21]) (Let [(22,Var 20)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 22,Lit (Charc  'y')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 21) [Branch (Pattern ("Prelude","[]") []) (Case  Rigid (Var 4) [Branch (Pattern ("Prelude",":") [23,24]) (Case  Rigid (Var 24) [Branch (Pattern ("Prelude","[]") []) (Case  Rigid (Comb FuncCall ("PrettyAbstract","main.checkMod.66") [Var 23]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("PrettyAbstract","printUCProg") [Var 23]),Branch (Pattern ("Prelude","False") []) (Var 1)]),Branch (Pattern ("Prelude",":") [25,26]) (Var 1)]),Branch (Pattern ("Prelude","[]") []) (Case  Rigid (Comb FuncCall ("PrettyAbstract","main.checkMod.66") [Var 3]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("PrettyAbstract","printCProg") [Var 3]),Branch (Pattern ("Prelude","False") []) (Var 1)])]),Branch (Pattern ("Prelude",":") [27,28]) (Case  Rigid (Var 4) [Branch (Pattern ("Prelude","[]") []) (Case  Rigid (Comb FuncCall ("PrettyAbstract","main.checkMod.66") [Var 3]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("PrettyAbstract","printCProg") [Var 3]),Branch (Pattern ("Prelude","False") []) (Var 1)]),Branch (Pattern ("Prelude",":") [29,30]) (Var 1)])]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Var 4) [Branch (Pattern ("Prelude","[]") []) (Case  Rigid (Comb FuncCall ("PrettyAbstract","main.checkMod.66") [Var 3]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("PrettyAbstract","printCProg") [Var 3]),Branch (Pattern ("Prelude","False") []) (Var 1)]),Branch (Pattern ("Prelude",":") [31,32]) (Var 1)])])),Branch (Pattern ("Prelude","[]") []) (Case  Rigid (Var 4) [Branch (Pattern ("Prelude","[]") []) (Case  Rigid (Comb FuncCall ("PrettyAbstract","main.checkMod.66") [Var 3]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("PrettyAbstract","printCProg") [Var 3]),Branch (Pattern ("Prelude","False") []) (Var 1)]),Branch (Pattern ("Prelude",":") [33,34]) (Var 1)])]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Var 4) [Branch (Pattern ("Prelude","[]") []) (Case  Rigid (Comb FuncCall ("PrettyAbstract","main.checkMod.66") [Var 3]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("PrettyAbstract","printCProg") [Var 3]),Branch (Pattern ("Prelude","False") []) (Var 1)]),Branch (Pattern ("Prelude",":") [35,36]) (Var 1)])])),Branch (Pattern ("Prelude","[]") []) (Case  Rigid (Var 4) [Branch (Pattern ("Prelude","[]") []) (Case  Rigid (Comb FuncCall ("PrettyAbstract","main.checkMod.66") [Var 3]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("PrettyAbstract","printCProg") [Var 3]),Branch (Pattern ("Prelude","False") []) (Var 1)]),Branch (Pattern ("Prelude",":") [37,38]) (Var 1)])]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Var 4) [Branch (Pattern ("Prelude","[]") []) (Case  Rigid (Comb FuncCall ("PrettyAbstract","main.checkMod.66") [Var 3]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("PrettyAbstract","printCProg") [Var 3]),Branch (Pattern ("Prelude","False") []) (Var 1)]),Branch (Pattern ("Prelude",":") [39,40]) (Var 1)])])),Branch (Pattern ("Prelude","[]") []) (Case  Rigid (Var 4) [Branch (Pattern ("Prelude","[]") []) (Case  Rigid (Comb FuncCall ("PrettyAbstract","main.checkMod.66") [Var 3]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("PrettyAbstract","printCProg") [Var 3]),Branch (Pattern ("Prelude","False") []) (Var 1)]),Branch (Pattern ("Prelude",":") [41,42]) (Var 1)])]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Var 4) [Branch (Pattern ("Prelude","[]") []) (Case  Rigid (Comb FuncCall ("PrettyAbstract","main.checkMod.66") [Var 3]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("PrettyAbstract","printCProg") [Var 3]),Branch (Pattern ("Prelude","False") []) (Var 1)]),Branch (Pattern ("Prelude",":") [43,44]) (Var 1)])])),Branch (Pattern ("Prelude","[]") []) (Case  Rigid (Var 4) [Branch (Pattern ("Prelude","[]") []) (Case  Rigid (Comb FuncCall ("PrettyAbstract","main.checkMod.66") [Var 3]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("PrettyAbstract","printCProg") [Var 3]),Branch (Pattern ("Prelude","False") []) (Var 1)]),Branch (Pattern ("Prelude",":") [45,46]) (Var 1)])]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Var 4) [Branch (Pattern ("Prelude","[]") []) (Case  Rigid (Comb FuncCall ("PrettyAbstract","main.checkMod.66") [Var 3]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("PrettyAbstract","printCProg") [Var 3]),Branch (Pattern ("Prelude","False") []) (Var 1)]),Branch (Pattern ("Prelude",":") [47,48]) (Var 1)])])),Branch (Pattern ("Prelude","[]") []) (Case  Rigid (Var 4) [Branch (Pattern ("Prelude","[]") []) (Case  Rigid (Comb FuncCall ("PrettyAbstract","main.checkMod.66") [Var 3]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("PrettyAbstract","printCProg") [Var 3]),Branch (Pattern ("Prelude","False") []) (Var 1)]),Branch (Pattern ("Prelude",":") [49,50]) (Var 1)])]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Var 4) [Branch (Pattern ("Prelude","[]") []) (Case  Rigid (Comb FuncCall ("PrettyAbstract","main.checkMod.66") [Var 3]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("PrettyAbstract","printCProg") [Var 3]),Branch (Pattern ("Prelude","False") []) (Var 1)]),Branch (Pattern ("Prelude",":") [51,52]) (Var 1)])])),Branch (Pattern ("Prelude","[]") []) (Case  Rigid (Var 4) [Branch (Pattern ("Prelude","[]") []) (Case  Rigid (Comb FuncCall ("PrettyAbstract","main.checkMod.66") [Comb ConsCall ("Prelude","[]") []]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("PrettyAbstract","printCProg") [Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude","False") []) (Var 1)]),Branch (Pattern ("Prelude",":") [53,54]) (Var 1)])]),Branch (Pattern ("Prelude","[]") []) (Var 1)])),Func ("PrettyAbstract","printCProg") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []])) (Rule [1] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("AbstractCurry","readCurry") [Var 1],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","putStrLn") [],Comb FuncCall ("PrettyAbstract","showCProg") []]])),Func ("PrettyAbstract","printUCProg") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []])) (Rule [1] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("AbstractCurry","readUntypedCurry") [Var 1],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","putStrLn") [],Comb FuncCall ("PrettyAbstract","showCProg") []]])),Func ("PrettyAbstract","cprogDoc") 0 Public (FuncType (TCons ("AbstractCurry","CurryProg") []) (TCons ("Pretty","Doc") [])) (Rule [] (Comb (FuncPartCall 1) ("PrettyAbstract","cprogDocWithPrecedences") [Comb FuncCall ("PrettyAbstract","preludePrecs") []])),Func ("PrettyAbstract","cprogDocWithPrecedences") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","(,)") [TCons ("AbstractCurry","CFixity") [],TCons ("Prelude","Int") []]]]) (FuncType (TCons ("AbstractCurry","CurryProg") []) (TCons ("Pretty","Doc") []))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("AbstractCurry","CurryProg") [3,4,5,6,7]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","<$>") [],Comb FuncCall ("PrettyAbstract","<$>>") [Comb FuncCall ("PrettyAbstract","<$>>") [Comb FuncCall ("PrettyAbstract","<$>>") [Comb FuncCall ("PrettyAbstract","<$>>") [Comb FuncCall ("PrettyAbstract","moduleHeaderDoc") [Var 3,Var 2,Comb FuncCall ("PrettyAbstract","exportedNames") [Var 3,Var 2]],Comb FuncCall ("PrettyAbstract","impsDoc") [Var 4]],Comb FuncCall ("PrettyAbstract","opsDoc") [Var 7]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("PrettyAbstract","typesDoc") [Var 3],Var 5]],Comb FuncCall ("PrettyAbstract","funcsDoc") [Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("PrettyAbstract","precs") [],Var 7],Var 1],Var 3,Var 6]]],Comb FuncCall ("Pretty","empty") []])])),Func ("PrettyAbstract","precs") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("AbstractCurry","COpDecl") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","(,)") [TCons ("AbstractCurry","CFixity") [],TCons ("Prelude","Int") []]]])) (Rule [] (Comb (FuncPartCall 1) ("Prelude","map") [Comb (FuncPartCall 1) ("PrettyAbstract","precs._#lambda3") []])),Func ("PrettyAbstract","precs._#lambda3") 1 Private (FuncType (TCons ("AbstractCurry","COpDecl") []) (TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","(,)") [TCons ("AbstractCurry","CFixity") [],TCons ("Prelude","Int") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("AbstractCurry","COp") [2,3,4]) (Comb ConsCall ("Prelude","(,)") [Var 2,Comb ConsCall ("Prelude","(,)") [Var 3,Var 4]])])),Func ("PrettyAbstract","<$>>") 2 Private (FuncType (TCons ("Pretty","Doc") []) (FuncType (TCons ("Pretty","Doc") []) (TCons ("Pretty","Doc") []))) (Rule [1,2] (Case  Rigid (Comb FuncCall ("Pretty","isEmpty") [Var 1]) [Branch (Pattern ("Prelude","True") []) (Var 2),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Pretty","isEmpty") [Var 2]) [Branch (Pattern ("Prelude","True") []) (Var 1),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Pretty","<>") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","<$>") [],Var 1],Comb FuncCall ("Pretty","line") []],Var 2]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])),Func ("PrettyAbstract","def") 3 Private (FuncType (TCons ("Pretty","Doc") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (FuncType (TCons ("Pretty","Doc") []) (TCons ("Pretty","Doc") [])))) (Rule [1,2,3] (Let [(4,Case  Rigid (Comb FuncCall ("Prelude","null") [Var 2]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Pretty","empty") []),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Pretty","<>") [Comb FuncCall ("Pretty","space") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","align") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","fillSep") [],Comb FuncCall ("Prelude","map") [Comb FuncCall ("PrettyAbstract","varDoc") [],Var 2]]]])])] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("PrettyAbstract","block") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","<$>") [],Comb FuncCall ("Pretty","<>") [Var 1,Var 4]],Var 3]]))),Func ("PrettyAbstract","block") 0 Private (FuncType (TCons ("Pretty","Doc") []) (TCons ("Pretty","Doc") [])) (Rule [] (Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Pretty","group") [],Comb (FuncPartCall 1) ("Pretty","hang") [Lit (Intc  1)]])),Func ("PrettyAbstract","app") 2 Private (FuncType (TCons ("Pretty","Doc") []) (FuncType (TCons ("Prelude","[]") [TCons ("Pretty","Doc") []]) (TCons ("Pretty","Doc") []))) (Rule [1,2] (Case  Rigid (Comb FuncCall ("Prelude","null") [Var 2]) [Branch (Pattern ("Prelude","True") []) (Var 1),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("PrettyAbstract","block") [],Comb FuncCall ("Pretty","fillEncloseSep") [Comb FuncCall ("Pretty","empty") [],Comb FuncCall ("Pretty","empty") [],Comb FuncCall ("Pretty","space") [],Comb ConsCall ("Prelude",":") [Var 1,Var 2]]])])),Func ("PrettyAbstract","par") 1 Private (FuncType (TCons ("Prelude","Maybe") [TVar 0]) (FuncType (TCons ("Pretty","Doc") []) (TCons ("Pretty","Doc") []))) (Rule [1] (Case  Rigid (Comb FuncCall ("Maybe","isJust") [Var 1]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Pretty","parens") []),Branch (Pattern ("Prelude","False") []) (Comb (FuncPartCall 1) ("Prelude","id") [])])),Func ("PrettyAbstract","precFillEncloseSep") 7 Private (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","(,)") [TCons ("AbstractCurry","CFixity") [],TCons ("Prelude","Int") []]) (FuncType (TCons ("Prelude","Maybe") [TCons ("Prelude","(,)") [TCons ("AbstractCurry","CFixity") [],TCons ("Prelude","Int") []]]) (FuncType (TCons ("Pretty","Doc") []) (FuncType (TCons ("Pretty","Doc") []) (FuncType (TCons ("Pretty","Doc") []) (FuncType (TCons ("Prelude","[]") [TCons ("Pretty","Doc") []]) (TCons ("Pretty","Doc") [])))))))) (Rule [1,2,3,4,5,6,7] (Let [(8,Comb FuncCall ("Maybe","fromJust") [Var 3])] (Case  Rigid (Comb FuncCall ("Maybe","isNothing") [Var 3]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Pretty","fillEncloseSep") [Comb FuncCall ("Pretty","empty") [],Comb FuncCall ("Pretty","empty") [],Var 6,Var 7]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Pretty","fillEncloseSep") [Comb FuncCall ("PrettyAbstract","precFillEncloseSep.pre.107") [Var 1,Var 2,Var 8,Var 4],Comb FuncCall ("PrettyAbstract","precFillEncloseSep.pre.107") [Var 1,Var 2,Var 8,Var 5],Var 6,Var 7]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])]))),Func ("PrettyAbstract","precFillEncloseSep.pre.107") 4 Private (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","(,)") [TCons ("AbstractCurry","CFixity") [],TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("AbstractCurry","CFixity") [],TVar 0]) (FuncType (TCons ("Pretty","Doc") []) (TCons ("Pretty","Doc") []))))) (Rule [1,2,3,4] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [5,6]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude","(,)") [7,8]) (Case  Rigid (Comb FuncCall ("Prelude",">") [Var 6,Var 8]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Pretty","empty") []),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","<") [Var 6,Var 8]) [Branch (Pattern ("Prelude","True") []) (Var 4),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 5,Comb ConsCall ("AbstractCurry","CInfixOp") []]) [Branch (Pattern ("Prelude","True") []) (Var 4),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","/=") [Var 5,Var 7]) [Branch (Pattern ("Prelude","True") []) (Var 4),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","&&") [Var 1,Comb FuncCall ("Prelude","==") [Var 7,Comb ConsCall ("AbstractCurry","CInfixrOp") []]]) [Branch (Pattern ("Prelude","True") []) (Var 4),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","not") [Var 1],Comb FuncCall ("Prelude","==") [Var 7,Comb ConsCall ("AbstractCurry","CInfixlOp") []]]) [Branch (Pattern ("Prelude","True") []) (Var 4),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb ConsCall ("Prelude","True") []) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Pretty","empty") []),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])])])])])])])),Func ("PrettyAbstract","layout") 0 Private (FuncType (TCons ("Prelude","[]") [TCons ("Pretty","Doc") []]) (TCons ("Pretty","Doc") [])) (Rule [] (Comb FuncCall ("Prelude",".") [Comb FuncCall ("Pretty","align") [],Comb (FuncPartCall 1) ("Pretty","compose") [Comb (FuncPartCall 2) ("Pretty","combine") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","linesep") [],Comb ConsCall ("Prelude",":") [Lit (Charc  ';'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]])),Func ("PrettyAbstract","qname") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Pretty","Doc") []))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [3,4]) (Case  Rigid (Comb FuncCall ("Prelude","||") [Comb FuncCall ("Prelude","==") [Var 2,Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("PrettyAbstract","prelude") [],Comb ConsCall ("Prelude",":") [Lit (Charc  '['),Comb ConsCall ("Prelude",":") [Lit (Charc  ']'),Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("PrettyAbstract","isTupleName") [Var 2]]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Pretty","text") [Var 4]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("PrettyAbstract","isInfixName") [Var 2]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Comb FuncCall ("Prelude","||") [Comb FuncCall ("Prelude","==") [Var 3,Var 1],Comb FuncCall ("Prelude","||") [Comb FuncCall ("Prelude","==") [Var 3,Comb FuncCall ("PrettyAbstract","prelude") []],Comb FuncCall ("Prelude","not") [Comb FuncCall ("PrettyAbstract","qualifiedNames") []]]]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","parens") [],Comb FuncCall ("Pretty","text") [Var 4]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","parens") [],Comb FuncCall ("Pretty","<>") [Comb FuncCall ("Pretty","<>") [Comb FuncCall ("Pretty","text") [Var 3],Comb FuncCall ("Pretty","dot") []],Comb FuncCall ("Pretty","text") [Var 4]]])]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Comb FuncCall ("Prelude","||") [Comb FuncCall ("Prelude","==") [Var 3,Var 1],Comb FuncCall ("Prelude","||") [Comb FuncCall ("Prelude","==") [Var 3,Comb FuncCall ("PrettyAbstract","prelude") []],Comb FuncCall ("Prelude","not") [Comb FuncCall ("PrettyAbstract","qualifiedNames") []]]]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Pretty","text") [Comb FuncCall ("PrettyAbstract","correctName") [Var 4]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Pretty","<>") [Comb FuncCall ("Pretty","<>") [Comb FuncCall ("Pretty","text") [Var 3],Comb FuncCall ("Pretty","dot") []],Comb FuncCall ("Pretty","text") [Var 4]])]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])])),Func ("PrettyAbstract","isTupleName") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","Bool") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","==") [Var 2,Comb FuncCall ("PrettyAbstract","prelude") []],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","elem") [Comb FuncCall ("Prelude","take") [Lit (Intc  2),Var 3]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb ConsCall ("Prelude",":") [Lit (Charc  ','),Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude","[]") []]]]])])),Func ("PrettyAbstract","isInfixName") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","Bool") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","all") [Comb (FuncPartCall 1) ("Prelude","flip") [Comb (FuncPartCall 1) ("Prelude","elem") [],Comb FuncCall ("PrettyAbstract","infixIDs") []]],Var 3])])),Func ("PrettyAbstract","infixIDs") 0 Private (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (Rule [] (Comb ConsCall ("Prelude",":") [Lit (Charc  '~'),Comb ConsCall ("Prelude",":") [Lit (Charc  '!'),Comb ConsCall ("Prelude",":") [Lit (Charc  '@'),Comb ConsCall ("Prelude",":") [Lit (Charc  '#'),Comb ConsCall ("Prelude",":") [Lit (Charc  '$'),Comb ConsCall ("Prelude",":") [Lit (Charc  '%'),Comb ConsCall ("Prelude",":") [Lit (Charc  '^'),Comb ConsCall ("Prelude",":") [Lit (Charc  '&'),Comb ConsCall ("Prelude",":") [Lit (Charc  '*'),Comb ConsCall ("Prelude",":") [Lit (Charc  '+'),Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  '='),Comb ConsCall ("Prelude",":") [Lit (Charc  '<'),Comb ConsCall ("Prelude",":") [Lit (Charc  '>'),Comb ConsCall ("Prelude",":") [Lit (Charc  '?'),Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude",":") [Lit (Charc  '/'),Comb ConsCall ("Prelude",":") [Lit (Charc  '|'),Comb ConsCall ("Prelude",":") [Lit (Charc  '\\'),Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]])),Func ("PrettyAbstract","correctName") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Let [(2,Comb FuncCall ("Prelude","filter") [Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","not") [],Comb (FuncPartCall 1) ("Prelude","flip") [Comb (FuncPartCall 1) ("Prelude","elem") [],Comb ConsCall ("Prelude",":") [Lit (Charc  '#'),Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude","[]") []]]]],Var 1])] (Case  Rigid (Var 2) [Branch (Pattern ("Prelude",":") [3,4]) (Let [(5,Var 3)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 5,Lit (Charc  '_')]) [Branch (Pattern ("Prelude","True") []) (Var 4),Branch (Pattern ("Prelude","False") []) (Var 2)])),Branch (Pattern ("Prelude","[]") []) (Var 2)]))),Func ("PrettyAbstract","varDoc") 0 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Pretty","Doc") [])) (Rule [] (Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Pretty","text") [],Comb (FuncPartCall 1) ("Prelude","snd") []])),Func ("PrettyAbstract","tvarDoc") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Pretty","Doc") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Case  Rigid (Comb FuncCall ("Prelude","||") [Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","/=") [Var 3,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","/=") [Lit (Charc  '_'),Comb FuncCall ("Prelude","head") [Var 3]]],Comb FuncCall ("Prelude","==") [Var 3,Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude","[]") []]]]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Pretty","text") [Var 3]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude",">") [Var 2,Lit (Intc  25)]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Pretty","text") [Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","show") [Var 2]]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Pretty","text") [Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","chr") [Comb FuncCall ("Prelude","+") [Lit (Intc  97),Var 2]],Comb ConsCall ("Prelude","[]") []]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])])),Func ("PrettyAbstract","litDoc") 1 Private (FuncType (TCons ("AbstractCurry","CLiteral") []) (TCons ("Pretty","Doc") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("AbstractCurry","CIntc") [2]) (Comb FuncCall ("Pretty","int") [Var 2]),Branch (Pattern ("AbstractCurry","CFloatc") [3]) (Comb FuncCall ("Pretty","float") [Var 3]),Branch (Pattern ("AbstractCurry","CCharc") [4]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","squotes") [],Comb FuncCall ("Pretty","text") [Comb FuncCall ("PrettyAbstract","quoteChar") [Var 4]]])])),Func ("PrettyAbstract","quoteChar") 1 Private (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Comb FuncCall ("Prelude","maybe") [Comb ConsCall ("Prelude",":") [Var 1,Comb ConsCall ("Prelude","[]") []],Comb (FuncPartCall 1) ("Prelude","id") [],Comb FuncCall ("Prelude","lookup") [Var 1,Comb FuncCall ("PrettyAbstract","specialChars") []]])),Func ("PrettyAbstract","specialChars") 0 Private (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Char") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (Rule [] (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Lit (Charc  '\\'),Comb ConsCall ("Prelude",":") [Lit (Charc  '\\'),Comb ConsCall ("Prelude",":") [Lit (Charc  '\\'),Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Lit (Charc  '\010'),Comb ConsCall ("Prelude",":") [Lit (Charc  '\\'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Lit (Charc  '\013'),Comb ConsCall ("Prelude",":") [Lit (Charc  '\\'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Lit (Charc  '\009'),Comb ConsCall ("Prelude",":") [Lit (Charc  '\\'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Lit (Charc  '"'),Comb ConsCall ("Prelude",":") [Lit (Charc  '\\'),Comb ConsCall ("Prelude",":") [Lit (Charc  '"'),Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude","[]") []]]]]])),Func ("PrettyAbstract","moduleHeaderDoc") 3 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("AbstractCurry","CurryProg") []) (FuncType (TCons ("Prelude","[]") [TCons ("Pretty","Doc") []]) (TCons ("Pretty","Doc") [])))) (Rule [1,2,3] (Case  Rigid (Comb FuncCall ("PrettyAbstract","hasPrivate") [Var 2]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","<+>") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","<+>") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","<+>") [],Comb FuncCall ("Pretty","text") [Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]]],Comb FuncCall ("Pretty","text") [Var 1]]],Comb FuncCall ("PrettyAbstract","exportsDoc") [Var 3]]],Comb FuncCall ("Pretty","text") [Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","<+>") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","<+>") [],Comb FuncCall ("Pretty","text") [Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]]],Comb FuncCall ("Pretty","text") [Var 1]]],Comb FuncCall ("Pretty","text") [Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])),Func ("PrettyAbstract","exportsDoc") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Pretty","Doc") []]) (TCons ("Pretty","Doc") [])) (Rule [1] (Comb FuncCall ("Pretty","group") [Comb FuncCall ("Pretty","nest") [Lit (Intc  1),Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","<$>") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","<$>") [],Comb FuncCall ("Pretty","lparen") []],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","align") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","fillSep") [],Comb FuncCall ("Pretty","punctuate") [Comb FuncCall ("Pretty","comma") [],Var 1]]]]],Comb FuncCall ("Pretty","rparen") []]]])),Func ("PrettyAbstract","hasPrivate") 1 Private (FuncType (TCons ("AbstractCurry","CurryProg") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("AbstractCurry","CurryProg") [2,3,4,5,6]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","any") [Comb (FuncPartCall 1) ("Prelude","==") [Comb ConsCall ("AbstractCurry","Private") []]],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","map") [Comb FuncCall ("PrettyAbstract","typeCVisibility") [],Var 4],Comb FuncCall ("Prelude","map") [Comb FuncCall ("PrettyAbstract","funcCVisibility") [],Var 5]]])])),Func ("PrettyAbstract","exportedNames") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("AbstractCurry","CurryProg") []) (TCons ("Prelude","[]") [TCons ("Pretty","Doc") []]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("AbstractCurry","CurryProg") [3,4,5,6,7]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("PrettyAbstract","exportedNames.typeExpDoc.162") [Var 1],Comb FuncCall ("Prelude","filter") [Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","==") [Comb ConsCall ("AbstractCurry","Public") []],Comb FuncCall ("PrettyAbstract","typeCVisibility") []],Var 5]],Comb FuncCall ("Prelude","map") [Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("PrettyAbstract","qname") [Var 1],Comb FuncCall ("PrettyAbstract","funcName") []],Comb FuncCall ("Prelude","filter") [Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","==") [Comb ConsCall ("AbstractCurry","Public") []],Comb FuncCall ("PrettyAbstract","funcCVisibility") []],Var 6]]])])),Func ("PrettyAbstract","exportedNames.typeExpDoc.162") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("AbstractCurry","CTypeDecl") []) (TCons ("Pretty","Doc") []))) (Rule [1,2] (Let [(3,Comb FuncCall ("Prelude","filter") [Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","==") [Comb ConsCall ("AbstractCurry","Public") []],Comb FuncCall ("PrettyAbstract","consCVisibility") []],Comb FuncCall ("PrettyAbstract","trCType") [Comb (FuncPartCall 4) ("PrettyAbstract","exportedNames.typeExpDoc.162._#lambda5") [],Comb (FuncPartCall 4) ("PrettyAbstract","exportedNames.typeExpDoc.162._#lambda6") [],Var 2]])] (Comb FuncCall ("Pretty","<>") [Comb FuncCall ("PrettyAbstract","qname") [Var 1,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("PrettyAbstract","typeName") [],Var 2]],Case  Rigid (Comb FuncCall ("Prelude","null") [Var 3]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Pretty","empty") []),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Pretty","text") [Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude","[]") []]]]]])]]))),Func ("PrettyAbstract","exportedNames.typeExpDoc.162._#lambda5") 4 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("AbstractCurry","CVisibility") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (FuncType (TCons ("Prelude","[]") [TCons ("AbstractCurry","CConsDecl") []]) (TCons ("Prelude","[]") [TCons ("AbstractCurry","CConsDecl") []]))))) (Rule [1,2,3,4] (Var 4)),Func ("PrettyAbstract","exportedNames.typeExpDoc.162._#lambda6") 4 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("AbstractCurry","CVisibility") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (FuncType (TCons ("AbstractCurry","CTypeExpr") []) (TCons ("Prelude","[]") [TVar 1131]))))) (Rule [1,2,3,4] (Comb ConsCall ("Prelude","[]") [])),Func ("PrettyAbstract","impsDoc") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Pretty","Doc") [])) (Rule [1] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","vcat") [],Comb FuncCall ("Prelude","map") [Comb FuncCall ("Prelude",".") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","<+>") [],Comb FuncCall ("Pretty","text") [Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude","[]") []]]]]]]]],Comb (FuncPartCall 1) ("Pretty","text") []],Comb FuncCall ("Prelude","filter") [Comb (FuncPartCall 1) ("Prelude","flip") [Comb (FuncPartCall 2) ("Prelude","/=") [],Comb FuncCall ("PrettyAbstract","prelude") []],Var 1]]])),Func ("PrettyAbstract","opsDoc") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("AbstractCurry","COpDecl") []]) (TCons ("Pretty","Doc") [])) (Rule [1] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","vcat") [],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("PrettyAbstract","opLineDoc") [],Comb FuncCall ("List","groupBy") [Comb (FuncPartCall 2) ("PrettyAbstract","eqCOpDecl") [],Var 1]]])),Func ("PrettyAbstract","opLineDoc") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("AbstractCurry","COpDecl") []]) (TCons ("Pretty","Doc") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Pretty","empty") []),Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 2) [Branch (Pattern ("AbstractCurry","COp") [4,5,6]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","<+>") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","<+>") [],Comb FuncCall ("Pretty","<>") [Comb FuncCall ("Pretty","text") [Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude","[]") []]]]]]],Comb FuncCall ("PrettyAbstract","opLineDoc.fixDoc.185") [Var 5]]],Comb FuncCall ("Pretty","int") [Var 6]]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","align") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","hsep") [],Comb FuncCall ("Pretty","punctuate") [Comb FuncCall ("Pretty","comma") [],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("PrettyAbstract","opDoc") [],Var 1]]]]])])])),Func ("PrettyAbstract","opLineDoc.fixDoc.185") 1 Private (FuncType (TCons ("AbstractCurry","CFixity") []) (TCons ("Pretty","Doc") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("AbstractCurry","CInfixOp") []) (Comb FuncCall ("Pretty","empty") []),Branch (Pattern ("AbstractCurry","CInfixlOp") []) (Comb FuncCall ("Pretty","text") [Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude","[]") []]]),Branch (Pattern ("AbstractCurry","CInfixrOp") []) (Comb FuncCall ("Pretty","text") [Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude","[]") []]])])),Func ("PrettyAbstract","eqCOpDecl") 2 Private (FuncType (TCons ("AbstractCurry","COpDecl") []) (FuncType (TCons ("AbstractCurry","COpDecl") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Case  Flex (Var 1) [Branch (Pattern ("AbstractCurry","COp") [3,4,5]) (Case  Flex (Var 2) [Branch (Pattern ("AbstractCurry","COp") [6,7,8]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","==") [Var 4,Var 7],Comb FuncCall ("Prelude","==") [Var 5,Var 8]])])])),Func ("PrettyAbstract","opDoc") 1 Private (FuncType (TCons ("AbstractCurry","COpDecl") []) (TCons ("Pretty","Doc") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("AbstractCurry","COp") [2,3,4]) (Case  Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [5,6]) (Let [(7,Case  Rigid (Comb FuncCall ("PrettyAbstract","isInfixName") [Var 2]) [Branch (Pattern ("Prelude","True") []) (Var 6),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  '`'),Comb FuncCall ("Prelude","++") [Var 6,Comb ConsCall ("Prelude",":") [Lit (Charc  '`'),Comb ConsCall ("Prelude","[]") []]]])])] (Comb FuncCall ("Pretty","text") [Var 7]))])])),Func ("PrettyAbstract","typesDoc") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("AbstractCurry","CTypeDecl") []]) (TCons ("Pretty","Doc") []))) (Rule [1] (Comb FuncCall ("Prelude",".") [Comb FuncCall ("Pretty","vcat") [],Comb (FuncPartCall 1) ("Prelude","map") [Comb (FuncPartCall 1) ("PrettyAbstract","typeDoc") [Var 1]]])),Func ("PrettyAbstract","typeDoc") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("AbstractCurry","CTypeDecl") []) (TCons ("Pretty","Doc") []))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("AbstractCurry","CType") [3,4,5,6]) (Comb FuncCall ("PrettyAbstract","def") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","<+>") [],Comb FuncCall ("Pretty","text") [Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude","[]") []]]]]]],Comb FuncCall ("PrettyAbstract","qname") [Var 1,Var 3]],Var 5,Comb FuncCall ("PrettyAbstract","consDeclsDoc") [Var 1,Var 6]]),Branch (Pattern ("AbstractCurry","CTypeSyn") [7,8,9,10]) (Comb FuncCall ("PrettyAbstract","def") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","<+>") [],Comb FuncCall ("Pretty","text") [Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]],Comb FuncCall ("PrettyAbstract","qname") [Var 1,Var 7]],Var 9,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","<+>") [],Comb FuncCall ("Pretty","equals") []],Comb FuncCall ("PrettyAbstract","typeExprDoc") [Var 1,Lit (Intc  0),Var 10]]])])),Func ("PrettyAbstract","consDeclsDoc") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("AbstractCurry","CConsDecl") []]) (TCons ("Pretty","Doc") []))) (Rule [1,2] (Case  Rigid (Comb FuncCall ("Prelude","null") [Var 2]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Pretty","empty") []),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Pretty","fillEncloseSep") [Comb FuncCall ("Pretty","<>") [Comb FuncCall ("Pretty","equals") [],Comb FuncCall ("Pretty","space") []],Comb FuncCall ("Pretty","empty") [],Comb FuncCall ("Pretty","<>") [Comb FuncCall ("PrettyAbstract","bar") [],Comb FuncCall ("Pretty","space") []]],Comb FuncCall ("Prelude","map") [Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","flip") [Comb (FuncPartCall 2) ("Pretty","<>") [],Comb FuncCall ("Pretty","space") []],Comb (FuncPartCall 1) ("PrettyAbstract","consDeclDoc") [Var 1]],Var 2]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])),Func ("PrettyAbstract","consDeclDoc") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("AbstractCurry","CConsDecl") []) (TCons ("Pretty","Doc") []))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("AbstractCurry","CCons") [3,4,5,6]) (Comb FuncCall ("PrettyAbstract","app") [Comb FuncCall ("PrettyAbstract","qname") [Var 1,Var 3],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("PrettyAbstract","typeExprDoc") [Var 1,Lit (Intc  2)],Var 6]])])),Func ("PrettyAbstract","typeExprDoc") 3 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("AbstractCurry","CTypeExpr") []) (TCons ("Pretty","Doc") [])))) (Rule [1,2,3] (Case  Flex (Var 3) [Branch (Pattern ("AbstractCurry","CTVar") [4]) (Comb FuncCall ("PrettyAbstract","tvarDoc") [Var 4]),Branch (Pattern ("AbstractCurry","CTCons") [5,6]) (Case  Rigid (Comb FuncCall ("Prelude","null") [Var 6]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("PrettyAbstract","qname") [Var 1,Var 5]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 5,Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("PrettyAbstract","prelude") [],Comb ConsCall ("Prelude",":") [Lit (Charc  '['),Comb ConsCall ("Prelude",":") [Lit (Charc  ']'),Comb ConsCall ("Prelude","[]") []]]]]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","brackets") [],Comb FuncCall ("PrettyAbstract","typeExprDoc") [Var 1,Lit (Intc  0),Comb FuncCall ("Prelude","head") [Var 6]]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("PrettyAbstract","isTupleName") [Var 5]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","tupled") [],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("PrettyAbstract","typeExprDoc") [Var 1,Lit (Intc  0)],Var 6]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","$") [Case  Rigid (Comb FuncCall ("Prelude","==") [Var 2,Lit (Intc  2)]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Pretty","parens") []),Branch (Pattern ("Prelude","False") []) (Comb (FuncPartCall 1) ("Prelude","id") [])],Comb FuncCall ("PrettyAbstract","app") [Comb FuncCall ("PrettyAbstract","qname") [Var 1,Var 5],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("PrettyAbstract","typeExprDoc") [Var 1,Lit (Intc  2)],Var 6]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])]),Branch (Pattern ("AbstractCurry","CFuncType") [7,8]) (Comb FuncCall ("Prelude","$") [Case  Rigid (Comb FuncCall ("Prelude",">") [Var 2,Lit (Intc  0)]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Pretty","parens") []),Branch (Pattern ("Prelude","False") []) (Comb (FuncPartCall 1) ("Prelude","id") [])],Comb FuncCall ("Pretty","fillEncloseSep") [Comb FuncCall ("Pretty","empty") [],Comb FuncCall ("Pretty","empty") [],Comb FuncCall ("Pretty","<>") [Comb FuncCall ("Pretty","<>") [Comb FuncCall ("Pretty","space") [],Comb FuncCall ("PrettyAbstract","arrow") []],Comb FuncCall ("Pretty","space") []],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("PrettyAbstract","typeExprDoc") [Var 1,Lit (Intc  1)],Comb FuncCall ("PrettyAbstract","argTypes") [Var 3]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("PrettyAbstract","typeExprDoc") [Var 1,Lit (Intc  0),Comb FuncCall ("PrettyAbstract","resultType") [Var 3]],Comb ConsCall ("Prelude","[]") []]]]])])),Func ("PrettyAbstract","isUntyped") 1 Private (FuncType (TCons ("AbstractCurry","CTypeExpr") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Case  Rigid (Var 1) [Branch (Pattern ("AbstractCurry","CTCons") [2,3]) (Case  Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Case  Rigid (Var 4) [Branch (Pattern ("Prelude",":") [6,7]) (Let [(8,Var 6)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 8,Lit (Charc  'P')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 7) [Branch (Pattern ("Prelude",":") [9,10]) (Let [(11,Var 9)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 11,Lit (Charc  'r')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 10) [Branch (Pattern ("Prelude",":") [12,13]) (Let [(14,Var 12)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 14,Lit (Charc  'e')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 13) [Branch (Pattern ("Prelude",":") [15,16]) (Let [(17,Var 15)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 17,Lit (Charc  'l')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 16) [Branch (Pattern ("Prelude",":") [18,19]) (Let [(20,Var 18)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 20,Lit (Charc  'u')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 19) [Branch (Pattern ("Prelude",":") [21,22]) (Let [(23,Var 21)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 23,Lit (Charc  'd')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 22) [Branch (Pattern ("Prelude",":") [24,25]) (Let [(26,Var 24)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 26,Lit (Charc  'e')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 25) [Branch (Pattern ("Prelude","[]") []) (Case  Rigid (Var 5) [Branch (Pattern ("Prelude",":") [27,28]) (Let [(29,Var 27)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 29,Lit (Charc  'u')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 28) [Branch (Pattern ("Prelude",":") [30,31]) (Let [(32,Var 30)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 32,Lit (Charc  'n')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 31) [Branch (Pattern ("Prelude",":") [33,34]) (Let [(35,Var 33)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 35,Lit (Charc  't')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 34) [Branch (Pattern ("Prelude",":") [36,37]) (Let [(38,Var 36)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 38,Lit (Charc  'y')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 37) [Branch (Pattern ("Prelude",":") [39,40]) (Let [(41,Var 39)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 41,Lit (Charc  'p')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 40) [Branch (Pattern ("Prelude",":") [42,43]) (Let [(44,Var 42)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 44,Lit (Charc  'e')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 43) [Branch (Pattern ("Prelude",":") [45,46]) (Let [(47,Var 45)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 47,Lit (Charc  'd')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 46) [Branch (Pattern ("Prelude","[]") []) (Case  Rigid (Var 3) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Prelude",":") [48,49]) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Prelude",":") [50,51]) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","False") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","False") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","False") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","False") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","False") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","False") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","False") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Prelude",":") [52,53]) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","False") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","False") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","False") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","False") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","False") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","False") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","False") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","False") [])])]),Branch (Pattern ("AbstractCurry","CTVar") [54]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractCurry","CFuncType") [55,56]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractCurry","CRecordType") [57,58]) (Comb ConsCall ("Prelude","False") [])])),Func ("PrettyAbstract","funcsDoc") 3 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","(,)") [TCons ("AbstractCurry","CFixity") [],TCons ("Prelude","Int") []]]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("AbstractCurry","CFuncDecl") []]) (TCons ("Pretty","Doc") [])))) (Rule [1,2,3] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","vcat") [],Comb FuncCall ("Pretty","punctuate") [Comb FuncCall ("Pretty","line") [],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("PrettyAbstract","funcDoc") [Var 1,Var 2],Var 3]]])),Func ("PrettyAbstract","funcDoc") 3 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","(,)") [TCons ("AbstractCurry","CFixity") [],TCons ("Prelude","Int") []]]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("AbstractCurry","CFuncDecl") []) (TCons ("Pretty","Doc") [])))) (Rule [1,2,3] (Case  Flex (Var 3) [Branch (Pattern ("AbstractCurry","CFunc") [4,5,6,7,8]) (Comb FuncCall ("Pretty","<>") [Comb FuncCall ("Pretty","<>") [Case  Rigid (Comb FuncCall ("PrettyAbstract","hasRec") [Var 7]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Pretty","text") [Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude","[]") []]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Pretty","empty") [])],Case  Rigid (Comb FuncCall ("PrettyAbstract","isUntyped") [Var 7]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Pretty","empty") []),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","<$>") [],Comb FuncCall ("PrettyAbstract","funcTypeDeclDoc") [Var 2,Var 4,Var 7]],Comb FuncCall ("Pretty","empty") []])]],Comb FuncCall ("PrettyAbstract","rulesDoc") [Var 1,Var 2,Var 4,Var 8]]),Branch (Pattern ("AbstractCurry","CmtFunc") [9,10,11,12,13,14]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","<$>") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","vsep") [],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("PrettyAbstract","funcDoc._#lambda8") [],Comb FuncCall ("Prelude","lines") [Var 9]]]],Comb FuncCall ("PrettyAbstract","funcDoc") [Var 1,Var 2,Comb ConsCall ("AbstractCurry","CFunc") [Var 10,Var 11,Var 12,Var 13,Var 14]]])])),Func ("PrettyAbstract","funcDoc._#lambda8") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Pretty","Doc") [])) (Rule [1] (Comb FuncCall ("Pretty","text") [Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]],Var 1]])),Func ("PrettyAbstract","hasRec") 1 Private (FuncType (TCons ("AbstractCurry","CTypeExpr") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("AbstractCurry","CTVar") [2]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractCurry","CFuncType") [3,4]) (Comb FuncCall ("Prelude","||") [Comb FuncCall ("PrettyAbstract","hasRec") [Var 3],Comb FuncCall ("PrettyAbstract","hasRec") [Var 4]]),Branch (Pattern ("AbstractCurry","CTCons") [5,6]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","any") [Comb (FuncPartCall 1) ("PrettyAbstract","hasRec") []],Var 6])])),Func ("PrettyAbstract","localDeclsDoc") 3 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","(,)") [TCons ("AbstractCurry","CFixity") [],TCons ("Prelude","Int") []]]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("AbstractCurry","CLocalDecl") []]) (TCons ("Pretty","Doc") [])))) (Rule [1,2,3] (Comb FuncCall ("Prelude","$") [Comb FuncCall ("Pretty","align") [],Comb FuncCall ("Prelude","$") [Comb FuncCall ("Pretty","vsep") [],Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Pretty","punctuate") [Comb FuncCall ("Pretty","line") []],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("PrettyAbstract","localDeclDoc") [Var 1,Var 2],Var 3]]]])),Func ("PrettyAbstract","localDeclDoc") 3 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","(,)") [TCons ("AbstractCurry","CFixity") [],TCons ("Prelude","Int") []]]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("AbstractCurry","CLocalDecl") []) (TCons ("Pretty","Doc") [])))) (Rule [1,2,3] (Case  Flex (Var 3) [Branch (Pattern ("AbstractCurry","CLocalFunc") [4]) (Comb FuncCall ("PrettyAbstract","funcDoc") [Var 1,Var 2,Var 4]),Branch (Pattern ("AbstractCurry","CLocalPat") [5,6,7]) (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Pretty","hang") [Lit (Intc  1)],Comb FuncCall ("Pretty","<>") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","<+>") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","<+>") [],Comb FuncCall ("PrettyAbstract","patternDoc") [Var 2,Var 5]],Comb FuncCall ("Pretty","equals") []]],Comb FuncCall ("PrettyAbstract","expDoc") [Comb FuncCall ("Prelude","unknown") [],Var 1,Comb ConsCall ("Prelude","Nothing") [],Var 2,Var 6]],Case  Rigid (Comb FuncCall ("Prelude","null") [Var 7]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Pretty","empty") []),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","<+>") [],Comb FuncCall ("Pretty","<>") [Comb FuncCall ("Pretty","line") [],Comb FuncCall ("Pretty","text") [Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]]],Comb FuncCall ("PrettyAbstract","localDeclsDoc") [Var 1,Var 2,Var 7]])]]]),Branch (Pattern ("AbstractCurry","CLocalVar") [8]) (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Pretty","hang") [Lit (Intc  1)],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","<+>") [],Comb FuncCall ("PrettyAbstract","tvarDoc") [Var 8]],Comb FuncCall ("Pretty","text") [Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]])])),Func ("PrettyAbstract","funcTypeDeclDoc") 3 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("AbstractCurry","CTypeExpr") []) (TCons ("Pretty","Doc") [])))) (Rule [1,2,3] (Comb FuncCall ("PrettyAbstract","def") [Comb FuncCall ("PrettyAbstract","qname") [Var 1,Var 2],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("PrettyAbstract","funcTypeDoc") [Var 1,Comb FuncCall ("PrettyAbstract","argTypes") [Var 3],Comb FuncCall ("PrettyAbstract","resultType") [Var 3]]])),Func ("PrettyAbstract","funcTypeDoc") 3 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("AbstractCurry","CTypeExpr") []]) (FuncType (TCons ("AbstractCurry","CTypeExpr") []) (TCons ("Pretty","Doc") [])))) (Rule [1,2,3] (Comb FuncCall ("Pretty","fillEncloseSep") [Comb FuncCall ("PrettyAbstract","dcolon") [],Comb FuncCall ("Pretty","empty") [],Comb FuncCall ("Pretty","<>") [Comb FuncCall ("Pretty","space") [],Comb FuncCall ("PrettyAbstract","arrow") []],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","map") [Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Pretty","<>") [Comb FuncCall ("Pretty","space") []],Comb (FuncPartCall 1) ("PrettyAbstract","typeExprDoc") [Var 1,Lit (Intc  1)]],Var 2],Comb FuncCall ("Prelude","map") [Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Pretty","<>") [Comb FuncCall ("Pretty","space") []],Comb (FuncPartCall 1) ("PrettyAbstract","typeExprDoc") [Var 1,Lit (Intc  1)]],Comb ConsCall ("Prelude",":") [Var 3,Comb ConsCall ("Prelude","[]") []]]]])),Func ("PrettyAbstract","rulesDoc") 4 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","(,)") [TCons ("AbstractCurry","CFixity") [],TCons ("Prelude","Int") []]]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("AbstractCurry","CRules") []) (TCons ("Pretty","Doc") []))))) (Rule [1,2,3,4] (Case  Flex (Var 4) [Branch (Pattern ("AbstractCurry","CRules") [5,6]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","vsep") [],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("PrettyAbstract","ruleDoc") [Var 1,Var 2,Var 3],Var 6]]),Branch (Pattern ("AbstractCurry","CExternal") [7]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","<+>") [],Comb FuncCall ("PrettyAbstract","qname") [Var 2,Var 3]],Comb FuncCall ("Pretty","text") [Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]])])),Func ("PrettyAbstract","ruleDoc") 4 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","(,)") [TCons ("AbstractCurry","CFixity") [],TCons ("Prelude","Int") []]]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("AbstractCurry","CRule") []) (TCons ("Pretty","Doc") []))))) (Rule [1,2,3,4] (Case  Flex (Var 4) [Branch (Pattern ("AbstractCurry","CRule") [5,6,7]) (Let [(8,Case  Rigid (Comb FuncCall ("Prelude","null") [Var 5]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Pretty","empty") []),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Pretty","<>") [Comb FuncCall ("Pretty","space") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("PrettyAbstract","patternsDoc") [Var 2],Var 5]])]),(9,Case  Rigid (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("PrettyAbstract","isInfixName") [Var 3],Comb FuncCall ("Prelude","==") [Comb FuncCall ("Prelude","length") [Var 5],Lit (Intc  2)]]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","<+>") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","<+>") [],Comb FuncCall ("PrettyAbstract","patternDoc") [Var 2,Comb FuncCall ("Prelude","!!") [Var 5,Lit (Intc  0)]]],Comb FuncCall ("Pretty","text") [Comb FuncCall ("Prelude","snd") [Var 3]]]],Comb FuncCall ("PrettyAbstract","patternDoc") [Var 2,Comb FuncCall ("Prelude","!!") [Var 5,Lit (Intc  1)]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Pretty","<>") [Comb FuncCall ("PrettyAbstract","qname") [Var 2,Var 3],Var 8])]),(10,Case  Rigid (Comb FuncCall ("Prelude","null") [Var 7]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Pretty","empty") []),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","<+>") [],Comb FuncCall ("Pretty","<>") [Comb FuncCall ("Pretty","line") [],Comb FuncCall ("Pretty","text") [Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]]],Comb FuncCall ("PrettyAbstract","localDeclsDoc") [Var 1,Var 2,Var 7]])])] (Case  Rigid (Comb FuncCall ("Prelude","==") [Comb FuncCall ("Prelude","fst") [Comb FuncCall ("Prelude","head") [Var 6]],Comb ConsCall ("AbstractCurry","CSymbol") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Pretty","hang") [Lit (Intc  2)],Comb FuncCall ("Pretty","<>") [Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Pretty","group") [],Comb FuncCall ("Pretty","hang") [Lit (Intc  2),Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","<$>") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","<+>") [],Var 9],Comb FuncCall ("Pretty","equals") []]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","align") [],Comb FuncCall ("PrettyAbstract","expDoc") [Comb FuncCall ("Prelude","unknown") [],Var 1,Comb ConsCall ("Prelude","Nothing") [],Var 2,Comb FuncCall ("Prelude","snd") [Comb FuncCall ("Prelude","head") [Var 6]]]]]]],Var 10]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Pretty","hang") [Lit (Intc  2),Comb FuncCall ("Pretty","<>") [Comb FuncCall ("Pretty","hang") [Lit (Intc  2),Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","<$>") [],Var 9],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","align") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","vsep") [],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("PrettyAbstract","ruleDoc.choiceDoc.285") [Var 2,Var 1],Var 6]]]]],Var 10]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])]))])),Func ("PrettyAbstract","ruleDoc.choiceDoc.285") 3 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","(,)") [TCons ("AbstractCurry","CFixity") [],TCons ("Prelude","Int") []]]]) (FuncType (TCons ("Prelude","(,)") [TCons ("AbstractCurry","CExpr") [],TCons ("AbstractCurry","CExpr") []]) (TCons ("Pretty","Doc") [])))) (Rule [1,2,3] (Case  Flex (Var 3) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","<+>") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","<+>") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","<+>") [],Comb FuncCall ("Pretty","text") [Comb ConsCall ("Prelude",":") [Lit (Charc  '|'),Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","align") [],Comb FuncCall ("PrettyAbstract","expDoc") [Comb FuncCall ("Prelude","unknown") [],Var 2,Comb ConsCall ("Prelude","Nothing") [],Var 1,Var 4]]]],Comb FuncCall ("Pretty","equals") []]],Comb FuncCall ("PrettyAbstract","expDoc") [Comb FuncCall ("Prelude","unknown") [],Var 2,Comb ConsCall ("Prelude","Nothing") [],Var 1,Var 5]])])),Func ("PrettyAbstract","expDoc") 5 Private (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","(,)") [TCons ("AbstractCurry","CFixity") [],TCons ("Prelude","Int") []]]]) (FuncType (TCons ("Prelude","Maybe") [TCons ("Prelude","(,)") [TCons ("AbstractCurry","CFixity") [],TCons ("Prelude","Int") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("AbstractCurry","CExpr") []) (TCons ("Pretty","Doc") [])))))) (Rule [1,2,3,4,5] (Comb FuncCall ("Prelude","maybe") [Comb FuncCall ("Prelude","maybe") [Comb FuncCall ("PrettyAbstract","expDoc2") [Var 1,Var 2,Var 3,Var 4,Var 5],Comb (FuncPartCall 1) ("PrettyAbstract","expDoc._#lambda9") [Var 4,Var 2],Comb FuncCall ("PrettyAbstract","toList") [Var 5]],Comb (FuncPartCall 1) ("PrettyAbstract","expDoc._#lambda10") [],Comb FuncCall ("PrettyAbstract","toString") [Var 5]])),Func ("PrettyAbstract","expDoc._#lambda9") 3 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","(,)") [TCons ("AbstractCurry","CFixity") [],TCons ("Prelude","Int") []]]]) (FuncType (TCons ("Prelude","[]") [TCons ("AbstractCurry","CExpr") []]) (TCons ("Pretty","Doc") [])))) (Rule [1,2,3] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","list") [],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("PrettyAbstract","expDoc") [Comb FuncCall ("Prelude","unknown") [],Var 2,Comb ConsCall ("Prelude","Nothing") [],Var 1],Var 3]])),Func ("PrettyAbstract","expDoc._#lambda10") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Pretty","Doc") [])) (Rule [1] (Case  Rigid (Comb FuncCall ("Prelude","null") [Var 1]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Pretty","text") [Comb ConsCall ("Prelude",":") [Lit (Charc  '['),Comb ConsCall ("Prelude",":") [Lit (Charc  ']'),Comb ConsCall ("Prelude","[]") []]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","dquotes") [],Comb FuncCall ("Pretty","text") [Var 1]])])),Func ("PrettyAbstract","toList") 1 Private (FuncType (TCons ("AbstractCurry","CExpr") []) (TCons ("Prelude","Maybe") [TCons ("Prelude","[]") [TCons ("AbstractCurry","CExpr") []]])) (Rule [1] (Case  Rigid (Var 1) [Branch (Pattern ("AbstractCurry","CSymbol") [2]) (Case  Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [3,4]) (Case  Rigid (Var 3) [Branch (Pattern ("Prelude",":") [5,6]) (Let [(7,Var 5)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 7,Lit (Charc  'P')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 6) [Branch (Pattern ("Prelude",":") [8,9]) (Let [(10,Var 8)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 10,Lit (Charc  'r')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 9) [Branch (Pattern ("Prelude",":") [11,12]) (Let [(13,Var 11)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 13,Lit (Charc  'e')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 12) [Branch (Pattern ("Prelude",":") [14,15]) (Let [(16,Var 14)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 16,Lit (Charc  'l')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 15) [Branch (Pattern ("Prelude",":") [17,18]) (Let [(19,Var 17)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 19,Lit (Charc  'u')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 18) [Branch (Pattern ("Prelude",":") [20,21]) (Let [(22,Var 20)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 22,Lit (Charc  'd')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 21) [Branch (Pattern ("Prelude",":") [23,24]) (Let [(25,Var 23)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 25,Lit (Charc  'e')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 24) [Branch (Pattern ("Prelude","[]") []) (Case  Rigid (Var 4) [Branch (Pattern ("Prelude",":") [26,27]) (Let [(28,Var 26)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 28,Lit (Charc  '[')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 27) [Branch (Pattern ("Prelude",":") [29,30]) (Let [(31,Var 29)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 31,Lit (Charc  ']')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 30) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","Just") [Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude",":") [32,33]) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","Nothing") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","Nothing") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("Prelude",":") [34,35]) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","Nothing") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","Nothing") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","Nothing") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","Nothing") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","Nothing") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","Nothing") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","Nothing") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","Nothing") [])])]),Branch (Pattern ("AbstractCurry","CApply") [36,37]) (Case  Rigid (Var 36) [Branch (Pattern ("AbstractCurry","CApply") [38,39]) (Case  Rigid (Var 38) [Branch (Pattern ("AbstractCurry","CSymbol") [40]) (Case  Rigid (Var 40) [Branch (Pattern ("Prelude","(,)") [41,42]) (Case  Rigid (Var 41) [Branch (Pattern ("Prelude",":") [43,44]) (Let [(45,Var 43)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 45,Lit (Charc  'P')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 44) [Branch (Pattern ("Prelude",":") [46,47]) (Let [(48,Var 46)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 48,Lit (Charc  'r')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 47) [Branch (Pattern ("Prelude",":") [49,50]) (Let [(51,Var 49)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 51,Lit (Charc  'e')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 50) [Branch (Pattern ("Prelude",":") [52,53]) (Let [(54,Var 52)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 54,Lit (Charc  'l')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 53) [Branch (Pattern ("Prelude",":") [55,56]) (Let [(57,Var 55)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 57,Lit (Charc  'u')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 56) [Branch (Pattern ("Prelude",":") [58,59]) (Let [(60,Var 58)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 60,Lit (Charc  'd')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 59) [Branch (Pattern ("Prelude",":") [61,62]) (Let [(63,Var 61)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 63,Lit (Charc  'e')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 62) [Branch (Pattern ("Prelude","[]") []) (Case  Rigid (Var 42) [Branch (Pattern ("Prelude",":") [64,65]) (Let [(66,Var 64)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 66,Lit (Charc  ':')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 65) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Maybe",">>-") [Comb FuncCall ("PrettyAbstract","toList") [Var 37],Comb FuncCall ("Prelude",".") [Comb (ConsPartCall 1) ("Prelude","Just") [],Comb (ConsPartCall 1) ("Prelude",":") [Var 39]]]),Branch (Pattern ("Prelude",":") [67,68]) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","Nothing") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("Prelude",":") [69,70]) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","Nothing") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","Nothing") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","Nothing") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","Nothing") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","Nothing") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","Nothing") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","Nothing") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","Nothing") [])])]),Branch (Pattern ("AbstractCurry","CVar") [71]) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("AbstractCurry","CLit") [72]) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("AbstractCurry","CApply") [73,74]) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("AbstractCurry","CLambda") [75,76]) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("AbstractCurry","CLetDecl") [77,78]) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("AbstractCurry","CDoExpr") [79]) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("AbstractCurry","CListComp") [80,81]) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("AbstractCurry","CCase") [82,83]) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("AbstractCurry","CRecConstr") [84]) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("AbstractCurry","CRecSelect") [85,86]) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("AbstractCurry","CRecUpdate") [87,88]) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("AbstractCurry","CVar") [89]) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("AbstractCurry","CLit") [90]) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("AbstractCurry","CSymbol") [91]) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("AbstractCurry","CLambda") [92,93]) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("AbstractCurry","CLetDecl") [94,95]) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("AbstractCurry","CDoExpr") [96]) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("AbstractCurry","CListComp") [97,98]) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("AbstractCurry","CCase") [99,100]) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("AbstractCurry","CRecConstr") [101]) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("AbstractCurry","CRecSelect") [102,103]) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("AbstractCurry","CRecUpdate") [104,105]) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("AbstractCurry","CVar") [106]) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("AbstractCurry","CLit") [107]) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("AbstractCurry","CLambda") [108,109]) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("AbstractCurry","CLetDecl") [110,111]) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("AbstractCurry","CDoExpr") [112]) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("AbstractCurry","CListComp") [113,114]) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("AbstractCurry","CCase") [115,116]) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("AbstractCurry","CRecConstr") [117]) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("AbstractCurry","CRecSelect") [118,119]) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("AbstractCurry","CRecUpdate") [120,121]) (Comb ConsCall ("Prelude","Nothing") [])])),Func ("PrettyAbstract","toString") 1 Private (FuncType (TCons ("AbstractCurry","CExpr") []) (TCons ("Prelude","Maybe") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Rigid (Var 1) [Branch (Pattern ("AbstractCurry","CSymbol") [2]) (Case  Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [3,4]) (Case  Rigid (Var 3) [Branch (Pattern ("Prelude",":") [5,6]) (Let [(7,Var 5)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 7,Lit (Charc  'P')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 6) [Branch (Pattern ("Prelude",":") [8,9]) (Let [(10,Var 8)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 10,Lit (Charc  'r')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 9) [Branch (Pattern ("Prelude",":") [11,12]) (Let [(13,Var 11)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 13,Lit (Charc  'e')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 12) [Branch (Pattern ("Prelude",":") [14,15]) (Let [(16,Var 14)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 16,Lit (Charc  'l')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 15) [Branch (Pattern ("Prelude",":") [17,18]) (Let [(19,Var 17)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 19,Lit (Charc  'u')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 18) [Branch (Pattern ("Prelude",":") [20,21]) (Let [(22,Var 20)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 22,Lit (Charc  'd')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 21) [Branch (Pattern ("Prelude",":") [23,24]) (Let [(25,Var 23)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 25,Lit (Charc  'e')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 24) [Branch (Pattern ("Prelude","[]") []) (Case  Rigid (Var 4) [Branch (Pattern ("Prelude",":") [26,27]) (Let [(28,Var 26)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 28,Lit (Charc  '[')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 27) [Branch (Pattern ("Prelude",":") [29,30]) (Let [(31,Var 29)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 31,Lit (Charc  ']')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 30) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","Just") [Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude",":") [32,33]) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","Nothing") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","Nothing") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("Prelude",":") [34,35]) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","Nothing") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","Nothing") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","Nothing") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","Nothing") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","Nothing") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","Nothing") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","Nothing") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","Nothing") [])])]),Branch (Pattern ("AbstractCurry","CApply") [36,37]) (Case  Rigid (Var 36) [Branch (Pattern ("AbstractCurry","CApply") [38,39]) (Case  Rigid (Var 38) [Branch (Pattern ("AbstractCurry","CSymbol") [40]) (Case  Rigid (Var 40) [Branch (Pattern ("Prelude","(,)") [41,42]) (Case  Rigid (Var 41) [Branch (Pattern ("Prelude",":") [43,44]) (Let [(45,Var 43)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 45,Lit (Charc  'P')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 44) [Branch (Pattern ("Prelude",":") [46,47]) (Let [(48,Var 46)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 48,Lit (Charc  'r')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 47) [Branch (Pattern ("Prelude",":") [49,50]) (Let [(51,Var 49)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 51,Lit (Charc  'e')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 50) [Branch (Pattern ("Prelude",":") [52,53]) (Let [(54,Var 52)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 54,Lit (Charc  'l')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 53) [Branch (Pattern ("Prelude",":") [55,56]) (Let [(57,Var 55)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 57,Lit (Charc  'u')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 56) [Branch (Pattern ("Prelude",":") [58,59]) (Let [(60,Var 58)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 60,Lit (Charc  'd')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 59) [Branch (Pattern ("Prelude",":") [61,62]) (Let [(63,Var 61)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 63,Lit (Charc  'e')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 62) [Branch (Pattern ("Prelude","[]") []) (Case  Rigid (Var 42) [Branch (Pattern ("Prelude",":") [64,65]) (Let [(66,Var 64)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 66,Lit (Charc  ':')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 65) [Branch (Pattern ("Prelude","[]") []) (Case  Rigid (Var 39) [Branch (Pattern ("AbstractCurry","CLit") [67]) (Case  Rigid (Var 67) [Branch (Pattern ("AbstractCurry","CCharc") [68]) (Comb FuncCall ("Maybe",">>-") [Comb FuncCall ("PrettyAbstract","toString") [Var 37],Comb FuncCall ("Prelude",".") [Comb (ConsPartCall 1) ("Prelude","Just") [],Comb (FuncPartCall 1) ("Prelude","++") [Comb FuncCall ("PrettyAbstract","quoteChar") [Var 68]]]]),Branch (Pattern ("AbstractCurry","CIntc") [69]) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("AbstractCurry","CFloatc") [70]) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("AbstractCurry","CVar") [71]) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("AbstractCurry","CSymbol") [72]) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("AbstractCurry","CApply") [73,74]) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("AbstractCurry","CLambda") [75,76]) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("AbstractCurry","CLetDecl") [77,78]) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("AbstractCurry","CDoExpr") [79]) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("AbstractCurry","CListComp") [80,81]) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("AbstractCurry","CCase") [82,83]) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("AbstractCurry","CRecConstr") [84]) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("AbstractCurry","CRecSelect") [85,86]) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("AbstractCurry","CRecUpdate") [87,88]) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("Prelude",":") [89,90]) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","Nothing") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("Prelude",":") [91,92]) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","Nothing") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","Nothing") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","Nothing") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","Nothing") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","Nothing") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","Nothing") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","Nothing") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","Nothing") [])])]),Branch (Pattern ("AbstractCurry","CVar") [93]) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("AbstractCurry","CLit") [94]) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("AbstractCurry","CApply") [95,96]) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("AbstractCurry","CLambda") [97,98]) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("AbstractCurry","CLetDecl") [99,100]) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("AbstractCurry","CDoExpr") [101]) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("AbstractCurry","CListComp") [102,103]) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("AbstractCurry","CCase") [104,105]) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("AbstractCurry","CRecConstr") [106]) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("AbstractCurry","CRecSelect") [107,108]) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("AbstractCurry","CRecUpdate") [109,110]) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("AbstractCurry","CVar") [111]) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("AbstractCurry","CLit") [112]) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("AbstractCurry","CSymbol") [113]) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("AbstractCurry","CLambda") [114,115]) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("AbstractCurry","CLetDecl") [116,117]) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("AbstractCurry","CDoExpr") [118]) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("AbstractCurry","CListComp") [119,120]) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("AbstractCurry","CCase") [121,122]) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("AbstractCurry","CRecConstr") [123]) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("AbstractCurry","CRecSelect") [124,125]) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("AbstractCurry","CRecUpdate") [126,127]) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("AbstractCurry","CVar") [128]) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("AbstractCurry","CLit") [129]) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("AbstractCurry","CLambda") [130,131]) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("AbstractCurry","CLetDecl") [132,133]) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("AbstractCurry","CDoExpr") [134]) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("AbstractCurry","CListComp") [135,136]) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("AbstractCurry","CCase") [137,138]) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("AbstractCurry","CRecConstr") [139]) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("AbstractCurry","CRecSelect") [140,141]) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("AbstractCurry","CRecUpdate") [142,143]) (Comb ConsCall ("Prelude","Nothing") [])])),Func ("PrettyAbstract","expDoc2") 5 Private (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","(,)") [TCons ("AbstractCurry","CFixity") [],TCons ("Prelude","Int") []]]]) (FuncType (TCons ("Prelude","Maybe") [TCons ("Prelude","(,)") [TCons ("AbstractCurry","CFixity") [],TCons ("Prelude","Int") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("AbstractCurry","CExpr") []) (TCons ("Pretty","Doc") [])))))) (Rule [1,2,3,4,5] (Case  Flex (Var 5) [Branch (Pattern ("AbstractCurry","CVar") [6]) (Comb FuncCall ("Pretty","<>") [Comb FuncCall ("PrettyAbstract","showPrecs") [Var 6,Var 3],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("PrettyAbstract","varDoc") [],Var 6]]),Branch (Pattern ("AbstractCurry","CLit") [7]) (Comb FuncCall ("Pretty","<>") [Comb FuncCall ("PrettyAbstract","showPrecs") [Var 7,Var 3],Comb FuncCall ("PrettyAbstract","litDoc") [Var 7]]),Branch (Pattern ("AbstractCurry","CSymbol") [8]) (Comb FuncCall ("Pretty","<>") [Comb FuncCall ("PrettyAbstract","showPrecs") [Var 8,Var 3],Comb FuncCall ("PrettyAbstract","qname") [Var 4,Var 8]]),Branch (Pattern ("AbstractCurry","CLetDecl") [9,10]) (Comb FuncCall ("Prelude","$") [Comb FuncCall ("PrettyAbstract","par") [Var 3],Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Pretty","hang") [Lit (Intc  1)],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","<+>") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","<$>") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","<+>") [],Comb FuncCall ("Pretty","text") [Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude","[]") []]]]]],Comb FuncCall ("PrettyAbstract","localDeclsDoc") [Var 2,Var 4,Var 9]]],Comb FuncCall ("Pretty","text") [Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude","[]") []]]]]],Comb FuncCall ("PrettyAbstract","expDoc") [Comb FuncCall ("Prelude","unknown") [],Var 2,Comb ConsCall ("Prelude","Nothing") [],Var 4,Var 10]]]]),Branch (Pattern ("AbstractCurry","CCase") [11,12]) (Comb FuncCall ("Prelude","$") [Comb FuncCall ("PrettyAbstract","par") [Var 3],Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Pretty","hang") [Lit (Intc  1)],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","<$>") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","<+>") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","<+>") [],Comb FuncCall ("Pretty","text") [Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","align") [],Comb FuncCall ("PrettyAbstract","expDoc") [Comb FuncCall ("Prelude","unknown") [],Var 2,Comb ConsCall ("Prelude","Nothing") [],Var 4,Var 11]]]],Comb FuncCall ("Pretty","text") [Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude","[]") []]]]]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("PrettyAbstract","layout") [],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("PrettyAbstract","branchDoc") [Var 2,Var 4],Var 12]]]]]),Branch (Pattern ("AbstractCurry","CLambda") [13,14]) (Comb FuncCall ("Prelude","$") [Comb FuncCall ("PrettyAbstract","par") [Var 3],Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Pretty","hang") [Lit (Intc  1)],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","<+>") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","<+>") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","<+>") [],Comb FuncCall ("Pretty","backslash") []],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("PrettyAbstract","patternsDoc") [Var 4],Var 13]]],Comb FuncCall ("PrettyAbstract","arrow") []]],Comb FuncCall ("PrettyAbstract","expDoc") [Comb FuncCall ("Prelude","unknown") [],Var 2,Comb ConsCall ("Prelude","Nothing") [],Var 4,Var 14]]]]),Branch (Pattern ("AbstractCurry","CApply") [15,16]) (Let [(17,Comb FuncCall ("PrettyAbstract","expDoc2.args.347") [Comb ConsCall ("AbstractCurry","CApply") [Var 15,Var 16]]),(18,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","<+>") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","<$>") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","<+>") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","<$>") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","<+>") [],Comb FuncCall ("Pretty","text") [Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","align") [],Comb FuncCall ("PrettyAbstract","expDoc") [Comb FuncCall ("Prelude","unknown") [],Var 2,Comb ConsCall ("Prelude","Nothing") [],Var 4,Comb FuncCall ("Prelude","!!") [Var 17,Lit (Intc  0)]]]]],Comb FuncCall ("Pretty","text") [Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","align") [],Comb FuncCall ("PrettyAbstract","expDoc") [Comb FuncCall ("Prelude","unknown") [],Var 2,Comb ConsCall ("Prelude","Nothing") [],Var 4,Comb FuncCall ("Prelude","!!") [Var 17,Lit (Intc  1)]]]]],Comb FuncCall ("Pretty","text") [Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","align") [],Comb FuncCall ("PrettyAbstract","expDoc") [Comb FuncCall ("Prelude","unknown") [],Var 2,Comb ConsCall ("Prelude","Nothing") [],Var 4,Comb FuncCall ("Prelude","!!") [Var 17,Lit (Intc  2)]]]]),(19,Case  Rigid (Comb FuncCall ("PrettyAbstract","expDoc2.name.347") [Comb ConsCall ("AbstractCurry","CApply") [Var 15,Var 16]]) [Branch (Pattern ("AbstractCurry","CSymbol") [20]) (Comb ConsCall ("Prelude","Just") [Var 20]),Branch (Pattern ("AbstractCurry","CVar") [21]) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("AbstractCurry","CLit") [22]) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("AbstractCurry","CApply") [23,24]) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("AbstractCurry","CLambda") [25,26]) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("AbstractCurry","CLetDecl") [27,28]) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("AbstractCurry","CDoExpr") [29]) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("AbstractCurry","CListComp") [30,31]) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("AbstractCurry","CCase") [32,33]) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("AbstractCurry","CRecConstr") [34]) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("AbstractCurry","CRecSelect") [35,36]) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("AbstractCurry","CRecUpdate") [37,38]) (Comb ConsCall ("Prelude","Nothing") [])]),(39,Comb FuncCall ("Prelude","maybe") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","[]") [],Comb ConsCall ("Prelude","[]") []],Comb (FuncPartCall 1) ("Prelude","id") [],Var 19]),(40,Case  Rigid (Comb FuncCall ("Maybe","isJust") [Var 3]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Pretty","lparen") [],Comb FuncCall ("Pretty","rparen") []]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Pretty","empty") [],Comb FuncCall ("Pretty","empty") []])]),(41,Comb FuncCall ("PrettyAbstract","expDoc2._#selFP2#lbr") [Var 40]),(42,Comb FuncCall ("PrettyAbstract","expDoc2._#selFP3#rbr") [Var 40]),(43,Case  Rigid (Comb FuncCall ("Prelude","lookup") [Var 39,Var 2]) [Branch (Pattern ("Prelude","Just") [44]) (Var 44),Branch (Pattern ("Prelude","Nothing") []) (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("AbstractCurry","CInfixlOp") [],Lit (Intc  9)])])] (Case  Rigid (Comb FuncCall ("Prelude","maybe") [Comb ConsCall ("Prelude","False") [],Comb (FuncPartCall 1) ("PrettyAbstract","isTupleName") [],Var 19]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","tupled") [],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("PrettyAbstract","expDoc") [Comb FuncCall ("Prelude","unknown") [],Var 2,Comb ConsCall ("Prelude","Nothing") [],Var 4],Var 17]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","maybe") [Comb ConsCall ("Prelude","False") [],Comb (FuncPartCall 1) ("PrettyAbstract","isInfixName") [],Var 19],Comb FuncCall ("Prelude","==") [Comb FuncCall ("Prelude","length") [Var 17],Lit (Intc  2)]]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Pretty","<>") [Comb FuncCall ("PrettyAbstract","showPrecs") [Comb FuncCall ("Prelude","snd") [Var 39],Comb ConsCall ("Prelude","(,,)") [Var 1,Var 43,Var 3]],Comb FuncCall ("Prelude","$") [Comb FuncCall ("Pretty","align") [],Comb FuncCall ("PrettyAbstract","precFillEncloseSep") [Var 1,Var 43,Var 3,Var 41,Var 42,Comb FuncCall ("Pretty","empty") [],Comb ConsCall ("Prelude",":") [Comb FuncCall ("PrettyAbstract","expDoc") [Comb ConsCall ("Prelude","True") [],Var 2,Comb ConsCall ("Prelude","Just") [Var 43],Var 4,Comb FuncCall ("Prelude","!!") [Var 17,Lit (Intc  0)]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("Pretty","<>") [Comb FuncCall ("Pretty","space") [],Comb FuncCall ("Pretty","text") [Comb FuncCall ("Prelude","snd") [Var 39]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("Pretty","<>") [Comb FuncCall ("Pretty","space") [],Comb FuncCall ("PrettyAbstract","expDoc") [Comb ConsCall ("Prelude","False") [],Var 2,Comb ConsCall ("Prelude","Just") [Var 43],Var 4,Comb FuncCall ("Prelude","!!") [Var 17,Lit (Intc  1)]]],Comb ConsCall ("Prelude","[]") []]]]]]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","maybe") [Comb ConsCall ("Prelude","False") [],Comb (FuncPartCall 1) ("PrettyAbstract","isInfixName") [],Var 19],Comb FuncCall ("Prelude",">") [Comb FuncCall ("Prelude","length") [Var 17],Lit (Intc  2)]]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","$") [Comb FuncCall ("PrettyAbstract","expDoc2.appPar.347") [Comb ConsCall ("Prelude","True") [],Var 3],Comb FuncCall ("PrettyAbstract","app") [Comb FuncCall ("Pretty","fillEncloseSep") [Comb FuncCall ("Pretty","lparen") [],Comb FuncCall ("Pretty","rparen") [],Comb FuncCall ("Pretty","empty") [],Comb ConsCall ("Prelude",":") [Comb FuncCall ("PrettyAbstract","expDoc") [Comb ConsCall ("Prelude","True") [],Var 2,Comb ConsCall ("Prelude","Just") [Var 43],Var 4,Comb FuncCall ("Prelude","!!") [Var 17,Lit (Intc  0)]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("Pretty","<>") [Comb FuncCall ("Pretty","space") [],Comb FuncCall ("Pretty","text") [Comb FuncCall ("Prelude","snd") [Var 39]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("Pretty","<>") [Comb FuncCall ("Pretty","space") [],Comb FuncCall ("PrettyAbstract","expDoc") [Comb ConsCall ("Prelude","False") [],Var 2,Comb ConsCall ("Prelude","Just") [Var 43],Var 4,Comb FuncCall ("Prelude","!!") [Var 17,Lit (Intc  1)]]],Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("PrettyAbstract","expDoc") [Comb ConsCall ("Prelude","False") [],Var 2,Comb ConsCall ("Prelude","Just") [Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Prelude","unknown") [],Lit (Intc  11)]],Var 4],Comb FuncCall ("Prelude","drop") [Lit (Intc  2),Var 17]]]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","maybe") [Comb ConsCall ("Prelude","False") [],Comb (FuncPartCall 1) ("Prelude","flip") [Comb (FuncPartCall 2) ("Prelude","==") [],Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]],Var 19],Comb FuncCall ("Prelude","==") [Comb FuncCall ("Prelude","length") [Var 17],Lit (Intc  3)]]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","$") [Comb FuncCall ("PrettyAbstract","par") [Var 3],Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Pretty","hang") [Lit (Intc  1)],Var 18]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","maybe") [Comb ConsCall ("Prelude","False") [],Comb (FuncPartCall 1) ("Prelude","flip") [Comb (FuncPartCall 2) ("Prelude","==") [],Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]],Var 19],Comb FuncCall ("Prelude",">") [Comb FuncCall ("Prelude","length") [Var 17],Lit (Intc  3)]]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","$") [Comb FuncCall ("PrettyAbstract","expDoc2.appPar.347") [Comb ConsCall ("Prelude","True") [],Var 3],Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Pretty","hang") [Lit (Intc  1)],Comb FuncCall ("PrettyAbstract","app") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","parens") [],Var 18],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("PrettyAbstract","expDoc") [Comb ConsCall ("Prelude","False") [],Var 2,Comb ConsCall ("Prelude","Just") [Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Prelude","unknown") [],Lit (Intc  11)]],Var 4],Comb FuncCall ("Prelude","drop") [Lit (Intc  3),Var 17]]]]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Pretty","<>") [Comb FuncCall ("PrettyAbstract","showPrecs") [Comb FuncCall ("PrettyAbstract","expDoc2.name.347") [Comb ConsCall ("AbstractCurry","CApply") [Var 15,Var 16]],Var 3],Comb FuncCall ("Prelude","$") [Comb FuncCall ("PrettyAbstract","expDoc2.appPar.347") [Comb FuncCall ("Prelude","not") [Comb FuncCall ("Prelude","null") [Var 17]],Var 3],Comb FuncCall ("PrettyAbstract","app") [Comb FuncCall ("PrettyAbstract","expDoc") [Comb ConsCall ("Prelude","False") [],Var 2,Comb ConsCall ("Prelude","Just") [Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Prelude","unknown") [],Lit (Intc  11)]],Var 4,Comb FuncCall ("PrettyAbstract","expDoc2.name.347") [Comb ConsCall ("AbstractCurry","CApply") [Var 15,Var 16]]],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("PrettyAbstract","expDoc") [Comb ConsCall ("Prelude","False") [],Var 2,Comb ConsCall ("Prelude","Just") [Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Prelude","unknown") [],Lit (Intc  11)]],Var 4],Var 17]]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])])])])),Branch (Pattern ("AbstractCurry","CDoExpr") [45]) (Comb FuncCall ("Prelude","$") [Comb FuncCall ("PrettyAbstract","par") [Var 3],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","<+>") [],Comb FuncCall ("Pretty","text") [Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("PrettyAbstract","layout") [],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("PrettyAbstract","statementDoc") [Var 2,Var 4],Var 45]]]]),Branch (Pattern ("AbstractCurry","CListComp") [46,47]) (Comb FuncCall ("Prelude","$") [Comb FuncCall ("Pretty","brackets") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","<+>") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","<+>") [],Comb FuncCall ("PrettyAbstract","expDoc") [Comb FuncCall ("Prelude","unknown") [],Var 2,Comb ConsCall ("Prelude","Nothing") [],Var 4,Var 46]],Comb FuncCall ("Pretty","text") [Comb ConsCall ("Prelude",":") [Lit (Charc  '|'),Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("Pretty","encloseSep") [Comb FuncCall ("Pretty","empty") [],Comb FuncCall ("Pretty","empty") [],Comb FuncCall ("Pretty","comma") [],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("PrettyAbstract","statementDoc") [Var 2,Var 4],Var 47]]]])])),Func ("PrettyAbstract","expDoc2.appPar.347") 2 Private (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Maybe") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Int") []]]) (FuncType (TCons ("Pretty","Doc") []) (TCons ("Pretty","Doc") [])))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","Nothing") []) (Comb (FuncPartCall 1) ("Prelude","id") []),Branch (Pattern ("Prelude","Just") [3]) (Case  Rigid (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","==") [Comb FuncCall ("Prelude","snd") [Var 3],Lit (Intc  11)],Var 1]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Pretty","parens") []),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb (FuncPartCall 1) ("Prelude","id") []),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])),Func ("PrettyAbstract","expDoc2.args.347") 1 Private (FuncType (TCons ("AbstractCurry","CExpr") []) (TCons ("Prelude","[]") [TCons ("AbstractCurry","CExpr") []])) (Rule [1] (Case  Rigid (Var 1) [Branch (Pattern ("AbstractCurry","CApply") [2,3]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("PrettyAbstract","expDoc2.args.347") [Var 2],Comb ConsCall ("Prelude",":") [Var 3,Comb ConsCall ("Prelude","[]") []]]),Branch (Pattern ("AbstractCurry","CVar") [4]) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("AbstractCurry","CLit") [5]) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("AbstractCurry","CSymbol") [6]) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("AbstractCurry","CLambda") [7,8]) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("AbstractCurry","CLetDecl") [9,10]) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("AbstractCurry","CDoExpr") [11]) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("AbstractCurry","CListComp") [12,13]) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("AbstractCurry","CCase") [14,15]) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("AbstractCurry","CRecConstr") [16]) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("AbstractCurry","CRecSelect") [17,18]) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("AbstractCurry","CRecUpdate") [19,20]) (Comb ConsCall ("Prelude","[]") [])])),Func ("PrettyAbstract","expDoc2.name.347") 1 Private (FuncType (TCons ("AbstractCurry","CExpr") []) (TCons ("AbstractCurry","CExpr") [])) (Rule [1] (Case  Rigid (Var 1) [Branch (Pattern ("AbstractCurry","CApply") [2,3]) (Comb FuncCall ("PrettyAbstract","expDoc2.name.347") [Var 2]),Branch (Pattern ("AbstractCurry","CVar") [4]) (Var 1),Branch (Pattern ("AbstractCurry","CLit") [5]) (Var 1),Branch (Pattern ("AbstractCurry","CSymbol") [6]) (Var 1),Branch (Pattern ("AbstractCurry","CLambda") [7,8]) (Var 1),Branch (Pattern ("AbstractCurry","CLetDecl") [9,10]) (Var 1),Branch (Pattern ("AbstractCurry","CDoExpr") [11]) (Var 1),Branch (Pattern ("AbstractCurry","CListComp") [12,13]) (Var 1),Branch (Pattern ("AbstractCurry","CCase") [14,15]) (Var 1),Branch (Pattern ("AbstractCurry","CRecConstr") [16]) (Var 1),Branch (Pattern ("AbstractCurry","CRecSelect") [17,18]) (Var 1),Branch (Pattern ("AbstractCurry","CRecUpdate") [19,20]) (Var 1)])),Func ("PrettyAbstract","expDoc2._#selFP2#lbr") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Pretty","Doc") [],TCons ("Pretty","Doc") []]) (TCons ("Pretty","Doc") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("PrettyAbstract","expDoc2._#selFP3#rbr") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Pretty","Doc") [],TCons ("Pretty","Doc") []]) (TCons ("Pretty","Doc") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("PrettyAbstract","statementDoc") 3 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","(,)") [TCons ("AbstractCurry","CFixity") [],TCons ("Prelude","Int") []]]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("AbstractCurry","CStatement") []) (TCons ("Pretty","Doc") [])))) (Rule [1,2,3] (Case  Flex (Var 3) [Branch (Pattern ("AbstractCurry","CSExpr") [4]) (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Pretty","hang") [Lit (Intc  1)],Comb FuncCall ("PrettyAbstract","expDoc") [Comb ConsCall ("Prelude","False") [],Var 1,Comb ConsCall ("Prelude","Nothing") [],Var 2,Var 4]]),Branch (Pattern ("AbstractCurry","CSPat") [5,6]) (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Pretty","hang") [Lit (Intc  1)],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","<+>") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","<+>") [],Comb FuncCall ("PrettyAbstract","patternDoc") [Var 2,Var 5]],Comb FuncCall ("Pretty","text") [Comb ConsCall ("Prelude",":") [Lit (Charc  '<'),Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude","[]") []]]]]],Comb FuncCall ("PrettyAbstract","expDoc") [Comb ConsCall ("Prelude","False") [],Var 1,Comb ConsCall ("Prelude","Nothing") [],Var 2,Var 6]]]),Branch (Pattern ("AbstractCurry","CSLet") [7]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","<+>") [],Comb FuncCall ("Pretty","text") [Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude","[]") []]]]]],Comb FuncCall ("PrettyAbstract","localDeclsDoc") [Var 1,Var 2,Var 7]])])),Func ("PrettyAbstract","branchDoc") 3 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","(,)") [TCons ("AbstractCurry","CFixity") [],TCons ("Prelude","Int") []]]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("AbstractCurry","CBranchExpr") []) (TCons ("Pretty","Doc") [])))) (Rule [1,2,3] (Case  Flex (Var 3) [Branch (Pattern ("AbstractCurry","CBranch") [4,5]) (Comb FuncCall ("PrettyAbstract","def") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","<+>") [],Comb FuncCall ("PrettyAbstract","patternDoc") [Var 2,Var 4]],Comb FuncCall ("PrettyAbstract","arrow") []],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","align") [],Comb FuncCall ("PrettyAbstract","expDoc") [Comb ConsCall ("Prelude","False") [],Var 1,Comb ConsCall ("Prelude","Nothing") [],Var 2,Var 5]]])])),Func ("PrettyAbstract","patternsDoc") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("AbstractCurry","CPattern") []]) (TCons ("Pretty","Doc") []))) (Rule [1] (Comb FuncCall ("Prelude",".") [Comb FuncCall ("Pretty","align") [],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Pretty","fillSep") [],Comb (FuncPartCall 1) ("Prelude","map") [Comb (FuncPartCall 1) ("PrettyAbstract","patternDoc") [Var 1]]]])),Func ("PrettyAbstract","patternDoc") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("AbstractCurry","CPattern") []) (TCons ("Pretty","Doc") []))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("AbstractCurry","CPVar") [3]) (Comb FuncCall ("PrettyAbstract","tvarDoc") [Var 3]),Branch (Pattern ("AbstractCurry","CPLit") [4]) (Comb FuncCall ("PrettyAbstract","litDoc") [Var 4]),Branch (Pattern ("AbstractCurry","CPComb") [5,6]) (Let [(7,Comb (FuncPartCall 1) ("Pretty","fillEncloseSep") [Comb FuncCall ("Pretty","lbracket") [],Comb FuncCall ("Pretty","rbracket") [],Comb FuncCall ("Pretty","<>") [Comb FuncCall ("Pretty","space") [],Comb FuncCall ("Pretty","comma") []]]),(8,Comb (FuncPartCall 1) ("Pretty","fillEncloseSep") [Comb FuncCall ("Pretty","lparen") [],Comb FuncCall ("Pretty","rparen") [],Comb FuncCall ("Pretty","<>") [Comb FuncCall ("Pretty","space") [],Comb FuncCall ("Pretty","comma") []]]),(9,Comb FuncCall ("PrettyAbstract","toListPattern") [Var 2]),(10,Comb FuncCall ("PrettyAbstract","toStringPattern") [Var 2]),(11,Comb FuncCall ("Maybe","fromJust") [Var 9]),(12,Comb FuncCall ("Maybe","fromJust") [Var 10])] (Case  Rigid (Comb FuncCall ("Maybe","isJust") [Var 10]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Comb FuncCall ("Prelude","null") [Var 12]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Pretty","text") [Comb ConsCall ("Prelude",":") [Lit (Charc  '['),Comb ConsCall ("Prelude",":") [Lit (Charc  ']'),Comb ConsCall ("Prelude","[]") []]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","dquotes") [],Comb FuncCall ("Pretty","text") [Var 12]])]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Maybe","isJust") [Var 9]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","apply") [Var 7,Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("PrettyAbstract","patternDoc") [Var 1],Var 11]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","null") [Var 6]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("PrettyAbstract","qname") [Var 1,Var 5]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("PrettyAbstract","isTupleName") [Var 5]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","apply") [Var 8,Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("PrettyAbstract","patternDoc") [Var 1],Var 6]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("PrettyAbstract","isInfixName") [Var 5],Comb FuncCall ("Prelude","==") [Comb FuncCall ("Prelude","length") [Var 6],Lit (Intc  2)]]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","$") [Comb FuncCall ("Pretty","parens") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","<+>") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","<+>") [],Comb FuncCall ("PrettyAbstract","patternDoc") [Var 1,Comb FuncCall ("Prelude","!!") [Var 6,Lit (Intc  0)]]],Comb FuncCall ("Pretty","text") [Comb FuncCall ("Prelude","snd") [Var 5]]]],Comb FuncCall ("PrettyAbstract","patternDoc") [Var 1,Comb FuncCall ("Prelude","!!") [Var 6,Lit (Intc  1)]]]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","parens") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","<+>") [],Comb FuncCall ("PrettyAbstract","qname") [Var 1,Var 5]],Comb FuncCall ("Pretty","group") [Comb FuncCall ("Pretty","hang") [Lit (Intc  0),Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","vsep") [],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("PrettyAbstract","patternDoc") [Var 1],Var 6]]]]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])])])])),Branch (Pattern ("AbstractCurry","CPAs") [13,14]) (Comb FuncCall ("Pretty","<>") [Comb FuncCall ("Pretty","<>") [Comb FuncCall ("PrettyAbstract","tvarDoc") [Var 13],Comb FuncCall ("Pretty","text") [Comb ConsCall ("Prelude",":") [Lit (Charc  '@'),Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("PrettyAbstract","patternDoc") [Var 1,Var 14]]),Branch (Pattern ("AbstractCurry","CPFuncComb") [15,16]) (Case  Rigid (Comb FuncCall ("Prelude","null") [Var 16]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("PrettyAbstract","qname") [Var 1,Var 15]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("PrettyAbstract","isInfixName") [Var 15],Comb FuncCall ("Prelude","==") [Comb FuncCall ("Prelude","length") [Var 16],Lit (Intc  2)]]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","$") [Comb FuncCall ("Pretty","parens") [],Comb FuncCall ("Pretty","<>") [Comb FuncCall ("Pretty","<>") [Comb FuncCall ("PrettyAbstract","patternDoc") [Var 1,Comb FuncCall ("Prelude","!!") [Var 16,Lit (Intc  0)]],Comb FuncCall ("Pretty","text") [Comb FuncCall ("Prelude","snd") [Var 15]]],Comb FuncCall ("PrettyAbstract","patternDoc") [Var 1,Comb FuncCall ("Prelude","!!") [Var 16,Lit (Intc  1)]]]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","parens") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","<+>") [],Comb FuncCall ("PrettyAbstract","qname") [Var 1,Var 15]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Pretty","hsep") [],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("PrettyAbstract","patternDoc") [Var 1],Var 16]]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])])),Func ("PrettyAbstract","toListPattern") 1 Private (FuncType (TCons ("AbstractCurry","CPattern") []) (TCons ("Prelude","Maybe") [TCons ("Prelude","[]") [TCons ("AbstractCurry","CPattern") []]])) (Rule [1] (Case  Rigid (Var 1) [Branch (Pattern ("AbstractCurry","CPComb") [2,3]) (Case  Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Case  Rigid (Var 4) [Branch (Pattern ("Prelude",":") [6,7]) (Let [(8,Var 6)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 8,Lit (Charc  'P')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 7) [Branch (Pattern ("Prelude",":") [9,10]) (Let [(11,Var 9)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 11,Lit (Charc  'r')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 10) [Branch (Pattern ("Prelude",":") [12,13]) (Let [(14,Var 12)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 14,Lit (Charc  'e')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 13) [Branch (Pattern ("Prelude",":") [15,16]) (Let [(17,Var 15)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 17,Lit (Charc  'l')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 16) [Branch (Pattern ("Prelude",":") [18,19]) (Let [(20,Var 18)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 20,Lit (Charc  'u')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 19) [Branch (Pattern ("Prelude",":") [21,22]) (Let [(23,Var 21)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 23,Lit (Charc  'd')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 22) [Branch (Pattern ("Prelude",":") [24,25]) (Let [(26,Var 24)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 26,Lit (Charc  'e')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 25) [Branch (Pattern ("Prelude","[]") []) (Case  Rigid (Var 5) [Branch (Pattern ("Prelude",":") [27,28]) (Let [(29,Var 27)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 29,Lit (Charc  '[')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 28) [Branch (Pattern ("Prelude",":") [30,31]) (Let [(32,Var 30)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 32,Lit (Charc  ']')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 31) [Branch (Pattern ("Prelude","[]") []) (Case  Rigid (Var 3) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","Just") [Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude",":") [33,34]) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("Prelude",":") [35,36]) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","Nothing") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 29,Lit (Charc  ':')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 28) [Branch (Pattern ("Prelude","[]") []) (Case  Rigid (Var 3) [Branch (Pattern ("Prelude",":") [37,38]) (Case  Rigid (Var 38) [Branch (Pattern ("Prelude",":") [39,40]) (Case  Rigid (Var 40) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Maybe",">>-") [Comb FuncCall ("PrettyAbstract","toListPattern") [Var 39],Comb FuncCall ("Prelude",".") [Comb (ConsPartCall 1) ("Prelude","Just") [],Comb (ConsPartCall 1) ("Prelude",":") [Var 37]]]),Branch (Pattern ("Prelude",":") [41,42]) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("Prelude",":") [43,44]) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","Nothing") [])])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("Prelude",":") [45,46]) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","Nothing") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","Nothing") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","Nothing") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","Nothing") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","Nothing") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","Nothing") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","Nothing") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","Nothing") [])])]),Branch (Pattern ("AbstractCurry","CPVar") [47]) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("AbstractCurry","CPLit") [48]) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("AbstractCurry","CPAs") [49,50]) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("AbstractCurry","CPFuncComb") [51,52]) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("AbstractCurry","CPLazy") [53]) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("AbstractCurry","CPRecord") [54,55]) (Comb ConsCall ("Prelude","Nothing") [])])),Func ("PrettyAbstract","toStringPattern") 1 Private (FuncType (TCons ("AbstractCurry","CPattern") []) (TCons ("Prelude","Maybe") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Rigid (Var 1) [Branch (Pattern ("AbstractCurry","CPComb") [2,3]) (Case  Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Case  Rigid (Var 4) [Branch (Pattern ("Prelude",":") [6,7]) (Let [(8,Var 6)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 8,Lit (Charc  'P')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 7) [Branch (Pattern ("Prelude",":") [9,10]) (Let [(11,Var 9)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 11,Lit (Charc  'r')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 10) [Branch (Pattern ("Prelude",":") [12,13]) (Let [(14,Var 12)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 14,Lit (Charc  'e')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 13) [Branch (Pattern ("Prelude",":") [15,16]) (Let [(17,Var 15)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 17,Lit (Charc  'l')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 16) [Branch (Pattern ("Prelude",":") [18,19]) (Let [(20,Var 18)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 20,Lit (Charc  'u')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 19) [Branch (Pattern ("Prelude",":") [21,22]) (Let [(23,Var 21)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 23,Lit (Charc  'd')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 22) [Branch (Pattern ("Prelude",":") [24,25]) (Let [(26,Var 24)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 26,Lit (Charc  'e')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 25) [Branch (Pattern ("Prelude","[]") []) (Case  Rigid (Var 5) [Branch (Pattern ("Prelude",":") [27,28]) (Let [(29,Var 27)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 29,Lit (Charc  '[')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 28) [Branch (Pattern ("Prelude",":") [30,31]) (Let [(32,Var 30)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 32,Lit (Charc  ']')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 31) [Branch (Pattern ("Prelude","[]") []) (Case  Rigid (Var 3) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","Just") [Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude",":") [33,34]) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("Prelude",":") [35,36]) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","Nothing") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 29,Lit (Charc  ':')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 28) [Branch (Pattern ("Prelude","[]") []) (Case  Rigid (Var 3) [Branch (Pattern ("Prelude",":") [37,38]) (Case  Rigid (Var 37) [Branch (Pattern ("AbstractCurry","CPLit") [39]) (Case  Rigid (Var 39) [Branch (Pattern ("AbstractCurry","CCharc") [40]) (Case  Rigid (Var 38) [Branch (Pattern ("Prelude",":") [41,42]) (Case  Rigid (Var 42) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Maybe",">>-") [Comb FuncCall ("PrettyAbstract","toStringPattern") [Var 41],Comb FuncCall ("Prelude",".") [Comb (ConsPartCall 1) ("Prelude","Just") [],Comb (FuncPartCall 1) ("Prelude","++") [Comb FuncCall ("PrettyAbstract","quoteChar") [Var 40]]]]),Branch (Pattern ("Prelude",":") [43,44]) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("AbstractCurry","CIntc") [45]) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("AbstractCurry","CFloatc") [46]) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("AbstractCurry","CPVar") [47]) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("AbstractCurry","CPComb") [48,49]) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("AbstractCurry","CPAs") [50,51]) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("AbstractCurry","CPFuncComb") [52,53]) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("AbstractCurry","CPLazy") [54]) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("AbstractCurry","CPRecord") [55,56]) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("Prelude",":") [57,58]) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","Nothing") [])])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("Prelude",":") [59,60]) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","Nothing") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","Nothing") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","Nothing") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","Nothing") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","Nothing") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","Nothing") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","Nothing") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","Nothing") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","Nothing") [])])]),Branch (Pattern ("AbstractCurry","CPVar") [61]) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("AbstractCurry","CPLit") [62]) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("AbstractCurry","CPAs") [63,64]) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("AbstractCurry","CPFuncComb") [65,66]) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("AbstractCurry","CPLazy") [67]) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("AbstractCurry","CPRecord") [68,69]) (Comb ConsCall ("Prelude","Nothing") [])])),Func ("PrettyAbstract","trCurryProg") 2 Private (FuncType (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("AbstractCurry","CTypeDecl") []]) (FuncType (TCons ("Prelude","[]") [TCons ("AbstractCurry","CFuncDecl") []]) (FuncType (TCons ("Prelude","[]") [TCons ("AbstractCurry","COpDecl") []]) (TVar 0)))))) (FuncType (TCons ("AbstractCurry","CurryProg") []) (TVar 0))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("AbstractCurry","CurryProg") [3,4,5,6,7]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 1,Var 3],Var 4],Var 5],Var 6],Var 7])])),Func ("PrettyAbstract","trCType") 3 Private (FuncType (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("AbstractCurry","CVisibility") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (FuncType (TCons ("Prelude","[]") [TCons ("AbstractCurry","CConsDecl") []]) (TVar 0))))) (FuncType (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("AbstractCurry","CVisibility") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (FuncType (TCons ("AbstractCurry","CTypeExpr") []) (TVar 0))))) (FuncType (TCons ("AbstractCurry","CTypeDecl") []) (TVar 0)))) (Rule [1,2,3] (Case  Flex (Var 3) [Branch (Pattern ("AbstractCurry","CType") [4,5,6,7]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 1,Var 4],Var 5],Var 6],Var 7]),Branch (Pattern ("AbstractCurry","CTypeSyn") [8,9,10,11]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 2,Var 8],Var 9],Var 10],Var 11])])),Func ("PrettyAbstract","typeCVisibility") 0 Private (FuncType (TCons ("AbstractCurry","CTypeDecl") []) (TCons ("AbstractCurry","CVisibility") [])) (Rule [] (Comb (FuncPartCall 1) ("PrettyAbstract","trCType") [Comb (FuncPartCall 4) ("PrettyAbstract","typeCVisibility._#lambda19") [],Comb (FuncPartCall 4) ("PrettyAbstract","typeCVisibility._#lambda20") []])),Func ("PrettyAbstract","typeCVisibility._#lambda19") 4 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("AbstractCurry","CVisibility") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (FuncType (TCons ("Prelude","[]") [TCons ("AbstractCurry","CConsDecl") []]) (TCons ("AbstractCurry","CVisibility") []))))) (Rule [1,2,3,4] (Var 2)),Func ("PrettyAbstract","typeCVisibility._#lambda20") 4 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("AbstractCurry","CVisibility") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (FuncType (TCons ("AbstractCurry","CTypeExpr") []) (TCons ("AbstractCurry","CVisibility") []))))) (Rule [1,2,3,4] (Var 2)),Func ("PrettyAbstract","typeName") 0 Private (FuncType (TCons ("AbstractCurry","CTypeDecl") []) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [] (Comb (FuncPartCall 1) ("PrettyAbstract","trCType") [Comb (FuncPartCall 4) ("PrettyAbstract","typeName._#lambda21") [],Comb (FuncPartCall 4) ("PrettyAbstract","typeName._#lambda22") []])),Func ("PrettyAbstract","typeName._#lambda21") 4 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("AbstractCurry","CVisibility") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (FuncType (TCons ("Prelude","[]") [TCons ("AbstractCurry","CConsDecl") []]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]))))) (Rule [1,2,3,4] (Var 1)),Func ("PrettyAbstract","typeName._#lambda22") 4 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("AbstractCurry","CVisibility") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (FuncType (TCons ("AbstractCurry","CTypeExpr") []) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]))))) (Rule [1,2,3,4] (Var 1)),Func ("PrettyAbstract","trCFunc") 2 Private (FuncType (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("AbstractCurry","CVisibility") []) (FuncType (TCons ("AbstractCurry","CTypeExpr") []) (FuncType (TCons ("AbstractCurry","CRules") []) (TVar 0)))))) (FuncType (TCons ("AbstractCurry","CFuncDecl") []) (TVar 0))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("AbstractCurry","CFunc") [3,4,5,6,7]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 1,Var 3],Var 4],Var 5],Var 6],Var 7]),Branch (Pattern ("AbstractCurry","CmtFunc") [8,9,10,11,12,13]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 1,Var 9],Var 10],Var 11],Var 12],Var 13])])),Func ("PrettyAbstract","funcName") 0 Private (FuncType (TCons ("AbstractCurry","CFuncDecl") []) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [] (Comb (FuncPartCall 1) ("PrettyAbstract","trCFunc") [Comb (FuncPartCall 5) ("PrettyAbstract","funcName._#lambda23") []])),Func ("PrettyAbstract","funcName._#lambda23") 5 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("AbstractCurry","CVisibility") []) (FuncType (TCons ("AbstractCurry","CTypeExpr") []) (FuncType (TCons ("AbstractCurry","CRules") []) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])))))) (Rule [1,2,3,4,5] (Var 1)),Func ("PrettyAbstract","funcCVisibility") 0 Private (FuncType (TCons ("AbstractCurry","CFuncDecl") []) (TCons ("AbstractCurry","CVisibility") [])) (Rule [] (Comb (FuncPartCall 1) ("PrettyAbstract","trCFunc") [Comb (FuncPartCall 5) ("PrettyAbstract","funcCVisibility._#lambda24") []])),Func ("PrettyAbstract","funcCVisibility._#lambda24") 5 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("AbstractCurry","CVisibility") []) (FuncType (TCons ("AbstractCurry","CTypeExpr") []) (FuncType (TCons ("AbstractCurry","CRules") []) (TCons ("AbstractCurry","CVisibility") [])))))) (Rule [1,2,3,4,5] (Var 3)),Func ("PrettyAbstract","trCCons") 2 Private (FuncType (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("AbstractCurry","CVisibility") []) (FuncType (TCons ("Prelude","[]") [TCons ("AbstractCurry","CTypeExpr") []]) (TVar 0))))) (FuncType (TCons ("AbstractCurry","CConsDecl") []) (TVar 0))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("AbstractCurry","CCons") [3,4,5,6]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 1,Var 3],Var 4],Var 5],Var 6])])),Func ("PrettyAbstract","consCVisibility") 0 Private (FuncType (TCons ("AbstractCurry","CConsDecl") []) (TCons ("AbstractCurry","CVisibility") [])) (Rule [] (Comb (FuncPartCall 1) ("PrettyAbstract","trCCons") [Comb (FuncPartCall 4) ("PrettyAbstract","consCVisibility._#lambda25") []])),Func ("PrettyAbstract","consCVisibility._#lambda25") 4 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("AbstractCurry","CVisibility") []) (FuncType (TCons ("Prelude","[]") [TCons ("AbstractCurry","CTypeExpr") []]) (TCons ("AbstractCurry","CVisibility") []))))) (Rule [1,2,3,4] (Var 3)),Func ("PrettyAbstract","argTypes") 1 Private (FuncType (TCons ("AbstractCurry","CTypeExpr") []) (TCons ("Prelude","[]") [TCons ("AbstractCurry","CTypeExpr") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("AbstractCurry","CTVar") [2]) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("AbstractCurry","CTCons") [3,4]) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("AbstractCurry","CFuncType") [5,6]) (Comb ConsCall ("Prelude",":") [Var 5,Comb FuncCall ("PrettyAbstract","argTypes") [Var 6]])])),Func ("PrettyAbstract","resultType") 1 Private (FuncType (TCons ("AbstractCurry","CTypeExpr") []) (TCons ("AbstractCurry","CTypeExpr") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("AbstractCurry","CTVar") [2]) (Comb ConsCall ("AbstractCurry","CTVar") [Var 2]),Branch (Pattern ("AbstractCurry","CTCons") [3,4]) (Comb ConsCall ("AbstractCurry","CTCons") [Var 3,Var 4]),Branch (Pattern ("AbstractCurry","CFuncType") [5,6]) (Comb FuncCall ("PrettyAbstract","resultType") [Var 6])]))] []