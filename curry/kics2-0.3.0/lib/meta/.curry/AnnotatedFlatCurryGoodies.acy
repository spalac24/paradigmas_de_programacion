CurryProg "AnnotatedFlatCurryGoodies"
 ["Prelude","AnnotatedFlatCurry","FlatCurry"]
 [CTypeSyn ("AnnotatedFlatCurryGoodies","Update") Public [(0,"a"),(1,"b")] (CFuncType (CFuncType (CTVar (1,"b")) (CTVar (1,"b"))) (CFuncType (CTVar (0,"a")) (CTVar (0,"a"))))]
 [CFunc ("AnnotatedFlatCurryGoodies","trProg") 2 Public (CFuncType (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("FlatCurry","TypeDecl") []]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("AnnotatedFlatCurry","AFuncDecl") [CTVar (0,"a")]]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("FlatCurry","OpDecl") []]) (CTVar (1,"b"))))))) (CFuncType (CTCons ("AnnotatedFlatCurry","AProg") [CTVar (0,"a")]) (CTVar (1,"b")))) (CRules CFlex [CRule [CPVar (0,"f"),CPComb ("AnnotatedFlatCurry","AProg") [CPVar (1,"name"),CPVar (2,"imps"),CPVar (3,"types"),CPVar (4,"funcs"),CPVar (5,"ops")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CApply (CVar (0,"f")) (CVar (1,"name"))) (CVar (2,"imps"))) (CVar (3,"types"))) (CVar (4,"funcs"))) (CVar (5,"ops")))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","progName") 0 Public (CFuncType (CTCons ("AnnotatedFlatCurry","AProg") [CTVar (0,"a")]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("AnnotatedFlatCurryGoodies","trProg")) (CLambda [CPVar (0,"name"),CPVar (1,"_"),CPVar (2,"_"),CPVar (3,"_"),CPVar (4,"_")] (CVar (0,"name"))))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","progImports") 0 Public (CFuncType (CTCons ("AnnotatedFlatCurry","AProg") [CTVar (0,"a")]) (CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("AnnotatedFlatCurryGoodies","trProg")) (CLambda [CPVar (0,"_"),CPVar (1,"imps"),CPVar (2,"_"),CPVar (3,"_"),CPVar (4,"_")] (CVar (1,"imps"))))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","progTypes") 0 Public (CFuncType (CTCons ("AnnotatedFlatCurry","AProg") [CTVar (0,"a")]) (CTCons ("Prelude","[]") [CTCons ("FlatCurry","TypeDecl") []])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("AnnotatedFlatCurryGoodies","trProg")) (CLambda [CPVar (0,"_"),CPVar (1,"_"),CPVar (2,"types"),CPVar (3,"_"),CPVar (4,"_")] (CVar (2,"types"))))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","progFuncs") 0 Public (CFuncType (CTCons ("AnnotatedFlatCurry","AProg") [CTVar (0,"a")]) (CTCons ("Prelude","[]") [CTCons ("AnnotatedFlatCurry","AFuncDecl") [CTVar (0,"a")]])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("AnnotatedFlatCurryGoodies","trProg")) (CLambda [CPVar (0,"_"),CPVar (1,"_"),CPVar (2,"_"),CPVar (3,"funcs"),CPVar (4,"_")] (CVar (3,"funcs"))))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","progOps") 0 Public (CFuncType (CTCons ("AnnotatedFlatCurry","AProg") [CTVar (0,"a")]) (CTCons ("Prelude","[]") [CTCons ("FlatCurry","OpDecl") []])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("AnnotatedFlatCurryGoodies","trProg")) (CLambda [CPVar (0,"_"),CPVar (1,"_"),CPVar (2,"_"),CPVar (3,"_"),CPVar (4,"ops")] (CVar (4,"ops"))))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","updProg") 5 Public (CFuncType (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CFuncType (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]) (CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]])) (CFuncType (CFuncType (CTCons ("Prelude","[]") [CTCons ("FlatCurry","TypeDecl") []]) (CTCons ("Prelude","[]") [CTCons ("FlatCurry","TypeDecl") []])) (CFuncType (CFuncType (CTCons ("Prelude","[]") [CTCons ("AnnotatedFlatCurry","AFuncDecl") [CTVar (0,"a")]]) (CTCons ("Prelude","[]") [CTCons ("AnnotatedFlatCurry","AFuncDecl") [CTVar (0,"a")]])) (CFuncType (CFuncType (CTCons ("Prelude","[]") [CTCons ("FlatCurry","OpDecl") []]) (CTCons ("Prelude","[]") [CTCons ("FlatCurry","OpDecl") []])) (CFuncType (CTCons ("AnnotatedFlatCurry","AProg") [CTVar (0,"a")]) (CTCons ("AnnotatedFlatCurry","AProg") [CTVar (0,"a")]))))))) (CRules CFlex [CRule [CPVar (0,"fn"),CPVar (1,"fi"),CPVar (2,"ft"),CPVar (3,"ff"),CPVar (4,"fo")] [(CSymbol ("Prelude","success"),CApply (CSymbol ("AnnotatedFlatCurryGoodies","trProg")) (CSymbol ("AnnotatedFlatCurryGoodies","prog")))] [CLocalFunc (CFunc ("AnnotatedFlatCurryGoodies","prog") 5 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("FlatCurry","TypeDecl") []]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("AnnotatedFlatCurry","AFuncDecl") [CTVar (1,"_83")]]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("FlatCurry","OpDecl") []]) (CTCons ("AnnotatedFlatCurry","AProg") [CTVar (1,"_83")])))))) (CRules CFlex [CRule [CPVar (5,"name"),CPVar (6,"imps"),CPVar (7,"types"),CPVar (8,"funcs"),CPVar (9,"ops")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CApply (CSymbol ("AnnotatedFlatCurry","AProg")) (CApply (CVar (0,"fn")) (CVar (5,"name")))) (CApply (CVar (1,"fi")) (CVar (6,"imps")))) (CApply (CVar (2,"ft")) (CVar (7,"types")))) (CApply (CVar (3,"ff")) (CVar (8,"funcs")))) (CApply (CVar (4,"fo")) (CVar (9,"ops"))))] []]))]]),
  CFunc ("AnnotatedFlatCurryGoodies","updProgName") 1 Public (CFuncType (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CFuncType (CTCons ("AnnotatedFlatCurry","AProg") [CTVar (0,"a")]) (CTCons ("AnnotatedFlatCurry","AProg") [CTVar (0,"a")]))) (CRules CFlex [CRule [CPVar (0,"f")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CApply (CSymbol ("AnnotatedFlatCurryGoodies","updProg")) (CVar (0,"f"))) (CSymbol ("Prelude","id"))) (CSymbol ("Prelude","id"))) (CSymbol ("Prelude","id"))) (CSymbol ("Prelude","id")))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","updProgImports") 1 Public (CFuncType (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]) (CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]])) (CFuncType (CTCons ("AnnotatedFlatCurry","AProg") [CTVar (0,"a")]) (CTCons ("AnnotatedFlatCurry","AProg") [CTVar (0,"a")]))) (CRules CFlex [CRule [CPVar (0,"f")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CApply (CSymbol ("AnnotatedFlatCurryGoodies","updProg")) (CSymbol ("Prelude","id"))) (CVar (0,"f"))) (CSymbol ("Prelude","id"))) (CSymbol ("Prelude","id"))) (CSymbol ("Prelude","id")))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","updProgTypes") 1 Public (CFuncType (CFuncType (CTCons ("Prelude","[]") [CTCons ("FlatCurry","TypeDecl") []]) (CTCons ("Prelude","[]") [CTCons ("FlatCurry","TypeDecl") []])) (CFuncType (CTCons ("AnnotatedFlatCurry","AProg") [CTVar (0,"a")]) (CTCons ("AnnotatedFlatCurry","AProg") [CTVar (0,"a")]))) (CRules CFlex [CRule [CPVar (0,"f")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CApply (CSymbol ("AnnotatedFlatCurryGoodies","updProg")) (CSymbol ("Prelude","id"))) (CSymbol ("Prelude","id"))) (CVar (0,"f"))) (CSymbol ("Prelude","id"))) (CSymbol ("Prelude","id")))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","updProgFuncs") 1 Public (CFuncType (CFuncType (CTCons ("Prelude","[]") [CTCons ("AnnotatedFlatCurry","AFuncDecl") [CTVar (0,"a")]]) (CTCons ("Prelude","[]") [CTCons ("AnnotatedFlatCurry","AFuncDecl") [CTVar (0,"a")]])) (CFuncType (CTCons ("AnnotatedFlatCurry","AProg") [CTVar (0,"a")]) (CTCons ("AnnotatedFlatCurry","AProg") [CTVar (0,"a")]))) (CRules CFlex [CRule [CPVar (0,"f")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CApply (CSymbol ("AnnotatedFlatCurryGoodies","updProg")) (CSymbol ("Prelude","id"))) (CSymbol ("Prelude","id"))) (CSymbol ("Prelude","id"))) (CVar (0,"f"))) (CSymbol ("Prelude","id")))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","updProgOps") 0 Public (CFuncType (CFuncType (CTCons ("Prelude","[]") [CTCons ("FlatCurry","OpDecl") []]) (CTCons ("Prelude","[]") [CTCons ("FlatCurry","OpDecl") []])) (CFuncType (CTCons ("AnnotatedFlatCurry","AProg") [CTVar (0,"a")]) (CTCons ("AnnotatedFlatCurry","AProg") [CTVar (0,"a")]))) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CSymbol ("AnnotatedFlatCurryGoodies","updProg")) (CSymbol ("Prelude","id"))) (CSymbol ("Prelude","id"))) (CSymbol ("Prelude","id"))) (CSymbol ("Prelude","id")))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","allVarsInProg") 0 Public (CFuncType (CTCons ("AnnotatedFlatCurry","AProg") [CTVar (0,"a")]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Int") []])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",".")) (CApply (CSymbol ("Prelude","concatMap")) (CSymbol ("AnnotatedFlatCurryGoodies","allVarsInFunc")))) (CSymbol ("AnnotatedFlatCurryGoodies","progFuncs")))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","updProgExps") 0 Public (CFuncType (CFuncType (CTCons ("AnnotatedFlatCurry","AExpr") [CTVar (0,"a")]) (CTCons ("AnnotatedFlatCurry","AExpr") [CTVar (0,"a")])) (CFuncType (CTCons ("AnnotatedFlatCurry","AProg") [CTVar (0,"a")]) (CTCons ("AnnotatedFlatCurry","AProg") [CTVar (0,"a")]))) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("AnnotatedFlatCurryGoodies","updProgFuncs"))) (CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Prelude","map"))) (CSymbol ("AnnotatedFlatCurryGoodies","updFuncBody"))))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","rnmAllVarsInProg") 0 Public (CFuncType (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("Prelude","Int") [])) (CFuncType (CTCons ("AnnotatedFlatCurry","AProg") [CTVar (0,"a")]) (CTCons ("AnnotatedFlatCurry","AProg") [CTVar (0,"a")]))) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("AnnotatedFlatCurryGoodies","updProgFuncs"))) (CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Prelude","map"))) (CSymbol ("AnnotatedFlatCurryGoodies","rnmAllVarsInFunc"))))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","updQNamesInProg") 1 Public (CFuncType (CFuncType (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]) (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]])) (CFuncType (CTCons ("AnnotatedFlatCurry","AProg") [CTVar (0,"a")]) (CTCons ("AnnotatedFlatCurry","AProg") [CTVar (0,"a")]))) (CRules CFlex [CRule [CPVar (0,"f")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CApply (CSymbol ("AnnotatedFlatCurryGoodies","updProg")) (CSymbol ("Prelude","id"))) (CSymbol ("Prelude","id"))) (CApply (CSymbol ("Prelude","map")) (CApply (CSymbol ("AnnotatedFlatCurryGoodies","updQNamesInType")) (CVar (0,"f"))))) (CApply (CSymbol ("Prelude","map")) (CApply (CSymbol ("AnnotatedFlatCurryGoodies","updQNamesInFunc")) (CVar (0,"f"))))) (CApply (CSymbol ("Prelude","map")) (CApply (CSymbol ("AnnotatedFlatCurryGoodies","updOpName")) (CVar (0,"f")))))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","rnmProg") 2 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("AnnotatedFlatCurry","AProg") [CTVar (0,"a")]) (CTCons ("AnnotatedFlatCurry","AProg") [CTVar (0,"a")]))) (CRules CFlex [CRule [CPVar (0,"name"),CPVar (1,"p")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("AnnotatedFlatCurryGoodies","updProgName")) (CApply (CSymbol ("Prelude","const")) (CVar (0,"name")))) (CApply (CApply (CSymbol ("AnnotatedFlatCurryGoodies","updQNamesInProg")) (CSymbol ("AnnotatedFlatCurryGoodies","rnm"))) (CVar (1,"p"))))] [CLocalFunc (CFunc ("AnnotatedFlatCurryGoodies","rnm") 1 Private (CFuncType (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTVar (0,"a")]) (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTVar (0,"a")])) (CRules CFlex [CRule [CPComb ("Prelude","(,)") [CPVar (2,"mod"),CPVar (3,"n")]] [(CApply (CApply (CSymbol ("Prelude","==")) (CVar (2,"mod"))) (CApply (CSymbol ("AnnotatedFlatCurryGoodies","progName")) (CVar (1,"p"))),CApply (CApply (CSymbol ("Prelude","(,)")) (CVar (0,"name"))) (CVar (3,"n"))),(CSymbol ("Prelude","otherwise"),CApply (CApply (CSymbol ("Prelude","(,)")) (CVar (2,"mod"))) (CVar (3,"n")))] []]))]]),
  CFunc ("AnnotatedFlatCurryGoodies","trType") 3 Public (CFuncType (CFuncType (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]) (CFuncType (CTCons ("FlatCurry","Visibility") []) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Int") []]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("FlatCurry","ConsDecl") []]) (CTVar (0,"a")))))) (CFuncType (CFuncType (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]) (CFuncType (CTCons ("FlatCurry","Visibility") []) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Int") []]) (CFuncType (CTCons ("FlatCurry","TypeExpr") []) (CTVar (0,"a")))))) (CFuncType (CTCons ("FlatCurry","TypeDecl") []) (CTVar (0,"a"))))) (CRules CFlex [CRule [CPVar (0,"typ"),CPVar (1,"_"),CPComb ("FlatCurry","Type") [CPVar (2,"name"),CPVar (3,"vis"),CPVar (4,"params"),CPVar (5,"cs")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CVar (0,"typ")) (CVar (2,"name"))) (CVar (3,"vis"))) (CVar (4,"params"))) (CVar (5,"cs")))] [],CRule [CPVar (6,"_"),CPVar (7,"typesyn"),CPComb ("FlatCurry","TypeSyn") [CPVar (8,"name"),CPVar (9,"vis"),CPVar (10,"params"),CPVar (11,"syn")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CVar (7,"typesyn")) (CVar (8,"name"))) (CVar (9,"vis"))) (CVar (10,"params"))) (CVar (11,"syn")))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","typeName") 0 Public (CFuncType (CTCons ("FlatCurry","TypeDecl") []) (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("AnnotatedFlatCurryGoodies","trType")) (CLambda [CPVar (0,"name"),CPVar (1,"_"),CPVar (2,"_"),CPVar (3,"_")] (CVar (0,"name")))) (CLambda [CPVar (4,"name"),CPVar (5,"_"),CPVar (6,"_"),CPVar (7,"_")] (CVar (4,"name"))))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","typeVisibility") 0 Public (CFuncType (CTCons ("FlatCurry","TypeDecl") []) (CTCons ("FlatCurry","Visibility") [])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("AnnotatedFlatCurryGoodies","trType")) (CLambda [CPVar (0,"_"),CPVar (1,"vis"),CPVar (2,"_"),CPVar (3,"_")] (CVar (1,"vis")))) (CLambda [CPVar (4,"_"),CPVar (5,"vis"),CPVar (6,"_"),CPVar (7,"_")] (CVar (5,"vis"))))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","typeParams") 0 Public (CFuncType (CTCons ("FlatCurry","TypeDecl") []) (CTCons ("Prelude","[]") [CTCons ("Prelude","Int") []])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("AnnotatedFlatCurryGoodies","trType")) (CLambda [CPVar (0,"_"),CPVar (1,"_"),CPVar (2,"params"),CPVar (3,"_")] (CVar (2,"params")))) (CLambda [CPVar (4,"_"),CPVar (5,"_"),CPVar (6,"params"),CPVar (7,"_")] (CVar (6,"params"))))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","typeConsDecls") 0 Public (CFuncType (CTCons ("FlatCurry","TypeDecl") []) (CTCons ("Prelude","[]") [CTCons ("FlatCurry","ConsDecl") []])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("AnnotatedFlatCurryGoodies","trType")) (CLambda [CPVar (0,"_"),CPVar (1,"_"),CPVar (2,"_"),CPVar (3,"cs")] (CVar (3,"cs")))) (CSymbol ("Prelude","failed")))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","typeSyn") 0 Public (CFuncType (CTCons ("FlatCurry","TypeDecl") []) (CTCons ("FlatCurry","TypeExpr") [])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("AnnotatedFlatCurryGoodies","trType")) (CSymbol ("Prelude","failed"))) (CLambda [CPVar (0,"_"),CPVar (1,"_"),CPVar (2,"_"),CPVar (3,"syn")] (CVar (3,"syn"))))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","isTypeSyn") 0 Public (CFuncType (CTCons ("FlatCurry","TypeDecl") []) (CTCons ("Prelude","Bool") [])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("AnnotatedFlatCurryGoodies","trType")) (CLambda [CPVar (0,"_"),CPVar (1,"_"),CPVar (2,"_"),CPVar (3,"_")] (CSymbol ("Prelude","False")))) (CLambda [CPVar (4,"_"),CPVar (5,"_"),CPVar (6,"_"),CPVar (7,"_")] (CSymbol ("Prelude","True"))))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","updType") 5 Public (CFuncType (CFuncType (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]) (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]])) (CFuncType (CFuncType (CTCons ("FlatCurry","Visibility") []) (CTCons ("FlatCurry","Visibility") [])) (CFuncType (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Int") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Int") []])) (CFuncType (CFuncType (CTCons ("Prelude","[]") [CTCons ("FlatCurry","ConsDecl") []]) (CTCons ("Prelude","[]") [CTCons ("FlatCurry","ConsDecl") []])) (CFuncType (CFuncType (CTCons ("FlatCurry","TypeExpr") []) (CTCons ("FlatCurry","TypeExpr") [])) (CFuncType (CTCons ("FlatCurry","TypeDecl") []) (CTCons ("FlatCurry","TypeDecl") []))))))) (CRules CFlex [CRule [CPVar (0,"fn"),CPVar (1,"fv"),CPVar (2,"fp"),CPVar (3,"fc"),CPVar (4,"fs")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("AnnotatedFlatCurryGoodies","trType")) (CSymbol ("AnnotatedFlatCurryGoodies","typ"))) (CSymbol ("AnnotatedFlatCurryGoodies","typesyn")))] [CLocalFunc (CFunc ("AnnotatedFlatCurryGoodies","typ") 4 Private (CFuncType (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]) (CFuncType (CTCons ("FlatCurry","Visibility") []) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Int") []]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("FlatCurry","ConsDecl") []]) (CTCons ("FlatCurry","TypeDecl") []))))) (CRules CFlex [CRule [CPVar (5,"name"),CPVar (6,"vis"),CPVar (7,"params"),CPVar (8,"cs")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CSymbol ("FlatCurry","Type")) (CApply (CVar (0,"fn")) (CVar (5,"name")))) (CApply (CVar (1,"fv")) (CVar (6,"vis")))) (CApply (CVar (2,"fp")) (CVar (7,"params")))) (CApply (CVar (3,"fc")) (CVar (8,"cs"))))] []])),CLocalFunc (CFunc ("AnnotatedFlatCurryGoodies","typesyn") 4 Private (CFuncType (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]) (CFuncType (CTCons ("FlatCurry","Visibility") []) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Int") []]) (CFuncType (CTCons ("FlatCurry","TypeExpr") []) (CTCons ("FlatCurry","TypeDecl") []))))) (CRules CFlex [CRule [CPVar (5,"name"),CPVar (6,"vis"),CPVar (7,"params"),CPVar (8,"syn")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CSymbol ("FlatCurry","TypeSyn")) (CApply (CVar (0,"fn")) (CVar (5,"name")))) (CApply (CVar (1,"fv")) (CVar (6,"vis")))) (CApply (CVar (2,"fp")) (CVar (7,"params")))) (CApply (CVar (4,"fs")) (CVar (8,"syn"))))] []]))]]),
  CFunc ("AnnotatedFlatCurryGoodies","updTypeName") 1 Public (CFuncType (CFuncType (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]) (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]])) (CFuncType (CTCons ("FlatCurry","TypeDecl") []) (CTCons ("FlatCurry","TypeDecl") []))) (CRules CFlex [CRule [CPVar (0,"f")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CApply (CSymbol ("AnnotatedFlatCurryGoodies","updType")) (CVar (0,"f"))) (CSymbol ("Prelude","id"))) (CSymbol ("Prelude","id"))) (CSymbol ("Prelude","id"))) (CSymbol ("Prelude","id")))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","updTypeVisibility") 1 Public (CFuncType (CFuncType (CTCons ("FlatCurry","Visibility") []) (CTCons ("FlatCurry","Visibility") [])) (CFuncType (CTCons ("FlatCurry","TypeDecl") []) (CTCons ("FlatCurry","TypeDecl") []))) (CRules CFlex [CRule [CPVar (0,"f")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CApply (CSymbol ("AnnotatedFlatCurryGoodies","updType")) (CSymbol ("Prelude","id"))) (CVar (0,"f"))) (CSymbol ("Prelude","id"))) (CSymbol ("Prelude","id"))) (CSymbol ("Prelude","id")))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","updTypeParams") 1 Public (CFuncType (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Int") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Int") []])) (CFuncType (CTCons ("FlatCurry","TypeDecl") []) (CTCons ("FlatCurry","TypeDecl") []))) (CRules CFlex [CRule [CPVar (0,"f")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CApply (CSymbol ("AnnotatedFlatCurryGoodies","updType")) (CSymbol ("Prelude","id"))) (CSymbol ("Prelude","id"))) (CVar (0,"f"))) (CSymbol ("Prelude","id"))) (CSymbol ("Prelude","id")))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","updTypeConsDecls") 1 Public (CFuncType (CFuncType (CTCons ("Prelude","[]") [CTCons ("FlatCurry","ConsDecl") []]) (CTCons ("Prelude","[]") [CTCons ("FlatCurry","ConsDecl") []])) (CFuncType (CTCons ("FlatCurry","TypeDecl") []) (CTCons ("FlatCurry","TypeDecl") []))) (CRules CFlex [CRule [CPVar (0,"f")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CApply (CSymbol ("AnnotatedFlatCurryGoodies","updType")) (CSymbol ("Prelude","id"))) (CSymbol ("Prelude","id"))) (CSymbol ("Prelude","id"))) (CVar (0,"f"))) (CSymbol ("Prelude","id")))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","updTypeSynonym") 0 Public (CFuncType (CFuncType (CTCons ("FlatCurry","TypeExpr") []) (CTCons ("FlatCurry","TypeExpr") [])) (CFuncType (CTCons ("FlatCurry","TypeDecl") []) (CTCons ("FlatCurry","TypeDecl") []))) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CSymbol ("AnnotatedFlatCurryGoodies","updType")) (CSymbol ("Prelude","id"))) (CSymbol ("Prelude","id"))) (CSymbol ("Prelude","id"))) (CSymbol ("Prelude","id")))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","updQNamesInType") 1 Public (CFuncType (CFuncType (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]) (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]])) (CFuncType (CTCons ("FlatCurry","TypeDecl") []) (CTCons ("FlatCurry","TypeDecl") []))) (CRules CFlex [CRule [CPVar (0,"f")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CApply (CSymbol ("AnnotatedFlatCurryGoodies","updType")) (CVar (0,"f"))) (CSymbol ("Prelude","id"))) (CSymbol ("Prelude","id"))) (CApply (CSymbol ("Prelude","map")) (CApply (CSymbol ("AnnotatedFlatCurryGoodies","updQNamesInConsDecl")) (CVar (0,"f"))))) (CApply (CSymbol ("AnnotatedFlatCurryGoodies","updQNamesInTypeExpr")) (CVar (0,"f"))))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","trCons") 2 Public (CFuncType (CFuncType (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]) (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("FlatCurry","Visibility") []) (CFuncType (CTCons ("Prelude","[]") [CTCons ("FlatCurry","TypeExpr") []]) (CTVar (0,"a")))))) (CFuncType (CTCons ("FlatCurry","ConsDecl") []) (CTVar (0,"a")))) (CRules CFlex [CRule [CPVar (0,"cons"),CPComb ("FlatCurry","Cons") [CPVar (1,"name"),CPVar (2,"arity"),CPVar (3,"vis"),CPVar (4,"args")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CVar (0,"cons")) (CVar (1,"name"))) (CVar (2,"arity"))) (CVar (3,"vis"))) (CVar (4,"args")))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","consName") 0 Public (CFuncType (CTCons ("FlatCurry","ConsDecl") []) (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("AnnotatedFlatCurryGoodies","trCons")) (CLambda [CPVar (0,"name"),CPVar (1,"_"),CPVar (2,"_"),CPVar (3,"_")] (CVar (0,"name"))))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","consArity") 0 Public (CFuncType (CTCons ("FlatCurry","ConsDecl") []) (CTCons ("Prelude","Int") [])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("AnnotatedFlatCurryGoodies","trCons")) (CLambda [CPVar (0,"_"),CPVar (1,"arity"),CPVar (2,"_"),CPVar (3,"_")] (CVar (1,"arity"))))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","consVisibility") 0 Public (CFuncType (CTCons ("FlatCurry","ConsDecl") []) (CTCons ("FlatCurry","Visibility") [])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("AnnotatedFlatCurryGoodies","trCons")) (CLambda [CPVar (0,"_"),CPVar (1,"_"),CPVar (2,"vis"),CPVar (3,"_")] (CVar (2,"vis"))))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","consArgs") 0 Public (CFuncType (CTCons ("FlatCurry","ConsDecl") []) (CTCons ("Prelude","[]") [CTCons ("FlatCurry","TypeExpr") []])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("AnnotatedFlatCurryGoodies","trCons")) (CLambda [CPVar (0,"_"),CPVar (1,"_"),CPVar (2,"_"),CPVar (3,"args")] (CVar (3,"args"))))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","updCons") 4 Public (CFuncType (CFuncType (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]) (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]])) (CFuncType (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("Prelude","Int") [])) (CFuncType (CFuncType (CTCons ("FlatCurry","Visibility") []) (CTCons ("FlatCurry","Visibility") [])) (CFuncType (CFuncType (CTCons ("Prelude","[]") [CTCons ("FlatCurry","TypeExpr") []]) (CTCons ("Prelude","[]") [CTCons ("FlatCurry","TypeExpr") []])) (CFuncType (CTCons ("FlatCurry","ConsDecl") []) (CTCons ("FlatCurry","ConsDecl") [])))))) (CRules CFlex [CRule [CPVar (0,"fn"),CPVar (1,"fa"),CPVar (2,"fv"),CPVar (3,"fas")] [(CSymbol ("Prelude","success"),CApply (CSymbol ("AnnotatedFlatCurryGoodies","trCons")) (CSymbol ("AnnotatedFlatCurryGoodies","cons")))] [CLocalFunc (CFunc ("AnnotatedFlatCurryGoodies","cons") 4 Private (CFuncType (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]) (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("FlatCurry","Visibility") []) (CFuncType (CTCons ("Prelude","[]") [CTCons ("FlatCurry","TypeExpr") []]) (CTCons ("FlatCurry","ConsDecl") []))))) (CRules CFlex [CRule [CPVar (4,"name"),CPVar (5,"arity"),CPVar (6,"vis"),CPVar (7,"args")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CSymbol ("FlatCurry","Cons")) (CApply (CVar (0,"fn")) (CVar (4,"name")))) (CApply (CVar (1,"fa")) (CVar (5,"arity")))) (CApply (CVar (2,"fv")) (CVar (6,"vis")))) (CApply (CVar (3,"fas")) (CVar (7,"args"))))] []]))]]),
  CFunc ("AnnotatedFlatCurryGoodies","updConsName") 1 Public (CFuncType (CFuncType (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]) (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]])) (CFuncType (CTCons ("FlatCurry","ConsDecl") []) (CTCons ("FlatCurry","ConsDecl") []))) (CRules CFlex [CRule [CPVar (0,"f")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CSymbol ("AnnotatedFlatCurryGoodies","updCons")) (CVar (0,"f"))) (CSymbol ("Prelude","id"))) (CSymbol ("Prelude","id"))) (CSymbol ("Prelude","id")))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","updConsArity") 1 Public (CFuncType (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("Prelude","Int") [])) (CFuncType (CTCons ("FlatCurry","ConsDecl") []) (CTCons ("FlatCurry","ConsDecl") []))) (CRules CFlex [CRule [CPVar (0,"f")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CSymbol ("AnnotatedFlatCurryGoodies","updCons")) (CSymbol ("Prelude","id"))) (CVar (0,"f"))) (CSymbol ("Prelude","id"))) (CSymbol ("Prelude","id")))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","updConsVisibility") 1 Public (CFuncType (CFuncType (CTCons ("FlatCurry","Visibility") []) (CTCons ("FlatCurry","Visibility") [])) (CFuncType (CTCons ("FlatCurry","ConsDecl") []) (CTCons ("FlatCurry","ConsDecl") []))) (CRules CFlex [CRule [CPVar (0,"f")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CSymbol ("AnnotatedFlatCurryGoodies","updCons")) (CSymbol ("Prelude","id"))) (CSymbol ("Prelude","id"))) (CVar (0,"f"))) (CSymbol ("Prelude","id")))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","updConsArgs") 0 Public (CFuncType (CFuncType (CTCons ("Prelude","[]") [CTCons ("FlatCurry","TypeExpr") []]) (CTCons ("Prelude","[]") [CTCons ("FlatCurry","TypeExpr") []])) (CFuncType (CTCons ("FlatCurry","ConsDecl") []) (CTCons ("FlatCurry","ConsDecl") []))) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("AnnotatedFlatCurryGoodies","updCons")) (CSymbol ("Prelude","id"))) (CSymbol ("Prelude","id"))) (CSymbol ("Prelude","id")))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","updQNamesInConsDecl") 1 Public (CFuncType (CFuncType (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]) (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]])) (CFuncType (CTCons ("FlatCurry","ConsDecl") []) (CTCons ("FlatCurry","ConsDecl") []))) (CRules CFlex [CRule [CPVar (0,"f")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CSymbol ("AnnotatedFlatCurryGoodies","updCons")) (CVar (0,"f"))) (CSymbol ("Prelude","id"))) (CSymbol ("Prelude","id"))) (CApply (CSymbol ("Prelude","map")) (CApply (CSymbol ("AnnotatedFlatCurryGoodies","updQNamesInTypeExpr")) (CVar (0,"f")))))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","tVarIndex") 1 Public (CFuncType (CTCons ("FlatCurry","TypeExpr") []) (CTCons ("Prelude","Int") [])) (CRules CFlex [CRule [CPComb ("FlatCurry","TVar") [CPVar (0,"n")]] [(CSymbol ("Prelude","success"),CVar (0,"n"))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","domain") 1 Public (CFuncType (CTCons ("FlatCurry","TypeExpr") []) (CTCons ("FlatCurry","TypeExpr") [])) (CRules CFlex [CRule [CPComb ("FlatCurry","FuncType") [CPVar (0,"dom"),CPVar (1,"_")]] [(CSymbol ("Prelude","success"),CVar (0,"dom"))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","range") 1 Public (CFuncType (CTCons ("FlatCurry","TypeExpr") []) (CTCons ("FlatCurry","TypeExpr") [])) (CRules CFlex [CRule [CPComb ("FlatCurry","FuncType") [CPVar (0,"_"),CPVar (1,"ran")]] [(CSymbol ("Prelude","success"),CVar (1,"ran"))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","tConsName") 1 Public (CFuncType (CTCons ("FlatCurry","TypeExpr") []) (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]])) (CRules CFlex [CRule [CPComb ("FlatCurry","TCons") [CPVar (0,"name"),CPVar (1,"_")]] [(CSymbol ("Prelude","success"),CVar (0,"name"))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","tConsArgs") 1 Public (CFuncType (CTCons ("FlatCurry","TypeExpr") []) (CTCons ("Prelude","[]") [CTCons ("FlatCurry","TypeExpr") []])) (CRules CFlex [CRule [CPComb ("FlatCurry","TCons") [CPVar (0,"_"),CPVar (1,"args")]] [(CSymbol ("Prelude","success"),CVar (1,"args"))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","trTypeExpr") 4 Public (CFuncType (CFuncType (CTCons ("Prelude","Int") []) (CTVar (0,"a"))) (CFuncType (CFuncType (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]) (CFuncType (CTCons ("Prelude","[]") [CTVar (0,"a")]) (CTVar (0,"a")))) (CFuncType (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (0,"a")) (CTVar (0,"a")))) (CFuncType (CTCons ("FlatCurry","TypeExpr") []) (CTVar (0,"a")))))) (CRules CFlex [CRule [CPVar (0,"tvar"),CPVar (1,"_"),CPVar (2,"_"),CPComb ("FlatCurry","TVar") [CPVar (3,"n")]] [(CSymbol ("Prelude","success"),CApply (CVar (0,"tvar")) (CVar (3,"n")))] [],CRule [CPVar (4,"tvar"),CPVar (5,"tcons"),CPVar (6,"functype"),CPComb ("FlatCurry","TCons") [CPVar (7,"name"),CPVar (8,"args")]] [(CSymbol ("Prelude","success"),CApply (CApply (CVar (5,"tcons")) (CVar (7,"name"))) (CApply (CApply (CSymbol ("Prelude","map")) (CApply (CApply (CApply (CSymbol ("AnnotatedFlatCurryGoodies","trTypeExpr")) (CVar (4,"tvar"))) (CVar (5,"tcons"))) (CVar (6,"functype")))) (CVar (8,"args"))))] [],CRule [CPVar (9,"tvar"),CPVar (10,"tcons"),CPVar (11,"functype"),CPComb ("FlatCurry","FuncType") [CPVar (12,"from"),CPVar (13,"to")]] [(CSymbol ("Prelude","success"),CApply (CApply (CVar (11,"functype")) (CApply (CVar (14,"f")) (CVar (12,"from")))) (CApply (CVar (14,"f")) (CVar (13,"to"))))] [CLocalPat (CPVar (14,"f")) (CApply (CApply (CApply (CSymbol ("AnnotatedFlatCurryGoodies","trTypeExpr")) (CVar (9,"tvar"))) (CVar (10,"tcons"))) (CVar (11,"functype"))) []]]),
  CFunc ("AnnotatedFlatCurryGoodies","isTVar") 0 Public (CFuncType (CTCons ("FlatCurry","TypeExpr") []) (CTCons ("Prelude","Bool") [])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("AnnotatedFlatCurryGoodies","trTypeExpr")) (CLambda [CPVar (0,"_")] (CSymbol ("Prelude","True")))) (CLambda [CPVar (1,"_"),CPVar (2,"_")] (CSymbol ("Prelude","False")))) (CLambda [CPVar (3,"_"),CPVar (4,"_")] (CSymbol ("Prelude","False"))))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","isTCons") 0 Public (CFuncType (CTCons ("FlatCurry","TypeExpr") []) (CTCons ("Prelude","Bool") [])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("AnnotatedFlatCurryGoodies","trTypeExpr")) (CLambda [CPVar (0,"_")] (CSymbol ("Prelude","False")))) (CLambda [CPVar (1,"_"),CPVar (2,"_")] (CSymbol ("Prelude","True")))) (CLambda [CPVar (3,"_"),CPVar (4,"_")] (CSymbol ("Prelude","False"))))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","isFuncType") 0 Public (CFuncType (CTCons ("FlatCurry","TypeExpr") []) (CTCons ("Prelude","Bool") [])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("AnnotatedFlatCurryGoodies","trTypeExpr")) (CLambda [CPVar (0,"_")] (CSymbol ("Prelude","False")))) (CLambda [CPVar (1,"_"),CPVar (2,"_")] (CSymbol ("Prelude","False")))) (CLambda [CPVar (3,"_"),CPVar (4,"_")] (CSymbol ("Prelude","True"))))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","updTVars") 1 Public (CFuncType (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("FlatCurry","TypeExpr") [])) (CFuncType (CTCons ("FlatCurry","TypeExpr") []) (CTCons ("FlatCurry","TypeExpr") []))) (CRules CFlex [CRule [CPVar (0,"tvar")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("AnnotatedFlatCurryGoodies","trTypeExpr")) (CVar (0,"tvar"))) (CSymbol ("FlatCurry","TCons"))) (CSymbol ("FlatCurry","FuncType")))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","updTCons") 1 Public (CFuncType (CFuncType (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("FlatCurry","TypeExpr") []]) (CTCons ("FlatCurry","TypeExpr") []))) (CFuncType (CTCons ("FlatCurry","TypeExpr") []) (CTCons ("FlatCurry","TypeExpr") []))) (CRules CFlex [CRule [CPVar (0,"tcons")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("AnnotatedFlatCurryGoodies","trTypeExpr")) (CSymbol ("FlatCurry","TVar"))) (CVar (0,"tcons"))) (CSymbol ("FlatCurry","FuncType")))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","updFuncTypes") 0 Public (CFuncType (CFuncType (CTCons ("FlatCurry","TypeExpr") []) (CFuncType (CTCons ("FlatCurry","TypeExpr") []) (CTCons ("FlatCurry","TypeExpr") []))) (CFuncType (CTCons ("FlatCurry","TypeExpr") []) (CTCons ("FlatCurry","TypeExpr") []))) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("AnnotatedFlatCurryGoodies","trTypeExpr")) (CSymbol ("FlatCurry","TVar"))) (CSymbol ("FlatCurry","TCons")))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","argTypes") 1 Public (CFuncType (CTCons ("FlatCurry","TypeExpr") []) (CTCons ("Prelude","[]") [CTCons ("FlatCurry","TypeExpr") []])) (CRules CFlex [CRule [CPComb ("FlatCurry","TVar") [CPVar (0,"_")]] [(CSymbol ("Prelude","success"),CSymbol ("Prelude","[]"))] [],CRule [CPComb ("FlatCurry","TCons") [CPVar (1,"_"),CPVar (2,"_")]] [(CSymbol ("Prelude","success"),CSymbol ("Prelude","[]"))] [],CRule [CPComb ("FlatCurry","FuncType") [CPVar (3,"dom"),CPVar (4,"ran")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",":")) (CVar (3,"dom"))) (CApply (CSymbol ("AnnotatedFlatCurryGoodies","argTypes")) (CVar (4,"ran"))))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","resultType") 1 Public (CFuncType (CTCons ("FlatCurry","TypeExpr") []) (CTCons ("FlatCurry","TypeExpr") [])) (CRules CFlex [CRule [CPComb ("FlatCurry","TVar") [CPVar (0,"n")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("FlatCurry","TVar")) (CVar (0,"n")))] [],CRule [CPComb ("FlatCurry","TCons") [CPVar (1,"name"),CPVar (2,"args")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("FlatCurry","TCons")) (CVar (1,"name"))) (CVar (2,"args")))] [],CRule [CPComb ("FlatCurry","FuncType") [CPVar (3,"_"),CPVar (4,"ran")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("AnnotatedFlatCurryGoodies","resultType")) (CVar (4,"ran")))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","rnmAllVarsInTypeExpr") 1 Public (CFuncType (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("Prelude","Int") [])) (CFuncType (CTCons ("FlatCurry","TypeExpr") []) (CTCons ("FlatCurry","TypeExpr") []))) (CRules CFlex [CRule [CPVar (0,"f")] [(CSymbol ("Prelude","success"),CApply (CSymbol ("AnnotatedFlatCurryGoodies","updTVars")) (CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("FlatCurry","TVar"))) (CVar (0,"f"))))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","updQNamesInTypeExpr") 1 Public (CFuncType (CFuncType (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]) (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]])) (CFuncType (CTCons ("FlatCurry","TypeExpr") []) (CTCons ("FlatCurry","TypeExpr") []))) (CRules CFlex [CRule [CPVar (0,"f")] [(CSymbol ("Prelude","success"),CApply (CSymbol ("AnnotatedFlatCurryGoodies","updTCons")) (CLambda [CPVar (1,"name"),CPVar (2,"args")] (CApply (CApply (CSymbol ("FlatCurry","TCons")) (CApply (CVar (0,"f")) (CVar (1,"name")))) (CVar (2,"args")))))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","trOp") 2 Public (CFuncType (CFuncType (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]) (CFuncType (CTCons ("FlatCurry","Fixity") []) (CFuncType (CTCons ("Prelude","Int") []) (CTVar (0,"a"))))) (CFuncType (CTCons ("FlatCurry","OpDecl") []) (CTVar (0,"a")))) (CRules CFlex [CRule [CPVar (0,"op"),CPComb ("FlatCurry","Op") [CPVar (1,"name"),CPVar (2,"fix"),CPVar (3,"prec")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CVar (0,"op")) (CVar (1,"name"))) (CVar (2,"fix"))) (CVar (3,"prec")))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","opName") 0 Public (CFuncType (CTCons ("FlatCurry","OpDecl") []) (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("AnnotatedFlatCurryGoodies","trOp")) (CLambda [CPVar (0,"name"),CPVar (1,"_"),CPVar (2,"_")] (CVar (0,"name"))))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","opFixity") 0 Public (CFuncType (CTCons ("FlatCurry","OpDecl") []) (CTCons ("FlatCurry","Fixity") [])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("AnnotatedFlatCurryGoodies","trOp")) (CLambda [CPVar (0,"_"),CPVar (1,"fix"),CPVar (2,"_")] (CVar (1,"fix"))))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","opPrecedence") 0 Public (CFuncType (CTCons ("FlatCurry","OpDecl") []) (CTCons ("Prelude","Int") [])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("AnnotatedFlatCurryGoodies","trOp")) (CLambda [CPVar (0,"_"),CPVar (1,"_"),CPVar (2,"prec")] (CVar (2,"prec"))))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","updOp") 3 Public (CFuncType (CFuncType (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]) (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]])) (CFuncType (CFuncType (CTCons ("FlatCurry","Fixity") []) (CTCons ("FlatCurry","Fixity") [])) (CFuncType (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("Prelude","Int") [])) (CFuncType (CTCons ("FlatCurry","OpDecl") []) (CTCons ("FlatCurry","OpDecl") []))))) (CRules CFlex [CRule [CPVar (0,"fn"),CPVar (1,"ff"),CPVar (2,"fp")] [(CSymbol ("Prelude","success"),CApply (CSymbol ("AnnotatedFlatCurryGoodies","trOp")) (CSymbol ("AnnotatedFlatCurryGoodies","op")))] [CLocalFunc (CFunc ("AnnotatedFlatCurryGoodies","op") 3 Private (CFuncType (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]) (CFuncType (CTCons ("FlatCurry","Fixity") []) (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("FlatCurry","OpDecl") [])))) (CRules CFlex [CRule [CPVar (3,"name"),CPVar (4,"fix"),CPVar (5,"prec")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("FlatCurry","Op")) (CApply (CVar (0,"fn")) (CVar (3,"name")))) (CApply (CVar (1,"ff")) (CVar (4,"fix")))) (CApply (CVar (2,"fp")) (CVar (5,"prec"))))] []]))]]),
  CFunc ("AnnotatedFlatCurryGoodies","updOpName") 1 Public (CFuncType (CFuncType (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]) (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]])) (CFuncType (CTCons ("FlatCurry","OpDecl") []) (CTCons ("FlatCurry","OpDecl") []))) (CRules CFlex [CRule [CPVar (0,"f")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("AnnotatedFlatCurryGoodies","updOp")) (CVar (0,"f"))) (CSymbol ("Prelude","id"))) (CSymbol ("Prelude","id")))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","updOpFixity") 1 Public (CFuncType (CFuncType (CTCons ("FlatCurry","Fixity") []) (CTCons ("FlatCurry","Fixity") [])) (CFuncType (CTCons ("FlatCurry","OpDecl") []) (CTCons ("FlatCurry","OpDecl") []))) (CRules CFlex [CRule [CPVar (0,"f")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("AnnotatedFlatCurryGoodies","updOp")) (CSymbol ("Prelude","id"))) (CVar (0,"f"))) (CSymbol ("Prelude","id")))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","updOpPrecedence") 0 Public (CFuncType (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("Prelude","Int") [])) (CFuncType (CTCons ("FlatCurry","OpDecl") []) (CTCons ("FlatCurry","OpDecl") []))) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("AnnotatedFlatCurryGoodies","updOp")) (CSymbol ("Prelude","id"))) (CSymbol ("Prelude","id")))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","trFunc") 2 Public (CFuncType (CFuncType (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]) (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("FlatCurry","Visibility") []) (CFuncType (CTCons ("FlatCurry","TypeExpr") []) (CFuncType (CTCons ("AnnotatedFlatCurry","ARule") [CTVar (0,"a")]) (CTVar (1,"b"))))))) (CFuncType (CTCons ("AnnotatedFlatCurry","AFuncDecl") [CTVar (0,"a")]) (CTVar (1,"b")))) (CRules CFlex [CRule [CPVar (0,"func"),CPComb ("AnnotatedFlatCurry","AFunc") [CPVar (1,"name"),CPVar (2,"arity"),CPVar (3,"vis"),CPVar (4,"t"),CPVar (5,"rule")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CApply (CVar (0,"func")) (CVar (1,"name"))) (CVar (2,"arity"))) (CVar (3,"vis"))) (CVar (4,"t"))) (CVar (5,"rule")))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","funcName") 0 Public (CFuncType (CTCons ("AnnotatedFlatCurry","AFuncDecl") [CTVar (0,"a")]) (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("AnnotatedFlatCurryGoodies","trFunc")) (CLambda [CPVar (0,"name"),CPVar (1,"_"),CPVar (2,"_"),CPVar (3,"_"),CPVar (4,"_")] (CVar (0,"name"))))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","funcArity") 0 Public (CFuncType (CTCons ("AnnotatedFlatCurry","AFuncDecl") [CTVar (0,"a")]) (CTCons ("Prelude","Int") [])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("AnnotatedFlatCurryGoodies","trFunc")) (CLambda [CPVar (0,"_"),CPVar (1,"arity"),CPVar (2,"_"),CPVar (3,"_"),CPVar (4,"_")] (CVar (1,"arity"))))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","funcVisibility") 0 Public (CFuncType (CTCons ("AnnotatedFlatCurry","AFuncDecl") [CTVar (0,"a")]) (CTCons ("FlatCurry","Visibility") [])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("AnnotatedFlatCurryGoodies","trFunc")) (CLambda [CPVar (0,"_"),CPVar (1,"_"),CPVar (2,"vis"),CPVar (3,"_"),CPVar (4,"_")] (CVar (2,"vis"))))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","funcType") 0 Public (CFuncType (CTCons ("AnnotatedFlatCurry","AFuncDecl") [CTVar (0,"a")]) (CTCons ("FlatCurry","TypeExpr") [])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("AnnotatedFlatCurryGoodies","trFunc")) (CLambda [CPVar (0,"_"),CPVar (1,"_"),CPVar (2,"_"),CPVar (3,"t"),CPVar (4,"_")] (CVar (3,"t"))))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","funcRule") 0 Public (CFuncType (CTCons ("AnnotatedFlatCurry","AFuncDecl") [CTVar (0,"a")]) (CTCons ("AnnotatedFlatCurry","ARule") [CTVar (0,"a")])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("AnnotatedFlatCurryGoodies","trFunc")) (CLambda [CPVar (0,"_"),CPVar (1,"_"),CPVar (2,"_"),CPVar (3,"_"),CPVar (4,"rule")] (CVar (4,"rule"))))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","updFunc") 5 Public (CFuncType (CFuncType (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]) (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]])) (CFuncType (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("Prelude","Int") [])) (CFuncType (CFuncType (CTCons ("FlatCurry","Visibility") []) (CTCons ("FlatCurry","Visibility") [])) (CFuncType (CFuncType (CTCons ("FlatCurry","TypeExpr") []) (CTCons ("FlatCurry","TypeExpr") [])) (CFuncType (CFuncType (CTCons ("AnnotatedFlatCurry","ARule") [CTVar (0,"a")]) (CTCons ("AnnotatedFlatCurry","ARule") [CTVar (0,"a")])) (CFuncType (CTCons ("AnnotatedFlatCurry","AFuncDecl") [CTVar (0,"a")]) (CTCons ("AnnotatedFlatCurry","AFuncDecl") [CTVar (0,"a")]))))))) (CRules CFlex [CRule [CPVar (0,"fn"),CPVar (1,"fa"),CPVar (2,"fv"),CPVar (3,"ft"),CPVar (4,"fr")] [(CSymbol ("Prelude","success"),CApply (CSymbol ("AnnotatedFlatCurryGoodies","trFunc")) (CSymbol ("AnnotatedFlatCurryGoodies","func")))] [CLocalFunc (CFunc ("AnnotatedFlatCurryGoodies","func") 5 Private (CFuncType (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]) (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("FlatCurry","Visibility") []) (CFuncType (CTCons ("FlatCurry","TypeExpr") []) (CFuncType (CTCons ("AnnotatedFlatCurry","ARule") [CTVar (1,"_545")]) (CTCons ("AnnotatedFlatCurry","AFuncDecl") [CTVar (1,"_545")])))))) (CRules CFlex [CRule [CPVar (5,"name"),CPVar (6,"arity"),CPVar (7,"vis"),CPVar (8,"t"),CPVar (9,"rule")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CApply (CSymbol ("AnnotatedFlatCurry","AFunc")) (CApply (CVar (0,"fn")) (CVar (5,"name")))) (CApply (CVar (1,"fa")) (CVar (6,"arity")))) (CApply (CVar (2,"fv")) (CVar (7,"vis")))) (CApply (CVar (3,"ft")) (CVar (8,"t")))) (CApply (CVar (4,"fr")) (CVar (9,"rule"))))] []]))]]),
  CFunc ("AnnotatedFlatCurryGoodies","updFuncName") 1 Public (CFuncType (CFuncType (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]) (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]])) (CFuncType (CTCons ("AnnotatedFlatCurry","AFuncDecl") [CTVar (0,"a")]) (CTCons ("AnnotatedFlatCurry","AFuncDecl") [CTVar (0,"a")]))) (CRules CFlex [CRule [CPVar (0,"f")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CApply (CSymbol ("AnnotatedFlatCurryGoodies","updFunc")) (CVar (0,"f"))) (CSymbol ("Prelude","id"))) (CSymbol ("Prelude","id"))) (CSymbol ("Prelude","id"))) (CSymbol ("Prelude","id")))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","updFuncArity") 1 Public (CFuncType (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("Prelude","Int") [])) (CFuncType (CTCons ("AnnotatedFlatCurry","AFuncDecl") [CTVar (0,"a")]) (CTCons ("AnnotatedFlatCurry","AFuncDecl") [CTVar (0,"a")]))) (CRules CFlex [CRule [CPVar (0,"f")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CApply (CSymbol ("AnnotatedFlatCurryGoodies","updFunc")) (CSymbol ("Prelude","id"))) (CVar (0,"f"))) (CSymbol ("Prelude","id"))) (CSymbol ("Prelude","id"))) (CSymbol ("Prelude","id")))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","updFuncVisibility") 1 Public (CFuncType (CFuncType (CTCons ("FlatCurry","Visibility") []) (CTCons ("FlatCurry","Visibility") [])) (CFuncType (CTCons ("AnnotatedFlatCurry","AFuncDecl") [CTVar (0,"a")]) (CTCons ("AnnotatedFlatCurry","AFuncDecl") [CTVar (0,"a")]))) (CRules CFlex [CRule [CPVar (0,"f")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CApply (CSymbol ("AnnotatedFlatCurryGoodies","updFunc")) (CSymbol ("Prelude","id"))) (CSymbol ("Prelude","id"))) (CVar (0,"f"))) (CSymbol ("Prelude","id"))) (CSymbol ("Prelude","id")))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","updFuncType") 1 Public (CFuncType (CFuncType (CTCons ("FlatCurry","TypeExpr") []) (CTCons ("FlatCurry","TypeExpr") [])) (CFuncType (CTCons ("AnnotatedFlatCurry","AFuncDecl") [CTVar (0,"a")]) (CTCons ("AnnotatedFlatCurry","AFuncDecl") [CTVar (0,"a")]))) (CRules CFlex [CRule [CPVar (0,"f")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CApply (CSymbol ("AnnotatedFlatCurryGoodies","updFunc")) (CSymbol ("Prelude","id"))) (CSymbol ("Prelude","id"))) (CSymbol ("Prelude","id"))) (CVar (0,"f"))) (CSymbol ("Prelude","id")))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","updFuncRule") 0 Public (CFuncType (CFuncType (CTCons ("AnnotatedFlatCurry","ARule") [CTVar (0,"a")]) (CTCons ("AnnotatedFlatCurry","ARule") [CTVar (0,"a")])) (CFuncType (CTCons ("AnnotatedFlatCurry","AFuncDecl") [CTVar (0,"a")]) (CTCons ("AnnotatedFlatCurry","AFuncDecl") [CTVar (0,"a")]))) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CSymbol ("AnnotatedFlatCurryGoodies","updFunc")) (CSymbol ("Prelude","id"))) (CSymbol ("Prelude","id"))) (CSymbol ("Prelude","id"))) (CSymbol ("Prelude","id")))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","isExternal") 0 Public (CFuncType (CTCons ("AnnotatedFlatCurry","AFuncDecl") [CTVar (0,"a")]) (CTCons ("Prelude","Bool") [])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("AnnotatedFlatCurryGoodies","isRuleExternal"))) (CSymbol ("AnnotatedFlatCurryGoodies","funcRule")))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","allVarsInFunc") 0 Public (CFuncType (CTCons ("AnnotatedFlatCurry","AFuncDecl") [CTVar (0,"a")]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Int") []])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("AnnotatedFlatCurryGoodies","allVarsInRule"))) (CSymbol ("AnnotatedFlatCurryGoodies","funcRule")))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","funcArgs") 0 Public (CFuncType (CTCons ("AnnotatedFlatCurry","AFuncDecl") [CTVar (0,"a")]) (CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","Int") [],CTVar (0,"a")]])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("AnnotatedFlatCurryGoodies","ruleArgs"))) (CSymbol ("AnnotatedFlatCurryGoodies","funcRule")))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","funcBody") 0 Public (CFuncType (CTCons ("AnnotatedFlatCurry","AFuncDecl") [CTVar (0,"a")]) (CTCons ("AnnotatedFlatCurry","AExpr") [CTVar (0,"a")])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("AnnotatedFlatCurryGoodies","ruleBody"))) (CSymbol ("AnnotatedFlatCurryGoodies","funcRule")))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","funcRHS") 1 Public (CFuncType (CTCons ("AnnotatedFlatCurry","AFuncDecl") [CTVar (0,"a")]) (CTCons ("Prelude","[]") [CTCons ("AnnotatedFlatCurry","AExpr") [CTVar (0,"a")]])) (CRules CFlex [CRule [CPVar (0,"f")] [(CApply (CSymbol ("Prelude","not")) (CApply (CSymbol ("AnnotatedFlatCurryGoodies","isExternal")) (CVar (0,"f"))),CApply (CSymbol ("AnnotatedFlatCurryGoodies","orCase")) (CApply (CSymbol ("AnnotatedFlatCurryGoodies","funcBody")) (CVar (0,"f")))),(CSymbol ("Prelude","otherwise"),CSymbol ("Prelude","[]"))] [CLocalFunc (CFunc ("AnnotatedFlatCurryGoodies","orCase") 1 Private (CFuncType (CTCons ("AnnotatedFlatCurry","AExpr") [CTVar (0,"a")]) (CTCons ("Prelude","[]") [CTCons ("AnnotatedFlatCurry","AExpr") [CTVar (0,"a")]])) (CRules CFlex [CRule [CPVar (1,"e")] [(CApply (CSymbol ("AnnotatedFlatCurryGoodies","isOr")) (CVar (1,"e")),CApply (CApply (CSymbol ("Prelude","concatMap")) (CSymbol ("AnnotatedFlatCurryGoodies","orCase"))) (CApply (CSymbol ("AnnotatedFlatCurryGoodies","orExps")) (CVar (1,"e")))),(CApply (CSymbol ("AnnotatedFlatCurryGoodies","isCase")) (CVar (1,"e")),CApply (CApply (CSymbol ("Prelude","concatMap")) (CSymbol ("AnnotatedFlatCurryGoodies","orCase"))) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("AnnotatedFlatCurryGoodies","branchExpr"))) (CApply (CSymbol ("AnnotatedFlatCurryGoodies","caseBranches")) (CVar (1,"e"))))),(CSymbol ("Prelude","otherwise"),CApply (CApply (CSymbol ("Prelude",":")) (CVar (1,"e"))) (CSymbol ("Prelude","[]")))] []]))]]),
  CFunc ("AnnotatedFlatCurryGoodies","rnmAllVarsInFunc") 0 Public (CFuncType (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("Prelude","Int") [])) (CFuncType (CTCons ("AnnotatedFlatCurry","AFuncDecl") [CTVar (0,"a")]) (CTCons ("AnnotatedFlatCurry","AFuncDecl") [CTVar (0,"a")]))) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",".")) (CApply (CApply (CApply (CApply (CSymbol ("AnnotatedFlatCurryGoodies","updFunc")) (CSymbol ("Prelude","id"))) (CSymbol ("Prelude","id"))) (CSymbol ("Prelude","id"))) (CSymbol ("Prelude","id")))) (CSymbol ("AnnotatedFlatCurryGoodies","rnmAllVarsInRule")))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","updQNamesInFunc") 1 Public (CFuncType (CFuncType (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]) (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]])) (CFuncType (CTCons ("AnnotatedFlatCurry","AFuncDecl") [CTVar (0,"a")]) (CTCons ("AnnotatedFlatCurry","AFuncDecl") [CTVar (0,"a")]))) (CRules CFlex [CRule [CPVar (0,"f")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CApply (CSymbol ("AnnotatedFlatCurryGoodies","updFunc")) (CVar (0,"f"))) (CSymbol ("Prelude","id"))) (CSymbol ("Prelude","id"))) (CApply (CSymbol ("AnnotatedFlatCurryGoodies","updQNamesInTypeExpr")) (CVar (0,"f")))) (CApply (CSymbol ("AnnotatedFlatCurryGoodies","updQNamesInRule")) (CVar (0,"f"))))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","updFuncArgs") 0 Public (CFuncType (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","Int") [],CTVar (0,"a")]]) (CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","Int") [],CTVar (0,"a")]])) (CFuncType (CTCons ("AnnotatedFlatCurry","AFuncDecl") [CTVar (0,"a")]) (CTCons ("AnnotatedFlatCurry","AFuncDecl") [CTVar (0,"a")]))) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("AnnotatedFlatCurryGoodies","updFuncRule"))) (CSymbol ("AnnotatedFlatCurryGoodies","updRuleArgs")))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","updFuncBody") 0 Public (CFuncType (CFuncType (CTCons ("AnnotatedFlatCurry","AExpr") [CTVar (0,"a")]) (CTCons ("AnnotatedFlatCurry","AExpr") [CTVar (0,"a")])) (CFuncType (CTCons ("AnnotatedFlatCurry","AFuncDecl") [CTVar (0,"a")]) (CTCons ("AnnotatedFlatCurry","AFuncDecl") [CTVar (0,"a")]))) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("AnnotatedFlatCurryGoodies","updFuncRule"))) (CSymbol ("AnnotatedFlatCurryGoodies","updRuleBody")))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","trRule") 3 Public (CFuncType (CFuncType (CTVar (0,"a")) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","Int") [],CTVar (0,"a")]]) (CFuncType (CTCons ("AnnotatedFlatCurry","AExpr") [CTVar (0,"a")]) (CTVar (1,"b"))))) (CFuncType (CFuncType (CTVar (0,"a")) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTVar (1,"b")))) (CFuncType (CTCons ("AnnotatedFlatCurry","ARule") [CTVar (0,"a")]) (CTVar (1,"b"))))) (CRules CFlex [CRule [CPVar (0,"rule"),CPVar (1,"_"),CPComb ("AnnotatedFlatCurry","ARule") [CPVar (2,"a"),CPVar (3,"vs"),CPVar (4,"e")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CVar (0,"rule")) (CVar (2,"a"))) (CVar (3,"vs"))) (CVar (4,"e")))] [],CRule [CPVar (5,"_"),CPVar (6,"ext"),CPComb ("AnnotatedFlatCurry","AExternal") [CPVar (7,"a"),CPVar (8,"s")]] [(CSymbol ("Prelude","success"),CApply (CApply (CVar (6,"ext")) (CVar (7,"a"))) (CVar (8,"s")))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","ruleArgs") 0 Public (CFuncType (CTCons ("AnnotatedFlatCurry","ARule") [CTVar (0,"a")]) (CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","Int") [],CTVar (0,"a")]])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("AnnotatedFlatCurryGoodies","trRule")) (CLambda [CPVar (0,"_"),CPVar (1,"vs"),CPVar (2,"_")] (CVar (1,"vs")))) (CSymbol ("Prelude","failed")))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","ruleBody") 0 Public (CFuncType (CTCons ("AnnotatedFlatCurry","ARule") [CTVar (0,"a")]) (CTCons ("AnnotatedFlatCurry","AExpr") [CTVar (0,"a")])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("AnnotatedFlatCurryGoodies","trRule")) (CLambda [CPVar (0,"_"),CPVar (1,"_"),CPVar (2,"e")] (CVar (2,"e")))) (CSymbol ("Prelude","failed")))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","ruleExtDecl") 0 Public (CFuncType (CTCons ("AnnotatedFlatCurry","ARule") [CTVar (0,"a")]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("AnnotatedFlatCurryGoodies","trRule")) (CSymbol ("Prelude","failed"))) (CLambda [CPVar (0,"_"),CPVar (1,"s")] (CVar (1,"s"))))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","isRuleExternal") 0 Public (CFuncType (CTCons ("AnnotatedFlatCurry","ARule") [CTVar (0,"a")]) (CTCons ("Prelude","Bool") [])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("AnnotatedFlatCurryGoodies","trRule")) (CLambda [CPVar (0,"_"),CPVar (1,"_"),CPVar (2,"_")] (CSymbol ("Prelude","False")))) (CLambda [CPVar (3,"_"),CPVar (4,"_")] (CSymbol ("Prelude","True"))))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","updRule") 4 Public (CFuncType (CFuncType (CTVar (0,"a")) (CTVar (0,"a"))) (CFuncType (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","Int") [],CTVar (0,"a")]]) (CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","Int") [],CTVar (0,"a")]])) (CFuncType (CFuncType (CTCons ("AnnotatedFlatCurry","AExpr") [CTVar (0,"a")]) (CTCons ("AnnotatedFlatCurry","AExpr") [CTVar (0,"a")])) (CFuncType (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CFuncType (CTCons ("AnnotatedFlatCurry","ARule") [CTVar (0,"a")]) (CTCons ("AnnotatedFlatCurry","ARule") [CTVar (0,"a")])))))) (CRules CFlex [CRule [CPVar (0,"fa"),CPVar (1,"fvs"),CPVar (2,"fe"),CPVar (3,"fs")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("AnnotatedFlatCurryGoodies","trRule")) (CSymbol ("AnnotatedFlatCurryGoodies","rule"))) (CSymbol ("AnnotatedFlatCurryGoodies","ext")))] [CLocalFunc (CFunc ("AnnotatedFlatCurryGoodies","rule") 3 Private (CFuncType (CTVar (1,"_570")) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","Int") [],CTVar (1,"_570")]]) (CFuncType (CTCons ("AnnotatedFlatCurry","AExpr") [CTVar (1,"_570")]) (CTCons ("AnnotatedFlatCurry","ARule") [CTVar (1,"_570")])))) (CRules CFlex [CRule [CPVar (4,"a"),CPVar (5,"vs"),CPVar (6,"e")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("AnnotatedFlatCurry","ARule")) (CApply (CVar (0,"fa")) (CVar (4,"a")))) (CApply (CVar (1,"fvs")) (CVar (5,"vs")))) (CApply (CVar (2,"fe")) (CVar (6,"e"))))] []])),CLocalFunc (CFunc ("AnnotatedFlatCurryGoodies","ext") 2 Private (CFuncType (CTVar (1,"_570")) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("AnnotatedFlatCurry","ARule") [CTVar (1,"_570")]))) (CRules CFlex [CRule [CPVar (4,"a"),CPVar (5,"s")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("AnnotatedFlatCurry","AExternal")) (CApply (CVar (0,"fa")) (CVar (4,"a")))) (CApply (CVar (3,"fs")) (CVar (5,"s"))))] []]))]]),
  CFunc ("AnnotatedFlatCurryGoodies","updRuleArgs") 1 Public (CFuncType (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","Int") [],CTVar (0,"a")]]) (CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","Int") [],CTVar (0,"a")]])) (CFuncType (CTCons ("AnnotatedFlatCurry","ARule") [CTVar (0,"a")]) (CTCons ("AnnotatedFlatCurry","ARule") [CTVar (0,"a")]))) (CRules CFlex [CRule [CPVar (0,"f")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CSymbol ("AnnotatedFlatCurryGoodies","updRule")) (CSymbol ("Prelude","id"))) (CVar (0,"f"))) (CSymbol ("Prelude","id"))) (CSymbol ("Prelude","id")))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","updRuleBody") 1 Public (CFuncType (CFuncType (CTCons ("AnnotatedFlatCurry","AExpr") [CTVar (0,"a")]) (CTCons ("AnnotatedFlatCurry","AExpr") [CTVar (0,"a")])) (CFuncType (CTCons ("AnnotatedFlatCurry","ARule") [CTVar (0,"a")]) (CTCons ("AnnotatedFlatCurry","ARule") [CTVar (0,"a")]))) (CRules CFlex [CRule [CPVar (0,"f")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CSymbol ("AnnotatedFlatCurryGoodies","updRule")) (CSymbol ("Prelude","id"))) (CSymbol ("Prelude","id"))) (CVar (0,"f"))) (CSymbol ("Prelude","id")))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","updRuleExtDecl") 1 Public (CFuncType (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CFuncType (CTCons ("AnnotatedFlatCurry","ARule") [CTVar (0,"a")]) (CTCons ("AnnotatedFlatCurry","ARule") [CTVar (0,"a")]))) (CRules CFlex [CRule [CPVar (0,"f")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CSymbol ("AnnotatedFlatCurryGoodies","updRule")) (CSymbol ("Prelude","id"))) (CSymbol ("Prelude","id"))) (CSymbol ("Prelude","id"))) (CVar (0,"f")))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","allVarsInRule") 0 Public (CFuncType (CTCons ("AnnotatedFlatCurry","ARule") [CTVar (0,"a")]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Int") []])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("AnnotatedFlatCurryGoodies","trRule")) (CLambda [CPVar (0,"_"),CPVar (1,"vs"),CPVar (2,"e")] (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("Prelude","fst"))) (CVar (1,"vs")))) (CApply (CSymbol ("AnnotatedFlatCurryGoodies","allVars")) (CVar (2,"e")))))) (CLambda [CPVar (3,"_"),CPVar (4,"_")] (CSymbol ("Prelude","[]"))))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","rnmAllVarsInRule") 1 Public (CFuncType (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("Prelude","Int") [])) (CFuncType (CTCons ("AnnotatedFlatCurry","ARule") [CTVar (0,"a")]) (CTCons ("AnnotatedFlatCurry","ARule") [CTVar (0,"a")]))) (CRules CFlex [CRule [CPVar (0,"f")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CSymbol ("AnnotatedFlatCurryGoodies","updRule")) (CSymbol ("Prelude","id"))) (CApply (CSymbol ("Prelude","map")) (CLambda [CPComb ("Prelude","(,)") [CPVar (1,"v"),CPVar (2,"a")]] (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CVar (0,"f")) (CVar (1,"v")))) (CVar (2,"a")))))) (CApply (CSymbol ("AnnotatedFlatCurryGoodies","rnmAllVars")) (CVar (0,"f")))) (CSymbol ("Prelude","id")))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","updQNamesInRule") 0 Public (CFuncType (CFuncType (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]) (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]])) (CFuncType (CTCons ("AnnotatedFlatCurry","ARule") [CTVar (0,"a")]) (CTCons ("AnnotatedFlatCurry","ARule") [CTVar (0,"a")]))) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("AnnotatedFlatCurryGoodies","updRuleBody"))) (CSymbol ("AnnotatedFlatCurryGoodies","updQNames")))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","trCombType") 5 Public (CFuncType (CTVar (0,"a")) (CFuncType (CFuncType (CTCons ("Prelude","Int") []) (CTVar (0,"a"))) (CFuncType (CTVar (0,"a")) (CFuncType (CFuncType (CTCons ("Prelude","Int") []) (CTVar (0,"a"))) (CFuncType (CTCons ("FlatCurry","CombType") []) (CTVar (0,"a"))))))) (CRules CFlex [CRule [CPVar (0,"fc"),CPVar (1,"_"),CPVar (2,"_"),CPVar (3,"_"),CPComb ("FlatCurry","FuncCall") []] [(CSymbol ("Prelude","success"),CVar (0,"fc"))] [],CRule [CPVar (4,"_"),CPVar (5,"fpc"),CPVar (6,"_"),CPVar (7,"_"),CPComb ("FlatCurry","FuncPartCall") [CPVar (8,"n")]] [(CSymbol ("Prelude","success"),CApply (CVar (5,"fpc")) (CVar (8,"n")))] [],CRule [CPVar (9,"_"),CPVar (10,"_"),CPVar (11,"cc"),CPVar (12,"_"),CPComb ("FlatCurry","ConsCall") []] [(CSymbol ("Prelude","success"),CVar (11,"cc"))] [],CRule [CPVar (13,"_"),CPVar (14,"_"),CPVar (15,"_"),CPVar (16,"cpc"),CPComb ("FlatCurry","ConsPartCall") [CPVar (17,"n")]] [(CSymbol ("Prelude","success"),CApply (CVar (16,"cpc")) (CVar (17,"n")))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","isCombTypeFuncCall") 0 Public (CFuncType (CTCons ("FlatCurry","CombType") []) (CTCons ("Prelude","Bool") [])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CSymbol ("AnnotatedFlatCurryGoodies","trCombType")) (CSymbol ("Prelude","True"))) (CLambda [CPVar (0,"_")] (CSymbol ("Prelude","False")))) (CSymbol ("Prelude","False"))) (CLambda [CPVar (1,"_")] (CSymbol ("Prelude","False"))))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","isCombTypeFuncPartCall") 0 Public (CFuncType (CTCons ("FlatCurry","CombType") []) (CTCons ("Prelude","Bool") [])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CSymbol ("AnnotatedFlatCurryGoodies","trCombType")) (CSymbol ("Prelude","False"))) (CLambda [CPVar (0,"_")] (CSymbol ("Prelude","True")))) (CSymbol ("Prelude","False"))) (CLambda [CPVar (1,"_")] (CSymbol ("Prelude","False"))))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","isCombTypeConsCall") 0 Public (CFuncType (CTCons ("FlatCurry","CombType") []) (CTCons ("Prelude","Bool") [])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CSymbol ("AnnotatedFlatCurryGoodies","trCombType")) (CSymbol ("Prelude","False"))) (CLambda [CPVar (0,"_")] (CSymbol ("Prelude","False")))) (CSymbol ("Prelude","True"))) (CLambda [CPVar (1,"_")] (CSymbol ("Prelude","False"))))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","isCombTypeConsPartCall") 0 Public (CFuncType (CTCons ("FlatCurry","CombType") []) (CTCons ("Prelude","Bool") [])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CSymbol ("AnnotatedFlatCurryGoodies","trCombType")) (CSymbol ("Prelude","False"))) (CLambda [CPVar (0,"_")] (CSymbol ("Prelude","False")))) (CSymbol ("Prelude","False"))) (CLambda [CPVar (1,"_")] (CSymbol ("Prelude","True"))))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","missingArgs") 0 Public (CFuncType (CTCons ("FlatCurry","CombType") []) (CTCons ("Prelude","Int") [])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CSymbol ("AnnotatedFlatCurryGoodies","trCombType")) (CLit (CIntc 0))) (CSymbol ("Prelude","id"))) (CLit (CIntc 0))) (CSymbol ("Prelude","id")))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","varNr") 1 Public (CFuncType (CTCons ("AnnotatedFlatCurry","AExpr") [CTVar (0,"a")]) (CTCons ("Prelude","Int") [])) (CRules CFlex [CRule [CPComb ("AnnotatedFlatCurry","AVar") [CPVar (0,"_"),CPVar (1,"n")]] [(CSymbol ("Prelude","success"),CVar (1,"n"))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","literal") 1 Public (CFuncType (CTCons ("AnnotatedFlatCurry","AExpr") [CTVar (0,"a")]) (CTCons ("FlatCurry","Literal") [])) (CRules CFlex [CRule [CPComb ("AnnotatedFlatCurry","ALit") [CPVar (0,"_"),CPVar (1,"l")]] [(CSymbol ("Prelude","success"),CVar (1,"l"))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","combType") 1 Public (CFuncType (CTCons ("AnnotatedFlatCurry","AExpr") [CTVar (0,"a")]) (CTCons ("FlatCurry","CombType") [])) (CRules CFlex [CRule [CPComb ("AnnotatedFlatCurry","AComb") [CPVar (0,"_"),CPVar (1,"ct"),CPVar (2,"_"),CPVar (3,"_")]] [(CSymbol ("Prelude","success"),CVar (1,"ct"))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","combName") 1 Public (CFuncType (CTCons ("AnnotatedFlatCurry","AExpr") [CTVar (0,"a")]) (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]])) (CRules CFlex [CRule [CPComb ("AnnotatedFlatCurry","AComb") [CPVar (0,"_"),CPVar (1,"_"),CPVar (2,"name"),CPVar (3,"_")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Prelude","fst")) (CVar (2,"name")))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","combArgs") 1 Public (CFuncType (CTCons ("AnnotatedFlatCurry","AExpr") [CTVar (0,"a")]) (CTCons ("Prelude","[]") [CTCons ("AnnotatedFlatCurry","AExpr") [CTVar (0,"a")]])) (CRules CFlex [CRule [CPComb ("AnnotatedFlatCurry","AComb") [CPVar (0,"_"),CPVar (1,"_"),CPVar (2,"_"),CPVar (3,"args")]] [(CSymbol ("Prelude","success"),CVar (3,"args"))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","missingCombArgs") 0 Public (CFuncType (CTCons ("AnnotatedFlatCurry","AExpr") [CTVar (0,"a")]) (CTCons ("Prelude","Int") [])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("AnnotatedFlatCurryGoodies","missingArgs"))) (CSymbol ("AnnotatedFlatCurryGoodies","combType")))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","letBinds") 1 Public (CFuncType (CTCons ("AnnotatedFlatCurry","AExpr") [CTVar (0,"a")]) (CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","Int") [],CTCons ("AnnotatedFlatCurry","AExpr") [CTVar (0,"a")]]])) (CRules CFlex [CRule [CPComb ("AnnotatedFlatCurry","ALet") [CPVar (0,"_"),CPVar (1,"vs"),CPVar (2,"_")]] [(CSymbol ("Prelude","success"),CVar (1,"vs"))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","letBody") 1 Public (CFuncType (CTCons ("AnnotatedFlatCurry","AExpr") [CTVar (0,"a")]) (CTCons ("AnnotatedFlatCurry","AExpr") [CTVar (0,"a")])) (CRules CFlex [CRule [CPComb ("AnnotatedFlatCurry","ALet") [CPVar (0,"_"),CPVar (1,"_"),CPVar (2,"e")]] [(CSymbol ("Prelude","success"),CVar (2,"e"))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","freeVars") 1 Public (CFuncType (CTCons ("AnnotatedFlatCurry","AExpr") [CTVar (0,"a")]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Int") []])) (CRules CFlex [CRule [CPComb ("AnnotatedFlatCurry","AFree") [CPVar (0,"_"),CPVar (1,"vs"),CPVar (2,"_")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("Prelude","fst"))) (CVar (1,"vs")))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","freeExpr") 1 Public (CFuncType (CTCons ("AnnotatedFlatCurry","AExpr") [CTVar (0,"a")]) (CTCons ("AnnotatedFlatCurry","AExpr") [CTVar (0,"a")])) (CRules CFlex [CRule [CPComb ("AnnotatedFlatCurry","AFree") [CPVar (0,"_"),CPVar (1,"_"),CPVar (2,"e")]] [(CSymbol ("Prelude","success"),CVar (2,"e"))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","orExps") 1 Public (CFuncType (CTCons ("AnnotatedFlatCurry","AExpr") [CTVar (0,"a")]) (CTCons ("Prelude","[]") [CTCons ("AnnotatedFlatCurry","AExpr") [CTVar (0,"a")]])) (CRules CFlex [CRule [CPComb ("AnnotatedFlatCurry","AOr") [CPVar (0,"_"),CPVar (1,"e1"),CPVar (2,"e2")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",":")) (CVar (1,"e1"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (2,"e2"))) (CSymbol ("Prelude","[]"))))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","caseType") 1 Public (CFuncType (CTCons ("AnnotatedFlatCurry","AExpr") [CTVar (0,"a")]) (CTCons ("FlatCurry","CaseType") [])) (CRules CFlex [CRule [CPComb ("AnnotatedFlatCurry","ACase") [CPVar (0,"_"),CPVar (1,"ct"),CPVar (2,"_"),CPVar (3,"_")]] [(CSymbol ("Prelude","success"),CVar (1,"ct"))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","caseExpr") 1 Public (CFuncType (CTCons ("AnnotatedFlatCurry","AExpr") [CTVar (0,"a")]) (CTCons ("AnnotatedFlatCurry","AExpr") [CTVar (0,"a")])) (CRules CFlex [CRule [CPComb ("AnnotatedFlatCurry","ACase") [CPVar (0,"_"),CPVar (1,"_"),CPVar (2,"e"),CPVar (3,"_")]] [(CSymbol ("Prelude","success"),CVar (2,"e"))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","caseBranches") 1 Public (CFuncType (CTCons ("AnnotatedFlatCurry","AExpr") [CTVar (0,"a")]) (CTCons ("Prelude","[]") [CTCons ("AnnotatedFlatCurry","ABranchExpr") [CTVar (0,"a")]])) (CRules CFlex [CRule [CPComb ("AnnotatedFlatCurry","ACase") [CPVar (0,"_"),CPVar (1,"_"),CPVar (2,"_"),CPVar (3,"bs")]] [(CSymbol ("Prelude","success"),CVar (3,"bs"))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","isVar") 1 Public (CFuncType (CTCons ("AnnotatedFlatCurry","AExpr") [CTVar (0,"a")]) (CTCons ("Prelude","Bool") [])) (CRules CFlex [CRule [CPVar (0,"e")] [(CSymbol ("Prelude","success"),CCase (CVar (0,"e")) [CBranch (CPComb ("AnnotatedFlatCurry","AVar") [CPVar (1,"_"),CPVar (2,"_")]) (CSymbol ("Prelude","True")),CBranch (CPVar (3,"_")) (CSymbol ("Prelude","False"))])] []]),
  CFunc ("AnnotatedFlatCurryGoodies","isLit") 1 Public (CFuncType (CTCons ("AnnotatedFlatCurry","AExpr") [CTVar (0,"a")]) (CTCons ("Prelude","Bool") [])) (CRules CFlex [CRule [CPVar (0,"e")] [(CSymbol ("Prelude","success"),CCase (CVar (0,"e")) [CBranch (CPComb ("AnnotatedFlatCurry","ALit") [CPVar (1,"_"),CPVar (2,"_")]) (CSymbol ("Prelude","True")),CBranch (CPVar (3,"_")) (CSymbol ("Prelude","False"))])] []]),
  CFunc ("AnnotatedFlatCurryGoodies","isComb") 1 Public (CFuncType (CTCons ("AnnotatedFlatCurry","AExpr") [CTVar (0,"a")]) (CTCons ("Prelude","Bool") [])) (CRules CFlex [CRule [CPVar (0,"e")] [(CSymbol ("Prelude","success"),CCase (CVar (0,"e")) [CBranch (CPComb ("AnnotatedFlatCurry","AComb") [CPVar (1,"_"),CPVar (2,"_"),CPVar (3,"_"),CPVar (4,"_")]) (CSymbol ("Prelude","True")),CBranch (CPVar (5,"_")) (CSymbol ("Prelude","False"))])] []]),
  CFunc ("AnnotatedFlatCurryGoodies","isLet") 1 Public (CFuncType (CTCons ("AnnotatedFlatCurry","AExpr") [CTVar (0,"a")]) (CTCons ("Prelude","Bool") [])) (CRules CFlex [CRule [CPVar (0,"e")] [(CSymbol ("Prelude","success"),CCase (CVar (0,"e")) [CBranch (CPComb ("AnnotatedFlatCurry","ALet") [CPVar (1,"_"),CPVar (2,"_"),CPVar (3,"_")]) (CSymbol ("Prelude","True")),CBranch (CPVar (4,"_")) (CSymbol ("Prelude","False"))])] []]),
  CFunc ("AnnotatedFlatCurryGoodies","isFree") 1 Public (CFuncType (CTCons ("AnnotatedFlatCurry","AExpr") [CTVar (0,"a")]) (CTCons ("Prelude","Bool") [])) (CRules CFlex [CRule [CPVar (0,"e")] [(CSymbol ("Prelude","success"),CCase (CVar (0,"e")) [CBranch (CPComb ("AnnotatedFlatCurry","AFree") [CPVar (1,"_"),CPVar (2,"_"),CPVar (3,"_")]) (CSymbol ("Prelude","True")),CBranch (CPVar (4,"_")) (CSymbol ("Prelude","False"))])] []]),
  CFunc ("AnnotatedFlatCurryGoodies","isOr") 1 Public (CFuncType (CTCons ("AnnotatedFlatCurry","AExpr") [CTVar (0,"a")]) (CTCons ("Prelude","Bool") [])) (CRules CFlex [CRule [CPVar (0,"e")] [(CSymbol ("Prelude","success"),CCase (CVar (0,"e")) [CBranch (CPComb ("AnnotatedFlatCurry","AOr") [CPVar (1,"_"),CPVar (2,"_"),CPVar (3,"_")]) (CSymbol ("Prelude","True")),CBranch (CPVar (4,"_")) (CSymbol ("Prelude","False"))])] []]),
  CFunc ("AnnotatedFlatCurryGoodies","isCase") 1 Public (CFuncType (CTCons ("AnnotatedFlatCurry","AExpr") [CTVar (0,"a")]) (CTCons ("Prelude","Bool") [])) (CRules CFlex [CRule [CPVar (0,"e")] [(CSymbol ("Prelude","success"),CCase (CVar (0,"e")) [CBranch (CPComb ("AnnotatedFlatCurry","ACase") [CPVar (1,"_"),CPVar (2,"_"),CPVar (3,"_"),CPVar (4,"_")]) (CSymbol ("Prelude","True")),CBranch (CPVar (5,"_")) (CSymbol ("Prelude","False"))])] []]),
  CFunc ("AnnotatedFlatCurryGoodies","trExpr") 10 Public (CFuncType (CFuncType (CTVar (0,"a")) (CFuncType (CTCons ("Prelude","Int") []) (CTVar (1,"b")))) (CFuncType (CFuncType (CTVar (0,"a")) (CFuncType (CTCons ("FlatCurry","Literal") []) (CTVar (1,"b")))) (CFuncType (CFuncType (CTVar (0,"a")) (CFuncType (CTCons ("FlatCurry","CombType") []) (CFuncType (CTCons ("Prelude","(,)") [CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]],CTVar (0,"a")]) (CFuncType (CTCons ("Prelude","[]") [CTVar (1,"b")]) (CTVar (1,"b")))))) (CFuncType (CFuncType (CTVar (0,"a")) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","Int") [],CTVar (1,"b")]]) (CFuncType (CTVar (1,"b")) (CTVar (1,"b"))))) (CFuncType (CFuncType (CTVar (0,"a")) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","Int") [],CTVar (0,"a")]]) (CFuncType (CTVar (1,"b")) (CTVar (1,"b"))))) (CFuncType (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (1,"b")) (CFuncType (CTVar (1,"b")) (CTVar (1,"b"))))) (CFuncType (CFuncType (CTVar (0,"a")) (CFuncType (CTCons ("FlatCurry","CaseType") []) (CFuncType (CTVar (1,"b")) (CFuncType (CTCons ("Prelude","[]") [CTVar (2,"c")]) (CTVar (1,"b")))))) (CFuncType (CFuncType (CTCons ("AnnotatedFlatCurry","APattern") [CTVar (0,"a")]) (CFuncType (CTVar (1,"b")) (CTVar (2,"c")))) (CFuncType (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (1,"b")) (CFuncType (CTCons ("FlatCurry","TypeExpr") []) (CTVar (1,"b"))))) (CFuncType (CTCons ("AnnotatedFlatCurry","AExpr") [CTVar (0,"a")]) (CTVar (1,"b")))))))))))) (CRules CFlex [CRule [CPVar (0,"var"),CPVar (1,"_"),CPVar (2,"_"),CPVar (3,"_"),CPVar (4,"_"),CPVar (5,"_"),CPVar (6,"_"),CPVar (7,"_"),CPVar (8,"_"),CPComb ("AnnotatedFlatCurry","AVar") [CPVar (9,"a"),CPVar (10,"n")]] [(CSymbol ("Prelude","success"),CApply (CApply (CVar (0,"var")) (CVar (9,"a"))) (CVar (10,"n")))] [],CRule [CPVar (11,"_"),CPVar (12,"lit"),CPVar (13,"_"),CPVar (14,"_"),CPVar (15,"_"),CPVar (16,"_"),CPVar (17,"_"),CPVar (18,"_"),CPVar (19,"_"),CPComb ("AnnotatedFlatCurry","ALit") [CPVar (20,"a"),CPVar (21,"l")]] [(CSymbol ("Prelude","success"),CApply (CApply (CVar (12,"lit")) (CVar (20,"a"))) (CVar (21,"l")))] [],CRule [CPVar (22,"var"),CPVar (23,"lit"),CPVar (24,"comb"),CPVar (25,"lt"),CPVar (26,"fr"),CPVar (27,"or"),CPVar (28,"cas"),CPVar (29,"branch"),CPVar (30,"typed"),CPComb ("AnnotatedFlatCurry","AComb") [CPVar (31,"a"),CPVar (32,"ct"),CPVar (33,"name"),CPVar (34,"args")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CVar (24,"comb")) (CVar (31,"a"))) (CVar (32,"ct"))) (CVar (33,"name"))) (CApply (CApply (CSymbol ("Prelude","map")) (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CSymbol ("AnnotatedFlatCurryGoodies","trExpr")) (CVar (22,"var"))) (CVar (23,"lit"))) (CVar (24,"comb"))) (CVar (25,"lt"))) (CVar (26,"fr"))) (CVar (27,"or"))) (CVar (28,"cas"))) (CVar (29,"branch"))) (CVar (30,"typed")))) (CVar (34,"args"))))] [],CRule [CPVar (35,"var"),CPVar (36,"lit"),CPVar (37,"comb"),CPVar (38,"lt"),CPVar (39,"fr"),CPVar (40,"or"),CPVar (41,"cas"),CPVar (42,"branch"),CPVar (43,"typed"),CPComb ("AnnotatedFlatCurry","ALet") [CPVar (44,"a"),CPVar (45,"bs"),CPVar (46,"e")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CVar (38,"lt")) (CVar (44,"a"))) (CApply (CApply (CSymbol ("Prelude","map")) (CLambda [CPComb ("Prelude","(,)") [CPVar (48,"n"),CPVar (49,"exp")]] (CApply (CApply (CSymbol ("Prelude","(,)")) (CVar (48,"n"))) (CApply (CVar (47,"f")) (CVar (49,"exp")))))) (CVar (45,"bs")))) (CApply (CVar (47,"f")) (CVar (46,"e"))))] [CLocalPat (CPVar (47,"f")) (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CSymbol ("AnnotatedFlatCurryGoodies","trExpr")) (CVar (35,"var"))) (CVar (36,"lit"))) (CVar (37,"comb"))) (CVar (38,"lt"))) (CVar (39,"fr"))) (CVar (40,"or"))) (CVar (41,"cas"))) (CVar (42,"branch"))) (CVar (43,"typed"))) []],CRule [CPVar (50,"var"),CPVar (51,"lit"),CPVar (52,"comb"),CPVar (53,"lt"),CPVar (54,"fr"),CPVar (55,"or"),CPVar (56,"cas"),CPVar (57,"branch"),CPVar (58,"typed"),CPComb ("AnnotatedFlatCurry","AFree") [CPVar (59,"a"),CPVar (60,"vs"),CPVar (61,"e")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CVar (54,"fr")) (CVar (59,"a"))) (CVar (60,"vs"))) (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CSymbol ("AnnotatedFlatCurryGoodies","trExpr")) (CVar (50,"var"))) (CVar (51,"lit"))) (CVar (52,"comb"))) (CVar (53,"lt"))) (CVar (54,"fr"))) (CVar (55,"or"))) (CVar (56,"cas"))) (CVar (57,"branch"))) (CVar (58,"typed"))) (CVar (61,"e"))))] [],CRule [CPVar (62,"var"),CPVar (63,"lit"),CPVar (64,"comb"),CPVar (65,"lt"),CPVar (66,"fr"),CPVar (67,"or"),CPVar (68,"cas"),CPVar (69,"branch"),CPVar (70,"typed"),CPComb ("AnnotatedFlatCurry","AOr") [CPVar (71,"a"),CPVar (72,"e1"),CPVar (73,"e2")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CVar (67,"or")) (CVar (71,"a"))) (CApply (CVar (74,"f")) (CVar (72,"e1")))) (CApply (CVar (74,"f")) (CVar (73,"e2"))))] [CLocalPat (CPVar (74,"f")) (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CSymbol ("AnnotatedFlatCurryGoodies","trExpr")) (CVar (62,"var"))) (CVar (63,"lit"))) (CVar (64,"comb"))) (CVar (65,"lt"))) (CVar (66,"fr"))) (CVar (67,"or"))) (CVar (68,"cas"))) (CVar (69,"branch"))) (CVar (70,"typed"))) []],CRule [CPVar (75,"var"),CPVar (76,"lit"),CPVar (77,"comb"),CPVar (78,"lt"),CPVar (79,"fr"),CPVar (80,"or"),CPVar (81,"cas"),CPVar (82,"branch"),CPVar (83,"typed"),CPComb ("AnnotatedFlatCurry","ACase") [CPVar (84,"a"),CPVar (85,"ct"),CPVar (86,"e"),CPVar (87,"bs")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CVar (81,"cas")) (CVar (84,"a"))) (CVar (85,"ct"))) (CApply (CVar (88,"f")) (CVar (86,"e")))) (CApply (CApply (CSymbol ("Prelude","map")) (CLambda [CPComb ("AnnotatedFlatCurry","ABranch") [CPVar (89,"pat"),CPVar (90,"exp")]] (CApply (CApply (CVar (82,"branch")) (CVar (89,"pat"))) (CApply (CVar (88,"f")) (CVar (90,"exp")))))) (CVar (87,"bs"))))] [CLocalPat (CPVar (88,"f")) (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CSymbol ("AnnotatedFlatCurryGoodies","trExpr")) (CVar (75,"var"))) (CVar (76,"lit"))) (CVar (77,"comb"))) (CVar (78,"lt"))) (CVar (79,"fr"))) (CVar (80,"or"))) (CVar (81,"cas"))) (CVar (82,"branch"))) (CVar (83,"typed"))) []],CRule [CPVar (91,"var"),CPVar (92,"lit"),CPVar (93,"comb"),CPVar (94,"lt"),CPVar (95,"fr"),CPVar (96,"or"),CPVar (97,"cas"),CPVar (98,"branch"),CPVar (99,"typed"),CPComb ("AnnotatedFlatCurry","ATyped") [CPVar (100,"a"),CPVar (101,"e"),CPVar (102,"ty")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CVar (99,"typed")) (CVar (100,"a"))) (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CSymbol ("AnnotatedFlatCurryGoodies","trExpr")) (CVar (91,"var"))) (CVar (92,"lit"))) (CVar (93,"comb"))) (CVar (94,"lt"))) (CVar (95,"fr"))) (CVar (96,"or"))) (CVar (97,"cas"))) (CVar (98,"branch"))) (CVar (99,"typed"))) (CVar (101,"e")))) (CVar (102,"ty")))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","updVars") 1 Public (CFuncType (CFuncType (CTVar (0,"a")) (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("AnnotatedFlatCurry","AExpr") [CTVar (0,"a")]))) (CFuncType (CTCons ("AnnotatedFlatCurry","AExpr") [CTVar (0,"a")]) (CTCons ("AnnotatedFlatCurry","AExpr") [CTVar (0,"a")]))) (CRules CFlex [CRule [CPVar (0,"var")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CSymbol ("AnnotatedFlatCurryGoodies","trExpr")) (CVar (0,"var"))) (CSymbol ("AnnotatedFlatCurry","ALit"))) (CSymbol ("AnnotatedFlatCurry","AComb"))) (CSymbol ("AnnotatedFlatCurry","ALet"))) (CSymbol ("AnnotatedFlatCurry","AFree"))) (CSymbol ("AnnotatedFlatCurry","AOr"))) (CSymbol ("AnnotatedFlatCurry","ACase"))) (CSymbol ("AnnotatedFlatCurry","ABranch"))) (CSymbol ("AnnotatedFlatCurry","ATyped")))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","updLiterals") 1 Public (CFuncType (CFuncType (CTVar (0,"a")) (CFuncType (CTCons ("FlatCurry","Literal") []) (CTCons ("AnnotatedFlatCurry","AExpr") [CTVar (0,"a")]))) (CFuncType (CTCons ("AnnotatedFlatCurry","AExpr") [CTVar (0,"a")]) (CTCons ("AnnotatedFlatCurry","AExpr") [CTVar (0,"a")]))) (CRules CFlex [CRule [CPVar (0,"lit")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CSymbol ("AnnotatedFlatCurryGoodies","trExpr")) (CSymbol ("AnnotatedFlatCurry","AVar"))) (CVar (0,"lit"))) (CSymbol ("AnnotatedFlatCurry","AComb"))) (CSymbol ("AnnotatedFlatCurry","ALet"))) (CSymbol ("AnnotatedFlatCurry","AFree"))) (CSymbol ("AnnotatedFlatCurry","AOr"))) (CSymbol ("AnnotatedFlatCurry","ACase"))) (CSymbol ("AnnotatedFlatCurry","ABranch"))) (CSymbol ("AnnotatedFlatCurry","ATyped")))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","updCombs") 1 Public (CFuncType (CFuncType (CTVar (0,"a")) (CFuncType (CTCons ("FlatCurry","CombType") []) (CFuncType (CTCons ("Prelude","(,)") [CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]],CTVar (0,"a")]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("AnnotatedFlatCurry","AExpr") [CTVar (0,"a")]]) (CTCons ("AnnotatedFlatCurry","AExpr") [CTVar (0,"a")]))))) (CFuncType (CTCons ("AnnotatedFlatCurry","AExpr") [CTVar (0,"a")]) (CTCons ("AnnotatedFlatCurry","AExpr") [CTVar (0,"a")]))) (CRules CFlex [CRule [CPVar (0,"comb")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CSymbol ("AnnotatedFlatCurryGoodies","trExpr")) (CSymbol ("AnnotatedFlatCurry","AVar"))) (CSymbol ("AnnotatedFlatCurry","ALit"))) (CVar (0,"comb"))) (CSymbol ("AnnotatedFlatCurry","ALet"))) (CSymbol ("AnnotatedFlatCurry","AFree"))) (CSymbol ("AnnotatedFlatCurry","AOr"))) (CSymbol ("AnnotatedFlatCurry","ACase"))) (CSymbol ("AnnotatedFlatCurry","ABranch"))) (CSymbol ("AnnotatedFlatCurry","ATyped")))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","updLets") 1 Public (CFuncType (CFuncType (CTVar (0,"a")) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","Int") [],CTCons ("AnnotatedFlatCurry","AExpr") [CTVar (0,"a")]]]) (CFuncType (CTCons ("AnnotatedFlatCurry","AExpr") [CTVar (0,"a")]) (CTCons ("AnnotatedFlatCurry","AExpr") [CTVar (0,"a")])))) (CFuncType (CTCons ("AnnotatedFlatCurry","AExpr") [CTVar (0,"a")]) (CTCons ("AnnotatedFlatCurry","AExpr") [CTVar (0,"a")]))) (CRules CFlex [CRule [CPVar (0,"lt")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CSymbol ("AnnotatedFlatCurryGoodies","trExpr")) (CSymbol ("AnnotatedFlatCurry","AVar"))) (CSymbol ("AnnotatedFlatCurry","ALit"))) (CSymbol ("AnnotatedFlatCurry","AComb"))) (CVar (0,"lt"))) (CSymbol ("AnnotatedFlatCurry","AFree"))) (CSymbol ("AnnotatedFlatCurry","AOr"))) (CSymbol ("AnnotatedFlatCurry","ACase"))) (CSymbol ("AnnotatedFlatCurry","ABranch"))) (CSymbol ("AnnotatedFlatCurry","ATyped")))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","updFrees") 1 Public (CFuncType (CFuncType (CTVar (0,"a")) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","Int") [],CTVar (0,"a")]]) (CFuncType (CTCons ("AnnotatedFlatCurry","AExpr") [CTVar (0,"a")]) (CTCons ("AnnotatedFlatCurry","AExpr") [CTVar (0,"a")])))) (CFuncType (CTCons ("AnnotatedFlatCurry","AExpr") [CTVar (0,"a")]) (CTCons ("AnnotatedFlatCurry","AExpr") [CTVar (0,"a")]))) (CRules CFlex [CRule [CPVar (0,"fr")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CSymbol ("AnnotatedFlatCurryGoodies","trExpr")) (CSymbol ("AnnotatedFlatCurry","AVar"))) (CSymbol ("AnnotatedFlatCurry","ALit"))) (CSymbol ("AnnotatedFlatCurry","AComb"))) (CSymbol ("AnnotatedFlatCurry","ALet"))) (CVar (0,"fr"))) (CSymbol ("AnnotatedFlatCurry","AOr"))) (CSymbol ("AnnotatedFlatCurry","ACase"))) (CSymbol ("AnnotatedFlatCurry","ABranch"))) (CSymbol ("AnnotatedFlatCurry","ATyped")))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","updOrs") 1 Public (CFuncType (CFuncType (CTVar (0,"a")) (CFuncType (CTCons ("AnnotatedFlatCurry","AExpr") [CTVar (0,"a")]) (CFuncType (CTCons ("AnnotatedFlatCurry","AExpr") [CTVar (0,"a")]) (CTCons ("AnnotatedFlatCurry","AExpr") [CTVar (0,"a")])))) (CFuncType (CTCons ("AnnotatedFlatCurry","AExpr") [CTVar (0,"a")]) (CTCons ("AnnotatedFlatCurry","AExpr") [CTVar (0,"a")]))) (CRules CFlex [CRule [CPVar (0,"or")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CSymbol ("AnnotatedFlatCurryGoodies","trExpr")) (CSymbol ("AnnotatedFlatCurry","AVar"))) (CSymbol ("AnnotatedFlatCurry","ALit"))) (CSymbol ("AnnotatedFlatCurry","AComb"))) (CSymbol ("AnnotatedFlatCurry","ALet"))) (CSymbol ("AnnotatedFlatCurry","AFree"))) (CVar (0,"or"))) (CSymbol ("AnnotatedFlatCurry","ACase"))) (CSymbol ("AnnotatedFlatCurry","ABranch"))) (CSymbol ("AnnotatedFlatCurry","ATyped")))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","updCases") 1 Public (CFuncType (CFuncType (CTVar (0,"a")) (CFuncType (CTCons ("FlatCurry","CaseType") []) (CFuncType (CTCons ("AnnotatedFlatCurry","AExpr") [CTVar (0,"a")]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("AnnotatedFlatCurry","ABranchExpr") [CTVar (0,"a")]]) (CTCons ("AnnotatedFlatCurry","AExpr") [CTVar (0,"a")]))))) (CFuncType (CTCons ("AnnotatedFlatCurry","AExpr") [CTVar (0,"a")]) (CTCons ("AnnotatedFlatCurry","AExpr") [CTVar (0,"a")]))) (CRules CFlex [CRule [CPVar (0,"cas")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CSymbol ("AnnotatedFlatCurryGoodies","trExpr")) (CSymbol ("AnnotatedFlatCurry","AVar"))) (CSymbol ("AnnotatedFlatCurry","ALit"))) (CSymbol ("AnnotatedFlatCurry","AComb"))) (CSymbol ("AnnotatedFlatCurry","ALet"))) (CSymbol ("AnnotatedFlatCurry","AFree"))) (CSymbol ("AnnotatedFlatCurry","AOr"))) (CVar (0,"cas"))) (CSymbol ("AnnotatedFlatCurry","ABranch"))) (CSymbol ("AnnotatedFlatCurry","ATyped")))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","updBranches") 1 Public (CFuncType (CFuncType (CTCons ("AnnotatedFlatCurry","APattern") [CTVar (0,"a")]) (CFuncType (CTCons ("AnnotatedFlatCurry","AExpr") [CTVar (0,"a")]) (CTCons ("AnnotatedFlatCurry","ABranchExpr") [CTVar (0,"a")]))) (CFuncType (CTCons ("AnnotatedFlatCurry","AExpr") [CTVar (0,"a")]) (CTCons ("AnnotatedFlatCurry","AExpr") [CTVar (0,"a")]))) (CRules CFlex [CRule [CPVar (0,"branch")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CSymbol ("AnnotatedFlatCurryGoodies","trExpr")) (CSymbol ("AnnotatedFlatCurry","AVar"))) (CSymbol ("AnnotatedFlatCurry","ALit"))) (CSymbol ("AnnotatedFlatCurry","AComb"))) (CSymbol ("AnnotatedFlatCurry","ALet"))) (CSymbol ("AnnotatedFlatCurry","AFree"))) (CSymbol ("AnnotatedFlatCurry","AOr"))) (CSymbol ("AnnotatedFlatCurry","ACase"))) (CVar (0,"branch"))) (CSymbol ("AnnotatedFlatCurry","ATyped")))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","updTypeds") 1 Public (CFuncType (CFuncType (CTVar (0,"a")) (CFuncType (CTCons ("AnnotatedFlatCurry","AExpr") [CTVar (0,"a")]) (CFuncType (CTCons ("FlatCurry","TypeExpr") []) (CTCons ("AnnotatedFlatCurry","AExpr") [CTVar (0,"a")])))) (CFuncType (CTCons ("AnnotatedFlatCurry","AExpr") [CTVar (0,"a")]) (CTCons ("AnnotatedFlatCurry","AExpr") [CTVar (0,"a")]))) (CRules CFlex [CRule [CPVar (0,"typed")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CSymbol ("AnnotatedFlatCurryGoodies","trExpr")) (CSymbol ("AnnotatedFlatCurry","AVar"))) (CSymbol ("AnnotatedFlatCurry","ALit"))) (CSymbol ("AnnotatedFlatCurry","AComb"))) (CSymbol ("AnnotatedFlatCurry","ALet"))) (CSymbol ("AnnotatedFlatCurry","AFree"))) (CSymbol ("AnnotatedFlatCurry","AOr"))) (CSymbol ("AnnotatedFlatCurry","ACase"))) (CSymbol ("AnnotatedFlatCurry","ABranch"))) (CVar (0,"typed")))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","isFuncCall") 1 Public (CFuncType (CTCons ("AnnotatedFlatCurry","AExpr") [CTVar (0,"a")]) (CTCons ("Prelude","Bool") [])) (CRules CFlex [CRule [CPVar (0,"e")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","&&")) (CApply (CSymbol ("AnnotatedFlatCurryGoodies","isComb")) (CVar (0,"e")))) (CApply (CSymbol ("AnnotatedFlatCurryGoodies","isCombTypeFuncCall")) (CApply (CSymbol ("AnnotatedFlatCurryGoodies","combType")) (CVar (0,"e")))))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","isFuncPartCall") 1 Public (CFuncType (CTCons ("AnnotatedFlatCurry","AExpr") [CTVar (0,"a")]) (CTCons ("Prelude","Bool") [])) (CRules CFlex [CRule [CPVar (0,"e")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","&&")) (CApply (CSymbol ("AnnotatedFlatCurryGoodies","isComb")) (CVar (0,"e")))) (CApply (CSymbol ("AnnotatedFlatCurryGoodies","isCombTypeFuncPartCall")) (CApply (CSymbol ("AnnotatedFlatCurryGoodies","combType")) (CVar (0,"e")))))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","isConsCall") 1 Public (CFuncType (CTCons ("AnnotatedFlatCurry","AExpr") [CTVar (0,"a")]) (CTCons ("Prelude","Bool") [])) (CRules CFlex [CRule [CPVar (0,"e")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","&&")) (CApply (CSymbol ("AnnotatedFlatCurryGoodies","isComb")) (CVar (0,"e")))) (CApply (CSymbol ("AnnotatedFlatCurryGoodies","isCombTypeConsCall")) (CApply (CSymbol ("AnnotatedFlatCurryGoodies","combType")) (CVar (0,"e")))))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","isConsPartCall") 1 Public (CFuncType (CTCons ("AnnotatedFlatCurry","AExpr") [CTVar (0,"a")]) (CTCons ("Prelude","Bool") [])) (CRules CFlex [CRule [CPVar (0,"e")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","&&")) (CApply (CSymbol ("AnnotatedFlatCurryGoodies","isComb")) (CVar (0,"e")))) (CApply (CSymbol ("AnnotatedFlatCurryGoodies","isCombTypeConsPartCall")) (CApply (CSymbol ("AnnotatedFlatCurryGoodies","combType")) (CVar (0,"e")))))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","isGround") 1 Public (CFuncType (CTCons ("AnnotatedFlatCurry","AExpr") [CTVar (0,"a")]) (CTCons ("Prelude","Bool") [])) (CRules CFlex [CRule [CPVar (0,"exp")] [(CSymbol ("Prelude","success"),CCase (CVar (0,"exp")) [CBranch (CPComb ("AnnotatedFlatCurry","AComb") [CPVar (1,"_"),CPComb ("FlatCurry","ConsCall") [],CPVar (2,"_"),CPVar (3,"args")]) (CApply (CApply (CSymbol ("Prelude","all")) (CSymbol ("AnnotatedFlatCurryGoodies","isGround"))) (CVar (3,"args"))),CBranch (CPVar (4,"_")) (CApply (CSymbol ("AnnotatedFlatCurryGoodies","isLit")) (CVar (0,"exp")))])] []]),
  CFunc ("AnnotatedFlatCurryGoodies","allVars") 1 Public (CFuncType (CTCons ("AnnotatedFlatCurry","AExpr") [CTVar (0,"a")]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Int") []])) (CRules CFlex [CRule [CPVar (0,"e")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CSymbol ("AnnotatedFlatCurryGoodies","trExpr")) (CSymbol ("AnnotatedFlatCurryGoodies","var"))) (CSymbol ("AnnotatedFlatCurryGoodies","lit"))) (CSymbol ("AnnotatedFlatCurryGoodies","comb"))) (CSymbol ("AnnotatedFlatCurryGoodies","lt"))) (CSymbol ("AnnotatedFlatCurryGoodies","fr"))) (CSymbol ("AnnotatedFlatCurryGoodies","or"))) (CSymbol ("AnnotatedFlatCurryGoodies","cas"))) (CSymbol ("AnnotatedFlatCurryGoodies","branch"))) (CSymbol ("AnnotatedFlatCurryGoodies","typed"))) (CVar (0,"e"))) (CSymbol ("Prelude","[]")))] [CLocalFunc (CFunc ("AnnotatedFlatCurryGoodies","var") 1 Private (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (1,"b")) (CFuncType (CTCons ("Prelude","[]") [CTVar (1,"b")]) (CTCons ("Prelude","[]") [CTVar (1,"b")])))) (CRules CFlex [CRule [CPVar (1,"_")] [(CSymbol ("Prelude","success"),CSymbol ("Prelude",":"))] []])),CLocalFunc (CFunc ("AnnotatedFlatCurryGoodies","lit") 1 Private (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (1,"b")) (CFuncType (CTVar (2,"c")) (CTVar (2,"c"))))) (CRules CFlex [CRule [CPVar (1,"_")] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Prelude","const")) (CSymbol ("Prelude","id")))] []])),CLocalFunc (CFunc ("AnnotatedFlatCurryGoodies","comb") 3 Private (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (1,"b")) (CFuncType (CTVar (2,"c")) (CFuncType (CTCons ("Prelude","[]") [CFuncType (CTVar (3,"d")) (CTVar (3,"d"))]) (CFuncType (CTVar (3,"d")) (CTVar (3,"d"))))))) (CRules CFlex [CRule [CPVar (1,"_"),CPVar (2,"_"),CPVar (3,"_")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","foldr")) (CSymbol ("Prelude","."))) (CSymbol ("Prelude","id")))] []])),CLocalFunc (CFunc ("AnnotatedFlatCurryGoodies","lt") 3 Private (CFuncType (CTVar (0,"a")) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTVar (1,"b"),CFuncType (CTCons ("Prelude","[]") [CTVar (1,"b")]) (CTCons ("Prelude","[]") [CTVar (1,"b")])]]) (CFuncType (CFuncType (CTCons ("Prelude","[]") [CTVar (1,"b")]) (CTVar (2,"c"))) (CFuncType (CTCons ("Prelude","[]") [CTVar (1,"b")]) (CTVar (2,"c")))))) (CRules CFlex [CRule [CPVar (1,"_"),CPVar (2,"bs"),CPVar (3,"exp")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",".")) (CVar (3,"exp"))) (CApply (CApply (CApply (CSymbol ("Prelude","foldr")) (CSymbol ("Prelude","."))) (CSymbol ("Prelude","id"))) (CApply (CApply (CSymbol ("Prelude","map")) (CLambda [CPComb ("Prelude","(,)") [CPVar (4,"n"),CPVar (5,"ns")]] (CApply (CApply (CSymbol ("Prelude",".")) (CLambda [CPVar (6,"x0")] (CApply (CApply (CSymbol ("Prelude",":")) (CVar (4,"n"))) (CVar (6,"x0"))))) (CVar (5,"ns"))))) (CVar (2,"bs")))))] []])),CLocalFunc (CFunc ("AnnotatedFlatCurryGoodies","fr") 3 Private (CFuncType (CTVar (0,"a")) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTVar (1,"b"),CTVar (2,"c")]]) (CFuncType (CFuncType (CTVar (3,"d")) (CTCons ("Prelude","[]") [CTVar (1,"b")])) (CFuncType (CTVar (3,"d")) (CTCons ("Prelude","[]") [CTVar (1,"b")]))))) (CRules CFlex [CRule [CPVar (1,"_"),CPVar (2,"vs"),CPVar (3,"exp")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",".")) (CLambda [CPVar (4,"x0")] (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("Prelude","fst"))) (CVar (2,"vs")))) (CVar (4,"x0"))))) (CVar (3,"exp")))] []])),CLocalFunc (CFunc ("AnnotatedFlatCurryGoodies","or") 1 Private (CFuncType (CTVar (0,"a")) (CFuncType (CFuncType (CTVar (1,"b")) (CTVar (2,"c"))) (CFuncType (CFuncType (CTVar (3,"d")) (CTVar (1,"b"))) (CFuncType (CTVar (3,"d")) (CTVar (2,"c")))))) (CRules CFlex [CRule [CPVar (1,"_")] [(CSymbol ("Prelude","success"),CSymbol ("Prelude","."))] []])),CLocalFunc (CFunc ("AnnotatedFlatCurryGoodies","cas") 4 Private (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (1,"b")) (CFuncType (CFuncType (CTVar (2,"c")) (CTVar (3,"d"))) (CFuncType (CTCons ("Prelude","[]") [CFuncType (CTVar (2,"c")) (CTVar (2,"c"))]) (CFuncType (CTVar (2,"c")) (CTVar (3,"d"))))))) (CRules CFlex [CRule [CPVar (1,"_"),CPVar (2,"_"),CPVar (3,"exp"),CPVar (4,"bs")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",".")) (CVar (3,"exp"))) (CApply (CApply (CApply (CSymbol ("Prelude","foldr")) (CSymbol ("Prelude","."))) (CSymbol ("Prelude","id"))) (CVar (4,"bs"))))] []])),CLocalFunc (CFunc ("AnnotatedFlatCurryGoodies","branch") 2 Private (CFuncType (CTCons ("AnnotatedFlatCurry","APattern") [CTVar (0,"a")]) (CFuncType (CFuncType (CTVar (1,"b")) (CTCons ("Prelude","[]") [CTCons ("Prelude","Int") []])) (CFuncType (CTVar (1,"b")) (CTCons ("Prelude","[]") [CTCons ("Prelude","Int") []])))) (CRules CFlex [CRule [CPVar (1,"pat"),CPVar (2,"exp")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",".")) (CLambda [CPVar (3,"x0")] (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("AnnotatedFlatCurryGoodies","args")) (CVar (1,"pat")))) (CVar (3,"x0"))))) (CVar (2,"exp")))] []])),CLocalFunc (CFunc ("AnnotatedFlatCurryGoodies","args") 1 Private (CFuncType (CTCons ("AnnotatedFlatCurry","APattern") [CTVar (0,"a")]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Int") []])) (CRules CFlex [CRule [CPVar (1,"pat")] [(CApply (CSymbol ("AnnotatedFlatCurryGoodies","isConsPattern")) (CVar (1,"pat")),CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("Prelude","fst"))) (CApply (CSymbol ("AnnotatedFlatCurryGoodies","patArgs")) (CVar (1,"pat")))),(CSymbol ("Prelude","otherwise"),CSymbol ("Prelude","[]"))] []])),CLocalFunc (CFunc ("AnnotatedFlatCurryGoodies","typed") 1 Private (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (1,"b")) (CFuncType (CTVar (2,"c")) (CTVar (1,"b"))))) (CRules CFlex [CRule [CPVar (1,"_")] [(CSymbol ("Prelude","success"),CSymbol ("Prelude","const"))] []]))]]),
  CFunc ("AnnotatedFlatCurryGoodies","rnmAllVars") 1 Public (CFuncType (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("Prelude","Int") [])) (CFuncType (CTCons ("AnnotatedFlatCurry","AExpr") [CTVar (0,"a")]) (CTCons ("AnnotatedFlatCurry","AExpr") [CTVar (0,"a")]))) (CRules CFlex [CRule [CPVar (0,"f")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CSymbol ("AnnotatedFlatCurryGoodies","trExpr")) (CSymbol ("AnnotatedFlatCurryGoodies","var"))) (CSymbol ("AnnotatedFlatCurry","ALit"))) (CSymbol ("AnnotatedFlatCurry","AComb"))) (CSymbol ("AnnotatedFlatCurryGoodies","lt"))) (CSymbol ("AnnotatedFlatCurryGoodies","fre"))) (CSymbol ("AnnotatedFlatCurry","AOr"))) (CSymbol ("AnnotatedFlatCurry","ACase"))) (CVar (1,"branch"))) (CSymbol ("AnnotatedFlatCurry","ATyped")))] [CLocalFunc (CFunc ("AnnotatedFlatCurryGoodies","var") 1 Private (CFuncType (CTVar (0,"a")) (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("AnnotatedFlatCurry","AExpr") [CTVar (0,"a")]))) (CRules CFlex [CRule [CPVar (2,"a")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",".")) (CApply (CSymbol ("AnnotatedFlatCurry","AVar")) (CVar (2,"a")))) (CVar (0,"f")))] []])),CLocalFunc (CFunc ("AnnotatedFlatCurryGoodies","fre") 3 Private (CFuncType (CTVar (0,"a")) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","Int") [],CTVar (0,"a")]]) (CFuncType (CTCons ("AnnotatedFlatCurry","AExpr") [CTVar (0,"a")]) (CTCons ("AnnotatedFlatCurry","AExpr") [CTVar (0,"a")])))) (CRules CFlex [CRule [CPVar (2,"a"),CPVar (3,"vs"),CPVar (4,"b")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("AnnotatedFlatCurry","AFree")) (CVar (2,"a"))) (CApply (CApply (CSymbol ("Prelude","map")) (CLambda [CPComb ("Prelude","(,)") [CPVar (5,"v"),CPVar (6,"x")]] (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CVar (0,"f")) (CVar (5,"v")))) (CVar (6,"x"))))) (CVar (3,"vs")))) (CVar (4,"b")))] []])),CLocalFunc (CFunc ("AnnotatedFlatCurryGoodies","lt") 1 Private (CFuncType (CTVar (0,"a")) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","Int") [],CTCons ("AnnotatedFlatCurry","AExpr") [CTVar (0,"a")]]]) (CFuncType (CTCons ("AnnotatedFlatCurry","AExpr") [CTVar (0,"a")]) (CTCons ("AnnotatedFlatCurry","AExpr") [CTVar (0,"a")])))) (CRules CFlex [CRule [CPVar (2,"a")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",".")) (CApply (CSymbol ("AnnotatedFlatCurry","ALet")) (CVar (2,"a")))) (CApply (CSymbol ("Prelude","map")) (CLambda [CPComb ("Prelude","(,)") [CPVar (3,"n"),CPVar (4,"exp")]] (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CVar (0,"f")) (CVar (3,"n")))) (CVar (4,"exp"))))))] []])),CLocalPat (CPVar (1,"branch")) (CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("AnnotatedFlatCurry","ABranch"))) (CApply (CSymbol ("AnnotatedFlatCurryGoodies","updPatArgs")) (CApply (CSymbol ("Prelude","map")) (CLambda [CPComb ("Prelude","(,)") [CPVar (2,"v"),CPVar (3,"a")]] (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CVar (0,"f")) (CVar (2,"v")))) (CVar (3,"a"))))))) []]]),
  CFunc ("AnnotatedFlatCurryGoodies","updQNames") 1 Public (CFuncType (CFuncType (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]) (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]])) (CFuncType (CTCons ("AnnotatedFlatCurry","AExpr") [CTVar (0,"a")]) (CTCons ("AnnotatedFlatCurry","AExpr") [CTVar (0,"a")]))) (CRules CFlex [CRule [CPVar (0,"f")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CSymbol ("AnnotatedFlatCurryGoodies","trExpr")) (CSymbol ("AnnotatedFlatCurry","AVar"))) (CSymbol ("AnnotatedFlatCurry","ALit"))) (CSymbol ("AnnotatedFlatCurryGoodies","comb"))) (CSymbol ("AnnotatedFlatCurry","ALet"))) (CSymbol ("AnnotatedFlatCurry","AFree"))) (CSymbol ("AnnotatedFlatCurry","AOr"))) (CSymbol ("AnnotatedFlatCurry","ACase"))) (CVar (1,"branch"))) (CSymbol ("AnnotatedFlatCurryGoodies","typed")))] [CLocalFunc (CFunc ("AnnotatedFlatCurryGoodies","comb") 4 Private (CFuncType (CTVar (0,"a")) (CFuncType (CTCons ("FlatCurry","CombType") []) (CFuncType (CTCons ("Prelude","(,)") [CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]],CTVar (0,"a")]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("AnnotatedFlatCurry","AExpr") [CTVar (0,"a")]]) (CTCons ("AnnotatedFlatCurry","AExpr") [CTVar (0,"a")]))))) (CRules CFlex [CRule [CPVar (2,"a"),CPVar (3,"ct"),CPComb ("Prelude","(,)") [CPVar (4,"name"),CPVar (5,"b")],CPVar (6,"args")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CSymbol ("AnnotatedFlatCurry","AComb")) (CVar (2,"a"))) (CVar (3,"ct"))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CVar (0,"f")) (CVar (4,"name")))) (CVar (5,"b")))) (CVar (6,"args")))] []])),CLocalPat (CPVar (1,"branch")) (CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("AnnotatedFlatCurry","ABranch"))) (CApply (CSymbol ("AnnotatedFlatCurryGoodies","updPatCons")) (CVar (0,"f")))) [],CLocalFunc (CFunc ("AnnotatedFlatCurryGoodies","typed") 3 Private (CFuncType (CTVar (0,"a")) (CFuncType (CTCons ("AnnotatedFlatCurry","AExpr") [CTVar (0,"a")]) (CFuncType (CTCons ("FlatCurry","TypeExpr") []) (CTCons ("AnnotatedFlatCurry","AExpr") [CTVar (0,"a")])))) (CRules CFlex [CRule [CPVar (2,"a"),CPVar (3,"e"),CPVar (4,"ty")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("AnnotatedFlatCurry","ATyped")) (CVar (2,"a"))) (CVar (3,"e"))) (CApply (CApply (CSymbol ("AnnotatedFlatCurryGoodies","updQNamesInTypeExpr")) (CVar (0,"f"))) (CVar (4,"ty"))))] []]))]]),
  CFunc ("AnnotatedFlatCurryGoodies","trBranch") 2 Public (CFuncType (CFuncType (CTCons ("AnnotatedFlatCurry","APattern") [CTVar (0,"a")]) (CFuncType (CTCons ("AnnotatedFlatCurry","AExpr") [CTVar (0,"a")]) (CTVar (1,"b")))) (CFuncType (CTCons ("AnnotatedFlatCurry","ABranchExpr") [CTVar (0,"a")]) (CTVar (1,"b")))) (CRules CFlex [CRule [CPVar (0,"branch"),CPComb ("AnnotatedFlatCurry","ABranch") [CPVar (1,"pat"),CPVar (2,"exp")]] [(CSymbol ("Prelude","success"),CApply (CApply (CVar (0,"branch")) (CVar (1,"pat"))) (CVar (2,"exp")))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","branchPattern") 0 Public (CFuncType (CTCons ("AnnotatedFlatCurry","ABranchExpr") [CTVar (0,"a")]) (CTCons ("AnnotatedFlatCurry","APattern") [CTVar (0,"a")])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("AnnotatedFlatCurryGoodies","trBranch")) (CLambda [CPVar (0,"pat"),CPVar (1,"_")] (CVar (0,"pat"))))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","branchExpr") 0 Public (CFuncType (CTCons ("AnnotatedFlatCurry","ABranchExpr") [CTVar (0,"a")]) (CTCons ("AnnotatedFlatCurry","AExpr") [CTVar (0,"a")])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("AnnotatedFlatCurryGoodies","trBranch")) (CLambda [CPVar (0,"_"),CPVar (1,"e")] (CVar (1,"e"))))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","updBranch") 2 Public (CFuncType (CFuncType (CTCons ("AnnotatedFlatCurry","APattern") [CTVar (0,"a")]) (CTCons ("AnnotatedFlatCurry","APattern") [CTVar (0,"a")])) (CFuncType (CFuncType (CTCons ("AnnotatedFlatCurry","AExpr") [CTVar (0,"a")]) (CTCons ("AnnotatedFlatCurry","AExpr") [CTVar (0,"a")])) (CFuncType (CTCons ("AnnotatedFlatCurry","ABranchExpr") [CTVar (0,"a")]) (CTCons ("AnnotatedFlatCurry","ABranchExpr") [CTVar (0,"a")])))) (CRules CFlex [CRule [CPVar (0,"fp"),CPVar (1,"fe")] [(CSymbol ("Prelude","success"),CApply (CSymbol ("AnnotatedFlatCurryGoodies","trBranch")) (CSymbol ("AnnotatedFlatCurryGoodies","branch")))] [CLocalFunc (CFunc ("AnnotatedFlatCurryGoodies","branch") 2 Private (CFuncType (CTCons ("AnnotatedFlatCurry","APattern") [CTVar (1,"_1613")]) (CFuncType (CTCons ("AnnotatedFlatCurry","AExpr") [CTVar (1,"_1613")]) (CTCons ("AnnotatedFlatCurry","ABranchExpr") [CTVar (1,"_1613")]))) (CRules CFlex [CRule [CPVar (2,"pat"),CPVar (3,"exp")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("AnnotatedFlatCurry","ABranch")) (CApply (CVar (0,"fp")) (CVar (2,"pat")))) (CApply (CVar (1,"fe")) (CVar (3,"exp"))))] []]))]]),
  CFunc ("AnnotatedFlatCurryGoodies","updBranchPattern") 1 Public (CFuncType (CFuncType (CTCons ("AnnotatedFlatCurry","APattern") [CTVar (0,"a")]) (CTCons ("AnnotatedFlatCurry","APattern") [CTVar (0,"a")])) (CFuncType (CTCons ("AnnotatedFlatCurry","ABranchExpr") [CTVar (0,"a")]) (CTCons ("AnnotatedFlatCurry","ABranchExpr") [CTVar (0,"a")]))) (CRules CFlex [CRule [CPVar (0,"f")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("AnnotatedFlatCurryGoodies","updBranch")) (CVar (0,"f"))) (CSymbol ("Prelude","id")))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","updBranchExpr") 0 Public (CFuncType (CFuncType (CTCons ("AnnotatedFlatCurry","AExpr") [CTVar (0,"a")]) (CTCons ("AnnotatedFlatCurry","AExpr") [CTVar (0,"a")])) (CFuncType (CTCons ("AnnotatedFlatCurry","ABranchExpr") [CTVar (0,"a")]) (CTCons ("AnnotatedFlatCurry","ABranchExpr") [CTVar (0,"a")]))) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("AnnotatedFlatCurryGoodies","updBranch")) (CSymbol ("Prelude","id")))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","trPattern") 3 Public (CFuncType (CFuncType (CTVar (0,"a")) (CFuncType (CTCons ("Prelude","(,)") [CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]],CTVar (0,"a")]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","Int") [],CTVar (0,"a")]]) (CTVar (1,"b"))))) (CFuncType (CFuncType (CTVar (0,"a")) (CFuncType (CTCons ("FlatCurry","Literal") []) (CTVar (1,"b")))) (CFuncType (CTCons ("AnnotatedFlatCurry","APattern") [CTVar (0,"a")]) (CTVar (1,"b"))))) (CRules CFlex [CRule [CPVar (0,"pattern"),CPVar (1,"_"),CPComb ("AnnotatedFlatCurry","APattern") [CPVar (2,"a"),CPVar (3,"name"),CPVar (4,"args")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CVar (0,"pattern")) (CVar (2,"a"))) (CVar (3,"name"))) (CVar (4,"args")))] [],CRule [CPVar (5,"_"),CPVar (6,"lpattern"),CPComb ("AnnotatedFlatCurry","ALPattern") [CPVar (7,"a"),CPVar (8,"l")]] [(CSymbol ("Prelude","success"),CApply (CApply (CVar (6,"lpattern")) (CVar (7,"a"))) (CVar (8,"l")))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","patCons") 0 Public (CFuncType (CTCons ("AnnotatedFlatCurry","APattern") [CTVar (0,"a")]) (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("AnnotatedFlatCurryGoodies","trPattern")) (CLambda [CPVar (0,"_"),CPVar (1,"name"),CPVar (2,"_")] (CApply (CSymbol ("Prelude","fst")) (CVar (1,"name"))))) (CSymbol ("Prelude","failed")))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","patArgs") 0 Public (CFuncType (CTCons ("AnnotatedFlatCurry","APattern") [CTVar (0,"a")]) (CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","Int") [],CTVar (0,"a")]])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("AnnotatedFlatCurryGoodies","trPattern")) (CLambda [CPVar (0,"_"),CPVar (1,"_"),CPVar (2,"args")] (CVar (2,"args")))) (CSymbol ("Prelude","failed")))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","patLiteral") 0 Public (CFuncType (CTCons ("AnnotatedFlatCurry","APattern") [CTVar (0,"a")]) (CTCons ("FlatCurry","Literal") [])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("AnnotatedFlatCurryGoodies","trPattern")) (CSymbol ("Prelude","failed"))) (CLambda [CPVar (0,"_"),CPVar (1,"l")] (CVar (1,"l"))))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","isConsPattern") 0 Public (CFuncType (CTCons ("AnnotatedFlatCurry","APattern") [CTVar (0,"a")]) (CTCons ("Prelude","Bool") [])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("AnnotatedFlatCurryGoodies","trPattern")) (CLambda [CPVar (0,"_"),CPVar (1,"_"),CPVar (2,"_")] (CSymbol ("Prelude","True")))) (CLambda [CPVar (3,"_"),CPVar (4,"_")] (CSymbol ("Prelude","False"))))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","updPattern") 3 Public (CFuncType (CFuncType (CTCons ("Prelude","(,)") [CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]],CTVar (0,"a")]) (CTCons ("Prelude","(,)") [CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]],CTVar (0,"a")])) (CFuncType (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","Int") [],CTVar (0,"a")]]) (CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","Int") [],CTVar (0,"a")]])) (CFuncType (CFuncType (CTCons ("FlatCurry","Literal") []) (CTCons ("FlatCurry","Literal") [])) (CFuncType (CTCons ("AnnotatedFlatCurry","APattern") [CTVar (0,"a")]) (CTCons ("AnnotatedFlatCurry","APattern") [CTVar (0,"a")]))))) (CRules CFlex [CRule [CPVar (0,"fn"),CPVar (1,"fa"),CPVar (2,"fl")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("AnnotatedFlatCurryGoodies","trPattern")) (CSymbol ("AnnotatedFlatCurryGoodies","apattern"))) (CSymbol ("AnnotatedFlatCurryGoodies","alpattern")))] [CLocalFunc (CFunc ("AnnotatedFlatCurryGoodies","apattern") 3 Private (CFuncType (CTVar (1,"_621")) (CFuncType (CTCons ("Prelude","(,)") [CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]],CTVar (1,"_621")]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","Int") [],CTVar (1,"_621")]]) (CTCons ("AnnotatedFlatCurry","APattern") [CTVar (1,"_621")])))) (CRules CFlex [CRule [CPVar (3,"a"),CPVar (4,"name"),CPVar (5,"args")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("AnnotatedFlatCurry","APattern")) (CVar (3,"a"))) (CApply (CVar (0,"fn")) (CVar (4,"name")))) (CApply (CVar (1,"fa")) (CVar (5,"args"))))] []])),CLocalFunc (CFunc ("AnnotatedFlatCurryGoodies","alpattern") 2 Private (CFuncType (CTVar (0,"a")) (CFuncType (CTCons ("FlatCurry","Literal") []) (CTCons ("AnnotatedFlatCurry","APattern") [CTVar (0,"a")]))) (CRules CFlex [CRule [CPVar (3,"a"),CPVar (4,"l")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("AnnotatedFlatCurry","ALPattern")) (CVar (3,"a"))) (CApply (CVar (2,"fl")) (CVar (4,"l"))))] []]))]]),
  CFunc ("AnnotatedFlatCurryGoodies","updPatCons") 1 Public (CFuncType (CFuncType (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]) (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]])) (CFuncType (CTCons ("AnnotatedFlatCurry","APattern") [CTVar (0,"a")]) (CTCons ("AnnotatedFlatCurry","APattern") [CTVar (0,"a")]))) (CRules CFlex [CRule [CPVar (0,"f")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("AnnotatedFlatCurryGoodies","updPattern")) (CLambda [CPComb ("Prelude","(,)") [CPVar (1,"n"),CPVar (2,"a")]] (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CVar (0,"f")) (CVar (1,"n")))) (CVar (2,"a"))))) (CSymbol ("Prelude","id"))) (CSymbol ("Prelude","id")))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","updPatArgs") 1 Public (CFuncType (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","Int") [],CTVar (0,"a")]]) (CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","Int") [],CTVar (0,"a")]])) (CFuncType (CTCons ("AnnotatedFlatCurry","APattern") [CTVar (0,"a")]) (CTCons ("AnnotatedFlatCurry","APattern") [CTVar (0,"a")]))) (CRules CFlex [CRule [CPVar (0,"f")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("AnnotatedFlatCurryGoodies","updPattern")) (CSymbol ("Prelude","id"))) (CVar (0,"f"))) (CSymbol ("Prelude","id")))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","updPatLiteral") 1 Public (CFuncType (CFuncType (CTCons ("FlatCurry","Literal") []) (CTCons ("FlatCurry","Literal") [])) (CFuncType (CTCons ("AnnotatedFlatCurry","APattern") [CTVar (0,"a")]) (CTCons ("AnnotatedFlatCurry","APattern") [CTVar (0,"a")]))) (CRules CFlex [CRule [CPVar (0,"f")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("AnnotatedFlatCurryGoodies","updPattern")) (CSymbol ("Prelude","id"))) (CSymbol ("Prelude","id"))) (CVar (0,"f")))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","patExpr") 0 Public (CFuncType (CTCons ("AnnotatedFlatCurry","APattern") [CTVar (0,"a")]) (CTCons ("AnnotatedFlatCurry","AExpr") [CTVar (0,"a")])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("AnnotatedFlatCurryGoodies","trPattern")) (CLambda [CPVar (0,"a"),CPVar (1,"name"),CPVar (2,"vs")] (CApply (CApply (CApply (CApply (CSymbol ("AnnotatedFlatCurry","AComb")) (CVar (0,"a"))) (CSymbol ("FlatCurry","ConsCall"))) (CVar (1,"name"))) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("AnnotatedFlatCurryGoodies","var"))) (CVar (2,"vs")))))) (CSymbol ("AnnotatedFlatCurry","ALit")))] [CLocalFunc (CFunc ("AnnotatedFlatCurryGoodies","var") 1 Private (CFuncType (CTCons ("Prelude","(,)") [CTCons ("Prelude","Int") [],CTVar (0,"a")]) (CTCons ("AnnotatedFlatCurry","AExpr") [CTVar (0,"a")])) (CRules CFlex [CRule [CPComb ("Prelude","(,)") [CPVar (0,"v"),CPVar (1,"a")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("AnnotatedFlatCurry","AVar")) (CVar (1,"a"))) (CVar (0,"v")))] []]))]]),
  CFunc ("AnnotatedFlatCurryGoodies","annRule") 1 Public (CFuncType (CTCons ("AnnotatedFlatCurry","ARule") [CTVar (0,"a")]) (CTVar (0,"a"))) (CRules CFlex [CRule [CPComb ("AnnotatedFlatCurry","ARule") [CPVar (0,"a"),CPVar (1,"_"),CPVar (2,"_")]] [(CSymbol ("Prelude","success"),CVar (0,"a"))] [],CRule [CPComb ("AnnotatedFlatCurry","AExternal") [CPVar (3,"a"),CPVar (4,"_")]] [(CSymbol ("Prelude","success"),CVar (3,"a"))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","annExpr") 1 Public (CFuncType (CTCons ("AnnotatedFlatCurry","AExpr") [CTVar (0,"a")]) (CTVar (0,"a"))) (CRules CFlex [CRule [CPComb ("AnnotatedFlatCurry","AComb") [CPVar (0,"a"),CPVar (1,"_"),CPVar (2,"_"),CPVar (3,"_")]] [(CSymbol ("Prelude","success"),CVar (0,"a"))] [],CRule [CPComb ("AnnotatedFlatCurry","ACase") [CPVar (4,"a"),CPVar (5,"_"),CPVar (6,"_"),CPVar (7,"_")]] [(CSymbol ("Prelude","success"),CVar (4,"a"))] [],CRule [CPComb ("AnnotatedFlatCurry","AVar") [CPVar (8,"a"),CPVar (9,"_")]] [(CSymbol ("Prelude","success"),CVar (8,"a"))] [],CRule [CPComb ("AnnotatedFlatCurry","ALit") [CPVar (10,"a"),CPVar (11,"_")]] [(CSymbol ("Prelude","success"),CVar (10,"a"))] [],CRule [CPComb ("AnnotatedFlatCurry","AOr") [CPVar (12,"a"),CPVar (13,"_"),CPVar (14,"_")]] [(CSymbol ("Prelude","success"),CVar (12,"a"))] [],CRule [CPComb ("AnnotatedFlatCurry","ALet") [CPVar (15,"a"),CPVar (16,"_"),CPVar (17,"_")]] [(CSymbol ("Prelude","success"),CVar (15,"a"))] [],CRule [CPComb ("AnnotatedFlatCurry","AFree") [CPVar (18,"a"),CPVar (19,"_"),CPVar (20,"_")]] [(CSymbol ("Prelude","success"),CVar (18,"a"))] [],CRule [CPComb ("AnnotatedFlatCurry","ATyped") [CPVar (21,"a"),CPVar (22,"_"),CPVar (23,"_")]] [(CSymbol ("Prelude","success"),CVar (21,"a"))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","annPattern") 1 Public (CFuncType (CTCons ("AnnotatedFlatCurry","APattern") [CTVar (0,"a")]) (CTVar (0,"a"))) (CRules CFlex [CRule [CPComb ("AnnotatedFlatCurry","APattern") [CPVar (0,"a"),CPVar (1,"_"),CPVar (2,"_")]] [(CSymbol ("Prelude","success"),CVar (0,"a"))] [],CRule [CPComb ("AnnotatedFlatCurry","ALPattern") [CPVar (3,"a"),CPVar (4,"_")]] [(CSymbol ("Prelude","success"),CVar (3,"a"))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","unAnnProg") 0 Public (CFuncType (CTCons ("AnnotatedFlatCurry","AProg") [CTVar (0,"a")]) (CTCons ("FlatCurry","Prog") [])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("AnnotatedFlatCurryGoodies","trProg")) (CLambda [CPVar (0,"m"),CPVar (1,"is"),CPVar (2,"ts"),CPVar (3,"fs"),CPVar (4,"os")] (CApply (CApply (CApply (CApply (CApply (CSymbol ("FlatCurry","Prog")) (CVar (0,"m"))) (CVar (1,"is"))) (CVar (2,"ts"))) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("AnnotatedFlatCurryGoodies","unAnnFuncDecl"))) (CVar (3,"fs")))) (CVar (4,"os")))))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","unAnnFuncDecl") 0 Public (CFuncType (CTCons ("AnnotatedFlatCurry","AFuncDecl") [CTVar (0,"a")]) (CTCons ("FlatCurry","FuncDecl") [])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("AnnotatedFlatCurryGoodies","trFunc")) (CLambda [CPVar (0,"f"),CPVar (1,"ar"),CPVar (2,"vs"),CPVar (3,"ty"),CPVar (4,"r")] (CApply (CApply (CApply (CApply (CApply (CSymbol ("FlatCurry","Func")) (CVar (0,"f"))) (CVar (1,"ar"))) (CVar (2,"vs"))) (CVar (3,"ty"))) (CApply (CSymbol ("AnnotatedFlatCurryGoodies","unAnnRule")) (CVar (4,"r"))))))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","unAnnRule") 0 Public (CFuncType (CTCons ("AnnotatedFlatCurry","ARule") [CTVar (0,"a")]) (CTCons ("FlatCurry","Rule") [])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("AnnotatedFlatCurryGoodies","trRule")) (CLambda [CPVar (0,"_"),CPVar (1,"vs"),CPVar (2,"e")] (CApply (CApply (CSymbol ("FlatCurry","Rule")) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("Prelude","fst"))) (CVar (1,"vs")))) (CApply (CSymbol ("AnnotatedFlatCurryGoodies","unAnnExpr")) (CVar (2,"e")))))) (CLambda [CPVar (3,"_"),CPVar (4,"s")] (CApply (CSymbol ("FlatCurry","External")) (CVar (4,"s")))))] []]),
  CFunc ("AnnotatedFlatCurryGoodies","unAnnExpr") 0 Public (CFuncType (CTCons ("AnnotatedFlatCurry","AExpr") [CTVar (0,"a")]) (CTCons ("FlatCurry","Expr") [])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CSymbol ("AnnotatedFlatCurryGoodies","trExpr")) (CSymbol ("AnnotatedFlatCurryGoodies","var"))) (CSymbol ("AnnotatedFlatCurryGoodies","lit"))) (CSymbol ("AnnotatedFlatCurryGoodies","comb"))) (CSymbol ("AnnotatedFlatCurryGoodies","lett"))) (CSymbol ("AnnotatedFlatCurryGoodies","fre"))) (CSymbol ("AnnotatedFlatCurryGoodies","or"))) (CSymbol ("AnnotatedFlatCurryGoodies","cse"))) (CSymbol ("AnnotatedFlatCurryGoodies","branch"))) (CSymbol ("AnnotatedFlatCurryGoodies","typed")))] [CLocalFunc (CFunc ("AnnotatedFlatCurryGoodies","var") 2 Private (CFuncType (CTVar (0,"a")) (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("FlatCurry","Expr") []))) (CRules CFlex [CRule [CPVar (0,"_"),CPVar (1,"v")] [(CSymbol ("Prelude","success"),CApply (CSymbol ("FlatCurry","Var")) (CVar (1,"v")))] []])),CLocalFunc (CFunc ("AnnotatedFlatCurryGoodies","lit") 2 Private (CFuncType (CTVar (0,"a")) (CFuncType (CTCons ("FlatCurry","Literal") []) (CTCons ("FlatCurry","Expr") []))) (CRules CFlex [CRule [CPVar (0,"_"),CPVar (1,"l")] [(CSymbol ("Prelude","success"),CApply (CSymbol ("FlatCurry","Lit")) (CVar (1,"l")))] []])),CLocalFunc (CFunc ("AnnotatedFlatCurryGoodies","comb") 4 Private (CFuncType (CTVar (0,"a")) (CFuncType (CTCons ("FlatCurry","CombType") []) (CFuncType (CTCons ("Prelude","(,)") [CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]],CTVar (1,"b")]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("FlatCurry","Expr") []]) (CTCons ("FlatCurry","Expr") []))))) (CRules CFlex [CRule [CPVar (0,"_"),CPVar (1,"ct"),CPVar (2,"n"),CPVar (3,"es")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("FlatCurry","Comb")) (CVar (1,"ct"))) (CApply (CSymbol ("Prelude","fst")) (CVar (2,"n")))) (CVar (3,"es")))] []])),CLocalFunc (CFunc ("AnnotatedFlatCurryGoodies","lett") 3 Private (CFuncType (CTVar (0,"a")) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","Int") [],CTCons ("FlatCurry","Expr") []]]) (CFuncType (CTCons ("FlatCurry","Expr") []) (CTCons ("FlatCurry","Expr") [])))) (CRules CFlex [CRule [CPVar (0,"_"),CPVar (1,"bs"),CPVar (2,"e")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("FlatCurry","Let")) (CVar (1,"bs"))) (CVar (2,"e")))] []])),CLocalFunc (CFunc ("AnnotatedFlatCurryGoodies","fre") 3 Private (CFuncType (CTVar (0,"a")) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","Int") [],CTVar (1,"b")]]) (CFuncType (CTCons ("FlatCurry","Expr") []) (CTCons ("FlatCurry","Expr") [])))) (CRules CFlex [CRule [CPVar (0,"_"),CPVar (1,"vs"),CPVar (2,"e")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("FlatCurry","Free")) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("Prelude","fst"))) (CVar (1,"vs")))) (CVar (2,"e")))] []])),CLocalFunc (CFunc ("AnnotatedFlatCurryGoodies","or") 3 Private (CFuncType (CTVar (0,"a")) (CFuncType (CTCons ("FlatCurry","Expr") []) (CFuncType (CTCons ("FlatCurry","Expr") []) (CTCons ("FlatCurry","Expr") [])))) (CRules CFlex [CRule [CPVar (0,"_"),CPVar (1,"a"),CPVar (2,"b")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("FlatCurry","Or")) (CVar (1,"a"))) (CVar (2,"b")))] []])),CLocalFunc (CFunc ("AnnotatedFlatCurryGoodies","cse") 4 Private (CFuncType (CTVar (0,"a")) (CFuncType (CTCons ("FlatCurry","CaseType") []) (CFuncType (CTCons ("FlatCurry","Expr") []) (CFuncType (CTCons ("Prelude","[]") [CTCons ("FlatCurry","BranchExpr") []]) (CTCons ("FlatCurry","Expr") []))))) (CRules CFlex [CRule [CPVar (0,"_"),CPVar (1,"ct"),CPVar (2,"e"),CPVar (3,"bs")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("FlatCurry","Case")) (CVar (1,"ct"))) (CVar (2,"e"))) (CVar (3,"bs")))] []])),CLocalFunc (CFunc ("AnnotatedFlatCurryGoodies","branch") 2 Private (CFuncType (CTCons ("AnnotatedFlatCurry","APattern") [CTVar (0,"a")]) (CFuncType (CTCons ("FlatCurry","Expr") []) (CTCons ("FlatCurry","BranchExpr") []))) (CRules CFlex [CRule [CPVar (0,"p"),CPVar (1,"e")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("FlatCurry","Branch")) (CApply (CSymbol ("AnnotatedFlatCurryGoodies","unAnnPattern")) (CVar (0,"p")))) (CVar (1,"e")))] []])),CLocalFunc (CFunc ("AnnotatedFlatCurryGoodies","typed") 3 Private (CFuncType (CTVar (0,"a")) (CFuncType (CTCons ("FlatCurry","Expr") []) (CFuncType (CTCons ("FlatCurry","TypeExpr") []) (CTCons ("FlatCurry","Expr") [])))) (CRules CFlex [CRule [CPVar (0,"_"),CPVar (1,"e"),CPVar (2,"ty")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("FlatCurry","Typed")) (CVar (1,"e"))) (CVar (2,"ty")))] []]))]]),
  CFunc ("AnnotatedFlatCurryGoodies","unAnnPattern") 0 Public (CFuncType (CTCons ("AnnotatedFlatCurry","APattern") [CTVar (0,"a")]) (CTCons ("FlatCurry","Pattern") [])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("AnnotatedFlatCurryGoodies","trPattern")) (CLambda [CPVar (0,"_"),CPVar (1,"qn"),CPVar (2,"vs")] (CApply (CApply (CSymbol ("FlatCurry","Pattern")) (CApply (CSymbol ("Prelude","fst")) (CVar (1,"qn")))) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("Prelude","fst"))) (CVar (2,"vs")))))) (CLambda [CPVar (3,"_"),CPVar (4,"l")] (CApply (CSymbol ("FlatCurry","LPattern")) (CVar (4,"l")))))] []])]
 []
