Prog "NamedSocket" ["CPNS","IO","Prelude","Socket","System"] [Type ("NamedSocket","Socket") Public [] [Cons ("NamedSocket","NamedSocket") 2 Private [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Socket","Socket") []]]] [Func ("NamedSocket","listenOn") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("NamedSocket","Socket") []])) (Rule [1] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Socket","listenOnFresh") [],Comb (FuncPartCall 1) ("NamedSocket","listenOn._#lambda1") [Var 1]])),Func ("NamedSocket","listenOn._#lambda1") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Socket","Socket") []]) (TCons ("Prelude","IO") [TCons ("NamedSocket","Socket") []]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb FuncCall ("Prelude",">>") [Comb FuncCall ("CPNS","registerPort") [Var 1,Var 3,Lit (Intc  0)],Comb FuncCall ("Prelude","return") [Comb ConsCall ("NamedSocket","NamedSocket") [Var 1,Var 4]]])])),Func ("NamedSocket","socketAccept") 1 Public (FuncType (TCons ("NamedSocket","Socket") []) (TCons ("Prelude","IO") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("IO","Handle") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("NamedSocket","NamedSocket") [2,3]) (Comb FuncCall ("Socket","socketAccept") [Var 3])])),Func ("NamedSocket","waitForSocketAccept") 1 Public (FuncType (TCons ("NamedSocket","Socket") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","IO") [TCons ("Prelude","Maybe") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("IO","Handle") []]]]))) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("NamedSocket","NamedSocket") [2,3]) (Comb (FuncPartCall 1) ("Socket","waitForSocketAccept") [Var 3])])),Func ("NamedSocket","sClose") 1 Public (FuncType (TCons ("NamedSocket","Socket") []) (TCons ("Prelude","IO") [TCons ("Prelude","()") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("NamedSocket","NamedSocket") [2,3]) (Comb FuncCall ("Prelude",">>") [Comb FuncCall ("Socket","sClose") [Var 3],Comb FuncCall ("CPNS","unregisterPort") [Var 2]])])),Func ("NamedSocket","socketName") 1 Public (FuncType (TCons ("NamedSocket","Socket") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("NamedSocket","NamedSocket") [2,3]) (Var 2)])),Func ("NamedSocket","connectToSocketRepeat") 4 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","IO") [TVar 0]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","Maybe") [TCons ("IO","Handle") []]]))))) (Rule [1,2,3,4] (Let [(5,Case  Rigid (Comb FuncCall ("Prelude","==") [Var 3,Lit (Intc  0)]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","return") [Comb ConsCall ("Prelude","Nothing") []]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude",">>") [Var 2,Comb FuncCall ("Prelude",">>") [Comb FuncCall ("System","sleep") [Comb FuncCall ("NamedSocket","connectToSocketRepeat.ms2s.17") [Var 1]],Comb FuncCall ("NamedSocket","connectToSocketRepeat") [Var 1,Var 2,Comb FuncCall ("NamedSocket","connectToSocketRepeat.decr.17") [Var 3],Var 4]]])]),(6,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","break") [Comb (FuncPartCall 1) ("Prelude","flip") [Comb (FuncPartCall 2) ("Prelude","==") [],Lit (Charc  '@')]],Var 4]),(7,Comb FuncCall ("NamedSocket","connectToSocketRepeat._#selFP2#name") [Var 6]),(8,Comb FuncCall ("NamedSocket","connectToSocketRepeat._#selFP3#atHost") [Var 6]),(9,Case  Rigid (Comb FuncCall ("Prelude","==") [Var 8,Comb ConsCall ("Prelude","[]") []]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","tail") [Var 8])])] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("CPNS","cpnsAlive") [Var 1,Var 9],Comb (FuncPartCall 1) ("NamedSocket","connectToSocketRepeat._#lambda2") [Var 9,Var 7,Var 5]]))),Func ("NamedSocket","connectToSocketRepeat.ms2s.17") 1 Private (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") [])) (Rule [1] (Let [(2,Comb FuncCall ("Prelude","div") [Var 1,Lit (Intc  1000)])] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 2,Lit (Intc  0)]) [Branch (Pattern ("Prelude","True") []) (Lit (Intc  1)),Branch (Pattern ("Prelude","False") []) (Var 2)]))),Func ("NamedSocket","connectToSocketRepeat.decr.17") 1 Private (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") [])) (Rule [1] (Case  Rigid (Comb FuncCall ("Prelude","<") [Var 1,Lit (Intc  0)]) [Branch (Pattern ("Prelude","True") []) (Var 1),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","-") [Var 1,Lit (Intc  1)])])),Func ("NamedSocket","connectToSocketRepeat._#selFP2#name") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("NamedSocket","connectToSocketRepeat._#selFP3#atHost") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("NamedSocket","connectToSocketRepeat._#lambda2") 4 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","IO") [TCons ("Prelude","Maybe") [TCons ("IO","Handle") []]]) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","IO") [TCons ("Prelude","Maybe") [TCons ("IO","Handle") []]]))))) (Rule [1,2,3,4] (Case  Rigid (Comb FuncCall ("Prelude","not") [Var 4]) [Branch (Pattern ("Prelude","True") []) (Var 3),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("CPNS","getPortInfo") [Var 2,Var 1],Comb (FuncPartCall 1) ("NamedSocket","connectToSocketRepeat._#lambda2._#lambda3") [Var 1,Var 3]])])),Func ("NamedSocket","connectToSocketRepeat._#lambda2._#lambda3") 3 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","IO") [TCons ("Prelude","Maybe") [TCons ("IO","Handle") []]]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") []]) (TCons ("Prelude","IO") [TCons ("Prelude","Maybe") [TCons ("IO","Handle") []]])))) (Rule [1,2,3] (Case  Flex (Var 3) [Branch (Pattern ("Prelude","(,)") [4,5]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 4,Lit (Intc  0)]) [Branch (Pattern ("Prelude","True") []) (Var 2),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Socket","connectToSocket") [Var 1,Var 4],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","return") [],Comb (ConsPartCall 1) ("Prelude","Just") []]])])])),Func ("NamedSocket","connectToSocketWait") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("IO","Handle") []])) (Rule [1] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("NamedSocket","connectToSocketRepeat") [Lit (Intc  1000),Comb FuncCall ("Prelude","done") [],Comb FuncCall ("Prelude","negate") [Lit (Intc  1)],Var 1],Comb (FuncPartCall 1) ("NamedSocket","connectToSocketWait._#lambda4") []])),Func ("NamedSocket","connectToSocketWait._#lambda4") 1 Private (FuncType (TCons ("Prelude","Maybe") [TCons ("IO","Handle") []]) (TCons ("Prelude","IO") [TCons ("IO","Handle") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","Just") [2]) (Comb FuncCall ("Prelude","return") [Var 2])])),Func ("NamedSocket","connectToSocket") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("IO","Handle") []])) (Rule [1] (Let [(2,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","break") [Comb (FuncPartCall 1) ("Prelude","flip") [Comb (FuncPartCall 2) ("Prelude","==") [],Lit (Charc  '@')]],Var 1]),(3,Comb FuncCall ("NamedSocket","connectToSocket._#selFP5#name") [Var 2]),(4,Comb FuncCall ("NamedSocket","connectToSocket._#selFP6#atHost") [Var 2]),(5,Case  Rigid (Comb FuncCall ("Prelude","==") [Var 4,Comb ConsCall ("Prelude","[]") []]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","tail") [Var 4])])] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("CPNS","getPortInfo") [Var 3,Var 5],Comb (FuncPartCall 1) ("NamedSocket","connectToSocket._#lambda5") [Var 5,Var 3]]))),Func ("NamedSocket","connectToSocket._#selFP5#name") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("NamedSocket","connectToSocket._#selFP6#atHost") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("NamedSocket","connectToSocket._#lambda5") 3 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") []]) (TCons ("Prelude","IO") [TCons ("IO","Handle") []])))) (Rule [1,2,3] (Case  Flex (Var 3) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb FuncCall ("Prelude",">>") [Case  Rigid (Comb FuncCall ("Prelude","==") [Var 4,Lit (Intc  0)]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","error") [Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'T'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'S'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'k'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'S'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'k'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '"'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]],Comb FuncCall ("Prelude","++") [Var 2,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '@'),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc  '"'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  '!'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","done") [])],Comb FuncCall ("Socket","connectToSocket") [Var 1,Var 4]])]))] []