CurryProg "Function"
 ["Prelude"]
 []
 [CFunc ("Function","fix") 1 Public (CFuncType (CFuncType (CTVar (0,"a")) (CTVar (0,"a"))) (CTVar (0,"a"))) (CRules CFlex [CRule [CPVar (0,"f")] [(CSymbol ("Prelude","success"),CLetDecl [CLocalPat (CPVar (1,"x")) (CApply (CVar (0,"f")) (CVar (1,"x"))) []] (CVar (1,"x")))] []]),
  CFunc ("Function","on") 4 Public (CFuncType (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (0,"a")) (CTVar (1,"b")))) (CFuncType (CFuncType (CTVar (2,"c")) (CTVar (0,"a"))) (CFuncType (CTVar (2,"c")) (CFuncType (CTVar (2,"c")) (CTVar (1,"b")))))) (CRules CFlex [CRule [CPVar (0,"op"),CPVar (1,"f"),CPVar (2,"x"),CPVar (3,"y")] [(CSymbol ("Prelude","success"),CApply (CApply (CVar (0,"op")) (CApply (CVar (1,"f")) (CVar (2,"x")))) (CApply (CVar (1,"f")) (CVar (3,"y"))))] []]),
  CFunc ("Function","first") 2 Public (CFuncType (CFuncType (CTVar (0,"a")) (CTVar (1,"b"))) (CFuncType (CTCons ("Prelude","(,)") [CTVar (0,"a"),CTVar (2,"c")]) (CTCons ("Prelude","(,)") [CTVar (1,"b"),CTVar (2,"c")]))) (CRules CFlex [CRule [CPVar (0,"f"),CPComb ("Prelude","(,)") [CPVar (1,"x"),CPVar (2,"y")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CVar (0,"f")) (CVar (1,"x")))) (CVar (2,"y")))] []]),
  CFunc ("Function","second") 2 Public (CFuncType (CFuncType (CTVar (0,"a")) (CTVar (1,"b"))) (CFuncType (CTCons ("Prelude","(,)") [CTVar (2,"c"),CTVar (0,"a")]) (CTCons ("Prelude","(,)") [CTVar (2,"c"),CTVar (1,"b")]))) (CRules CFlex [CRule [CPVar (0,"f"),CPComb ("Prelude","(,)") [CPVar (1,"x"),CPVar (2,"y")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","(,)")) (CVar (1,"x"))) (CApply (CVar (0,"f")) (CVar (2,"y"))))] []]),
  CFunc ("Function","***") 3 Public (CFuncType (CFuncType (CTVar (0,"a")) (CTVar (1,"b"))) (CFuncType (CFuncType (CTVar (2,"c")) (CTVar (3,"d"))) (CFuncType (CTCons ("Prelude","(,)") [CTVar (0,"a"),CTVar (2,"c")]) (CTCons ("Prelude","(,)") [CTVar (1,"b"),CTVar (3,"d")])))) (CRules CFlex [CRule [CPVar (0,"f"),CPVar (1,"g"),CPComb ("Prelude","(,)") [CPVar (2,"x"),CPVar (3,"y")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CVar (0,"f")) (CVar (2,"x")))) (CApply (CVar (1,"g")) (CVar (3,"y"))))] []]),
  CFunc ("Function","&&&") 3 Public (CFuncType (CFuncType (CTVar (0,"a")) (CTVar (1,"b"))) (CFuncType (CFuncType (CTVar (0,"a")) (CTVar (2,"c"))) (CFuncType (CTVar (0,"a")) (CTCons ("Prelude","(,)") [CTVar (1,"b"),CTVar (2,"c")])))) (CRules CFlex [CRule [CPVar (0,"f"),CPVar (1,"g"),CPVar (2,"x")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CVar (0,"f")) (CVar (2,"x")))) (CApply (CVar (1,"g")) (CVar (2,"x"))))] []]),
  CFunc ("Function","both") 2 Public (CFuncType (CFuncType (CTVar (0,"a")) (CTVar (1,"b"))) (CFuncType (CTCons ("Prelude","(,)") [CTVar (0,"a"),CTVar (0,"a")]) (CTCons ("Prelude","(,)") [CTVar (1,"b"),CTVar (1,"b")]))) (CRules CFlex [CRule [CPVar (0,"f"),CPComb ("Prelude","(,)") [CPVar (1,"x"),CPVar (2,"y")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CVar (0,"f")) (CVar (1,"x")))) (CApply (CVar (0,"f")) (CVar (2,"y"))))] []])]
 []
