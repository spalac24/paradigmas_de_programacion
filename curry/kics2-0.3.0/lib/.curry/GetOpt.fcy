Prog "GetOpt" ["List","Prelude"] [Type ("GetOpt","ArgOrder") Public [0] [Cons ("GetOpt","RequireOrder") 0 Public [],Cons ("GetOpt","Permute") 0 Public [],Cons ("GetOpt","ReturnInOrder") 1 Public [FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TVar 0)]],Type ("GetOpt","OptDescr") Public [0] [Cons ("GetOpt","Option") 4 Public [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("GetOpt","ArgDescr") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]],Type ("GetOpt","ArgDescr") Public [0] [Cons ("GetOpt","NoArg") 1 Public [TVar 0],Cons ("GetOpt","ReqArg") 2 Public [FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TVar 0),TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],Cons ("GetOpt","OptArg") 2 Public [FuncType (TCons ("Prelude","Maybe") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TVar 0),TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]],Type ("GetOpt","OptKind") Private [0] [Cons ("GetOpt","Opt") 1 Private [TVar 0],Cons ("GetOpt","UnreqOpt") 1 Private [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],Cons ("GetOpt","NonOpt") 1 Private [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],Cons ("GetOpt","EndOfOpts") 0 Private [],Cons ("GetOpt","OptErr") 1 Private [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]] [Func ("GetOpt","usageInfo") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("GetOpt","OptDescr") [TVar 0]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1,2] (Let [(3,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","unzip3") [],Comb FuncCall ("Prelude","concatMap") [Comb (FuncPartCall 1) ("GetOpt","fmtOpt") []]],Var 2]),(4,Comb FuncCall ("GetOpt","usageInfo._#selFP2#ss") [Var 3]),(5,Comb FuncCall ("GetOpt","usageInfo._#selFP3#ls") [Var 3]),(6,Comb FuncCall ("GetOpt","usageInfo._#selFP4#ds") [Var 3]),(7,Comb FuncCall ("Prelude","zipWith3") [Comb (FuncPartCall 3) ("GetOpt","usageInfo.paste.2") [],Comb FuncCall ("GetOpt","usageInfo.sameLen.2") [Var 4],Comb FuncCall ("GetOpt","usageInfo.sameLen.2") [Var 5],Var 6])] (Comb FuncCall ("Prelude","unlines") [Comb ConsCall ("Prelude",":") [Var 1,Var 7]]))),Func ("GetOpt","usageInfo._#selFP2#ss") 1 Private (FuncType (TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,)") [2,3,4]) (Var 2)])),Func ("GetOpt","usageInfo._#selFP3#ls") 1 Private (FuncType (TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,)") [2,3,4]) (Var 3)])),Func ("GetOpt","usageInfo._#selFP4#ds") 1 Private (FuncType (TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,)") [2,3,4]) (Var 4)])),Func ("GetOpt","usageInfo.paste.2") 3 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1,2,3] (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude","++") [Var 1,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude","++") [Var 2,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]],Var 3]]]]])),Func ("GetOpt","usageInfo.flushLeft.2") 2 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]))) (Rule [1,2] (Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("GetOpt","usageInfo.flushLeft.2._#lambda1") [Var 1],Var 2])),Func ("GetOpt","usageInfo.flushLeft.2._#lambda1") 2 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1,2] (Comb FuncCall ("Prelude","take") [Var 1,Comb FuncCall ("Prelude","++") [Var 2,Comb FuncCall ("Prelude","repeat") [Lit (Charc  ' ')]]])),Func ("GetOpt","usageInfo.sameLen.2") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Comb FuncCall ("GetOpt","usageInfo.flushLeft.2") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("GetOpt","maximum") [],Comb (FuncPartCall 1) ("Prelude","map") [Comb (FuncPartCall 1) ("Prelude","length") []]],Var 1],Var 1])),Func ("GetOpt","maximum") 1 Private (FuncType (TCons ("Prelude","[]") [TVar 0]) (TVar 0)) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","error") [Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]),Branch (Pattern ("Prelude",":") [2,3]) (Comb FuncCall ("Prelude","foldl1") [Comb (FuncPartCall 2) ("Prelude","max") [],Var 1])])),Func ("GetOpt","fmtOpt") 1 Private (FuncType (TCons ("GetOpt","OptDescr") [TVar 0]) (TCons ("Prelude","[]") [TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("GetOpt","Option") [2,3,4,5]) (Let [(6,Comb FuncCall ("GetOpt","fmtOpt.sepBy.19") [Lit (Charc  ','),Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("GetOpt","fmtShort") [Var 4],Var 2]]),(7,Comb FuncCall ("GetOpt","fmtOpt.sepBy.19") [Lit (Charc  ','),Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("GetOpt","fmtLong") [Var 4],Var 3]])] (Case  Rigid (Comb FuncCall ("Prelude","lines") [Var 5]) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,,)") [Var 6,Var 7,Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude",":") [8,9]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,,)") [Var 6,Var 7,Var 8],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("GetOpt","fmtOpt._#lambda3") [],Var 9]])]))])),Func ("GetOpt","fmtOpt.sepBy.19") 2 Private (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [3,4]) (Case  Flex (Var 4) [Branch (Pattern ("Prelude","[]") []) (Var 3),Branch (Pattern ("Prelude",":") [5,6]) (Comb FuncCall ("Prelude","++") [Var 3,Comb ConsCall ("Prelude",":") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb FuncCall ("GetOpt","fmtOpt.sepBy.19") [Var 1,Comb ConsCall ("Prelude",":") [Var 5,Var 6]]]]])])])),Func ("GetOpt","fmtOpt._#lambda3") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Comb ConsCall ("Prelude","(,,)") [Comb ConsCall ("Prelude","[]") [],Comb ConsCall ("Prelude","[]") [],Var 1])),Func ("GetOpt","fmtShort") 2 Private (FuncType (TCons ("GetOpt","ArgDescr") [TVar 0]) (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1,2] (Case  Flex (Var 1) [Branch (Pattern ("GetOpt","NoArg") [3]) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude","[]") []]]),Branch (Pattern ("GetOpt","ReqArg") [4,5]) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []],Var 5]]]),Branch (Pattern ("GetOpt","OptArg") [6,7]) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '['),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Var 7,Comb ConsCall ("Prelude",":") [Lit (Charc  ']'),Comb ConsCall ("Prelude","[]") []]]]]])])),Func ("GetOpt","fmtLong") 2 Private (FuncType (TCons ("GetOpt","ArgDescr") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1,2] (Case  Flex (Var 1) [Branch (Pattern ("GetOpt","NoArg") [3]) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude","[]") []]],Var 2]),Branch (Pattern ("GetOpt","ReqArg") [4,5]) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude","++") [Var 2,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '='),Comb ConsCall ("Prelude","[]") []],Var 5]]]),Branch (Pattern ("GetOpt","OptArg") [6,7]) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude","++") [Var 2,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '['),Comb ConsCall ("Prelude",":") [Lit (Charc  '='),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude","++") [Var 7,Comb ConsCall ("Prelude",":") [Lit (Charc  ']'),Comb ConsCall ("Prelude","[]") []]]]]])])),Func ("GetOpt","getOpt") 3 Public (FuncType (TCons ("GetOpt","ArgOrder") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("GetOpt","OptDescr") [TVar 0]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Let [(4,Comb FuncCall ("GetOpt","getOpt'") [Var 1,Var 2,Var 3]),(5,Comb FuncCall ("GetOpt","getOpt._#selFP6#os") [Var 4]),(6,Comb FuncCall ("GetOpt","getOpt._#selFP7#xs") [Var 4]),(7,Comb FuncCall ("GetOpt","getOpt._#selFP8#us") [Var 4]),(8,Comb FuncCall ("GetOpt","getOpt._#selFP9#es") [Var 4])] (Comb ConsCall ("Prelude","(,,)") [Var 5,Var 6,Comb FuncCall ("Prelude","++") [Var 8,Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("GetOpt","errUnrec") [],Var 7]]]))),Func ("GetOpt","getOpt._#selFP6#os") 1 Private (FuncType (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TVar 471],TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TVar 471])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,,)") [2,3,4,5]) (Var 2)])),Func ("GetOpt","getOpt._#selFP7#xs") 1 Private (FuncType (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TVar 471],TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,,)") [2,3,4,5]) (Var 3)])),Func ("GetOpt","getOpt._#selFP8#us") 1 Private (FuncType (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TVar 471],TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,,)") [2,3,4,5]) (Var 4)])),Func ("GetOpt","getOpt._#selFP9#es") 1 Private (FuncType (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TVar 471],TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,,)") [2,3,4,5]) (Var 5)])),Func ("GetOpt","getOpt'") 3 Public (FuncType (TCons ("GetOpt","ArgOrder") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("GetOpt","OptDescr") [TVar 0]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case  Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","(,,,)") [Comb ConsCall ("Prelude","[]") [],Comb ConsCall ("Prelude","[]") [],Comb ConsCall ("Prelude","[]") [],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude",":") [4,5]) (Let [(6,Comb FuncCall ("GetOpt","getNext") [Var 4,Var 5,Var 2]),(7,Comb FuncCall ("GetOpt","getOpt'._#selFP16#opt") [Var 6]),(8,Comb FuncCall ("GetOpt","getOpt'._#selFP17#rest") [Var 6]),(9,Comb FuncCall ("GetOpt","getOpt'") [Var 1,Var 2,Var 8]),(10,Comb FuncCall ("GetOpt","getOpt'._#selFP12#os") [Var 9]),(11,Comb FuncCall ("GetOpt","getOpt'._#selFP13#xs") [Var 9]),(12,Comb FuncCall ("GetOpt","getOpt'._#selFP14#us") [Var 9]),(13,Comb FuncCall ("GetOpt","getOpt'._#selFP15#es") [Var 9])] (Comb FuncCall ("GetOpt","getOpt'.procNextOpt.61") [Var 13,Var 10,Var 8,Var 12,Var 11,Var 7,Var 1]))])),Func ("GetOpt","getOpt'._#selFP16#opt") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("GetOpt","OptKind") [TVar 456],TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("GetOpt","OptKind") [TVar 456])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("GetOpt","getOpt'._#selFP17#rest") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("GetOpt","OptKind") [TVar 456],TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("GetOpt","getOpt'._#selFP12#os") 1 Private (FuncType (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TVar 456],TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TVar 456])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,,)") [2,3,4,5]) (Var 2)])),Func ("GetOpt","getOpt'._#selFP13#xs") 1 Private (FuncType (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TVar 456],TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,,)") [2,3,4,5]) (Var 3)])),Func ("GetOpt","getOpt'._#selFP14#us") 1 Private (FuncType (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TVar 456],TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,,)") [2,3,4,5]) (Var 4)])),Func ("GetOpt","getOpt'._#selFP15#es") 1 Private (FuncType (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TVar 456],TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,,)") [2,3,4,5]) (Var 5)])),Func ("GetOpt","getOpt'.procNextOpt.61") 7 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TVar 456]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("GetOpt","OptKind") [TVar 456]) (FuncType (TCons ("GetOpt","ArgOrder") [TVar 456]) (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TVar 456],TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))))) (Rule [1,2,3,4,5,6,7] (Case  Flex (Var 6) [Branch (Pattern ("GetOpt","Opt") [8]) (Comb ConsCall ("Prelude","(,,,)") [Comb ConsCall ("Prelude",":") [Var 8,Var 2],Var 5,Var 4,Var 1]),Branch (Pattern ("GetOpt","UnreqOpt") [9]) (Comb ConsCall ("Prelude","(,,,)") [Var 2,Var 5,Comb ConsCall ("Prelude",":") [Var 9,Var 4],Var 1]),Branch (Pattern ("GetOpt","NonOpt") [10]) (Case  Flex (Var 7) [Branch (Pattern ("GetOpt","RequireOrder") []) (Comb ConsCall ("Prelude","(,,,)") [Comb ConsCall ("Prelude","[]") [],Comb ConsCall ("Prelude",":") [Var 10,Var 3],Comb ConsCall ("Prelude","[]") [],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("GetOpt","Permute") []) (Comb ConsCall ("Prelude","(,,,)") [Var 2,Comb ConsCall ("Prelude",":") [Var 10,Var 5],Var 4,Var 1]),Branch (Pattern ("GetOpt","ReturnInOrder") [11]) (Comb ConsCall ("Prelude","(,,,)") [Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","apply") [Var 11,Var 10],Var 2],Var 5,Var 4,Var 1])]),Branch (Pattern ("GetOpt","EndOfOpts") []) (Case  Flex (Var 7) [Branch (Pattern ("GetOpt","RequireOrder") []) (Comb ConsCall ("Prelude","(,,,)") [Comb ConsCall ("Prelude","[]") [],Var 3,Comb ConsCall ("Prelude","[]") [],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("GetOpt","Permute") []) (Comb ConsCall ("Prelude","(,,,)") [Comb ConsCall ("Prelude","[]") [],Var 3,Comb ConsCall ("Prelude","[]") [],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("GetOpt","ReturnInOrder") [12]) (Comb ConsCall ("Prelude","(,,,)") [Comb FuncCall ("Prelude","map") [Var 12,Var 3],Comb ConsCall ("Prelude","[]") [],Comb ConsCall ("Prelude","[]") [],Comb ConsCall ("Prelude","[]") []])]),Branch (Pattern ("GetOpt","OptErr") [13]) (Comb ConsCall ("Prelude","(,,,)") [Var 2,Var 5,Var 4,Comb ConsCall ("Prelude",":") [Var 13,Var 1]])])),Func ("GetOpt","getNext") 3 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("GetOpt","OptDescr") [TVar 0]]) (TCons ("Prelude","(,)") [TCons ("GetOpt","OptKind") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case  Rigid (Var 1) [Branch (Pattern ("Prelude",":") [4,5]) (Let [(6,Var 4)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 6,Lit (Charc  '-')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 5) [Branch (Pattern ("Prelude",":") [7,8]) (Let [(9,Var 7)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 9,Lit (Charc  '-')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 8) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("GetOpt","EndOfOpts") [],Var 2]),Branch (Pattern ("Prelude",":") [10,11]) (Comb FuncCall ("GetOpt","longOpt") [Comb ConsCall ("Prelude",":") [Var 10,Var 11],Var 2,Var 3])]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("GetOpt","shortOpt") [Var 9,Var 8,Var 2,Var 3])])),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","failed") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("GetOpt","NonOpt") [Var 1],Var 2])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("GetOpt","NonOpt") [Var 1],Var 2])])),Func ("GetOpt","longOpt") 3 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("GetOpt","OptDescr") [TVar 0]]) (TCons ("Prelude","(,)") [TCons ("GetOpt","OptKind") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Let [(4,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","break") [Comb (FuncPartCall 1) ("Prelude","flip") [Comb (FuncPartCall 2) ("Prelude","==") [],Lit (Charc  '=')]],Var 1]),(5,Comb FuncCall ("GetOpt","longOpt._#selFP19#opt") [Var 4]),(6,Comb FuncCall ("GetOpt","longOpt._#selFP20#arg") [Var 4]),(7,Comb FuncCall ("GetOpt","longOpt.getWith.99") [Var 5,Var 3,Comb (FuncPartCall 2) ("Prelude","==") []]),(8,Case  Rigid (Comb FuncCall ("Prelude","null") [Var 7]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("GetOpt","longOpt.getWith.99") [Var 5,Var 3,Comb (FuncPartCall 2) ("List","isPrefixOf") []]),Branch (Pattern ("Prelude","False") []) (Var 7)]),(9,Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("GetOpt","longOpt._#lambda12") [],Comb ConsCall ("Prelude","[]") [],Var 8]),(10,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude","[]") []]],Var 5])] (Comb FuncCall ("GetOpt","longOpt.long.99") [Var 1,Var 10,Var 8,Var 9,Var 6,Var 2]))),Func ("GetOpt","longOpt._#selFP19#opt") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("GetOpt","longOpt._#selFP20#arg") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("GetOpt","longOpt.getWith.99") 3 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("GetOpt","OptDescr") [TVar 173]]) (FuncType (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","Bool") []))) (TCons ("Prelude","[]") [TCons ("GetOpt","OptDescr") [TVar 173]])))) (Rule [1,2,3] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("GetOpt","longOpt.getWith.99._#lambda8") [Var 1,Var 3],Comb ConsCall ("Prelude","[]") [],Var 2])),Func ("GetOpt","longOpt.getWith.99._#lambda8") 4 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","Bool") []))) (FuncType (TCons ("GetOpt","OptDescr") [TVar 173]) (FuncType (TCons ("Prelude","[]") [TCons ("GetOpt","OptDescr") [TVar 173]]) (TCons ("Prelude","[]") [TCons ("GetOpt","OptDescr") [TVar 173]]))))) (Rule [1,2,3,4] (Let [(5,Var 3)] (Case  Rigid (Var 5) [Branch (Pattern ("GetOpt","Option") [6,7,8,9]) (Comb FuncCall ("Prelude","++") [Case  Rigid (Comb FuncCall ("Prelude","/=") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("List","find") [Comb FuncCall ("Prelude","apply") [Var 2,Var 1]],Var 7],Comb ConsCall ("Prelude","Nothing") []]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","[]") [])],Var 4])]))),Func ("GetOpt","longOpt._#lambda12") 2 Private (FuncType (TCons ("GetOpt","OptDescr") [TVar 173]) (FuncType (TCons ("Prelude","[]") [TCons ("GetOpt","ArgDescr") [TVar 173]]) (TCons ("Prelude","[]") [TCons ("GetOpt","ArgDescr") [TVar 173]]))) (Rule [1,2] (Case  Rigid (Var 1) [Branch (Pattern ("GetOpt","Option") [3,4,5,6]) (Comb ConsCall ("Prelude",":") [Var 5,Var 2])])),Func ("GetOpt","longOpt.long.99") 6 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("GetOpt","OptDescr") [TVar 173]]) (FuncType (TCons ("Prelude","[]") [TCons ("GetOpt","ArgDescr") [TVar 173]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","(,)") [TCons ("GetOpt","OptKind") [TVar 173],TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))))) (Rule [1,2,3,4,5,6] (Case  Flex (Var 4) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("GetOpt","UnreqOpt") [Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude","[]") []]],Var 1]],Var 6]),Branch (Pattern ("Prelude",":") [7,8]) (Case  Flex (Var 8) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 7) [Branch (Pattern ("GetOpt","NoArg") [9]) (Case  Flex (Var 5) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("GetOpt","Opt") [Var 9],Var 6]),Branch (Pattern ("Prelude",":") [10,11]) (Case  Flex (Var 10) [Branch (LPattern (Charc  '=')) (Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("GetOpt","errNoArg") [Var 2],Var 6])])]),Branch (Pattern ("GetOpt","ReqArg") [12,13]) (Case  Flex (Var 5) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 6) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("GetOpt","errReq") [Var 13,Var 2],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude",":") [14,15]) (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("GetOpt","Opt") [Comb FuncCall ("Prelude","apply") [Var 12,Var 14]],Var 15])]),Branch (Pattern ("Prelude",":") [16,17]) (Case  Flex (Var 16) [Branch (LPattern (Charc  '=')) (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("GetOpt","Opt") [Comb FuncCall ("Prelude","apply") [Var 12,Var 17]],Var 6])])]),Branch (Pattern ("GetOpt","OptArg") [18,19]) (Case  Flex (Var 5) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("GetOpt","Opt") [Comb FuncCall ("Prelude","apply") [Var 18,Comb ConsCall ("Prelude","Nothing") []]],Var 6]),Branch (Pattern ("Prelude",":") [20,21]) (Case  Flex (Var 20) [Branch (LPattern (Charc  '=')) (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("GetOpt","Opt") [Comb FuncCall ("Prelude","apply") [Var 18,Comb ConsCall ("Prelude","Just") [Var 21]]],Var 6])])])]),Branch (Pattern ("Prelude",":") [22,23]) (Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("GetOpt","errAmbig") [Var 3,Var 2],Var 6])])])),Func ("GetOpt","shortOpt") 4 Private (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("GetOpt","OptDescr") [TVar 0]]) (TCons ("Prelude","(,)") [TCons ("GetOpt","OptKind") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [1,2,3,4] (Let [(5,Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("GetOpt","shortOpt._#lambda16") [Var 1],Comb ConsCall ("Prelude","[]") [],Var 4]),(6,Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("GetOpt","shortOpt._#lambda21") [],Comb ConsCall ("Prelude","[]") [],Var 5]),(7,Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Var 1,Comb ConsCall ("Prelude","[]") []]])] (Comb FuncCall ("GetOpt","shortOpt.short.146") [Var 7,Var 5,Var 6,Var 2,Var 3]))),Func ("GetOpt","shortOpt._#lambda16") 3 Private (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("GetOpt","OptDescr") [TVar 272]) (FuncType (TCons ("Prelude","[]") [TCons ("GetOpt","OptDescr") [TVar 272]]) (TCons ("Prelude","[]") [TCons ("GetOpt","OptDescr") [TVar 272]])))) (Rule [1,2,3] (Let [(4,Var 2)] (Case  Rigid (Var 4) [Branch (Pattern ("GetOpt","Option") [5,6,7,8]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","concatMap") [Comb (FuncPartCall 1) ("GetOpt","shortOpt._#lambda16._#lambda18") [Var 4,Var 1]],Var 5],Var 3])]))),Func ("GetOpt","shortOpt._#lambda16._#lambda18") 3 Private (FuncType (TCons ("GetOpt","OptDescr") [TVar 272]) (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","[]") [TCons ("GetOpt","OptDescr") [TVar 272]])))) (Rule [1,2,3] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 2,Var 3]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Var 1,Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","[]") [])])),Func ("GetOpt","shortOpt._#lambda21") 2 Private (FuncType (TCons ("GetOpt","OptDescr") [TVar 272]) (FuncType (TCons ("Prelude","[]") [TCons ("GetOpt","ArgDescr") [TVar 272]]) (TCons ("Prelude","[]") [TCons ("GetOpt","ArgDescr") [TVar 272]]))) (Rule [1,2] (Case  Rigid (Var 1) [Branch (Pattern ("GetOpt","Option") [3,4,5,6]) (Comb ConsCall ("Prelude",":") [Var 5,Var 2])])),Func ("GetOpt","shortOpt.short.146") 5 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("GetOpt","OptDescr") [TVar 272]]) (FuncType (TCons ("Prelude","[]") [TCons ("GetOpt","ArgDescr") [TVar 272]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","(,)") [TCons ("GetOpt","OptKind") [TVar 272],TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))) (Rule [1,2,3,4,5] (Case  Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 4) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("GetOpt","UnreqOpt") [Var 1],Var 5]),Branch (Pattern ("Prelude",":") [6,7]) (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("GetOpt","UnreqOpt") [Var 1],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Var 4],Var 5]])]),Branch (Pattern ("Prelude",":") [8,9]) (Case  Flex (Var 9) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 8) [Branch (Pattern ("GetOpt","NoArg") [10]) (Case  Flex (Var 4) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("GetOpt","Opt") [Var 10],Var 5]),Branch (Pattern ("Prelude",":") [11,12]) (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("GetOpt","Opt") [Var 10],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Var 4],Var 5]])]),Branch (Pattern ("GetOpt","ReqArg") [13,14]) (Case  Flex (Var 4) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 5) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("GetOpt","errReq") [Var 14,Var 1],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude",":") [15,16]) (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("GetOpt","Opt") [Comb FuncCall ("Prelude","apply") [Var 13,Var 15]],Var 16])]),Branch (Pattern ("Prelude",":") [17,18]) (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("GetOpt","Opt") [Comb FuncCall ("Prelude","apply") [Var 13,Var 4]],Var 5])]),Branch (Pattern ("GetOpt","OptArg") [19,20]) (Case  Flex (Var 4) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("GetOpt","Opt") [Comb FuncCall ("Prelude","apply") [Var 19,Comb ConsCall ("Prelude","Nothing") []]],Var 5]),Branch (Pattern ("Prelude",":") [21,22]) (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("GetOpt","Opt") [Comb FuncCall ("Prelude","apply") [Var 19,Comb ConsCall ("Prelude","Just") [Var 4]]],Var 5])])]),Branch (Pattern ("Prelude",":") [23,24]) (Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("GetOpt","errAmbig") [Var 2,Var 1],Var 5])])])),Func ("GetOpt","errAmbig") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("GetOpt","OptDescr") [TVar 0]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("GetOpt","OptKind") [TVar 0]))) (Rule [1,2] (Let [(3,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '`'),Comb ConsCall ("Prelude","[]") []]]]]]]]],Comb FuncCall ("Prelude","++") [Var 2,Comb ConsCall ("Prelude",":") [Lit (Charc  '\''),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'b'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  ';'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'b'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])] (Comb ConsCall ("GetOpt","OptErr") [Comb FuncCall ("GetOpt","usageInfo") [Var 3,Var 1]]))),Func ("GetOpt","errReq") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("GetOpt","OptKind") [TVar 0]))) (Rule [1,2] (Comb ConsCall ("GetOpt","OptErr") [Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '`'),Comb ConsCall ("Prelude","[]") []]]]]]]]],Comb FuncCall ("Prelude","++") [Var 2,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '\''),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'q'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]],Comb FuncCall ("Prelude","++") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude","[]") []]]]]]])),Func ("GetOpt","errUnrec") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'z'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '`'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]],Comb FuncCall ("Prelude","++") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc  '\''),Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude","[]") []]]]])),Func ("GetOpt","errNoArg") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("GetOpt","OptKind") [TVar 0])) (Rule [1] (Comb ConsCall ("GetOpt","OptErr") [Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '`'),Comb ConsCall ("Prelude","[]") []]]]]]]]],Comb FuncCall ("Prelude","++") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc  '\''),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  '\''),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]))] []