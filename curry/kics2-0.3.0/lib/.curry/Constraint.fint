Prog "Constraint" ["Prelude"] [] [Func ("Constraint","<:") 2 Public (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Success") []))) (Rule [] (Var 0)),Func ("Constraint",">:") 2 Public (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Success") []))) (Rule [] (Var 0)),Func ("Constraint","<=:") 2 Public (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Success") []))) (Rule [] (Var 0)),Func ("Constraint",">=:") 2 Public (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Success") []))) (Rule [] (Var 0)),Func ("Constraint","andC") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Success") []]) (TCons ("Prelude","Success") [])) (Rule [] (Var 0)),Func ("Constraint","orC") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Success") []]) (TCons ("Prelude","Success") [])) (Rule [] (Var 0)),Func ("Constraint","allC") 1 Public (FuncType (FuncType (TVar 0) (TCons ("Prelude","Success") [])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","Success") []))) (Rule [] (Var 0)),Func ("Constraint","anyC") 1 Public (FuncType (FuncType (TVar 0) (TCons ("Prelude","Success") [])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","Success") []))) (Rule [] (Var 0))] [Op ("Constraint","<:") InfixOp 4,Op ("Constraint",">:") InfixOp 4,Op ("Constraint","<=:") InfixOp 4,Op ("Constraint",">=:") InfixOp 4]