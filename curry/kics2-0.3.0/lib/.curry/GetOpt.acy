CurryProg "GetOpt"
 ["Prelude","List"]
 [CType ("GetOpt","ArgOrder") Public [(0,"a")] [CCons ("GetOpt","RequireOrder") 0 Public [],CCons ("GetOpt","Permute") 0 Public [],CCons ("GetOpt","ReturnInOrder") 1 Public [CFuncType (CTCons ("Prelude","String") []) (CTVar (0,"a"))]],
  CType ("GetOpt","OptDescr") Public [(0,"a")] [CCons ("GetOpt","Option") 4 Public [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","String") []],CTCons ("GetOpt","ArgDescr") [CTVar (0,"a")],CTCons ("Prelude","String") []]],
  CType ("GetOpt","ArgDescr") Public [(0,"a")] [CCons ("GetOpt","NoArg") 1 Public [CTVar (0,"a")],CCons ("GetOpt","ReqArg") 2 Public [CFuncType (CTCons ("Prelude","String") []) (CTVar (0,"a")),CTCons ("Prelude","String") []],CCons ("GetOpt","OptArg") 2 Public [CFuncType (CTCons ("Prelude","Maybe") [CTCons ("Prelude","String") []]) (CTVar (0,"a")),CTCons ("Prelude","String") []]],
  CType ("GetOpt","OptKind") Private [(0,"a")] [CCons ("GetOpt","Opt") 1 Private [CTVar (0,"a")],CCons ("GetOpt","UnreqOpt") 1 Private [CTCons ("Prelude","String") []],CCons ("GetOpt","NonOpt") 1 Private [CTCons ("Prelude","String") []],CCons ("GetOpt","EndOfOpts") 0 Private [],CCons ("GetOpt","OptErr") 1 Private [CTCons ("Prelude","String") []]]]
 [CFunc ("GetOpt","usageInfo") 2 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("GetOpt","OptDescr") [CTVar (0,"a")]]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]))) (CRules CFlex [CRule [CPVar (0,"header"),CPVar (1,"optDescr")] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Prelude","unlines")) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (0,"header"))) (CVar (5,"table"))))] [CLocalPat (CPComb ("Prelude","(,,)") [CPVar (2,"ss"),CPVar (3,"ls"),CPVar (4,"ds")]) (CApply (CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Prelude","unzip3"))) (CApply (CSymbol ("Prelude","concatMap")) (CSymbol ("GetOpt","fmtOpt")))) (CVar (1,"optDescr"))) [],CLocalPat (CPVar (5,"table")) (CApply (CApply (CApply (CApply (CSymbol ("Prelude","zipWith3")) (CSymbol ("GetOpt","paste"))) (CApply (CSymbol ("GetOpt","sameLen")) (CVar (2,"ss")))) (CApply (CSymbol ("GetOpt","sameLen")) (CVar (3,"ls")))) (CVar (4,"ds"))) [],CLocalFunc (CFunc ("GetOpt","paste") 3 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])))) (CRules CFlex [CRule [CPVar (6,"x"),CPVar (7,"y"),CPVar (8,"z")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]"))))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (6,"x"))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]"))))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (7,"y"))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]"))))) (CVar (8,"z")))))))] []])),CLocalFunc (CFunc ("GetOpt","sameLen") 1 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]) (CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]])) (CRules CFlex [CRule [CPVar (6,"xs")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("GetOpt","flushLeft")) (CApply (CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("GetOpt","maximum"))) (CApply (CSymbol ("Prelude","map")) (CSymbol ("Prelude","length")))) (CVar (6,"xs")))) (CVar (6,"xs")))] []])),CLocalFunc (CFunc ("GetOpt","flushLeft") 2 Private (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]) (CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]))) (CRules CFlex [CRule [CPVar (6,"n"),CPVar (7,"xs")] [(CSymbol ("Prelude","success"),CListComp (CApply (CApply (CSymbol ("Prelude","take")) (CVar (6,"n"))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (8,"x"))) (CApply (CSymbol ("Prelude","repeat")) (CLit (CCharc ' '))))) [CSPat (CPVar (8,"x")) (CVar (7,"xs"))])] []]))]]),
  CFunc ("GetOpt","maximum") 1 Private (CFuncType (CTCons ("Prelude","[]") [CTVar (0,"a")]) (CTVar (0,"a"))) (CRules CFlex [CRule [CPComb ("Prelude","[]") []] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Prelude","error")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'x'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'w'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'h'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'y'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CSymbol ("Prelude","[]"))))))))))))))))))))))))))] [],CRule [CPAs (2,"xs") (CPComb ("Prelude",":") [CPVar (0,"_"),CPVar (1,"_")])] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","foldl1")) (CSymbol ("Prelude","max"))) (CVar (2,"xs")))] []]),
  CFunc ("GetOpt","fmtOpt") 1 Private (CFuncType (CTCons ("GetOpt","OptDescr") [CTVar (0,"a")]) (CTCons ("Prelude","[]") [CTCons ("Prelude","(,,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]])) (CRules CFlex [CRule [CPComb ("GetOpt","Option") [CPVar (0,"sos"),CPVar (1,"los"),CPVar (2,"ad"),CPVar (3,"descr")]] [(CSymbol ("Prelude","success"),CCase (CApply (CSymbol ("Prelude","lines")) (CVar (3,"descr"))) [CBranch (CPComb ("Prelude","[]") []) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CApply (CSymbol ("Prelude","(,,)")) (CVar (4,"sosFmt"))) (CVar (5,"losFmt"))) (CSymbol ("Prelude","[]")))) (CSymbol ("Prelude","[]"))),CBranch (CPComb ("Prelude",":") [CPVar (6,"d"),CPVar (7,"ds")]) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CApply (CSymbol ("Prelude","(,,)")) (CVar (4,"sosFmt"))) (CVar (5,"losFmt"))) (CVar (6,"d")))) (CListComp (CApply (CApply (CApply (CSymbol ("Prelude","(,,)")) (CSymbol ("Prelude","[]"))) (CSymbol ("Prelude","[]"))) (CVar (8,"d'"))) [CSPat (CPVar (8,"d'")) (CVar (7,"ds"))]))])] [CLocalFunc (CFunc ("GetOpt","sepBy") 2 Private (CFuncType (CTCons ("Prelude","Char") []) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]))) (CRules CFlex [CRule [CPVar (6,"_"),CPComb ("Prelude","[]") []] [(CSymbol ("Prelude","success"),CSymbol ("Prelude","[]"))] [],CRule [CPVar (7,"_"),CPComb ("Prelude",":") [CPVar (8,"x"),CPComb ("Prelude","[]") []]] [(CSymbol ("Prelude","success"),CVar (8,"x"))] [],CRule [CPVar (9,"ch"),CPComb ("Prelude",":") [CPVar (10,"x"),CPComb ("Prelude",":") [CPVar (11,"y"),CPVar (12,"xs")]]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CVar (10,"x"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (9,"ch"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("GetOpt","sepBy")) (CVar (9,"ch"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (11,"y"))) (CVar (12,"xs")))))))] []])),CLocalPat (CPVar (4,"sosFmt")) (CApply (CApply (CSymbol ("GetOpt","sepBy")) (CLit (CCharc ','))) (CApply (CApply (CSymbol ("Prelude","map")) (CApply (CSymbol ("GetOpt","fmtShort")) (CVar (2,"ad")))) (CVar (0,"sos")))) [],CLocalPat (CPVar (5,"losFmt")) (CApply (CApply (CSymbol ("GetOpt","sepBy")) (CLit (CCharc ','))) (CApply (CApply (CSymbol ("Prelude","map")) (CApply (CSymbol ("GetOpt","fmtLong")) (CVar (2,"ad")))) (CVar (1,"los")))) []]]),
  CFunc ("GetOpt","fmtShort") 2 Private (CFuncType (CTCons ("GetOpt","ArgDescr") [CTVar (0,"a")]) (CFuncType (CTCons ("Prelude","Char") []) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]))) (CRules CFlex [CRule [CPComb ("GetOpt","NoArg") [CPVar (0,"_")],CPVar (1,"so")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '-'))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (1,"so"))) (CSymbol ("Prelude","[]"))))] [],CRule [CPComb ("GetOpt","ReqArg") [CPVar (2,"_"),CPVar (3,"ad")],CPVar (4,"so")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '-'))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (4,"so"))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]")))) (CVar (3,"ad")))))] [],CRule [CPComb ("GetOpt","OptArg") [CPVar (5,"_"),CPVar (6,"ad")],CPVar (7,"so")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '-'))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (7,"so"))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '['))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (6,"ad"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ']'))) (CSymbol ("Prelude","[]")))))))] []]),
  CFunc ("GetOpt","fmtLong") 2 Private (CFuncType (CTCons ("GetOpt","ArgDescr") [CTVar (0,"a")]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]))) (CRules CFlex [CRule [CPComb ("GetOpt","NoArg") [CPVar (0,"_")],CPVar (1,"lo")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '-'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '-'))) (CSymbol ("Prelude","[]"))))) (CVar (1,"lo")))] [],CRule [CPComb ("GetOpt","ReqArg") [CPVar (2,"_"),CPVar (3,"ad")],CPVar (4,"lo")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '-'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '-'))) (CSymbol ("Prelude","[]"))))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (4,"lo"))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '='))) (CSymbol ("Prelude","[]")))) (CVar (3,"ad")))))] [],CRule [CPComb ("GetOpt","OptArg") [CPVar (5,"_"),CPVar (6,"ad")],CPVar (7,"lo")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '-'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '-'))) (CSymbol ("Prelude","[]"))))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (7,"lo"))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '['))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '='))) (CSymbol ("Prelude","[]"))))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (6,"ad"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ']'))) (CSymbol ("Prelude","[]")))))))] []]),
  CFunc ("GetOpt","getOpt") 3 Public (CFuncType (CTCons ("GetOpt","ArgOrder") [CTVar (0,"a")]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("GetOpt","OptDescr") [CTVar (0,"a")]]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]) (CTCons ("Prelude","(,,)") [CTCons ("Prelude","[]") [CTVar (0,"a")],CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]],CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]])))) (CRules CFlex [CRule [CPVar (0,"ordering"),CPVar (1,"optDescr"),CPVar (2,"args")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","(,,)")) (CVar (3,"os"))) (CVar (4,"xs"))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (6,"es"))) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("GetOpt","errUnrec"))) (CVar (5,"us")))))] [CLocalPat (CPComb ("Prelude","(,,,)") [CPVar (3,"os"),CPVar (4,"xs"),CPVar (5,"us"),CPVar (6,"es")]) (CApply (CApply (CApply (CSymbol ("GetOpt","getOpt'")) (CVar (0,"ordering"))) (CVar (1,"optDescr"))) (CVar (2,"args"))) []]]),
  CFunc ("GetOpt","getOpt'") 3 Public (CFuncType (CTCons ("GetOpt","ArgOrder") [CTVar (0,"a")]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("GetOpt","OptDescr") [CTVar (0,"a")]]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]) (CTCons ("Prelude","(,,,)") [CTCons ("Prelude","[]") [CTVar (0,"a")],CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]],CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]],CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]])))) (CRules CFlex [CRule [CPVar (0,"_"),CPVar (1,"_"),CPComb ("Prelude","[]") []] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CSymbol ("Prelude","(,,,)")) (CSymbol ("Prelude","[]"))) (CSymbol ("Prelude","[]"))) (CSymbol ("Prelude","[]"))) (CSymbol ("Prelude","[]")))] [],CRule [CPVar (2,"ordering"),CPVar (3,"optDescr"),CPComb ("Prelude",":") [CPVar (4,"arg"),CPVar (5,"args")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("GetOpt","procNextOpt")) (CVar (6,"opt"))) (CVar (2,"ordering")))] [CLocalFunc (CFunc ("GetOpt","procNextOpt") 2 Private (CFuncType (CTCons ("GetOpt","OptKind") [CTVar (1,"_456")]) (CFuncType (CTCons ("GetOpt","ArgOrder") [CTVar (1,"_456")]) (CTCons ("Prelude","(,,,)") [CTCons ("Prelude","[]") [CTVar (1,"_456")],CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]],CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]],CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]]))) (CRules CFlex [CRule [CPComb ("GetOpt","Opt") [CPVar (12,"o")],CPVar (13,"_")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CSymbol ("Prelude","(,,,)")) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (12,"o"))) (CVar (8,"os")))) (CVar (9,"xs"))) (CVar (10,"us"))) (CVar (11,"es")))] [],CRule [CPComb ("GetOpt","UnreqOpt") [CPVar (14,"u")],CPVar (15,"_")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CSymbol ("Prelude","(,,,)")) (CVar (8,"os"))) (CVar (9,"xs"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (14,"u"))) (CVar (10,"us")))) (CVar (11,"es")))] [],CRule [CPComb ("GetOpt","NonOpt") [CPVar (16,"x")],CPComb ("GetOpt","RequireOrder") []] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CSymbol ("Prelude","(,,,)")) (CSymbol ("Prelude","[]"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (16,"x"))) (CVar (7,"rest")))) (CSymbol ("Prelude","[]"))) (CSymbol ("Prelude","[]")))] [],CRule [CPComb ("GetOpt","NonOpt") [CPVar (17,"x")],CPComb ("GetOpt","Permute") []] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CSymbol ("Prelude","(,,,)")) (CVar (8,"os"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (17,"x"))) (CVar (9,"xs")))) (CVar (10,"us"))) (CVar (11,"es")))] [],CRule [CPComb ("GetOpt","NonOpt") [CPVar (18,"x")],CPComb ("GetOpt","ReturnInOrder") [CPVar (19,"f")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CSymbol ("Prelude","(,,,)")) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CVar (19,"f")) (CVar (18,"x")))) (CVar (8,"os")))) (CVar (9,"xs"))) (CVar (10,"us"))) (CVar (11,"es")))] [],CRule [CPComb ("GetOpt","EndOfOpts") [],CPComb ("GetOpt","RequireOrder") []] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CSymbol ("Prelude","(,,,)")) (CSymbol ("Prelude","[]"))) (CVar (7,"rest"))) (CSymbol ("Prelude","[]"))) (CSymbol ("Prelude","[]")))] [],CRule [CPComb ("GetOpt","EndOfOpts") [],CPComb ("GetOpt","Permute") []] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CSymbol ("Prelude","(,,,)")) (CSymbol ("Prelude","[]"))) (CVar (7,"rest"))) (CSymbol ("Prelude","[]"))) (CSymbol ("Prelude","[]")))] [],CRule [CPComb ("GetOpt","EndOfOpts") [],CPComb ("GetOpt","ReturnInOrder") [CPVar (20,"f")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CSymbol ("Prelude","(,,,)")) (CApply (CApply (CSymbol ("Prelude","map")) (CVar (20,"f"))) (CVar (7,"rest")))) (CSymbol ("Prelude","[]"))) (CSymbol ("Prelude","[]"))) (CSymbol ("Prelude","[]")))] [],CRule [CPComb ("GetOpt","OptErr") [CPVar (21,"e")],CPVar (22,"_")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CSymbol ("Prelude","(,,,)")) (CVar (8,"os"))) (CVar (9,"xs"))) (CVar (10,"us"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (21,"e"))) (CVar (11,"es"))))] []])),CLocalPat (CPComb ("Prelude","(,)") [CPVar (6,"opt"),CPVar (7,"rest")]) (CApply (CApply (CApply (CSymbol ("GetOpt","getNext")) (CVar (4,"arg"))) (CVar (5,"args"))) (CVar (3,"optDescr"))) [],CLocalPat (CPComb ("Prelude","(,,,)") [CPVar (8,"os"),CPVar (9,"xs"),CPVar (10,"us"),CPVar (11,"es")]) (CApply (CApply (CApply (CSymbol ("GetOpt","getOpt'")) (CVar (2,"ordering"))) (CVar (3,"optDescr"))) (CVar (7,"rest"))) []]]),
  CFunc ("GetOpt","getNext") 3 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("GetOpt","OptDescr") [CTVar (0,"a")]]) (CTCons ("Prelude","(,)") [CTCons ("GetOpt","OptKind") [CTVar (0,"a")],CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]])))) (CRules CFlex [CRule [CPVar (0,"s"),CPVar (1,"rest"),CPVar (2,"optDescr")] [(CSymbol ("Prelude","success"),CCase (CVar (0,"s")) [CBranch (CPComb ("Prelude",":") [CPLit (CCharc '-'),CPVar (3,"s'")]) (CCase (CVar (3,"s'")) [CBranch (CPComb ("Prelude",":") [CPLit (CCharc '-'),CPComb ("Prelude","[]") []]) (CApply (CApply (CSymbol ("Prelude","(,)")) (CSymbol ("GetOpt","EndOfOpts"))) (CVar (1,"rest"))),CBranch (CPComb ("Prelude",":") [CPLit (CCharc '-'),CPVar (4,"xs")]) (CApply (CApply (CApply (CSymbol ("GetOpt","longOpt")) (CVar (4,"xs"))) (CVar (1,"rest"))) (CVar (2,"optDescr"))),CBranch (CPComb ("Prelude",":") [CPVar (5,"x"),CPVar (6,"xs")]) (CApply (CApply (CApply (CApply (CSymbol ("GetOpt","shortOpt")) (CVar (5,"x"))) (CVar (6,"xs"))) (CVar (1,"rest"))) (CVar (2,"optDescr")))]),CBranch (CPVar (7,"_")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CSymbol ("GetOpt","NonOpt")) (CVar (0,"s")))) (CVar (1,"rest")))])] []]),
  CFunc ("GetOpt","longOpt") 3 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("GetOpt","OptDescr") [CTVar (0,"a")]]) (CTCons ("Prelude","(,)") [CTCons ("GetOpt","OptKind") [CTVar (0,"a")],CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]])))) (CRules CFlex [CRule [CPVar (0,"ls"),CPVar (1,"rs"),CPVar (2,"optDescr")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("GetOpt","long")) (CVar (7,"ads"))) (CVar (4,"arg"))) (CVar (1,"rs")))] [CLocalPat (CPComb ("Prelude","(,)") [CPVar (3,"opt"),CPVar (4,"arg")]) (CApply (CApply (CSymbol ("Prelude","break")) (CLambda [CPVar (9,"x0")] (CApply (CApply (CSymbol ("Prelude","==")) (CVar (9,"x0"))) (CLit (CCharc '='))))) (CVar (0,"ls"))) [],CLocalFunc (CFunc ("GetOpt","getWith") 1 Private (CFuncType (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","Bool") []))) (CTCons ("Prelude","[]") [CTCons ("GetOpt","OptDescr") [CTVar (1,"_173")]])) (CRules CFlex [CRule [CPVar (10,"p")] [(CSymbol ("Prelude","success"),CListComp (CVar (15,"o")) [CSPat (CPAs (15,"o") (CPComb ("GetOpt","Option") [CPVar (11,"_"),CPVar (12,"xs"),CPVar (13,"_"),CPVar (14,"_")])) (CVar (2,"optDescr")),CSExpr (CApply (CApply (CSymbol ("Prelude","/=")) (CApply (CApply (CSymbol ("List","find")) (CApply (CVar (10,"p")) (CVar (3,"opt")))) (CVar (12,"xs")))) (CSymbol ("Prelude","Nothing")))])] []])),CLocalPat (CPVar (5,"exact")) (CApply (CSymbol ("GetOpt","getWith")) (CSymbol ("Prelude","=="))) [],CLocalPat (CPVar (6,"options")) (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CSymbol ("Prelude","null")) (CVar (5,"exact")))) (CApply (CSymbol ("GetOpt","getWith")) (CSymbol ("List","isPrefixOf")))) (CVar (5,"exact"))) [],CLocalPat (CPVar (7,"ads")) (CListComp (CVar (12,"ad")) [CSPat (CPComb ("GetOpt","Option") [CPVar (10,"_"),CPVar (11,"_"),CPVar (12,"ad"),CPVar (13,"_")]) (CVar (6,"options"))]) [],CLocalPat (CPVar (8,"optStr")) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '-'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '-'))) (CSymbol ("Prelude","[]"))))) (CVar (3,"opt"))) [],CLocalFunc (CFunc ("GetOpt","long") 3 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("GetOpt","ArgDescr") [CTVar (1,"_173")]]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]) (CTCons ("Prelude","(,)") [CTCons ("GetOpt","OptKind") [CTVar (1,"_173")],CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]])))) (CRules CFlex [CRule [CPComb ("Prelude","[]") [],CPVar (14,"_"),CPVar (15,"rest")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CSymbol ("GetOpt","UnreqOpt")) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '-'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '-'))) (CSymbol ("Prelude","[]"))))) (CVar (0,"ls"))))) (CVar (15,"rest")))] [],CRule [CPComb ("Prelude",":") [CPComb ("GetOpt","NoArg") [CPVar (16,"a")],CPComb ("Prelude","[]") []],CPComb ("Prelude","[]") [],CPVar (17,"rest")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CSymbol ("GetOpt","Opt")) (CVar (16,"a")))) (CVar (17,"rest")))] [],CRule [CPComb ("Prelude",":") [CPComb ("GetOpt","NoArg") [CPVar (18,"_")],CPComb ("Prelude","[]") []],CPComb ("Prelude",":") [CPLit (CCharc '='),CPVar (19,"_")],CPVar (20,"rest")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CSymbol ("GetOpt","errNoArg")) (CVar (8,"optStr")))) (CVar (20,"rest")))] [],CRule [CPComb ("Prelude",":") [CPComb ("GetOpt","ReqArg") [CPVar (21,"_"),CPVar (22,"d")],CPComb ("Prelude","[]") []],CPComb ("Prelude","[]") [],CPComb ("Prelude","[]") []] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("GetOpt","errReq")) (CVar (22,"d"))) (CVar (8,"optStr")))) (CSymbol ("Prelude","[]")))] [],CRule [CPComb ("Prelude",":") [CPComb ("GetOpt","ReqArg") [CPVar (23,"f"),CPVar (24,"_")],CPComb ("Prelude","[]") []],CPComb ("Prelude","[]") [],CPComb ("Prelude",":") [CPVar (25,"r"),CPVar (26,"rest")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CSymbol ("GetOpt","Opt")) (CApply (CVar (23,"f")) (CVar (25,"r"))))) (CVar (26,"rest")))] [],CRule [CPComb ("Prelude",":") [CPComb ("GetOpt","ReqArg") [CPVar (27,"f"),CPVar (28,"_")],CPComb ("Prelude","[]") []],CPComb ("Prelude",":") [CPLit (CCharc '='),CPVar (29,"xs")],CPVar (30,"rest")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CSymbol ("GetOpt","Opt")) (CApply (CVar (27,"f")) (CVar (29,"xs"))))) (CVar (30,"rest")))] [],CRule [CPComb ("Prelude",":") [CPComb ("GetOpt","OptArg") [CPVar (31,"f"),CPVar (32,"_")],CPComb ("Prelude","[]") []],CPComb ("Prelude","[]") [],CPVar (33,"rest")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CSymbol ("GetOpt","Opt")) (CApply (CVar (31,"f")) (CSymbol ("Prelude","Nothing"))))) (CVar (33,"rest")))] [],CRule [CPComb ("Prelude",":") [CPComb ("GetOpt","OptArg") [CPVar (34,"f"),CPVar (35,"_")],CPComb ("Prelude","[]") []],CPComb ("Prelude",":") [CPLit (CCharc '='),CPVar (36,"xs")],CPVar (37,"rest")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CSymbol ("GetOpt","Opt")) (CApply (CVar (34,"f")) (CApply (CSymbol ("Prelude","Just")) (CVar (36,"xs")))))) (CVar (37,"rest")))] [],CRule [CPComb ("Prelude",":") [CPVar (38,"_"),CPComb ("Prelude",":") [CPVar (39,"_"),CPVar (40,"_")]],CPVar (41,"_"),CPVar (42,"rest")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("GetOpt","errAmbig")) (CVar (6,"options"))) (CVar (8,"optStr")))) (CVar (42,"rest")))] []]))]]),
  CFunc ("GetOpt","shortOpt") 4 Private (CFuncType (CTCons ("Prelude","Char") []) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("GetOpt","OptDescr") [CTVar (0,"a")]]) (CTCons ("Prelude","(,)") [CTCons ("GetOpt","OptKind") [CTVar (0,"a")],CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]]))))) (CRules CFlex [CRule [CPVar (0,"y"),CPVar (1,"ys"),CPVar (2,"rs"),CPVar (3,"optDescr")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("GetOpt","short")) (CVar (5,"ads"))) (CVar (1,"ys"))) (CVar (2,"rs")))] [CLocalPat (CPVar (4,"options")) (CListComp (CVar (11,"o")) [CSPat (CPAs (11,"o") (CPComb ("GetOpt","Option") [CPVar (7,"ss"),CPVar (8,"_"),CPVar (9,"_"),CPVar (10,"_")])) (CVar (3,"optDescr")),CSPat (CPVar (12,"s")) (CVar (7,"ss")),CSExpr (CApply (CApply (CSymbol ("Prelude","==")) (CVar (0,"y"))) (CVar (12,"s")))]) [],CLocalPat (CPVar (5,"ads")) (CListComp (CVar (15,"ad")) [CSPat (CPComb ("GetOpt","Option") [CPVar (13,"_"),CPVar (14,"_"),CPVar (15,"ad"),CPVar (16,"_")]) (CVar (4,"options"))]) [],CLocalPat (CPVar (6,"optStr")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '-'))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (0,"y"))) (CSymbol ("Prelude","[]")))) [],CLocalFunc (CFunc ("GetOpt","short") 3 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("GetOpt","ArgDescr") [CTVar (1,"_272")]]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]) (CTCons ("Prelude","(,)") [CTCons ("GetOpt","OptKind") [CTVar (1,"_272")],CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]])))) (CRules CFlex [CRule [CPComb ("Prelude","[]") [],CPComb ("Prelude","[]") [],CPVar (17,"rest")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CSymbol ("GetOpt","UnreqOpt")) (CVar (6,"optStr")))) (CVar (17,"rest")))] [],CRule [CPComb ("Prelude","[]") [],CPAs (20,"xs") (CPComb ("Prelude",":") [CPVar (18,"_"),CPVar (19,"_")]),CPVar (21,"rest")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CSymbol ("GetOpt","UnreqOpt")) (CVar (6,"optStr")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '-'))) (CVar (20,"xs")))) (CVar (21,"rest"))))] [],CRule [CPComb ("Prelude",":") [CPComb ("GetOpt","NoArg") [CPVar (22,"a")],CPComb ("Prelude","[]") []],CPComb ("Prelude","[]") [],CPVar (23,"rest")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CSymbol ("GetOpt","Opt")) (CVar (22,"a")))) (CVar (23,"rest")))] [],CRule [CPComb ("Prelude",":") [CPComb ("GetOpt","NoArg") [CPVar (24,"a")],CPComb ("Prelude","[]") []],CPAs (27,"xs") (CPComb ("Prelude",":") [CPVar (25,"_"),CPVar (26,"_")]),CPVar (28,"rest")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CSymbol ("GetOpt","Opt")) (CVar (24,"a")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '-'))) (CVar (27,"xs")))) (CVar (28,"rest"))))] [],CRule [CPComb ("Prelude",":") [CPComb ("GetOpt","ReqArg") [CPVar (29,"_"),CPVar (30,"d")],CPComb ("Prelude","[]") []],CPComb ("Prelude","[]") [],CPComb ("Prelude","[]") []] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("GetOpt","errReq")) (CVar (30,"d"))) (CVar (6,"optStr")))) (CSymbol ("Prelude","[]")))] [],CRule [CPComb ("Prelude",":") [CPComb ("GetOpt","ReqArg") [CPVar (31,"f"),CPVar (32,"_")],CPComb ("Prelude","[]") []],CPComb ("Prelude","[]") [],CPComb ("Prelude",":") [CPVar (33,"r"),CPVar (34,"rest")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CSymbol ("GetOpt","Opt")) (CApply (CVar (31,"f")) (CVar (33,"r"))))) (CVar (34,"rest")))] [],CRule [CPComb ("Prelude",":") [CPComb ("GetOpt","ReqArg") [CPVar (35,"f"),CPVar (36,"_")],CPComb ("Prelude","[]") []],CPAs (39,"xs") (CPComb ("Prelude",":") [CPVar (37,"_"),CPVar (38,"_")]),CPVar (40,"rest")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CSymbol ("GetOpt","Opt")) (CApply (CVar (35,"f")) (CVar (39,"xs"))))) (CVar (40,"rest")))] [],CRule [CPComb ("Prelude",":") [CPComb ("GetOpt","OptArg") [CPVar (41,"f"),CPVar (42,"_")],CPComb ("Prelude","[]") []],CPComb ("Prelude","[]") [],CPVar (43,"rest")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CSymbol ("GetOpt","Opt")) (CApply (CVar (41,"f")) (CSymbol ("Prelude","Nothing"))))) (CVar (43,"rest")))] [],CRule [CPComb ("Prelude",":") [CPComb ("GetOpt","OptArg") [CPVar (44,"f"),CPVar (45,"_")],CPComb ("Prelude","[]") []],CPAs (48,"xs") (CPComb ("Prelude",":") [CPVar (46,"_"),CPVar (47,"_")]),CPVar (49,"rest")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CSymbol ("GetOpt","Opt")) (CApply (CVar (44,"f")) (CApply (CSymbol ("Prelude","Just")) (CVar (48,"xs")))))) (CVar (49,"rest")))] [],CRule [CPComb ("Prelude",":") [CPVar (50,"_"),CPComb ("Prelude",":") [CPVar (51,"_"),CPVar (52,"_")]],CPVar (53,"_"),CPVar (54,"rest")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("GetOpt","errAmbig")) (CVar (4,"options"))) (CVar (6,"optStr")))) (CVar (54,"rest")))] []]))]]),
  CFunc ("GetOpt","errAmbig") 2 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("GetOpt","OptDescr") [CTVar (0,"a")]]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("GetOpt","OptKind") [CTVar (0,"a")]))) (CRules CFlex [CRule [CPVar (0,"ods"),CPVar (1,"optStr")] [(CSymbol ("Prelude","success"),CApply (CSymbol ("GetOpt","OptErr")) (CApply (CApply (CSymbol ("GetOpt","usageInfo")) (CVar (2,"header"))) (CVar (0,"ods"))))] [CLocalPat (CPVar (2,"header")) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '`'))) (CSymbol ("Prelude","[]"))))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (1,"optStr"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\''))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'b'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'g'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ';'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'b'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'f'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ':'))) (CSymbol ("Prelude","[]")))))))))))))))))))))))))))))))))))) []]]),
  CFunc ("GetOpt","errReq") 2 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("GetOpt","OptKind") [CTVar (0,"a")]))) (CRules CFlex [CRule [CPVar (0,"d"),CPVar (1,"optStr")] [(CSymbol ("Prelude","success"),CApply (CSymbol ("GetOpt","OptErr")) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '`'))) (CSymbol ("Prelude","[]"))))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (1,"optStr"))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\''))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'q'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'g'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]")))))))))))))))))))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (0,"d"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CSymbol ("Prelude","[]"))))))))] []]),
  CFunc ("GetOpt","errUnrec") 1 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CRules CFlex [CRule [CPVar (0,"optStr")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'g'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'z'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '`'))) (CSymbol ("Prelude","[]")))))))))))))))))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (0,"optStr"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\''))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CSymbol ("Prelude","[]"))))))] []]),
  CFunc ("GetOpt","errNoArg") 1 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("GetOpt","OptKind") [CTVar (0,"a")])) (CRules CFlex [CRule [CPVar (0,"optStr")] [(CSymbol ("Prelude","success"),CApply (CSymbol ("GetOpt","OptErr")) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '`'))) (CSymbol ("Prelude","[]"))))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (0,"optStr"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\''))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\''))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'w'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'g'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CSymbol ("Prelude","[]")))))))))))))))))))))))))))))))))] []])]
 []
