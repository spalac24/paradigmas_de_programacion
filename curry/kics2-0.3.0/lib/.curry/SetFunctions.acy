CurryProg "SetFunctions"
 ["Prelude","Sort","SearchTree","List"]
 [CType ("SetFunctions","Values") Public [(0,"a")] [CCons ("SetFunctions","Values") 1 Public [CTCons ("Prelude","[]") [CTVar (0,"a")]]]]
 [CFunc ("SetFunctions","set0") 1 Public (CFuncType (CTVar (0,"a")) (CTCons ("SetFunctions","Values") [CTVar (0,"a")])) (CRules CFlex [CRule [CPVar (0,"f")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("SetFunctions","set0With")) (CSymbol ("SearchTree","dfsStrategy"))) (CVar (0,"f")))] []]),
  CFunc ("SetFunctions","set0With") 2 Public (CFuncType (CFuncType (CTCons ("SearchTree","SearchTree") [CTVar (0,"a")]) (CTCons ("ValueSequence","ValueSequence") [CTVar (0,"a")])) (CFuncType (CTVar (0,"a")) (CTCons ("SetFunctions","Values") [CTVar (0,"a")]))) (CRules CFlex [CRule [CPVar (0,"s"),CPVar (1,"f")] [(CSymbol ("Prelude","success"),CApply (CSymbol ("SetFunctions","Values")) (CApply (CSymbol ("ValueSequence","vsToList")) (CApply (CVar (0,"s")) (CApply (CSymbol ("SearchTree","someSearchTree")) (CVar (1,"f"))))))] []]),
  CFunc ("SetFunctions","set1") 2 Public (CFuncType (CFuncType (CTVar (0,"a")) (CTVar (1,"b"))) (CFuncType (CTVar (0,"a")) (CTCons ("SetFunctions","Values") [CTVar (1,"b")]))) (CRules CFlex [CRule [CPVar (0,"f"),CPVar (1,"x")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("SetFunctions","set1With")) (CSymbol ("SearchTree","dfsStrategy"))) (CVar (0,"f"))) (CVar (1,"x")))] []]),
  CFunc ("SetFunctions","set1With") 3 Public (CFuncType (CFuncType (CTCons ("SearchTree","SearchTree") [CTVar (0,"a")]) (CTCons ("ValueSequence","ValueSequence") [CTVar (0,"a")])) (CFuncType (CFuncType (CTVar (1,"b")) (CTVar (0,"a"))) (CFuncType (CTVar (1,"b")) (CTCons ("SetFunctions","Values") [CTVar (0,"a")])))) (CRules CFlex [CRule [CPVar (0,"s"),CPVar (1,"f"),CPVar (2,"x")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("SetFunctions","allVs")) (CVar (0,"s"))) (CLambda [CPVar (3,"_")] (CApply (CVar (1,"f")) (CVar (2,"x")))))] []]),
  CFunc ("SetFunctions","set2") 3 Public (CFuncType (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (1,"b")) (CTVar (2,"c")))) (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (1,"b")) (CTCons ("SetFunctions","Values") [CTVar (2,"c")])))) (CRules CFlex [CRule [CPVar (0,"f"),CPVar (1,"x1"),CPVar (2,"x2")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CSymbol ("SetFunctions","set2With")) (CSymbol ("SearchTree","dfsStrategy"))) (CVar (0,"f"))) (CVar (1,"x1"))) (CVar (2,"x2")))] []]),
  CFunc ("SetFunctions","set2With") 4 Public (CFuncType (CFuncType (CTCons ("SearchTree","SearchTree") [CTVar (0,"a")]) (CTCons ("ValueSequence","ValueSequence") [CTVar (0,"a")])) (CFuncType (CFuncType (CTVar (1,"b")) (CFuncType (CTVar (2,"c")) (CTVar (0,"a")))) (CFuncType (CTVar (1,"b")) (CFuncType (CTVar (2,"c")) (CTCons ("SetFunctions","Values") [CTVar (0,"a")]))))) (CRules CFlex [CRule [CPVar (0,"s"),CPVar (1,"f"),CPVar (2,"x1"),CPVar (3,"x2")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("SetFunctions","allVs")) (CVar (0,"s"))) (CLambda [CPVar (4,"_")] (CApply (CApply (CVar (1,"f")) (CVar (2,"x1"))) (CVar (3,"x2")))))] []]),
  CFunc ("SetFunctions","set3") 4 Public (CFuncType (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (1,"b")) (CFuncType (CTVar (2,"c")) (CTVar (3,"d"))))) (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (1,"b")) (CFuncType (CTVar (2,"c")) (CTCons ("SetFunctions","Values") [CTVar (3,"d")]))))) (CRules CFlex [CRule [CPVar (0,"f"),CPVar (1,"x1"),CPVar (2,"x2"),CPVar (3,"x3")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CApply (CSymbol ("SetFunctions","set3With")) (CSymbol ("SearchTree","dfsStrategy"))) (CVar (0,"f"))) (CVar (1,"x1"))) (CVar (2,"x2"))) (CVar (3,"x3")))] []]),
  CFunc ("SetFunctions","set3With") 5 Public (CFuncType (CFuncType (CTCons ("SearchTree","SearchTree") [CTVar (0,"a")]) (CTCons ("ValueSequence","ValueSequence") [CTVar (0,"a")])) (CFuncType (CFuncType (CTVar (1,"b")) (CFuncType (CTVar (2,"c")) (CFuncType (CTVar (3,"d")) (CTVar (0,"a"))))) (CFuncType (CTVar (1,"b")) (CFuncType (CTVar (2,"c")) (CFuncType (CTVar (3,"d")) (CTCons ("SetFunctions","Values") [CTVar (0,"a")])))))) (CRules CFlex [CRule [CPVar (0,"s"),CPVar (1,"f"),CPVar (2,"x1"),CPVar (3,"x2"),CPVar (4,"x3")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("SetFunctions","allVs")) (CVar (0,"s"))) (CLambda [CPVar (5,"_")] (CApply (CApply (CApply (CVar (1,"f")) (CVar (2,"x1"))) (CVar (3,"x2"))) (CVar (4,"x3")))))] []]),
  CFunc ("SetFunctions","set4") 5 Public (CFuncType (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (1,"b")) (CFuncType (CTVar (2,"c")) (CFuncType (CTVar (3,"d")) (CTVar (4,"e")))))) (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (1,"b")) (CFuncType (CTVar (2,"c")) (CFuncType (CTVar (3,"d")) (CTCons ("SetFunctions","Values") [CTVar (4,"e")])))))) (CRules CFlex [CRule [CPVar (0,"f"),CPVar (1,"x1"),CPVar (2,"x2"),CPVar (3,"x3"),CPVar (4,"x4")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CApply (CApply (CSymbol ("SetFunctions","set4With")) (CSymbol ("SearchTree","dfsStrategy"))) (CVar (0,"f"))) (CVar (1,"x1"))) (CVar (2,"x2"))) (CVar (3,"x3"))) (CVar (4,"x4")))] []]),
  CFunc ("SetFunctions","set4With") 6 Public (CFuncType (CFuncType (CTCons ("SearchTree","SearchTree") [CTVar (0,"a")]) (CTCons ("ValueSequence","ValueSequence") [CTVar (0,"a")])) (CFuncType (CFuncType (CTVar (1,"b")) (CFuncType (CTVar (2,"c")) (CFuncType (CTVar (3,"d")) (CFuncType (CTVar (4,"e")) (CTVar (0,"a")))))) (CFuncType (CTVar (1,"b")) (CFuncType (CTVar (2,"c")) (CFuncType (CTVar (3,"d")) (CFuncType (CTVar (4,"e")) (CTCons ("SetFunctions","Values") [CTVar (0,"a")]))))))) (CRules CFlex [CRule [CPVar (0,"s"),CPVar (1,"f"),CPVar (2,"x1"),CPVar (3,"x2"),CPVar (4,"x3"),CPVar (5,"x4")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("SetFunctions","allVs")) (CVar (0,"s"))) (CLambda [CPVar (6,"_")] (CApply (CApply (CApply (CApply (CVar (1,"f")) (CVar (2,"x1"))) (CVar (3,"x2"))) (CVar (4,"x3"))) (CVar (5,"x4")))))] []]),
  CFunc ("SetFunctions","set5") 6 Public (CFuncType (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (1,"b")) (CFuncType (CTVar (2,"c")) (CFuncType (CTVar (3,"d")) (CFuncType (CTVar (4,"e")) (CTVar (5,"f"))))))) (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (1,"b")) (CFuncType (CTVar (2,"c")) (CFuncType (CTVar (3,"d")) (CFuncType (CTVar (4,"e")) (CTCons ("SetFunctions","Values") [CTVar (5,"f")]))))))) (CRules CFlex [CRule [CPVar (0,"f"),CPVar (1,"x1"),CPVar (2,"x2"),CPVar (3,"x3"),CPVar (4,"x4"),CPVar (5,"x5")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CApply (CApply (CApply (CSymbol ("SetFunctions","set5With")) (CSymbol ("SearchTree","dfsStrategy"))) (CVar (0,"f"))) (CVar (1,"x1"))) (CVar (2,"x2"))) (CVar (3,"x3"))) (CVar (4,"x4"))) (CVar (5,"x5")))] []]),
  CFunc ("SetFunctions","set5With") 7 Public (CFuncType (CFuncType (CTCons ("SearchTree","SearchTree") [CTVar (0,"a")]) (CTCons ("ValueSequence","ValueSequence") [CTVar (0,"a")])) (CFuncType (CFuncType (CTVar (1,"b")) (CFuncType (CTVar (2,"c")) (CFuncType (CTVar (3,"d")) (CFuncType (CTVar (4,"e")) (CFuncType (CTVar (5,"f")) (CTVar (0,"a"))))))) (CFuncType (CTVar (1,"b")) (CFuncType (CTVar (2,"c")) (CFuncType (CTVar (3,"d")) (CFuncType (CTVar (4,"e")) (CFuncType (CTVar (5,"f")) (CTCons ("SetFunctions","Values") [CTVar (0,"a")])))))))) (CRules CFlex [CRule [CPVar (0,"s"),CPVar (1,"f"),CPVar (2,"x1"),CPVar (3,"x2"),CPVar (4,"x3"),CPVar (5,"x4"),CPVar (6,"x5")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("SetFunctions","allVs")) (CVar (0,"s"))) (CLambda [CPVar (7,"_")] (CApply (CApply (CApply (CApply (CApply (CVar (1,"f")) (CVar (2,"x1"))) (CVar (3,"x2"))) (CVar (4,"x3"))) (CVar (5,"x4"))) (CVar (6,"x5")))))] []]),
  CFunc ("SetFunctions","set6") 7 Public (CFuncType (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (1,"b")) (CFuncType (CTVar (2,"c")) (CFuncType (CTVar (3,"d")) (CFuncType (CTVar (4,"e")) (CFuncType (CTVar (5,"f")) (CTVar (6,"g")))))))) (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (1,"b")) (CFuncType (CTVar (2,"c")) (CFuncType (CTVar (3,"d")) (CFuncType (CTVar (4,"e")) (CFuncType (CTVar (5,"f")) (CTCons ("SetFunctions","Values") [CTVar (6,"g")])))))))) (CRules CFlex [CRule [CPVar (0,"f"),CPVar (1,"x1"),CPVar (2,"x2"),CPVar (3,"x3"),CPVar (4,"x4"),CPVar (5,"x5"),CPVar (6,"x6")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CSymbol ("SetFunctions","set6With")) (CSymbol ("SearchTree","dfsStrategy"))) (CVar (0,"f"))) (CVar (1,"x1"))) (CVar (2,"x2"))) (CVar (3,"x3"))) (CVar (4,"x4"))) (CVar (5,"x5"))) (CVar (6,"x6")))] []]),
  CFunc ("SetFunctions","set6With") 8 Public (CFuncType (CFuncType (CTCons ("SearchTree","SearchTree") [CTVar (0,"a")]) (CTCons ("ValueSequence","ValueSequence") [CTVar (0,"a")])) (CFuncType (CFuncType (CTVar (1,"b")) (CFuncType (CTVar (2,"c")) (CFuncType (CTVar (3,"d")) (CFuncType (CTVar (4,"e")) (CFuncType (CTVar (5,"f")) (CFuncType (CTVar (6,"g")) (CTVar (0,"a")))))))) (CFuncType (CTVar (1,"b")) (CFuncType (CTVar (2,"c")) (CFuncType (CTVar (3,"d")) (CFuncType (CTVar (4,"e")) (CFuncType (CTVar (5,"f")) (CFuncType (CTVar (6,"g")) (CTCons ("SetFunctions","Values") [CTVar (0,"a")]))))))))) (CRules CFlex [CRule [CPVar (0,"s"),CPVar (1,"f"),CPVar (2,"x1"),CPVar (3,"x2"),CPVar (4,"x3"),CPVar (5,"x4"),CPVar (6,"x5"),CPVar (7,"x6")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("SetFunctions","allVs")) (CVar (0,"s"))) (CLambda [CPVar (8,"_")] (CApply (CApply (CApply (CApply (CApply (CApply (CVar (1,"f")) (CVar (2,"x1"))) (CVar (3,"x2"))) (CVar (4,"x3"))) (CVar (5,"x4"))) (CVar (6,"x5"))) (CVar (7,"x6")))))] []]),
  CFunc ("SetFunctions","set7") 8 Public (CFuncType (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (1,"b")) (CFuncType (CTVar (2,"c")) (CFuncType (CTVar (3,"d")) (CFuncType (CTVar (4,"e")) (CFuncType (CTVar (5,"f")) (CFuncType (CTVar (6,"g")) (CTVar (7,"h"))))))))) (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (1,"b")) (CFuncType (CTVar (2,"c")) (CFuncType (CTVar (3,"d")) (CFuncType (CTVar (4,"e")) (CFuncType (CTVar (5,"f")) (CFuncType (CTVar (6,"g")) (CTCons ("SetFunctions","Values") [CTVar (7,"h")]))))))))) (CRules CFlex [CRule [CPVar (0,"f"),CPVar (1,"x1"),CPVar (2,"x2"),CPVar (3,"x3"),CPVar (4,"x4"),CPVar (5,"x5"),CPVar (6,"x6"),CPVar (7,"x7")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CSymbol ("SetFunctions","set7With")) (CSymbol ("SearchTree","dfsStrategy"))) (CVar (0,"f"))) (CVar (1,"x1"))) (CVar (2,"x2"))) (CVar (3,"x3"))) (CVar (4,"x4"))) (CVar (5,"x5"))) (CVar (6,"x6"))) (CVar (7,"x7")))] []]),
  CFunc ("SetFunctions","set7With") 9 Public (CFuncType (CFuncType (CTCons ("SearchTree","SearchTree") [CTVar (0,"a")]) (CTCons ("ValueSequence","ValueSequence") [CTVar (0,"a")])) (CFuncType (CFuncType (CTVar (1,"b")) (CFuncType (CTVar (2,"c")) (CFuncType (CTVar (3,"d")) (CFuncType (CTVar (4,"e")) (CFuncType (CTVar (5,"f")) (CFuncType (CTVar (6,"g")) (CFuncType (CTVar (7,"h")) (CTVar (0,"a"))))))))) (CFuncType (CTVar (1,"b")) (CFuncType (CTVar (2,"c")) (CFuncType (CTVar (3,"d")) (CFuncType (CTVar (4,"e")) (CFuncType (CTVar (5,"f")) (CFuncType (CTVar (6,"g")) (CFuncType (CTVar (7,"h")) (CTCons ("SetFunctions","Values") [CTVar (0,"a")])))))))))) (CRules CFlex [CRule [CPVar (0,"s"),CPVar (1,"f"),CPVar (2,"x1"),CPVar (3,"x2"),CPVar (4,"x3"),CPVar (5,"x4"),CPVar (6,"x5"),CPVar (7,"x6"),CPVar (8,"x7")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("SetFunctions","allVs")) (CVar (0,"s"))) (CLambda [CPVar (9,"_")] (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CVar (1,"f")) (CVar (2,"x1"))) (CVar (3,"x2"))) (CVar (4,"x3"))) (CVar (5,"x4"))) (CVar (6,"x5"))) (CVar (7,"x6"))) (CVar (8,"x7")))))] []]),
  CFunc ("SetFunctions","allVs") 2 Private (CFuncType (CFuncType (CTCons ("SearchTree","SearchTree") [CTVar (0,"a")]) (CTCons ("ValueSequence","ValueSequence") [CTVar (1,"b")])) (CFuncType (CFuncType (CTCons ("Prelude","()") []) (CTVar (0,"a"))) (CTCons ("SetFunctions","Values") [CTVar (1,"b")]))) (CRules CFlex [CRule [CPVar (0,"s"),CPVar (1,"f")] [(CSymbol ("Prelude","success"),CApply (CSymbol ("SetFunctions","Values")) (CApply (CSymbol ("ValueSequence","vsToList")) (CApply (CApply (CApply (CSymbol ("Prelude","$!!")) (CSymbol ("SetFunctions","incDepth"))) (CVar (0,"s"))) (CApply (CApply (CApply (CSymbol ("Prelude","$!!")) (CSymbol ("SetFunctions","incDepth"))) (CSymbol ("SearchTree","someSearchTree"))) (CApply (CApply (CApply (CSymbol ("Prelude","$!!")) (CSymbol ("SetFunctions","incDepth"))) (CVar (1,"f"))) (CSymbol ("Prelude","()")))))))] []]),
  CFunc ("SetFunctions","incDepth") 2 Private (CFuncType (CFuncType (CTVar (0,"a")) (CTVar (1,"b"))) (CFuncType (CTVar (0,"a")) (CTVar (1,"b")))) (CExternal "incDepth"),
  CFunc ("SetFunctions","isEmpty") 1 Public (CFuncType (CTCons ("SetFunctions","Values") [CTVar (0,"a")]) (CTCons ("Prelude","Bool") [])) (CRules CFlex [CRule [CPComb ("SetFunctions","Values") [CPVar (0,"vs")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Prelude","null")) (CVar (0,"vs")))] []]),
  CFunc ("SetFunctions","valueOf") 2 Public (CFuncType (CTVar (0,"a")) (CFuncType (CTCons ("SetFunctions","Values") [CTVar (0,"a")]) (CTCons ("Prelude","Bool") []))) (CRules CFlex [CRule [CPVar (0,"e"),CPComb ("SetFunctions","Values") [CPVar (1,"s")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","elem")) (CVar (0,"e"))) (CVar (1,"s")))] []]),
  CFunc ("SetFunctions","choose") 1 Public (CFuncType (CTCons ("SetFunctions","Values") [CTVar (0,"a")]) (CTCons ("Prelude","(,)") [CTVar (0,"a"),CTCons ("SetFunctions","Values") [CTVar (0,"a")]])) (CRules CFlex [CRule [CPComb ("SetFunctions","Values") [CPVar (0,"vs")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","(,)")) (CVar (1,"x"))) (CApply (CSymbol ("SetFunctions","Values")) (CVar (2,"xs"))))] [CLocalPat (CPVar (1,"x")) (CApply (CApply (CSymbol ("Prelude","foldr1")) (CSymbol ("Prelude","?"))) (CVar (0,"vs"))) [],CLocalPat (CPVar (2,"xs")) (CApply (CApply (CSymbol ("List","delete")) (CVar (1,"x"))) (CVar (0,"vs"))) []]]),
  CFunc ("SetFunctions","chooseValue") 1 Public (CFuncType (CTCons ("SetFunctions","Values") [CTVar (0,"a")]) (CTVar (0,"a"))) (CRules CFlex [CRule [CPVar (0,"s")] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Prelude","fst")) (CApply (CSymbol ("SetFunctions","choose")) (CVar (0,"s"))))] []]),
  CFunc ("SetFunctions","select") 1 Public (CFuncType (CTCons ("SetFunctions","Values") [CTVar (0,"a")]) (CTCons ("Prelude","(,)") [CTVar (0,"a"),CTCons ("SetFunctions","Values") [CTVar (0,"a")]])) (CRules CFlex [CRule [CPComb ("SetFunctions","Values") [CPComb ("Prelude",":") [CPVar (0,"x"),CPVar (1,"xs")]]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","(,)")) (CVar (0,"x"))) (CApply (CSymbol ("SetFunctions","Values")) (CVar (1,"xs"))))] []]),
  CFunc ("SetFunctions","selectValue") 1 Public (CFuncType (CTCons ("SetFunctions","Values") [CTVar (0,"a")]) (CTVar (0,"a"))) (CRules CFlex [CRule [CPVar (0,"s")] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Prelude","fst")) (CApply (CSymbol ("SetFunctions","select")) (CVar (0,"s"))))] []]),
  CFunc ("SetFunctions","mapValues") 2 Public (CFuncType (CFuncType (CTVar (0,"a")) (CTVar (1,"b"))) (CFuncType (CTCons ("SetFunctions","Values") [CTVar (0,"a")]) (CTCons ("SetFunctions","Values") [CTVar (1,"b")]))) (CRules CFlex [CRule [CPVar (0,"f"),CPComb ("SetFunctions","Values") [CPVar (1,"s")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("SetFunctions","Values")) (CApply (CApply (CSymbol ("Prelude","map")) (CVar (0,"f"))) (CVar (1,"s"))))] []]),
  CFunc ("SetFunctions","foldValues") 3 Public (CFuncType (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (0,"a")) (CTVar (0,"a")))) (CFuncType (CTVar (0,"a")) (CFuncType (CTCons ("SetFunctions","Values") [CTVar (0,"a")]) (CTVar (0,"a"))))) (CRules CFlex [CRule [CPVar (0,"f"),CPVar (1,"z"),CPComb ("SetFunctions","Values") [CPVar (2,"s")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","foldr")) (CVar (0,"f"))) (CVar (1,"z"))) (CVar (2,"s")))] []]),
  CFunc ("SetFunctions","minValue") 2 Public (CFuncType (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (0,"a")) (CTCons ("Prelude","Bool") []))) (CFuncType (CTCons ("SetFunctions","Values") [CTVar (0,"a")]) (CTVar (0,"a")))) (CRules CFlex [CRule [CPVar (0,"leq"),CPComb ("SetFunctions","Values") [CPVar (1,"s")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("SetFunctions","minOf")) (CVar (1,"s")))] [CLocalFunc (CFunc ("SetFunctions","minOf") 1 Private (CFuncType (CTCons ("Prelude","[]") [CTVar (1,"_348")]) (CTVar (1,"_348"))) (CRules CFlex [CRule [CPComb ("Prelude",":") [CPVar (2,"x"),CPComb ("Prelude","[]") []]] [(CSymbol ("Prelude","success"),CVar (2,"x"))] [],CRule [CPComb ("Prelude",":") [CPVar (3,"x"),CPComb ("Prelude",":") [CPVar (4,"y"),CPVar (5,"ys")]]] [(CSymbol ("Prelude","success"),CLetDecl [CLocalPat (CPVar (6,"m1")) (CApply (CSymbol ("SetFunctions","minOf")) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (4,"y"))) (CVar (5,"ys")))) []] (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CVar (0,"leq")) (CVar (3,"x"))) (CVar (6,"m1")))) (CVar (3,"x"))) (CVar (6,"m1"))))] []]))]]),
  CFunc ("SetFunctions","maxValue") 2 Public (CFuncType (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (0,"a")) (CTCons ("Prelude","Bool") []))) (CFuncType (CTCons ("SetFunctions","Values") [CTVar (0,"a")]) (CTVar (0,"a")))) (CRules CFlex [CRule [CPVar (0,"leq"),CPComb ("SetFunctions","Values") [CPVar (1,"s")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("SetFunctions","maxOf")) (CVar (1,"s")))] [CLocalFunc (CFunc ("SetFunctions","maxOf") 1 Private (CFuncType (CTCons ("Prelude","[]") [CTVar (1,"_368")]) (CTVar (1,"_368"))) (CRules CFlex [CRule [CPComb ("Prelude",":") [CPVar (2,"x"),CPComb ("Prelude","[]") []]] [(CSymbol ("Prelude","success"),CVar (2,"x"))] [],CRule [CPComb ("Prelude",":") [CPVar (3,"x"),CPComb ("Prelude",":") [CPVar (4,"y"),CPVar (5,"ys")]]] [(CSymbol ("Prelude","success"),CLetDecl [CLocalPat (CPVar (6,"m1")) (CApply (CSymbol ("SetFunctions","maxOf")) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (4,"y"))) (CVar (5,"ys")))) []] (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CVar (0,"leq")) (CVar (3,"x"))) (CVar (6,"m1")))) (CVar (6,"m1"))) (CVar (3,"x"))))] []]))]]),
  CFunc ("SetFunctions","values2list") 1 Public (CFuncType (CTCons ("SetFunctions","Values") [CTVar (0,"a")]) (CTCons ("Prelude","IO") [CTCons ("Prelude","[]") [CTVar (0,"a")]])) (CRules CFlex [CRule [CPComb ("SetFunctions","Values") [CPVar (0,"s")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Prelude","return")) (CVar (0,"s")))] []]),
  CFunc ("SetFunctions","printValues") 1 Public (CFuncType (CTCons ("SetFunctions","Values") [CTVar (0,"a")]) (CTCons ("Prelude","IO") [CTCons ("Prelude","()") []])) (CRules CFlex [CRule [CPVar (0,"s")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",">>=")) (CApply (CSymbol ("SetFunctions","values2list")) (CVar (0,"s")))) (CApply (CSymbol ("Prelude","mapIO_")) (CSymbol ("Prelude","print"))))] []]),
  CFunc ("SetFunctions","sortValues") 0 Public (CFuncType (CTCons ("SetFunctions","Values") [CTVar (0,"a")]) (CTCons ("Prelude","[]") [CTVar (0,"a")])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("SetFunctions","sortValuesBy")) (CSymbol ("Prelude","<=")))] []]),
  CFunc ("SetFunctions","sortValuesBy") 2 Public (CFuncType (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (0,"a")) (CTCons ("Prelude","Bool") []))) (CFuncType (CTCons ("SetFunctions","Values") [CTVar (0,"a")]) (CTCons ("Prelude","[]") [CTVar (0,"a")]))) (CRules CFlex [CRule [CPVar (0,"leq"),CPComb ("SetFunctions","Values") [CPVar (1,"s")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Sort","mergeSort")) (CVar (0,"leq"))) (CVar (1,"s")))] []])]
 []
