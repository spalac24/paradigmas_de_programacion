Prog "Constraint" ["Prelude"] [] [Func ("Constraint","<:") 2 Public (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Success") []))) (Rule [1,2] (Comb FuncCall ("Prelude","=:=") [Comb FuncCall ("Prelude","<") [Var 1,Var 2],Comb ConsCall ("Prelude","True") []])),Func ("Constraint",">:") 2 Public (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Success") []))) (Rule [1,2] (Comb FuncCall ("Prelude","=:=") [Comb FuncCall ("Prelude",">") [Var 1,Var 2],Comb ConsCall ("Prelude","True") []])),Func ("Constraint","<=:") 2 Public (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Success") []))) (Rule [1,2] (Comb FuncCall ("Prelude","=:=") [Comb FuncCall ("Prelude","<=") [Var 1,Var 2],Comb ConsCall ("Prelude","True") []])),Func ("Constraint",">=:") 2 Public (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Success") []))) (Rule [1,2] (Comb FuncCall ("Prelude","=:=") [Comb FuncCall ("Prelude",">=") [Var 1,Var 2],Comb ConsCall ("Prelude","True") []])),Func ("Constraint","andC") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Success") []]) (TCons ("Prelude","Success") [])) (Rule [] (Comb (FuncPartCall 1) ("Prelude","foldr") [Comb (FuncPartCall 2) ("Prelude","&") [],Comb FuncCall ("Prelude","success") []])),Func ("Constraint","orC") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Success") []]) (TCons ("Prelude","Success") [])) (Rule [] (Comb (FuncPartCall 1) ("Prelude","foldr") [Comb (FuncPartCall 2) ("Prelude","?") [],Comb FuncCall ("Prelude","failed") []])),Func ("Constraint","allC") 1 Public (FuncType (FuncType (TVar 0) (TCons ("Prelude","Success") [])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","Success") []))) (Rule [1] (Comb FuncCall ("Prelude",".") [Comb FuncCall ("Constraint","andC") [],Comb (FuncPartCall 1) ("Prelude","map") [Var 1]])),Func ("Constraint","anyC") 1 Public (FuncType (FuncType (TVar 0) (TCons ("Prelude","Success") [])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","Success") []))) (Rule [1] (Comb FuncCall ("Prelude",".") [Comb FuncCall ("Constraint","orC") [],Comb (FuncPartCall 1) ("Prelude","map") [Var 1]]))] [Op ("Constraint","<:") InfixOp 4,Op ("Constraint",">:") InfixOp 4,Op ("Constraint","<=:") InfixOp 4,Op ("Constraint",">=:") InfixOp 4]