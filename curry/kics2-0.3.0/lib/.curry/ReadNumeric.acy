CurryProg "ReadNumeric"
 ["Prelude","Char"]
 []
 [CFunc ("ReadNumeric","readInt") 1 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","Maybe") [CTCons ("Prelude","(,)") [CTCons ("Prelude","Int") [],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]])) (CRules CFlex [CRule [CPVar (0,"str")] [(CSymbol ("Prelude","success"),CCase (CApply (CApply (CSymbol ("Prelude","dropWhile")) (CLambda [CPVar (1,"x0")] (CApply (CApply (CSymbol ("Prelude","==")) (CVar (1,"x0"))) (CLit (CCharc ' '))))) (CVar (0,"str"))) [CBranch (CPComb ("Prelude","[]") []) (CSymbol ("Prelude","Nothing")),CBranch (CPComb ("Prelude",":") [CPLit (CCharc '-'),CPVar (2,"str1")]) (CApply (CApply (CApply (CSymbol ("Prelude","maybe")) (CSymbol ("Prelude","Nothing"))) (CLambda [CPComb ("Prelude","(,)") [CPVar (3,"val"),CPVar (4,"rstr")]] (CApply (CSymbol ("Prelude","Just")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CSymbol ("Prelude","negate")) (CVar (3,"val")))) (CVar (4,"rstr")))))) (CApply (CSymbol ("ReadNumeric","readNat")) (CVar (2,"str1")))),CBranch (CPVar (5,"str1")) (CApply (CSymbol ("ReadNumeric","readNat")) (CVar (5,"str1")))])] []]),
  CFunc ("ReadNumeric","readNat") 1 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","Maybe") [CTCons ("Prelude","(,)") [CTCons ("Prelude","Int") [],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]])) (CRules CFlex [CRule [CPVar (0,"str")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CApply (CSymbol ("ReadNumeric","readNumPrefix")) (CApply (CApply (CSymbol ("Prelude","dropWhile")) (CLambda [CPVar (1,"x0")] (CApply (CApply (CSymbol ("Prelude","==")) (CVar (1,"x0"))) (CLit (CCharc ' '))))) (CVar (0,"str")))) (CSymbol ("Prelude","Nothing"))) (CLit (CIntc 10))) (CSymbol ("Char","isDigit"))) (CSymbol ("Char","digitToInt")))] []]),
  CFunc ("ReadNumeric","readHex") 1 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","Maybe") [CTCons ("Prelude","(,)") [CTCons ("Prelude","Int") [],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]])) (CRules CFlex [CRule [CPVar (0,"l")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CApply (CSymbol ("ReadNumeric","readNumPrefix")) (CApply (CApply (CSymbol ("Prelude","dropWhile")) (CLambda [CPVar (1,"c")] (CApply (CApply (CSymbol ("Prelude","==")) (CVar (1,"c"))) (CLit (CCharc ' '))))) (CVar (0,"l")))) (CSymbol ("Prelude","Nothing"))) (CLit (CIntc 16))) (CSymbol ("Char","isHexDigit"))) (CSymbol ("Char","digitToInt")))] []]),
  CFunc ("ReadNumeric","readOct") 1 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","Maybe") [CTCons ("Prelude","(,)") [CTCons ("Prelude","Int") [],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]])) (CRules CFlex [CRule [CPVar (0,"l")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CApply (CSymbol ("ReadNumeric","readNumPrefix")) (CApply (CApply (CSymbol ("Prelude","dropWhile")) (CLambda [CPVar (1,"c")] (CApply (CApply (CSymbol ("Prelude","==")) (CVar (1,"c"))) (CLit (CCharc ' '))))) (CVar (0,"l")))) (CSymbol ("Prelude","Nothing"))) (CLit (CIntc 8))) (CSymbol ("Char","isOctDigit"))) (CSymbol ("Char","digitToInt")))] []]),
  CFunc ("ReadNumeric","readNumPrefix") 5 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("Prelude","Maybe") [CTCons ("Prelude","Int") []]) (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CFuncType (CTCons ("Prelude","Char") []) (CTCons ("Prelude","Bool") [])) (CFuncType (CFuncType (CTCons ("Prelude","Char") []) (CTCons ("Prelude","Int") [])) (CTCons ("Prelude","Maybe") [CTCons ("Prelude","(,)") [CTCons ("Prelude","Int") [],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]])))))) (CRules CFlex [CRule [CPComb ("Prelude","[]") [],CPComb ("Prelude","Nothing") [],CPVar (0,"_"),CPVar (1,"_"),CPVar (2,"_")] [(CSymbol ("Prelude","success"),CSymbol ("Prelude","Nothing"))] [],CRule [CPComb ("Prelude","[]") [],CPComb ("Prelude","Just") [CPVar (3,"n")],CPVar (4,"_"),CPVar (5,"_"),CPVar (6,"_")] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Prelude","Just")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CVar (3,"n"))) (CSymbol ("Prelude","[]"))))] [],CRule [CPComb ("Prelude",":") [CPVar (7,"c"),CPVar (8,"cs")],CPComb ("Prelude","Just") [CPVar (9,"n")],CPVar (10,"base"),CPVar (11,"isdigit"),CPVar (12,"valueof")] [(CApply (CVar (11,"isdigit")) (CVar (7,"c")),CApply (CApply (CApply (CApply (CApply (CSymbol ("ReadNumeric","readNumPrefix")) (CVar (8,"cs"))) (CApply (CSymbol ("Prelude","Just")) (CApply (CApply (CSymbol ("Prelude","+")) (CApply (CApply (CSymbol ("Prelude","*")) (CVar (10,"base"))) (CVar (9,"n")))) (CApply (CVar (12,"valueof")) (CVar (7,"c")))))) (CVar (10,"base"))) (CVar (11,"isdigit"))) (CVar (12,"valueof"))),(CSymbol ("Prelude","otherwise"),CApply (CSymbol ("Prelude","Just")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CVar (9,"n"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (7,"c"))) (CVar (8,"cs")))))] [],CRule [CPComb ("Prelude",":") [CPVar (13,"c"),CPVar (14,"cs")],CPComb ("Prelude","Nothing") [],CPVar (15,"base"),CPVar (16,"isdigit"),CPVar (17,"valueof")] [(CApply (CVar (16,"isdigit")) (CVar (13,"c")),CApply (CApply (CApply (CApply (CApply (CSymbol ("ReadNumeric","readNumPrefix")) (CVar (14,"cs"))) (CApply (CSymbol ("Prelude","Just")) (CApply (CVar (17,"valueof")) (CVar (13,"c"))))) (CVar (15,"base"))) (CVar (16,"isdigit"))) (CVar (17,"valueof"))),(CSymbol ("Prelude","otherwise"),CSymbol ("Prelude","Nothing"))] []])]
 []
