CurryProg "Constraint"
 ["Prelude"]
 []
 [CFunc ("Constraint","<:") 2 Public (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (0,"a")) (CTCons ("Prelude","Success") []))) (CRules CFlex [CRule [CPVar (0,"x"),CPVar (1,"y")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","=:=")) (CApply (CApply (CSymbol ("Prelude","<")) (CVar (0,"x"))) (CVar (1,"y")))) (CSymbol ("Prelude","True")))] []]),
  CFunc ("Constraint",">:") 2 Public (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (0,"a")) (CTCons ("Prelude","Success") []))) (CRules CFlex [CRule [CPVar (0,"x"),CPVar (1,"y")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","=:=")) (CApply (CApply (CSymbol ("Prelude",">")) (CVar (0,"x"))) (CVar (1,"y")))) (CSymbol ("Prelude","True")))] []]),
  CFunc ("Constraint","<=:") 2 Public (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (0,"a")) (CTCons ("Prelude","Success") []))) (CRules CFlex [CRule [CPVar (0,"x"),CPVar (1,"y")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","=:=")) (CApply (CApply (CSymbol ("Prelude","<=")) (CVar (0,"x"))) (CVar (1,"y")))) (CSymbol ("Prelude","True")))] []]),
  CFunc ("Constraint",">=:") 2 Public (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (0,"a")) (CTCons ("Prelude","Success") []))) (CRules CFlex [CRule [CPVar (0,"x"),CPVar (1,"y")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","=:=")) (CApply (CApply (CSymbol ("Prelude",">=")) (CVar (0,"x"))) (CVar (1,"y")))) (CSymbol ("Prelude","True")))] []]),
  CFunc ("Constraint","andC") 0 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Success") []]) (CTCons ("Prelude","Success") [])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","foldr")) (CSymbol ("Prelude","&"))) (CSymbol ("Prelude","success")))] []]),
  CFunc ("Constraint","orC") 0 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Success") []]) (CTCons ("Prelude","Success") [])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","foldr")) (CSymbol ("Prelude","?"))) (CSymbol ("Prelude","failed")))] []]),
  CFunc ("Constraint","allC") 1 Public (CFuncType (CFuncType (CTVar (0,"a")) (CTCons ("Prelude","Success") [])) (CFuncType (CTCons ("Prelude","[]") [CTVar (0,"a")]) (CTCons ("Prelude","Success") []))) (CRules CFlex [CRule [CPVar (0,"c")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Constraint","andC"))) (CApply (CSymbol ("Prelude","map")) (CVar (0,"c"))))] []]),
  CFunc ("Constraint","anyC") 1 Public (CFuncType (CFuncType (CTVar (0,"a")) (CTCons ("Prelude","Success") [])) (CFuncType (CTCons ("Prelude","[]") [CTVar (0,"a")]) (CTCons ("Prelude","Success") []))) (CRules CFlex [CRule [CPVar (0,"c")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Constraint","orC"))) (CApply (CSymbol ("Prelude","map")) (CVar (0,"c"))))] []])]
 [COp ("Constraint",">=:") CInfixOp 4,COp ("Constraint","<=:") CInfixOp 4,COp ("Constraint",">:") CInfixOp 4,COp ("Constraint","<:") CInfixOp 4]
