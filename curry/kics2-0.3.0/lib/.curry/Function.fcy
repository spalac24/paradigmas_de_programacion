Prog "Function" ["Prelude"] [] [Func ("Function","fix") 1 Public (FuncType (FuncType (TVar 0) (TVar 0)) (TVar 0)) (Rule [1] (Let [(2,Comb FuncCall ("Prelude","apply") [Var 1,Var 2])] (Var 2))),Func ("Function","on") 4 Public (FuncType (FuncType (TVar 0) (FuncType (TVar 0) (TVar 1))) (FuncType (FuncType (TVar 2) (TVar 0)) (FuncType (TVar 2) (FuncType (TVar 2) (TVar 1))))) (Rule [1,2,3,4] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 1,Comb FuncCall ("Prelude","apply") [Var 2,Var 3]],Comb FuncCall ("Prelude","apply") [Var 2,Var 4]])),Func ("Function","first") 2 Public (FuncType (FuncType (TVar 0) (TVar 1)) (FuncType (TCons ("Prelude","(,)") [TVar 0,TVar 2]) (TCons ("Prelude","(,)") [TVar 1,TVar 2]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Prelude","apply") [Var 1,Var 3],Var 4])])),Func ("Function","second") 2 Public (FuncType (FuncType (TVar 0) (TVar 1)) (FuncType (TCons ("Prelude","(,)") [TVar 2,TVar 0]) (TCons ("Prelude","(,)") [TVar 2,TVar 1]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb ConsCall ("Prelude","(,)") [Var 3,Comb FuncCall ("Prelude","apply") [Var 1,Var 4]])])),Func ("Function","***") 3 Public (FuncType (FuncType (TVar 0) (TVar 1)) (FuncType (FuncType (TVar 2) (TVar 3)) (FuncType (TCons ("Prelude","(,)") [TVar 0,TVar 2]) (TCons ("Prelude","(,)") [TVar 1,TVar 3])))) (Rule [1,2,3] (Case  Flex (Var 3) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Prelude","apply") [Var 1,Var 4],Comb FuncCall ("Prelude","apply") [Var 2,Var 5]])])),Func ("Function","&&&") 3 Public (FuncType (FuncType (TVar 0) (TVar 1)) (FuncType (FuncType (TVar 0) (TVar 2)) (FuncType (TVar 0) (TCons ("Prelude","(,)") [TVar 1,TVar 2])))) (Rule [1,2,3] (Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Prelude","apply") [Var 1,Var 3],Comb FuncCall ("Prelude","apply") [Var 2,Var 3]])),Func ("Function","both") 2 Public (FuncType (FuncType (TVar 0) (TVar 1)) (FuncType (TCons ("Prelude","(,)") [TVar 0,TVar 0]) (TCons ("Prelude","(,)") [TVar 1,TVar 1]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Prelude","apply") [Var 1,Var 3],Comb FuncCall ("Prelude","apply") [Var 1,Var 4]])]))] []