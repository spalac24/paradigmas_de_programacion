Prog "UnsafeSearchTree" ["Prelude","ValueSequence"] [TypeSyn ("UnsafeSearchTree","Strategy") Public [0] (FuncType (TCons ("UnsafeSearchTree","SearchTree") [TVar 0]) (TCons ("ValueSequence","ValueSequence") [TVar 0])),Type ("UnsafeSearchTree","SearchTree") Public [0] [Cons ("UnsafeSearchTree","Value") 1 Public [TVar 0],Cons ("UnsafeSearchTree","Fail") 1 Public [TCons ("Prelude","Int") []],Cons ("UnsafeSearchTree","Or") 2 Public [TCons ("UnsafeSearchTree","SearchTree") [TVar 0],TCons ("UnsafeSearchTree","SearchTree") [TVar 0]]],Type ("UnsafeSearchTree","AbortList") Private [0] [Cons ("UnsafeSearchTree","Nil") 0 Private [],Cons ("UnsafeSearchTree","Cons") 2 Private [TVar 0,TCons ("UnsafeSearchTree","AbortList") [TVar 0]],Cons ("UnsafeSearchTree","FCons") 2 Private [TCons ("Prelude","Int") [],TCons ("UnsafeSearchTree","AbortList") [TVar 0]],Cons ("UnsafeSearchTree","Abort") 0 Private []]] [Func ("UnsafeSearchTree","isVar") 1 Public (FuncType (TVar 0) (TCons ("Prelude","Bool") [])) (Rule [1] (Comb FuncCall ("Prelude","maybe") [Comb ConsCall ("Prelude","False") [],Comb (FuncPartCall 1) ("Prelude","const") [Comb ConsCall ("Prelude","True") []],Comb FuncCall ("UnsafeSearchTree","lookupVarId") [Var 1]])),Func ("UnsafeSearchTree","identicalVars") 2 Public (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Comb FuncCall ("Prelude","maybe") [Comb ConsCall ("Prelude","False") [],Comb (FuncPartCall 1) ("UnsafeSearchTree","identicalVars._#lambda1") [Var 2],Comb FuncCall ("UnsafeSearchTree","lookupVarId") [Var 1]])),Func ("UnsafeSearchTree","identicalVars._#lambda1") 2 Private (FuncType (TVar 9) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Comb FuncCall ("Prelude","maybe") [Comb ConsCall ("Prelude","False") [],Comb (FuncPartCall 1) ("Prelude","flip") [Comb (FuncPartCall 2) ("Prelude","==") [],Var 2],Comb FuncCall ("UnsafeSearchTree","lookupVarId") [Var 1]])),Func ("UnsafeSearchTree","varId") 1 Public (FuncType (TVar 0) (TCons ("Prelude","Int") [])) (Rule [1] (Comb FuncCall ("Prelude","maybe") [Comb FuncCall ("Prelude","error") [Comb ConsCall ("Prelude",":") [Lit (Charc  'U'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'S'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'T'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude",":") [Lit (Charc  'v'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'I'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'v'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'b'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],Comb (FuncPartCall 1) ("Prelude","id") [],Comb FuncCall ("UnsafeSearchTree","lookupVarId") [Var 1]])),Func ("UnsafeSearchTree","lookupVarId") 1 Private (FuncType (TVar 0) (TCons ("Prelude","Maybe") [TCons ("Prelude","Int") []])) (External "UnsafeSearchTree.lookupVarId"),Func ("UnsafeSearchTree","getSearchTree") 1 Public (FuncType (TVar 0) (TCons ("Prelude","IO") [TCons ("UnsafeSearchTree","SearchTree") [TVar 0]])) (Rule [1] (Comb FuncCall ("Prelude","return") [Comb FuncCall ("UnsafeSearchTree","someSearchTree") [Var 1]])),Func ("UnsafeSearchTree","someSearchTree") 1 Public (FuncType (TVar 0) (TCons ("UnsafeSearchTree","SearchTree") [TVar 0])) (External "UnsafeSearchTree.someSearchTree"),Func ("UnsafeSearchTree","isDefined") 1 Public (FuncType (TVar 0) (TCons ("Prelude","Bool") [])) (Rule [1] (Comb FuncCall ("UnsafeSearchTree","isDefined.hasValue.11") [Comb FuncCall ("UnsafeSearchTree","someSearchTree") [Var 1]])),Func ("UnsafeSearchTree","isDefined.hasValue.11") 1 Private (FuncType (TCons ("UnsafeSearchTree","SearchTree") [TVar 0]) (TCons ("Prelude","Bool") [])) (Rule [1] (Case  Rigid (Var 1) [Branch (Pattern ("UnsafeSearchTree","Value") [2]) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("UnsafeSearchTree","Fail") [3]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("UnsafeSearchTree","Or") [4,5]) (Comb FuncCall ("Prelude","||") [Comb FuncCall ("UnsafeSearchTree","isDefined.hasValue.11") [Var 4],Comb FuncCall ("UnsafeSearchTree","isDefined.hasValue.11") [Var 5]])])),Func ("UnsafeSearchTree","showSearchTree") 1 Public (FuncType (TCons ("UnsafeSearchTree","SearchTree") [TVar 0]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Let [(2,Comb FuncCall ("UnsafeSearchTree","showSearchTree.showChar.23") [Lit (Charc  '\010')])] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("UnsafeSearchTree","showSearchTree.showsST.23") [Var 2,Comb ConsCall ("Prelude","[]") [],Var 1],Comb ConsCall ("Prelude","[]") []]))),Func ("UnsafeSearchTree","showSearchTree.showChar.23") 1 Private (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0]))) (Rule [1] (Comb (ConsPartCall 1) ("Prelude",":") [Var 1])),Func ("UnsafeSearchTree","showSearchTree.showString.23") 1 Private (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0]))) (Rule [1] (Comb (FuncPartCall 1) ("Prelude","++") [Var 1])),Func ("UnsafeSearchTree","showSearchTree.indent.23") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Bool") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Comb (FuncPartCall 1) ("Prelude","id") []),Branch (Pattern ("Prelude",":") [2,3]) (Comb FuncCall ("Prelude",".") [Comb FuncCall ("UnsafeSearchTree","showSearchTree.showString.23") [Comb FuncCall ("Prelude","$") [Comb FuncCall ("Prelude","concatMap") [Comb (FuncPartCall 1) ("UnsafeSearchTree","showSearchTree.indent.23.showIndent.34") []],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","reverse") [],Var 3]]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("UnsafeSearchTree","showSearchTree.showChar.23") [Case  Rigid (Var 2) [Branch (Pattern ("Prelude","True") []) (Lit (Charc  '\9492')),Branch (Pattern ("Prelude","False") []) (Lit (Charc  '\9500'))]],Comb FuncCall ("UnsafeSearchTree","showSearchTree.showString.23") [Comb ConsCall ("Prelude",":") [Lit (Charc  '\9472'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]])])),Func ("UnsafeSearchTree","showSearchTree.indent.23.showIndent.34") 1 Private (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Comb ConsCall ("Prelude",":") [Case  Rigid (Var 1) [Branch (Pattern ("Prelude","True") []) (Lit (Charc  ' ')),Branch (Pattern ("Prelude","False") []) (Lit (Charc  '\9474'))],Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]])),Func ("UnsafeSearchTree","showSearchTree.shows.23") 1 Private (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1] (Comb FuncCall ("UnsafeSearchTree","showSearchTree.showString.23") [Comb FuncCall ("Prelude","show") [Var 1]])),Func ("UnsafeSearchTree","showSearchTree.showsST.23") 3 Private (FuncType (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Bool") []]) (FuncType (TCons ("UnsafeSearchTree","SearchTree") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (Rule [1,2,3] (Case  Flex (Var 3) [Branch (Pattern ("UnsafeSearchTree","Value") [4]) (Comb FuncCall ("Prelude",".") [Comb FuncCall ("UnsafeSearchTree","showSearchTree.indent.23") [Var 2],Comb FuncCall ("Prelude",".") [Comb FuncCall ("UnsafeSearchTree","showSearchTree.shows.23") [Var 4],Var 1]]),Branch (Pattern ("UnsafeSearchTree","Fail") [5]) (Comb FuncCall ("Prelude",".") [Comb FuncCall ("UnsafeSearchTree","showSearchTree.indent.23") [Var 2],Comb FuncCall ("Prelude",".") [Comb FuncCall ("UnsafeSearchTree","showSearchTree.showChar.23") [Lit (Charc  '!')],Var 1]]),Branch (Pattern ("UnsafeSearchTree","Or") [6,7]) (Comb FuncCall ("Prelude",".") [Comb FuncCall ("UnsafeSearchTree","showSearchTree.indent.23") [Var 2],Comb FuncCall ("Prelude",".") [Comb FuncCall ("UnsafeSearchTree","showSearchTree.showChar.23") [Lit (Charc  '?')],Comb FuncCall ("Prelude",".") [Var 1,Comb FuncCall ("Prelude",".") [Comb FuncCall ("UnsafeSearchTree","showSearchTree.showsST.23") [Var 1,Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","False") [],Var 2],Var 6],Comb FuncCall ("UnsafeSearchTree","showSearchTree.showsST.23") [Var 1,Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","True") [],Var 2],Var 7]]]]])])),Func ("UnsafeSearchTree","searchTreeSize") 1 Public (FuncType (TCons ("UnsafeSearchTree","SearchTree") [TVar 0]) (TCons ("Prelude","(,,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") [],TCons ("Prelude","Int") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("UnsafeSearchTree","Value") [2]) (Comb ConsCall ("Prelude","(,,)") [Lit (Intc  1),Lit (Intc  0),Lit (Intc  0)]),Branch (Pattern ("UnsafeSearchTree","Fail") [3]) (Comb ConsCall ("Prelude","(,,)") [Lit (Intc  0),Lit (Intc  1),Lit (Intc  0)]),Branch (Pattern ("UnsafeSearchTree","Or") [4,5]) (Let [(6,Comb FuncCall ("UnsafeSearchTree","searchTreeSize") [Var 4]),(7,Comb FuncCall ("UnsafeSearchTree","searchTreeSize._#selFP6#v1") [Var 6]),(8,Comb FuncCall ("UnsafeSearchTree","searchTreeSize._#selFP7#f1") [Var 6]),(9,Comb FuncCall ("UnsafeSearchTree","searchTreeSize._#selFP8#o1") [Var 6]),(10,Comb FuncCall ("UnsafeSearchTree","searchTreeSize") [Var 5]),(11,Comb FuncCall ("UnsafeSearchTree","searchTreeSize._#selFP3#v2") [Var 10]),(12,Comb FuncCall ("UnsafeSearchTree","searchTreeSize._#selFP4#f2") [Var 10]),(13,Comb FuncCall ("UnsafeSearchTree","searchTreeSize._#selFP5#o2") [Var 10])] (Comb ConsCall ("Prelude","(,,)") [Comb FuncCall ("Prelude","+") [Var 7,Var 11],Comb FuncCall ("Prelude","+") [Var 8,Var 12],Comb FuncCall ("Prelude","+") [Comb FuncCall ("Prelude","+") [Var 9,Var 13],Lit (Intc  1)]]))])),Func ("UnsafeSearchTree","searchTreeSize._#selFP6#v1") 1 Private (FuncType (TCons ("Prelude","(,,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") [],TCons ("Prelude","Int") []]) (TCons ("Prelude","Int") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,)") [2,3,4]) (Var 2)])),Func ("UnsafeSearchTree","searchTreeSize._#selFP7#f1") 1 Private (FuncType (TCons ("Prelude","(,,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") [],TCons ("Prelude","Int") []]) (TCons ("Prelude","Int") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,)") [2,3,4]) (Var 3)])),Func ("UnsafeSearchTree","searchTreeSize._#selFP8#o1") 1 Private (FuncType (TCons ("Prelude","(,,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") [],TCons ("Prelude","Int") []]) (TCons ("Prelude","Int") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,)") [2,3,4]) (Var 4)])),Func ("UnsafeSearchTree","searchTreeSize._#selFP3#v2") 1 Private (FuncType (TCons ("Prelude","(,,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") [],TCons ("Prelude","Int") []]) (TCons ("Prelude","Int") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,)") [2,3,4]) (Var 2)])),Func ("UnsafeSearchTree","searchTreeSize._#selFP4#f2") 1 Private (FuncType (TCons ("Prelude","(,,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") [],TCons ("Prelude","Int") []]) (TCons ("Prelude","Int") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,)") [2,3,4]) (Var 3)])),Func ("UnsafeSearchTree","searchTreeSize._#selFP5#o2") 1 Private (FuncType (TCons ("Prelude","(,,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") [],TCons ("Prelude","Int") []]) (TCons ("Prelude","Int") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,)") [2,3,4]) (Var 4)])),Func ("UnsafeSearchTree","allValuesDFS") 0 Public (FuncType (TCons ("UnsafeSearchTree","SearchTree") [TVar 0]) (TCons ("Prelude","[]") [TVar 0])) (Rule [] (Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("ValueSequence","vsToList") [],Comb (FuncPartCall 1) ("UnsafeSearchTree","dfsStrategy") []])),Func ("UnsafeSearchTree","dfsStrategy") 1 Public (FuncType (TCons ("UnsafeSearchTree","SearchTree") [TVar 0]) (TCons ("ValueSequence","ValueSequence") [TVar 0])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("UnsafeSearchTree","Fail") [2]) (Comb FuncCall ("ValueSequence","failVS") [Var 2]),Branch (Pattern ("UnsafeSearchTree","Value") [3]) (Comb FuncCall ("ValueSequence","addVS") [Var 3,Comb FuncCall ("ValueSequence","emptyVS") []]),Branch (Pattern ("UnsafeSearchTree","Or") [4,5]) (Comb FuncCall ("ValueSequence","|++|") [Comb FuncCall ("UnsafeSearchTree","dfsStrategy") [Var 4],Comb FuncCall ("UnsafeSearchTree","dfsStrategy") [Var 5]])])),Func ("UnsafeSearchTree","allValuesBFS") 1 Public (FuncType (TCons ("UnsafeSearchTree","SearchTree") [TVar 0]) (TCons ("Prelude","[]") [TVar 0])) (Rule [1] (Comb FuncCall ("ValueSequence","vsToList") [Comb FuncCall ("UnsafeSearchTree","bfsStrategy") [Var 1]])),Func ("UnsafeSearchTree","children") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("UnsafeSearchTree","SearchTree") [TVar 0]]) (TCons ("Prelude","[]") [TCons ("UnsafeSearchTree","SearchTree") [TVar 0]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 2) [Branch (Pattern ("UnsafeSearchTree","Fail") [4]) (Comb FuncCall ("UnsafeSearchTree","children") [Var 3]),Branch (Pattern ("UnsafeSearchTree","Value") [5]) (Comb FuncCall ("UnsafeSearchTree","children") [Var 3]),Branch (Pattern ("UnsafeSearchTree","Or") [6,7]) (Comb ConsCall ("Prelude",":") [Var 6,Comb ConsCall ("Prelude",":") [Var 7,Comb FuncCall ("UnsafeSearchTree","children") [Var 3]]])])])),Func ("UnsafeSearchTree","values") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("UnsafeSearchTree","SearchTree") [TVar 0]]) (TCons ("ValueSequence","ValueSequence") [TVar 0])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("ValueSequence","emptyVS") []),Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 2) [Branch (Pattern ("UnsafeSearchTree","Fail") [4]) (Comb FuncCall ("ValueSequence","|++|") [Comb FuncCall ("ValueSequence","failVS") [Var 4],Comb FuncCall ("UnsafeSearchTree","values") [Var 3]]),Branch (Pattern ("UnsafeSearchTree","Value") [5]) (Comb FuncCall ("ValueSequence","addVS") [Var 5,Comb FuncCall ("UnsafeSearchTree","values") [Var 3]]),Branch (Pattern ("UnsafeSearchTree","Or") [6,7]) (Comb FuncCall ("UnsafeSearchTree","values") [Var 3])])])),Func ("UnsafeSearchTree","allBFS") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("UnsafeSearchTree","SearchTree") [TVar 0]]) (TCons ("ValueSequence","ValueSequence") [TVar 0])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("ValueSequence","emptyVS") []),Branch (Pattern ("Prelude",":") [2,3]) (Comb FuncCall ("ValueSequence","|++|") [Comb FuncCall ("UnsafeSearchTree","values") [Comb ConsCall ("Prelude",":") [Var 2,Var 3]],Comb FuncCall ("UnsafeSearchTree","allBFS") [Comb FuncCall ("UnsafeSearchTree","children") [Comb ConsCall ("Prelude",":") [Var 2,Var 3]]]])])),Func ("UnsafeSearchTree","bfsStrategy") 1 Public (FuncType (TCons ("UnsafeSearchTree","SearchTree") [TVar 0]) (TCons ("ValueSequence","ValueSequence") [TVar 0])) (Rule [1] (Comb FuncCall ("UnsafeSearchTree","allBFS") [Comb ConsCall ("Prelude",":") [Var 1,Comb ConsCall ("Prelude","[]") []]])),Func ("UnsafeSearchTree","defIDSDepth") 0 Private (TCons ("Prelude","Int") []) (Rule [] (Lit (Intc  100))),Func ("UnsafeSearchTree","defIDSInc") 0 Private (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") [])) (Rule [] (Comb (FuncPartCall 1) ("Prelude","*") [Lit (Intc  2)])),Func ("UnsafeSearchTree","allValuesIDS") 1 Public (FuncType (TCons ("UnsafeSearchTree","SearchTree") [TVar 0]) (TCons ("Prelude","[]") [TVar 0])) (Rule [1] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("UnsafeSearchTree","allValuesIDSwith") [Comb FuncCall ("UnsafeSearchTree","defIDSDepth") [],Comb FuncCall ("UnsafeSearchTree","defIDSInc") []],Var 1])),Func ("UnsafeSearchTree","idsStrategy") 1 Public (FuncType (TCons ("UnsafeSearchTree","SearchTree") [TVar 0]) (TCons ("ValueSequence","ValueSequence") [TVar 0])) (Rule [1] (Comb FuncCall ("UnsafeSearchTree","idsStrategyWith") [Comb FuncCall ("UnsafeSearchTree","defIDSDepth") [],Comb FuncCall ("UnsafeSearchTree","defIDSInc") [],Var 1])),Func ("UnsafeSearchTree","allValuesIDSwith") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") [])) (FuncType (TCons ("UnsafeSearchTree","SearchTree") [TVar 0]) (TCons ("Prelude","[]") [TVar 0])))) (Rule [1,2] (Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("ValueSequence","vsToList") [],Comb (FuncPartCall 1) ("UnsafeSearchTree","idsStrategyWith") [Var 1,Var 2]])),Func ("UnsafeSearchTree","idsStrategyWith") 3 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") [])) (FuncType (TCons ("UnsafeSearchTree","SearchTree") [TVar 0]) (TCons ("ValueSequence","ValueSequence") [TVar 0])))) (Rule [1,2,3] (Comb FuncCall ("UnsafeSearchTree","idsStrategyWith.iterIDS.115") [Var 2,Var 3,Var 1,Comb FuncCall ("UnsafeSearchTree","collectInBounds") [Lit (Intc  0),Var 1,Var 3]])),Func ("UnsafeSearchTree","idsStrategyWith.iterIDS.115") 4 Private (FuncType (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") [])) (FuncType (TCons ("UnsafeSearchTree","SearchTree") [TVar 335]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("UnsafeSearchTree","AbortList") [TVar 335]) (TCons ("ValueSequence","ValueSequence") [TVar 335]))))) (Rule [1,2,3,4] (Case  Flex (Var 4) [Branch (Pattern ("UnsafeSearchTree","Nil") []) (Comb FuncCall ("ValueSequence","emptyVS") []),Branch (Pattern ("UnsafeSearchTree","Cons") [5,6]) (Comb FuncCall ("ValueSequence","addVS") [Var 5,Comb FuncCall ("UnsafeSearchTree","idsStrategyWith.iterIDS.115") [Var 1,Var 2,Var 3,Var 6]]),Branch (Pattern ("UnsafeSearchTree","FCons") [7,8]) (Comb FuncCall ("ValueSequence","|++|") [Comb FuncCall ("ValueSequence","failVS") [Var 7],Comb FuncCall ("UnsafeSearchTree","idsStrategyWith.iterIDS.115") [Var 1,Var 2,Var 3,Var 8]]),Branch (Pattern ("UnsafeSearchTree","Abort") []) (Let [(9,Comb FuncCall ("Prelude","apply") [Var 1,Var 3])] (Comb FuncCall ("UnsafeSearchTree","idsStrategyWith.iterIDS.115") [Var 1,Var 2,Var 9,Comb FuncCall ("UnsafeSearchTree","collectInBounds") [Var 3,Var 9,Var 2]]))])),Func ("UnsafeSearchTree","collectInBounds") 3 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("UnsafeSearchTree","SearchTree") [TVar 0]) (TCons ("UnsafeSearchTree","AbortList") [TVar 0])))) (Rule [1,2,3] (Comb FuncCall ("UnsafeSearchTree","collectInBounds.collectLevel.129") [Var 2,Var 1,Var 2,Var 3])),Func ("UnsafeSearchTree","collectInBounds.collectLevel.129") 4 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("UnsafeSearchTree","SearchTree") [TVar 0]) (TCons ("UnsafeSearchTree","AbortList") [TVar 0]))))) (Rule [1,2,3,4] (Case  Flex (Var 4) [Branch (Pattern ("UnsafeSearchTree","Fail") [5]) (Case  Rigid (Comb FuncCall ("Prelude","<") [Var 3,Comb FuncCall ("Prelude","-") [Var 1,Var 2]]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("UnsafeSearchTree","FCons") [Var 5,Comb ConsCall ("UnsafeSearchTree","Nil") []]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("UnsafeSearchTree","Nil") [])]),Branch (Pattern ("UnsafeSearchTree","Value") [6]) (Case  Rigid (Comb FuncCall ("Prelude","<") [Var 3,Comb FuncCall ("Prelude","-") [Var 1,Var 2]]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("UnsafeSearchTree","Cons") [Var 6,Comb ConsCall ("UnsafeSearchTree","Nil") []]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("UnsafeSearchTree","Nil") [])]),Branch (Pattern ("UnsafeSearchTree","Or") [7,8]) (Case  Rigid (Comb FuncCall ("Prelude",">") [Var 3,Lit (Intc  0)]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("UnsafeSearchTree","concA") [Comb FuncCall ("UnsafeSearchTree","collectInBounds.collectLevel.129") [Var 1,Var 2,Comb FuncCall ("Prelude","-") [Var 3,Lit (Intc  1)],Var 7],Comb FuncCall ("UnsafeSearchTree","collectInBounds.collectLevel.129") [Var 1,Var 2,Comb FuncCall ("Prelude","-") [Var 3,Lit (Intc  1)],Var 8]]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("UnsafeSearchTree","Abort") [])])])),Func ("UnsafeSearchTree","concA") 2 Private (FuncType (TCons ("UnsafeSearchTree","AbortList") [TVar 0]) (FuncType (TCons ("UnsafeSearchTree","AbortList") [TVar 0]) (TCons ("UnsafeSearchTree","AbortList") [TVar 0]))) (Rule [1,2] (Case  Flex (Var 1) [Branch (Pattern ("UnsafeSearchTree","Abort") []) (Case  Flex (Var 2) [Branch (Pattern ("UnsafeSearchTree","Abort") []) (Comb ConsCall ("UnsafeSearchTree","Abort") []),Branch (Pattern ("UnsafeSearchTree","Nil") []) (Comb ConsCall ("UnsafeSearchTree","Abort") []),Branch (Pattern ("UnsafeSearchTree","Cons") [3,4]) (Comb ConsCall ("UnsafeSearchTree","Cons") [Var 3,Comb FuncCall ("UnsafeSearchTree","concA") [Comb ConsCall ("UnsafeSearchTree","Abort") [],Var 4]]),Branch (Pattern ("UnsafeSearchTree","FCons") [5,6]) (Comb ConsCall ("UnsafeSearchTree","FCons") [Var 5,Comb FuncCall ("UnsafeSearchTree","concA") [Comb ConsCall ("UnsafeSearchTree","Abort") [],Var 6]])]),Branch (Pattern ("UnsafeSearchTree","Nil") []) (Var 2),Branch (Pattern ("UnsafeSearchTree","Cons") [7,8]) (Comb ConsCall ("UnsafeSearchTree","Cons") [Var 7,Comb FuncCall ("UnsafeSearchTree","concA") [Var 8,Var 2]]),Branch (Pattern ("UnsafeSearchTree","FCons") [9,10]) (Comb ConsCall ("UnsafeSearchTree","FCons") [Var 9,Comb FuncCall ("UnsafeSearchTree","concA") [Var 10,Var 2]])])),Func ("UnsafeSearchTree","getAllValuesWith") 2 Public (FuncType (FuncType (TCons ("UnsafeSearchTree","SearchTree") [TVar 0]) (TCons ("ValueSequence","ValueSequence") [TVar 0])) (FuncType (TVar 0) (TCons ("Prelude","IO") [TCons ("Prelude","[]") [TVar 0]]))) (Rule [1,2] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("UnsafeSearchTree","getSearchTree") [Var 2],Comb (FuncPartCall 1) ("UnsafeSearchTree","getAllValuesWith._#lambda3") [Var 1]])),Func ("UnsafeSearchTree","getAllValuesWith._#lambda3") 2 Private (FuncType (FuncType (TCons ("UnsafeSearchTree","SearchTree") [TVar 358]) (TCons ("ValueSequence","ValueSequence") [TVar 358])) (FuncType (TCons ("UnsafeSearchTree","SearchTree") [TVar 358]) (TCons ("Prelude","IO") [TCons ("Prelude","[]") [TVar 358]]))) (Rule [1,2] (Comb FuncCall ("Prelude","return") [Comb FuncCall ("ValueSequence","vsToList") [Comb FuncCall ("Prelude","apply") [Var 1,Var 2]]])),Func ("UnsafeSearchTree","someValue") 0 Public (FuncType (TVar 0) (TVar 0)) (Rule [] (Comb (FuncPartCall 1) ("UnsafeSearchTree","someValueWith") [Comb (FuncPartCall 1) ("UnsafeSearchTree","bfsStrategy") []])),Func ("UnsafeSearchTree","someValueWith") 2 Public (FuncType (FuncType (TCons ("UnsafeSearchTree","SearchTree") [TVar 0]) (TCons ("ValueSequence","ValueSequence") [TVar 0])) (FuncType (TVar 0) (TVar 0))) (Rule [1,2] (Comb FuncCall ("Prelude","head") [Comb FuncCall ("ValueSequence","vsToList") [Comb FuncCall ("Prelude","apply") [Var 1,Comb FuncCall ("UnsafeSearchTree","someSearchTree") [Var 2]]]]))] []