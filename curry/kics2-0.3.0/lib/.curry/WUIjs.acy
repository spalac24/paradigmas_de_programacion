CurryProg "WUIjs"
 ["Prelude","HTML","Read","List","Maybe","Char","ReadShowTerm","JavaScript"]
 [CType ("WUIjs","WuiState") Private [] [CCons ("WUIjs","Ref") 2 Private [CTCons ("HTML","CgiRef") [],CTCons ("Prelude","Maybe") [CTCons ("JavaScript","JSExp") []]],CCons ("WUIjs","Hidden") 2 Private [CTCons ("Prelude","String") [],CTCons ("Prelude","Maybe") [CTCons ("JavaScript","JSExp") []]],CCons ("WUIjs","CompNode") 2 Private [CTCons ("Prelude","[]") [CTCons ("WUIjs","WuiState") []],CTCons ("Prelude","Maybe") [CTCons ("JavaScript","JSExp") []]],CCons ("WUIjs","AltNode") 2 Private [CTCons ("Prelude","(,)") [CTCons ("Prelude","Int") [],CTCons ("WUIjs","WuiState") []],CTCons ("Prelude","Maybe") [CTCons ("JavaScript","JSExp") []]]],
  CTypeSyn ("WUIjs","Rendering") Public [] (CFuncType (CTCons ("Prelude","[]") [CTCons ("HTML","HtmlExp") []]) (CTCons ("HTML","HtmlExp") [])),
  CTypeSyn ("WUIjs","WuiParams") Private [(0,"a")] (CTCons ("Prelude","(,,,)") [CTCons ("WUIjs","Rendering") [],CTCons ("Prelude","String") [],CFuncType (CTVar (0,"a")) (CTCons ("Prelude","Bool") []),CTCons ("Prelude","Maybe") [CTCons ("Prelude","String") []]]),
  CTypeSyn ("WUIjs","HtmlState") Private [] (CTCons ("Prelude","(,,)") [CTCons ("HTML","HtmlExp") [],CTCons ("Prelude","Maybe") [CTCons ("JavaScript","JSExp") []],CTCons ("WUIjs","WuiState") []]),
  CType ("WUIjs","WuiHandler") Public [] [CCons ("WUIjs","WHandler") 2 Private [CTCons ("HTML","HtmlHandler") [],CTCons ("Prelude","Maybe") [CTCons ("JavaScript","JSExp") []]]],
  CType ("WUIjs","WuiSpec") Public [(0,"a")] [CCons ("WUIjs","WuiSpec") 3 Public [CTCons ("WUIjs","WuiParams") [CTVar (0,"a")],CFuncType (CTCons ("WUIjs","WuiParams") [CTVar (0,"a")]) (CFuncType (CTVar (0,"a")) (CTCons ("WUIjs","HtmlState") [])),CFuncType (CTCons ("WUIjs","WuiParams") [CTVar (0,"a")]) (CFuncType (CTCons ("HTML","CgiEnv") []) (CFuncType (CTCons ("WUIjs","WuiState") []) (CTCons ("Prelude","(,)") [CTCons ("Prelude","Maybe") [CTVar (0,"a")],CTCons ("WUIjs","HtmlState") []])))]],
  CType ("WUIjs","WTree") Public [(0,"a")] [CCons ("WUIjs","WLeaf") 1 Public [CTVar (0,"a")],CCons ("WUIjs","WNode") 1 Public [CTCons ("Prelude","[]") [CTCons ("WUIjs","WTree") [CTVar (0,"a")]]]]]
 [CFunc ("WUIjs","cgiRef2state") 2 Private (CFuncType (CTCons ("HTML","CgiRef") []) (CFuncType (CTCons ("Prelude","Maybe") [CTCons ("JavaScript","JSExp") []]) (CTCons ("WUIjs","WuiState") []))) (CRules CFlex [CRule [CPVar (0,"cr"),CPVar (1,"js")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("WUIjs","Ref")) (CVar (0,"cr"))) (CVar (1,"js")))] []]),
  CFunc ("WUIjs","state2cgiRef") 1 Private (CFuncType (CTCons ("WUIjs","WuiState") []) (CTCons ("HTML","CgiRef") [])) (CRules CFlex [CRule [CPComb ("WUIjs","Ref") [CPVar (0,"cr"),CPVar (1,"_")]] [(CSymbol ("Prelude","success"),CVar (0,"cr"))] []]),
  CFunc ("WUIjs","value2state") 1 Private (CFuncType (CTVar (0,"a")) (CTCons ("WUIjs","WuiState") [])) (CRules CFlex [CRule [CPVar (0,"v")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("WUIjs","Hidden")) (CApply (CSymbol ("ReadShowTerm","showQTerm")) (CVar (0,"v")))) (CSymbol ("Prelude","Nothing")))] []]),
  CFunc ("WUIjs","state2value") 1 Private (CFuncType (CTCons ("WUIjs","WuiState") []) (CTVar (0,"a"))) (CRules CFlex [CRule [CPComb ("WUIjs","Hidden") [CPVar (0,"s"),CPVar (1,"_")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("ReadShowTerm","readQTerm")) (CVar (0,"s")))] []]),
  CFunc ("WUIjs","states2state") 2 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("WUIjs","WuiState") []]) (CFuncType (CTCons ("Prelude","Maybe") [CFuncType (CTCons ("Prelude","[]") [CTCons ("JavaScript","JSExp") []]) (CTCons ("JavaScript","JSExp") [])]) (CTCons ("WUIjs","WuiState") []))) (CRules CFlex [CRule [CPVar (0,"sts"),CPComb ("Prelude","Nothing") []] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("WUIjs","CompNode")) (CVar (0,"sts"))) (CSymbol ("Prelude","Nothing")))] [],CRule [CPVar (1,"sts"),CPComb ("Prelude","Just") [CPVar (2,"jscomb")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("WUIjs","CompNode")) (CVar (1,"sts"))) (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","elem")) (CSymbol ("Prelude","Nothing"))) (CVar (3,"jsOfElems")))) (CSymbol ("Prelude","Nothing"))) (CApply (CSymbol ("Prelude","Just")) (CApply (CVar (2,"jscomb")) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("Maybe","fromJust"))) (CVar (3,"jsOfElems")))))))] [CLocalPat (CPVar (3,"jsOfElems")) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("WUIjs","jsAccessToState"))) (CVar (1,"sts"))) []]]),
  CFunc ("WUIjs","state2states") 1 Private (CFuncType (CTCons ("WUIjs","WuiState") []) (CTCons ("Prelude","[]") [CTCons ("WUIjs","WuiState") []])) (CRules CFlex [CRule [CPComb ("WUIjs","CompNode") [CPVar (0,"sts"),CPVar (1,"_")]] [(CSymbol ("Prelude","success"),CVar (0,"sts"))] []]),
  CFunc ("WUIjs","altstate2state") 1 Private (CFuncType (CTCons ("Prelude","(,)") [CTCons ("Prelude","Int") [],CTCons ("WUIjs","WuiState") []]) (CTCons ("WUIjs","WuiState") [])) (CRules CFlex [CRule [CPAs (2,"alt") (CPComb ("Prelude","(,)") [CPVar (0,"_"),CPVar (1,"st")])] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("WUIjs","AltNode")) (CVar (2,"alt"))) (CApply (CSymbol ("WUIjs","jsAccessToState")) (CVar (1,"st"))))] []]),
  CFunc ("WUIjs","state2altstate") 1 Private (CFuncType (CTCons ("WUIjs","WuiState") []) (CTCons ("Prelude","(,)") [CTCons ("Prelude","Int") [],CTCons ("WUIjs","WuiState") []])) (CRules CFlex [CRule [CPComb ("WUIjs","AltNode") [CPVar (0,"alt"),CPVar (1,"_")]] [(CSymbol ("Prelude","success"),CVar (0,"alt"))] []]),
  CFunc ("WUIjs","jsAccessToState") 1 Private (CFuncType (CTCons ("WUIjs","WuiState") []) (CTCons ("Prelude","Maybe") [CTCons ("JavaScript","JSExp") []])) (CRules CFlex [CRule [CPComb ("WUIjs","Ref") [CPVar (0,"_"),CPVar (1,"js")]] [(CSymbol ("Prelude","success"),CVar (1,"js"))] [],CRule [CPComb ("WUIjs","Hidden") [CPVar (2,"_"),CPVar (3,"js")]] [(CSymbol ("Prelude","success"),CVar (3,"js"))] [],CRule [CPComb ("WUIjs","CompNode") [CPVar (4,"_"),CPVar (5,"js")]] [(CSymbol ("Prelude","success"),CVar (5,"js"))] [],CRule [CPComb ("WUIjs","AltNode") [CPVar (6,"_"),CPVar (7,"js")]] [(CSymbol ("Prelude","success"),CVar (7,"js"))] []]),
  CFunc ("WUIjs","setNoJSAccessInWuiState") 1 Private (CFuncType (CTCons ("WUIjs","WuiState") []) (CTCons ("WUIjs","WuiState") [])) (CRules CFlex [CRule [CPComb ("WUIjs","Ref") [CPVar (0,"cref"),CPVar (1,"_")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("WUIjs","Ref")) (CVar (0,"cref"))) (CSymbol ("Prelude","Nothing")))] [],CRule [CPComb ("WUIjs","Hidden") [CPVar (2,"s"),CPVar (3,"_")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("WUIjs","Hidden")) (CVar (2,"s"))) (CSymbol ("Prelude","Nothing")))] [],CRule [CPComb ("WUIjs","CompNode") [CPVar (4,"sts"),CPVar (5,"_")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("WUIjs","CompNode")) (CVar (4,"sts"))) (CSymbol ("Prelude","Nothing")))] [],CRule [CPComb ("WUIjs","AltNode") [CPVar (6,"alts"),CPVar (7,"_")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("WUIjs","AltNode")) (CVar (6,"alts"))) (CSymbol ("Prelude","Nothing")))] []]),
  CFunc ("WUIjs","state2refname") 1 Private (CFuncType (CTCons ("WUIjs","WuiState") []) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CRules CFlex [CRule [CPComb ("WUIjs","Ref") [CPVar (0,"cref"),CPVar (1,"_")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("HTML","idOfCgiRef")) (CVar (0,"cref")))] [],CRule [CPComb ("WUIjs","Hidden") [CPVar (2,"_"),CPVar (3,"_")]] [(CSymbol ("Prelude","success"),CSymbol ("Prelude","[]"))] [],CRule [CPComb ("WUIjs","CompNode") [CPVar (4,"ws"),CPVar (5,"_")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CSymbol ("Prelude","[]"))))))) (CApply (CApply (CSymbol ("Prelude","concatMap")) (CApply (CApply (CSymbol ("Prelude",".")) (CLambda [CPVar (6,"x0")] (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '_'))) (CSymbol ("Prelude","[]")))) (CVar (6,"x0"))))) (CSymbol ("WUIjs","state2refname")))) (CVar (4,"ws"))))] [],CRule [CPComb ("WUIjs","AltNode") [CPComb ("Prelude","(,)") [CPVar (7,"i"),CPVar (8,"s")],CPVar (9,"_")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '_'))) (CSymbol ("Prelude","[]"))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("Prelude","show")) (CVar (7,"i")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '_'))) (CSymbol ("Prelude","[]")))) (CApply (CSymbol ("WUIjs","state2refname")) (CVar (8,"s"))))))] []]),
  CFunc ("WUIjs","renderOf") 1 Private (CFuncType (CTCons ("Prelude","(,,,)") [CTVar (0,"a"),CTVar (1,"b"),CTVar (2,"c"),CTVar (3,"d")]) (CTVar (0,"a"))) (CRules CFlex [CRule [CPComb ("Prelude","(,,,)") [CPVar (0,"render"),CPVar (1,"_"),CPVar (2,"_"),CPVar (3,"_")]] [(CSymbol ("Prelude","success"),CVar (0,"render"))] []]),
  CFunc ("WUIjs","errorOf") 1 Private (CFuncType (CTCons ("Prelude","(,,,)") [CTVar (0,"a"),CTVar (1,"b"),CTVar (2,"c"),CTVar (3,"d")]) (CTVar (1,"b"))) (CRules CFlex [CRule [CPComb ("Prelude","(,,,)") [CPVar (0,"_"),CPVar (1,"err"),CPVar (2,"_"),CPVar (3,"_")]] [(CSymbol ("Prelude","success"),CVar (1,"err"))] []]),
  CFunc ("WUIjs","conditionOf") 1 Private (CFuncType (CTCons ("Prelude","(,,,)") [CTVar (0,"a"),CTVar (1,"b"),CTVar (2,"c"),CTVar (3,"d")]) (CTVar (2,"c"))) (CRules CFlex [CRule [CPComb ("Prelude","(,,,)") [CPVar (0,"_"),CPVar (1,"_"),CPVar (2,"c"),CPVar (3,"_")]] [(CSymbol ("Prelude","success"),CVar (2,"c"))] []]),
  CFunc ("WUIjs","jsConditionOf") 1 Private (CFuncType (CTCons ("Prelude","(,,,)") [CTVar (0,"a"),CTVar (1,"b"),CTVar (2,"c"),CTVar (3,"d")]) (CTVar (3,"d"))) (CRules CFlex [CRule [CPComb ("Prelude","(,,,)") [CPVar (0,"_"),CPVar (1,"_"),CPVar (2,"_"),CPVar (3,"jsc")]] [(CSymbol ("Prelude","success"),CVar (3,"jsc"))] []]),
  CFunc ("WUIjs","wuiHandler2button") 2 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("WUIjs","WuiHandler") []) (CTCons ("HTML","HtmlExp") []))) (CRules CFlex [CRule [CPVar (0,"title"),CPComb ("WUIjs","WHandler") [CPVar (1,"handler"),CPVar (2,"mbjs")]] [(CSymbol ("Prelude","success"),CLetDecl [CLocalPat (CPVar (3,"bt")) (CApply (CApply (CSymbol ("HTML","button")) (CVar (0,"title"))) (CVar (1,"handler"))) []] (CApply (CApply (CApply (CSymbol ("Prelude","maybe")) (CVar (3,"bt"))) (CLambda [CPVar (4,"jse")] (CApply (CApply (CSymbol ("HTML","addAttr")) (CVar (3,"bt"))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'k'))) (CSymbol ("Prelude","[]")))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'A'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'w'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'S'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'b'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '='))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]"))))))))))))))))))))) (CApply (CSymbol ("JavaScript","showJSExp")) (CVar (4,"jse")))))))) (CVar (2,"mbjs"))))] []]),
  CFunc ("WUIjs","withRendering") 2 Public (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (0,"a")]) (CFuncType (CFuncType (CTCons ("Prelude","[]") [CTCons ("HTML","HtmlExp") []]) (CTCons ("HTML","HtmlExp") [])) (CTCons ("WUIjs","WuiSpec") [CTVar (0,"a")]))) (CRules CFlex [CRule [CPComb ("WUIjs","WuiSpec") [CPComb ("Prelude","(,,,)") [CPVar (0,"_"),CPVar (1,"errmsg"),CPVar (2,"legal"),CPVar (3,"jsck")],CPVar (4,"showhtml"),CPVar (5,"readvalue")],CPVar (6,"render")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("WUIjs","WuiSpec")) (CApply (CApply (CApply (CApply (CSymbol ("Prelude","(,,,)")) (CVar (6,"render"))) (CVar (1,"errmsg"))) (CVar (2,"legal"))) (CVar (3,"jsck")))) (CVar (4,"showhtml"))) (CVar (5,"readvalue")))] []]),
  CFunc ("WUIjs","withError") 2 Public (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (0,"a")]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("WUIjs","WuiSpec") [CTVar (0,"a")]))) (CRules CFlex [CRule [CPComb ("WUIjs","WuiSpec") [CPComb ("Prelude","(,,,)") [CPVar (0,"render"),CPVar (1,"_"),CPVar (2,"legal"),CPVar (3,"jsck")],CPVar (4,"showhtml"),CPVar (5,"readvalue")],CPVar (6,"errmsg")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("WUIjs","WuiSpec")) (CApply (CApply (CApply (CApply (CSymbol ("Prelude","(,,,)")) (CVar (0,"render"))) (CVar (6,"errmsg"))) (CVar (2,"legal"))) (CVar (3,"jsck")))) (CVar (4,"showhtml"))) (CVar (5,"readvalue")))] []]),
  CFunc ("WUIjs","withCondition") 2 Public (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (0,"a")]) (CFuncType (CFuncType (CTVar (0,"a")) (CTCons ("Prelude","Bool") [])) (CTCons ("WUIjs","WuiSpec") [CTVar (0,"a")]))) (CRules CFlex [CRule [CPComb ("WUIjs","WuiSpec") [CPComb ("Prelude","(,,,)") [CPVar (0,"render"),CPVar (1,"errmsg"),CPVar (2,"_"),CPVar (3,"_")],CPVar (4,"showhtml"),CPVar (5,"readvalue")],CPVar (6,"legal")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("WUIjs","WuiSpec")) (CApply (CApply (CApply (CApply (CSymbol ("Prelude","(,,,)")) (CVar (0,"render"))) (CVar (1,"errmsg"))) (CVar (6,"legal"))) (CSymbol ("Prelude","Nothing")))) (CVar (4,"showhtml"))) (CVar (5,"readvalue")))] []]),
  CFunc ("WUIjs","withConditionJS") 2 Public (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (0,"a")]) (CFuncType (CFuncType (CTVar (0,"a")) (CTCons ("Prelude","Bool") [])) (CTCons ("WUIjs","WuiSpec") [CTVar (0,"a")]))) (CRules CFlex [CRule [CPComb ("WUIjs","WuiSpec") [CPComb ("Prelude","(,,,)") [CPVar (0,"render"),CPVar (1,"errmsg"),CPVar (2,"_"),CPVar (3,"_")],CPVar (4,"showhtml"),CPVar (5,"readvalue")],CPVar (6,"legal")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("WUIjs","WuiSpec")) (CApply (CApply (CApply (CApply (CSymbol ("Prelude","(,,,)")) (CVar (0,"render"))) (CVar (1,"errmsg"))) (CVar (6,"legal"))) (CSymbol ("Prelude","Nothing")))) (CVar (4,"showhtml"))) (CVar (5,"readvalue")))] []]),
  CFunc ("WUIjs","withConditionJSName") 2 Public (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (0,"a")]) (CFuncType (CTCons ("Prelude","(,)") [CFuncType (CTVar (0,"a")) (CTCons ("Prelude","Bool") []),CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]) (CTCons ("WUIjs","WuiSpec") [CTVar (0,"a")]))) (CRules CFlex [CRule [CPComb ("WUIjs","WuiSpec") [CPComb ("Prelude","(,,,)") [CPVar (0,"render"),CPVar (1,"errmsg"),CPVar (2,"_"),CPVar (3,"_")],CPVar (4,"showhtml"),CPVar (5,"readvalue")],CPComb ("Prelude","(,)") [CPVar (6,"legal"),CPVar (7,"jsck")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("WUIjs","WuiSpec")) (CApply (CApply (CApply (CApply (CSymbol ("Prelude","(,,,)")) (CVar (0,"render"))) (CVar (1,"errmsg"))) (CVar (6,"legal"))) (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CSymbol ("Prelude","null")) (CVar (7,"jsck")))) (CSymbol ("Prelude","Nothing"))) (CApply (CSymbol ("Prelude","Just")) (CVar (7,"jsck")))))) (CVar (4,"showhtml"))) (CVar (5,"readvalue")))] []]),
  CFunc ("WUIjs","transformWSpec") 2 Public (CFuncType (CTCons ("Prelude","(,)") [CFuncType (CTVar (0,"a")) (CTVar (1,"b")),CFuncType (CTVar (1,"b")) (CTVar (0,"a"))]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (0,"a")]) (CTCons ("WUIjs","WuiSpec") [CTVar (1,"b")]))) (CRules CFlex [CRule [CPComb ("Prelude","(,)") [CPVar (0,"a2b"),CPVar (1,"b2a")],CPComb ("WUIjs","WuiSpec") [CPVar (2,"wparamsa"),CPVar (3,"showhtmla"),CPVar (4,"readvaluea")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("WUIjs","WuiSpec")) (CApply (CSymbol ("WUIjs","transParamA2B")) (CVar (2,"wparamsa")))) (CLambda [CPVar (5,"wparamsb"),CPVar (6,"b")] (CApply (CSymbol ("WUIjs","setNoJSAccessInHtmlState")) (CApply (CApply (CVar (3,"showhtmla")) (CApply (CSymbol ("WUIjs","transParamB2A")) (CVar (5,"wparamsb")))) (CApply (CVar (1,"b2a")) (CVar (6,"b"))))))) (CLambda [CPVar (7,"wparamsb"),CPVar (8,"env"),CPVar (9,"wst")] (CLetDecl [CLocalPat (CPComb ("Prelude","(,)") [CPVar (10,"mba"),CPVar (11,"errstate")]) (CApply (CApply (CApply (CVar (4,"readvaluea")) (CApply (CSymbol ("WUIjs","transParamB2A")) (CVar (7,"wparamsb")))) (CVar (8,"env"))) (CVar (9,"wst"))) []] (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CApply (CSymbol ("Prelude","maybe")) (CSymbol ("Prelude","Nothing"))) (CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Prelude","Just"))) (CVar (0,"a2b")))) (CVar (10,"mba")))) (CApply (CSymbol ("WUIjs","setNoJSAccessInHtmlState")) (CVar (11,"errstate")))))))] [CLocalFunc (CFunc ("WUIjs","transParamA2B") 1 Private (CFuncType (CTCons ("Prelude","(,,,)") [CFuncType (CTCons ("Prelude","[]") [CTCons ("HTML","HtmlExp") []]) (CTCons ("HTML","HtmlExp") []),CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CFuncType (CTVar (2,"_188")) (CTCons ("Prelude","Bool") []),CTCons ("Prelude","Maybe") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]]) (CTCons ("Prelude","(,,,)") [CFuncType (CTCons ("Prelude","[]") [CTCons ("HTML","HtmlExp") []]) (CTCons ("HTML","HtmlExp") []),CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CFuncType (CTVar (3,"_186")) (CTCons ("Prelude","Bool") []),CTCons ("Prelude","Maybe") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]])) (CRules CFlex [CRule [CPComb ("Prelude","(,,,)") [CPVar (5,"render"),CPVar (6,"errmsg"),CPVar (7,"legal"),CPVar (8,"_")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CSymbol ("Prelude","(,,,)")) (CVar (5,"render"))) (CVar (6,"errmsg"))) (CApply (CApply (CSymbol ("Prelude",".")) (CVar (7,"legal"))) (CVar (1,"b2a")))) (CSymbol ("Prelude","Nothing")))] []])),CLocalFunc (CFunc ("WUIjs","transParamB2A") 1 Private (CFuncType (CTCons ("Prelude","(,,,)") [CFuncType (CTCons ("Prelude","[]") [CTCons ("HTML","HtmlExp") []]) (CTCons ("HTML","HtmlExp") []),CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CFuncType (CTVar (2,"_186")) (CTCons ("Prelude","Bool") []),CTCons ("Prelude","Maybe") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]]) (CTCons ("Prelude","(,,,)") [CFuncType (CTCons ("Prelude","[]") [CTCons ("HTML","HtmlExp") []]) (CTCons ("HTML","HtmlExp") []),CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CFuncType (CTVar (3,"_188")) (CTCons ("Prelude","Bool") []),CTCons ("Prelude","Maybe") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]])) (CRules CFlex [CRule [CPComb ("Prelude","(,,,)") [CPVar (5,"render"),CPVar (6,"errmsg"),CPVar (7,"legal"),CPVar (8,"_")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CSymbol ("Prelude","(,,,)")) (CVar (5,"render"))) (CVar (6,"errmsg"))) (CApply (CApply (CSymbol ("Prelude",".")) (CVar (7,"legal"))) (CVar (0,"a2b")))) (CApply (CSymbol ("WUIjs","jsConditionOf")) (CVar (2,"wparamsa"))))] []])),CLocalFunc (CFunc ("WUIjs","setNoJSAccessInHtmlState") 1 Private (CFuncType (CTCons ("Prelude","(,,)") [CTVar (0,"a"),CTVar (1,"b"),CTCons ("WUIjs","WuiState") []]) (CTCons ("Prelude","(,,)") [CTVar (0,"a"),CTVar (1,"b"),CTCons ("WUIjs","WuiState") []])) (CRules CFlex [CRule [CPComb ("Prelude","(,,)") [CPVar (5,"hexp"),CPVar (6,"jsexp"),CPVar (7,"ws")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","(,,)")) (CVar (5,"hexp"))) (CVar (6,"jsexp"))) (CApply (CSymbol ("WUIjs","setNoJSAccessInWuiState")) (CVar (7,"ws"))))] []]))]]),
  CFunc ("WUIjs","adaptWSpec") 1 Public (CFuncType (CFuncType (CTVar (0,"a")) (CTVar (1,"b"))) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (0,"a")]) (CTCons ("WUIjs","WuiSpec") [CTVar (1,"b")]))) (CRules CFlex [CRule [CPVar (0,"a2b")] [(CSymbol ("Prelude","success"),CApply (CSymbol ("WUIjs","transformWSpec")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CVar (0,"a2b"))) (CApply (CSymbol ("WUIjs","invert")) (CVar (0,"a2b")))))] []]),
  CFunc ("WUIjs","invert") 1 Private (CFuncType (CFuncType (CTVar (0,"a")) (CTVar (1,"b"))) (CFuncType (CTVar (1,"b")) (CTVar (0,"a")))) (CRules CFlex [CRule [CPVar (0,"f")] [(CSymbol ("Prelude","success"),CSymbol ("WUIjs","f_invert"))] [CLocalFunc (CFunc ("WUIjs","local_f") 1 Private (CFuncType (CTVar (2,"_225")) (CTVar (3,"_224"))) (CRules CFlex [CRule [CPVar (1,"x")] [(CSymbol ("Prelude","success"),CApply (CVar (0,"f")) (CVar (1,"x")))] []])),CLocalFunc (CFunc ("WUIjs","f_invert") 1 Private (CFuncType (CTVar (2,"_224")) (CTVar (3,"_225"))) (CRules CFlex [CRule [CPVar (1,"y")] [(CApply (CApply (CSymbol ("Prelude","=:<=")) (CApply (CSymbol ("WUIjs","local_f")) (CVar (2,"x")))) (CVar (1,"y")),CVar (2,"x"))] [CLocalVar (2,"x")]]))]]),
  CFunc ("WUIjs","wHidden") 0 Public (CTCons ("WUIjs","WuiSpec") [CTVar (0,"a")]) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("WUIjs","WuiSpec")) (CApply (CApply (CApply (CApply (CSymbol ("Prelude","(,,,)")) (CSymbol ("Prelude","head"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '?'))) (CSymbol ("Prelude","[]")))) (CApply (CSymbol ("Prelude","const")) (CSymbol ("Prelude","True")))) (CSymbol ("Prelude","Nothing")))) (CLambda [CPVar (0,"_"),CPVar (1,"v")] (CApply (CApply (CApply (CSymbol ("Prelude","(,,)")) (CSymbol ("HTML","hempty"))) (CSymbol ("Prelude","Nothing"))) (CApply (CSymbol ("WUIjs","value2state")) (CVar (1,"v")))))) (CLambda [CPVar (2,"_"),CPVar (3,"_"),CPVar (4,"s")] (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CSymbol ("Prelude","Just")) (CApply (CSymbol ("WUIjs","state2value")) (CVar (4,"s"))))) (CApply (CApply (CApply (CSymbol ("Prelude","(,,)")) (CSymbol ("HTML","hempty"))) (CSymbol ("Prelude","Nothing"))) (CVar (4,"s"))))))] []]),
  CFunc ("WUIjs","wConstant") 1 Public (CFuncType (CFuncType (CTVar (0,"a")) (CTCons ("HTML","HtmlExp") [])) (CTCons ("WUIjs","WuiSpec") [CTVar (0,"a")])) (CRules CFlex [CRule [CPVar (0,"showhtml")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("WUIjs","WuiSpec")) (CApply (CApply (CApply (CApply (CSymbol ("Prelude","(,,,)")) (CSymbol ("Prelude","head"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '?'))) (CSymbol ("Prelude","[]")))) (CApply (CSymbol ("Prelude","const")) (CSymbol ("Prelude","True")))) (CSymbol ("Prelude","Nothing")))) (CLambda [CPVar (1,"wparams"),CPVar (2,"v")] (CApply (CApply (CApply (CSymbol ("Prelude","(,,)")) (CApply (CApply (CSymbol ("WUIjs","renderOf")) (CVar (1,"wparams"))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CVar (0,"showhtml")) (CVar (2,"v")))) (CSymbol ("Prelude","[]"))))) (CSymbol ("Prelude","Nothing"))) (CApply (CSymbol ("WUIjs","value2state")) (CVar (2,"v")))))) (CLambda [CPVar (3,"wparams"),CPVar (4,"_"),CPVar (5,"s")] (CLetDecl [CLocalPat (CPVar (6,"v")) (CApply (CSymbol ("WUIjs","state2value")) (CVar (5,"s"))) []] (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CSymbol ("Prelude","Just")) (CVar (6,"v")))) (CApply (CApply (CApply (CSymbol ("Prelude","(,,)")) (CApply (CApply (CSymbol ("WUIjs","renderOf")) (CVar (3,"wparams"))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CVar (0,"showhtml")) (CVar (6,"v")))) (CSymbol ("Prelude","[]"))))) (CSymbol ("Prelude","Nothing"))) (CVar (5,"s")))))))] []]),
  CFunc ("WUIjs","wInt") 0 Public (CTCons ("WUIjs","WuiSpec") [CTCons ("Prelude","Int") []]) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("WUIjs","WuiSpec")) (CApply (CApply (CApply (CApply (CSymbol ("Prelude","(,,,)")) (CSymbol ("Prelude","head"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'I'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'g'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'g'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ':'))) (CSymbol ("Prelude","[]"))))))))))))))))))) (CApply (CSymbol ("Prelude","const")) (CSymbol ("Prelude","True")))) (CSymbol ("Prelude","Nothing")))) (CLambda [CPComb ("Prelude","(,,,)") [CPVar (0,"render"),CPVar (1,"errmsg"),CPVar (2,"_"),CPVar (3,"jsck")],CPVar (4,"v")] (CApply (CApply (CApply (CApply (CSymbol ("WUIjs","intWidget")) (CVar (1,"errmsg"))) (CVar (3,"jsck"))) (CVar (0,"render"))) (CApply (CSymbol ("WUIjs","showInt")) (CVar (4,"v")))))) (CLambda [CPComb ("Prelude","(,,,)") [CPVar (5,"render"),CPVar (6,"errmsg"),CPVar (7,"legal"),CPVar (8,"jsck")],CPVar (9,"env"),CPVar (10,"s")] (CLetDecl [CLocalPat (CPVar (11,"input")) (CApply (CVar (9,"env")) (CApply (CSymbol ("WUIjs","state2cgiRef")) (CVar (10,"s")))) [],CLocalFunc (CFunc ("WUIjs","renderr") 1 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("HTML","HtmlExp") []]) (CTCons ("HTML","HtmlExp") [])) (CRules CFlex [CRule [CPVar (12,"hexps")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CApply (CApply (CSymbol ("WUIjs","addErrMsg")) (CSymbol ("Prelude","False"))) (CSymbol ("Prelude","False"))) (CSymbol ("Prelude","False"))) (CVar (6,"errmsg"))) (CSymbol ("Prelude","[]"))) (CApply (CVar (5,"render")) (CVar (12,"hexps"))))] []]))] (CApply (CApply (CApply (CSymbol ("Prelude","maybe")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CSymbol ("Prelude","Nothing"))) (CApply (CApply (CApply (CApply (CSymbol ("WUIjs","intWidget")) (CVar (6,"errmsg"))) (CVar (8,"jsck"))) (CSymbol ("WUIjs","renderr"))) (CVar (11,"input"))))) (CLambda [CPVar (12,"v")] (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CVar (7,"legal")) (CVar (12,"v")))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CSymbol ("Prelude","Just")) (CVar (12,"v")))) (CApply (CApply (CApply (CApply (CSymbol ("WUIjs","intWidget")) (CVar (6,"errmsg"))) (CVar (8,"jsck"))) (CVar (5,"render"))) (CVar (11,"input"))))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CSymbol ("Prelude","Nothing"))) (CApply (CApply (CApply (CApply (CSymbol ("WUIjs","intWidget")) (CVar (6,"errmsg"))) (CVar (8,"jsck"))) (CSymbol ("WUIjs","renderr"))) (CVar (11,"input"))))))) (CApply (CSymbol ("WUIjs","readMaybeInt")) (CApply (CSymbol ("WUIjs","stripSpaces")) (CVar (11,"input"))))))))] [CLocalFunc (CFunc ("WUIjs","showInt") 1 Private (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CRules CFlex [CRule [CPVar (0,"i")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","<")) (CVar (0,"i"))) (CLit (CIntc 0)))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '-'))) (CApply (CSymbol ("Prelude","show")) (CApply (CSymbol ("Prelude","negate")) (CVar (0,"i")))))) (CApply (CSymbol ("Prelude","show")) (CVar (0,"i"))))] []])),CLocalFunc (CFunc ("WUIjs","intWidget") 4 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("Prelude","Maybe") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]) (CFuncType (CFuncType (CTCons ("Prelude","[]") [CTCons ("HTML","HtmlExp") []]) (CTCons ("HTML","HtmlExp") [])) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","(,,)") [CTCons ("HTML","HtmlExp") [],CTCons ("Prelude","Maybe") [CTCons ("JavaScript","JSExp") []],CTCons ("WUIjs","WuiState") []]))))) (CRules CFlex [CRule [CPVar (0,"errmsg"),CPVar (1,"mbjs"),CPVar (2,"render"),CPVar (3,"s")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","(,,)")) (CApply (CApply (CApply (CApply (CApply (CApply (CSymbol ("WUIjs","addErrMsg")) (CSymbol ("Prelude","True"))) (CSymbol ("Prelude","True"))) (CSymbol ("Prelude","False"))) (CVar (0,"errmsg"))) (CVar (5,"refname"))) (CApply (CVar (2,"render")) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("HTML","addAttr")) (CApply (CApply (CSymbol ("HTML","addAttr")) (CApply (CApply (CSymbol ("HTML","textfield")) (CVar (4,"ref"))) (CVar (3,"s")))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'z'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]"))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '6'))) (CSymbol ("Prelude","[]")))))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'b'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CSymbol ("Prelude","[]"))))))))) (CApply (CSymbol ("JavaScript","showJSExp")) (CVar (9,"jsCheckCall")))))) (CSymbol ("Prelude","[]")))))) (CApply (CSymbol ("Prelude","Just")) (CVar (9,"jsCheckCall")))) (CApply (CApply (CSymbol ("WUIjs","cgiRef2state")) (CVar (4,"ref"))) (CApply (CSymbol ("Prelude","Just")) (CVar (6,"jsaccess")))))] [CLocalVar (4,"ref"),CLocalPat (CPVar (5,"refname")) (CApply (CSymbol ("HTML","idOfCgiRef")) (CVar (4,"ref"))) [],CLocalPat (CPVar (6,"jsaccess")) (CApply (CApply (CSymbol ("JavaScript","JSFCall")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'V'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'O'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'f'))) (CSymbol ("Prelude","[]"))))))))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("JavaScript","JSString")) (CVar (5,"refname")))) (CSymbol ("Prelude","[]")))) [],CLocalPat (CPVar (7,"parseIntCheckCall")) (CApply (CApply (CSymbol ("JavaScript","JSFCall")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'I'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'C'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'h'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'k'))) (CSymbol ("Prelude","[]")))))))))))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("JavaScript","JSString")) (CVar (5,"refname")))) (CSymbol ("Prelude","[]")))) [],CLocalPat (CPVar (8,"intCheckCall")) (CApply (CApply (CApply (CSymbol ("Prelude","maybe")) (CVar (7,"parseIntCheckCall"))) (CLambda [CPVar (10,"jsf")] (CApply (CApply (CApply (CSymbol ("JavaScript","JSOp")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '&'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '&'))) (CSymbol ("Prelude","[]"))))) (CVar (7,"parseIntCheckCall"))) (CApply (CApply (CSymbol ("JavaScript","JSFCall")) (CVar (10,"jsf"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (6,"jsaccess"))) (CSymbol ("Prelude","[]"))))))) (CVar (1,"mbjs"))) [],CLocalPat (CPVar (9,"jsCheckCall")) (CApply (CApply (CSymbol ("JavaScript","JSFCall")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'E'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'C'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'N'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]")))))))))))))))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("JavaScript","JSString")) (CVar (5,"refname")))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (8,"intCheckCall"))) (CSymbol ("Prelude","[]"))))) []]]))]]),
  CFunc ("WUIjs","stripSpaces") 0 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Prelude","reverse"))) (CApply (CApply (CSymbol ("Prelude",".")) (CApply (CSymbol ("Prelude","dropWhile")) (CSymbol ("Char","isSpace")))) (CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Prelude","reverse"))) (CApply (CSymbol ("Prelude","dropWhile")) (CSymbol ("Char","isSpace"))))))] []]),
  CFunc ("WUIjs","readMaybeInt") 1 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","Maybe") [CTCons ("Prelude","Int") []])) (CRules CFlex [CRule [CPComb ("Prelude","[]") []] [(CSymbol ("Prelude","success"),CSymbol ("Prelude","Nothing"))] [],CRule [CPComb ("Prelude",":") [CPVar (0,"v"),CPVar (1,"s")]] [(CApply (CApply (CSymbol ("Prelude","==")) (CVar (0,"v"))) (CLit (CCharc '-')),CApply (CApply (CApply (CSymbol ("Prelude","maybe")) (CSymbol ("Prelude","Nothing"))) (CLambda [CPVar (2,"i")] (CApply (CSymbol ("Prelude","Just")) (CApply (CSymbol ("Prelude","negate")) (CVar (2,"i")))))) (CApply (CApply (CSymbol ("WUIjs","acc")) (CLit (CIntc 0))) (CVar (1,"s")))),(CApply (CSymbol ("Char","isDigit")) (CVar (0,"v")),CApply (CApply (CSymbol ("WUIjs","acc")) (CLit (CIntc 0))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (0,"v"))) (CVar (1,"s")))),(CSymbol ("Prelude","otherwise"),CSymbol ("Prelude","Nothing"))] [CLocalFunc (CFunc ("WUIjs","acc") 2 Private (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","Maybe") [CTCons ("Prelude","Int") []]))) (CRules CFlex [CRule [CPVar (2,"n"),CPComb ("Prelude","[]") []] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Prelude","Just")) (CVar (2,"n")))] [],CRule [CPVar (3,"n"),CPComb ("Prelude",":") [CPVar (4,"c"),CPVar (5,"cs")]] [(CApply (CSymbol ("Char","isDigit")) (CVar (4,"c")),CApply (CApply (CSymbol ("WUIjs","acc")) (CApply (CApply (CSymbol ("Prelude","-")) (CApply (CApply (CSymbol ("Prelude","+")) (CApply (CApply (CSymbol ("Prelude","*")) (CLit (CIntc 10))) (CVar (3,"n")))) (CApply (CSymbol ("Prelude","ord")) (CVar (4,"c"))))) (CApply (CSymbol ("Prelude","ord")) (CLit (CCharc '0'))))) (CVar (5,"cs"))),(CSymbol ("Prelude","otherwise"),CSymbol ("Prelude","Nothing"))] []]))]]),
  CFunc ("WUIjs","checkLegalInput") 4 Private (CFuncType (CTCons ("Prelude","(,,,)") [CFuncType (CTCons ("Prelude","[]") [CTCons ("HTML","HtmlExp") []]) (CTCons ("HTML","HtmlExp") []),CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CFuncType (CTVar (0,"a")) (CTCons ("Prelude","Bool") []),CTCons ("Prelude","Maybe") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]]) (CFuncType (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("Prelude","Maybe") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]) (CFuncType (CFuncType (CTCons ("Prelude","[]") [CTCons ("HTML","HtmlExp") []]) (CTCons ("HTML","HtmlExp") [])) (CFuncType (CTVar (0,"a")) (CTCons ("Prelude","(,,)") [CTCons ("HTML","HtmlExp") [],CTCons ("Prelude","Maybe") [CTCons ("JavaScript","JSExp") []],CTCons ("WUIjs","WuiState") []]))))) (CFuncType (CTCons ("Prelude","Bool") []) (CFuncType (CTVar (0,"a")) (CTCons ("Prelude","(,)") [CTCons ("Prelude","Maybe") [CTVar (0,"a")],CTCons ("Prelude","(,,)") [CTCons ("HTML","HtmlExp") [],CTCons ("Prelude","Maybe") [CTCons ("JavaScript","JSExp") []],CTCons ("WUIjs","WuiState") []]]))))) (CRules CFlex [CRule [CPComb ("Prelude","(,,,)") [CPVar (0,"render"),CPVar (1,"errmsg"),CPVar (2,"legal"),CPVar (3,"jsck")],CPVar (4,"value2widget"),CPVar (5,"errorastable"),CPVar (6,"value")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CVar (2,"legal")) (CVar (6,"value")))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CSymbol ("Prelude","Just")) (CVar (6,"value")))) (CApply (CApply (CApply (CApply (CVar (4,"value2widget")) (CVar (1,"errmsg"))) (CVar (3,"jsck"))) (CVar (0,"render"))) (CVar (6,"value"))))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CSymbol ("Prelude","Nothing"))) (CApply (CApply (CApply (CApply (CVar (4,"value2widget")) (CVar (1,"errmsg"))) (CVar (3,"jsck"))) (CLambda [CPVar (7,"hes")] (CApply (CApply (CApply (CApply (CApply (CApply (CSymbol ("WUIjs","addErrMsg")) (CSymbol ("Prelude","False"))) (CSymbol ("Prelude","False"))) (CVar (5,"errorastable"))) (CVar (1,"errmsg"))) (CSymbol ("Prelude","[]"))) (CApply (CVar (0,"render")) (CVar (7,"hes")))))) (CVar (6,"value")))))] []]),
  CFunc ("WUIjs","filterStringInput") 0 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CSymbol ("WUIjs","removeCRs"))] []]),
  CFunc ("WUIjs","removeCRs") 1 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CRules CFlex [CRule [CPComb ("Prelude","[]") []] [(CSymbol ("Prelude","success"),CSymbol ("Prelude","[]"))] [],CRule [CPComb ("Prelude",":") [CPVar (0,"c"),CPComb ("Prelude","[]") []]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",":")) (CVar (0,"c"))) (CSymbol ("Prelude","[]")))] [],CRule [CPComb ("Prelude",":") [CPVar (1,"c1"),CPComb ("Prelude",":") [CPVar (2,"c2"),CPVar (3,"cs")]]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","&&")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (1,"c1"))) (CLit (CCharc '\r')))) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (2,"c2"))) (CLit (CCharc '\n'))))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CApply (CSymbol ("WUIjs","removeCRs")) (CVar (3,"cs"))))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (1,"c1"))) (CApply (CSymbol ("WUIjs","removeCRs")) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (2,"c2"))) (CVar (3,"cs"))))))] []]),
  CFunc ("WUIjs","wString") 0 Public (CTCons ("WUIjs","WuiSpec") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("WUIjs","wStringAttrs")) (CSymbol ("Prelude","[]")))] []]),
  CFunc ("WUIjs","wStringSize") 1 Public (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("WUIjs","WuiSpec") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]])) (CRules CFlex [CRule [CPVar (0,"size")] [(CSymbol ("Prelude","success"),CApply (CSymbol ("WUIjs","wStringAttrs")) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'z'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]"))))))) (CApply (CSymbol ("Prelude","show")) (CVar (0,"size"))))) (CSymbol ("Prelude","[]"))))] []]),
  CFunc ("WUIjs","wStringAttrs") 1 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]]) (CTCons ("WUIjs","WuiSpec") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]])) (CRules CFlex [CRule [CPVar (0,"attrs")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("WUIjs","WuiSpec")) (CApply (CApply (CApply (CApply (CSymbol ("Prelude","(,,,)")) (CSymbol ("Prelude","head"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '?'))) (CSymbol ("Prelude","[]")))) (CApply (CSymbol ("Prelude","const")) (CSymbol ("Prelude","True")))) (CSymbol ("Prelude","Nothing")))) (CLambda [CPComb ("Prelude","(,,,)") [CPVar (1,"render"),CPVar (2,"errmsg"),CPVar (3,"_"),CPVar (4,"jsck")],CPVar (5,"v")] (CApply (CApply (CApply (CApply (CSymbol ("WUIjs","stringWidget")) (CVar (2,"errmsg"))) (CVar (4,"jsck"))) (CVar (1,"render"))) (CVar (5,"v"))))) (CLambda [CPVar (6,"wparams"),CPVar (7,"env"),CPVar (8,"s")] (CApply (CApply (CApply (CApply (CSymbol ("WUIjs","checkLegalInput")) (CVar (6,"wparams"))) (CSymbol ("WUIjs","stringWidget"))) (CSymbol ("Prelude","False"))) (CApply (CSymbol ("WUIjs","filterStringInput")) (CApply (CVar (7,"env")) (CApply (CSymbol ("WUIjs","state2cgiRef")) (CVar (8,"s"))))))))] [CLocalFunc (CFunc ("WUIjs","stringWidget") 4 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("Prelude","Maybe") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]) (CFuncType (CFuncType (CTCons ("Prelude","[]") [CTCons ("HTML","HtmlExp") []]) (CTCons ("HTML","HtmlExp") [])) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","(,,)") [CTCons ("HTML","HtmlExp") [],CTCons ("Prelude","Maybe") [CTCons ("JavaScript","JSExp") []],CTCons ("WUIjs","WuiState") []]))))) (CRules CFlex [CRule [CPVar (1,"errmsg"),CPVar (2,"mbjs"),CPVar (3,"render"),CPVar (4,"v")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","(,,)")) (CApply (CApply (CApply (CApply (CApply (CApply (CSymbol ("WUIjs","addErrMsg")) (CApply (CSymbol ("Maybe","isJust")) (CVar (8,"jsCheckCall")))) (CSymbol ("Prelude","True"))) (CSymbol ("Prelude","False"))) (CVar (1,"errmsg"))) (CVar (6,"refname"))) (CApply (CVar (3,"render")) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CApply (CSymbol ("Prelude","foldr")) (CApply (CSymbol ("Prelude","flip")) (CSymbol ("HTML","addAttr")))) (CApply (CApply (CSymbol ("HTML","textfield")) (CVar (5,"ref"))) (CVar (4,"v")))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (0,"attrs"))) (CVar (9,"onblurAttr"))))) (CSymbol ("Prelude","[]")))))) (CVar (8,"jsCheckCall"))) (CApply (CApply (CSymbol ("WUIjs","cgiRef2state")) (CVar (5,"ref"))) (CApply (CSymbol ("Prelude","Just")) (CVar (7,"jsaccess")))))] [CLocalVar (5,"ref"),CLocalPat (CPVar (6,"refname")) (CApply (CSymbol ("HTML","idOfCgiRef")) (CVar (5,"ref"))) [],CLocalPat (CPVar (7,"jsaccess")) (CApply (CApply (CSymbol ("JavaScript","JSFCall")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'g'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'V'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'O'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'f'))) (CSymbol ("Prelude","[]")))))))))))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("JavaScript","JSString")) (CVar (6,"refname")))) (CSymbol ("Prelude","[]")))) [],CLocalPat (CPVar (8,"jsCheckCall")) (CApply (CApply (CApply (CSymbol ("WUIjs","maybeJSFun2checkCall")) (CVar (6,"refname"))) (CVar (7,"jsaccess"))) (CVar (2,"mbjs"))) [],CLocalPat (CPVar (9,"onblurAttr")) (CApply (CApply (CApply (CSymbol ("Prelude","maybe")) (CSymbol ("Prelude","[]"))) (CLambda [CPVar (10,"jsc")] (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'b'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CSymbol ("Prelude","[]"))))))))) (CApply (CSymbol ("JavaScript","showJSExp")) (CVar (10,"jsc"))))) (CSymbol ("Prelude","[]"))))) (CVar (8,"jsCheckCall"))) []]]))]]),
  CFunc ("WUIjs","wRequiredString") 0 Public (CTCons ("WUIjs","WuiSpec") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("WUIjs","withConditionJSName")) (CApply (CApply (CSymbol ("WUIjs","withError")) (CSymbol ("WUIjs","wString"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'M'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'g'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ':'))) (CSymbol ("Prelude","[]")))))))))))))))))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Prelude","not"))) (CSymbol ("Prelude","null")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'E'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'y'))) (CSymbol ("Prelude","[]"))))))))))))] []]),
  CFunc ("WUIjs","wRequiredStringSize") 1 Public (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("WUIjs","WuiSpec") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]])) (CRules CFlex [CRule [CPVar (0,"size")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("WUIjs","withConditionJSName")) (CApply (CApply (CSymbol ("WUIjs","withError")) (CApply (CSymbol ("WUIjs","wStringSize")) (CVar (0,"size")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'M'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'g'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ':'))) (CSymbol ("Prelude","[]")))))))))))))))))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Prelude","not"))) (CSymbol ("Prelude","null")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'E'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'y'))) (CSymbol ("Prelude","[]"))))))))))))] []]),
  CFunc ("WUIjs","wTextArea") 1 Public (CFuncType (CTCons ("Prelude","(,)") [CTCons ("Prelude","Int") [],CTCons ("Prelude","Int") []]) (CTCons ("WUIjs","WuiSpec") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]])) (CRules CFlex [CRule [CPVar (0,"dims")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("WUIjs","WuiSpec")) (CApply (CApply (CApply (CApply (CSymbol ("Prelude","(,,,)")) (CSymbol ("Prelude","head"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '?'))) (CSymbol ("Prelude","[]")))) (CApply (CSymbol ("Prelude","const")) (CSymbol ("Prelude","True")))) (CSymbol ("Prelude","Nothing")))) (CLambda [CPComb ("Prelude","(,,,)") [CPVar (1,"render"),CPVar (2,"errmsg"),CPVar (3,"_"),CPVar (4,"jsck")],CPVar (5,"v")] (CApply (CApply (CApply (CApply (CSymbol ("WUIjs","textareaWidget")) (CVar (2,"errmsg"))) (CVar (4,"jsck"))) (CVar (1,"render"))) (CVar (5,"v"))))) (CLambda [CPVar (6,"wparams"),CPVar (7,"env"),CPVar (8,"s")] (CApply (CApply (CApply (CApply (CSymbol ("WUIjs","checkLegalInput")) (CVar (6,"wparams"))) (CSymbol ("WUIjs","textareaWidget"))) (CSymbol ("Prelude","False"))) (CApply (CSymbol ("WUIjs","filterStringInput")) (CApply (CVar (7,"env")) (CApply (CSymbol ("WUIjs","state2cgiRef")) (CVar (8,"s"))))))))] [CLocalFunc (CFunc ("WUIjs","textareaWidget") 4 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("Prelude","Maybe") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]) (CFuncType (CFuncType (CTCons ("Prelude","[]") [CTCons ("HTML","HtmlExp") []]) (CTCons ("HTML","HtmlExp") [])) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","(,,)") [CTCons ("HTML","HtmlExp") [],CTCons ("Prelude","Maybe") [CTCons ("JavaScript","JSExp") []],CTCons ("WUIjs","WuiState") []]))))) (CRules CFlex [CRule [CPVar (1,"errmsg"),CPVar (2,"mbjs"),CPVar (3,"render"),CPVar (4,"v")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","(,,)")) (CApply (CApply (CApply (CApply (CApply (CApply (CSymbol ("WUIjs","addErrMsg")) (CApply (CSymbol ("Maybe","isJust")) (CVar (8,"jsCheckCall")))) (CSymbol ("Prelude","True"))) (CSymbol ("Prelude","False"))) (CVar (1,"errmsg"))) (CVar (6,"refname"))) (CApply (CVar (3,"render")) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("HTML","addAttrs")) (CApply (CApply (CApply (CSymbol ("HTML","textarea")) (CVar (5,"ref"))) (CVar (0,"dims"))) (CVar (4,"v")))) (CVar (9,"onblurAttr")))) (CSymbol ("Prelude","[]")))))) (CVar (8,"jsCheckCall"))) (CApply (CApply (CSymbol ("WUIjs","cgiRef2state")) (CVar (5,"ref"))) (CApply (CSymbol ("Prelude","Just")) (CVar (7,"jsaccess")))))] [CLocalVar (5,"ref"),CLocalPat (CPVar (6,"refname")) (CApply (CSymbol ("HTML","idOfCgiRef")) (CVar (5,"ref"))) [],CLocalPat (CPVar (7,"jsaccess")) (CApply (CApply (CSymbol ("JavaScript","JSFCall")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'g'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'V'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'O'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'f'))) (CSymbol ("Prelude","[]")))))))))))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("JavaScript","JSString")) (CVar (6,"refname")))) (CSymbol ("Prelude","[]")))) [],CLocalPat (CPVar (8,"jsCheckCall")) (CApply (CApply (CApply (CSymbol ("WUIjs","maybeJSFun2checkCall")) (CVar (6,"refname"))) (CVar (7,"jsaccess"))) (CVar (2,"mbjs"))) [],CLocalPat (CPVar (9,"onblurAttr")) (CApply (CApply (CApply (CSymbol ("Prelude","maybe")) (CSymbol ("Prelude","[]"))) (CLambda [CPVar (10,"jsc")] (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'b'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CSymbol ("Prelude","[]"))))))))) (CApply (CSymbol ("JavaScript","showJSExp")) (CVar (10,"jsc"))))) (CSymbol ("Prelude","[]"))))) (CVar (8,"jsCheckCall"))) []]]))]]),
  CFunc ("WUIjs","wSelect") 2 Public (CFuncType (CFuncType (CTVar (0,"a")) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CFuncType (CTCons ("Prelude","[]") [CTVar (0,"a")]) (CTCons ("WUIjs","WuiSpec") [CTVar (0,"a")]))) (CRules CFlex [CRule [CPVar (0,"showelem"),CPVar (1,"selset")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("WUIjs","WuiSpec")) (CApply (CApply (CApply (CApply (CSymbol ("Prelude","(,,,)")) (CSymbol ("Prelude","head"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '?'))) (CSymbol ("Prelude","[]")))) (CApply (CSymbol ("Prelude","const")) (CSymbol ("Prelude","True")))) (CSymbol ("Prelude","Nothing")))) (CLambda [CPComb ("Prelude","(,,,)") [CPVar (2,"render"),CPVar (3,"errmsg"),CPVar (4,"_"),CPVar (5,"jsck")],CPVar (6,"v")] (CApply (CApply (CApply (CApply (CSymbol ("WUIjs","selWidget")) (CVar (3,"errmsg"))) (CVar (5,"jsck"))) (CVar (2,"render"))) (CVar (6,"v"))))) (CLambda [CPVar (7,"wparams"),CPVar (8,"env"),CPVar (9,"s")] (CApply (CApply (CApply (CApply (CSymbol ("WUIjs","checkLegalInput")) (CVar (7,"wparams"))) (CSymbol ("WUIjs","selWidget"))) (CSymbol ("Prelude","False"))) (CApply (CApply (CSymbol ("Prelude","!!")) (CVar (1,"selset"))) (CApply (CSymbol ("Read","readNat")) (CApply (CVar (8,"env")) (CApply (CSymbol ("WUIjs","state2cgiRef")) (CVar (9,"s")))))))))] [CLocalFunc (CFunc ("WUIjs","selWidget") 4 Private (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (1,"b")) (CFuncType (CFuncType (CTCons ("Prelude","[]") [CTCons ("HTML","HtmlExp") []]) (CTVar (2,"c"))) (CFuncType (CTVar (3,"_604")) (CTCons ("Prelude","(,,)") [CTVar (2,"c"),CTCons ("Prelude","Maybe") [CTVar (4,"d")],CTCons ("WUIjs","WuiState") []]))))) (CRules CFlex [CRule [CPVar (2,"_"),CPVar (3,"_"),CPVar (4,"render"),CPVar (5,"v")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","(,,)")) (CApply (CVar (4,"render")) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CApply (CSymbol ("Prelude","maybe")) (CApply (CApply (CSymbol ("HTML","selection")) (CVar (6,"ref"))) (CVar (8,"namevalues")))) (CLambda [CPVar (9,"i")] (CApply (CApply (CApply (CSymbol ("HTML","selectionInitial")) (CVar (6,"ref"))) (CVar (8,"namevalues"))) (CVar (9,"i"))))) (CVar (7,"idx")))) (CSymbol ("Prelude","[]"))))) (CSymbol ("Prelude","Nothing"))) (CApply (CApply (CSymbol ("WUIjs","cgiRef2state")) (CVar (6,"ref"))) (CSymbol ("Prelude","Nothing"))))] [CLocalVar (6,"ref"),CLocalPat (CPVar (7,"idx")) (CApply (CApply (CSymbol ("List","elemIndex")) (CVar (5,"v"))) (CVar (1,"selset"))) [],CLocalPat (CPVar (8,"namevalues")) (CApply (CApply (CSymbol ("Prelude","zip")) (CApply (CApply (CSymbol ("Prelude","map")) (CVar (0,"showelem"))) (CVar (1,"selset")))) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("Prelude","show"))) (CApply (CSymbol ("Prelude","enumFrom")) (CLit (CIntc 0))))) []]]))]]),
  CFunc ("WUIjs","wSelectJS") 3 Private (CFuncType (CFuncType (CTVar (0,"a")) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CFuncType (CFuncType (CTVar (0,"a")) (CTCons ("JavaScript","JSExp") [])) (CFuncType (CTCons ("Prelude","[]") [CTVar (0,"a")]) (CTCons ("WUIjs","WuiSpec") [CTVar (0,"a")])))) (CRules CFlex [CRule [CPVar (0,"showelem"),CPVar (1,"showjselem"),CPVar (2,"selset")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("WUIjs","WuiSpec")) (CApply (CApply (CApply (CApply (CSymbol ("Prelude","(,,,)")) (CSymbol ("Prelude","head"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '?'))) (CSymbol ("Prelude","[]")))) (CApply (CSymbol ("Prelude","const")) (CSymbol ("Prelude","True")))) (CSymbol ("Prelude","Nothing")))) (CLambda [CPComb ("Prelude","(,,,)") [CPVar (3,"render"),CPVar (4,"errmsg"),CPVar (5,"_"),CPVar (6,"jsck")],CPVar (7,"v")] (CApply (CApply (CApply (CApply (CSymbol ("WUIjs","selWidget")) (CVar (4,"errmsg"))) (CVar (6,"jsck"))) (CVar (3,"render"))) (CVar (7,"v"))))) (CLambda [CPVar (8,"wparams"),CPVar (9,"env"),CPVar (10,"s")] (CApply (CApply (CApply (CApply (CSymbol ("WUIjs","checkLegalInput")) (CVar (8,"wparams"))) (CSymbol ("WUIjs","selWidget"))) (CSymbol ("Prelude","False"))) (CApply (CApply (CSymbol ("Prelude","!!")) (CVar (2,"selset"))) (CApply (CSymbol ("Read","readNat")) (CApply (CVar (9,"env")) (CApply (CSymbol ("WUIjs","state2cgiRef")) (CVar (10,"s")))))))))] [CLocalFunc (CFunc ("WUIjs","selWidget") 4 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("Prelude","Maybe") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]) (CFuncType (CFuncType (CTCons ("Prelude","[]") [CTCons ("HTML","HtmlExp") []]) (CTCons ("HTML","HtmlExp") [])) (CFuncType (CTVar (1,"_664")) (CTCons ("Prelude","(,,)") [CTCons ("HTML","HtmlExp") [],CTCons ("Prelude","Maybe") [CTCons ("JavaScript","JSExp") []],CTCons ("WUIjs","WuiState") []]))))) (CRules CFlex [CRule [CPVar (3,"errmsg"),CPVar (4,"mbjs"),CPVar (5,"render"),CPVar (6,"v")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","(,,)")) (CApply (CApply (CApply (CApply (CApply (CApply (CSymbol ("WUIjs","addErrMsg")) (CApply (CSymbol ("Maybe","isJust")) (CVar (10,"jsCheckCall")))) (CSymbol ("Prelude","True"))) (CSymbol ("Prelude","False"))) (CVar (3,"errmsg"))) (CVar (8,"refname"))) (CApply (CVar (5,"render")) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CApply (CSymbol ("Prelude","maybe")) (CApply (CApply (CSymbol ("HTML","selection")) (CVar (7,"ref"))) (CVar (12,"namevalues")))) (CLambda [CPVar (13,"i")] (CApply (CApply (CApply (CSymbol ("HTML","selectionInitial")) (CVar (7,"ref"))) (CVar (12,"namevalues"))) (CVar (13,"i"))))) (CVar (11,"idx")))) (CSymbol ("Prelude","[]")))))) (CVar (10,"jsCheckCall"))) (CApply (CApply (CSymbol ("WUIjs","cgiRef2state")) (CVar (7,"ref"))) (CApply (CSymbol ("Prelude","Just")) (CVar (9,"jsaccess")))))] [CLocalVar (7,"ref"),CLocalPat (CPVar (8,"refname")) (CApply (CSymbol ("HTML","idOfCgiRef")) (CVar (7,"ref"))) [],CLocalPat (CPVar (9,"jsaccess")) (CApply (CApply (CSymbol ("JavaScript","JSFCall")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'V'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'O'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'f'))) (CSymbol ("Prelude","[]")))))))))))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("JavaScript","JSString")) (CVar (8,"refname")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("JavaScript","JSFCall")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'w'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'A'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'y'))) (CSymbol ("Prelude","[]")))))))))))) (CApply (CApply (CSymbol ("Prelude","map")) (CVar (1,"showjselem"))) (CVar (2,"selset"))))) (CSymbol ("Prelude","[]"))))) [],CLocalPat (CPVar (10,"jsCheckCall")) (CApply (CApply (CApply (CSymbol ("WUIjs","maybeJSFun2checkCall")) (CVar (8,"refname"))) (CVar (9,"jsaccess"))) (CVar (4,"mbjs"))) [],CLocalPat (CPVar (11,"idx")) (CApply (CApply (CSymbol ("List","elemIndex")) (CVar (6,"v"))) (CVar (2,"selset"))) [],CLocalPat (CPVar (12,"namevalues")) (CApply (CApply (CSymbol ("Prelude","zip")) (CApply (CApply (CSymbol ("Prelude","map")) (CVar (0,"showelem"))) (CVar (2,"selset")))) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("Prelude","show"))) (CApply (CSymbol ("Prelude","enumFrom")) (CLit (CIntc 0))))) []]]))]]),
  CFunc ("WUIjs","wSelectInt") 0 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Int") []]) (CTCons ("WUIjs","WuiSpec") [CTCons ("Prelude","Int") []])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("WUIjs","wSelectJS")) (CSymbol ("Prelude","show"))) (CSymbol ("JavaScript","JSInt")))] []]),
  CFunc ("WUIjs","wSelectBool") 2 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("WUIjs","WuiSpec") [CTCons ("Prelude","Bool") []]))) (CRules CFlex [CRule [CPVar (0,"true"),CPVar (1,"false")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("WUIjs","wSelectJS")) (CLambda [CPVar (2,"b")] (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CVar (2,"b"))) (CVar (0,"true"))) (CVar (1,"false"))))) (CSymbol ("JavaScript","JSBool"))) (CApply (CApply (CSymbol ("Prelude",":")) (CSymbol ("Prelude","True"))) (CApply (CApply (CSymbol ("Prelude",":")) (CSymbol ("Prelude","False"))) (CSymbol ("Prelude","[]")))))] []]),
  CFunc ("WUIjs","wCheckBool") 1 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("HTML","HtmlExp") []]) (CTCons ("WUIjs","WuiSpec") [CTCons ("Prelude","Bool") []])) (CRules CFlex [CRule [CPVar (0,"hexps")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("WUIjs","WuiSpec")) (CApply (CApply (CApply (CApply (CSymbol ("Prelude","(,,,)")) (CSymbol ("Prelude","head"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '?'))) (CSymbol ("Prelude","[]")))) (CApply (CSymbol ("Prelude","const")) (CSymbol ("Prelude","True")))) (CSymbol ("Prelude","Nothing")))) (CLambda [CPComb ("Prelude","(,,,)") [CPVar (1,"render"),CPVar (2,"errmsg"),CPVar (3,"_"),CPVar (4,"jsck")],CPVar (5,"v")] (CApply (CApply (CApply (CApply (CSymbol ("WUIjs","checkWidget")) (CVar (2,"errmsg"))) (CVar (4,"jsck"))) (CVar (1,"render"))) (CVar (5,"v"))))) (CLambda [CPVar (6,"wparams"),CPVar (7,"env"),CPVar (8,"s")] (CApply (CApply (CApply (CApply (CSymbol ("WUIjs","checkLegalInput")) (CVar (6,"wparams"))) (CSymbol ("WUIjs","checkWidget"))) (CSymbol ("Prelude","False"))) (CApply (CApply (CSymbol ("Prelude","==")) (CApply (CVar (7,"env")) (CApply (CSymbol ("WUIjs","state2cgiRef")) (CVar (8,"s"))))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'T'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]"))))))))))] [CLocalFunc (CFunc ("WUIjs","checkWidget") 4 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("Prelude","Maybe") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]) (CFuncType (CFuncType (CTCons ("Prelude","[]") [CTCons ("HTML","HtmlExp") []]) (CTCons ("HTML","HtmlExp") [])) (CFuncType (CTCons ("Prelude","Bool") []) (CTCons ("Prelude","(,,)") [CTCons ("HTML","HtmlExp") [],CTCons ("Prelude","Maybe") [CTCons ("JavaScript","JSExp") []],CTCons ("WUIjs","WuiState") []]))))) (CRules CFlex [CRule [CPVar (1,"errmsg"),CPVar (2,"mbjs"),CPVar (3,"render"),CPVar (4,"v")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","(,,)")) (CApply (CApply (CApply (CApply (CApply (CApply (CSymbol ("WUIjs","addErrMsg")) (CApply (CSymbol ("Maybe","isJust")) (CVar (8,"jsCheckCall")))) (CSymbol ("Prelude","True"))) (CSymbol ("Prelude","False"))) (CVar (1,"errmsg"))) (CVar (6,"refname"))) (CApply (CVar (3,"render")) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("HTML","inline")) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CVar (4,"v"))) (CSymbol ("HTML","checkedbox"))) (CSymbol ("HTML","checkbox"))) (CVar (5,"ref"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'T'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]")))))))) (CVar (0,"hexps"))))) (CSymbol ("Prelude","[]")))))) (CVar (8,"jsCheckCall"))) (CApply (CApply (CSymbol ("WUIjs","cgiRef2state")) (CVar (5,"ref"))) (CApply (CSymbol ("Prelude","Just")) (CVar (7,"jsaccess")))))] [CLocalVar (5,"ref"),CLocalPat (CPVar (6,"refname")) (CApply (CSymbol ("HTML","idOfCgiRef")) (CVar (5,"ref"))) [],CLocalPat (CPVar (7,"jsaccess")) (CApply (CApply (CSymbol ("JavaScript","JSFCall")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'h'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'k'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'B'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'x'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'V'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'O'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'f'))) (CSymbol ("Prelude","[]")))))))))))))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("JavaScript","JSString")) (CVar (6,"refname")))) (CSymbol ("Prelude","[]")))) [],CLocalPat (CPVar (8,"jsCheckCall")) (CApply (CApply (CApply (CSymbol ("WUIjs","maybeJSFun2checkCall")) (CVar (6,"refname"))) (CVar (7,"jsaccess"))) (CVar (2,"mbjs"))) []]]))]]),
  CFunc ("WUIjs","wMultiCheckSelect") 2 Public (CFuncType (CFuncType (CTVar (0,"a")) (CTCons ("Prelude","[]") [CTCons ("HTML","HtmlExp") []])) (CFuncType (CTCons ("Prelude","[]") [CTVar (0,"a")]) (CTCons ("WUIjs","WuiSpec") [CTCons ("Prelude","[]") [CTVar (0,"a")]]))) (CRules CFlex [CRule [CPVar (0,"showelem"),CPVar (1,"selset")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("WUIjs","WuiSpec")) (CApply (CApply (CApply (CApply (CSymbol ("Prelude","(,,,)")) (CSymbol ("WUIjs","renderTuple"))) (CSymbol ("WUIjs","tupleError"))) (CApply (CSymbol ("Prelude","const")) (CSymbol ("Prelude","True")))) (CSymbol ("Prelude","Nothing")))) (CLambda [CPComb ("Prelude","(,,,)") [CPVar (2,"render"),CPVar (3,"errmsg"),CPVar (4,"_"),CPVar (5,"jsck")],CPVar (6,"vs")] (CApply (CApply (CApply (CApply (CSymbol ("WUIjs","checkWidget")) (CVar (3,"errmsg"))) (CVar (5,"jsck"))) (CVar (2,"render"))) (CVar (6,"vs"))))) (CLambda [CPVar (7,"wparams"),CPVar (8,"env"),CPVar (9,"st")] (CApply (CApply (CApply (CApply (CSymbol ("WUIjs","checkLegalInput")) (CVar (7,"wparams"))) (CSymbol ("WUIjs","checkWidget"))) (CSymbol ("Prelude","True"))) (CApply (CApply (CSymbol ("Prelude","concatMap")) (CLambda [CPComb ("Prelude","(,)") [CPVar (10,"ref"),CPVar (11,"s")]] (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","==")) (CApply (CVar (8,"env")) (CVar (10,"ref")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'T'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]")))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (11,"s"))) (CSymbol ("Prelude","[]")))) (CSymbol ("Prelude","[]"))))) (CApply (CApply (CSymbol ("Prelude","zip")) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("WUIjs","state2cgiRef"))) (CApply (CSymbol ("WUIjs","state2states")) (CVar (9,"st"))))) (CVar (1,"selset")))))))] [CLocalFunc (CFunc ("WUIjs","checkWidget") 4 Private (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (1,"b")) (CFuncType (CFuncType (CTCons ("Prelude","[]") [CTCons ("HTML","HtmlExp") []]) (CTVar (2,"c"))) (CFuncType (CTCons ("Prelude","[]") [CTVar (3,"_733")]) (CTCons ("Prelude","(,,)") [CTVar (2,"c"),CTCons ("Prelude","Maybe") [CTVar (4,"d")],CTCons ("WUIjs","WuiState") []]))))) (CRules CFlex [CRule [CPVar (2,"_"),CPVar (3,"_"),CPVar (4,"render"),CPVar (5,"vs")] [(CSymbol ("Prelude","success"),CLetDecl [CLocalPat (CPVar (6,"refs")) (CApply (CApply (CSymbol ("Prelude","take")) (CApply (CSymbol ("Prelude","length")) (CVar (1,"selset")))) (CSymbol ("WUIjs","newVars"))) [],CLocalPat (CPVar (7,"numsetitems")) (CApply (CApply (CSymbol ("Prelude","zip")) (CVar (6,"refs"))) (CVar (1,"selset"))) [],CLocalFunc (CFunc ("WUIjs","showItem") 1 Private (CFuncType (CTCons ("Prelude","(,)") [CTCons ("HTML","CgiRef") [],CTVar (3,"_733")]) (CTCons ("HTML","HtmlExp") [])) (CRules CFlex [CRule [CPComb ("Prelude","(,)") [CPVar (8,"ref"),CPVar (9,"s")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("HTML","inline")) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","elem")) (CVar (9,"s"))) (CVar (5,"vs")))) (CSymbol ("HTML","checkedbox"))) (CSymbol ("HTML","checkbox"))) (CVar (8,"ref"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'T'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]")))))))) (CApply (CVar (0,"showelem")) (CVar (9,"s")))))] []]))] (CApply (CApply (CApply (CSymbol ("Prelude","(,,)")) (CApply (CVar (4,"render")) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("WUIjs","showItem"))) (CVar (7,"numsetitems"))))) (CSymbol ("Prelude","Nothing"))) (CApply (CApply (CSymbol ("WUIjs","states2state")) (CApply (CApply (CSymbol ("Prelude","map")) (CLambda [CPVar (8,"cref")] (CApply (CApply (CSymbol ("WUIjs","cgiRef2state")) (CVar (8,"cref"))) (CSymbol ("Prelude","Nothing"))))) (CVar (6,"refs")))) (CSymbol ("Prelude","Nothing")))))] []]))]]),
  CFunc ("WUIjs","newVars") 0 Private (CTCons ("Prelude","[]") [CTVar (0,"a")]) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",":")) (CSymbol ("Prelude","unknown"))) (CSymbol ("WUIjs","newVars")))] []]),
  CFunc ("WUIjs","wRadioSelect") 2 Public (CFuncType (CFuncType (CTVar (0,"a")) (CTCons ("Prelude","[]") [CTCons ("HTML","HtmlExp") []])) (CFuncType (CTCons ("Prelude","[]") [CTVar (0,"a")]) (CTCons ("WUIjs","WuiSpec") [CTVar (0,"a")]))) (CRules CFlex [CRule [CPVar (0,"showelem"),CPVar (1,"selset")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("WUIjs","WuiSpec")) (CApply (CApply (CApply (CApply (CSymbol ("Prelude","(,,,)")) (CSymbol ("WUIjs","renderTuple"))) (CSymbol ("WUIjs","tupleError"))) (CApply (CSymbol ("Prelude","const")) (CSymbol ("Prelude","True")))) (CSymbol ("Prelude","Nothing")))) (CLambda [CPComb ("Prelude","(,,,)") [CPVar (2,"render"),CPVar (3,"errmsg"),CPVar (4,"_"),CPVar (5,"jsck")],CPVar (6,"v")] (CApply (CApply (CApply (CApply (CSymbol ("WUIjs","radioWidget")) (CVar (3,"errmsg"))) (CVar (5,"jsck"))) (CVar (2,"render"))) (CVar (6,"v"))))) (CLambda [CPVar (7,"wparams"),CPVar (8,"env"),CPVar (9,"s")] (CApply (CApply (CApply (CApply (CSymbol ("WUIjs","checkLegalInput")) (CVar (7,"wparams"))) (CSymbol ("WUIjs","radioWidget"))) (CSymbol ("Prelude","True"))) (CApply (CApply (CSymbol ("Prelude","!!")) (CVar (1,"selset"))) (CApply (CSymbol ("Read","readNat")) (CApply (CVar (8,"env")) (CApply (CSymbol ("WUIjs","state2cgiRef")) (CVar (9,"s")))))))))] [CLocalFunc (CFunc ("WUIjs","radioWidget") 4 Private (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (1,"b")) (CFuncType (CFuncType (CTCons ("Prelude","[]") [CTCons ("HTML","HtmlExp") []]) (CTVar (2,"c"))) (CFuncType (CTVar (3,"_832")) (CTCons ("Prelude","(,,)") [CTVar (2,"c"),CTCons ("Prelude","Maybe") [CTVar (4,"d")],CTCons ("WUIjs","WuiState") []]))))) (CRules CFlex [CRule [CPVar (2,"_"),CPVar (3,"_"),CPVar (4,"render"),CPVar (5,"v")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","(,,)")) (CApply (CVar (4,"render")) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("WUIjs","showItem"))) (CVar (8,"numhitems"))))) (CSymbol ("Prelude","Nothing"))) (CApply (CApply (CSymbol ("WUIjs","cgiRef2state")) (CVar (6,"ref"))) (CSymbol ("Prelude","Nothing"))))] [CLocalVar (6,"ref"),CLocalPat (CPVar (7,"idx")) (CApply (CApply (CApply (CSymbol ("Prelude","maybe")) (CLit (CIntc 0))) (CSymbol ("Prelude","id"))) (CApply (CApply (CSymbol ("List","elemIndex")) (CVar (5,"v"))) (CVar (1,"selset")))) [],CLocalPat (CPVar (8,"numhitems")) (CApply (CApply (CSymbol ("Prelude","zip")) (CApply (CSymbol ("Prelude","enumFrom")) (CLit (CIntc 0)))) (CApply (CApply (CSymbol ("Prelude","map")) (CVar (0,"showelem"))) (CVar (1,"selset")))) [],CLocalFunc (CFunc ("WUIjs","showItem") 1 Private (CFuncType (CTCons ("Prelude","(,)") [CTCons ("Prelude","Int") [],CTCons ("Prelude","[]") [CTCons ("HTML","HtmlExp") []]]) (CTCons ("HTML","HtmlExp") [])) (CRules CFlex [CRule [CPComb ("Prelude","(,)") [CPVar (9,"i"),CPVar (10,"s")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("HTML","table")) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (9,"i"))) (CVar (7,"idx")))) (CSymbol ("HTML","radio_main"))) (CSymbol ("HTML","radio_other"))) (CVar (6,"ref"))) (CApply (CSymbol ("Prelude","show")) (CVar (9,"i"))))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (10,"s"))) (CSymbol ("Prelude","[]"))))) (CSymbol ("Prelude","[]"))))] []]))]]))]]),
  CFunc ("WUIjs","wRadioBool") 2 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("HTML","HtmlExp") []]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("HTML","HtmlExp") []]) (CTCons ("WUIjs","WuiSpec") [CTCons ("Prelude","Bool") []]))) (CRules CFlex [CRule [CPVar (0,"truehexps"),CPVar (1,"falsehexps")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("WUIjs","wRadioSelect")) (CLambda [CPVar (2,"b")] (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CVar (2,"b"))) (CVar (0,"truehexps"))) (CVar (1,"falsehexps"))))) (CApply (CApply (CSymbol ("Prelude",":")) (CSymbol ("Prelude","True"))) (CApply (CApply (CSymbol ("Prelude",":")) (CSymbol ("Prelude","False"))) (CSymbol ("Prelude","[]")))))] []]),
  CFunc ("WUIjs","maybeJSFun2checkCall") 3 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("JavaScript","JSExp") []) (CFuncType (CTCons ("Prelude","Maybe") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]) (CTCons ("Prelude","Maybe") [CTCons ("JavaScript","JSExp") []])))) (CRules CFlex [CRule [CPVar (0,"_"),CPVar (1,"_"),CPComb ("Prelude","Nothing") []] [(CSymbol ("Prelude","success"),CSymbol ("Prelude","Nothing"))] [],CRule [CPVar (2,"refname"),CPVar (3,"jsaccessvalue"),CPComb ("Prelude","Just") [CPVar (4,"jsf")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Prelude","Just")) (CApply (CApply (CSymbol ("JavaScript","JSFCall")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'E'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'C'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'N'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]")))))))))))))))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("JavaScript","JSString")) (CVar (2,"refname")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("JavaScript","JSFCall")) (CVar (4,"jsf"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (3,"jsaccessvalue"))) (CSymbol ("Prelude","[]"))))) (CSymbol ("Prelude","[]"))))))] []]),
  CFunc ("WUIjs","addErrMsg") 6 Private (CFuncType (CTCons ("Prelude","Bool") []) (CFuncType (CTCons ("Prelude","Bool") []) (CFuncType (CTCons ("Prelude","Bool") []) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("HTML","HtmlExp") []) (CTCons ("HTML","HtmlExp") []))))))) (CRules CFlex [CRule [CPVar (0,"hasjsck"),CPVar (1,"hide"),CPVar (2,"astable"),CPVar (3,"errmsg"),CPVar (4,"refname"),CPVar (5,"hexp")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","||")) (CApply (CSymbol ("Prelude","not")) (CVar (1,"hide")))) (CVar (0,"hasjsck")))) (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CVar (2,"astable"))) (CApply (CApply (CSymbol ("HTML","addAttrs")) (CApply (CSymbol ("HTML","table")) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("HTML","addAttrs")) (CApply (CApply (CSymbol ("HTML","style")) (CVar (9,"errmsgclass"))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("HTML","htxt")) (CVar (3,"errmsg")))) (CSymbol ("Prelude","[]"))))) (CVar (6,"msgidattr")))) (CSymbol ("Prelude","[]")))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (5,"hexp"))) (CSymbol ("Prelude","[]")))) (CSymbol ("Prelude","[]")))) (CSymbol ("Prelude","[]")))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CSymbol ("Prelude","[]")))))))) (CVar (8,"tableclass")))) (CSymbol ("Prelude","[]")))) (CVar (7,"tblidattr"))))) (CApply (CSymbol ("HTML","inline")) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("HTML","addAttrs")) (CApply (CApply (CSymbol ("HTML","style")) (CVar (9,"errmsgclass"))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("HTML","htxt")) (CVar (3,"errmsg")))) (CSymbol ("Prelude","[]"))))) (CVar (6,"msgidattr")))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (5,"hexp"))) (CSymbol ("Prelude","[]"))))))) (CVar (5,"hexp")))] [CLocalPat (CPVar (6,"msgidattr")) (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CSymbol ("Prelude","null")) (CVar (4,"refname")))) (CSymbol ("Prelude","[]"))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CSymbol ("Prelude","[]"))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'M'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'S'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'G'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '_'))) (CSymbol ("Prelude","[]"))))))) (CVar (4,"refname"))))) (CSymbol ("Prelude","[]")))) [],CLocalPat (CPVar (7,"tblidattr")) (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CSymbol ("Prelude","null")) (CVar (4,"refname")))) (CSymbol ("Prelude","[]"))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CSymbol ("Prelude","[]"))))) (CVar (4,"refname")))) (CSymbol ("Prelude","[]")))) [],CLocalPat (CPVar (8,"tableclass")) (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CVar (1,"hide"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'w'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'v'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'g'))) (CSymbol ("Prelude","[]"))))))))))))))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'w'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'v'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'g'))) (CSymbol ("Prelude","[]")))))))))))))))))) [],CLocalPat (CPVar (9,"errmsgclass")) (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CVar (1,"hide"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'w'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'h'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]")))))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'w'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'h'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]")))))))))))) []]]),
  CFunc ("WUIjs","jsTupleCons") 1 Private (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Prelude","[]") [CTCons ("JavaScript","JSExp") []]) (CTCons ("JavaScript","JSExp") []))) (CRules CFlex [CRule [CPVar (0,"n")] [(CSymbol ("Prelude","success"),CApply (CSymbol ("JavaScript","jsConsTerm")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '('))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude","replicate")) (CApply (CApply (CSymbol ("Prelude","-")) (CVar (0,"n"))) (CLit (CIntc 1)))) (CLit (CCharc ',')))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ')'))) (CSymbol ("Prelude","[]"))))))] []]),
  CFunc ("WUIjs","joinSubFields") 4 Private (CFuncType (CTCons ("Prelude","(,,,)") [CFuncType (CTCons ("Prelude","[]") [CTCons ("HTML","HtmlExp") []]) (CTCons ("HTML","HtmlExp") []),CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CFuncType (CTVar (0,"a")) (CTCons ("Prelude","Bool") []),CTCons ("Prelude","Maybe") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]]) (CFuncType (CTCons ("Prelude","Bool") []) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","(,,)") [CTCons ("HTML","HtmlExp") [],CTCons ("Prelude","Maybe") [CTCons ("JavaScript","JSExp") []],CTCons ("WUIjs","WuiState") []]]) (CFuncType (CTCons ("Prelude","Maybe") [CFuncType (CTCons ("Prelude","[]") [CTCons ("JavaScript","JSExp") []]) (CTCons ("JavaScript","JSExp") [])]) (CTCons ("Prelude","(,,)") [CTCons ("HTML","HtmlExp") [],CTCons ("Prelude","Maybe") [CTCons ("JavaScript","JSExp") []],CTCons ("WUIjs","WuiState") []]))))) (CRules CFlex [CRule [CPComb ("Prelude","(,,,)") [CPVar (0,"render"),CPVar (1,"errmsg"),CPVar (2,"_"),CPVar (3,"mbjsck")],CPVar (4,"hide"),CPVar (5,"subfields"),CPVar (6,"jscomb")] [(CSymbol ("Prelude","success"),CLetDecl [CLocalPat (CPComb ("Prelude","(,,)") [CPVar (7,"subhexps"),CPVar (8,"subjscks"),CPVar (9,"substates")]) (CApply (CSymbol ("Prelude","unzip3")) (CVar (5,"subfields"))) [],CLocalPat (CPVar (10,"consstate")) (CApply (CApply (CSymbol ("WUIjs","states2state")) (CVar (9,"substates"))) (CVar (6,"jscomb"))) [],CLocalPat (CPVar (11,"refname")) (CApply (CSymbol ("WUIjs","state2refname")) (CVar (10,"consstate"))) [],CLocalPat (CPVar (12,"jscall")) (CApply (CApply (CSymbol ("WUIjs","jsCheckCallFromState")) (CVar (10,"consstate"))) (CVar (3,"mbjsck"))) [],CLocalPat (CPVar (13,"jscks")) (CApply (CSymbol ("Maybe","catMaybes")) (CVar (8,"subjscks"))) []] (CApply (CApply (CApply (CSymbol ("Prelude","(,,)")) (CApply (CApply (CApply (CApply (CApply (CApply (CSymbol ("WUIjs","addErrMsg")) (CApply (CSymbol ("Maybe","isJust")) (CVar (12,"jscall")))) (CVar (4,"hide"))) (CSymbol ("Prelude","True"))) (CVar (1,"errmsg"))) (CVar (11,"refname"))) (CApply (CVar (0,"render")) (CVar (7,"subhexps"))))) (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CSymbol ("Prelude","null")) (CVar (13,"jscks")))) (CVar (12,"jscall"))) (CApply (CSymbol ("Prelude","Just")) (CApply (CApply (CApply (CSymbol ("Prelude","maybe")) (CApply (CSymbol ("WUIjs","parAndJS")) (CVar (13,"jscks")))) (CLambda [CPVar (14,"jsc")] (CApply (CApply (CApply (CSymbol ("JavaScript","JSOp")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '&'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '&'))) (CSymbol ("Prelude","[]"))))) (CApply (CApply (CApply (CSymbol ("JavaScript","JSOp")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '&'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '&'))) (CSymbol ("Prelude","[]"))))) (CApply (CApply (CSymbol ("JavaScript","JSFCall")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'E'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'C'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'N'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]")))))))))))))))))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("JavaScript","JSString")) (CVar (11,"refname")))) (CSymbol ("Prelude","[]"))))) (CApply (CSymbol ("WUIjs","parAndJS")) (CVar (13,"jscks"))))) (CVar (14,"jsc"))))) (CVar (12,"jscall")))))) (CVar (10,"consstate"))))] [CLocalFunc (CFunc ("WUIjs","parAndJS") 1 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("JavaScript","JSExp") []]) (CTCons ("JavaScript","JSExp") [])) (CRules CFlex [CRule [CPComb ("Prelude",":") [CPVar (7,"j"),CPComb ("Prelude","[]") []]] [(CSymbol ("Prelude","success"),CVar (7,"j"))] [],CRule [CPComb ("Prelude",":") [CPVar (8,"j1"),CPComb ("Prelude",":") [CPVar (9,"j2"),CPVar (10,"js")]]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("JavaScript","JSFCall")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'A'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CSymbol ("Prelude","[]")))))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (8,"j1"))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("WUIjs","parAndJS")) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (9,"j2"))) (CVar (10,"js"))))) (CSymbol ("Prelude","[]")))))] []]))]]),
  CFunc ("WUIjs","checkAndJoinSubFields") 5 Private (CFuncType (CTCons ("Prelude","(,,,)") [CFuncType (CTCons ("Prelude","[]") [CTCons ("HTML","HtmlExp") []]) (CTCons ("HTML","HtmlExp") []),CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CFuncType (CTVar (0,"a")) (CTCons ("Prelude","Bool") []),CTCons ("Prelude","Maybe") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","(,,)") [CTCons ("HTML","HtmlExp") [],CTCons ("Prelude","Maybe") [CTCons ("JavaScript","JSExp") []],CTCons ("WUIjs","WuiState") []]]) (CFuncType (CTCons ("Prelude","Maybe") [CFuncType (CTCons ("Prelude","[]") [CTCons ("JavaScript","JSExp") []]) (CTCons ("JavaScript","JSExp") [])]) (CFuncType (CTCons ("Prelude","Bool") []) (CFuncType (CTVar (0,"a")) (CTCons ("Prelude","(,)") [CTCons ("Prelude","Maybe") [CTVar (0,"a")],CTCons ("Prelude","(,,)") [CTCons ("HTML","HtmlExp") [],CTCons ("Prelude","Maybe") [CTCons ("JavaScript","JSExp") []],CTCons ("WUIjs","WuiState") []]])))))) (CRules CFlex [CRule [CPVar (0,"wparams"),CPVar (1,"subfields"),CPVar (2,"jscons"),CPVar (3,"errorinsubfields"),CPVar (4,"joinvalue")] [(CSymbol ("Prelude","success"),CLetDecl [CLocalFunc (CFunc ("WUIjs","combine") 1 Private (CFuncType (CTCons ("Prelude","Bool") []) (CTCons ("Prelude","(,,)") [CTCons ("HTML","HtmlExp") [],CTCons ("Prelude","Maybe") [CTCons ("JavaScript","JSExp") []],CTCons ("WUIjs","WuiState") []])) (CRules CFlex [CRule [CPVar (5,"hide")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CSymbol ("WUIjs","joinSubFields")) (CVar (0,"wparams"))) (CVar (5,"hide"))) (CVar (1,"subfields"))) (CVar (2,"jscons")))] []]))] (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CVar (3,"errorinsubfields"))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CSymbol ("Prelude","Nothing"))) (CApply (CSymbol ("WUIjs","combine")) (CSymbol ("Prelude","True"))))) (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("WUIjs","conditionOf")) (CVar (0,"wparams"))) (CVar (4,"joinvalue")))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CSymbol ("Prelude","Just")) (CVar (4,"joinvalue")))) (CApply (CSymbol ("WUIjs","combine")) (CSymbol ("Prelude","True"))))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CSymbol ("Prelude","Nothing"))) (CApply (CSymbol ("WUIjs","combine")) (CSymbol ("Prelude","False")))))))] []]),
  CFunc ("WUIjs","altSubField") 5 Private (CFuncType (CTCons ("Prelude","(,,,)") [CFuncType (CTCons ("Prelude","[]") [CTCons ("HTML","HtmlExp") []]) (CTCons ("HTML","HtmlExp") []),CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CFuncType (CTVar (0,"a")) (CTCons ("Prelude","Bool") []),CTCons ("Prelude","Maybe") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]]) (CFuncType (CTCons ("Prelude","Bool") []) (CFuncType (CTCons ("HTML","HtmlExp") []) (CFuncType (CTCons ("Prelude","Maybe") [CTCons ("JavaScript","JSExp") []]) (CFuncType (CTCons ("Prelude","(,)") [CTCons ("Prelude","Int") [],CTCons ("WUIjs","WuiState") []]) (CTCons ("Prelude","(,,)") [CTCons ("HTML","HtmlExp") [],CTCons ("Prelude","Maybe") [CTCons ("JavaScript","JSExp") []],CTCons ("WUIjs","WuiState") []])))))) (CRules CFlex [CRule [CPComb ("Prelude","(,,,)") [CPVar (0,"render"),CPVar (1,"errmsg"),CPVar (2,"_"),CPVar (3,"mbjsck")],CPVar (4,"hide"),CPVar (5,"subhexp"),CPVar (6,"subjsck"),CPVar (7,"altstate")] [(CSymbol ("Prelude","success"),CLetDecl [CLocalPat (CPVar (8,"consstate")) (CApply (CSymbol ("WUIjs","altstate2state")) (CVar (7,"altstate"))) [],CLocalPat (CPVar (9,"refname")) (CApply (CSymbol ("WUIjs","state2refname")) (CVar (8,"consstate"))) [],CLocalPat (CPVar (10,"jscons")) (CApply (CApply (CSymbol ("WUIjs","jsCheckCallFromState")) (CVar (8,"consstate"))) (CVar (3,"mbjsck"))) []] (CApply (CApply (CApply (CSymbol ("Prelude","(,,)")) (CApply (CApply (CApply (CApply (CApply (CApply (CSymbol ("WUIjs","addErrMsg")) (CApply (CSymbol ("Maybe","isJust")) (CVar (10,"jscons")))) (CVar (4,"hide"))) (CSymbol ("Prelude","False"))) (CVar (1,"errmsg"))) (CVar (9,"refname"))) (CApply (CVar (0,"render")) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (5,"subhexp"))) (CSymbol ("Prelude","[]")))))) (CApply (CApply (CApply (CSymbol ("Prelude","maybe")) (CVar (10,"jscons"))) (CLambda [CPVar (11,"subjs")] (CApply (CSymbol ("Prelude","Just")) (CApply (CApply (CApply (CSymbol ("Prelude","maybe")) (CVar (11,"subjs"))) (CLambda [CPVar (12,"jsc")] (CApply (CApply (CApply (CSymbol ("JavaScript","JSOp")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '&'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '&'))) (CSymbol ("Prelude","[]"))))) (CApply (CApply (CApply (CSymbol ("JavaScript","JSOp")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '&'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '&'))) (CSymbol ("Prelude","[]"))))) (CApply (CApply (CSymbol ("JavaScript","JSFCall")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'E'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'C'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'N'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]")))))))))))))))))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("JavaScript","JSString")) (CVar (9,"refname")))) (CSymbol ("Prelude","[]"))))) (CVar (11,"subjs")))) (CVar (12,"jsc"))))) (CVar (10,"jscons")))))) (CVar (6,"subjsck")))) (CVar (8,"consstate"))))] []]),
  CFunc ("WUIjs","jsCheckCallFromState") 2 Private (CFuncType (CTCons ("WUIjs","WuiState") []) (CFuncType (CTCons ("Prelude","Maybe") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]) (CTCons ("Prelude","Maybe") [CTCons ("JavaScript","JSExp") []]))) (CRules CFlex [CRule [CPVar (0,"_"),CPComb ("Prelude","Nothing") []] [(CSymbol ("Prelude","success"),CSymbol ("Prelude","Nothing"))] [],CRule [CPVar (1,"wstate"),CPComb ("Prelude","Just") [CPVar (2,"jsck")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","maybe")) (CSymbol ("Prelude","Nothing"))) (CLambda [CPVar (3,"jsstateaccess")] (CApply (CSymbol ("Prelude","Just")) (CApply (CApply (CSymbol ("JavaScript","JSFCall")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'E'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'C'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'N'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]")))))))))))))))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("JavaScript","JSString")) (CApply (CSymbol ("WUIjs","state2refname")) (CVar (1,"wstate"))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("JavaScript","JSFCall")) (CVar (2,"jsck"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (3,"jsstateaccess"))) (CSymbol ("Prelude","[]"))))) (CSymbol ("Prelude","[]")))))))) (CApply (CSymbol ("WUIjs","jsAccessToState")) (CVar (1,"wstate"))))] []]),
  CFunc ("WUIjs","wJoinTuple") 2 Public (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (0,"a")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (1,"b")]) (CTCons ("WUIjs","WuiSpec") [CTCons ("Prelude","(,)") [CTVar (0,"a"),CTVar (1,"b")]]))) (CRules CFlex [CRule [CPComb ("WUIjs","WuiSpec") [CPVar (0,"wparama"),CPVar (1,"showa"),CPVar (2,"reada")],CPComb ("WUIjs","WuiSpec") [CPVar (3,"wparamb"),CPVar (4,"showb"),CPVar (5,"readb")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("WUIjs","WuiSpec")) (CApply (CApply (CApply (CApply (CSymbol ("Prelude","(,,,)")) (CSymbol ("WUIjs","renderTuple"))) (CSymbol ("WUIjs","tupleError"))) (CApply (CSymbol ("Prelude","const")) (CSymbol ("Prelude","True")))) (CSymbol ("Prelude","Nothing")))) (CSymbol ("WUIjs","showc"))) (CSymbol ("WUIjs","readc")))] [CLocalPat (CPVar (6,"jscons")) (CApply (CSymbol ("Prelude","Just")) (CApply (CSymbol ("WUIjs","jsTupleCons")) (CLit (CIntc 2)))) [],CLocalFunc (CFunc ("WUIjs","render2joinrender") 2 Private (CFuncType (CFuncType (CTCons ("Prelude","[]") [CTCons ("HTML","HtmlExp") []]) (CTVar (0,"a"))) (CFuncType (CTCons ("Prelude","[]") [CTCons ("HTML","HtmlExp") []]) (CTVar (0,"a")))) (CRules CFlex [CRule [CPVar (7,"render"),CPComb ("Prelude",":") [CPVar (8,"h1"),CPComb ("Prelude",":") [CPVar (9,"h2"),CPComb ("Prelude","[]") []]]] [(CSymbol ("Prelude","success"),CLetDecl [CLocalPat (CPVar (10,"h1s")) (CApply (CSymbol ("WUIjs","unRenderTuple")) (CVar (8,"h1"))) [],CLocalPat (CPVar (11,"h2s")) (CApply (CSymbol ("WUIjs","unRenderTuple")) (CVar (9,"h2"))) []] (CApply (CVar (7,"render")) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (10,"h1s"))) (CVar (11,"h2s")))))] []])),CLocalFunc (CFunc ("WUIjs","addJoinRender") 1 Private (CFuncType (CTCons ("Prelude","(,,,)") [CFuncType (CTCons ("Prelude","[]") [CTCons ("HTML","HtmlExp") []]) (CTVar (0,"a")),CTVar (1,"b"),CTVar (2,"c"),CTVar (3,"d")]) (CTCons ("Prelude","(,,,)") [CFuncType (CTCons ("Prelude","[]") [CTCons ("HTML","HtmlExp") []]) (CTVar (0,"a")),CTVar (1,"b"),CTVar (2,"c"),CTVar (3,"d")])) (CRules CFlex [CRule [CPComb ("Prelude","(,,,)") [CPVar (7,"render"),CPVar (8,"errmsg"),CPVar (9,"legal"),CPVar (10,"jsck")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CSymbol ("Prelude","(,,,)")) (CApply (CSymbol ("WUIjs","render2joinrender")) (CVar (7,"render")))) (CVar (8,"errmsg"))) (CVar (9,"legal"))) (CVar (10,"jsck")))] []])),CLocalFunc (CFunc ("WUIjs","showc") 2 Private (CFuncType (CTCons ("Prelude","(,,,)") [CFuncType (CTCons ("Prelude","[]") [CTCons ("HTML","HtmlExp") []]) (CTCons ("HTML","HtmlExp") []),CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CFuncType (CTVar (0,"a")) (CTCons ("Prelude","Bool") []),CTCons ("Prelude","Maybe") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]]) (CFuncType (CTCons ("Prelude","(,)") [CTVar (2,"_1042"),CTVar (3,"_1044")]) (CTCons ("Prelude","(,,)") [CTCons ("HTML","HtmlExp") [],CTCons ("Prelude","Maybe") [CTCons ("JavaScript","JSExp") []],CTCons ("WUIjs","WuiState") []]))) (CRules CFlex [CRule [CPVar (7,"wparams"),CPVar (8,"vc")] [(CApply (CApply (CSymbol ("Prelude","=:<=")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CVar (9,"va"))) (CVar (10,"vb")))) (CVar (8,"vc")),CApply (CApply (CApply (CApply (CSymbol ("WUIjs","joinSubFields")) (CApply (CSymbol ("WUIjs","addJoinRender")) (CVar (7,"wparams")))) (CSymbol ("Prelude","True"))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CVar (1,"showa")) (CVar (0,"wparama"))) (CVar (9,"va")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CVar (4,"showb")) (CVar (3,"wparamb"))) (CVar (10,"vb")))) (CSymbol ("Prelude","[]"))))) (CVar (6,"jscons")))] [CLocalVar (9,"va"),CLocalVar (10,"vb")]])),CLocalFunc (CFunc ("WUIjs","readc") 3 Private (CFuncType (CTCons ("Prelude","(,,,)") [CFuncType (CTCons ("Prelude","[]") [CTCons ("HTML","HtmlExp") []]) (CTCons ("HTML","HtmlExp") []),CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CFuncType (CTCons ("Prelude","(,)") [CTVar (2,"_1042"),CTVar (3,"_1044")]) (CTCons ("Prelude","Bool") []),CTCons ("Prelude","Maybe") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]]) (CFuncType (CFuncType (CTCons ("HTML","CgiRef") []) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CFuncType (CTCons ("WUIjs","WuiState") []) (CTCons ("Prelude","(,)") [CTCons ("Prelude","Maybe") [CTCons ("Prelude","(,)") [CTVar (2,"_1042"),CTVar (3,"_1044")]],CTCons ("Prelude","(,,)") [CTCons ("HTML","HtmlExp") [],CTCons ("Prelude","Maybe") [CTCons ("JavaScript","JSExp") []],CTCons ("WUIjs","WuiState") []]])))) (CRules CFlex [CRule [CPVar (7,"wparams"),CPVar (8,"env"),CPVar (9,"s")] [(CSymbol ("Prelude","success"),CLetDecl [CLocalPat (CPComb ("Prelude",":") [CPVar (10,"ra"),CPComb ("Prelude",":") [CPVar (11,"rb"),CPComb ("Prelude","[]") []]]) (CApply (CSymbol ("WUIjs","state2states")) (CVar (9,"s"))) [],CLocalPat (CPComb ("Prelude","(,)") [CPVar (12,"rav"),CPVar (13,"fielda")]) (CApply (CApply (CApply (CVar (2,"reada")) (CVar (0,"wparama"))) (CVar (8,"env"))) (CVar (10,"ra"))) [],CLocalPat (CPComb ("Prelude","(,)") [CPVar (14,"rbv"),CPVar (15,"fieldb")]) (CApply (CApply (CApply (CVar (5,"readb")) (CVar (3,"wparamb"))) (CVar (8,"env"))) (CVar (11,"rb"))) []] (CApply (CApply (CApply (CApply (CApply (CSymbol ("WUIjs","checkAndJoinSubFields")) (CApply (CSymbol ("WUIjs","addJoinRender")) (CVar (7,"wparams")))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (13,"fielda"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (15,"fieldb"))) (CSymbol ("Prelude","[]"))))) (CVar (6,"jscons"))) (CApply (CApply (CSymbol ("Prelude","||")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (12,"rav"))) (CSymbol ("Prelude","Nothing")))) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (14,"rbv"))) (CSymbol ("Prelude","Nothing"))))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CSymbol ("Maybe","fromJust")) (CVar (12,"rav")))) (CApply (CSymbol ("Maybe","fromJust")) (CVar (14,"rbv"))))))] []]))]]),
  CFunc ("WUIjs","wPair") 0 Public (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (0,"a")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (1,"b")]) (CTCons ("WUIjs","WuiSpec") [CTCons ("Prelude","(,)") [CTVar (0,"a"),CTVar (1,"b")]]))) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("WUIjs","wCons2JS")) (CApply (CSymbol ("Prelude","Just")) (CApply (CSymbol ("WUIjs","jsTupleCons")) (CLit (CIntc 2))))) (CLambda [CPVar (0,"a"),CPVar (1,"b")] (CApply (CApply (CSymbol ("Prelude","(,)")) (CVar (0,"a"))) (CVar (1,"b")))))] []]),
  CFunc ("WUIjs","wCons2") 0 Public (CFuncType (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (1,"b")) (CTVar (2,"c")))) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (0,"a")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (1,"b")]) (CTCons ("WUIjs","WuiSpec") [CTVar (2,"c")])))) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("WUIjs","wCons2JS")) (CSymbol ("Prelude","Nothing")))] []]),
  CFunc ("WUIjs","wCons2JS") 4 Public (CFuncType (CTCons ("Prelude","Maybe") [CFuncType (CTCons ("Prelude","[]") [CTCons ("JavaScript","JSExp") []]) (CTCons ("JavaScript","JSExp") [])]) (CFuncType (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (1,"b")) (CTVar (2,"c")))) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (0,"a")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (1,"b")]) (CTCons ("WUIjs","WuiSpec") [CTVar (2,"c")]))))) (CRules CFlex [CRule [CPVar (0,"jscons"),CPVar (1,"cons"),CPComb ("WUIjs","WuiSpec") [CPVar (2,"wparama"),CPVar (3,"showa"),CPVar (4,"reada")],CPComb ("WUIjs","WuiSpec") [CPVar (5,"wparamb"),CPVar (6,"showb"),CPVar (7,"readb")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("WUIjs","WuiSpec")) (CApply (CApply (CApply (CApply (CSymbol ("Prelude","(,,,)")) (CSymbol ("WUIjs","renderTuple"))) (CSymbol ("WUIjs","tupleError"))) (CApply (CSymbol ("Prelude","const")) (CSymbol ("Prelude","True")))) (CSymbol ("Prelude","Nothing")))) (CSymbol ("WUIjs","showc"))) (CSymbol ("WUIjs","readc")))] [CLocalFunc (CFunc ("WUIjs","showc") 2 Private (CFuncType (CTCons ("Prelude","(,,,)") [CFuncType (CTCons ("Prelude","[]") [CTCons ("HTML","HtmlExp") []]) (CTCons ("HTML","HtmlExp") []),CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CFuncType (CTVar (0,"a")) (CTCons ("Prelude","Bool") []),CTCons ("Prelude","Maybe") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]]) (CFuncType (CTVar (3,"_1100")) (CTCons ("Prelude","(,,)") [CTCons ("HTML","HtmlExp") [],CTCons ("Prelude","Maybe") [CTCons ("JavaScript","JSExp") []],CTCons ("WUIjs","WuiState") []]))) (CRules CFlex [CRule [CPVar (8,"wparams"),CPVar (9,"vc")] [(CApply (CApply (CSymbol ("Prelude","=:<=")) (CApply (CApply (CVar (1,"cons")) (CVar (10,"va"))) (CVar (11,"vb")))) (CVar (9,"vc")),CApply (CApply (CApply (CApply (CSymbol ("WUIjs","joinSubFields")) (CVar (8,"wparams"))) (CSymbol ("Prelude","True"))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CVar (3,"showa")) (CVar (2,"wparama"))) (CVar (10,"va")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CVar (6,"showb")) (CVar (5,"wparamb"))) (CVar (11,"vb")))) (CSymbol ("Prelude","[]"))))) (CVar (0,"jscons")))] [CLocalVar (10,"va"),CLocalVar (11,"vb")]])),CLocalFunc (CFunc ("WUIjs","readc") 3 Private (CFuncType (CTCons ("Prelude","(,,,)") [CFuncType (CTCons ("Prelude","[]") [CTCons ("HTML","HtmlExp") []]) (CTCons ("HTML","HtmlExp") []),CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CFuncType (CTVar (3,"_1100")) (CTCons ("Prelude","Bool") []),CTCons ("Prelude","Maybe") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]]) (CFuncType (CFuncType (CTCons ("HTML","CgiRef") []) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CFuncType (CTCons ("WUIjs","WuiState") []) (CTCons ("Prelude","(,)") [CTCons ("Prelude","Maybe") [CTVar (3,"_1100")],CTCons ("Prelude","(,,)") [CTCons ("HTML","HtmlExp") [],CTCons ("Prelude","Maybe") [CTCons ("JavaScript","JSExp") []],CTCons ("WUIjs","WuiState") []]])))) (CRules CFlex [CRule [CPVar (8,"wparams"),CPVar (9,"env"),CPVar (10,"s")] [(CSymbol ("Prelude","success"),CLetDecl [CLocalPat (CPComb ("Prelude",":") [CPVar (11,"ra"),CPComb ("Prelude",":") [CPVar (12,"rb"),CPComb ("Prelude","[]") []]]) (CApply (CSymbol ("WUIjs","state2states")) (CVar (10,"s"))) [],CLocalPat (CPComb ("Prelude","(,)") [CPVar (13,"rav"),CPVar (14,"fielda")]) (CApply (CApply (CApply (CVar (4,"reada")) (CVar (2,"wparama"))) (CVar (9,"env"))) (CVar (11,"ra"))) [],CLocalPat (CPComb ("Prelude","(,)") [CPVar (15,"rbv"),CPVar (16,"fieldb")]) (CApply (CApply (CApply (CVar (7,"readb")) (CVar (5,"wparamb"))) (CVar (9,"env"))) (CVar (12,"rb"))) []] (CApply (CApply (CApply (CApply (CApply (CSymbol ("WUIjs","checkAndJoinSubFields")) (CVar (8,"wparams"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (14,"fielda"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (16,"fieldb"))) (CSymbol ("Prelude","[]"))))) (CVar (0,"jscons"))) (CApply (CApply (CSymbol ("Prelude","||")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (13,"rav"))) (CSymbol ("Prelude","Nothing")))) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (15,"rbv"))) (CSymbol ("Prelude","Nothing"))))) (CApply (CApply (CVar (1,"cons")) (CApply (CSymbol ("Maybe","fromJust")) (CVar (13,"rav")))) (CApply (CSymbol ("Maybe","fromJust")) (CVar (15,"rbv"))))))] []]))]]),
  CFunc ("WUIjs","wTriple") 0 Public (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (0,"a")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (1,"b")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (2,"c")]) (CTCons ("WUIjs","WuiSpec") [CTCons ("Prelude","(,,)") [CTVar (0,"a"),CTVar (1,"b"),CTVar (2,"c")]])))) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("WUIjs","wCons3JS")) (CApply (CSymbol ("Prelude","Just")) (CApply (CSymbol ("WUIjs","jsTupleCons")) (CLit (CIntc 3))))) (CLambda [CPVar (0,"a"),CPVar (1,"b"),CPVar (2,"c")] (CApply (CApply (CApply (CSymbol ("Prelude","(,,)")) (CVar (0,"a"))) (CVar (1,"b"))) (CVar (2,"c")))))] []]),
  CFunc ("WUIjs","wCons3") 0 Public (CFuncType (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (1,"b")) (CFuncType (CTVar (2,"c")) (CTVar (3,"d"))))) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (0,"a")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (1,"b")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (2,"c")]) (CTCons ("WUIjs","WuiSpec") [CTVar (3,"d")]))))) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("WUIjs","wCons3JS")) (CSymbol ("Prelude","Nothing")))] []]),
  CFunc ("WUIjs","wCons3JS") 5 Public (CFuncType (CTCons ("Prelude","Maybe") [CFuncType (CTCons ("Prelude","[]") [CTCons ("JavaScript","JSExp") []]) (CTCons ("JavaScript","JSExp") [])]) (CFuncType (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (1,"b")) (CFuncType (CTVar (2,"c")) (CTVar (3,"d"))))) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (0,"a")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (1,"b")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (2,"c")]) (CTCons ("WUIjs","WuiSpec") [CTVar (3,"d")])))))) (CRules CFlex [CRule [CPVar (0,"jscons"),CPVar (1,"cons"),CPComb ("WUIjs","WuiSpec") [CPVar (2,"wparama"),CPVar (3,"showa"),CPVar (4,"reada")],CPComb ("WUIjs","WuiSpec") [CPVar (5,"wparamb"),CPVar (6,"showb"),CPVar (7,"readb")],CPComb ("WUIjs","WuiSpec") [CPVar (8,"wparamc"),CPVar (9,"showc"),CPVar (10,"readc")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("WUIjs","WuiSpec")) (CApply (CApply (CApply (CApply (CSymbol ("Prelude","(,,,)")) (CSymbol ("WUIjs","renderTuple"))) (CSymbol ("WUIjs","tupleError"))) (CApply (CSymbol ("Prelude","const")) (CSymbol ("Prelude","True")))) (CSymbol ("Prelude","Nothing")))) (CSymbol ("WUIjs","showd"))) (CSymbol ("WUIjs","readd")))] [CLocalFunc (CFunc ("WUIjs","showd") 2 Private (CFuncType (CTCons ("Prelude","(,,,)") [CFuncType (CTCons ("Prelude","[]") [CTCons ("HTML","HtmlExp") []]) (CTCons ("HTML","HtmlExp") []),CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CFuncType (CTVar (0,"a")) (CTCons ("Prelude","Bool") []),CTCons ("Prelude","Maybe") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]]) (CFuncType (CTVar (4,"_1178")) (CTCons ("Prelude","(,,)") [CTCons ("HTML","HtmlExp") [],CTCons ("Prelude","Maybe") [CTCons ("JavaScript","JSExp") []],CTCons ("WUIjs","WuiState") []]))) (CRules CFlex [CRule [CPVar (11,"wparams"),CPVar (12,"vd")] [(CApply (CApply (CSymbol ("Prelude","=:<=")) (CApply (CApply (CApply (CVar (1,"cons")) (CVar (13,"va"))) (CVar (14,"vb"))) (CVar (15,"vc")))) (CVar (12,"vd")),CApply (CApply (CApply (CApply (CSymbol ("WUIjs","joinSubFields")) (CVar (11,"wparams"))) (CSymbol ("Prelude","True"))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CVar (3,"showa")) (CVar (2,"wparama"))) (CVar (13,"va")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CVar (6,"showb")) (CVar (5,"wparamb"))) (CVar (14,"vb")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CVar (9,"showc")) (CVar (8,"wparamc"))) (CVar (15,"vc")))) (CSymbol ("Prelude","[]")))))) (CVar (0,"jscons")))] [CLocalVar (13,"va"),CLocalVar (14,"vb"),CLocalVar (15,"vc")]])),CLocalFunc (CFunc ("WUIjs","readd") 3 Private (CFuncType (CTCons ("Prelude","(,,,)") [CFuncType (CTCons ("Prelude","[]") [CTCons ("HTML","HtmlExp") []]) (CTCons ("HTML","HtmlExp") []),CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CFuncType (CTVar (4,"_1178")) (CTCons ("Prelude","Bool") []),CTCons ("Prelude","Maybe") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]]) (CFuncType (CFuncType (CTCons ("HTML","CgiRef") []) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CFuncType (CTCons ("WUIjs","WuiState") []) (CTCons ("Prelude","(,)") [CTCons ("Prelude","Maybe") [CTVar (4,"_1178")],CTCons ("Prelude","(,,)") [CTCons ("HTML","HtmlExp") [],CTCons ("Prelude","Maybe") [CTCons ("JavaScript","JSExp") []],CTCons ("WUIjs","WuiState") []]])))) (CRules CFlex [CRule [CPVar (11,"wparams"),CPVar (12,"env"),CPVar (13,"s")] [(CSymbol ("Prelude","success"),CLetDecl [CLocalPat (CPComb ("Prelude",":") [CPVar (14,"ra"),CPComb ("Prelude",":") [CPVar (15,"rb"),CPComb ("Prelude",":") [CPVar (16,"rc"),CPComb ("Prelude","[]") []]]]) (CApply (CSymbol ("WUIjs","state2states")) (CVar (13,"s"))) [],CLocalPat (CPComb ("Prelude","(,)") [CPVar (17,"rav"),CPVar (18,"fielda")]) (CApply (CApply (CApply (CVar (4,"reada")) (CVar (2,"wparama"))) (CVar (12,"env"))) (CVar (14,"ra"))) [],CLocalPat (CPComb ("Prelude","(,)") [CPVar (19,"rbv"),CPVar (20,"fieldb")]) (CApply (CApply (CApply (CVar (7,"readb")) (CVar (5,"wparamb"))) (CVar (12,"env"))) (CVar (15,"rb"))) [],CLocalPat (CPComb ("Prelude","(,)") [CPVar (21,"rcv"),CPVar (22,"fieldc")]) (CApply (CApply (CApply (CVar (10,"readc")) (CVar (8,"wparamc"))) (CVar (12,"env"))) (CVar (16,"rc"))) []] (CApply (CApply (CApply (CApply (CApply (CSymbol ("WUIjs","checkAndJoinSubFields")) (CVar (11,"wparams"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (18,"fielda"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (20,"fieldb"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (22,"fieldc"))) (CSymbol ("Prelude","[]")))))) (CVar (0,"jscons"))) (CApply (CApply (CSymbol ("Prelude","||")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (17,"rav"))) (CSymbol ("Prelude","Nothing")))) (CApply (CApply (CSymbol ("Prelude","||")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (19,"rbv"))) (CSymbol ("Prelude","Nothing")))) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (21,"rcv"))) (CSymbol ("Prelude","Nothing")))))) (CApply (CApply (CApply (CVar (1,"cons")) (CApply (CSymbol ("Maybe","fromJust")) (CVar (17,"rav")))) (CApply (CSymbol ("Maybe","fromJust")) (CVar (19,"rbv")))) (CApply (CSymbol ("Maybe","fromJust")) (CVar (21,"rcv"))))))] []]))]]),
  CFunc ("WUIjs","w4Tuple") 0 Public (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (0,"a")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (1,"b")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (2,"c")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (3,"d")]) (CTCons ("WUIjs","WuiSpec") [CTCons ("Prelude","(,,,)") [CTVar (0,"a"),CTVar (1,"b"),CTVar (2,"c"),CTVar (3,"d")]]))))) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("WUIjs","wCons4JS")) (CApply (CSymbol ("Prelude","Just")) (CApply (CSymbol ("WUIjs","jsTupleCons")) (CLit (CIntc 4))))) (CLambda [CPVar (0,"a"),CPVar (1,"b"),CPVar (2,"c"),CPVar (3,"d")] (CApply (CApply (CApply (CApply (CSymbol ("Prelude","(,,,)")) (CVar (0,"a"))) (CVar (1,"b"))) (CVar (2,"c"))) (CVar (3,"d")))))] []]),
  CFunc ("WUIjs","wCons4") 0 Public (CFuncType (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (1,"b")) (CFuncType (CTVar (2,"c")) (CFuncType (CTVar (3,"d")) (CTVar (4,"e")))))) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (0,"a")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (1,"b")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (2,"c")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (3,"d")]) (CTCons ("WUIjs","WuiSpec") [CTVar (4,"e")])))))) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("WUIjs","wCons4JS")) (CSymbol ("Prelude","Nothing")))] []]),
  CFunc ("WUIjs","wCons4JS") 6 Public (CFuncType (CTCons ("Prelude","Maybe") [CFuncType (CTCons ("Prelude","[]") [CTCons ("JavaScript","JSExp") []]) (CTCons ("JavaScript","JSExp") [])]) (CFuncType (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (1,"b")) (CFuncType (CTVar (2,"c")) (CFuncType (CTVar (3,"d")) (CTVar (4,"e")))))) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (0,"a")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (1,"b")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (2,"c")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (3,"d")]) (CTCons ("WUIjs","WuiSpec") [CTVar (4,"e")]))))))) (CRules CFlex [CRule [CPVar (0,"jscons"),CPVar (1,"cons"),CPComb ("WUIjs","WuiSpec") [CPVar (2,"wparama"),CPVar (3,"showa"),CPVar (4,"reada")],CPComb ("WUIjs","WuiSpec") [CPVar (5,"wparamb"),CPVar (6,"showb"),CPVar (7,"readb")],CPComb ("WUIjs","WuiSpec") [CPVar (8,"wparamc"),CPVar (9,"showc"),CPVar (10,"readc")],CPComb ("WUIjs","WuiSpec") [CPVar (11,"wparamd"),CPVar (12,"showd"),CPVar (13,"readd")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("WUIjs","WuiSpec")) (CApply (CApply (CApply (CApply (CSymbol ("Prelude","(,,,)")) (CSymbol ("WUIjs","renderTuple"))) (CSymbol ("WUIjs","tupleError"))) (CApply (CSymbol ("Prelude","const")) (CSymbol ("Prelude","True")))) (CSymbol ("Prelude","Nothing")))) (CSymbol ("WUIjs","showe"))) (CSymbol ("WUIjs","reade")))] [CLocalFunc (CFunc ("WUIjs","showe") 2 Private (CFuncType (CTCons ("Prelude","(,,,)") [CFuncType (CTCons ("Prelude","[]") [CTCons ("HTML","HtmlExp") []]) (CTCons ("HTML","HtmlExp") []),CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CFuncType (CTVar (0,"a")) (CTCons ("Prelude","Bool") []),CTCons ("Prelude","Maybe") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]]) (CFuncType (CTVar (5,"_1274")) (CTCons ("Prelude","(,,)") [CTCons ("HTML","HtmlExp") [],CTCons ("Prelude","Maybe") [CTCons ("JavaScript","JSExp") []],CTCons ("WUIjs","WuiState") []]))) (CRules CFlex [CRule [CPVar (14,"wparams"),CPVar (15,"ve")] [(CApply (CApply (CSymbol ("Prelude","=:<=")) (CApply (CApply (CApply (CApply (CVar (1,"cons")) (CVar (16,"va"))) (CVar (17,"vb"))) (CVar (18,"vc"))) (CVar (19,"vd")))) (CVar (15,"ve")),CApply (CApply (CApply (CApply (CSymbol ("WUIjs","joinSubFields")) (CVar (14,"wparams"))) (CSymbol ("Prelude","True"))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CVar (3,"showa")) (CVar (2,"wparama"))) (CVar (16,"va")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CVar (6,"showb")) (CVar (5,"wparamb"))) (CVar (17,"vb")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CVar (9,"showc")) (CVar (8,"wparamc"))) (CVar (18,"vc")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CVar (12,"showd")) (CVar (11,"wparamd"))) (CVar (19,"vd")))) (CSymbol ("Prelude","[]"))))))) (CVar (0,"jscons")))] [CLocalVar (16,"va"),CLocalVar (17,"vb"),CLocalVar (18,"vc"),CLocalVar (19,"vd")]])),CLocalFunc (CFunc ("WUIjs","reade") 3 Private (CFuncType (CTCons ("Prelude","(,,,)") [CFuncType (CTCons ("Prelude","[]") [CTCons ("HTML","HtmlExp") []]) (CTCons ("HTML","HtmlExp") []),CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CFuncType (CTVar (5,"_1274")) (CTCons ("Prelude","Bool") []),CTCons ("Prelude","Maybe") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]]) (CFuncType (CFuncType (CTCons ("HTML","CgiRef") []) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CFuncType (CTCons ("WUIjs","WuiState") []) (CTCons ("Prelude","(,)") [CTCons ("Prelude","Maybe") [CTVar (5,"_1274")],CTCons ("Prelude","(,,)") [CTCons ("HTML","HtmlExp") [],CTCons ("Prelude","Maybe") [CTCons ("JavaScript","JSExp") []],CTCons ("WUIjs","WuiState") []]])))) (CRules CFlex [CRule [CPVar (14,"wparams"),CPVar (15,"env"),CPVar (16,"s")] [(CSymbol ("Prelude","success"),CLetDecl [CLocalPat (CPComb ("Prelude",":") [CPVar (17,"ra"),CPComb ("Prelude",":") [CPVar (18,"rb"),CPComb ("Prelude",":") [CPVar (19,"rc"),CPComb ("Prelude",":") [CPVar (20,"rd"),CPComb ("Prelude","[]") []]]]]) (CApply (CSymbol ("WUIjs","state2states")) (CVar (16,"s"))) [],CLocalPat (CPComb ("Prelude","(,)") [CPVar (21,"rav"),CPVar (22,"fielda")]) (CApply (CApply (CApply (CVar (4,"reada")) (CVar (2,"wparama"))) (CVar (15,"env"))) (CVar (17,"ra"))) [],CLocalPat (CPComb ("Prelude","(,)") [CPVar (23,"rbv"),CPVar (24,"fieldb")]) (CApply (CApply (CApply (CVar (7,"readb")) (CVar (5,"wparamb"))) (CVar (15,"env"))) (CVar (18,"rb"))) [],CLocalPat (CPComb ("Prelude","(,)") [CPVar (25,"rcv"),CPVar (26,"fieldc")]) (CApply (CApply (CApply (CVar (10,"readc")) (CVar (8,"wparamc"))) (CVar (15,"env"))) (CVar (19,"rc"))) [],CLocalPat (CPComb ("Prelude","(,)") [CPVar (27,"rdv"),CPVar (28,"fieldd")]) (CApply (CApply (CApply (CVar (13,"readd")) (CVar (11,"wparamd"))) (CVar (15,"env"))) (CVar (20,"rd"))) []] (CApply (CApply (CApply (CApply (CApply (CSymbol ("WUIjs","checkAndJoinSubFields")) (CVar (14,"wparams"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (22,"fielda"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (24,"fieldb"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (26,"fieldc"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (28,"fieldd"))) (CSymbol ("Prelude","[]"))))))) (CVar (0,"jscons"))) (CApply (CApply (CSymbol ("Prelude","||")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (21,"rav"))) (CSymbol ("Prelude","Nothing")))) (CApply (CApply (CSymbol ("Prelude","||")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (23,"rbv"))) (CSymbol ("Prelude","Nothing")))) (CApply (CApply (CSymbol ("Prelude","||")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (25,"rcv"))) (CSymbol ("Prelude","Nothing")))) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (27,"rdv"))) (CSymbol ("Prelude","Nothing"))))))) (CApply (CApply (CApply (CApply (CVar (1,"cons")) (CApply (CSymbol ("Maybe","fromJust")) (CVar (21,"rav")))) (CApply (CSymbol ("Maybe","fromJust")) (CVar (23,"rbv")))) (CApply (CSymbol ("Maybe","fromJust")) (CVar (25,"rcv")))) (CApply (CSymbol ("Maybe","fromJust")) (CVar (27,"rdv"))))))] []]))]]),
  CFunc ("WUIjs","w5Tuple") 0 Public (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (0,"a")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (1,"b")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (2,"c")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (3,"d")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (4,"e")]) (CTCons ("WUIjs","WuiSpec") [CTCons ("Prelude","(,,,,)") [CTVar (0,"a"),CTVar (1,"b"),CTVar (2,"c"),CTVar (3,"d"),CTVar (4,"e")]])))))) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("WUIjs","wCons5JS")) (CApply (CSymbol ("Prelude","Just")) (CApply (CSymbol ("WUIjs","jsTupleCons")) (CLit (CIntc 5))))) (CLambda [CPVar (0,"a"),CPVar (1,"b"),CPVar (2,"c"),CPVar (3,"d"),CPVar (4,"e")] (CApply (CApply (CApply (CApply (CApply (CSymbol ("Prelude","(,,,,)")) (CVar (0,"a"))) (CVar (1,"b"))) (CVar (2,"c"))) (CVar (3,"d"))) (CVar (4,"e")))))] []]),
  CFunc ("WUIjs","wCons5") 0 Public (CFuncType (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (1,"b")) (CFuncType (CTVar (2,"c")) (CFuncType (CTVar (3,"d")) (CFuncType (CTVar (4,"e")) (CTVar (5,"f"))))))) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (0,"a")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (1,"b")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (2,"c")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (3,"d")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (4,"e")]) (CTCons ("WUIjs","WuiSpec") [CTVar (5,"f")]))))))) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("WUIjs","wCons5JS")) (CSymbol ("Prelude","Nothing")))] []]),
  CFunc ("WUIjs","wCons5JS") 7 Public (CFuncType (CTCons ("Prelude","Maybe") [CFuncType (CTCons ("Prelude","[]") [CTCons ("JavaScript","JSExp") []]) (CTCons ("JavaScript","JSExp") [])]) (CFuncType (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (1,"b")) (CFuncType (CTVar (2,"c")) (CFuncType (CTVar (3,"d")) (CFuncType (CTVar (4,"e")) (CTVar (5,"f"))))))) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (0,"a")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (1,"b")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (2,"c")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (3,"d")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (4,"e")]) (CTCons ("WUIjs","WuiSpec") [CTVar (5,"f")])))))))) (CRules CFlex [CRule [CPVar (0,"jscons"),CPVar (1,"cons"),CPComb ("WUIjs","WuiSpec") [CPVar (2,"wparama"),CPVar (3,"showa"),CPVar (4,"reada")],CPComb ("WUIjs","WuiSpec") [CPVar (5,"wparamb"),CPVar (6,"showb"),CPVar (7,"readb")],CPComb ("WUIjs","WuiSpec") [CPVar (8,"wparamc"),CPVar (9,"showc"),CPVar (10,"readc")],CPComb ("WUIjs","WuiSpec") [CPVar (11,"wparamd"),CPVar (12,"showd"),CPVar (13,"readd")],CPComb ("WUIjs","WuiSpec") [CPVar (14,"wparame"),CPVar (15,"showe"),CPVar (16,"reade")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("WUIjs","WuiSpec")) (CApply (CApply (CApply (CApply (CSymbol ("Prelude","(,,,)")) (CSymbol ("WUIjs","renderTuple"))) (CSymbol ("WUIjs","tupleError"))) (CApply (CSymbol ("Prelude","const")) (CSymbol ("Prelude","True")))) (CSymbol ("Prelude","Nothing")))) (CSymbol ("WUIjs","showf"))) (CSymbol ("WUIjs","readf")))] [CLocalFunc (CFunc ("WUIjs","showf") 2 Private (CFuncType (CTCons ("Prelude","(,,,)") [CFuncType (CTCons ("Prelude","[]") [CTCons ("HTML","HtmlExp") []]) (CTCons ("HTML","HtmlExp") []),CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CFuncType (CTVar (0,"a")) (CTCons ("Prelude","Bool") []),CTCons ("Prelude","Maybe") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]]) (CFuncType (CTVar (6,"_1388")) (CTCons ("Prelude","(,,)") [CTCons ("HTML","HtmlExp") [],CTCons ("Prelude","Maybe") [CTCons ("JavaScript","JSExp") []],CTCons ("WUIjs","WuiState") []]))) (CRules CFlex [CRule [CPVar (17,"wparams"),CPVar (18,"vl")] [(CApply (CApply (CSymbol ("Prelude","=:<=")) (CApply (CApply (CApply (CApply (CApply (CVar (1,"cons")) (CVar (19,"va"))) (CVar (20,"vb"))) (CVar (21,"vc"))) (CVar (22,"vd"))) (CVar (23,"ve")))) (CVar (18,"vl")),CApply (CApply (CApply (CApply (CSymbol ("WUIjs","joinSubFields")) (CVar (17,"wparams"))) (CSymbol ("Prelude","True"))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CVar (3,"showa")) (CVar (2,"wparama"))) (CVar (19,"va")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CVar (6,"showb")) (CVar (5,"wparamb"))) (CVar (20,"vb")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CVar (9,"showc")) (CVar (8,"wparamc"))) (CVar (21,"vc")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CVar (12,"showd")) (CVar (11,"wparamd"))) (CVar (22,"vd")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CVar (15,"showe")) (CVar (14,"wparame"))) (CVar (23,"ve")))) (CSymbol ("Prelude","[]")))))))) (CVar (0,"jscons")))] [CLocalVar (19,"va"),CLocalVar (20,"vb"),CLocalVar (21,"vc"),CLocalVar (22,"vd"),CLocalVar (23,"ve")]])),CLocalFunc (CFunc ("WUIjs","readf") 3 Private (CFuncType (CTCons ("Prelude","(,,,)") [CFuncType (CTCons ("Prelude","[]") [CTCons ("HTML","HtmlExp") []]) (CTCons ("HTML","HtmlExp") []),CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CFuncType (CTVar (6,"_1388")) (CTCons ("Prelude","Bool") []),CTCons ("Prelude","Maybe") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]]) (CFuncType (CFuncType (CTCons ("HTML","CgiRef") []) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CFuncType (CTCons ("WUIjs","WuiState") []) (CTCons ("Prelude","(,)") [CTCons ("Prelude","Maybe") [CTVar (6,"_1388")],CTCons ("Prelude","(,,)") [CTCons ("HTML","HtmlExp") [],CTCons ("Prelude","Maybe") [CTCons ("JavaScript","JSExp") []],CTCons ("WUIjs","WuiState") []]])))) (CRules CFlex [CRule [CPVar (17,"wparams"),CPVar (18,"env"),CPVar (19,"s")] [(CSymbol ("Prelude","success"),CLetDecl [CLocalPat (CPComb ("Prelude",":") [CPVar (20,"ra"),CPComb ("Prelude",":") [CPVar (21,"rb"),CPComb ("Prelude",":") [CPVar (22,"rc"),CPComb ("Prelude",":") [CPVar (23,"rd"),CPComb ("Prelude",":") [CPVar (24,"re"),CPComb ("Prelude","[]") []]]]]]) (CApply (CSymbol ("WUIjs","state2states")) (CVar (19,"s"))) [],CLocalPat (CPComb ("Prelude","(,)") [CPVar (25,"rav"),CPVar (26,"fielda")]) (CApply (CApply (CApply (CVar (4,"reada")) (CVar (2,"wparama"))) (CVar (18,"env"))) (CVar (20,"ra"))) [],CLocalPat (CPComb ("Prelude","(,)") [CPVar (27,"rbv"),CPVar (28,"fieldb")]) (CApply (CApply (CApply (CVar (7,"readb")) (CVar (5,"wparamb"))) (CVar (18,"env"))) (CVar (21,"rb"))) [],CLocalPat (CPComb ("Prelude","(,)") [CPVar (29,"rcv"),CPVar (30,"fieldc")]) (CApply (CApply (CApply (CVar (10,"readc")) (CVar (8,"wparamc"))) (CVar (18,"env"))) (CVar (22,"rc"))) [],CLocalPat (CPComb ("Prelude","(,)") [CPVar (31,"rdv"),CPVar (32,"fieldd")]) (CApply (CApply (CApply (CVar (13,"readd")) (CVar (11,"wparamd"))) (CVar (18,"env"))) (CVar (23,"rd"))) [],CLocalPat (CPComb ("Prelude","(,)") [CPVar (33,"rev"),CPVar (34,"fielde")]) (CApply (CApply (CApply (CVar (16,"reade")) (CVar (14,"wparame"))) (CVar (18,"env"))) (CVar (24,"re"))) []] (CApply (CApply (CApply (CApply (CApply (CSymbol ("WUIjs","checkAndJoinSubFields")) (CVar (17,"wparams"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (26,"fielda"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (28,"fieldb"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (30,"fieldc"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (32,"fieldd"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (34,"fielde"))) (CSymbol ("Prelude","[]")))))))) (CVar (0,"jscons"))) (CApply (CApply (CSymbol ("Prelude","||")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (25,"rav"))) (CSymbol ("Prelude","Nothing")))) (CApply (CApply (CSymbol ("Prelude","||")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (27,"rbv"))) (CSymbol ("Prelude","Nothing")))) (CApply (CApply (CSymbol ("Prelude","||")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (29,"rcv"))) (CSymbol ("Prelude","Nothing")))) (CApply (CApply (CSymbol ("Prelude","||")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (31,"rdv"))) (CSymbol ("Prelude","Nothing")))) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (33,"rev"))) (CSymbol ("Prelude","Nothing")))))))) (CApply (CApply (CApply (CApply (CApply (CVar (1,"cons")) (CApply (CSymbol ("Maybe","fromJust")) (CVar (25,"rav")))) (CApply (CSymbol ("Maybe","fromJust")) (CVar (27,"rbv")))) (CApply (CSymbol ("Maybe","fromJust")) (CVar (29,"rcv")))) (CApply (CSymbol ("Maybe","fromJust")) (CVar (31,"rdv")))) (CApply (CSymbol ("Maybe","fromJust")) (CVar (33,"rev"))))))] []]))]]),
  CFunc ("WUIjs","w6Tuple") 0 Public (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (0,"a")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (1,"b")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (2,"c")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (3,"d")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (4,"e")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (5,"f")]) (CTCons ("WUIjs","WuiSpec") [CTCons ("Prelude","(,,,,,)") [CTVar (0,"a"),CTVar (1,"b"),CTVar (2,"c"),CTVar (3,"d"),CTVar (4,"e"),CTVar (5,"f")]]))))))) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("WUIjs","wCons6JS")) (CApply (CSymbol ("Prelude","Just")) (CApply (CSymbol ("WUIjs","jsTupleCons")) (CLit (CIntc 6))))) (CLambda [CPVar (0,"a"),CPVar (1,"b"),CPVar (2,"c"),CPVar (3,"d"),CPVar (4,"e"),CPVar (5,"f")] (CApply (CApply (CApply (CApply (CApply (CApply (CSymbol ("Prelude","(,,,,,)")) (CVar (0,"a"))) (CVar (1,"b"))) (CVar (2,"c"))) (CVar (3,"d"))) (CVar (4,"e"))) (CVar (5,"f")))))] []]),
  CFunc ("WUIjs","wCons6") 0 Public (CFuncType (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (1,"b")) (CFuncType (CTVar (2,"c")) (CFuncType (CTVar (3,"d")) (CFuncType (CTVar (4,"e")) (CFuncType (CTVar (5,"f")) (CTVar (6,"g")))))))) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (0,"a")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (1,"b")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (2,"c")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (3,"d")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (4,"e")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (5,"f")]) (CTCons ("WUIjs","WuiSpec") [CTVar (6,"g")])))))))) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("WUIjs","wCons6JS")) (CSymbol ("Prelude","Nothing")))] []]),
  CFunc ("WUIjs","wCons6JS") 8 Public (CFuncType (CTCons ("Prelude","Maybe") [CFuncType (CTCons ("Prelude","[]") [CTCons ("JavaScript","JSExp") []]) (CTCons ("JavaScript","JSExp") [])]) (CFuncType (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (1,"b")) (CFuncType (CTVar (2,"c")) (CFuncType (CTVar (3,"d")) (CFuncType (CTVar (4,"e")) (CFuncType (CTVar (5,"f")) (CTVar (6,"g")))))))) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (0,"a")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (1,"b")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (2,"c")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (3,"d")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (4,"e")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (5,"f")]) (CTCons ("WUIjs","WuiSpec") [CTVar (6,"g")]))))))))) (CRules CFlex [CRule [CPVar (0,"jscons"),CPVar (1,"cons"),CPComb ("WUIjs","WuiSpec") [CPVar (2,"wparama"),CPVar (3,"showa"),CPVar (4,"reada")],CPComb ("WUIjs","WuiSpec") [CPVar (5,"wparamb"),CPVar (6,"showb"),CPVar (7,"readb")],CPComb ("WUIjs","WuiSpec") [CPVar (8,"wparamc"),CPVar (9,"showc"),CPVar (10,"readc")],CPComb ("WUIjs","WuiSpec") [CPVar (11,"wparamd"),CPVar (12,"showd"),CPVar (13,"readd")],CPComb ("WUIjs","WuiSpec") [CPVar (14,"wparame"),CPVar (15,"showe"),CPVar (16,"reade")],CPComb ("WUIjs","WuiSpec") [CPVar (17,"wparamf"),CPVar (18,"showf"),CPVar (19,"readf")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("WUIjs","WuiSpec")) (CApply (CApply (CApply (CApply (CSymbol ("Prelude","(,,,)")) (CSymbol ("WUIjs","renderTuple"))) (CSymbol ("WUIjs","tupleError"))) (CApply (CSymbol ("Prelude","const")) (CSymbol ("Prelude","True")))) (CSymbol ("Prelude","Nothing")))) (CSymbol ("WUIjs","showg"))) (CSymbol ("WUIjs","readg")))] [CLocalFunc (CFunc ("WUIjs","showg") 2 Private (CFuncType (CTCons ("Prelude","(,,,)") [CFuncType (CTCons ("Prelude","[]") [CTCons ("HTML","HtmlExp") []]) (CTCons ("HTML","HtmlExp") []),CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CFuncType (CTVar (0,"a")) (CTCons ("Prelude","Bool") []),CTCons ("Prelude","Maybe") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]]) (CFuncType (CTVar (7,"_1520")) (CTCons ("Prelude","(,,)") [CTCons ("HTML","HtmlExp") [],CTCons ("Prelude","Maybe") [CTCons ("JavaScript","JSExp") []],CTCons ("WUIjs","WuiState") []]))) (CRules CFlex [CRule [CPVar (20,"wparams"),CPVar (21,"vl")] [(CApply (CApply (CSymbol ("Prelude","=:<=")) (CApply (CApply (CApply (CApply (CApply (CApply (CVar (1,"cons")) (CVar (22,"va"))) (CVar (23,"vb"))) (CVar (24,"vc"))) (CVar (25,"vd"))) (CVar (26,"ve"))) (CVar (27,"vf")))) (CVar (21,"vl")),CApply (CApply (CApply (CApply (CSymbol ("WUIjs","joinSubFields")) (CVar (20,"wparams"))) (CSymbol ("Prelude","True"))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CVar (3,"showa")) (CVar (2,"wparama"))) (CVar (22,"va")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CVar (6,"showb")) (CVar (5,"wparamb"))) (CVar (23,"vb")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CVar (9,"showc")) (CVar (8,"wparamc"))) (CVar (24,"vc")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CVar (12,"showd")) (CVar (11,"wparamd"))) (CVar (25,"vd")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CVar (15,"showe")) (CVar (14,"wparame"))) (CVar (26,"ve")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CVar (18,"showf")) (CVar (17,"wparamf"))) (CVar (27,"vf")))) (CSymbol ("Prelude","[]"))))))))) (CVar (0,"jscons")))] [CLocalVar (22,"va"),CLocalVar (23,"vb"),CLocalVar (24,"vc"),CLocalVar (25,"vd"),CLocalVar (26,"ve"),CLocalVar (27,"vf")]])),CLocalFunc (CFunc ("WUIjs","readg") 3 Private (CFuncType (CTCons ("Prelude","(,,,)") [CFuncType (CTCons ("Prelude","[]") [CTCons ("HTML","HtmlExp") []]) (CTCons ("HTML","HtmlExp") []),CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CFuncType (CTVar (7,"_1520")) (CTCons ("Prelude","Bool") []),CTCons ("Prelude","Maybe") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]]) (CFuncType (CFuncType (CTCons ("HTML","CgiRef") []) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CFuncType (CTCons ("WUIjs","WuiState") []) (CTCons ("Prelude","(,)") [CTCons ("Prelude","Maybe") [CTVar (7,"_1520")],CTCons ("Prelude","(,,)") [CTCons ("HTML","HtmlExp") [],CTCons ("Prelude","Maybe") [CTCons ("JavaScript","JSExp") []],CTCons ("WUIjs","WuiState") []]])))) (CRules CFlex [CRule [CPVar (20,"wparams"),CPVar (21,"env"),CPVar (22,"s")] [(CSymbol ("Prelude","success"),CLetDecl [CLocalPat (CPComb ("Prelude",":") [CPVar (23,"ra"),CPComb ("Prelude",":") [CPVar (24,"rb"),CPComb ("Prelude",":") [CPVar (25,"rc"),CPComb ("Prelude",":") [CPVar (26,"rd"),CPComb ("Prelude",":") [CPVar (27,"re"),CPComb ("Prelude",":") [CPVar (28,"rf"),CPComb ("Prelude","[]") []]]]]]]) (CApply (CSymbol ("WUIjs","state2states")) (CVar (22,"s"))) [],CLocalPat (CPComb ("Prelude","(,)") [CPVar (29,"rav"),CPVar (30,"fielda")]) (CApply (CApply (CApply (CVar (4,"reada")) (CVar (2,"wparama"))) (CVar (21,"env"))) (CVar (23,"ra"))) [],CLocalPat (CPComb ("Prelude","(,)") [CPVar (31,"rbv"),CPVar (32,"fieldb")]) (CApply (CApply (CApply (CVar (7,"readb")) (CVar (5,"wparamb"))) (CVar (21,"env"))) (CVar (24,"rb"))) [],CLocalPat (CPComb ("Prelude","(,)") [CPVar (33,"rcv"),CPVar (34,"fieldc")]) (CApply (CApply (CApply (CVar (10,"readc")) (CVar (8,"wparamc"))) (CVar (21,"env"))) (CVar (25,"rc"))) [],CLocalPat (CPComb ("Prelude","(,)") [CPVar (35,"rdv"),CPVar (36,"fieldd")]) (CApply (CApply (CApply (CVar (13,"readd")) (CVar (11,"wparamd"))) (CVar (21,"env"))) (CVar (26,"rd"))) [],CLocalPat (CPComb ("Prelude","(,)") [CPVar (37,"rev"),CPVar (38,"fielde")]) (CApply (CApply (CApply (CVar (16,"reade")) (CVar (14,"wparame"))) (CVar (21,"env"))) (CVar (27,"re"))) [],CLocalPat (CPComb ("Prelude","(,)") [CPVar (39,"rfv"),CPVar (40,"fieldf")]) (CApply (CApply (CApply (CVar (19,"readf")) (CVar (17,"wparamf"))) (CVar (21,"env"))) (CVar (28,"rf"))) []] (CApply (CApply (CApply (CApply (CApply (CSymbol ("WUIjs","checkAndJoinSubFields")) (CVar (20,"wparams"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (30,"fielda"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (32,"fieldb"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (34,"fieldc"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (36,"fieldd"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (38,"fielde"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (40,"fieldf"))) (CSymbol ("Prelude","[]"))))))))) (CVar (0,"jscons"))) (CApply (CApply (CSymbol ("Prelude","||")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (29,"rav"))) (CSymbol ("Prelude","Nothing")))) (CApply (CApply (CSymbol ("Prelude","||")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (31,"rbv"))) (CSymbol ("Prelude","Nothing")))) (CApply (CApply (CSymbol ("Prelude","||")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (33,"rcv"))) (CSymbol ("Prelude","Nothing")))) (CApply (CApply (CSymbol ("Prelude","||")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (35,"rdv"))) (CSymbol ("Prelude","Nothing")))) (CApply (CApply (CSymbol ("Prelude","||")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (37,"rev"))) (CSymbol ("Prelude","Nothing")))) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (39,"rfv"))) (CSymbol ("Prelude","Nothing"))))))))) (CApply (CApply (CApply (CApply (CApply (CApply (CVar (1,"cons")) (CApply (CSymbol ("Maybe","fromJust")) (CVar (29,"rav")))) (CApply (CSymbol ("Maybe","fromJust")) (CVar (31,"rbv")))) (CApply (CSymbol ("Maybe","fromJust")) (CVar (33,"rcv")))) (CApply (CSymbol ("Maybe","fromJust")) (CVar (35,"rdv")))) (CApply (CSymbol ("Maybe","fromJust")) (CVar (37,"rev")))) (CApply (CSymbol ("Maybe","fromJust")) (CVar (39,"rfv"))))))] []]))]]),
  CFunc ("WUIjs","w7Tuple") 0 Public (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (0,"a")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (1,"b")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (2,"c")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (3,"d")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (4,"e")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (5,"f")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (6,"g")]) (CTCons ("WUIjs","WuiSpec") [CTCons ("Prelude","(,,,,,,)") [CTVar (0,"a"),CTVar (1,"b"),CTVar (2,"c"),CTVar (3,"d"),CTVar (4,"e"),CTVar (5,"f"),CTVar (6,"g")]])))))))) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("WUIjs","wCons7JS")) (CApply (CSymbol ("Prelude","Just")) (CApply (CSymbol ("WUIjs","jsTupleCons")) (CLit (CIntc 7))))) (CLambda [CPVar (0,"a"),CPVar (1,"b"),CPVar (2,"c"),CPVar (3,"d"),CPVar (4,"e"),CPVar (5,"f"),CPVar (6,"g")] (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CSymbol ("Prelude","(,,,,,,)")) (CVar (0,"a"))) (CVar (1,"b"))) (CVar (2,"c"))) (CVar (3,"d"))) (CVar (4,"e"))) (CVar (5,"f"))) (CVar (6,"g")))))] []]),
  CFunc ("WUIjs","wCons7") 0 Public (CFuncType (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (1,"b")) (CFuncType (CTVar (2,"c")) (CFuncType (CTVar (3,"d")) (CFuncType (CTVar (4,"e")) (CFuncType (CTVar (5,"f")) (CFuncType (CTVar (6,"g")) (CTVar (7,"h"))))))))) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (0,"a")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (1,"b")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (2,"c")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (3,"d")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (4,"e")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (5,"f")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (6,"g")]) (CTCons ("WUIjs","WuiSpec") [CTVar (7,"h")]))))))))) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("WUIjs","wCons7JS")) (CSymbol ("Prelude","Nothing")))] []]),
  CFunc ("WUIjs","wCons7JS") 9 Public (CFuncType (CTCons ("Prelude","Maybe") [CFuncType (CTCons ("Prelude","[]") [CTCons ("JavaScript","JSExp") []]) (CTCons ("JavaScript","JSExp") [])]) (CFuncType (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (1,"b")) (CFuncType (CTVar (2,"c")) (CFuncType (CTVar (3,"d")) (CFuncType (CTVar (4,"e")) (CFuncType (CTVar (5,"f")) (CFuncType (CTVar (6,"g")) (CTVar (7,"h"))))))))) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (0,"a")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (1,"b")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (2,"c")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (3,"d")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (4,"e")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (5,"f")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (6,"g")]) (CTCons ("WUIjs","WuiSpec") [CTVar (7,"h")])))))))))) (CRules CFlex [CRule [CPVar (0,"jscons"),CPVar (1,"cons"),CPComb ("WUIjs","WuiSpec") [CPVar (2,"wparama"),CPVar (3,"showa"),CPVar (4,"reada")],CPComb ("WUIjs","WuiSpec") [CPVar (5,"wparamb"),CPVar (6,"showb"),CPVar (7,"readb")],CPComb ("WUIjs","WuiSpec") [CPVar (8,"wparamc"),CPVar (9,"showc"),CPVar (10,"readc")],CPComb ("WUIjs","WuiSpec") [CPVar (11,"wparamd"),CPVar (12,"showd"),CPVar (13,"readd")],CPComb ("WUIjs","WuiSpec") [CPVar (14,"wparame"),CPVar (15,"showe"),CPVar (16,"reade")],CPComb ("WUIjs","WuiSpec") [CPVar (17,"wparamf"),CPVar (18,"showf"),CPVar (19,"readf")],CPComb ("WUIjs","WuiSpec") [CPVar (20,"wparamg"),CPVar (21,"showg"),CPVar (22,"readg")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("WUIjs","WuiSpec")) (CApply (CApply (CApply (CApply (CSymbol ("Prelude","(,,,)")) (CSymbol ("WUIjs","renderTuple"))) (CSymbol ("WUIjs","tupleError"))) (CApply (CSymbol ("Prelude","const")) (CSymbol ("Prelude","True")))) (CSymbol ("Prelude","Nothing")))) (CSymbol ("WUIjs","showh"))) (CSymbol ("WUIjs","readh")))] [CLocalFunc (CFunc ("WUIjs","showh") 2 Private (CFuncType (CTCons ("Prelude","(,,,)") [CFuncType (CTCons ("Prelude","[]") [CTCons ("HTML","HtmlExp") []]) (CTCons ("HTML","HtmlExp") []),CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CFuncType (CTVar (0,"a")) (CTCons ("Prelude","Bool") []),CTCons ("Prelude","Maybe") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]]) (CFuncType (CTVar (8,"_1670")) (CTCons ("Prelude","(,,)") [CTCons ("HTML","HtmlExp") [],CTCons ("Prelude","Maybe") [CTCons ("JavaScript","JSExp") []],CTCons ("WUIjs","WuiState") []]))) (CRules CFlex [CRule [CPVar (23,"wparams"),CPVar (24,"vl")] [(CApply (CApply (CSymbol ("Prelude","=:<=")) (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CVar (1,"cons")) (CVar (25,"va"))) (CVar (26,"vb"))) (CVar (27,"vc"))) (CVar (28,"vd"))) (CVar (29,"ve"))) (CVar (30,"vf"))) (CVar (31,"vg")))) (CVar (24,"vl")),CApply (CApply (CApply (CApply (CSymbol ("WUIjs","joinSubFields")) (CVar (23,"wparams"))) (CSymbol ("Prelude","True"))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CVar (3,"showa")) (CVar (2,"wparama"))) (CVar (25,"va")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CVar (6,"showb")) (CVar (5,"wparamb"))) (CVar (26,"vb")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CVar (9,"showc")) (CVar (8,"wparamc"))) (CVar (27,"vc")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CVar (12,"showd")) (CVar (11,"wparamd"))) (CVar (28,"vd")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CVar (15,"showe")) (CVar (14,"wparame"))) (CVar (29,"ve")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CVar (18,"showf")) (CVar (17,"wparamf"))) (CVar (30,"vf")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CVar (21,"showg")) (CVar (20,"wparamg"))) (CVar (31,"vg")))) (CSymbol ("Prelude","[]")))))))))) (CVar (0,"jscons")))] [CLocalVar (25,"va"),CLocalVar (26,"vb"),CLocalVar (27,"vc"),CLocalVar (28,"vd"),CLocalVar (29,"ve"),CLocalVar (30,"vf"),CLocalVar (31,"vg")]])),CLocalFunc (CFunc ("WUIjs","readh") 3 Private (CFuncType (CTCons ("Prelude","(,,,)") [CFuncType (CTCons ("Prelude","[]") [CTCons ("HTML","HtmlExp") []]) (CTCons ("HTML","HtmlExp") []),CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CFuncType (CTVar (8,"_1670")) (CTCons ("Prelude","Bool") []),CTCons ("Prelude","Maybe") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]]) (CFuncType (CFuncType (CTCons ("HTML","CgiRef") []) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CFuncType (CTCons ("WUIjs","WuiState") []) (CTCons ("Prelude","(,)") [CTCons ("Prelude","Maybe") [CTVar (8,"_1670")],CTCons ("Prelude","(,,)") [CTCons ("HTML","HtmlExp") [],CTCons ("Prelude","Maybe") [CTCons ("JavaScript","JSExp") []],CTCons ("WUIjs","WuiState") []]])))) (CRules CFlex [CRule [CPVar (23,"wparams"),CPVar (24,"env"),CPVar (25,"s")] [(CSymbol ("Prelude","success"),CLetDecl [CLocalPat (CPComb ("Prelude",":") [CPVar (26,"ra"),CPComb ("Prelude",":") [CPVar (27,"rb"),CPComb ("Prelude",":") [CPVar (28,"rc"),CPComb ("Prelude",":") [CPVar (29,"rd"),CPComb ("Prelude",":") [CPVar (30,"re"),CPComb ("Prelude",":") [CPVar (31,"rf"),CPComb ("Prelude",":") [CPVar (32,"rg"),CPComb ("Prelude","[]") []]]]]]]]) (CApply (CSymbol ("WUIjs","state2states")) (CVar (25,"s"))) [],CLocalPat (CPComb ("Prelude","(,)") [CPVar (33,"rav"),CPVar (34,"fielda")]) (CApply (CApply (CApply (CVar (4,"reada")) (CVar (2,"wparama"))) (CVar (24,"env"))) (CVar (26,"ra"))) [],CLocalPat (CPComb ("Prelude","(,)") [CPVar (35,"rbv"),CPVar (36,"fieldb")]) (CApply (CApply (CApply (CVar (7,"readb")) (CVar (5,"wparamb"))) (CVar (24,"env"))) (CVar (27,"rb"))) [],CLocalPat (CPComb ("Prelude","(,)") [CPVar (37,"rcv"),CPVar (38,"fieldc")]) (CApply (CApply (CApply (CVar (10,"readc")) (CVar (8,"wparamc"))) (CVar (24,"env"))) (CVar (28,"rc"))) [],CLocalPat (CPComb ("Prelude","(,)") [CPVar (39,"rdv"),CPVar (40,"fieldd")]) (CApply (CApply (CApply (CVar (13,"readd")) (CVar (11,"wparamd"))) (CVar (24,"env"))) (CVar (29,"rd"))) [],CLocalPat (CPComb ("Prelude","(,)") [CPVar (41,"rev"),CPVar (42,"fielde")]) (CApply (CApply (CApply (CVar (16,"reade")) (CVar (14,"wparame"))) (CVar (24,"env"))) (CVar (30,"re"))) [],CLocalPat (CPComb ("Prelude","(,)") [CPVar (43,"rfv"),CPVar (44,"fieldf")]) (CApply (CApply (CApply (CVar (19,"readf")) (CVar (17,"wparamf"))) (CVar (24,"env"))) (CVar (31,"rf"))) [],CLocalPat (CPComb ("Prelude","(,)") [CPVar (45,"rgv"),CPVar (46,"fieldg")]) (CApply (CApply (CApply (CVar (22,"readg")) (CVar (20,"wparamg"))) (CVar (24,"env"))) (CVar (32,"rg"))) []] (CApply (CApply (CApply (CApply (CApply (CSymbol ("WUIjs","checkAndJoinSubFields")) (CVar (23,"wparams"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (34,"fielda"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (36,"fieldb"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (38,"fieldc"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (40,"fieldd"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (42,"fielde"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (44,"fieldf"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (46,"fieldg"))) (CSymbol ("Prelude","[]")))))))))) (CVar (0,"jscons"))) (CApply (CApply (CSymbol ("Prelude","||")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (33,"rav"))) (CSymbol ("Prelude","Nothing")))) (CApply (CApply (CSymbol ("Prelude","||")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (35,"rbv"))) (CSymbol ("Prelude","Nothing")))) (CApply (CApply (CSymbol ("Prelude","||")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (37,"rcv"))) (CSymbol ("Prelude","Nothing")))) (CApply (CApply (CSymbol ("Prelude","||")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (39,"rdv"))) (CSymbol ("Prelude","Nothing")))) (CApply (CApply (CSymbol ("Prelude","||")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (41,"rev"))) (CSymbol ("Prelude","Nothing")))) (CApply (CApply (CSymbol ("Prelude","||")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (43,"rfv"))) (CSymbol ("Prelude","Nothing")))) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (45,"rgv"))) (CSymbol ("Prelude","Nothing")))))))))) (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CVar (1,"cons")) (CApply (CSymbol ("Maybe","fromJust")) (CVar (33,"rav")))) (CApply (CSymbol ("Maybe","fromJust")) (CVar (35,"rbv")))) (CApply (CSymbol ("Maybe","fromJust")) (CVar (37,"rcv")))) (CApply (CSymbol ("Maybe","fromJust")) (CVar (39,"rdv")))) (CApply (CSymbol ("Maybe","fromJust")) (CVar (41,"rev")))) (CApply (CSymbol ("Maybe","fromJust")) (CVar (43,"rfv")))) (CApply (CSymbol ("Maybe","fromJust")) (CVar (45,"rgv"))))))] []]))]]),
  CFunc ("WUIjs","w8Tuple") 0 Public (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (0,"a")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (1,"b")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (2,"c")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (3,"d")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (4,"e")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (5,"f")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (6,"g")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (7,"h")]) (CTCons ("WUIjs","WuiSpec") [CTCons ("Prelude","(,,,,,,,)") [CTVar (0,"a"),CTVar (1,"b"),CTVar (2,"c"),CTVar (3,"d"),CTVar (4,"e"),CTVar (5,"f"),CTVar (6,"g"),CTVar (7,"h")]]))))))))) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("WUIjs","wCons8JS")) (CApply (CSymbol ("Prelude","Just")) (CApply (CSymbol ("WUIjs","jsTupleCons")) (CLit (CIntc 8))))) (CLambda [CPVar (0,"a"),CPVar (1,"b"),CPVar (2,"c"),CPVar (3,"d"),CPVar (4,"e"),CPVar (5,"f"),CPVar (6,"g"),CPVar (7,"h")] (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CSymbol ("Prelude","(,,,,,,,)")) (CVar (0,"a"))) (CVar (1,"b"))) (CVar (2,"c"))) (CVar (3,"d"))) (CVar (4,"e"))) (CVar (5,"f"))) (CVar (6,"g"))) (CVar (7,"h")))))] []]),
  CFunc ("WUIjs","wCons8") 0 Public (CFuncType (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (1,"b")) (CFuncType (CTVar (2,"c")) (CFuncType (CTVar (3,"d")) (CFuncType (CTVar (4,"e")) (CFuncType (CTVar (5,"f")) (CFuncType (CTVar (6,"g")) (CFuncType (CTVar (7,"h")) (CTVar (8,"i")))))))))) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (0,"a")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (1,"b")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (2,"c")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (3,"d")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (4,"e")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (5,"f")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (6,"g")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (7,"h")]) (CTCons ("WUIjs","WuiSpec") [CTVar (8,"i")])))))))))) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("WUIjs","wCons8JS")) (CSymbol ("Prelude","Nothing")))] []]),
  CFunc ("WUIjs","wCons8JS") 10 Public (CFuncType (CTCons ("Prelude","Maybe") [CFuncType (CTCons ("Prelude","[]") [CTCons ("JavaScript","JSExp") []]) (CTCons ("JavaScript","JSExp") [])]) (CFuncType (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (1,"b")) (CFuncType (CTVar (2,"c")) (CFuncType (CTVar (3,"d")) (CFuncType (CTVar (4,"e")) (CFuncType (CTVar (5,"f")) (CFuncType (CTVar (6,"g")) (CFuncType (CTVar (7,"h")) (CTVar (8,"i")))))))))) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (0,"a")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (1,"b")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (2,"c")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (3,"d")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (4,"e")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (5,"f")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (6,"g")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (7,"h")]) (CTCons ("WUIjs","WuiSpec") [CTVar (8,"i")]))))))))))) (CRules CFlex [CRule [CPVar (0,"jscons"),CPVar (1,"cons"),CPComb ("WUIjs","WuiSpec") [CPVar (2,"wparama"),CPVar (3,"showa"),CPVar (4,"reada")],CPComb ("WUIjs","WuiSpec") [CPVar (5,"wparamb"),CPVar (6,"showb"),CPVar (7,"readb")],CPComb ("WUIjs","WuiSpec") [CPVar (8,"wparamc"),CPVar (9,"showc"),CPVar (10,"readc")],CPComb ("WUIjs","WuiSpec") [CPVar (11,"wparamd"),CPVar (12,"showd"),CPVar (13,"readd")],CPComb ("WUIjs","WuiSpec") [CPVar (14,"wparame"),CPVar (15,"showe"),CPVar (16,"reade")],CPComb ("WUIjs","WuiSpec") [CPVar (17,"wparamf"),CPVar (18,"showf"),CPVar (19,"readf")],CPComb ("WUIjs","WuiSpec") [CPVar (20,"wparamg"),CPVar (21,"showg"),CPVar (22,"readg")],CPComb ("WUIjs","WuiSpec") [CPVar (23,"wparamh"),CPVar (24,"showh"),CPVar (25,"readh")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("WUIjs","WuiSpec")) (CApply (CApply (CApply (CApply (CSymbol ("Prelude","(,,,)")) (CSymbol ("WUIjs","renderTuple"))) (CSymbol ("WUIjs","tupleError"))) (CApply (CSymbol ("Prelude","const")) (CSymbol ("Prelude","True")))) (CSymbol ("Prelude","Nothing")))) (CSymbol ("WUIjs","showi"))) (CSymbol ("WUIjs","readi")))] [CLocalFunc (CFunc ("WUIjs","showi") 2 Private (CFuncType (CTCons ("Prelude","(,,,)") [CFuncType (CTCons ("Prelude","[]") [CTCons ("HTML","HtmlExp") []]) (CTCons ("HTML","HtmlExp") []),CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CFuncType (CTVar (0,"a")) (CTCons ("Prelude","Bool") []),CTCons ("Prelude","Maybe") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]]) (CFuncType (CTVar (9,"_1838")) (CTCons ("Prelude","(,,)") [CTCons ("HTML","HtmlExp") [],CTCons ("Prelude","Maybe") [CTCons ("JavaScript","JSExp") []],CTCons ("WUIjs","WuiState") []]))) (CRules CFlex [CRule [CPVar (26,"wparams"),CPVar (27,"vl")] [(CApply (CApply (CSymbol ("Prelude","=:<=")) (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CVar (1,"cons")) (CVar (28,"va"))) (CVar (29,"vb"))) (CVar (30,"vc"))) (CVar (31,"vd"))) (CVar (32,"ve"))) (CVar (33,"vf"))) (CVar (34,"vg"))) (CVar (35,"vh")))) (CVar (27,"vl")),CApply (CApply (CApply (CApply (CSymbol ("WUIjs","joinSubFields")) (CVar (26,"wparams"))) (CSymbol ("Prelude","True"))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CVar (3,"showa")) (CVar (2,"wparama"))) (CVar (28,"va")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CVar (6,"showb")) (CVar (5,"wparamb"))) (CVar (29,"vb")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CVar (9,"showc")) (CVar (8,"wparamc"))) (CVar (30,"vc")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CVar (12,"showd")) (CVar (11,"wparamd"))) (CVar (31,"vd")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CVar (15,"showe")) (CVar (14,"wparame"))) (CVar (32,"ve")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CVar (18,"showf")) (CVar (17,"wparamf"))) (CVar (33,"vf")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CVar (21,"showg")) (CVar (20,"wparamg"))) (CVar (34,"vg")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CVar (24,"showh")) (CVar (23,"wparamh"))) (CVar (35,"vh")))) (CSymbol ("Prelude","[]"))))))))))) (CVar (0,"jscons")))] [CLocalVar (28,"va"),CLocalVar (29,"vb"),CLocalVar (30,"vc"),CLocalVar (31,"vd"),CLocalVar (32,"ve"),CLocalVar (33,"vf"),CLocalVar (34,"vg"),CLocalVar (35,"vh")]])),CLocalFunc (CFunc ("WUIjs","readi") 3 Private (CFuncType (CTCons ("Prelude","(,,,)") [CFuncType (CTCons ("Prelude","[]") [CTCons ("HTML","HtmlExp") []]) (CTCons ("HTML","HtmlExp") []),CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CFuncType (CTVar (9,"_1838")) (CTCons ("Prelude","Bool") []),CTCons ("Prelude","Maybe") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]]) (CFuncType (CFuncType (CTCons ("HTML","CgiRef") []) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CFuncType (CTCons ("WUIjs","WuiState") []) (CTCons ("Prelude","(,)") [CTCons ("Prelude","Maybe") [CTVar (9,"_1838")],CTCons ("Prelude","(,,)") [CTCons ("HTML","HtmlExp") [],CTCons ("Prelude","Maybe") [CTCons ("JavaScript","JSExp") []],CTCons ("WUIjs","WuiState") []]])))) (CRules CFlex [CRule [CPVar (26,"wparams"),CPVar (27,"env"),CPVar (28,"s")] [(CSymbol ("Prelude","success"),CLetDecl [CLocalPat (CPComb ("Prelude",":") [CPVar (29,"ra"),CPComb ("Prelude",":") [CPVar (30,"rb"),CPComb ("Prelude",":") [CPVar (31,"rc"),CPComb ("Prelude",":") [CPVar (32,"rd"),CPComb ("Prelude",":") [CPVar (33,"re"),CPComb ("Prelude",":") [CPVar (34,"rf"),CPComb ("Prelude",":") [CPVar (35,"rg"),CPComb ("Prelude",":") [CPVar (36,"rh"),CPComb ("Prelude","[]") []]]]]]]]]) (CApply (CSymbol ("WUIjs","state2states")) (CVar (28,"s"))) [],CLocalPat (CPComb ("Prelude","(,)") [CPVar (37,"rav"),CPVar (38,"fielda")]) (CApply (CApply (CApply (CVar (4,"reada")) (CVar (2,"wparama"))) (CVar (27,"env"))) (CVar (29,"ra"))) [],CLocalPat (CPComb ("Prelude","(,)") [CPVar (39,"rbv"),CPVar (40,"fieldb")]) (CApply (CApply (CApply (CVar (7,"readb")) (CVar (5,"wparamb"))) (CVar (27,"env"))) (CVar (30,"rb"))) [],CLocalPat (CPComb ("Prelude","(,)") [CPVar (41,"rcv"),CPVar (42,"fieldc")]) (CApply (CApply (CApply (CVar (10,"readc")) (CVar (8,"wparamc"))) (CVar (27,"env"))) (CVar (31,"rc"))) [],CLocalPat (CPComb ("Prelude","(,)") [CPVar (43,"rdv"),CPVar (44,"fieldd")]) (CApply (CApply (CApply (CVar (13,"readd")) (CVar (11,"wparamd"))) (CVar (27,"env"))) (CVar (32,"rd"))) [],CLocalPat (CPComb ("Prelude","(,)") [CPVar (45,"rev"),CPVar (46,"fielde")]) (CApply (CApply (CApply (CVar (16,"reade")) (CVar (14,"wparame"))) (CVar (27,"env"))) (CVar (33,"re"))) [],CLocalPat (CPComb ("Prelude","(,)") [CPVar (47,"rfv"),CPVar (48,"fieldf")]) (CApply (CApply (CApply (CVar (19,"readf")) (CVar (17,"wparamf"))) (CVar (27,"env"))) (CVar (34,"rf"))) [],CLocalPat (CPComb ("Prelude","(,)") [CPVar (49,"rgv"),CPVar (50,"fieldg")]) (CApply (CApply (CApply (CVar (22,"readg")) (CVar (20,"wparamg"))) (CVar (27,"env"))) (CVar (35,"rg"))) [],CLocalPat (CPComb ("Prelude","(,)") [CPVar (51,"rhv"),CPVar (52,"fieldh")]) (CApply (CApply (CApply (CVar (25,"readh")) (CVar (23,"wparamh"))) (CVar (27,"env"))) (CVar (36,"rh"))) []] (CApply (CApply (CApply (CApply (CApply (CSymbol ("WUIjs","checkAndJoinSubFields")) (CVar (26,"wparams"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (38,"fielda"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (40,"fieldb"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (42,"fieldc"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (44,"fieldd"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (46,"fielde"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (48,"fieldf"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (50,"fieldg"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (52,"fieldh"))) (CSymbol ("Prelude","[]"))))))))))) (CVar (0,"jscons"))) (CApply (CApply (CSymbol ("Prelude","||")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (37,"rav"))) (CSymbol ("Prelude","Nothing")))) (CApply (CApply (CSymbol ("Prelude","||")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (39,"rbv"))) (CSymbol ("Prelude","Nothing")))) (CApply (CApply (CSymbol ("Prelude","||")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (41,"rcv"))) (CSymbol ("Prelude","Nothing")))) (CApply (CApply (CSymbol ("Prelude","||")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (43,"rdv"))) (CSymbol ("Prelude","Nothing")))) (CApply (CApply (CSymbol ("Prelude","||")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (45,"rev"))) (CSymbol ("Prelude","Nothing")))) (CApply (CApply (CSymbol ("Prelude","||")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (47,"rfv"))) (CSymbol ("Prelude","Nothing")))) (CApply (CApply (CSymbol ("Prelude","||")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (49,"rgv"))) (CSymbol ("Prelude","Nothing")))) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (51,"rhv"))) (CSymbol ("Prelude","Nothing"))))))))))) (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CVar (1,"cons")) (CApply (CSymbol ("Maybe","fromJust")) (CVar (37,"rav")))) (CApply (CSymbol ("Maybe","fromJust")) (CVar (39,"rbv")))) (CApply (CSymbol ("Maybe","fromJust")) (CVar (41,"rcv")))) (CApply (CSymbol ("Maybe","fromJust")) (CVar (43,"rdv")))) (CApply (CSymbol ("Maybe","fromJust")) (CVar (45,"rev")))) (CApply (CSymbol ("Maybe","fromJust")) (CVar (47,"rfv")))) (CApply (CSymbol ("Maybe","fromJust")) (CVar (49,"rgv")))) (CApply (CSymbol ("Maybe","fromJust")) (CVar (51,"rhv"))))))] []]))]]),
  CFunc ("WUIjs","w9Tuple") 0 Public (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (0,"a")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (1,"b")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (2,"c")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (3,"d")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (4,"e")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (5,"f")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (6,"g")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (7,"h")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (8,"i")]) (CTCons ("WUIjs","WuiSpec") [CTCons ("Prelude","(,,,,,,,,)") [CTVar (0,"a"),CTVar (1,"b"),CTVar (2,"c"),CTVar (3,"d"),CTVar (4,"e"),CTVar (5,"f"),CTVar (6,"g"),CTVar (7,"h"),CTVar (8,"i")]])))))))))) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("WUIjs","wCons9JS")) (CApply (CSymbol ("Prelude","Just")) (CApply (CSymbol ("WUIjs","jsTupleCons")) (CLit (CIntc 9))))) (CLambda [CPVar (0,"a"),CPVar (1,"b"),CPVar (2,"c"),CPVar (3,"d"),CPVar (4,"e"),CPVar (5,"f"),CPVar (6,"g"),CPVar (7,"h"),CPVar (8,"i")] (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CSymbol ("Prelude","(,,,,,,,,)")) (CVar (0,"a"))) (CVar (1,"b"))) (CVar (2,"c"))) (CVar (3,"d"))) (CVar (4,"e"))) (CVar (5,"f"))) (CVar (6,"g"))) (CVar (7,"h"))) (CVar (8,"i")))))] []]),
  CFunc ("WUIjs","wCons9") 0 Public (CFuncType (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (1,"b")) (CFuncType (CTVar (2,"c")) (CFuncType (CTVar (3,"d")) (CFuncType (CTVar (4,"e")) (CFuncType (CTVar (5,"f")) (CFuncType (CTVar (6,"g")) (CFuncType (CTVar (7,"h")) (CFuncType (CTVar (8,"i")) (CTVar (9,"j"))))))))))) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (0,"a")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (1,"b")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (2,"c")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (3,"d")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (4,"e")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (5,"f")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (6,"g")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (7,"h")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (8,"i")]) (CTCons ("WUIjs","WuiSpec") [CTVar (9,"j")]))))))))))) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("WUIjs","wCons9JS")) (CSymbol ("Prelude","Nothing")))] []]),
  CFunc ("WUIjs","wCons9JS") 11 Public (CFuncType (CTCons ("Prelude","Maybe") [CFuncType (CTCons ("Prelude","[]") [CTCons ("JavaScript","JSExp") []]) (CTCons ("JavaScript","JSExp") [])]) (CFuncType (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (1,"b")) (CFuncType (CTVar (2,"c")) (CFuncType (CTVar (3,"d")) (CFuncType (CTVar (4,"e")) (CFuncType (CTVar (5,"f")) (CFuncType (CTVar (6,"g")) (CFuncType (CTVar (7,"h")) (CFuncType (CTVar (8,"i")) (CTVar (9,"j"))))))))))) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (0,"a")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (1,"b")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (2,"c")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (3,"d")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (4,"e")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (5,"f")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (6,"g")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (7,"h")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (8,"i")]) (CTCons ("WUIjs","WuiSpec") [CTVar (9,"j")])))))))))))) (CRules CFlex [CRule [CPVar (0,"jscons"),CPVar (1,"cons"),CPComb ("WUIjs","WuiSpec") [CPVar (2,"wparama"),CPVar (3,"showa"),CPVar (4,"reada")],CPComb ("WUIjs","WuiSpec") [CPVar (5,"wparamb"),CPVar (6,"showb"),CPVar (7,"readb")],CPComb ("WUIjs","WuiSpec") [CPVar (8,"wparamc"),CPVar (9,"showc"),CPVar (10,"readc")],CPComb ("WUIjs","WuiSpec") [CPVar (11,"wparamd"),CPVar (12,"showd"),CPVar (13,"readd")],CPComb ("WUIjs","WuiSpec") [CPVar (14,"wparame"),CPVar (15,"showe"),CPVar (16,"reade")],CPComb ("WUIjs","WuiSpec") [CPVar (17,"wparamf"),CPVar (18,"showf"),CPVar (19,"readf")],CPComb ("WUIjs","WuiSpec") [CPVar (20,"wparamg"),CPVar (21,"showg"),CPVar (22,"readg")],CPComb ("WUIjs","WuiSpec") [CPVar (23,"wparamh"),CPVar (24,"showh"),CPVar (25,"readh")],CPComb ("WUIjs","WuiSpec") [CPVar (26,"wparami"),CPVar (27,"showi"),CPVar (28,"readi")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("WUIjs","WuiSpec")) (CApply (CApply (CApply (CApply (CSymbol ("Prelude","(,,,)")) (CSymbol ("WUIjs","renderTuple"))) (CSymbol ("WUIjs","tupleError"))) (CApply (CSymbol ("Prelude","const")) (CSymbol ("Prelude","True")))) (CSymbol ("Prelude","Nothing")))) (CSymbol ("WUIjs","showj"))) (CSymbol ("WUIjs","readj")))] [CLocalFunc (CFunc ("WUIjs","showj") 2 Private (CFuncType (CTCons ("Prelude","(,,,)") [CFuncType (CTCons ("Prelude","[]") [CTCons ("HTML","HtmlExp") []]) (CTCons ("HTML","HtmlExp") []),CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CFuncType (CTVar (0,"a")) (CTCons ("Prelude","Bool") []),CTCons ("Prelude","Maybe") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]]) (CFuncType (CTVar (10,"_2024")) (CTCons ("Prelude","(,,)") [CTCons ("HTML","HtmlExp") [],CTCons ("Prelude","Maybe") [CTCons ("JavaScript","JSExp") []],CTCons ("WUIjs","WuiState") []]))) (CRules CFlex [CRule [CPVar (29,"wparams"),CPVar (30,"vl")] [(CApply (CApply (CSymbol ("Prelude","=:<=")) (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CVar (1,"cons")) (CVar (31,"va"))) (CVar (32,"vb"))) (CVar (33,"vc"))) (CVar (34,"vd"))) (CVar (35,"ve"))) (CVar (36,"vf"))) (CVar (37,"vg"))) (CVar (38,"vh"))) (CVar (39,"vi")))) (CVar (30,"vl")),CApply (CApply (CApply (CApply (CSymbol ("WUIjs","joinSubFields")) (CVar (29,"wparams"))) (CSymbol ("Prelude","True"))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CVar (3,"showa")) (CVar (2,"wparama"))) (CVar (31,"va")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CVar (6,"showb")) (CVar (5,"wparamb"))) (CVar (32,"vb")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CVar (9,"showc")) (CVar (8,"wparamc"))) (CVar (33,"vc")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CVar (12,"showd")) (CVar (11,"wparamd"))) (CVar (34,"vd")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CVar (15,"showe")) (CVar (14,"wparame"))) (CVar (35,"ve")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CVar (18,"showf")) (CVar (17,"wparamf"))) (CVar (36,"vf")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CVar (21,"showg")) (CVar (20,"wparamg"))) (CVar (37,"vg")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CVar (24,"showh")) (CVar (23,"wparamh"))) (CVar (38,"vh")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CVar (27,"showi")) (CVar (26,"wparami"))) (CVar (39,"vi")))) (CSymbol ("Prelude","[]")))))))))))) (CVar (0,"jscons")))] [CLocalVar (31,"va"),CLocalVar (32,"vb"),CLocalVar (33,"vc"),CLocalVar (34,"vd"),CLocalVar (35,"ve"),CLocalVar (36,"vf"),CLocalVar (37,"vg"),CLocalVar (38,"vh"),CLocalVar (39,"vi")]])),CLocalFunc (CFunc ("WUIjs","readj") 3 Private (CFuncType (CTCons ("Prelude","(,,,)") [CFuncType (CTCons ("Prelude","[]") [CTCons ("HTML","HtmlExp") []]) (CTCons ("HTML","HtmlExp") []),CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CFuncType (CTVar (10,"_2024")) (CTCons ("Prelude","Bool") []),CTCons ("Prelude","Maybe") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]]) (CFuncType (CFuncType (CTCons ("HTML","CgiRef") []) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CFuncType (CTCons ("WUIjs","WuiState") []) (CTCons ("Prelude","(,)") [CTCons ("Prelude","Maybe") [CTVar (10,"_2024")],CTCons ("Prelude","(,,)") [CTCons ("HTML","HtmlExp") [],CTCons ("Prelude","Maybe") [CTCons ("JavaScript","JSExp") []],CTCons ("WUIjs","WuiState") []]])))) (CRules CFlex [CRule [CPVar (29,"wparams"),CPVar (30,"env"),CPVar (31,"s")] [(CSymbol ("Prelude","success"),CLetDecl [CLocalPat (CPComb ("Prelude",":") [CPVar (32,"ra"),CPComb ("Prelude",":") [CPVar (33,"rb"),CPComb ("Prelude",":") [CPVar (34,"rc"),CPComb ("Prelude",":") [CPVar (35,"rd"),CPComb ("Prelude",":") [CPVar (36,"re"),CPComb ("Prelude",":") [CPVar (37,"rf"),CPComb ("Prelude",":") [CPVar (38,"rg"),CPComb ("Prelude",":") [CPVar (39,"rh"),CPComb ("Prelude",":") [CPVar (40,"ri"),CPComb ("Prelude","[]") []]]]]]]]]]) (CApply (CSymbol ("WUIjs","state2states")) (CVar (31,"s"))) [],CLocalPat (CPComb ("Prelude","(,)") [CPVar (41,"rav"),CPVar (42,"fielda")]) (CApply (CApply (CApply (CVar (4,"reada")) (CVar (2,"wparama"))) (CVar (30,"env"))) (CVar (32,"ra"))) [],CLocalPat (CPComb ("Prelude","(,)") [CPVar (43,"rbv"),CPVar (44,"fieldb")]) (CApply (CApply (CApply (CVar (7,"readb")) (CVar (5,"wparamb"))) (CVar (30,"env"))) (CVar (33,"rb"))) [],CLocalPat (CPComb ("Prelude","(,)") [CPVar (45,"rcv"),CPVar (46,"fieldc")]) (CApply (CApply (CApply (CVar (10,"readc")) (CVar (8,"wparamc"))) (CVar (30,"env"))) (CVar (34,"rc"))) [],CLocalPat (CPComb ("Prelude","(,)") [CPVar (47,"rdv"),CPVar (48,"fieldd")]) (CApply (CApply (CApply (CVar (13,"readd")) (CVar (11,"wparamd"))) (CVar (30,"env"))) (CVar (35,"rd"))) [],CLocalPat (CPComb ("Prelude","(,)") [CPVar (49,"rev"),CPVar (50,"fielde")]) (CApply (CApply (CApply (CVar (16,"reade")) (CVar (14,"wparame"))) (CVar (30,"env"))) (CVar (36,"re"))) [],CLocalPat (CPComb ("Prelude","(,)") [CPVar (51,"rfv"),CPVar (52,"fieldf")]) (CApply (CApply (CApply (CVar (19,"readf")) (CVar (17,"wparamf"))) (CVar (30,"env"))) (CVar (37,"rf"))) [],CLocalPat (CPComb ("Prelude","(,)") [CPVar (53,"rgv"),CPVar (54,"fieldg")]) (CApply (CApply (CApply (CVar (22,"readg")) (CVar (20,"wparamg"))) (CVar (30,"env"))) (CVar (38,"rg"))) [],CLocalPat (CPComb ("Prelude","(,)") [CPVar (55,"rhv"),CPVar (56,"fieldh")]) (CApply (CApply (CApply (CVar (25,"readh")) (CVar (23,"wparamh"))) (CVar (30,"env"))) (CVar (39,"rh"))) [],CLocalPat (CPComb ("Prelude","(,)") [CPVar (57,"riv"),CPVar (58,"fieldi")]) (CApply (CApply (CApply (CVar (28,"readi")) (CVar (26,"wparami"))) (CVar (30,"env"))) (CVar (40,"ri"))) []] (CApply (CApply (CApply (CApply (CApply (CSymbol ("WUIjs","checkAndJoinSubFields")) (CVar (29,"wparams"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (42,"fielda"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (44,"fieldb"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (46,"fieldc"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (48,"fieldd"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (50,"fielde"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (52,"fieldf"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (54,"fieldg"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (56,"fieldh"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (58,"fieldi"))) (CSymbol ("Prelude","[]")))))))))))) (CVar (0,"jscons"))) (CApply (CApply (CSymbol ("Prelude","||")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (41,"rav"))) (CSymbol ("Prelude","Nothing")))) (CApply (CApply (CSymbol ("Prelude","||")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (43,"rbv"))) (CSymbol ("Prelude","Nothing")))) (CApply (CApply (CSymbol ("Prelude","||")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (45,"rcv"))) (CSymbol ("Prelude","Nothing")))) (CApply (CApply (CSymbol ("Prelude","||")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (47,"rdv"))) (CSymbol ("Prelude","Nothing")))) (CApply (CApply (CSymbol ("Prelude","||")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (49,"rev"))) (CSymbol ("Prelude","Nothing")))) (CApply (CApply (CSymbol ("Prelude","||")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (51,"rfv"))) (CSymbol ("Prelude","Nothing")))) (CApply (CApply (CSymbol ("Prelude","||")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (53,"rgv"))) (CSymbol ("Prelude","Nothing")))) (CApply (CApply (CSymbol ("Prelude","||")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (55,"rhv"))) (CSymbol ("Prelude","Nothing")))) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (57,"riv"))) (CSymbol ("Prelude","Nothing")))))))))))) (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CVar (1,"cons")) (CApply (CSymbol ("Maybe","fromJust")) (CVar (41,"rav")))) (CApply (CSymbol ("Maybe","fromJust")) (CVar (43,"rbv")))) (CApply (CSymbol ("Maybe","fromJust")) (CVar (45,"rcv")))) (CApply (CSymbol ("Maybe","fromJust")) (CVar (47,"rdv")))) (CApply (CSymbol ("Maybe","fromJust")) (CVar (49,"rev")))) (CApply (CSymbol ("Maybe","fromJust")) (CVar (51,"rfv")))) (CApply (CSymbol ("Maybe","fromJust")) (CVar (53,"rgv")))) (CApply (CSymbol ("Maybe","fromJust")) (CVar (55,"rhv")))) (CApply (CSymbol ("Maybe","fromJust")) (CVar (57,"riv"))))))] []]))]]),
  CFunc ("WUIjs","w10Tuple") 0 Public (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (0,"a")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (1,"b")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (2,"c")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (3,"d")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (4,"e")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (5,"f")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (6,"g")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (7,"h")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (8,"i")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (9,"j")]) (CTCons ("WUIjs","WuiSpec") [CTCons ("Prelude","(,,,,,,,,,)") [CTVar (0,"a"),CTVar (1,"b"),CTVar (2,"c"),CTVar (3,"d"),CTVar (4,"e"),CTVar (5,"f"),CTVar (6,"g"),CTVar (7,"h"),CTVar (8,"i"),CTVar (9,"j")]]))))))))))) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("WUIjs","wCons10JS")) (CApply (CSymbol ("Prelude","Just")) (CApply (CSymbol ("WUIjs","jsTupleCons")) (CLit (CIntc 10))))) (CLambda [CPVar (0,"a"),CPVar (1,"b"),CPVar (2,"c"),CPVar (3,"d"),CPVar (4,"e"),CPVar (5,"f"),CPVar (6,"g"),CPVar (7,"h"),CPVar (8,"i"),CPVar (9,"j")] (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CSymbol ("Prelude","(,,,,,,,,,)")) (CVar (0,"a"))) (CVar (1,"b"))) (CVar (2,"c"))) (CVar (3,"d"))) (CVar (4,"e"))) (CVar (5,"f"))) (CVar (6,"g"))) (CVar (7,"h"))) (CVar (8,"i"))) (CVar (9,"j")))))] []]),
  CFunc ("WUIjs","wCons10") 0 Public (CFuncType (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (1,"b")) (CFuncType (CTVar (2,"c")) (CFuncType (CTVar (3,"d")) (CFuncType (CTVar (4,"e")) (CFuncType (CTVar (5,"f")) (CFuncType (CTVar (6,"g")) (CFuncType (CTVar (7,"h")) (CFuncType (CTVar (8,"i")) (CFuncType (CTVar (9,"j")) (CTVar (10,"k")))))))))))) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (0,"a")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (1,"b")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (2,"c")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (3,"d")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (4,"e")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (5,"f")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (6,"g")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (7,"h")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (8,"i")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (9,"j")]) (CTCons ("WUIjs","WuiSpec") [CTVar (10,"k")])))))))))))) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("WUIjs","wCons10JS")) (CSymbol ("Prelude","Nothing")))] []]),
  CFunc ("WUIjs","wCons10JS") 12 Public (CFuncType (CTCons ("Prelude","Maybe") [CFuncType (CTCons ("Prelude","[]") [CTCons ("JavaScript","JSExp") []]) (CTCons ("JavaScript","JSExp") [])]) (CFuncType (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (1,"b")) (CFuncType (CTVar (2,"c")) (CFuncType (CTVar (3,"d")) (CFuncType (CTVar (4,"e")) (CFuncType (CTVar (5,"f")) (CFuncType (CTVar (6,"g")) (CFuncType (CTVar (7,"h")) (CFuncType (CTVar (8,"i")) (CFuncType (CTVar (9,"j")) (CTVar (10,"k")))))))))))) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (0,"a")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (1,"b")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (2,"c")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (3,"d")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (4,"e")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (5,"f")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (6,"g")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (7,"h")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (8,"i")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (9,"j")]) (CTCons ("WUIjs","WuiSpec") [CTVar (10,"k")]))))))))))))) (CRules CFlex [CRule [CPVar (0,"jscons"),CPVar (1,"cons"),CPComb ("WUIjs","WuiSpec") [CPVar (2,"wparama"),CPVar (3,"showa"),CPVar (4,"reada")],CPComb ("WUIjs","WuiSpec") [CPVar (5,"wparamb"),CPVar (6,"showb"),CPVar (7,"readb")],CPComb ("WUIjs","WuiSpec") [CPVar (8,"wparamc"),CPVar (9,"showc"),CPVar (10,"readc")],CPComb ("WUIjs","WuiSpec") [CPVar (11,"wparamd"),CPVar (12,"showd"),CPVar (13,"readd")],CPComb ("WUIjs","WuiSpec") [CPVar (14,"wparame"),CPVar (15,"showe"),CPVar (16,"reade")],CPComb ("WUIjs","WuiSpec") [CPVar (17,"wparamf"),CPVar (18,"showf"),CPVar (19,"readf")],CPComb ("WUIjs","WuiSpec") [CPVar (20,"wparamg"),CPVar (21,"showg"),CPVar (22,"readg")],CPComb ("WUIjs","WuiSpec") [CPVar (23,"wparamh"),CPVar (24,"showh"),CPVar (25,"readh")],CPComb ("WUIjs","WuiSpec") [CPVar (26,"wparami"),CPVar (27,"showi"),CPVar (28,"readi")],CPComb ("WUIjs","WuiSpec") [CPVar (29,"wparamj"),CPVar (30,"showj"),CPVar (31,"readj")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("WUIjs","WuiSpec")) (CApply (CApply (CApply (CApply (CSymbol ("Prelude","(,,,)")) (CSymbol ("WUIjs","renderTuple"))) (CSymbol ("WUIjs","tupleError"))) (CApply (CSymbol ("Prelude","const")) (CSymbol ("Prelude","True")))) (CSymbol ("Prelude","Nothing")))) (CSymbol ("WUIjs","showk"))) (CSymbol ("WUIjs","readk")))] [CLocalFunc (CFunc ("WUIjs","showk") 2 Private (CFuncType (CTCons ("Prelude","(,,,)") [CFuncType (CTCons ("Prelude","[]") [CTCons ("HTML","HtmlExp") []]) (CTCons ("HTML","HtmlExp") []),CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CFuncType (CTVar (0,"a")) (CTCons ("Prelude","Bool") []),CTCons ("Prelude","Maybe") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]]) (CFuncType (CTVar (11,"_2228")) (CTCons ("Prelude","(,,)") [CTCons ("HTML","HtmlExp") [],CTCons ("Prelude","Maybe") [CTCons ("JavaScript","JSExp") []],CTCons ("WUIjs","WuiState") []]))) (CRules CFlex [CRule [CPVar (32,"wparams"),CPVar (33,"vl")] [(CApply (CApply (CSymbol ("Prelude","=:<=")) (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CVar (1,"cons")) (CVar (34,"va"))) (CVar (35,"vb"))) (CVar (36,"vc"))) (CVar (37,"vd"))) (CVar (38,"ve"))) (CVar (39,"vf"))) (CVar (40,"vg"))) (CVar (41,"vh"))) (CVar (42,"vi"))) (CVar (43,"vj")))) (CVar (33,"vl")),CApply (CApply (CApply (CApply (CSymbol ("WUIjs","joinSubFields")) (CVar (32,"wparams"))) (CSymbol ("Prelude","True"))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CVar (3,"showa")) (CVar (2,"wparama"))) (CVar (34,"va")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CVar (6,"showb")) (CVar (5,"wparamb"))) (CVar (35,"vb")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CVar (9,"showc")) (CVar (8,"wparamc"))) (CVar (36,"vc")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CVar (12,"showd")) (CVar (11,"wparamd"))) (CVar (37,"vd")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CVar (15,"showe")) (CVar (14,"wparame"))) (CVar (38,"ve")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CVar (18,"showf")) (CVar (17,"wparamf"))) (CVar (39,"vf")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CVar (21,"showg")) (CVar (20,"wparamg"))) (CVar (40,"vg")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CVar (24,"showh")) (CVar (23,"wparamh"))) (CVar (41,"vh")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CVar (27,"showi")) (CVar (26,"wparami"))) (CVar (42,"vi")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CVar (30,"showj")) (CVar (29,"wparamj"))) (CVar (43,"vj")))) (CSymbol ("Prelude","[]"))))))))))))) (CVar (0,"jscons")))] [CLocalVar (34,"va"),CLocalVar (35,"vb"),CLocalVar (36,"vc"),CLocalVar (37,"vd"),CLocalVar (38,"ve"),CLocalVar (39,"vf"),CLocalVar (40,"vg"),CLocalVar (41,"vh"),CLocalVar (42,"vi"),CLocalVar (43,"vj")]])),CLocalFunc (CFunc ("WUIjs","readk") 3 Private (CFuncType (CTCons ("Prelude","(,,,)") [CFuncType (CTCons ("Prelude","[]") [CTCons ("HTML","HtmlExp") []]) (CTCons ("HTML","HtmlExp") []),CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CFuncType (CTVar (11,"_2228")) (CTCons ("Prelude","Bool") []),CTCons ("Prelude","Maybe") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]]) (CFuncType (CFuncType (CTCons ("HTML","CgiRef") []) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CFuncType (CTCons ("WUIjs","WuiState") []) (CTCons ("Prelude","(,)") [CTCons ("Prelude","Maybe") [CTVar (11,"_2228")],CTCons ("Prelude","(,,)") [CTCons ("HTML","HtmlExp") [],CTCons ("Prelude","Maybe") [CTCons ("JavaScript","JSExp") []],CTCons ("WUIjs","WuiState") []]])))) (CRules CFlex [CRule [CPVar (32,"wparams"),CPVar (33,"env"),CPVar (34,"s")] [(CSymbol ("Prelude","success"),CLetDecl [CLocalPat (CPComb ("Prelude",":") [CPVar (35,"ra"),CPComb ("Prelude",":") [CPVar (36,"rb"),CPComb ("Prelude",":") [CPVar (37,"rc"),CPComb ("Prelude",":") [CPVar (38,"rd"),CPComb ("Prelude",":") [CPVar (39,"re"),CPComb ("Prelude",":") [CPVar (40,"rf"),CPComb ("Prelude",":") [CPVar (41,"rg"),CPComb ("Prelude",":") [CPVar (42,"rh"),CPComb ("Prelude",":") [CPVar (43,"ri"),CPComb ("Prelude",":") [CPVar (44,"rj"),CPComb ("Prelude","[]") []]]]]]]]]]]) (CApply (CSymbol ("WUIjs","state2states")) (CVar (34,"s"))) [],CLocalPat (CPComb ("Prelude","(,)") [CPVar (45,"rav"),CPVar (46,"fielda")]) (CApply (CApply (CApply (CVar (4,"reada")) (CVar (2,"wparama"))) (CVar (33,"env"))) (CVar (35,"ra"))) [],CLocalPat (CPComb ("Prelude","(,)") [CPVar (47,"rbv"),CPVar (48,"fieldb")]) (CApply (CApply (CApply (CVar (7,"readb")) (CVar (5,"wparamb"))) (CVar (33,"env"))) (CVar (36,"rb"))) [],CLocalPat (CPComb ("Prelude","(,)") [CPVar (49,"rcv"),CPVar (50,"fieldc")]) (CApply (CApply (CApply (CVar (10,"readc")) (CVar (8,"wparamc"))) (CVar (33,"env"))) (CVar (37,"rc"))) [],CLocalPat (CPComb ("Prelude","(,)") [CPVar (51,"rdv"),CPVar (52,"fieldd")]) (CApply (CApply (CApply (CVar (13,"readd")) (CVar (11,"wparamd"))) (CVar (33,"env"))) (CVar (38,"rd"))) [],CLocalPat (CPComb ("Prelude","(,)") [CPVar (53,"rev"),CPVar (54,"fielde")]) (CApply (CApply (CApply (CVar (16,"reade")) (CVar (14,"wparame"))) (CVar (33,"env"))) (CVar (39,"re"))) [],CLocalPat (CPComb ("Prelude","(,)") [CPVar (55,"rfv"),CPVar (56,"fieldf")]) (CApply (CApply (CApply (CVar (19,"readf")) (CVar (17,"wparamf"))) (CVar (33,"env"))) (CVar (40,"rf"))) [],CLocalPat (CPComb ("Prelude","(,)") [CPVar (57,"rgv"),CPVar (58,"fieldg")]) (CApply (CApply (CApply (CVar (22,"readg")) (CVar (20,"wparamg"))) (CVar (33,"env"))) (CVar (41,"rg"))) [],CLocalPat (CPComb ("Prelude","(,)") [CPVar (59,"rhv"),CPVar (60,"fieldh")]) (CApply (CApply (CApply (CVar (25,"readh")) (CVar (23,"wparamh"))) (CVar (33,"env"))) (CVar (42,"rh"))) [],CLocalPat (CPComb ("Prelude","(,)") [CPVar (61,"riv"),CPVar (62,"fieldi")]) (CApply (CApply (CApply (CVar (28,"readi")) (CVar (26,"wparami"))) (CVar (33,"env"))) (CVar (43,"ri"))) [],CLocalPat (CPComb ("Prelude","(,)") [CPVar (63,"rjv"),CPVar (64,"fieldj")]) (CApply (CApply (CApply (CVar (31,"readj")) (CVar (29,"wparamj"))) (CVar (33,"env"))) (CVar (44,"rj"))) []] (CApply (CApply (CApply (CApply (CApply (CSymbol ("WUIjs","checkAndJoinSubFields")) (CVar (32,"wparams"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (46,"fielda"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (48,"fieldb"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (50,"fieldc"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (52,"fieldd"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (54,"fielde"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (56,"fieldf"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (58,"fieldg"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (60,"fieldh"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (62,"fieldi"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (64,"fieldj"))) (CSymbol ("Prelude","[]"))))))))))))) (CVar (0,"jscons"))) (CApply (CApply (CSymbol ("Prelude","||")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (45,"rav"))) (CSymbol ("Prelude","Nothing")))) (CApply (CApply (CSymbol ("Prelude","||")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (47,"rbv"))) (CSymbol ("Prelude","Nothing")))) (CApply (CApply (CSymbol ("Prelude","||")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (49,"rcv"))) (CSymbol ("Prelude","Nothing")))) (CApply (CApply (CSymbol ("Prelude","||")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (51,"rdv"))) (CSymbol ("Prelude","Nothing")))) (CApply (CApply (CSymbol ("Prelude","||")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (53,"rev"))) (CSymbol ("Prelude","Nothing")))) (CApply (CApply (CSymbol ("Prelude","||")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (55,"rfv"))) (CSymbol ("Prelude","Nothing")))) (CApply (CApply (CSymbol ("Prelude","||")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (57,"rgv"))) (CSymbol ("Prelude","Nothing")))) (CApply (CApply (CSymbol ("Prelude","||")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (59,"rhv"))) (CSymbol ("Prelude","Nothing")))) (CApply (CApply (CSymbol ("Prelude","||")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (61,"riv"))) (CSymbol ("Prelude","Nothing")))) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (63,"rjv"))) (CSymbol ("Prelude","Nothing"))))))))))))) (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CVar (1,"cons")) (CApply (CSymbol ("Maybe","fromJust")) (CVar (45,"rav")))) (CApply (CSymbol ("Maybe","fromJust")) (CVar (47,"rbv")))) (CApply (CSymbol ("Maybe","fromJust")) (CVar (49,"rcv")))) (CApply (CSymbol ("Maybe","fromJust")) (CVar (51,"rdv")))) (CApply (CSymbol ("Maybe","fromJust")) (CVar (53,"rev")))) (CApply (CSymbol ("Maybe","fromJust")) (CVar (55,"rfv")))) (CApply (CSymbol ("Maybe","fromJust")) (CVar (57,"rgv")))) (CApply (CSymbol ("Maybe","fromJust")) (CVar (59,"rhv")))) (CApply (CSymbol ("Maybe","fromJust")) (CVar (61,"riv")))) (CApply (CSymbol ("Maybe","fromJust")) (CVar (63,"rjv"))))))] []]))]]),
  CFunc ("WUIjs","w11Tuple") 0 Public (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (0,"a")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (1,"b")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (2,"c")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (3,"d")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (4,"e")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (5,"f")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (6,"g")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (7,"h")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (8,"i")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (9,"j")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (10,"k")]) (CTCons ("WUIjs","WuiSpec") [CTCons ("Prelude","(,,,,,,,,,,)") [CTVar (0,"a"),CTVar (1,"b"),CTVar (2,"c"),CTVar (3,"d"),CTVar (4,"e"),CTVar (5,"f"),CTVar (6,"g"),CTVar (7,"h"),CTVar (8,"i"),CTVar (9,"j"),CTVar (10,"k")]])))))))))))) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("WUIjs","wCons11JS")) (CApply (CSymbol ("Prelude","Just")) (CApply (CSymbol ("WUIjs","jsTupleCons")) (CLit (CIntc 11))))) (CLambda [CPVar (0,"a"),CPVar (1,"b"),CPVar (2,"c"),CPVar (3,"d"),CPVar (4,"e"),CPVar (5,"f"),CPVar (6,"g"),CPVar (7,"h"),CPVar (8,"i"),CPVar (9,"j"),CPVar (10,"k")] (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CSymbol ("Prelude","(,,,,,,,,,,)")) (CVar (0,"a"))) (CVar (1,"b"))) (CVar (2,"c"))) (CVar (3,"d"))) (CVar (4,"e"))) (CVar (5,"f"))) (CVar (6,"g"))) (CVar (7,"h"))) (CVar (8,"i"))) (CVar (9,"j"))) (CVar (10,"k")))))] []]),
  CFunc ("WUIjs","wCons11") 0 Public (CFuncType (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (1,"b")) (CFuncType (CTVar (2,"c")) (CFuncType (CTVar (3,"d")) (CFuncType (CTVar (4,"e")) (CFuncType (CTVar (5,"f")) (CFuncType (CTVar (6,"g")) (CFuncType (CTVar (7,"h")) (CFuncType (CTVar (8,"i")) (CFuncType (CTVar (9,"j")) (CFuncType (CTVar (10,"k")) (CTVar (11,"l"))))))))))))) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (0,"a")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (1,"b")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (2,"c")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (3,"d")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (4,"e")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (5,"f")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (6,"g")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (7,"h")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (8,"i")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (9,"j")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (10,"k")]) (CTCons ("WUIjs","WuiSpec") [CTVar (11,"l")]))))))))))))) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("WUIjs","wCons11JS")) (CSymbol ("Prelude","Nothing")))] []]),
  CFunc ("WUIjs","wCons11JS") 13 Public (CFuncType (CTCons ("Prelude","Maybe") [CFuncType (CTCons ("Prelude","[]") [CTCons ("JavaScript","JSExp") []]) (CTCons ("JavaScript","JSExp") [])]) (CFuncType (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (1,"b")) (CFuncType (CTVar (2,"c")) (CFuncType (CTVar (3,"d")) (CFuncType (CTVar (4,"e")) (CFuncType (CTVar (5,"f")) (CFuncType (CTVar (6,"g")) (CFuncType (CTVar (7,"h")) (CFuncType (CTVar (8,"i")) (CFuncType (CTVar (9,"j")) (CFuncType (CTVar (10,"k")) (CTVar (11,"l"))))))))))))) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (0,"a")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (1,"b")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (2,"c")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (3,"d")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (4,"e")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (5,"f")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (6,"g")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (7,"h")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (8,"i")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (9,"j")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (10,"k")]) (CTCons ("WUIjs","WuiSpec") [CTVar (11,"l")])))))))))))))) (CRules CFlex [CRule [CPVar (0,"jscons"),CPVar (1,"cons"),CPComb ("WUIjs","WuiSpec") [CPVar (2,"wparama"),CPVar (3,"showa"),CPVar (4,"reada")],CPComb ("WUIjs","WuiSpec") [CPVar (5,"wparamb"),CPVar (6,"showb"),CPVar (7,"readb")],CPComb ("WUIjs","WuiSpec") [CPVar (8,"wparamc"),CPVar (9,"showc"),CPVar (10,"readc")],CPComb ("WUIjs","WuiSpec") [CPVar (11,"wparamd"),CPVar (12,"showd"),CPVar (13,"readd")],CPComb ("WUIjs","WuiSpec") [CPVar (14,"wparame"),CPVar (15,"showe"),CPVar (16,"reade")],CPComb ("WUIjs","WuiSpec") [CPVar (17,"wparamf"),CPVar (18,"showf"),CPVar (19,"readf")],CPComb ("WUIjs","WuiSpec") [CPVar (20,"wparamg"),CPVar (21,"showg"),CPVar (22,"readg")],CPComb ("WUIjs","WuiSpec") [CPVar (23,"wparamh"),CPVar (24,"showh"),CPVar (25,"readh")],CPComb ("WUIjs","WuiSpec") [CPVar (26,"wparami"),CPVar (27,"showi"),CPVar (28,"readi")],CPComb ("WUIjs","WuiSpec") [CPVar (29,"wparamj"),CPVar (30,"showj"),CPVar (31,"readj")],CPComb ("WUIjs","WuiSpec") [CPVar (32,"wparamk"),CPVar (33,"showk"),CPVar (34,"readk")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("WUIjs","WuiSpec")) (CApply (CApply (CApply (CApply (CSymbol ("Prelude","(,,,)")) (CSymbol ("WUIjs","renderTuple"))) (CSymbol ("WUIjs","tupleError"))) (CApply (CSymbol ("Prelude","const")) (CSymbol ("Prelude","True")))) (CSymbol ("Prelude","Nothing")))) (CSymbol ("WUIjs","showl"))) (CSymbol ("WUIjs","readl")))] [CLocalFunc (CFunc ("WUIjs","showl") 2 Private (CFuncType (CTCons ("Prelude","(,,,)") [CFuncType (CTCons ("Prelude","[]") [CTCons ("HTML","HtmlExp") []]) (CTCons ("HTML","HtmlExp") []),CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CFuncType (CTVar (0,"a")) (CTCons ("Prelude","Bool") []),CTCons ("Prelude","Maybe") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]]) (CFuncType (CTVar (12,"_2450")) (CTCons ("Prelude","(,,)") [CTCons ("HTML","HtmlExp") [],CTCons ("Prelude","Maybe") [CTCons ("JavaScript","JSExp") []],CTCons ("WUIjs","WuiState") []]))) (CRules CFlex [CRule [CPVar (35,"wparams"),CPVar (36,"vl")] [(CApply (CApply (CSymbol ("Prelude","=:<=")) (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CVar (1,"cons")) (CVar (37,"va"))) (CVar (38,"vb"))) (CVar (39,"vc"))) (CVar (40,"vd"))) (CVar (41,"ve"))) (CVar (42,"vf"))) (CVar (43,"vg"))) (CVar (44,"vh"))) (CVar (45,"vi"))) (CVar (46,"vj"))) (CVar (47,"vk")))) (CVar (36,"vl")),CApply (CApply (CApply (CApply (CSymbol ("WUIjs","joinSubFields")) (CVar (35,"wparams"))) (CSymbol ("Prelude","True"))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CVar (3,"showa")) (CVar (2,"wparama"))) (CVar (37,"va")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CVar (6,"showb")) (CVar (5,"wparamb"))) (CVar (38,"vb")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CVar (9,"showc")) (CVar (8,"wparamc"))) (CVar (39,"vc")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CVar (12,"showd")) (CVar (11,"wparamd"))) (CVar (40,"vd")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CVar (15,"showe")) (CVar (14,"wparame"))) (CVar (41,"ve")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CVar (18,"showf")) (CVar (17,"wparamf"))) (CVar (42,"vf")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CVar (21,"showg")) (CVar (20,"wparamg"))) (CVar (43,"vg")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CVar (24,"showh")) (CVar (23,"wparamh"))) (CVar (44,"vh")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CVar (27,"showi")) (CVar (26,"wparami"))) (CVar (45,"vi")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CVar (30,"showj")) (CVar (29,"wparamj"))) (CVar (46,"vj")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CVar (33,"showk")) (CVar (32,"wparamk"))) (CVar (47,"vk")))) (CSymbol ("Prelude","[]")))))))))))))) (CVar (0,"jscons")))] [CLocalVar (37,"va"),CLocalVar (38,"vb"),CLocalVar (39,"vc"),CLocalVar (40,"vd"),CLocalVar (41,"ve"),CLocalVar (42,"vf"),CLocalVar (43,"vg"),CLocalVar (44,"vh"),CLocalVar (45,"vi"),CLocalVar (46,"vj"),CLocalVar (47,"vk")]])),CLocalFunc (CFunc ("WUIjs","readl") 3 Private (CFuncType (CTCons ("Prelude","(,,,)") [CFuncType (CTCons ("Prelude","[]") [CTCons ("HTML","HtmlExp") []]) (CTCons ("HTML","HtmlExp") []),CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CFuncType (CTVar (12,"_2450")) (CTCons ("Prelude","Bool") []),CTCons ("Prelude","Maybe") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]]) (CFuncType (CFuncType (CTCons ("HTML","CgiRef") []) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CFuncType (CTCons ("WUIjs","WuiState") []) (CTCons ("Prelude","(,)") [CTCons ("Prelude","Maybe") [CTVar (12,"_2450")],CTCons ("Prelude","(,,)") [CTCons ("HTML","HtmlExp") [],CTCons ("Prelude","Maybe") [CTCons ("JavaScript","JSExp") []],CTCons ("WUIjs","WuiState") []]])))) (CRules CFlex [CRule [CPVar (35,"wparams"),CPVar (36,"env"),CPVar (37,"s")] [(CSymbol ("Prelude","success"),CLetDecl [CLocalPat (CPComb ("Prelude",":") [CPVar (38,"ra"),CPComb ("Prelude",":") [CPVar (39,"rb"),CPComb ("Prelude",":") [CPVar (40,"rc"),CPComb ("Prelude",":") [CPVar (41,"rd"),CPComb ("Prelude",":") [CPVar (42,"re"),CPComb ("Prelude",":") [CPVar (43,"rf"),CPComb ("Prelude",":") [CPVar (44,"rg"),CPComb ("Prelude",":") [CPVar (45,"rh"),CPComb ("Prelude",":") [CPVar (46,"ri"),CPComb ("Prelude",":") [CPVar (47,"rj"),CPComb ("Prelude",":") [CPVar (48,"rk"),CPComb ("Prelude","[]") []]]]]]]]]]]]) (CApply (CSymbol ("WUIjs","state2states")) (CVar (37,"s"))) [],CLocalPat (CPComb ("Prelude","(,)") [CPVar (49,"rav"),CPVar (50,"fielda")]) (CApply (CApply (CApply (CVar (4,"reada")) (CVar (2,"wparama"))) (CVar (36,"env"))) (CVar (38,"ra"))) [],CLocalPat (CPComb ("Prelude","(,)") [CPVar (51,"rbv"),CPVar (52,"fieldb")]) (CApply (CApply (CApply (CVar (7,"readb")) (CVar (5,"wparamb"))) (CVar (36,"env"))) (CVar (39,"rb"))) [],CLocalPat (CPComb ("Prelude","(,)") [CPVar (53,"rcv"),CPVar (54,"fieldc")]) (CApply (CApply (CApply (CVar (10,"readc")) (CVar (8,"wparamc"))) (CVar (36,"env"))) (CVar (40,"rc"))) [],CLocalPat (CPComb ("Prelude","(,)") [CPVar (55,"rdv"),CPVar (56,"fieldd")]) (CApply (CApply (CApply (CVar (13,"readd")) (CVar (11,"wparamd"))) (CVar (36,"env"))) (CVar (41,"rd"))) [],CLocalPat (CPComb ("Prelude","(,)") [CPVar (57,"rev"),CPVar (58,"fielde")]) (CApply (CApply (CApply (CVar (16,"reade")) (CVar (14,"wparame"))) (CVar (36,"env"))) (CVar (42,"re"))) [],CLocalPat (CPComb ("Prelude","(,)") [CPVar (59,"rfv"),CPVar (60,"fieldf")]) (CApply (CApply (CApply (CVar (19,"readf")) (CVar (17,"wparamf"))) (CVar (36,"env"))) (CVar (43,"rf"))) [],CLocalPat (CPComb ("Prelude","(,)") [CPVar (61,"rgv"),CPVar (62,"fieldg")]) (CApply (CApply (CApply (CVar (22,"readg")) (CVar (20,"wparamg"))) (CVar (36,"env"))) (CVar (44,"rg"))) [],CLocalPat (CPComb ("Prelude","(,)") [CPVar (63,"rhv"),CPVar (64,"fieldh")]) (CApply (CApply (CApply (CVar (25,"readh")) (CVar (23,"wparamh"))) (CVar (36,"env"))) (CVar (45,"rh"))) [],CLocalPat (CPComb ("Prelude","(,)") [CPVar (65,"riv"),CPVar (66,"fieldi")]) (CApply (CApply (CApply (CVar (28,"readi")) (CVar (26,"wparami"))) (CVar (36,"env"))) (CVar (46,"ri"))) [],CLocalPat (CPComb ("Prelude","(,)") [CPVar (67,"rjv"),CPVar (68,"fieldj")]) (CApply (CApply (CApply (CVar (31,"readj")) (CVar (29,"wparamj"))) (CVar (36,"env"))) (CVar (47,"rj"))) [],CLocalPat (CPComb ("Prelude","(,)") [CPVar (69,"rkv"),CPVar (70,"fieldk")]) (CApply (CApply (CApply (CVar (34,"readk")) (CVar (32,"wparamk"))) (CVar (36,"env"))) (CVar (48,"rk"))) []] (CApply (CApply (CApply (CApply (CApply (CSymbol ("WUIjs","checkAndJoinSubFields")) (CVar (35,"wparams"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (50,"fielda"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (52,"fieldb"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (54,"fieldc"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (56,"fieldd"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (58,"fielde"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (60,"fieldf"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (62,"fieldg"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (64,"fieldh"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (66,"fieldi"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (68,"fieldj"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (70,"fieldk"))) (CSymbol ("Prelude","[]")))))))))))))) (CVar (0,"jscons"))) (CApply (CApply (CSymbol ("Prelude","||")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (49,"rav"))) (CSymbol ("Prelude","Nothing")))) (CApply (CApply (CSymbol ("Prelude","||")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (51,"rbv"))) (CSymbol ("Prelude","Nothing")))) (CApply (CApply (CSymbol ("Prelude","||")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (53,"rcv"))) (CSymbol ("Prelude","Nothing")))) (CApply (CApply (CSymbol ("Prelude","||")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (55,"rdv"))) (CSymbol ("Prelude","Nothing")))) (CApply (CApply (CSymbol ("Prelude","||")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (57,"rev"))) (CSymbol ("Prelude","Nothing")))) (CApply (CApply (CSymbol ("Prelude","||")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (59,"rfv"))) (CSymbol ("Prelude","Nothing")))) (CApply (CApply (CSymbol ("Prelude","||")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (61,"rgv"))) (CSymbol ("Prelude","Nothing")))) (CApply (CApply (CSymbol ("Prelude","||")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (63,"rhv"))) (CSymbol ("Prelude","Nothing")))) (CApply (CApply (CSymbol ("Prelude","||")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (65,"riv"))) (CSymbol ("Prelude","Nothing")))) (CApply (CApply (CSymbol ("Prelude","||")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (67,"rjv"))) (CSymbol ("Prelude","Nothing")))) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (69,"rkv"))) (CSymbol ("Prelude","Nothing")))))))))))))) (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CVar (1,"cons")) (CApply (CSymbol ("Maybe","fromJust")) (CVar (49,"rav")))) (CApply (CSymbol ("Maybe","fromJust")) (CVar (51,"rbv")))) (CApply (CSymbol ("Maybe","fromJust")) (CVar (53,"rcv")))) (CApply (CSymbol ("Maybe","fromJust")) (CVar (55,"rdv")))) (CApply (CSymbol ("Maybe","fromJust")) (CVar (57,"rev")))) (CApply (CSymbol ("Maybe","fromJust")) (CVar (59,"rfv")))) (CApply (CSymbol ("Maybe","fromJust")) (CVar (61,"rgv")))) (CApply (CSymbol ("Maybe","fromJust")) (CVar (63,"rhv")))) (CApply (CSymbol ("Maybe","fromJust")) (CVar (65,"riv")))) (CApply (CSymbol ("Maybe","fromJust")) (CVar (67,"rjv")))) (CApply (CSymbol ("Maybe","fromJust")) (CVar (69,"rkv"))))))] []]))]]),
  CFunc ("WUIjs","w12Tuple") 0 Public (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (0,"a")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (1,"b")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (2,"c")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (3,"d")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (4,"e")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (5,"f")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (6,"g")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (7,"h")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (8,"i")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (9,"j")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (10,"k")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (11,"l")]) (CTCons ("WUIjs","WuiSpec") [CTCons ("Prelude","(,,,,,,,,,,,)") [CTVar (0,"a"),CTVar (1,"b"),CTVar (2,"c"),CTVar (3,"d"),CTVar (4,"e"),CTVar (5,"f"),CTVar (6,"g"),CTVar (7,"h"),CTVar (8,"i"),CTVar (9,"j"),CTVar (10,"k"),CTVar (11,"l")]]))))))))))))) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("WUIjs","wCons12JS")) (CApply (CSymbol ("Prelude","Just")) (CApply (CSymbol ("WUIjs","jsTupleCons")) (CLit (CIntc 12))))) (CLambda [CPVar (0,"a"),CPVar (1,"b"),CPVar (2,"c"),CPVar (3,"d"),CPVar (4,"e"),CPVar (5,"f"),CPVar (6,"g"),CPVar (7,"h"),CPVar (8,"i"),CPVar (9,"j"),CPVar (10,"k"),CPVar (11,"l")] (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CSymbol ("Prelude","(,,,,,,,,,,,)")) (CVar (0,"a"))) (CVar (1,"b"))) (CVar (2,"c"))) (CVar (3,"d"))) (CVar (4,"e"))) (CVar (5,"f"))) (CVar (6,"g"))) (CVar (7,"h"))) (CVar (8,"i"))) (CVar (9,"j"))) (CVar (10,"k"))) (CVar (11,"l")))))] []]),
  CFunc ("WUIjs","wCons12") 0 Public (CFuncType (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (1,"b")) (CFuncType (CTVar (2,"c")) (CFuncType (CTVar (3,"d")) (CFuncType (CTVar (4,"e")) (CFuncType (CTVar (5,"f")) (CFuncType (CTVar (6,"g")) (CFuncType (CTVar (7,"h")) (CFuncType (CTVar (8,"i")) (CFuncType (CTVar (9,"j")) (CFuncType (CTVar (10,"k")) (CFuncType (CTVar (11,"l")) (CTVar (12,"m")))))))))))))) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (0,"a")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (1,"b")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (2,"c")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (3,"d")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (4,"e")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (5,"f")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (6,"g")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (7,"h")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (8,"i")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (9,"j")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (10,"k")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (11,"l")]) (CTCons ("WUIjs","WuiSpec") [CTVar (12,"m")])))))))))))))) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("WUIjs","wCons12JS")) (CSymbol ("Prelude","Nothing")))] []]),
  CFunc ("WUIjs","wCons12JS") 14 Public (CFuncType (CTCons ("Prelude","Maybe") [CFuncType (CTCons ("Prelude","[]") [CTCons ("JavaScript","JSExp") []]) (CTCons ("JavaScript","JSExp") [])]) (CFuncType (CFuncType (CTVar (0,"a")) (CFuncType (CTVar (1,"b")) (CFuncType (CTVar (2,"c")) (CFuncType (CTVar (3,"d")) (CFuncType (CTVar (4,"e")) (CFuncType (CTVar (5,"f")) (CFuncType (CTVar (6,"g")) (CFuncType (CTVar (7,"h")) (CFuncType (CTVar (8,"i")) (CFuncType (CTVar (9,"j")) (CFuncType (CTVar (10,"k")) (CFuncType (CTVar (11,"l")) (CTVar (12,"m")))))))))))))) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (0,"a")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (1,"b")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (2,"c")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (3,"d")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (4,"e")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (5,"f")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (6,"g")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (7,"h")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (8,"i")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (9,"j")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (10,"k")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (11,"l")]) (CTCons ("WUIjs","WuiSpec") [CTVar (12,"m")]))))))))))))))) (CRules CFlex [CRule [CPVar (0,"jscons"),CPVar (1,"cons"),CPComb ("WUIjs","WuiSpec") [CPVar (2,"wparama"),CPVar (3,"showa"),CPVar (4,"reada")],CPComb ("WUIjs","WuiSpec") [CPVar (5,"wparamb"),CPVar (6,"showb"),CPVar (7,"readb")],CPComb ("WUIjs","WuiSpec") [CPVar (8,"wparamc"),CPVar (9,"showc"),CPVar (10,"readc")],CPComb ("WUIjs","WuiSpec") [CPVar (11,"wparamd"),CPVar (12,"showd"),CPVar (13,"readd")],CPComb ("WUIjs","WuiSpec") [CPVar (14,"wparame"),CPVar (15,"showe"),CPVar (16,"reade")],CPComb ("WUIjs","WuiSpec") [CPVar (17,"wparamf"),CPVar (18,"showf"),CPVar (19,"readf")],CPComb ("WUIjs","WuiSpec") [CPVar (20,"wparamg"),CPVar (21,"showg"),CPVar (22,"readg")],CPComb ("WUIjs","WuiSpec") [CPVar (23,"wparamh"),CPVar (24,"showh"),CPVar (25,"readh")],CPComb ("WUIjs","WuiSpec") [CPVar (26,"wparami"),CPVar (27,"showi"),CPVar (28,"readi")],CPComb ("WUIjs","WuiSpec") [CPVar (29,"wparamj"),CPVar (30,"showj"),CPVar (31,"readj")],CPComb ("WUIjs","WuiSpec") [CPVar (32,"wparamk"),CPVar (33,"showk"),CPVar (34,"readk")],CPComb ("WUIjs","WuiSpec") [CPVar (35,"wparaml"),CPVar (36,"showl"),CPVar (37,"readl")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("WUIjs","WuiSpec")) (CApply (CApply (CApply (CApply (CSymbol ("Prelude","(,,,)")) (CSymbol ("WUIjs","renderTuple"))) (CSymbol ("WUIjs","tupleError"))) (CApply (CSymbol ("Prelude","const")) (CSymbol ("Prelude","True")))) (CSymbol ("Prelude","Nothing")))) (CSymbol ("WUIjs","showm"))) (CSymbol ("WUIjs","readm")))] [CLocalFunc (CFunc ("WUIjs","showm") 2 Private (CFuncType (CTCons ("Prelude","(,,,)") [CFuncType (CTCons ("Prelude","[]") [CTCons ("HTML","HtmlExp") []]) (CTCons ("HTML","HtmlExp") []),CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CFuncType (CTVar (0,"a")) (CTCons ("Prelude","Bool") []),CTCons ("Prelude","Maybe") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]]) (CFuncType (CTVar (13,"_2690")) (CTCons ("Prelude","(,,)") [CTCons ("HTML","HtmlExp") [],CTCons ("Prelude","Maybe") [CTCons ("JavaScript","JSExp") []],CTCons ("WUIjs","WuiState") []]))) (CRules CFlex [CRule [CPVar (38,"wparams"),CPVar (39,"vm")] [(CApply (CApply (CSymbol ("Prelude","=:<=")) (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CVar (1,"cons")) (CVar (40,"va"))) (CVar (41,"vb"))) (CVar (42,"vc"))) (CVar (43,"vd"))) (CVar (44,"ve"))) (CVar (45,"vf"))) (CVar (46,"vg"))) (CVar (47,"vh"))) (CVar (48,"vi"))) (CVar (49,"vj"))) (CVar (50,"vk"))) (CVar (51,"vl")))) (CVar (39,"vm")),CApply (CApply (CApply (CApply (CSymbol ("WUIjs","joinSubFields")) (CVar (38,"wparams"))) (CSymbol ("Prelude","True"))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CVar (3,"showa")) (CVar (2,"wparama"))) (CVar (40,"va")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CVar (6,"showb")) (CVar (5,"wparamb"))) (CVar (41,"vb")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CVar (9,"showc")) (CVar (8,"wparamc"))) (CVar (42,"vc")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CVar (12,"showd")) (CVar (11,"wparamd"))) (CVar (43,"vd")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CVar (15,"showe")) (CVar (14,"wparame"))) (CVar (44,"ve")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CVar (18,"showf")) (CVar (17,"wparamf"))) (CVar (45,"vf")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CVar (21,"showg")) (CVar (20,"wparamg"))) (CVar (46,"vg")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CVar (24,"showh")) (CVar (23,"wparamh"))) (CVar (47,"vh")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CVar (27,"showi")) (CVar (26,"wparami"))) (CVar (48,"vi")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CVar (30,"showj")) (CVar (29,"wparamj"))) (CVar (49,"vj")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CVar (33,"showk")) (CVar (32,"wparamk"))) (CVar (50,"vk")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CVar (36,"showl")) (CVar (35,"wparaml"))) (CVar (51,"vl")))) (CSymbol ("Prelude","[]"))))))))))))))) (CVar (0,"jscons")))] [CLocalVar (40,"va"),CLocalVar (41,"vb"),CLocalVar (42,"vc"),CLocalVar (43,"vd"),CLocalVar (44,"ve"),CLocalVar (45,"vf"),CLocalVar (46,"vg"),CLocalVar (47,"vh"),CLocalVar (48,"vi"),CLocalVar (49,"vj"),CLocalVar (50,"vk"),CLocalVar (51,"vl")]])),CLocalFunc (CFunc ("WUIjs","readm") 3 Private (CFuncType (CTCons ("Prelude","(,,,)") [CFuncType (CTCons ("Prelude","[]") [CTCons ("HTML","HtmlExp") []]) (CTCons ("HTML","HtmlExp") []),CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CFuncType (CTVar (13,"_2690")) (CTCons ("Prelude","Bool") []),CTCons ("Prelude","Maybe") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]]) (CFuncType (CFuncType (CTCons ("HTML","CgiRef") []) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CFuncType (CTCons ("WUIjs","WuiState") []) (CTCons ("Prelude","(,)") [CTCons ("Prelude","Maybe") [CTVar (13,"_2690")],CTCons ("Prelude","(,,)") [CTCons ("HTML","HtmlExp") [],CTCons ("Prelude","Maybe") [CTCons ("JavaScript","JSExp") []],CTCons ("WUIjs","WuiState") []]])))) (CRules CFlex [CRule [CPVar (38,"wparams"),CPVar (39,"env"),CPVar (40,"s")] [(CSymbol ("Prelude","success"),CLetDecl [CLocalPat (CPComb ("Prelude",":") [CPVar (41,"ra"),CPComb ("Prelude",":") [CPVar (42,"rb"),CPComb ("Prelude",":") [CPVar (43,"rc"),CPComb ("Prelude",":") [CPVar (44,"rd"),CPComb ("Prelude",":") [CPVar (45,"re"),CPComb ("Prelude",":") [CPVar (46,"rf"),CPComb ("Prelude",":") [CPVar (47,"rg"),CPComb ("Prelude",":") [CPVar (48,"rh"),CPComb ("Prelude",":") [CPVar (49,"ri"),CPComb ("Prelude",":") [CPVar (50,"rj"),CPComb ("Prelude",":") [CPVar (51,"rk"),CPComb ("Prelude",":") [CPVar (52,"rl"),CPComb ("Prelude","[]") []]]]]]]]]]]]]) (CApply (CSymbol ("WUIjs","state2states")) (CVar (40,"s"))) [],CLocalPat (CPComb ("Prelude","(,)") [CPVar (53,"rav"),CPVar (54,"fielda")]) (CApply (CApply (CApply (CVar (4,"reada")) (CVar (2,"wparama"))) (CVar (39,"env"))) (CVar (41,"ra"))) [],CLocalPat (CPComb ("Prelude","(,)") [CPVar (55,"rbv"),CPVar (56,"fieldb")]) (CApply (CApply (CApply (CVar (7,"readb")) (CVar (5,"wparamb"))) (CVar (39,"env"))) (CVar (42,"rb"))) [],CLocalPat (CPComb ("Prelude","(,)") [CPVar (57,"rcv"),CPVar (58,"fieldc")]) (CApply (CApply (CApply (CVar (10,"readc")) (CVar (8,"wparamc"))) (CVar (39,"env"))) (CVar (43,"rc"))) [],CLocalPat (CPComb ("Prelude","(,)") [CPVar (59,"rdv"),CPVar (60,"fieldd")]) (CApply (CApply (CApply (CVar (13,"readd")) (CVar (11,"wparamd"))) (CVar (39,"env"))) (CVar (44,"rd"))) [],CLocalPat (CPComb ("Prelude","(,)") [CPVar (61,"rev"),CPVar (62,"fielde")]) (CApply (CApply (CApply (CVar (16,"reade")) (CVar (14,"wparame"))) (CVar (39,"env"))) (CVar (45,"re"))) [],CLocalPat (CPComb ("Prelude","(,)") [CPVar (63,"rfv"),CPVar (64,"fieldf")]) (CApply (CApply (CApply (CVar (19,"readf")) (CVar (17,"wparamf"))) (CVar (39,"env"))) (CVar (46,"rf"))) [],CLocalPat (CPComb ("Prelude","(,)") [CPVar (65,"rgv"),CPVar (66,"fieldg")]) (CApply (CApply (CApply (CVar (22,"readg")) (CVar (20,"wparamg"))) (CVar (39,"env"))) (CVar (47,"rg"))) [],CLocalPat (CPComb ("Prelude","(,)") [CPVar (67,"rhv"),CPVar (68,"fieldh")]) (CApply (CApply (CApply (CVar (25,"readh")) (CVar (23,"wparamh"))) (CVar (39,"env"))) (CVar (48,"rh"))) [],CLocalPat (CPComb ("Prelude","(,)") [CPVar (69,"riv"),CPVar (70,"fieldi")]) (CApply (CApply (CApply (CVar (28,"readi")) (CVar (26,"wparami"))) (CVar (39,"env"))) (CVar (49,"ri"))) [],CLocalPat (CPComb ("Prelude","(,)") [CPVar (71,"rjv"),CPVar (72,"fieldj")]) (CApply (CApply (CApply (CVar (31,"readj")) (CVar (29,"wparamj"))) (CVar (39,"env"))) (CVar (50,"rj"))) [],CLocalPat (CPComb ("Prelude","(,)") [CPVar (73,"rkv"),CPVar (74,"fieldk")]) (CApply (CApply (CApply (CVar (34,"readk")) (CVar (32,"wparamk"))) (CVar (39,"env"))) (CVar (51,"rk"))) [],CLocalPat (CPComb ("Prelude","(,)") [CPVar (75,"rlv"),CPVar (76,"fieldl")]) (CApply (CApply (CApply (CVar (37,"readl")) (CVar (35,"wparaml"))) (CVar (39,"env"))) (CVar (52,"rl"))) []] (CApply (CApply (CApply (CApply (CApply (CSymbol ("WUIjs","checkAndJoinSubFields")) (CVar (38,"wparams"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (54,"fielda"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (56,"fieldb"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (58,"fieldc"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (60,"fieldd"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (62,"fielde"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (64,"fieldf"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (66,"fieldg"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (68,"fieldh"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (70,"fieldi"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (72,"fieldj"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (74,"fieldk"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (76,"fieldl"))) (CSymbol ("Prelude","[]"))))))))))))))) (CVar (0,"jscons"))) (CApply (CApply (CSymbol ("Prelude","||")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (53,"rav"))) (CSymbol ("Prelude","Nothing")))) (CApply (CApply (CSymbol ("Prelude","||")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (55,"rbv"))) (CSymbol ("Prelude","Nothing")))) (CApply (CApply (CSymbol ("Prelude","||")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (57,"rcv"))) (CSymbol ("Prelude","Nothing")))) (CApply (CApply (CSymbol ("Prelude","||")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (59,"rdv"))) (CSymbol ("Prelude","Nothing")))) (CApply (CApply (CSymbol ("Prelude","||")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (61,"rev"))) (CSymbol ("Prelude","Nothing")))) (CApply (CApply (CSymbol ("Prelude","||")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (63,"rfv"))) (CSymbol ("Prelude","Nothing")))) (CApply (CApply (CSymbol ("Prelude","||")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (65,"rgv"))) (CSymbol ("Prelude","Nothing")))) (CApply (CApply (CSymbol ("Prelude","||")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (67,"rhv"))) (CSymbol ("Prelude","Nothing")))) (CApply (CApply (CSymbol ("Prelude","||")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (69,"riv"))) (CSymbol ("Prelude","Nothing")))) (CApply (CApply (CSymbol ("Prelude","||")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (71,"rjv"))) (CSymbol ("Prelude","Nothing")))) (CApply (CApply (CSymbol ("Prelude","||")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (73,"rkv"))) (CSymbol ("Prelude","Nothing")))) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (75,"rlv"))) (CSymbol ("Prelude","Nothing"))))))))))))))) (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CVar (1,"cons")) (CApply (CSymbol ("Maybe","fromJust")) (CVar (53,"rav")))) (CApply (CSymbol ("Maybe","fromJust")) (CVar (55,"rbv")))) (CApply (CSymbol ("Maybe","fromJust")) (CVar (57,"rcv")))) (CApply (CSymbol ("Maybe","fromJust")) (CVar (59,"rdv")))) (CApply (CSymbol ("Maybe","fromJust")) (CVar (61,"rev")))) (CApply (CSymbol ("Maybe","fromJust")) (CVar (63,"rfv")))) (CApply (CSymbol ("Maybe","fromJust")) (CVar (65,"rgv")))) (CApply (CSymbol ("Maybe","fromJust")) (CVar (67,"rhv")))) (CApply (CSymbol ("Maybe","fromJust")) (CVar (69,"riv")))) (CApply (CSymbol ("Maybe","fromJust")) (CVar (71,"rjv")))) (CApply (CSymbol ("Maybe","fromJust")) (CVar (73,"rkv")))) (CApply (CSymbol ("Maybe","fromJust")) (CVar (75,"rlv"))))))] []]))]]),
  CFunc ("WUIjs","wList") 1 Public (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (0,"a")]) (CTCons ("WUIjs","WuiSpec") [CTCons ("Prelude","[]") [CTVar (0,"a")]])) (CRules CFlex [CRule [CPComb ("WUIjs","WuiSpec") [CPVar (0,"rendera"),CPVar (1,"showa"),CPVar (2,"reada")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("WUIjs","WuiSpec")) (CApply (CApply (CApply (CApply (CSymbol ("Prelude","(,,,)")) (CSymbol ("WUIjs","renderList"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'I'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'g'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ':'))) (CSymbol ("Prelude","[]")))))))))))))))) (CApply (CSymbol ("Prelude","const")) (CSymbol ("Prelude","True")))) (CSymbol ("Prelude","Nothing")))) (CLambda [CPVar (3,"wparams"),CPVar (4,"vas")] (CApply (CApply (CApply (CApply (CSymbol ("WUIjs","joinSubFields")) (CVar (3,"wparams"))) (CSymbol ("Prelude","True"))) (CApply (CApply (CSymbol ("Prelude","map")) (CApply (CVar (1,"showa")) (CVar (0,"rendera")))) (CVar (4,"vas")))) (CApply (CSymbol ("Prelude","Just")) (CSymbol ("WUIjs","jsListComb")))))) (CLambda [CPVar (5,"wparams"),CPVar (6,"env"),CPVar (7,"s")] (CLetDecl [CLocalPat (CPVar (8,"rvs")) (CApply (CApply (CSymbol ("Prelude","map")) (CApply (CApply (CVar (2,"reada")) (CVar (0,"rendera"))) (CVar (6,"env")))) (CApply (CSymbol ("WUIjs","state2states")) (CVar (7,"s")))) [],CLocalFunc (CFunc ("WUIjs","combine") 1 Private (CFuncType (CTCons ("Prelude","Bool") []) (CTCons ("Prelude","(,,)") [CTCons ("HTML","HtmlExp") [],CTCons ("Prelude","Maybe") [CTCons ("JavaScript","JSExp") []],CTCons ("WUIjs","WuiState") []])) (CRules CFlex [CRule [CPVar (9,"hide")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CSymbol ("WUIjs","joinSubFields")) (CVar (5,"wparams"))) (CVar (9,"hide"))) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("Prelude","snd"))) (CVar (8,"rvs")))) (CApply (CSymbol ("Prelude","Just")) (CSymbol ("WUIjs","jsListComb"))))] []]))] (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","elem")) (CSymbol ("Prelude","Nothing"))) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("Prelude","fst"))) (CVar (8,"rvs"))))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CSymbol ("Prelude","Nothing"))) (CApply (CSymbol ("WUIjs","combine")) (CSymbol ("Prelude","True"))))) (CLetDecl [CLocalPat (CPVar (9,"value")) (CApply (CApply (CSymbol ("Prelude","map")) (CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Maybe","fromJust"))) (CSymbol ("Prelude","fst")))) (CVar (8,"rvs"))) []] (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("WUIjs","conditionOf")) (CVar (5,"wparams"))) (CVar (9,"value")))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CSymbol ("Prelude","Just")) (CVar (9,"value")))) (CApply (CSymbol ("WUIjs","combine")) (CSymbol ("Prelude","True"))))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CSymbol ("Prelude","Nothing"))) (CApply (CSymbol ("WUIjs","combine")) (CSymbol ("Prelude","False"))))))))))] [CLocalFunc (CFunc ("WUIjs","jsListComb") 1 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("JavaScript","JSExp") []]) (CTCons ("JavaScript","JSExp") [])) (CRules CFlex [CRule [CPVar (3,"args")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("JavaScript","JSFCall")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'y'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '2'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CSymbol ("Prelude","[]"))))))))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("JavaScript","JSFCall")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'w'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'A'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'y'))) (CSymbol ("Prelude","[]")))))))))))) (CVar (3,"args")))) (CSymbol ("Prelude","[]"))))] []]))]]),
  CFunc ("WUIjs","wListWithHeadings") 2 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (0,"a")]) (CTCons ("WUIjs","WuiSpec") [CTCons ("Prelude","[]") [CTVar (0,"a")]]))) (CRules CFlex [CRule [CPVar (0,"headings"),CPVar (1,"wspec")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("WUIjs","withRendering")) (CApply (CSymbol ("WUIjs","wList")) (CVar (1,"wspec")))) (CSymbol ("WUIjs","renderHeadings")))] [CLocalFunc (CFunc ("WUIjs","renderHeadings") 1 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("HTML","HtmlExp") []]) (CTCons ("HTML","HtmlExp") [])) (CRules CFlex [CRule [CPVar (2,"hs")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("HTML","addHeadings")) (CApply (CSymbol ("WUIjs","renderList")) (CVar (2,"hs")))) (CApply (CApply (CSymbol ("Prelude","map")) (CLambda [CPVar (3,"s")] (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("HTML","htxt")) (CVar (3,"s")))) (CSymbol ("Prelude","[]"))))) (CVar (0,"headings"))))] []]))]]),
  CFunc ("WUIjs","wHList") 1 Public (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (0,"a")]) (CTCons ("WUIjs","WuiSpec") [CTCons ("Prelude","[]") [CTVar (0,"a")]])) (CRules CFlex [CRule [CPVar (0,"wspec")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("WUIjs","withRendering")) (CApply (CSymbol ("WUIjs","wList")) (CVar (0,"wspec")))) (CSymbol ("WUIjs","renderTuple")))] []]),
  CFunc ("WUIjs","wMatrix") 1 Public (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (0,"a")]) (CTCons ("WUIjs","WuiSpec") [CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTVar (0,"a")]]])) (CRules CFlex [CRule [CPVar (0,"wspec")] [(CSymbol ("Prelude","success"),CApply (CSymbol ("WUIjs","wList")) (CApply (CSymbol ("WUIjs","wHList")) (CVar (0,"wspec"))))] []]),
  CFunc ("WUIjs","wMaybe") 3 Public (CFuncType (CTCons ("WUIjs","WuiSpec") [CTCons ("Prelude","Bool") []]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (0,"a")]) (CFuncType (CTVar (0,"a")) (CTCons ("WUIjs","WuiSpec") [CTCons ("Prelude","Maybe") [CTVar (0,"a")]])))) (CRules CFlex [CRule [CPComb ("WUIjs","WuiSpec") [CPVar (0,"paramb"),CPVar (1,"showb"),CPVar (2,"readb")],CPComb ("WUIjs","WuiSpec") [CPVar (3,"parama"),CPVar (4,"showa"),CPVar (5,"reada")],CPVar (6,"def")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("WUIjs","WuiSpec")) (CApply (CApply (CApply (CApply (CSymbol ("Prelude","(,,,)")) (CSymbol ("WUIjs","renderTuple"))) (CSymbol ("WUIjs","tupleError"))) (CApply (CSymbol ("Prelude","const")) (CSymbol ("Prelude","True")))) (CSymbol ("Prelude","Nothing")))) (CLambda [CPVar (7,"wparams"),CPVar (8,"mbs")] (CApply (CApply (CApply (CApply (CSymbol ("WUIjs","joinSubFields")) (CVar (7,"wparams"))) (CSymbol ("Prelude","True"))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CVar (1,"showb")) (CVar (0,"paramb"))) (CApply (CApply (CSymbol ("Prelude","/=")) (CVar (8,"mbs"))) (CSymbol ("Prelude","Nothing"))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CVar (4,"showa")) (CVar (3,"parama"))) (CApply (CApply (CApply (CSymbol ("Prelude","maybe")) (CVar (6,"def"))) (CSymbol ("Prelude","id"))) (CVar (8,"mbs"))))) (CSymbol ("Prelude","[]"))))) (CSymbol ("Prelude","Nothing"))))) (CLambda [CPVar (9,"wparams"),CPVar (10,"env"),CPVar (11,"s")] (CLetDecl [CLocalPat (CPComb ("Prelude",":") [CPVar (12,"rb"),CPComb ("Prelude",":") [CPVar (13,"ra"),CPComb ("Prelude","[]") []]]) (CApply (CSymbol ("WUIjs","state2states")) (CVar (11,"s"))) [],CLocalPat (CPComb ("Prelude","(,)") [CPVar (14,"rbv"),CPVar (15,"fieldb")]) (CApply (CApply (CApply (CVar (2,"readb")) (CVar (0,"paramb"))) (CVar (10,"env"))) (CVar (12,"rb"))) [],CLocalPat (CPComb ("Prelude","(,)") [CPVar (16,"rav"),CPVar (17,"fielda")]) (CApply (CApply (CApply (CVar (5,"reada")) (CVar (3,"parama"))) (CVar (10,"env"))) (CVar (13,"ra"))) [],CLocalFunc (CFunc ("WUIjs","combine") 1 Private (CFuncType (CTCons ("Prelude","Bool") []) (CTCons ("Prelude","(,,)") [CTCons ("HTML","HtmlExp") [],CTCons ("Prelude","Maybe") [CTCons ("JavaScript","JSExp") []],CTCons ("WUIjs","WuiState") []])) (CRules CFlex [CRule [CPVar (18,"hide")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CSymbol ("WUIjs","joinSubFields")) (CVar (9,"wparams"))) (CVar (18,"hide"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (15,"fieldb"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (17,"fielda"))) (CSymbol ("Prelude","[]"))))) (CSymbol ("Prelude","Nothing")))] []]))] (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","||")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (14,"rbv"))) (CSymbol ("Prelude","Nothing")))) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (16,"rav"))) (CSymbol ("Prelude","Nothing"))))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CSymbol ("Prelude","Nothing"))) (CApply (CSymbol ("WUIjs","combine")) (CSymbol ("Prelude","True"))))) (CLetDecl [CLocalPat (CPVar (18,"value")) (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CSymbol ("Maybe","fromJust")) (CVar (14,"rbv")))) (CApply (CSymbol ("Prelude","Just")) (CApply (CSymbol ("Maybe","fromJust")) (CVar (16,"rav"))))) (CSymbol ("Prelude","Nothing"))) []] (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("WUIjs","conditionOf")) (CVar (9,"wparams"))) (CVar (18,"value")))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CSymbol ("Prelude","Just")) (CVar (18,"value")))) (CApply (CSymbol ("WUIjs","combine")) (CSymbol ("Prelude","True"))))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CSymbol ("Prelude","Nothing"))) (CApply (CSymbol ("WUIjs","combine")) (CSymbol ("Prelude","False"))))))))))] []]),
  CFunc ("WUIjs","wCheckMaybe") 2 Public (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (0,"a")]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("HTML","HtmlExp") []]) (CFuncType (CTVar (0,"a")) (CTCons ("WUIjs","WuiSpec") [CTCons ("Prelude","Maybe") [CTVar (0,"a")]])))) (CRules CFlex [CRule [CPVar (0,"wspec"),CPVar (1,"exps")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("WUIjs","wMaybe")) (CApply (CSymbol ("WUIjs","wCheckBool")) (CVar (1,"exps")))) (CVar (0,"wspec")))] []]),
  CFunc ("WUIjs","wRadioMaybe") 3 Public (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (0,"a")]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("HTML","HtmlExp") []]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("HTML","HtmlExp") []]) (CFuncType (CTVar (0,"a")) (CTCons ("WUIjs","WuiSpec") [CTCons ("Prelude","Maybe") [CTVar (0,"a")]]))))) (CRules CFlex [CRule [CPVar (0,"wspec"),CPVar (1,"hnothing"),CPVar (2,"hjust")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("WUIjs","wMaybe")) (CVar (3,"wBool"))) (CVar (0,"wspec")))] [CLocalPat (CPVar (3,"wBool")) (CApply (CApply (CSymbol ("WUIjs","wRadioSelect")) (CLambda [CPVar (4,"b")] (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CVar (4,"b"))) (CVar (2,"hjust"))) (CVar (1,"hnothing"))))) (CApply (CApply (CSymbol ("Prelude",":")) (CSymbol ("Prelude","False"))) (CApply (CApply (CSymbol ("Prelude",":")) (CSymbol ("Prelude","True"))) (CSymbol ("Prelude","[]"))))) []]]),
  CFunc ("WUIjs","wEither") 2 Public (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (0,"a")]) (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (1,"b")]) (CTCons ("WUIjs","WuiSpec") [CTCons ("Prelude","Either") [CTVar (0,"a"),CTVar (1,"b")]]))) (CRules CFlex [CRule [CPComb ("WUIjs","WuiSpec") [CPVar (0,"rendera"),CPVar (1,"showa"),CPVar (2,"reada")],CPComb ("WUIjs","WuiSpec") [CPVar (3,"renderb"),CPVar (4,"showb"),CPVar (5,"readb")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("WUIjs","WuiSpec")) (CApply (CApply (CApply (CApply (CSymbol ("Prelude","(,,,)")) (CSymbol ("Prelude","head"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '?'))) (CSymbol ("Prelude","[]")))) (CApply (CSymbol ("Prelude","const")) (CSymbol ("Prelude","True")))) (CSymbol ("Prelude","Nothing")))) (CSymbol ("WUIjs","showEither"))) (CSymbol ("WUIjs","readEither")))] [CLocalFunc (CFunc ("WUIjs","showEither") 2 Private (CFuncType (CTCons ("Prelude","(,,,)") [CFuncType (CTCons ("Prelude","[]") [CTCons ("HTML","HtmlExp") []]) (CTCons ("HTML","HtmlExp") []),CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CFuncType (CTVar (0,"a")) (CTCons ("Prelude","Bool") []),CTCons ("Prelude","Maybe") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]]) (CFuncType (CTCons ("Prelude","Either") [CTVar (2,"_2999"),CTVar (3,"_2998")]) (CTCons ("Prelude","(,,)") [CTCons ("HTML","HtmlExp") [],CTCons ("Prelude","Maybe") [CTCons ("JavaScript","JSExp") []],CTCons ("WUIjs","WuiState") []]))) (CRules CFlex [CRule [CPVar (6,"wparams"),CPComb ("Prelude","Left") [CPVar (7,"va")]] [(CSymbol ("Prelude","success"),CLetDecl [CLocalPat (CPComb ("Prelude","(,,)") [CPVar (8,"hea"),CPVar (9,"jsa"),CPVar (10,"rta")]) (CApply (CApply (CVar (1,"showa")) (CVar (0,"rendera"))) (CVar (7,"va"))) []] (CApply (CApply (CApply (CApply (CApply (CSymbol ("WUIjs","altSubField")) (CVar (6,"wparams"))) (CSymbol ("Prelude","True"))) (CVar (8,"hea"))) (CVar (9,"jsa"))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CLit (CIntc 1))) (CVar (10,"rta")))))] [],CRule [CPVar (11,"wparams"),CPComb ("Prelude","Right") [CPVar (12,"vb")]] [(CSymbol ("Prelude","success"),CLetDecl [CLocalPat (CPComb ("Prelude","(,,)") [CPVar (13,"heb"),CPVar (14,"jsb"),CPVar (15,"rtb")]) (CApply (CApply (CVar (4,"showb")) (CVar (3,"renderb"))) (CVar (12,"vb"))) []] (CApply (CApply (CApply (CApply (CApply (CSymbol ("WUIjs","altSubField")) (CVar (11,"wparams"))) (CSymbol ("Prelude","True"))) (CVar (13,"heb"))) (CVar (14,"jsb"))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CLit (CIntc 2))) (CVar (15,"rtb")))))] []])),CLocalFunc (CFunc ("WUIjs","readEither") 3 Private (CFuncType (CTCons ("Prelude","(,,,)") [CFuncType (CTCons ("Prelude","[]") [CTCons ("HTML","HtmlExp") []]) (CTCons ("HTML","HtmlExp") []),CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CFuncType (CTCons ("Prelude","Either") [CTVar (2,"_2999"),CTVar (3,"_2998")]) (CTCons ("Prelude","Bool") []),CTCons ("Prelude","Maybe") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]]) (CFuncType (CFuncType (CTCons ("HTML","CgiRef") []) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CFuncType (CTCons ("WUIjs","WuiState") []) (CTCons ("Prelude","(,)") [CTCons ("Prelude","Maybe") [CTCons ("Prelude","Either") [CTVar (2,"_2999"),CTVar (3,"_2998")]],CTCons ("Prelude","(,,)") [CTCons ("HTML","HtmlExp") [],CTCons ("Prelude","Maybe") [CTCons ("JavaScript","JSExp") []],CTCons ("WUIjs","WuiState") []]])))) (CRules CFlex [CRule [CPVar (6,"wparams"),CPVar (7,"env"),CPVar (8,"s")] [(CSymbol ("Prelude","success"),CLetDecl [CLocalPat (CPComb ("Prelude","(,)") [CPVar (9,"altindex"),CPVar (10,"rab")]) (CApply (CSymbol ("WUIjs","state2altstate")) (CVar (8,"s"))) []] (CCase (CVar (9,"altindex")) [CBranch (CPLit (CIntc 1)) (CLetDecl [CLocalPat (CPComb ("Prelude","(,)") [CPVar (11,"rv"),CPComb ("Prelude","(,,)") [CPVar (12,"he"),CPVar (13,"jsck"),CPVar (14,"rst")]]) (CApply (CApply (CApply (CVar (2,"reada")) (CVar (0,"rendera"))) (CVar (7,"env"))) (CVar (10,"rab"))) []] (CApply (CApply (CApply (CApply (CApply (CSymbol ("WUIjs","checkValue")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (11,"rv"))) (CSymbol ("Prelude","Nothing")))) (CApply (CSymbol ("Prelude","Left")) (CApply (CSymbol ("Maybe","fromJust")) (CVar (11,"rv"))))) (CVar (12,"he"))) (CVar (13,"jsck"))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CLit (CIntc 1))) (CVar (14,"rst"))))),CBranch (CPLit (CIntc 2)) (CLetDecl [CLocalPat (CPComb ("Prelude","(,)") [CPVar (15,"rv"),CPComb ("Prelude","(,,)") [CPVar (16,"he"),CPVar (17,"jsck"),CPVar (18,"rst")]]) (CApply (CApply (CApply (CVar (5,"readb")) (CVar (3,"renderb"))) (CVar (7,"env"))) (CVar (10,"rab"))) []] (CApply (CApply (CApply (CApply (CApply (CSymbol ("WUIjs","checkValue")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (15,"rv"))) (CSymbol ("Prelude","Nothing")))) (CApply (CSymbol ("Prelude","Right")) (CApply (CSymbol ("Maybe","fromJust")) (CVar (15,"rv"))))) (CVar (16,"he"))) (CVar (17,"jsck"))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CLit (CIntc 2))) (CVar (18,"rst")))))]))] [CLocalFunc (CFunc ("WUIjs","checkValue") 5 Private (CFuncType (CTCons ("Prelude","Bool") []) (CFuncType (CTCons ("Prelude","Either") [CTVar (2,"_2999"),CTVar (3,"_2998")]) (CFuncType (CTCons ("HTML","HtmlExp") []) (CFuncType (CTCons ("Prelude","Maybe") [CTCons ("JavaScript","JSExp") []]) (CFuncType (CTCons ("Prelude","(,)") [CTCons ("Prelude","Int") [],CTCons ("WUIjs","WuiState") []]) (CTCons ("Prelude","(,)") [CTCons ("Prelude","Maybe") [CTCons ("Prelude","Either") [CTVar (2,"_2999"),CTVar (3,"_2998")]],CTCons ("Prelude","(,,)") [CTCons ("HTML","HtmlExp") [],CTCons ("Prelude","Maybe") [CTCons ("JavaScript","JSExp") []],CTCons ("WUIjs","WuiState") []]])))))) (CRules CFlex [CRule [CPVar (9,"isnothing"),CPVar (10,"value"),CPVar (11,"hexp"),CPVar (12,"jsck"),CPVar (13,"altstate")] [(CSymbol ("Prelude","success"),CLetDecl [CLocalFunc (CFunc ("WUIjs","combine") 1 Private (CFuncType (CTCons ("Prelude","Bool") []) (CTCons ("Prelude","(,,)") [CTCons ("HTML","HtmlExp") [],CTCons ("Prelude","Maybe") [CTCons ("JavaScript","JSExp") []],CTCons ("WUIjs","WuiState") []])) (CRules CFlex [CRule [CPVar (14,"hide")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CApply (CSymbol ("WUIjs","altSubField")) (CVar (6,"wparams"))) (CVar (14,"hide"))) (CVar (11,"hexp"))) (CVar (12,"jsck"))) (CVar (13,"altstate")))] []]))] (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CVar (9,"isnothing"))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CSymbol ("Prelude","Nothing"))) (CApply (CSymbol ("WUIjs","combine")) (CSymbol ("Prelude","True"))))) (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("WUIjs","conditionOf")) (CVar (6,"wparams"))) (CVar (10,"value")))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CSymbol ("Prelude","Just")) (CVar (10,"value")))) (CApply (CSymbol ("WUIjs","combine")) (CSymbol ("Prelude","True"))))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CSymbol ("Prelude","Nothing"))) (CApply (CSymbol ("WUIjs","combine")) (CSymbol ("Prelude","False")))))))] []]))]]))]]),
  CFunc ("WUIjs","wTree") 1 Public (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (0,"a")]) (CTCons ("WUIjs","WuiSpec") [CTCons ("WUIjs","WTree") [CTVar (0,"a")]])) (CRules CFlex [CRule [CPComb ("WUIjs","WuiSpec") [CPVar (0,"rendera"),CPVar (1,"showa"),CPVar (2,"reada")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("WUIjs","WuiSpec")) (CApply (CApply (CApply (CApply (CSymbol ("Prelude","(,,,)")) (CSymbol ("WUIjs","renderList"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'I'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'g'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ':'))) (CSymbol ("Prelude","[]")))))))))))))))) (CApply (CSymbol ("Prelude","const")) (CSymbol ("Prelude","True")))) (CSymbol ("Prelude","Nothing")))) (CSymbol ("WUIjs","showTree"))) (CSymbol ("WUIjs","readTree")))] [CLocalFunc (CFunc ("WUIjs","showTree") 2 Private (CFuncType (CTCons ("Prelude","(,,,)") [CFuncType (CTCons ("Prelude","[]") [CTCons ("HTML","HtmlExp") []]) (CTCons ("HTML","HtmlExp") []),CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CFuncType (CTVar (0,"a")) (CTCons ("Prelude","Bool") []),CTCons ("Prelude","Maybe") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]]) (CFuncType (CTCons ("WUIjs","WTree") [CTVar (1,"_3099")]) (CTCons ("Prelude","(,,)") [CTCons ("HTML","HtmlExp") [],CTCons ("Prelude","Maybe") [CTCons ("JavaScript","JSExp") []],CTCons ("WUIjs","WuiState") []]))) (CRules CFlex [CRule [CPVar (3,"_"),CPComb ("WUIjs","WLeaf") [CPVar (4,"va")]] [(CSymbol ("Prelude","success"),CLetDecl [CLocalPat (CPComb ("Prelude","(,,)") [CPVar (5,"hea"),CPVar (6,"jsa"),CPVar (7,"rta")]) (CApply (CApply (CVar (1,"showa")) (CVar (0,"rendera"))) (CVar (4,"va"))) []] (CApply (CApply (CApply (CApply (CApply (CSymbol ("WUIjs","altSubField")) (CVar (0,"rendera"))) (CSymbol ("Prelude","True"))) (CVar (5,"hea"))) (CVar (6,"jsa"))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CLit (CIntc 1))) (CVar (7,"rta")))))] [],CRule [CPVar (8,"wparams"),CPComb ("WUIjs","WNode") [CPVar (9,"ns")]] [(CSymbol ("Prelude","success"),CLetDecl [CLocalPat (CPComb ("Prelude","(,,)") [CPVar (10,"hes"),CPVar (11,"jscks"),CPVar (12,"sts")]) (CApply (CApply (CApply (CApply (CSymbol ("WUIjs","joinSubFields")) (CVar (8,"wparams"))) (CSymbol ("Prelude","True"))) (CApply (CApply (CSymbol ("Prelude","map")) (CApply (CSymbol ("WUIjs","showTree")) (CVar (8,"wparams")))) (CVar (9,"ns")))) (CSymbol ("Prelude","Nothing"))) []] (CApply (CApply (CApply (CSymbol ("Prelude","(,,)")) (CVar (10,"hes"))) (CVar (11,"jscks"))) (CApply (CSymbol ("WUIjs","altstate2state")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CLit (CIntc 2))) (CVar (12,"sts"))))))] []])),CLocalFunc (CFunc ("WUIjs","readTree") 3 Private (CFuncType (CTCons ("Prelude","(,,,)") [CFuncType (CTCons ("Prelude","[]") [CTCons ("HTML","HtmlExp") []]) (CTCons ("HTML","HtmlExp") []),CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CFuncType (CTCons ("WUIjs","WTree") [CTVar (1,"_3099")]) (CTCons ("Prelude","Bool") []),CTCons ("Prelude","Maybe") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]]) (CFuncType (CFuncType (CTCons ("HTML","CgiRef") []) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CFuncType (CTCons ("WUIjs","WuiState") []) (CTCons ("Prelude","(,)") [CTCons ("Prelude","Maybe") [CTCons ("WUIjs","WTree") [CTVar (1,"_3099")]],CTCons ("Prelude","(,,)") [CTCons ("HTML","HtmlExp") [],CTCons ("Prelude","Maybe") [CTCons ("JavaScript","JSExp") []],CTCons ("WUIjs","WuiState") []]])))) (CRules CFlex [CRule [CPVar (3,"wpar"),CPVar (4,"env"),CPVar (5,"s")] [(CSymbol ("Prelude","success"),CLetDecl [CLocalPat (CPComb ("Prelude","(,)") [CPVar (6,"altindex"),CPVar (7,"rab")]) (CApply (CSymbol ("WUIjs","state2altstate")) (CVar (5,"s"))) []] (CCase (CVar (6,"altindex")) [CBranch (CPLit (CIntc 1)) (CLetDecl [CLocalPat (CPComb ("Prelude","(,)") [CPVar (8,"rv"),CPComb ("Prelude","(,,)") [CPVar (9,"he"),CPVar (10,"jsck"),CPVar (11,"rst")]]) (CApply (CApply (CApply (CVar (2,"reada")) (CVar (0,"rendera"))) (CVar (4,"env"))) (CVar (7,"rab"))) [],CLocalFunc (CFunc ("WUIjs","combine") 1 Private (CFuncType (CTCons ("Prelude","Bool") []) (CTCons ("Prelude","(,,)") [CTCons ("HTML","HtmlExp") [],CTCons ("Prelude","Maybe") [CTCons ("JavaScript","JSExp") []],CTCons ("WUIjs","WuiState") []])) (CRules CFlex [CRule [CPVar (12,"hide")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CApply (CSymbol ("WUIjs","altSubField")) (CVar (0,"rendera"))) (CVar (12,"hide"))) (CVar (9,"he"))) (CVar (10,"jsck"))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CLit (CIntc 1))) (CVar (11,"rst"))))] []]))] (CApply (CApply (CApply (CSymbol ("WUIjs","checkValue")) (CSymbol ("WUIjs","combine"))) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (8,"rv"))) (CSymbol ("Prelude","Nothing")))) (CApply (CSymbol ("WUIjs","WLeaf")) (CApply (CSymbol ("Maybe","fromJust")) (CVar (8,"rv")))))),CBranch (CPLit (CIntc 2)) (CLetDecl [CLocalPat (CPVar (12,"rvs")) (CApply (CApply (CSymbol ("Prelude","map")) (CApply (CApply (CSymbol ("WUIjs","readTree")) (CVar (3,"wpar"))) (CVar (4,"env")))) (CApply (CSymbol ("WUIjs","state2states")) (CVar (7,"rab")))) [],CLocalFunc (CFunc ("WUIjs","combine") 1 Private (CFuncType (CTCons ("Prelude","Bool") []) (CTCons ("Prelude","(,,)") [CTCons ("HTML","HtmlExp") [],CTCons ("Prelude","Maybe") [CTCons ("JavaScript","JSExp") []],CTCons ("WUIjs","WuiState") []])) (CRules CFlex [CRule [CPVar (13,"hide")] [(CSymbol ("Prelude","success"),CLetDecl [CLocalPat (CPComb ("Prelude","(,,)") [CPVar (14,"hes"),CPVar (15,"jscks"),CPVar (16,"sts")]) (CApply (CApply (CApply (CApply (CSymbol ("WUIjs","joinSubFields")) (CVar (3,"wpar"))) (CVar (13,"hide"))) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("Prelude","snd"))) (CVar (12,"rvs")))) (CSymbol ("Prelude","Nothing"))) []] (CApply (CApply (CApply (CSymbol ("Prelude","(,,)")) (CVar (14,"hes"))) (CVar (15,"jscks"))) (CApply (CSymbol ("WUIjs","altstate2state")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CLit (CIntc 2))) (CVar (16,"sts"))))))] []]))] (CApply (CApply (CApply (CSymbol ("WUIjs","checkValue")) (CSymbol ("WUIjs","combine"))) (CApply (CApply (CSymbol ("Prelude","elem")) (CSymbol ("Prelude","Nothing"))) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("Prelude","fst"))) (CVar (12,"rvs"))))) (CApply (CSymbol ("WUIjs","WNode")) (CApply (CApply (CSymbol ("Prelude","map")) (CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Maybe","fromJust"))) (CSymbol ("Prelude","fst")))) (CVar (12,"rvs"))))))]))] [CLocalFunc (CFunc ("WUIjs","checkValue") 3 Private (CFuncType (CFuncType (CTCons ("Prelude","Bool") []) (CTVar (0,"a"))) (CFuncType (CTCons ("Prelude","Bool") []) (CFuncType (CTCons ("WUIjs","WTree") [CTVar (1,"_3099")]) (CTCons ("Prelude","(,)") [CTCons ("Prelude","Maybe") [CTCons ("WUIjs","WTree") [CTVar (1,"_3099")]],CTVar (0,"a")])))) (CRules CFlex [CRule [CPVar (6,"combine"),CPVar (7,"isnothing"),CPVar (8,"value")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CVar (7,"isnothing"))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CSymbol ("Prelude","Nothing"))) (CApply (CVar (6,"combine")) (CSymbol ("Prelude","True"))))) (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("WUIjs","conditionOf")) (CVar (3,"wpar"))) (CVar (8,"value")))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CSymbol ("Prelude","Just")) (CVar (8,"value")))) (CApply (CVar (6,"combine")) (CSymbol ("Prelude","True"))))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CSymbol ("Prelude","Nothing"))) (CApply (CVar (6,"combine")) (CSymbol ("Prelude","False"))))))] []]))]]))]]),
  CFunc ("WUIjs","renderTuple") 1 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("HTML","HtmlExp") []]) (CTCons ("HTML","HtmlExp") [])) (CRules CFlex [CRule [CPVar (0,"hexps")] [(CSymbol ("Prelude","success"),CApply (CSymbol ("HTML","table")) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude","map")) (CLambda [CPVar (1,"h")] (CApply (CApply (CSymbol ("Prelude",":")) (CVar (1,"h"))) (CSymbol ("Prelude","[]"))))) (CVar (0,"hexps")))) (CSymbol ("Prelude","[]"))))] []]),
  CFunc ("WUIjs","unRenderTuple") 1 Private (CFuncType (CTCons ("HTML","HtmlExp") []) (CTCons ("Prelude","[]") [CTCons ("HTML","HtmlExp") []])) (CRules CFlex [CRule [CPVar (0,"hexp")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CSymbol ("WUIjs","isTupleTable")) (CVar (0,"hexp")))) (CApply (CSymbol ("WUIjs","getTupleTableElems")) (CVar (0,"hexp")))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (0,"hexp"))) (CSymbol ("Prelude","[]"))))] [CLocalFunc (CFunc ("WUIjs","isTupleTable") 1 Private (CFuncType (CTCons ("HTML","HtmlExp") []) (CTCons ("Prelude","Bool") [])) (CRules CFlex [CRule [CPVar (1,"he")] [(CSymbol ("Prelude","success"),CCase (CVar (1,"he")) [CBranch (CPComb ("HTML","HtmlStruct") [CPComb ("Prelude",":") [CPLit (CCharc 't'),CPComb ("Prelude",":") [CPLit (CCharc 'a'),CPComb ("Prelude",":") [CPLit (CCharc 'b'),CPComb ("Prelude",":") [CPLit (CCharc 'l'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude","[]") []]]]]],CPComb ("Prelude","[]") [],CPComb ("Prelude",":") [CPComb ("HTML","HtmlStruct") [CPComb ("Prelude",":") [CPLit (CCharc 't'),CPComb ("Prelude",":") [CPLit (CCharc 'r'),CPComb ("Prelude","[]") []]],CPComb ("Prelude","[]") [],CPVar (2,"tds")],CPComb ("Prelude","[]") []]]) (CApply (CApply (CSymbol ("Prelude","all")) (CSymbol ("WUIjs","isSingleElem"))) (CVar (2,"tds"))),CBranch (CPVar (3,"_")) (CSymbol ("Prelude","False"))])] []])),CLocalFunc (CFunc ("WUIjs","isSingleElem") 1 Private (CFuncType (CTCons ("HTML","HtmlExp") []) (CTCons ("Prelude","Bool") [])) (CRules CFlex [CRule [CPVar (1,"he")] [(CSymbol ("Prelude","success"),CCase (CVar (1,"he")) [CBranch (CPComb ("HTML","HtmlStruct") [CPComb ("Prelude",":") [CPLit (CCharc 't'),CPComb ("Prelude",":") [CPLit (CCharc 'd'),CPComb ("Prelude","[]") []]],CPVar (2,"_"),CPComb ("Prelude",":") [CPVar (3,"_"),CPComb ("Prelude","[]") []]]) (CSymbol ("Prelude","True")),CBranch (CPVar (4,"_")) (CSymbol ("Prelude","False"))])] []])),CLocalFunc (CFunc ("WUIjs","getTupleTableElems") 1 Private (CFuncType (CTCons ("HTML","HtmlExp") []) (CTCons ("Prelude","[]") [CTCons ("HTML","HtmlExp") []])) (CRules CFlex [CRule [CPComb ("HTML","HtmlStruct") [CPComb ("Prelude",":") [CPLit (CCharc 't'),CPComb ("Prelude",":") [CPLit (CCharc 'a'),CPComb ("Prelude",":") [CPLit (CCharc 'b'),CPComb ("Prelude",":") [CPLit (CCharc 'l'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude","[]") []]]]]],CPComb ("Prelude","[]") [],CPComb ("Prelude",":") [CPComb ("HTML","HtmlStruct") [CPComb ("Prelude",":") [CPLit (CCharc 't'),CPComb ("Prelude",":") [CPLit (CCharc 'r'),CPComb ("Prelude","[]") []]],CPComb ("Prelude","[]") [],CPVar (1,"tds")],CPComb ("Prelude","[]") []]]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","map")) (CLambda [CPComb ("HTML","HtmlStruct") [CPComb ("Prelude",":") [CPLit (CCharc 't'),CPComb ("Prelude",":") [CPLit (CCharc 'd'),CPComb ("Prelude","[]") []]],CPVar (2,"_"),CPComb ("Prelude",":") [CPVar (3,"e"),CPComb ("Prelude","[]") []]]] (CVar (3,"e")))) (CVar (1,"tds")))] []]))]]),
  CFunc ("WUIjs","tupleError") 0 Private (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'I'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'g'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'b'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ':'))) (CSymbol ("Prelude","[]"))))))))))))))))))))))] []]),
  CFunc ("WUIjs","renderTaggedTuple") 2 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("HTML","HtmlExp") []]) (CTCons ("HTML","HtmlExp") []))) (CRules CFlex [CRule [CPVar (0,"tags"),CPVar (1,"hexps")] [(CSymbol ("Prelude","success"),CApply (CSymbol ("HTML","table")) (CApply (CApply (CSymbol ("Prelude","map")) (CLambda [CPComb ("Prelude","(,)") [CPVar (2,"t"),CPVar (3,"h")]] (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("HTML","bold")) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("HTML","htxt")) (CVar (2,"t")))) (CSymbol ("Prelude","[]"))))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (3,"h"))) (CSymbol ("Prelude","[]")))) (CSymbol ("Prelude","[]")))))) (CApply (CApply (CSymbol ("Prelude","zip")) (CVar (0,"tags"))) (CVar (1,"hexps")))))] []]),
  CFunc ("WUIjs","renderList") 1 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("HTML","HtmlExp") []]) (CTCons ("HTML","HtmlExp") [])) (CRules CFlex [CRule [CPVar (0,"hexps")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("HTML","addAttr")) (CApply (CSymbol ("WUIjs","mergeTableOfTable")) (CApply (CSymbol ("HTML","table")) (CApply (CApply (CSymbol ("Prelude","map")) (CLambda [CPVar (1,"h")] (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (1,"h"))) (CSymbol ("Prelude","[]")))) (CSymbol ("Prelude","[]"))))) (CVar (0,"hexps")))))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'b'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CSymbol ("Prelude","[]"))))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '1'))) (CSymbol ("Prelude","[]")))))] []]),
  CFunc ("WUIjs","mergeTableOfTable") 1 Private (CFuncType (CTCons ("HTML","HtmlExp") []) (CTCons ("HTML","HtmlExp") [])) (CRules CFlex [CRule [CPComb ("HTML","HtmlStruct") [CPComb ("Prelude",":") [CPLit (CCharc 't'),CPComb ("Prelude",":") [CPLit (CCharc 'a'),CPComb ("Prelude",":") [CPLit (CCharc 'b'),CPComb ("Prelude",":") [CPLit (CCharc 'l'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude","[]") []]]]]],CPVar (0,"attrs"),CPVar (1,"rows")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("HTML","HtmlStruct")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'b'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]")))))))) (CVar (0,"attrs"))) (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","all")) (CSymbol ("WUIjs","isRowWithSingleTableData"))) (CVar (1,"rows")))) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("WUIjs","mergeRowWithSingleTableData"))) (CVar (1,"rows")))) (CVar (1,"rows"))))] []]),
  CFunc ("WUIjs","isRowWithSingleTableData") 1 Private (CFuncType (CTCons ("HTML","HtmlExp") []) (CTCons ("Prelude","Bool") [])) (CRules CFlex [CRule [CPVar (0,"row")] [(CSymbol ("Prelude","success"),CCase (CVar (0,"row")) [CBranch (CPComb ("HTML","HtmlStruct") [CPComb ("Prelude",":") [CPLit (CCharc 't'),CPComb ("Prelude",":") [CPLit (CCharc 'r'),CPComb ("Prelude","[]") []]],CPComb ("Prelude","[]") [],CPComb ("Prelude",":") [CPComb ("HTML","HtmlStruct") [CPComb ("Prelude",":") [CPLit (CCharc 't'),CPComb ("Prelude",":") [CPLit (CCharc 'd'),CPComb ("Prelude","[]") []]],CPComb ("Prelude","[]") [],CPComb ("Prelude",":") [CPComb ("HTML","HtmlStruct") [CPComb ("Prelude",":") [CPLit (CCharc 't'),CPComb ("Prelude",":") [CPLit (CCharc 'a'),CPComb ("Prelude",":") [CPLit (CCharc 'b'),CPComb ("Prelude",":") [CPLit (CCharc 'l'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude","[]") []]]]]],CPVar (1,"_"),CPComb ("Prelude",":") [CPComb ("HTML","HtmlStruct") [CPComb ("Prelude",":") [CPLit (CCharc 't'),CPComb ("Prelude",":") [CPLit (CCharc 'r'),CPComb ("Prelude","[]") []]],CPVar (2,"_"),CPVar (3,"_")],CPComb ("Prelude","[]") []]],CPComb ("Prelude","[]") []]],CPComb ("Prelude","[]") []]]) (CSymbol ("Prelude","True")),CBranch (CPVar (4,"_")) (CSymbol ("Prelude","False"))])] []]),
  CFunc ("WUIjs","mergeRowWithSingleTableData") 1 Private (CFuncType (CTCons ("HTML","HtmlExp") []) (CTCons ("HTML","HtmlExp") [])) (CRules CFlex [CRule [CPComb ("HTML","HtmlStruct") [CPComb ("Prelude",":") [CPLit (CCharc 't'),CPComb ("Prelude",":") [CPLit (CCharc 'r'),CPComb ("Prelude","[]") []]],CPComb ("Prelude","[]") [],CPComb ("Prelude",":") [CPComb ("HTML","HtmlStruct") [CPComb ("Prelude",":") [CPLit (CCharc 't'),CPComb ("Prelude",":") [CPLit (CCharc 'd'),CPComb ("Prelude","[]") []]],CPComb ("Prelude","[]") [],CPComb ("Prelude",":") [CPComb ("HTML","HtmlStruct") [CPComb ("Prelude",":") [CPLit (CCharc 't'),CPComb ("Prelude",":") [CPLit (CCharc 'a'),CPComb ("Prelude",":") [CPLit (CCharc 'b'),CPComb ("Prelude",":") [CPLit (CCharc 'l'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude","[]") []]]]]],CPVar (0,"_"),CPComb ("Prelude",":") [CPVar (1,"row"),CPComb ("Prelude","[]") []]],CPComb ("Prelude","[]") []]],CPComb ("Prelude","[]") []]]] [(CSymbol ("Prelude","success"),CVar (1,"row"))] []]),
  CFunc ("WUIjs","mainWUI") 3 Public (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (0,"a")]) (CFuncType (CTVar (0,"a")) (CFuncType (CFuncType (CTVar (0,"a")) (CTCons ("Prelude","IO") [CTCons ("HTML","HtmlForm") []])) (CTCons ("Prelude","IO") [CTCons ("HTML","HtmlForm") []])))) (CRules CFlex [CRule [CPVar (0,"wuispec"),CPVar (1,"val"),CPVar (2,"store")] [(CSymbol ("Prelude","success"),CDoExpr [CSLet [CLocalPat (CPComb ("Prelude","(,)") [CPVar (3,"hexp"),CPVar (4,"whandler")]) (CApply (CApply (CApply (CSymbol ("WUIjs","wui2html")) (CVar (0,"wuispec"))) (CVar (1,"val"))) (CVar (2,"store"))) []],CSExpr (CApply (CApply (CSymbol ("Prelude","$")) (CSymbol ("Prelude","return"))) (CApply (CApply (CSymbol ("HTML","form")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'W'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'U'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'I'))) (CSymbol ("Prelude","[]")))))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (3,"hexp"))) (CApply (CApply (CSymbol ("Prelude",":")) (CSymbol ("HTML","breakline"))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("WUIjs","wuiHandler2button")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'S'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'b'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CSymbol ("Prelude","[]"))))))))) (CVar (4,"whandler")))) (CSymbol ("Prelude","[]")))))))])] []]),
  CFunc ("WUIjs","wui2html") 3 Public (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (0,"a")]) (CFuncType (CTVar (0,"a")) (CFuncType (CFuncType (CTVar (0,"a")) (CTCons ("Prelude","IO") [CTCons ("HTML","HtmlForm") []])) (CTCons ("Prelude","(,)") [CTCons ("HTML","HtmlExp") [],CTCons ("WUIjs","WuiHandler") []])))) (CRules CFlex [CRule [CPVar (0,"wspec"),CPVar (1,"val"),CPVar (2,"store")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CSymbol ("WUIjs","wuiWithErrorForm")) (CVar (0,"wspec"))) (CVar (1,"val"))) (CVar (2,"store"))) (CSymbol ("WUIjs","standardErrorForm")))] []]),
  CFunc ("WUIjs","standardErrorForm") 2 Private (CFuncType (CTCons ("HTML","HtmlExp") []) (CFuncType (CTCons ("WUIjs","WuiHandler") []) (CTCons ("Prelude","IO") [CTCons ("HTML","HtmlForm") []]))) (CRules CFlex [CRule [CPVar (0,"hexp"),CPVar (1,"whandler")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","$")) (CSymbol ("Prelude","return"))) (CApply (CApply (CSymbol ("HTML","standardForm")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'I'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CSymbol ("Prelude","[]")))))))))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (0,"hexp"))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("WUIjs","wuiHandler2button")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'S'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'b'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CSymbol ("Prelude","[]"))))))))) (CVar (1,"whandler")))) (CSymbol ("Prelude","[]"))))))] []]),
  CFunc ("WUIjs","wuiInForm") 4 Public (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (0,"a")]) (CFuncType (CTVar (0,"a")) (CFuncType (CFuncType (CTVar (0,"a")) (CTCons ("Prelude","IO") [CTCons ("HTML","HtmlForm") []])) (CFuncType (CFuncType (CTCons ("HTML","HtmlExp") []) (CFuncType (CTCons ("WUIjs","WuiHandler") []) (CTCons ("Prelude","IO") [CTCons ("HTML","HtmlForm") []]))) (CTCons ("Prelude","IO") [CTCons ("HTML","HtmlForm") []]))))) (CRules CFlex [CRule [CPVar (0,"wspec"),CPVar (1,"val"),CPVar (2,"store"),CPVar (3,"userform")] [(CSymbol ("Prelude","success"),CApply (CSymbol ("WUIjs","answerForm")) (CApply (CApply (CApply (CApply (CSymbol ("WUIjs","wuiWithErrorForm")) (CVar (0,"wspec"))) (CVar (1,"val"))) (CVar (2,"store"))) (CVar (3,"userform"))))] [CLocalFunc (CFunc ("WUIjs","answerForm") 1 Private (CFuncType (CTCons ("Prelude","(,)") [CTCons ("HTML","HtmlExp") [],CTCons ("WUIjs","WuiHandler") []]) (CTCons ("Prelude","IO") [CTCons ("HTML","HtmlForm") []])) (CRules CFlex [CRule [CPComb ("Prelude","(,)") [CPVar (4,"hexp"),CPVar (5,"whandler")]] [(CSymbol ("Prelude","success"),CApply (CApply (CVar (3,"userform")) (CVar (4,"hexp"))) (CVar (5,"whandler")))] []]))]]),
  CFunc ("WUIjs","wuiWithErrorForm") 4 Public (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (0,"a")]) (CFuncType (CTVar (0,"a")) (CFuncType (CFuncType (CTVar (0,"a")) (CTCons ("Prelude","IO") [CTCons ("HTML","HtmlForm") []])) (CFuncType (CFuncType (CTCons ("HTML","HtmlExp") []) (CFuncType (CTCons ("WUIjs","WuiHandler") []) (CTCons ("Prelude","IO") [CTCons ("HTML","HtmlForm") []]))) (CTCons ("Prelude","(,)") [CTCons ("HTML","HtmlExp") [],CTCons ("WUIjs","WuiHandler") []]))))) (CRules CFlex [CRule [CPVar (0,"wspec"),CPVar (1,"val"),CPVar (2,"store"),CPVar (3,"errorform")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CSymbol ("WUIjs","showAndReadWUI")) (CVar (0,"wspec"))) (CVar (2,"store"))) (CVar (3,"errorform"))) (CApply (CApply (CSymbol ("WUIjs","generateWUI")) (CVar (0,"wspec"))) (CVar (1,"val"))))] []]),
  CFunc ("WUIjs","generateWUI") 2 Private (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (0,"a")]) (CFuncType (CTVar (0,"a")) (CTCons ("Prelude","(,,)") [CTCons ("HTML","HtmlExp") [],CTCons ("Prelude","Maybe") [CTCons ("JavaScript","JSExp") []],CFuncType (CFuncType (CTCons ("HTML","CgiRef") []) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CTCons ("Prelude","(,)") [CTCons ("Prelude","Maybe") [CTVar (0,"a")],CTCons ("Prelude","(,,)") [CTCons ("HTML","HtmlExp") [],CTCons ("Prelude","Maybe") [CTCons ("JavaScript","JSExp") []],CTCons ("WUIjs","WuiState") []]])]))) (CRules CFlex [CRule [CPComb ("WUIjs","WuiSpec") [CPVar (0,"wparams"),CPVar (1,"showhtml"),CPVar (2,"readval")],CPVar (3,"val")] [(CSymbol ("Prelude","success"),CApply (CSymbol ("WUIjs","hst2result")) (CApply (CApply (CVar (1,"showhtml")) (CVar (0,"wparams"))) (CVar (3,"val"))))] [CLocalFunc (CFunc ("WUIjs","hst2result") 1 Private (CFuncType (CTCons ("Prelude","(,,)") [CTVar (0,"a"),CTVar (1,"b"),CTCons ("WUIjs","WuiState") []]) (CTCons ("Prelude","(,,)") [CTVar (0,"a"),CTVar (1,"b"),CFuncType (CFuncType (CTCons ("HTML","CgiRef") []) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CTCons ("Prelude","(,)") [CTCons ("Prelude","Maybe") [CTVar (2,"_3136")],CTCons ("Prelude","(,,)") [CTCons ("HTML","HtmlExp") [],CTCons ("Prelude","Maybe") [CTCons ("JavaScript","JSExp") []],CTCons ("WUIjs","WuiState") []]])])) (CRules CFlex [CRule [CPComb ("Prelude","(,,)") [CPVar (4,"htmledits"),CPVar (5,"jsfs"),CPVar (6,"wstate")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","(,,)")) (CVar (4,"htmledits"))) (CVar (5,"jsfs"))) (CLambda [CPVar (7,"env")] (CApply (CApply (CApply (CVar (2,"readval")) (CVar (0,"wparams"))) (CVar (7,"env"))) (CVar (6,"wstate")))))] []]))]]),
  CFunc ("WUIjs","showAndReadWUI") 4 Private (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (0,"a")]) (CFuncType (CFuncType (CTVar (0,"a")) (CTCons ("Prelude","IO") [CTCons ("HTML","HtmlForm") []])) (CFuncType (CFuncType (CTCons ("HTML","HtmlExp") []) (CFuncType (CTCons ("WUIjs","WuiHandler") []) (CTCons ("Prelude","IO") [CTCons ("HTML","HtmlForm") []]))) (CFuncType (CTCons ("Prelude","(,,)") [CTCons ("HTML","HtmlExp") [],CTCons ("Prelude","Maybe") [CTCons ("JavaScript","JSExp") []],CFuncType (CFuncType (CTCons ("HTML","CgiRef") []) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CTCons ("Prelude","(,)") [CTCons ("Prelude","Maybe") [CTVar (0,"a")],CTCons ("Prelude","(,,)") [CTCons ("HTML","HtmlExp") [],CTCons ("Prelude","Maybe") [CTCons ("JavaScript","JSExp") []],CTCons ("WUIjs","WuiState") []]])]) (CTCons ("Prelude","(,)") [CTCons ("HTML","HtmlExp") [],CTCons ("WUIjs","WuiHandler") []]))))) (CRules CFlex [CRule [CPVar (0,"wspec"),CPVar (1,"store"),CPVar (2,"errorform"),CPComb ("Prelude","(,,)") [CPVar (3,"htmledits"),CPVar (4,"jsfs"),CPVar (5,"readenv")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CSymbol ("HTML","inline")) (CApply (CApply (CSymbol ("Prelude",":")) (CSymbol ("WUIjs","wuiStyleSheet"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (3,"htmledits"))) (CSymbol ("Prelude","[]")))))) (CApply (CApply (CSymbol ("WUIjs","WHandler")) (CApply (CSymbol ("WUIjs","htmlhandler")) (CVar (0,"wspec")))) (CVar (4,"jsfs"))))] [CLocalFunc (CFunc ("WUIjs","htmlhandler") 2 Private (CFuncType (CTCons ("WUIjs","WuiSpec") [CTVar (1,"_3176")]) (CFuncType (CFuncType (CTCons ("HTML","CgiRef") []) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CTCons ("Prelude","IO") [CTCons ("HTML","HtmlForm") []]))) (CRules CFlex [CRule [CPAs (9,"wui") (CPComb ("WUIjs","WuiSpec") [CPVar (6,"wparams"),CPVar (7,"_"),CPVar (8,"readval")]),CPVar (10,"env")] [(CSymbol ("Prelude","success"),CLetDecl [CLocalPat (CPComb ("Prelude","(,)") [CPVar (11,"mbnewval"),CPComb ("Prelude","(,,)") [CPVar (12,"htmlerrform"),CPVar (13,"htmlerrjsfs"),CPVar (14,"errwstate")]]) (CApply (CVar (5,"readenv")) (CVar (10,"env"))) []] (CApply (CApply (CApply (CSymbol ("Prelude","maybe")) (CLetDecl [CLocalPat (CPComb ("Prelude","(,)") [CPVar (15,"errhexp"),CPVar (16,"errwhdl")]) (CApply (CApply (CApply (CApply (CSymbol ("WUIjs","showAndReadWUI")) (CVar (9,"wui"))) (CVar (1,"store"))) (CVar (2,"errorform"))) (CApply (CApply (CApply (CSymbol ("Prelude","(,,)")) (CVar (12,"htmlerrform"))) (CVar (13,"htmlerrjsfs"))) (CLambda [CPVar (17,"errenv")] (CApply (CApply (CApply (CVar (8,"readval")) (CVar (6,"wparams"))) (CVar (17,"errenv"))) (CVar (14,"errwstate")))))) []] (CApply (CApply (CVar (2,"errorform")) (CVar (15,"errhexp"))) (CVar (16,"errwhdl"))))) (CLambda [CPVar (18,"newval")] (CApply (CApply (CSymbol ("Prelude","seq")) (CApply (CSymbol ("Prelude","normalForm")) (CVar (18,"newval")))) (CApply (CVar (1,"store")) (CVar (18,"newval")))))) (CVar (11,"mbnewval"))))] []]))]]),
  CFunc ("WUIjs","wuiStyleSheet") 0 Private (CTCons ("HTML","HtmlExp") []) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","$")) (CSymbol ("HTML","styleSheet"))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '.'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'w'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'h'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '{'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'y'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ':'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ';'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '}'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CSymbol ("Prelude","[]")))))))))))))))))))))))))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '.'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'w'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'h'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '{'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'y'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ':'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ';'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ':'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ';'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'f'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '-'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'w'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'g'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'h'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ':'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'b'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ';'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'b'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'k'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'g'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '-'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ':'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'y'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'w'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ';'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '}'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CSymbol ("Prelude","[]"))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '.'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'w'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'v'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'g'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '{'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'g'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ':'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '0'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'x'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ';'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'b'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '-'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'g'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ':'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '0'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'x'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ';'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '}'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CSymbol ("Prelude","[]")))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '.'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'w'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'v'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'g'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '{'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'g'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ':'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '0'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'x'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ';'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'b'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '-'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'g'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ':'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '0'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'x'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ';'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'b'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'k'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'g'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '-'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ':'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'y'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'w'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ';'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'b'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '-'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'w'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'h'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ':'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '2'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'x'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ';'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'b'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '-'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'y'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ':'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ';'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'b'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '-'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ':'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ';'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '}'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CSymbol ("Prelude","[]")))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))] []])]
 [COp ("WUIjs","withRendering") CInfixlOp 0,COp ("WUIjs","withError") CInfixlOp 0,COp ("WUIjs","withCondition") CInfixlOp 0,COp ("WUIjs","withConditionJS") CInfixlOp 0]
