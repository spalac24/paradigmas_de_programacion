Prog "Combinatorial" ["Prelude","SetFunctions"] [] [Func ("Combinatorial","permute") 1 Public (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [2,3]) (Comb FuncCall ("Combinatorial","permute.ndinsert.4") [Var 2,Comb FuncCall ("Combinatorial","permute") [Var 3]])])),Func ("Combinatorial","permute.ndinsert.4") 2 Private (FuncType (TVar 11) (FuncType (TCons ("Prelude","[]") [TVar 11]) (TCons ("Prelude","[]") [TVar 11]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude",":") [Var 1,Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude",":") [3,4]) (Comb FuncCall ("Prelude","?") [Comb ConsCall ("Prelude",":") [Var 1,Comb ConsCall ("Prelude",":") [Var 3,Var 4]],Comb ConsCall ("Prelude",":") [Var 3,Comb FuncCall ("Combinatorial","permute.ndinsert.4") [Var 1,Var 4]]])])),Func ("Combinatorial","subset") 1 Public (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [2,3]) (Or (Comb ConsCall ("Prelude",":") [Var 2,Comb FuncCall ("Combinatorial","subset") [Var 3]]) (Comb FuncCall ("Combinatorial","subset") [Var 3]))])),Func ("Combinatorial","allSubsets") 1 Private (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 0]])) (Rule [1] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("SetFunctions","sortValues") [],Comb FuncCall ("SetFunctions","set1") [Comb (FuncPartCall 1) ("Combinatorial","subset") [],Var 1]])),Func ("Combinatorial","splitSet") 1 Public (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TVar 0]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","[]") [],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude",":") [2,3]) (Let [(4,Comb FuncCall ("Combinatorial","splitSet") [Var 3]),(5,Comb FuncCall ("Combinatorial","splitSet._#selFP2#u") [Var 4]),(6,Comb FuncCall ("Combinatorial","splitSet._#selFP3#v") [Var 4])] (Comb FuncCall ("Prelude","?") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Var 2,Var 5],Var 6],Comb ConsCall ("Prelude","(,)") [Var 5,Comb ConsCall ("Prelude",":") [Var 2,Var 6]]]))])),Func ("Combinatorial","splitSet._#selFP2#u") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 43],TCons ("Prelude","[]") [TVar 43]]) (TCons ("Prelude","[]") [TVar 43])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("Combinatorial","splitSet._#selFP3#v") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 43],TCons ("Prelude","[]") [TVar 43]]) (TCons ("Prelude","[]") [TVar 43])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("Combinatorial","sizedSubset") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0]))) (Rule [1,2] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 1,Lit (Intc  0)]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Combinatorial","sizedSubset.aux.25") [Var 1,Var 2])])),Func ("Combinatorial","sizedSubset.aux.25") 2 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Prelude",":") [3,4]) (Comb FuncCall ("Prelude","?") [Comb ConsCall ("Prelude",":") [Var 3,Comb FuncCall ("Combinatorial","sizedSubset") [Comb FuncCall ("Prelude","-") [Var 1,Lit (Intc  1)],Var 4]],Comb FuncCall ("Combinatorial","sizedSubset") [Var 1,Var 4]])])),Func ("Combinatorial","partition") 1 Public (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 0]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [2,3]) (Comb FuncCall ("Combinatorial","partition.insert.33") [Var 2,Comb FuncCall ("Combinatorial","partition") [Var 3]])])),Func ("Combinatorial","partition.insert.33") 2 Private (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 0]]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 0]]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Var 1,Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude",":") [3,4]) (Comb FuncCall ("Prelude","?") [Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Var 1,Var 3],Var 4],Comb ConsCall ("Prelude",":") [Var 3,Comb FuncCall ("Combinatorial","partition.insert.33") [Var 1,Var 4]]])]))] []