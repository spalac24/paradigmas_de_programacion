Prog "ReadNumeric" ["Char","Prelude"] [] [Func ("ReadNumeric","readInt") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","Maybe") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Let [(2,Comb FuncCall ("Prelude","dropWhile") [Comb (FuncPartCall 1) ("Prelude","flip") [Comb (FuncPartCall 2) ("Prelude","==") [],Lit (Charc  ' ')],Var 1])] (Case  Rigid (Var 2) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("Prelude",":") [3,4]) (Let [(5,Var 3)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 5,Lit (Charc  '-')]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","maybe") [Comb ConsCall ("Prelude","Nothing") [],Comb (FuncPartCall 1) ("ReadNumeric","readInt._#lambda2") [],Comb FuncCall ("ReadNumeric","readNat") [Var 4]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("ReadNumeric","readNat") [Var 2])]))]))),Func ("ReadNumeric","readInt._#lambda2") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","Maybe") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Comb ConsCall ("Prelude","Just") [Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Prelude","negate") [Var 2],Var 3]])])),Func ("ReadNumeric","readNat") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","Maybe") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Comb FuncCall ("ReadNumeric","readNumPrefix") [Comb FuncCall ("Prelude","dropWhile") [Comb (FuncPartCall 1) ("Prelude","flip") [Comb (FuncPartCall 2) ("Prelude","==") [],Lit (Charc  ' ')],Var 1],Comb ConsCall ("Prelude","Nothing") [],Lit (Intc  10),Comb (FuncPartCall 1) ("Char","isDigit") [],Comb (FuncPartCall 1) ("Char","digitToInt") []])),Func ("ReadNumeric","readHex") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","Maybe") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Comb FuncCall ("ReadNumeric","readNumPrefix") [Comb FuncCall ("Prelude","dropWhile") [Comb (FuncPartCall 1) ("ReadNumeric","readHex._#lambda3") [],Var 1],Comb ConsCall ("Prelude","Nothing") [],Lit (Intc  16),Comb (FuncPartCall 1) ("Char","isHexDigit") [],Comb (FuncPartCall 1) ("Char","digitToInt") []])),Func ("ReadNumeric","readHex._#lambda3") 1 Private (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Comb FuncCall ("Prelude","==") [Var 1,Lit (Charc  ' ')])),Func ("ReadNumeric","readOct") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","Maybe") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Comb FuncCall ("ReadNumeric","readNumPrefix") [Comb FuncCall ("Prelude","dropWhile") [Comb (FuncPartCall 1) ("ReadNumeric","readOct._#lambda4") [],Var 1],Comb ConsCall ("Prelude","Nothing") [],Lit (Intc  8),Comb (FuncPartCall 1) ("Char","isOctDigit") [],Comb (FuncPartCall 1) ("Char","digitToInt") []])),Func ("ReadNumeric","readOct._#lambda4") 1 Private (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Comb FuncCall ("Prelude","==") [Var 1,Lit (Charc  ' ')])),Func ("ReadNumeric","readNumPrefix") 5 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","Maybe") [TCons ("Prelude","Int") []]) (FuncType (TCons ("Prelude","Int") []) (FuncType (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") [])) (FuncType (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Int") [])) (TCons ("Prelude","Maybe") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))) (Rule [1,2,3,4,5] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 2) [Branch (Pattern ("Prelude","Nothing") []) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("Prelude","Just") [6]) (Comb ConsCall ("Prelude","Just") [Comb ConsCall ("Prelude","(,)") [Var 6,Comb ConsCall ("Prelude","[]") []]])]),Branch (Pattern ("Prelude",":") [7,8]) (Case  Flex (Var 2) [Branch (Pattern ("Prelude","Just") [9]) (Case  Rigid (Comb FuncCall ("Prelude","apply") [Var 4,Var 7]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("ReadNumeric","readNumPrefix") [Var 8,Comb ConsCall ("Prelude","Just") [Comb FuncCall ("Prelude","+") [Comb FuncCall ("Prelude","*") [Var 3,Var 9],Comb FuncCall ("Prelude","apply") [Var 5,Var 7]]],Var 3,Var 4,Var 5]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","Just") [Comb ConsCall ("Prelude","(,)") [Var 9,Comb ConsCall ("Prelude",":") [Var 7,Var 8]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])]),Branch (Pattern ("Prelude","Nothing") []) (Case  Rigid (Comb FuncCall ("Prelude","apply") [Var 4,Var 7]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("ReadNumeric","readNumPrefix") [Var 8,Comb ConsCall ("Prelude","Just") [Comb FuncCall ("Prelude","apply") [Var 5,Var 7]],Var 3,Var 4,Var 5]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])]))] []