Prog "AllSolutions" ["Prelude","SearchTree"] [] [Func ("AllSolutions","getAllValues") 1 Public (FuncType (TVar 0) (TCons ("Prelude","IO") [TCons ("Prelude","[]") [TVar 0]])) (Rule [1] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("SearchTree","getSearchTree") [Var 1],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","return") [],Comb FuncCall ("SearchTree","allValuesDFS") []]])),Func ("AllSolutions","getOneValue") 1 Public (FuncType (TVar 0) (TCons ("Prelude","IO") [TCons ("Prelude","Maybe") [TVar 0]])) (Rule [1] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("SearchTree","getSearchTree") [Var 1],Comb (FuncPartCall 1) ("AllSolutions","getOneValue._#lambda1") []])),Func ("AllSolutions","getOneValue._#lambda1") 1 Private (FuncType (TCons ("SearchTree","SearchTree") [TVar 12]) (TCons ("Prelude","IO") [TCons ("Prelude","Maybe") [TVar 12]])) (Rule [1] (Let [(2,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("SearchTree","allValuesDFS") [],Var 1])] (Comb FuncCall ("Prelude","return") [Case  Rigid (Comb FuncCall ("Prelude","null") [Var 2]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","Just") [Comb FuncCall ("Prelude","head") [Var 2]])]]))),Func ("AllSolutions","getAllSolutions") 1 Public (FuncType (FuncType (TVar 0) (TCons ("Prelude","Success") [])) (TCons ("Prelude","IO") [TCons ("Prelude","[]") [TVar 0]])) (Rule [1] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("AllSolutions","getAllValues") [Free [2] (Comb ConsCall ("Prelude","(,)") [Var 2,Comb FuncCall ("Prelude","apply") [Var 1,Var 2]])],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","return") [],Comb (FuncPartCall 1) ("Prelude","map") [Comb (FuncPartCall 1) ("Prelude","fst") []]]])),Func ("AllSolutions","getOneSolution") 1 Public (FuncType (FuncType (TVar 0) (TCons ("Prelude","Success") [])) (TCons ("Prelude","IO") [TCons ("Prelude","Maybe") [TVar 0]])) (Rule [1] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("AllSolutions","getAllSolutions") [Var 1],Comb (FuncPartCall 1) ("AllSolutions","getOneSolution._#lambda2") []])),Func ("AllSolutions","getOneSolution._#lambda2") 1 Private (FuncType (TCons ("Prelude","[]") [TVar 42]) (TCons ("Prelude","IO") [TCons ("Prelude","Maybe") [TVar 42]])) (Rule [1] (Comb FuncCall ("Prelude","return") [Case  Rigid (Comb FuncCall ("Prelude","null") [Var 1]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","Just") [Comb FuncCall ("Prelude","head") [Var 1]])]])),Func ("AllSolutions","getAllFailures") 2 Public (FuncType (TVar 0) (FuncType (FuncType (TVar 0) (TCons ("Prelude","Success") [])) (TCons ("Prelude","IO") [TCons ("Prelude","[]") [TVar 0]]))) (Rule [1,2] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("AllSolutions","getAllValues") [Var 1],Comb (FuncPartCall 1) ("AllSolutions","getAllFailures._#lambda3") [Var 2]])),Func ("AllSolutions","getAllFailures._#lambda3") 2 Private (FuncType (FuncType (TVar 76) (TCons ("Prelude","Success") [])) (FuncType (TCons ("Prelude","[]") [TVar 76]) (TCons ("Prelude","IO") [TCons ("Prelude","[]") [TVar 76]]))) (Rule [1,2] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","mapIO") [Comb (FuncPartCall 1) ("AllSolutions","naf") [Var 1]],Var 2],Comb (FuncPartCall 1) ("AllSolutions","getAllFailures._#lambda3._#lambda4") []])),Func ("AllSolutions","getAllFailures._#lambda3._#lambda4") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 76]]) (TCons ("Prelude","IO") [TCons ("Prelude","[]") [TVar 76]])) (Rule [1] (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Prelude","return") [],Comb FuncCall ("Prelude","concat") [Var 1]])),Func ("AllSolutions","naf") 2 Private (FuncType (FuncType (TVar 0) (TCons ("Prelude","Success") [])) (FuncType (TVar 0) (TCons ("Prelude","IO") [TCons ("Prelude","[]") [TVar 0]]))) (Rule [1,2] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("AllSolutions","getOneSolution") [Comb (FuncPartCall 1) ("AllSolutions","lambda") [Var 1,Var 2]],Comb (FuncPartCall 1) ("AllSolutions","returner") [Var 2]])),Func ("AllSolutions","lambda") 3 Private (FuncType (FuncType (TVar 0) (TCons ("Prelude","Success") [])) (FuncType (TVar 0) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","Success") [])))) (Rule [1,2,3] (Comb FuncCall ("Prelude","apply") [Var 1,Var 2])),Func ("AllSolutions","returner") 2 Private (FuncType (TVar 0) (FuncType (TCons ("Prelude","Maybe") [TVar 1]) (TCons ("Prelude","IO") [TCons ("Prelude","[]") [TVar 0]]))) (Rule [1,2] (Comb FuncCall ("Prelude","return") [Comb FuncCall ("Prelude","maybe") [Comb ConsCall ("Prelude",":") [Var 1,Comb ConsCall ("Prelude","[]") []],Comb (FuncPartCall 1) ("Prelude","const") [Comb ConsCall ("Prelude","[]") []],Var 2]]))] []