CurryProg "NamedSocket"
 ["Prelude","System","IO","Socket","CPNS"]
 [CType ("NamedSocket","Socket") Public [] [CCons ("NamedSocket","NamedSocket") 2 Private [CTCons ("Prelude","String") [],CTCons ("Socket","Socket") []]]]
 [CFunc ("NamedSocket","listenOn") 1 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","IO") [CTCons ("NamedSocket","Socket") []])) (CRules CFlex [CRule [CPVar (0,"socketname")] [(CSymbol ("Prelude","success"),CDoExpr [CSPat (CPComb ("Prelude","(,)") [CPVar (1,"port"),CPVar (2,"socket")]) (CSymbol ("Socket","listenOnFresh")),CSExpr (CApply (CApply (CApply (CSymbol ("CPNS","registerPort")) (CVar (0,"socketname"))) (CVar (1,"port"))) (CLit (CIntc 0))),CSExpr (CApply (CSymbol ("Prelude","return")) (CApply (CApply (CSymbol ("NamedSocket","NamedSocket")) (CVar (0,"socketname"))) (CVar (2,"socket"))))])] []]),
  CFunc ("NamedSocket","socketAccept") 1 Public (CFuncType (CTCons ("NamedSocket","Socket") []) (CTCons ("Prelude","IO") [CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("IO","Handle") []]])) (CRules CFlex [CRule [CPComb ("NamedSocket","NamedSocket") [CPVar (0,"_"),CPVar (1,"socket")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Socket","socketAccept")) (CVar (1,"socket")))] []]),
  CFunc ("NamedSocket","waitForSocketAccept") 1 Public (CFuncType (CTCons ("NamedSocket","Socket") []) (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("Prelude","IO") [CTCons ("Prelude","Maybe") [CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("IO","Handle") []]]]))) (CRules CFlex [CRule [CPComb ("NamedSocket","NamedSocket") [CPVar (0,"_"),CPVar (1,"socket")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Socket","waitForSocketAccept")) (CVar (1,"socket")))] []]),
  CFunc ("NamedSocket","sClose") 1 Public (CFuncType (CTCons ("NamedSocket","Socket") []) (CTCons ("Prelude","IO") [CTCons ("Prelude","()") []])) (CRules CFlex [CRule [CPComb ("NamedSocket","NamedSocket") [CPVar (0,"socketname"),CPVar (1,"socket")]] [(CSymbol ("Prelude","success"),CDoExpr [CSExpr (CApply (CSymbol ("Socket","sClose")) (CVar (1,"socket"))),CSExpr (CApply (CSymbol ("CPNS","unregisterPort")) (CVar (0,"socketname")))])] []]),
  CFunc ("NamedSocket","socketName") 1 Public (CFuncType (CTCons ("NamedSocket","Socket") []) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CRules CFlex [CRule [CPComb ("NamedSocket","NamedSocket") [CPVar (0,"socketname"),CPVar (1,"_")]] [(CSymbol ("Prelude","success"),CVar (0,"socketname"))] []]),
  CFunc ("NamedSocket","connectToSocketRepeat") 4 Public (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Prelude","IO") [CTVar (0,"a")]) (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","IO") [CTCons ("Prelude","Maybe") [CTCons ("IO","Handle") []]]))))) (CRules CFlex [CRule [CPVar (0,"waittime"),CPVar (1,"action"),CPVar (2,"retries"),CPVar (3,"nameAtHost")] [(CSymbol ("Prelude","success"),CDoExpr [CSLet [CLocalPat (CPComb ("Prelude","(,)") [CPVar (5,"name"),CPVar (6,"atHost")]) (CApply (CApply (CSymbol ("Prelude","break")) (CLambda [CPVar (8,"x0")] (CApply (CApply (CSymbol ("Prelude","==")) (CVar (8,"x0"))) (CLit (CCharc '@'))))) (CVar (3,"nameAtHost"))) [],CLocalPat (CPVar (7,"host")) (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (6,"atHost"))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'h'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CSymbol ("Prelude","[]")))))))))))) (CApply (CSymbol ("Prelude","tail")) (CVar (6,"atHost")))) []],CSPat (CPVar (9,"alive")) (CApply (CApply (CSymbol ("CPNS","cpnsAlive")) (CVar (0,"waittime"))) (CVar (7,"host"))),CSExpr (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CSymbol ("Prelude","not")) (CVar (9,"alive")))) (CVar (4,"tryAgain"))) (CDoExpr [CSPat (CPComb ("Prelude","(,)") [CPVar (10,"snr"),CPVar (11,"_")]) (CApply (CApply (CSymbol ("CPNS","getPortInfo")) (CVar (5,"name"))) (CVar (7,"host"))),CSExpr (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (10,"snr"))) (CLit (CIntc 0)))) (CVar (4,"tryAgain"))) (CApply (CApply (CSymbol ("Prelude",">>=")) (CApply (CApply (CSymbol ("Socket","connectToSocket")) (CVar (7,"host"))) (CVar (10,"snr")))) (CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Prelude","return"))) (CSymbol ("Prelude","Just")))))]))])] [CLocalPat (CPVar (4,"tryAgain")) (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (2,"retries"))) (CLit (CIntc 0)))) (CApply (CSymbol ("Prelude","return")) (CSymbol ("Prelude","Nothing")))) (CDoExpr [CSExpr (CVar (1,"action")),CSExpr (CApply (CSymbol ("System","sleep")) (CApply (CSymbol ("NamedSocket","ms2s")) (CVar (0,"waittime")))),CSExpr (CApply (CApply (CApply (CApply (CSymbol ("NamedSocket","connectToSocketRepeat")) (CVar (0,"waittime"))) (CVar (1,"action"))) (CApply (CSymbol ("NamedSocket","decr")) (CVar (2,"retries")))) (CVar (3,"nameAtHost")))])) [],CLocalFunc (CFunc ("NamedSocket","ms2s") 1 Private (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("Prelude","Int") [])) (CRules CFlex [CRule [CPVar (5,"n")] [(CSymbol ("Prelude","success"),CLetDecl [CLocalPat (CPVar (6,"mn")) (CApply (CApply (CSymbol ("Prelude","div")) (CVar (5,"n"))) (CLit (CIntc 1000))) []] (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (6,"mn"))) (CLit (CIntc 0)))) (CLit (CIntc 1))) (CVar (6,"mn"))))] []])),CLocalFunc (CFunc ("NamedSocket","decr") 1 Private (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("Prelude","Int") [])) (CRules CFlex [CRule [CPVar (5,"n")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","<")) (CVar (5,"n"))) (CLit (CIntc 0)))) (CVar (5,"n"))) (CApply (CApply (CSymbol ("Prelude","-")) (CVar (5,"n"))) (CLit (CIntc 1))))] []]))]]),
  CFunc ("NamedSocket","connectToSocketWait") 1 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","IO") [CTCons ("IO","Handle") []])) (CRules CFlex [CRule [CPVar (0,"nameAtHost")] [(CSymbol ("Prelude","success"),CDoExpr [CSPat (CPComb ("Prelude","Just") [CPVar (1,"hdl")]) (CApply (CApply (CApply (CApply (CSymbol ("NamedSocket","connectToSocketRepeat")) (CLit (CIntc 1000))) (CSymbol ("Prelude","done"))) (CApply (CSymbol ("Prelude","negate")) (CLit (CIntc 1)))) (CVar (0,"nameAtHost"))),CSExpr (CApply (CSymbol ("Prelude","return")) (CVar (1,"hdl")))])] []]),
  CFunc ("NamedSocket","connectToSocket") 1 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","IO") [CTCons ("IO","Handle") []])) (CRules CFlex [CRule [CPVar (0,"nameAtHost")] [(CSymbol ("Prelude","success"),CDoExpr [CSLet [CLocalPat (CPComb ("Prelude","(,)") [CPVar (1,"name"),CPVar (2,"atHost")]) (CApply (CApply (CSymbol ("Prelude","break")) (CLambda [CPVar (4,"x0")] (CApply (CApply (CSymbol ("Prelude","==")) (CVar (4,"x0"))) (CLit (CCharc '@'))))) (CVar (0,"nameAtHost"))) [],CLocalPat (CPVar (3,"host")) (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (2,"atHost"))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'h'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CSymbol ("Prelude","[]")))))))))))) (CApply (CSymbol ("Prelude","tail")) (CVar (2,"atHost")))) []],CSPat (CPComb ("Prelude","(,)") [CPVar (5,"snr"),CPVar (6,"_")]) (CApply (CApply (CSymbol ("CPNS","getPortInfo")) (CVar (1,"name"))) (CVar (3,"host"))),CSExpr (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (5,"snr"))) (CLit (CIntc 0)))) (CApply (CSymbol ("Prelude","error")) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'T'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'S'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'k'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ':'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'S'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'k'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '"'))) (CSymbol ("Prelude","[]")))))))))))))))))))))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (1,"name"))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '@'))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (3,"host"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '"'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'g'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '!'))) (CSymbol ("Prelude","[]")))))))))))))))))))))))))))) (CSymbol ("Prelude","done"))),CSExpr (CApply (CApply (CSymbol ("Socket","connectToSocket")) (CVar (3,"host"))) (CVar (5,"snr")))])] []])]
 []
