CurryProg "WUI"
 ["Prelude","HTML","Read","List","Maybe","Char","ReadShowTerm"]
 [CType ("WUI","WuiState") Private [] [CCons ("WUI","Ref") 1 Private [CTCons ("HTML","CgiRef") []],CCons ("WUI","Hidden") 1 Private [CTCons ("Prelude","String") []],CCons ("WUI","CompNode") 1 Private [CTCons ("Prelude","[]") [CTCons ("WUI","WuiState") []]],CCons ("WUI","AltNode") 1 Private [CTCons ("Prelude","(,)") [CTCons ("Prelude","Int") [],CTCons ("WUI","WuiState") []]]],
  CTypeSyn ("WUI","Rendering") Public [] (CFuncType (CTCons ("Prelude","[]") [CTCons ("HTML","HtmlExp") []]) (CTCons ("HTML","HtmlExp") [])),
  CTypeSyn ("WUI","WuiParams") Private [(0,"a")] (CTCons ("Prelude","(,,)") [CTCons ("WUI","Rendering") [],CTCons ("Prelude","String") [],CFuncType (CTVar (0,"a")) (CTCons ("Prelude","Bool") [])]),
  CTypeSyn ("WUI","HtmlState") Private [] (CTCons ("Prelude","(,)") [CTCons ("HTML","HtmlExp") [],CTCons ("WUI","WuiState") []]),
  CType ("WUI","WuiHandler") Public [] [CCons ("WUI","WHandler") 1 Private [CTCons ("HTML","HtmlHandler") []]],
  CType ("WUI","WuiSpec") Public [(0,"a")] [CCons ("WUI","WuiSpec") 3 Public [CTCons ("WUI","WuiParams") [CTVar (0,"a")],CFuncType (CTCons ("WUI","WuiParams") [CTVar (0,"a")]) (CFuncType (CTVar (0,"a")) (CTCons ("WUI","HtmlState") [])),CFuncType (CTCons ("WUI","WuiParams") [CTVar (0,"a")]) (CFuncType (CTCons ("HTML","CgiEnv") []) (CFuncType (CTCons ("WUI","WuiState") []) (CTCons ("Prelude","(,)") [CTCons ("Prelude","Maybe") [CTVar (0,"a")],CTCons ("WUI","HtmlState") []])))]],
  CType ("WUI","WTree") Public [(0,"a")] [CCons ("WUI","WLeaf") 1 Public [CTVar (0,"a")],CCons ("WUI","WNode") 1 Public [CTCons ("Prelude","[]") [CTCons ("WUI","WTree") [CTVar (0,"a")]]]]]
 [CFunc ("WUI","cgiRef2state") 1 Private (CFuncType (CTCons ("HTML","CgiRef") []) (CTCons ("WUI","WuiState") [])) (CRules CFlex [CRule [CPVar (0,"cr")] [(CSymbol ("Prelude","success"),CApply (CSymbol ("WUI","Ref")) (CVar (0,"cr")))] []]),
  CFunc ("WUI","state2cgiRef") 1 Private (CFuncType (CTCons ("WUI","WuiState") []) (CTCons ("HTML","CgiRef") [])) (CRules CFlex [CRule [CPComb ("WUI","Ref") [CPVar (0,"cr")]] [(CSymbol ("Prelude","success"),CVar (0,"cr"))] []]),
  CFunc ("WUI","value2state") 1 Private (CFuncType (CTVar (0,"a")) (CTCons ("WUI","WuiState") [])) (CRules CFlex [CRule [CPVar (0,"v")] [(CSymbol ("Prelude","success"),CApply (CSymbol ("WUI","Hidden")) (CApply (CSymbol ("ReadShowTerm","showQTerm")) (CVar (0,"v"))))] []]),
  CFunc ("WUI","state2value") 1 Private (CFuncType (CTCons ("WUI","WuiState") []) (CTVar (0,"a"))) (CRules CFlex [CRule [CPComb ("WUI","Hidden") [CPVar (0,"s")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("ReadShowTerm","readQTerm")) (CVar (0,"s")))] []]),
  CFunc ("WUI","states2state") 1 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("WUI","WuiState") []]) (CTCons ("WUI","WuiState") [])) (CRules CFlex [CRule [CPVar (0,"sts")] [(CSymbol ("Prelude","success"),CApply (CSymbol ("WUI","CompNode")) (CVar (0,"sts")))] []]),
  CFunc ("WUI","state2states") 1 Private (CFuncType (CTCons ("WUI","WuiState") []) (CTCons ("Prelude","[]") [CTCons ("WUI","WuiState") []])) (CRules CFlex [CRule [CPComb ("WUI","CompNode") [CPVar (0,"sts")]] [(CSymbol ("Prelude","success"),CVar (0,"sts"))] []]),
  CFunc ("WUI","altstate2state") 1 Private (CFuncType (CTCons ("Prelude","(,)") [CTCons ("Prelude","Int") [],CTCons ("WUI","WuiState") []]) (CTCons ("WUI","WuiState") [])) (CRules CFlex [CRule [CPVar (0,"alt")] [(CSymbol ("Prelude","success"),CApply (CSymbol ("WUI","AltNode")) (CVar (0,"alt")))] []]),
  CFunc ("WUI","state2altstate") 1 Private (CFuncType (CTCons ("WUI","WuiState") []) (CTCons ("Prelude","(,)") [CTCons ("Prelude","Int") [],CTCons ("WUI","WuiState") []])) (CRules CFlex [CRule [CPComb ("WUI","AltNode") [CPVar (0,"alt")]] [(CSymbol ("Prelude","success"),CVar (0,"alt"))] []]),
  CFunc ("WUI","renderOf") 1 Private (CFuncType (CTCons ("Prelude","(,,)") [CTVar (0,"a"),CTVar (1,"b"),CTVar (2,"c")]) (CTVar (0,"a"))) (CRules CFlex [CRule [CPComb ("Prelude","(,,)") [CPVar (0,"render"),CPVar (1,"_"),CPVar (2,"_")]] [(CSymbol ("Prelude","success"),CVar (0,"render"))] []]),
  CFunc ("WUI","errorOf") 1 Private (CFuncType (CTCons ("Prelude","(,,)") [CTVar (0,"a"),CTVar (1,"b"),CTVar (2,"c")]) (CTVar (1,"b"))) (CRules CFlex [CRule [CPComb ("Prelude","(,,)") [CPVar (0,"_"),CPVar (1,"err"),CPVar (2,"_")]] [(CSymbol ("Prelude","success"),CVar (1,"err"))] []]),
  CFunc ("WUI","conditionOf") 1 Private (CFuncType (CTCons ("Prelude","(,,)") [CTVar (0,"a"),CTVar (1,"b"),CTVar (2,"c")]) (CTVar (2,"c"))) (CRules CFlex [CRule [CPComb ("Prelude","(,,)") [CPVar (0,"_"),CPVar (1,"_"),CPVar (2,"c")]] [(CSymbol ("Prelude","success"),CVar (2,"c"))] []]),
  CFunc ("WUI","wuiHandler2button") 2 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("WUI","WuiHandler") []) (CTCons ("HTML","HtmlExp") []))) (CRules CFlex [CRule [CPVar (0,"title"),CPComb ("WUI","WHandler") [CPVar (1,"handler")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("HTML","button")) (CVar (0,"title"))) (CVar (1,"handler")))] []]),
  CFunc ("WUI","withRendering") 2 Public (CFuncType (CTCons ("WUI","WuiSpec") [CTVar (0,"a")]) (CFuncType (CFuncType (CTCons ("Prelude","[]") [CTCons ("HTML","HtmlExp") []]) (CTCons ("HTML","HtmlExp") [])) (CTCons ("WUI","WuiSpec") [CTVar (0,"a")]))) (CRules CFlex [CRule [CPComb ("WUI","WuiSpec") [CPComb ("Prelude","(,,)") [CPVar (0,"_"),CPVar (1,"errmsg"),CPVar (2,"legal")],CPVar (3,"showhtml"),CPVar (4,"readvalue")],CPVar (5,"render")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("WUI","WuiSpec")) (CApply (CApply (CApply (CSymbol ("Prelude","(,,)")) (CVar (5,"render"))) (CVar (1,"errmsg"))) (CVar (2,"legal")))) (CVar (3,"showhtml"))) (CVar (4,"readvalue")))] []]),
  CFunc ("WUI","withError") 2 Public (CFuncType (CTCons ("WUI","WuiSpec") [CTVar (0,"a")]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("WUI","WuiSpec") [CTVar (0,"a")]))) (CRules CFlex [CRule [CPComb ("WUI","WuiSpec") [CPComb ("Prelude","(,,)") [CPVar (0,"render"),CPVar (1,"_"),CPVar (2,"legal")],CPVar (3,"showhtml"),CPVar (4,"readvalue")],CPVar (5,"errmsg")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("WUI","WuiSpec")) (CApply (CApply (CApply (CSymbol ("Prelude","(,,)")) (CVar (0,"render"))) (CVar (5,"errmsg"))) (CVar (2,"legal")))) (CVar (3,"showhtml"))) (CVar (4,"readvalue")))] []]),
  CFunc ("WUI","withCondition") 2 Public (CFuncType (CTCons ("WUI","WuiSpec") [CTVar (0,"a")]) (CFuncType (CFuncType (CTVar (0,"a")) (CTCons ("Prelude","Bool") [])) (CTCons ("WUI","WuiSpec") [CTVar (0,"a")]))) (CRules CFlex [CRule [CPComb ("WUI","WuiSpec") [CPComb ("Prelude","(,,)") [CPVar (0,"render"),CPVar (1,"errmsg"),CPVar (2,"_")],CPVar (3,"showhtml"),CPVar (4,"readvalue")],CPVar (5,"legal")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("WUI","WuiSpec")) (CApply (CApply (CApply (CSymbol ("Prelude","(,,)")) (CVar (0,"render"))) (CVar (1,"errmsg"))) (CVar (5,"legal")))) (CVar (3,"showhtml"))) (CVar (4,"readvalue")))] []]),
  CFunc ("WUI","transformWSpec") 2 Public (CFuncType (CTCons ("Prelude","(,)") [CFuncType (CTVar (0,"a")) (CTVar (1,"b")),CFuncType (CTVar (1,"b")) (CTVar (0,"a"))]) (CFuncType (CTCons ("WUI","WuiSpec") [CTVar (0,"a")]) (CTCons ("WUI","WuiSpec") [CTVar (1,"b")]))) (CRules CFlex [CRule [CPComb ("Prelude","(,)") [CPVar (0,"a2b"),CPVar (1,"b2a")],CPComb ("WUI","WuiSpec") [CPVar (2,"wparamsa"),CPVar (3,"showhtmla"),CPVar (4,"readvaluea")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("WUI","WuiSpec")) (CApply (CApply (CSymbol ("WUI","transParam")) (CVar (1,"b2a"))) (CVar (2,"wparamsa")))) (CLambda [CPVar (5,"wparamsb"),CPVar (6,"b")] (CApply (CApply (CVar (3,"showhtmla")) (CApply (CApply (CSymbol ("WUI","transParam")) (CVar (0,"a2b"))) (CVar (5,"wparamsb")))) (CApply (CVar (1,"b2a")) (CVar (6,"b")))))) (CLambda [CPVar (7,"wparamsb"),CPVar (8,"env"),CPVar (9,"wst")] (CLetDecl [CLocalPat (CPComb ("Prelude","(,)") [CPVar (10,"mba"),CPVar (11,"errv")]) (CApply (CApply (CApply (CVar (4,"readvaluea")) (CApply (CApply (CSymbol ("WUI","transParam")) (CVar (0,"a2b"))) (CVar (7,"wparamsb")))) (CVar (8,"env"))) (CVar (9,"wst"))) []] (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CApply (CSymbol ("Prelude","maybe")) (CSymbol ("Prelude","Nothing"))) (CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Prelude","Just"))) (CVar (0,"a2b")))) (CVar (10,"mba")))) (CVar (11,"errv"))))))] [CLocalFunc (CFunc ("WUI","transParam") 2 Private (CFuncType (CFuncType (CTVar (0,"a")) (CTVar (1,"b"))) (CFuncType (CTCons ("Prelude","(,,)") [CFuncType (CTCons ("Prelude","[]") [CTCons ("HTML","HtmlExp") []]) (CTCons ("HTML","HtmlExp") []),CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CFuncType (CTVar (1,"b")) (CTCons ("Prelude","Bool") [])]) (CTCons ("Prelude","(,,)") [CFuncType (CTCons ("Prelude","[]") [CTCons ("HTML","HtmlExp") []]) (CTCons ("HTML","HtmlExp") []),CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CFuncType (CTVar (0,"a")) (CTCons ("Prelude","Bool") [])]))) (CRules CFlex [CRule [CPVar (5,"toa"),CPComb ("Prelude","(,,)") [CPVar (6,"render"),CPVar (7,"errmsg"),CPVar (8,"legal")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","(,,)")) (CVar (6,"render"))) (CVar (7,"errmsg"))) (CApply (CApply (CSymbol ("Prelude",".")) (CVar (8,"legal"))) (CVar (5,"toa"))))] []]))]]),
  CFunc ("WUI","wHidden") 0 Public (CTCons ("WUI","WuiSpec") [CTVar (0,"a")]) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("WUI","WuiSpec")) (CApply (CApply (CApply (CSymbol ("Prelude","(,,)")) (CSymbol ("Prelude","head"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '?'))) (CSymbol ("Prelude","[]")))) (CApply (CSymbol ("Prelude","const")) (CSymbol ("Prelude","True"))))) (CLambda [CPVar (0,"_"),CPVar (1,"v")] (CApply (CApply (CSymbol ("Prelude","(,)")) (CSymbol ("HTML","hempty"))) (CApply (CSymbol ("WUI","value2state")) (CVar (1,"v")))))) (CLambda [CPVar (2,"_"),CPVar (3,"_"),CPVar (4,"s")] (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CSymbol ("Prelude","Just")) (CApply (CSymbol ("WUI","state2value")) (CVar (4,"s"))))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CSymbol ("HTML","hempty"))) (CVar (4,"s"))))))] []]),
  CFunc ("WUI","wConstant") 1 Public (CFuncType (CFuncType (CTVar (0,"a")) (CTCons ("HTML","HtmlExp") [])) (CTCons ("WUI","WuiSpec") [CTVar (0,"a")])) (CRules CFlex [CRule [CPVar (0,"showhtml")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("WUI","WuiSpec")) (CApply (CApply (CApply (CSymbol ("Prelude","(,,)")) (CSymbol ("Prelude","head"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '?'))) (CSymbol ("Prelude","[]")))) (CApply (CSymbol ("Prelude","const")) (CSymbol ("Prelude","True"))))) (CLambda [CPVar (1,"wparams"),CPVar (2,"v")] (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("WUI","renderOf")) (CVar (1,"wparams"))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CVar (0,"showhtml")) (CVar (2,"v")))) (CSymbol ("Prelude","[]"))))) (CApply (CSymbol ("WUI","value2state")) (CVar (2,"v")))))) (CLambda [CPComb ("Prelude","(,,)") [CPVar (3,"render"),CPVar (4,"_"),CPVar (5,"_")],CPVar (6,"_"),CPVar (7,"s")] (CLetDecl [CLocalPat (CPVar (8,"v")) (CApply (CSymbol ("WUI","state2value")) (CVar (7,"s"))) []] (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CSymbol ("Prelude","Just")) (CVar (8,"v")))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CVar (3,"render")) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CVar (0,"showhtml")) (CVar (8,"v")))) (CSymbol ("Prelude","[]"))))) (CVar (7,"s")))))))] []]),
  CFunc ("WUI","wInt") 0 Public (CTCons ("WUI","WuiSpec") [CTCons ("Prelude","Int") []]) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("WUI","WuiSpec")) (CApply (CApply (CApply (CSymbol ("Prelude","(,,)")) (CSymbol ("Prelude","head"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'I'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'g'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'g'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ':'))) (CSymbol ("Prelude","[]"))))))))))))))))))) (CApply (CSymbol ("Prelude","const")) (CSymbol ("Prelude","True"))))) (CLambda [CPVar (0,"wparams"),CPVar (1,"v")] (CApply (CApply (CSymbol ("WUI","intWidget")) (CApply (CSymbol ("WUI","renderOf")) (CVar (0,"wparams")))) (CApply (CSymbol ("Prelude","show")) (CVar (1,"v")))))) (CLambda [CPComb ("Prelude","(,,)") [CPVar (2,"render"),CPVar (3,"errmsg"),CPVar (4,"legal")],CPVar (5,"env"),CPVar (6,"s")] (CLetDecl [CLocalPat (CPVar (7,"input")) (CApply (CVar (5,"env")) (CApply (CSymbol ("WUI","state2cgiRef")) (CVar (6,"s")))) [],CLocalPat (CPVar (8,"renderr")) (CApply (CApply (CSymbol ("WUI","renderError")) (CVar (2,"render"))) (CVar (3,"errmsg"))) []] (CApply (CApply (CApply (CSymbol ("Prelude","maybe")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CSymbol ("Prelude","Nothing"))) (CApply (CApply (CSymbol ("WUI","intWidget")) (CVar (8,"renderr"))) (CVar (7,"input"))))) (CLambda [CPVar (9,"v")] (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CVar (4,"legal")) (CVar (9,"v")))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CSymbol ("Prelude","Just")) (CVar (9,"v")))) (CApply (CApply (CSymbol ("WUI","intWidget")) (CVar (2,"render"))) (CVar (7,"input"))))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CSymbol ("Prelude","Nothing"))) (CApply (CApply (CSymbol ("WUI","intWidget")) (CVar (8,"renderr"))) (CVar (7,"input"))))))) (CApply (CSymbol ("WUI","readMaybeInt")) (CApply (CSymbol ("WUI","stripSpaces")) (CVar (7,"input"))))))))] [CLocalFunc (CFunc ("WUI","intWidget") 2 Private (CFuncType (CFuncType (CTCons ("Prelude","[]") [CTCons ("HTML","HtmlExp") []]) (CTVar (0,"a"))) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","(,)") [CTVar (0,"a"),CTCons ("WUI","WuiState") []]))) (CRules CFlex [CRule [CPVar (0,"render"),CPVar (1,"s")] [(CSymbol ("Prelude","success"),CLetDecl [CLocalVar (2,"ref")] (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CVar (0,"render")) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("HTML","addAttr")) (CApply (CApply (CSymbol ("HTML","textfield")) (CVar (2,"ref"))) (CVar (1,"s")))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'z'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]"))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '6'))) (CSymbol ("Prelude","[]")))))) (CSymbol ("Prelude","[]"))))) (CApply (CSymbol ("WUI","cgiRef2state")) (CVar (2,"ref")))))] []]))]]),
  CFunc ("WUI","stripSpaces") 0 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Prelude","reverse"))) (CApply (CApply (CSymbol ("Prelude",".")) (CApply (CSymbol ("Prelude","dropWhile")) (CSymbol ("Char","isSpace")))) (CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Prelude","reverse"))) (CApply (CSymbol ("Prelude","dropWhile")) (CSymbol ("Char","isSpace"))))))] []]),
  CFunc ("WUI","readMaybeInt") 1 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","Maybe") [CTCons ("Prelude","Int") []])) (CRules CFlex [CRule [CPComb ("Prelude","[]") []] [(CSymbol ("Prelude","success"),CSymbol ("Prelude","Nothing"))] [],CRule [CPComb ("Prelude",":") [CPVar (0,"v"),CPVar (1,"s")]] [(CApply (CApply (CSymbol ("Prelude","==")) (CVar (0,"v"))) (CLit (CCharc '-')),CApply (CApply (CApply (CSymbol ("Prelude","maybe")) (CSymbol ("Prelude","Nothing"))) (CLambda [CPVar (2,"i")] (CApply (CSymbol ("Prelude","Just")) (CApply (CSymbol ("Prelude","negate")) (CVar (2,"i")))))) (CApply (CApply (CSymbol ("WUI","acc")) (CLit (CIntc 0))) (CVar (1,"s")))),(CApply (CSymbol ("Char","isDigit")) (CVar (0,"v")),CApply (CApply (CSymbol ("WUI","acc")) (CLit (CIntc 0))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (0,"v"))) (CVar (1,"s")))),(CSymbol ("Prelude","otherwise"),CSymbol ("Prelude","Nothing"))] [CLocalFunc (CFunc ("WUI","acc") 2 Private (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","Maybe") [CTCons ("Prelude","Int") []]))) (CRules CFlex [CRule [CPVar (2,"n"),CPComb ("Prelude","[]") []] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Prelude","Just")) (CVar (2,"n")))] [],CRule [CPVar (3,"n"),CPComb ("Prelude",":") [CPVar (4,"c"),CPVar (5,"cs")]] [(CApply (CSymbol ("Char","isDigit")) (CVar (4,"c")),CApply (CApply (CSymbol ("WUI","acc")) (CApply (CApply (CSymbol ("Prelude","-")) (CApply (CApply (CSymbol ("Prelude","+")) (CApply (CApply (CSymbol ("Prelude","*")) (CLit (CIntc 10))) (CVar (3,"n")))) (CApply (CSymbol ("Prelude","ord")) (CVar (4,"c"))))) (CApply (CSymbol ("Prelude","ord")) (CLit (CCharc '0'))))) (CVar (5,"cs"))),(CSymbol ("Prelude","otherwise"),CSymbol ("Prelude","Nothing"))] []]))]]),
  CFunc ("WUI","checkLegalInput") 3 Private (CFuncType (CTCons ("Prelude","(,,)") [CFuncType (CTCons ("Prelude","[]") [CTCons ("HTML","HtmlExp") []]) (CTCons ("HTML","HtmlExp") []),CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CFuncType (CTVar (0,"a")) (CTCons ("Prelude","Bool") [])]) (CFuncType (CFuncType (CFuncType (CTCons ("Prelude","[]") [CTCons ("HTML","HtmlExp") []]) (CTCons ("HTML","HtmlExp") [])) (CFuncType (CTVar (0,"a")) (CTCons ("Prelude","(,)") [CTCons ("HTML","HtmlExp") [],CTCons ("WUI","WuiState") []]))) (CFuncType (CTVar (0,"a")) (CTCons ("Prelude","(,)") [CTCons ("Prelude","Maybe") [CTVar (0,"a")],CTCons ("Prelude","(,)") [CTCons ("HTML","HtmlExp") [],CTCons ("WUI","WuiState") []]])))) (CRules CFlex [CRule [CPComb ("Prelude","(,,)") [CPVar (0,"render"),CPVar (1,"errmsg"),CPVar (2,"legal")],CPVar (3,"value2widget"),CPVar (4,"value")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CVar (2,"legal")) (CVar (4,"value")))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CSymbol ("Prelude","Just")) (CVar (4,"value")))) (CApply (CApply (CVar (3,"value2widget")) (CVar (0,"render"))) (CVar (4,"value"))))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CSymbol ("Prelude","Nothing"))) (CApply (CApply (CVar (3,"value2widget")) (CApply (CApply (CSymbol ("WUI","renderError")) (CVar (0,"render"))) (CVar (1,"errmsg")))) (CVar (4,"value")))))] []]),
  CFunc ("WUI","filterStringInput") 0 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CSymbol ("WUI","removeCRs"))] []]),
  CFunc ("WUI","removeCRs") 1 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CRules CFlex [CRule [CPComb ("Prelude","[]") []] [(CSymbol ("Prelude","success"),CSymbol ("Prelude","[]"))] [],CRule [CPComb ("Prelude",":") [CPVar (0,"c"),CPComb ("Prelude","[]") []]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",":")) (CVar (0,"c"))) (CSymbol ("Prelude","[]")))] [],CRule [CPComb ("Prelude",":") [CPVar (1,"c1"),CPComb ("Prelude",":") [CPVar (2,"c2"),CPVar (3,"cs")]]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","&&")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (1,"c1"))) (CLit (CCharc '\r')))) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (2,"c2"))) (CLit (CCharc '\n'))))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CApply (CSymbol ("WUI","removeCRs")) (CVar (3,"cs"))))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (1,"c1"))) (CApply (CSymbol ("WUI","removeCRs")) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (2,"c2"))) (CVar (3,"cs"))))))] []]),
  CFunc ("WUI","wString") 0 Public (CTCons ("WUI","WuiSpec") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("WUI","wStringAttrs")) (CSymbol ("Prelude","[]")))] []]),
  CFunc ("WUI","wStringSize") 1 Public (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("WUI","WuiSpec") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]])) (CRules CFlex [CRule [CPVar (0,"size")] [(CSymbol ("Prelude","success"),CApply (CSymbol ("WUI","wStringAttrs")) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'z'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]"))))))) (CApply (CSymbol ("Prelude","show")) (CVar (0,"size"))))) (CSymbol ("Prelude","[]"))))] []]),
  CFunc ("WUI","wStringAttrs") 1 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]]) (CTCons ("WUI","WuiSpec") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]])) (CRules CFlex [CRule [CPVar (0,"attrs")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("WUI","WuiSpec")) (CApply (CApply (CApply (CSymbol ("Prelude","(,,)")) (CSymbol ("Prelude","head"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '?'))) (CSymbol ("Prelude","[]")))) (CApply (CSymbol ("Prelude","const")) (CSymbol ("Prelude","True"))))) (CLambda [CPVar (1,"wparams"),CPVar (2,"v")] (CApply (CApply (CSymbol ("WUI","stringWidget")) (CApply (CSymbol ("WUI","renderOf")) (CVar (1,"wparams")))) (CVar (2,"v"))))) (CLambda [CPVar (3,"wparams"),CPVar (4,"env"),CPVar (5,"s")] (CApply (CApply (CApply (CSymbol ("WUI","checkLegalInput")) (CVar (3,"wparams"))) (CSymbol ("WUI","stringWidget"))) (CApply (CSymbol ("WUI","filterStringInput")) (CApply (CVar (4,"env")) (CApply (CSymbol ("WUI","state2cgiRef")) (CVar (5,"s"))))))))] [CLocalFunc (CFunc ("WUI","stringWidget") 2 Private (CFuncType (CFuncType (CTCons ("Prelude","[]") [CTCons ("HTML","HtmlExp") []]) (CTVar (0,"a"))) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","(,)") [CTVar (0,"a"),CTCons ("WUI","WuiState") []]))) (CRules CFlex [CRule [CPVar (1,"render"),CPVar (2,"v")] [(CSymbol ("Prelude","success"),CLetDecl [CLocalVar (3,"ref")] (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CVar (1,"render")) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CApply (CSymbol ("Prelude","foldr")) (CApply (CSymbol ("Prelude","flip")) (CSymbol ("HTML","addAttr")))) (CApply (CApply (CSymbol ("HTML","textfield")) (CVar (3,"ref"))) (CVar (2,"v")))) (CVar (0,"attrs")))) (CSymbol ("Prelude","[]"))))) (CApply (CSymbol ("WUI","cgiRef2state")) (CVar (3,"ref")))))] []]))]]),
  CFunc ("WUI","wRequiredString") 0 Public (CTCons ("WUI","WuiSpec") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("WUI","withCondition")) (CApply (CApply (CSymbol ("WUI","withError")) (CSymbol ("WUI","wString"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'M'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'g'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ':'))) (CSymbol ("Prelude","[]")))))))))))))))))) (CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Prelude","not"))) (CSymbol ("Prelude","null"))))] []]),
  CFunc ("WUI","wRequiredStringSize") 1 Public (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("WUI","WuiSpec") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]])) (CRules CFlex [CRule [CPVar (0,"size")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("WUI","withCondition")) (CApply (CApply (CSymbol ("WUI","withError")) (CApply (CSymbol ("WUI","wStringSize")) (CVar (0,"size")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'M'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'g'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ':'))) (CSymbol ("Prelude","[]")))))))))))))))))) (CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Prelude","not"))) (CSymbol ("Prelude","null"))))] []]),
  CFunc ("WUI","wTextArea") 1 Public (CFuncType (CTCons ("Prelude","(,)") [CTCons ("Prelude","Int") [],CTCons ("Prelude","Int") []]) (CTCons ("WUI","WuiSpec") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]])) (CRules CFlex [CRule [CPVar (0,"dims")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("WUI","WuiSpec")) (CApply (CApply (CApply (CSymbol ("Prelude","(,,)")) (CSymbol ("Prelude","head"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '?'))) (CSymbol ("Prelude","[]")))) (CApply (CSymbol ("Prelude","const")) (CSymbol ("Prelude","True"))))) (CLambda [CPVar (1,"wparams"),CPVar (2,"v")] (CApply (CApply (CSymbol ("WUI","textareaWidget")) (CApply (CSymbol ("WUI","renderOf")) (CVar (1,"wparams")))) (CVar (2,"v"))))) (CLambda [CPVar (3,"wparams"),CPVar (4,"env"),CPVar (5,"s")] (CApply (CApply (CApply (CSymbol ("WUI","checkLegalInput")) (CVar (3,"wparams"))) (CSymbol ("WUI","textareaWidget"))) (CApply (CSymbol ("WUI","filterStringInput")) (CApply (CVar (4,"env")) (CApply (CSymbol ("WUI","state2cgiRef")) (CVar (5,"s"))))))))] [CLocalFunc (CFunc ("WUI","textareaWidget") 2 Private (CFuncType (CFuncType (CTCons ("Prelude","[]") [CTCons ("HTML","HtmlExp") []]) (CTVar (0,"a"))) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","(,)") [CTVar (0,"a"),CTCons ("WUI","WuiState") []]))) (CRules CFlex [CRule [CPVar (1,"render"),CPVar (2,"v")] [(CSymbol ("Prelude","success"),CLetDecl [CLocalVar (3,"ref")] (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CVar (1,"render")) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CApply (CSymbol ("HTML","textarea")) (CVar (3,"ref"))) (CVar (0,"dims"))) (CVar (2,"v")))) (CSymbol ("Prelude","[]"))))) (CApply (CSymbol ("WUI","cgiRef2state")) (CVar (3,"ref")))))] []]))]]),
  CFunc ("WUI","wSelect") 2 Public (CFuncType (CFuncType (CTVar (0,"a")) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CFuncType (CTCons ("Prelude","[]") [CTVar (0,"a")]) (CTCons ("WUI","WuiSpec") [CTVar (0,"a")]))) (CRules CFlex [CRule [CPVar (0,"showelem"),CPVar (1,"selset")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("WUI","WuiSpec")) (CApply (CApply (CApply (CSymbol ("Prelude","(,,)")) (CSymbol ("Prelude","head"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '?'))) (CSymbol ("Prelude","[]")))) (CApply (CSymbol ("Prelude","const")) (CSymbol ("Prelude","True"))))) (CLambda [CPVar (2,"wparams"),CPVar (3,"v")] (CApply (CApply (CSymbol ("WUI","selWidget")) (CApply (CSymbol ("WUI","renderOf")) (CVar (2,"wparams")))) (CVar (3,"v"))))) (CLambda [CPVar (4,"wparams"),CPVar (5,"env"),CPVar (6,"s")] (CApply (CApply (CApply (CSymbol ("WUI","checkLegalInput")) (CVar (4,"wparams"))) (CSymbol ("WUI","selWidget"))) (CApply (CApply (CSymbol ("Prelude","!!")) (CVar (1,"selset"))) (CApply (CSymbol ("Read","readNat")) (CApply (CVar (5,"env")) (CApply (CSymbol ("WUI","state2cgiRef")) (CVar (6,"s")))))))))] [CLocalFunc (CFunc ("WUI","selWidget") 2 Private (CFuncType (CFuncType (CTCons ("Prelude","[]") [CTCons ("HTML","HtmlExp") []]) (CTVar (0,"a"))) (CFuncType (CTVar (1,"_359")) (CTCons ("Prelude","(,)") [CTVar (0,"a"),CTCons ("WUI","WuiState") []]))) (CRules CFlex [CRule [CPVar (2,"render"),CPVar (3,"v")] [(CSymbol ("Prelude","success"),CLetDecl [CLocalVar (4,"ref"),CLocalPat (CPVar (5,"idx")) (CApply (CApply (CSymbol ("List","elemIndex")) (CVar (3,"v"))) (CVar (1,"selset"))) [],CLocalPat (CPVar (6,"namevalues")) (CApply (CApply (CSymbol ("Prelude","zip")) (CApply (CApply (CSymbol ("Prelude","map")) (CVar (0,"showelem"))) (CVar (1,"selset")))) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("Prelude","show"))) (CApply (CSymbol ("Prelude","enumFrom")) (CLit (CIntc 0))))) []] (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CVar (2,"render")) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CApply (CSymbol ("Prelude","maybe")) (CApply (CApply (CSymbol ("HTML","selection")) (CVar (4,"ref"))) (CVar (6,"namevalues")))) (CLambda [CPVar (7,"i")] (CApply (CApply (CApply (CSymbol ("HTML","selectionInitial")) (CVar (4,"ref"))) (CVar (6,"namevalues"))) (CVar (7,"i"))))) (CVar (5,"idx")))) (CSymbol ("Prelude","[]"))))) (CApply (CSymbol ("WUI","cgiRef2state")) (CVar (4,"ref")))))] []]))]]),
  CFunc ("WUI","wSelectInt") 0 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Int") []]) (CTCons ("WUI","WuiSpec") [CTCons ("Prelude","Int") []])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("WUI","wSelect")) (CSymbol ("Prelude","show")))] []]),
  CFunc ("WUI","wSelectBool") 2 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("WUI","WuiSpec") [CTCons ("Prelude","Bool") []]))) (CRules CFlex [CRule [CPVar (0,"true"),CPVar (1,"false")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("WUI","wSelect")) (CLambda [CPVar (2,"b")] (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CVar (2,"b"))) (CVar (0,"true"))) (CVar (1,"false"))))) (CApply (CApply (CSymbol ("Prelude",":")) (CSymbol ("Prelude","True"))) (CApply (CApply (CSymbol ("Prelude",":")) (CSymbol ("Prelude","False"))) (CSymbol ("Prelude","[]")))))] []]),
  CFunc ("WUI","wCheckBool") 1 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("HTML","HtmlExp") []]) (CTCons ("WUI","WuiSpec") [CTCons ("Prelude","Bool") []])) (CRules CFlex [CRule [CPVar (0,"hexps")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("WUI","WuiSpec")) (CApply (CApply (CApply (CSymbol ("Prelude","(,,)")) (CSymbol ("Prelude","head"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '?'))) (CSymbol ("Prelude","[]")))) (CApply (CSymbol ("Prelude","const")) (CSymbol ("Prelude","True"))))) (CLambda [CPVar (1,"wparams"),CPVar (2,"v")] (CApply (CApply (CSymbol ("WUI","checkWidget")) (CApply (CSymbol ("WUI","renderOf")) (CVar (1,"wparams")))) (CVar (2,"v"))))) (CLambda [CPVar (3,"wparams"),CPVar (4,"env"),CPVar (5,"s")] (CApply (CApply (CApply (CSymbol ("WUI","checkLegalInput")) (CVar (3,"wparams"))) (CSymbol ("WUI","checkWidget"))) (CApply (CApply (CSymbol ("Prelude","==")) (CApply (CVar (4,"env")) (CApply (CSymbol ("WUI","state2cgiRef")) (CVar (5,"s"))))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'T'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]"))))))))))] [CLocalFunc (CFunc ("WUI","checkWidget") 2 Private (CFuncType (CFuncType (CTCons ("Prelude","[]") [CTCons ("HTML","HtmlExp") []]) (CTVar (0,"a"))) (CFuncType (CTCons ("Prelude","Bool") []) (CTCons ("Prelude","(,)") [CTVar (0,"a"),CTCons ("WUI","WuiState") []]))) (CRules CFlex [CRule [CPVar (1,"render"),CPVar (2,"v")] [(CSymbol ("Prelude","success"),CLetDecl [CLocalVar (3,"ref")] (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CVar (1,"render")) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("HTML","inline")) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CVar (2,"v"))) (CSymbol ("HTML","checkedbox"))) (CSymbol ("HTML","checkbox"))) (CVar (3,"ref"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'T'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]")))))))) (CVar (0,"hexps"))))) (CSymbol ("Prelude","[]"))))) (CApply (CSymbol ("WUI","cgiRef2state")) (CVar (3,"ref")))))] []]))]]),
  CFunc ("WUI","wMultiCheckSelect") 2 Public (CFuncType (CFuncType (CTVar (0,"a")) (CTCons ("Prelude","[]") [CTCons ("HTML","HtmlExp") []])) (CFuncType (CTCons ("Prelude","[]") [CTVar (0,"a")]) (CTCons ("WUI","WuiSpec") [CTCons ("Prelude","[]") [CTVar (0,"a")]]))) (CRules CFlex [CRule [CPVar (0,"showelem"),CPVar (1,"selset")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("WUI","WuiSpec")) (CApply (CApply (CApply (CSymbol ("Prelude","(,,)")) (CSymbol ("WUI","renderTuple"))) (CSymbol ("WUI","tupleError"))) (CApply (CSymbol ("Prelude","const")) (CSymbol ("Prelude","True"))))) (CLambda [CPVar (2,"wparams"),CPVar (3,"vs")] (CApply (CApply (CSymbol ("WUI","checkWidget")) (CApply (CSymbol ("WUI","renderOf")) (CVar (2,"wparams")))) (CVar (3,"vs"))))) (CLambda [CPVar (4,"wparams"),CPVar (5,"env"),CPVar (6,"st")] (CApply (CApply (CApply (CSymbol ("WUI","checkLegalInput")) (CVar (4,"wparams"))) (CSymbol ("WUI","checkWidget"))) (CApply (CApply (CSymbol ("Prelude","concatMap")) (CLambda [CPComb ("Prelude","(,)") [CPVar (7,"ref"),CPVar (8,"s")]] (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","==")) (CApply (CVar (5,"env")) (CVar (7,"ref")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'T'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]")))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (8,"s"))) (CSymbol ("Prelude","[]")))) (CSymbol ("Prelude","[]"))))) (CApply (CApply (CSymbol ("Prelude","zip")) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("WUI","state2cgiRef"))) (CApply (CSymbol ("WUI","state2states")) (CVar (6,"st"))))) (CVar (1,"selset")))))))] [CLocalFunc (CFunc ("WUI","checkWidget") 2 Private (CFuncType (CFuncType (CTCons ("Prelude","[]") [CTCons ("HTML","HtmlExp") []]) (CTVar (0,"a"))) (CFuncType (CTCons ("Prelude","[]") [CTVar (1,"_424")]) (CTCons ("Prelude","(,)") [CTVar (0,"a"),CTCons ("WUI","WuiState") []]))) (CRules CFlex [CRule [CPVar (2,"render"),CPVar (3,"vs")] [(CSymbol ("Prelude","success"),CLetDecl [CLocalPat (CPVar (4,"refs")) (CApply (CApply (CSymbol ("Prelude","take")) (CApply (CSymbol ("Prelude","length")) (CVar (1,"selset")))) (CSymbol ("WUI","newVars"))) [],CLocalPat (CPVar (5,"numsetitems")) (CApply (CApply (CSymbol ("Prelude","zip")) (CVar (4,"refs"))) (CVar (1,"selset"))) [],CLocalFunc (CFunc ("WUI","showItem") 1 Private (CFuncType (CTCons ("Prelude","(,)") [CTCons ("HTML","CgiRef") [],CTVar (1,"_424")]) (CTCons ("HTML","HtmlExp") [])) (CRules CFlex [CRule [CPComb ("Prelude","(,)") [CPVar (6,"ref"),CPVar (7,"s")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("HTML","inline")) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","elem")) (CVar (7,"s"))) (CVar (3,"vs")))) (CSymbol ("HTML","checkedbox"))) (CSymbol ("HTML","checkbox"))) (CVar (6,"ref"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'T'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]")))))))) (CApply (CVar (0,"showelem")) (CVar (7,"s")))))] []]))] (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CVar (2,"render")) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("WUI","showItem"))) (CVar (5,"numsetitems"))))) (CApply (CSymbol ("WUI","states2state")) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("WUI","cgiRef2state"))) (CVar (4,"refs"))))))] []]))]]),
  CFunc ("WUI","newVars") 0 Private (CTCons ("Prelude","[]") [CTVar (0,"a")]) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",":")) (CSymbol ("Prelude","unknown"))) (CSymbol ("WUI","newVars")))] []]),
  CFunc ("WUI","wRadioSelect") 2 Public (CFuncType (CFuncType (CTVar (0,"a")) (CTCons ("Prelude","[]") [CTCons ("HTML","HtmlExp") []])) (CFuncType (CTCons ("Prelude","[]") [CTVar (0,"a")]) (CTCons ("WUI","WuiSpec") [CTVar (0,"a")]))) (CRules CFlex [CRule [CPVar (0,"showelem"),CPVar (1,"selset")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("WUI","WuiSpec")) (CApply (CApply (CApply (CSymbol ("Prelude","(,,)")) (CSymbol ("WUI","renderTuple"))) (CSymbol ("WUI","tupleError"))) (CApply (CSymbol ("Prelude","const")) (CSymbol ("Prelude","True"))))) (CLambda [CPVar (2,"wparams"),CPVar (3,"v")] (CApply (CApply (CSymbol ("WUI","radioWidget")) (CApply (CSymbol ("WUI","renderOf")) (CVar (2,"wparams")))) (CVar (3,"v"))))) (CLambda [CPVar (4,"wparams"),CPVar (5,"env"),CPVar (6,"s")] (CApply (CApply (CApply (CSymbol ("WUI","checkLegalInput")) (CVar (4,"wparams"))) (CSymbol ("WUI","radioWidget"))) (CApply (CApply (CSymbol ("Prelude","!!")) (CVar (1,"selset"))) (CApply (CSymbol ("Read","readNat")) (CApply (CVar (5,"env")) (CApply (CSymbol ("WUI","state2cgiRef")) (CVar (6,"s")))))))))] [CLocalFunc (CFunc ("WUI","radioWidget") 2 Private (CFuncType (CFuncType (CTCons ("Prelude","[]") [CTCons ("HTML","HtmlExp") []]) (CTVar (0,"a"))) (CFuncType (CTVar (1,"_504")) (CTCons ("Prelude","(,)") [CTVar (0,"a"),CTCons ("WUI","WuiState") []]))) (CRules CFlex [CRule [CPVar (2,"render"),CPVar (3,"v")] [(CSymbol ("Prelude","success"),CLetDecl [CLocalVar (4,"ref"),CLocalPat (CPVar (5,"idx")) (CApply (CApply (CApply (CSymbol ("Prelude","maybe")) (CLit (CIntc 0))) (CSymbol ("Prelude","id"))) (CApply (CApply (CSymbol ("List","elemIndex")) (CVar (3,"v"))) (CVar (1,"selset")))) [],CLocalPat (CPVar (6,"numhitems")) (CApply (CApply (CSymbol ("Prelude","zip")) (CApply (CSymbol ("Prelude","enumFrom")) (CLit (CIntc 0)))) (CApply (CApply (CSymbol ("Prelude","map")) (CVar (0,"showelem"))) (CVar (1,"selset")))) [],CLocalFunc (CFunc ("WUI","showItem") 1 Private (CFuncType (CTCons ("Prelude","(,)") [CTCons ("Prelude","Int") [],CTCons ("Prelude","[]") [CTCons ("HTML","HtmlExp") []]]) (CTCons ("HTML","HtmlExp") [])) (CRules CFlex [CRule [CPComb ("Prelude","(,)") [CPVar (7,"i"),CPVar (8,"s")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("HTML","table")) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (7,"i"))) (CVar (5,"idx")))) (CSymbol ("HTML","radio_main"))) (CSymbol ("HTML","radio_other"))) (CVar (4,"ref"))) (CApply (CSymbol ("Prelude","show")) (CVar (7,"i"))))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (8,"s"))) (CSymbol ("Prelude","[]"))))) (CSymbol ("Prelude","[]"))))] []]))] (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CVar (2,"render")) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("WUI","showItem"))) (CVar (6,"numhitems"))))) (CApply (CSymbol ("WUI","cgiRef2state")) (CVar (4,"ref")))))] []]))]]),
  CFunc ("WUI","wRadioBool") 2 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("HTML","HtmlExp") []]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("HTML","HtmlExp") []]) (CTCons ("WUI","WuiSpec") [CTCons ("Prelude","Bool") []]))) (CRules CFlex [CRule [CPVar (0,"truehexps"),CPVar (1,"falsehexps")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("WUI","wRadioSelect")) (CLambda [CPVar (2,"b")] (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CVar (2,"b"))) (CVar (0,"truehexps"))) (CVar (1,"falsehexps"))))) (CApply (CApply (CSymbol ("Prelude",":")) (CSymbol ("Prelude","True"))) (CApply (CApply (CSymbol ("Prelude",":")) (CSymbol ("Prelude","False"))) (CSymbol ("Prelude","[]")))))] []]),
  CFunc ("WUI","wPair") 2 Public (CFuncType (CTCons ("WUI","WuiSpec") [CTVar (0,"a")]) (CFuncType (CTCons ("WUI","WuiSpec") [CTVar (1,"b")]) (CTCons ("WUI","WuiSpec") [CTCons ("Prelude","(,)") [CTVar (0,"a"),CTVar (1,"b")]]))) (CRules CFlex [CRule [CPComb ("WUI","WuiSpec") [CPVar (0,"rendera"),CPVar (1,"showa"),CPVar (2,"reada")],CPComb ("WUI","WuiSpec") [CPVar (3,"renderb"),CPVar (4,"showb"),CPVar (5,"readb")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("WUI","WuiSpec")) (CApply (CApply (CApply (CSymbol ("Prelude","(,,)")) (CSymbol ("WUI","renderTuple"))) (CSymbol ("WUI","tupleError"))) (CApply (CSymbol ("Prelude","const")) (CSymbol ("Prelude","True"))))) (CSymbol ("WUI","showc"))) (CSymbol ("WUI","readc")))] [CLocalFunc (CFunc ("WUI","showc") 2 Private (CFuncType (CTCons ("Prelude","(,,)") [CFuncType (CTCons ("Prelude","[]") [CTCons ("HTML","HtmlExp") []]) (CTVar (0,"a")),CTVar (1,"b"),CTVar (2,"c")]) (CFuncType (CTCons ("Prelude","(,)") [CTVar (3,"_567"),CTVar (4,"_569")]) (CTCons ("Prelude","(,)") [CTVar (0,"a"),CTCons ("WUI","WuiState") []]))) (CRules CFlex [CRule [CPVar (6,"wparams"),CPComb ("Prelude","(,)") [CPVar (7,"va"),CPVar (8,"vb")]] [(CSymbol ("Prelude","success"),CLetDecl [CLocalPat (CPComb ("Prelude","(,)") [CPVar (9,"hea"),CPVar (10,"rta")]) (CApply (CApply (CVar (1,"showa")) (CVar (0,"rendera"))) (CVar (7,"va"))) [],CLocalPat (CPComb ("Prelude","(,)") [CPVar (11,"heb"),CPVar (12,"rtb")]) (CApply (CApply (CVar (4,"showb")) (CVar (3,"renderb"))) (CVar (8,"vb"))) []] (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("WUI","renderOf")) (CVar (6,"wparams"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (9,"hea"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (11,"heb"))) (CSymbol ("Prelude","[]")))))) (CApply (CSymbol ("WUI","states2state")) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (10,"rta"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (12,"rtb"))) (CSymbol ("Prelude","[]")))))))] []])),CLocalFunc (CFunc ("WUI","readc") 3 Private (CFuncType (CTCons ("Prelude","(,,)") [CFuncType (CTCons ("Prelude","[]") [CTCons ("HTML","HtmlExp") []]) (CTCons ("HTML","HtmlExp") []),CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CFuncType (CTCons ("Prelude","(,)") [CTVar (2,"_567"),CTVar (3,"_569")]) (CTCons ("Prelude","Bool") [])]) (CFuncType (CFuncType (CTCons ("HTML","CgiRef") []) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CFuncType (CTCons ("WUI","WuiState") []) (CTCons ("Prelude","(,)") [CTCons ("Prelude","Maybe") [CTCons ("Prelude","(,)") [CTVar (2,"_567"),CTVar (3,"_569")]],CTCons ("Prelude","(,)") [CTCons ("HTML","HtmlExp") [],CTCons ("WUI","WuiState") []]])))) (CRules CFlex [CRule [CPComb ("Prelude","(,,)") [CPVar (6,"render"),CPVar (7,"errmsg"),CPVar (8,"legal")],CPVar (9,"env"),CPVar (10,"s")] [(CSymbol ("Prelude","success"),CLetDecl [CLocalPat (CPComb ("Prelude",":") [CPVar (11,"ra"),CPComb ("Prelude",":") [CPVar (12,"rb"),CPComb ("Prelude","[]") []]]) (CApply (CSymbol ("WUI","state2states")) (CVar (10,"s"))) [],CLocalPat (CPComb ("Prelude","(,)") [CPVar (13,"rav"),CPComb ("Prelude","(,)") [CPVar (14,"hea"),CPVar (15,"rta")]]) (CApply (CApply (CApply (CVar (2,"reada")) (CVar (0,"rendera"))) (CVar (9,"env"))) (CVar (11,"ra"))) [],CLocalPat (CPComb ("Prelude","(,)") [CPVar (16,"rbv"),CPComb ("Prelude","(,)") [CPVar (17,"heb"),CPVar (18,"rtb")]]) (CApply (CApply (CApply (CVar (5,"readb")) (CVar (3,"renderb"))) (CVar (9,"env"))) (CVar (12,"rb"))) [],CLocalPat (CPVar (19,"errhexps")) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (14,"hea"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (17,"heb"))) (CSymbol ("Prelude","[]")))) [],CLocalPat (CPVar (20,"errstate")) (CApply (CSymbol ("WUI","states2state")) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (15,"rta"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (18,"rtb"))) (CSymbol ("Prelude","[]"))))) []] (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","||")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (13,"rav"))) (CSymbol ("Prelude","Nothing")))) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (16,"rbv"))) (CSymbol ("Prelude","Nothing"))))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CSymbol ("Prelude","Nothing"))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CVar (6,"render")) (CVar (19,"errhexps")))) (CVar (20,"errstate"))))) (CLetDecl [CLocalPat (CPVar (21,"value")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CSymbol ("Maybe","fromJust")) (CVar (13,"rav")))) (CApply (CSymbol ("Maybe","fromJust")) (CVar (16,"rbv")))) []] (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CVar (8,"legal")) (CVar (21,"value")))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CSymbol ("Prelude","Just")) (CVar (21,"value")))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CVar (6,"render")) (CVar (19,"errhexps")))) (CVar (20,"errstate"))))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CSymbol ("Prelude","Nothing"))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CApply (CSymbol ("WUI","renderError")) (CVar (6,"render"))) (CVar (7,"errmsg"))) (CVar (19,"errhexps")))) (CVar (20,"errstate"))))))))] []]))]]),
  CFunc ("WUI","wTriple") 3 Public (CFuncType (CTCons ("WUI","WuiSpec") [CTVar (0,"a")]) (CFuncType (CTCons ("WUI","WuiSpec") [CTVar (1,"b")]) (CFuncType (CTCons ("WUI","WuiSpec") [CTVar (2,"c")]) (CTCons ("WUI","WuiSpec") [CTCons ("Prelude","(,,)") [CTVar (0,"a"),CTVar (1,"b"),CTVar (2,"c")]])))) (CRules CFlex [CRule [CPComb ("WUI","WuiSpec") [CPVar (0,"rendera"),CPVar (1,"showa"),CPVar (2,"reada")],CPComb ("WUI","WuiSpec") [CPVar (3,"renderb"),CPVar (4,"showb"),CPVar (5,"readb")],CPComb ("WUI","WuiSpec") [CPVar (6,"renderc"),CPVar (7,"showc"),CPVar (8,"readc")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("WUI","WuiSpec")) (CApply (CApply (CApply (CSymbol ("Prelude","(,,)")) (CSymbol ("WUI","renderTuple"))) (CSymbol ("WUI","tupleError"))) (CApply (CSymbol ("Prelude","const")) (CSymbol ("Prelude","True"))))) (CSymbol ("WUI","showd"))) (CSymbol ("WUI","readd")))] [CLocalFunc (CFunc ("WUI","showd") 2 Private (CFuncType (CTCons ("Prelude","(,,)") [CFuncType (CTCons ("Prelude","[]") [CTCons ("HTML","HtmlExp") []]) (CTVar (0,"a")),CTVar (1,"b"),CTVar (2,"c")]) (CFuncType (CTCons ("Prelude","(,,)") [CTVar (3,"_643"),CTVar (4,"_645"),CTVar (5,"_647")]) (CTCons ("Prelude","(,)") [CTVar (0,"a"),CTCons ("WUI","WuiState") []]))) (CRules CFlex [CRule [CPVar (9,"wparams"),CPComb ("Prelude","(,,)") [CPVar (10,"va"),CPVar (11,"vb"),CPVar (12,"vc")]] [(CSymbol ("Prelude","success"),CLetDecl [CLocalPat (CPComb ("Prelude","(,)") [CPVar (13,"hea"),CPVar (14,"rta")]) (CApply (CApply (CVar (1,"showa")) (CVar (0,"rendera"))) (CVar (10,"va"))) [],CLocalPat (CPComb ("Prelude","(,)") [CPVar (15,"heb"),CPVar (16,"rtb")]) (CApply (CApply (CVar (4,"showb")) (CVar (3,"renderb"))) (CVar (11,"vb"))) [],CLocalPat (CPComb ("Prelude","(,)") [CPVar (17,"hec"),CPVar (18,"rtc")]) (CApply (CApply (CVar (7,"showc")) (CVar (6,"renderc"))) (CVar (12,"vc"))) []] (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("WUI","renderOf")) (CVar (9,"wparams"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (13,"hea"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (15,"heb"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (17,"hec"))) (CSymbol ("Prelude","[]"))))))) (CApply (CSymbol ("WUI","states2state")) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (14,"rta"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (16,"rtb"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (18,"rtc"))) (CSymbol ("Prelude","[]"))))))))] []])),CLocalFunc (CFunc ("WUI","readd") 3 Private (CFuncType (CTCons ("Prelude","(,,)") [CFuncType (CTCons ("Prelude","[]") [CTCons ("HTML","HtmlExp") []]) (CTCons ("HTML","HtmlExp") []),CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CFuncType (CTCons ("Prelude","(,,)") [CTVar (3,"_643"),CTVar (4,"_645"),CTVar (5,"_647")]) (CTCons ("Prelude","Bool") [])]) (CFuncType (CFuncType (CTCons ("HTML","CgiRef") []) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CFuncType (CTCons ("WUI","WuiState") []) (CTCons ("Prelude","(,)") [CTCons ("Prelude","Maybe") [CTCons ("Prelude","(,,)") [CTVar (3,"_643"),CTVar (4,"_645"),CTVar (5,"_647")]],CTCons ("Prelude","(,)") [CTCons ("HTML","HtmlExp") [],CTCons ("WUI","WuiState") []]])))) (CRules CFlex [CRule [CPComb ("Prelude","(,,)") [CPVar (9,"render"),CPVar (10,"errmsg"),CPVar (11,"legal")],CPVar (12,"env"),CPVar (13,"s")] [(CSymbol ("Prelude","success"),CLetDecl [CLocalPat (CPComb ("Prelude",":") [CPVar (14,"ra"),CPComb ("Prelude",":") [CPVar (15,"rb"),CPComb ("Prelude",":") [CPVar (16,"rc"),CPComb ("Prelude","[]") []]]]) (CApply (CSymbol ("WUI","state2states")) (CVar (13,"s"))) [],CLocalPat (CPComb ("Prelude","(,)") [CPVar (17,"rav"),CPComb ("Prelude","(,)") [CPVar (18,"hea"),CPVar (19,"rta")]]) (CApply (CApply (CApply (CVar (2,"reada")) (CVar (0,"rendera"))) (CVar (12,"env"))) (CVar (14,"ra"))) [],CLocalPat (CPComb ("Prelude","(,)") [CPVar (20,"rbv"),CPComb ("Prelude","(,)") [CPVar (21,"heb"),CPVar (22,"rtb")]]) (CApply (CApply (CApply (CVar (5,"readb")) (CVar (3,"renderb"))) (CVar (12,"env"))) (CVar (15,"rb"))) [],CLocalPat (CPComb ("Prelude","(,)") [CPVar (23,"rcv"),CPComb ("Prelude","(,)") [CPVar (24,"hec"),CPVar (25,"rtc")]]) (CApply (CApply (CApply (CVar (8,"readc")) (CVar (6,"renderc"))) (CVar (12,"env"))) (CVar (16,"rc"))) [],CLocalPat (CPVar (26,"errhexps")) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (18,"hea"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (21,"heb"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (24,"hec"))) (CSymbol ("Prelude","[]"))))) [],CLocalPat (CPVar (27,"errstate")) (CApply (CSymbol ("WUI","states2state")) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (19,"rta"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (22,"rtb"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (25,"rtc"))) (CSymbol ("Prelude","[]")))))) []] (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","||")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (17,"rav"))) (CSymbol ("Prelude","Nothing")))) (CApply (CApply (CSymbol ("Prelude","||")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (20,"rbv"))) (CSymbol ("Prelude","Nothing")))) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (23,"rcv"))) (CSymbol ("Prelude","Nothing")))))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CSymbol ("Prelude","Nothing"))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CVar (9,"render")) (CVar (26,"errhexps")))) (CVar (27,"errstate"))))) (CLetDecl [CLocalPat (CPVar (28,"value")) (CApply (CApply (CApply (CSymbol ("Prelude","(,,)")) (CApply (CSymbol ("Maybe","fromJust")) (CVar (17,"rav")))) (CApply (CSymbol ("Maybe","fromJust")) (CVar (20,"rbv")))) (CApply (CSymbol ("Maybe","fromJust")) (CVar (23,"rcv")))) []] (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CVar (11,"legal")) (CVar (28,"value")))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CSymbol ("Prelude","Just")) (CVar (28,"value")))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CVar (9,"render")) (CVar (26,"errhexps")))) (CVar (27,"errstate"))))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CSymbol ("Prelude","Nothing"))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CApply (CSymbol ("WUI","renderError")) (CVar (9,"render"))) (CVar (10,"errmsg"))) (CVar (26,"errhexps")))) (CVar (27,"errstate"))))))))] []]))]]),
  CFunc ("WUI","w4Tuple") 4 Public (CFuncType (CTCons ("WUI","WuiSpec") [CTVar (0,"a")]) (CFuncType (CTCons ("WUI","WuiSpec") [CTVar (1,"b")]) (CFuncType (CTCons ("WUI","WuiSpec") [CTVar (2,"c")]) (CFuncType (CTCons ("WUI","WuiSpec") [CTVar (3,"d")]) (CTCons ("WUI","WuiSpec") [CTCons ("Prelude","(,,,)") [CTVar (0,"a"),CTVar (1,"b"),CTVar (2,"c"),CTVar (3,"d")]]))))) (CRules CFlex [CRule [CPVar (0,"wa"),CPVar (1,"wb"),CPVar (2,"wc"),CPVar (3,"wd")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("WUI","transformWSpec")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CLambda [CPComb ("Prelude","(,)") [CPComb ("Prelude","(,)") [CPVar (4,"a"),CPVar (5,"b")],CPComb ("Prelude","(,)") [CPVar (6,"c"),CPVar (7,"d")]]] (CApply (CApply (CApply (CApply (CSymbol ("Prelude","(,,,)")) (CVar (4,"a"))) (CVar (5,"b"))) (CVar (6,"c"))) (CVar (7,"d"))))) (CLambda [CPComb ("Prelude","(,,,)") [CPVar (8,"a"),CPVar (9,"b"),CPVar (10,"c"),CPVar (11,"d")]] (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CVar (8,"a"))) (CVar (9,"b")))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CVar (10,"c"))) (CVar (11,"d"))))))) (CApply (CApply (CSymbol ("WUI","wJoinTuple")) (CApply (CApply (CSymbol ("WUI","wPair")) (CVar (0,"wa"))) (CVar (1,"wb")))) (CApply (CApply (CSymbol ("WUI","wPair")) (CVar (2,"wc"))) (CVar (3,"wd")))))] []]),
  CFunc ("WUI","w5Tuple") 5 Public (CFuncType (CTCons ("WUI","WuiSpec") [CTVar (0,"a")]) (CFuncType (CTCons ("WUI","WuiSpec") [CTVar (1,"b")]) (CFuncType (CTCons ("WUI","WuiSpec") [CTVar (2,"c")]) (CFuncType (CTCons ("WUI","WuiSpec") [CTVar (3,"d")]) (CFuncType (CTCons ("WUI","WuiSpec") [CTVar (4,"e")]) (CTCons ("WUI","WuiSpec") [CTCons ("Prelude","(,,,,)") [CTVar (0,"a"),CTVar (1,"b"),CTVar (2,"c"),CTVar (3,"d"),CTVar (4,"e")]])))))) (CRules CFlex [CRule [CPVar (0,"wa"),CPVar (1,"wb"),CPVar (2,"wc"),CPVar (3,"wd"),CPVar (4,"we")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("WUI","transformWSpec")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CLambda [CPComb ("Prelude","(,)") [CPComb ("Prelude","(,,)") [CPVar (5,"a"),CPVar (6,"b"),CPVar (7,"c")],CPComb ("Prelude","(,)") [CPVar (8,"d"),CPVar (9,"e")]]] (CApply (CApply (CApply (CApply (CApply (CSymbol ("Prelude","(,,,,)")) (CVar (5,"a"))) (CVar (6,"b"))) (CVar (7,"c"))) (CVar (8,"d"))) (CVar (9,"e"))))) (CLambda [CPComb ("Prelude","(,,,,)") [CPVar (10,"a"),CPVar (11,"b"),CPVar (12,"c"),CPVar (13,"d"),CPVar (14,"e")]] (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CApply (CSymbol ("Prelude","(,,)")) (CVar (10,"a"))) (CVar (11,"b"))) (CVar (12,"c")))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CVar (13,"d"))) (CVar (14,"e"))))))) (CApply (CApply (CSymbol ("WUI","wJoinTuple")) (CApply (CApply (CApply (CSymbol ("WUI","wTriple")) (CVar (0,"wa"))) (CVar (1,"wb"))) (CVar (2,"wc")))) (CApply (CApply (CSymbol ("WUI","wPair")) (CVar (3,"wd"))) (CVar (4,"we")))))] []]),
  CFunc ("WUI","w6Tuple") 6 Public (CFuncType (CTCons ("WUI","WuiSpec") [CTVar (0,"a")]) (CFuncType (CTCons ("WUI","WuiSpec") [CTVar (1,"b")]) (CFuncType (CTCons ("WUI","WuiSpec") [CTVar (2,"c")]) (CFuncType (CTCons ("WUI","WuiSpec") [CTVar (3,"d")]) (CFuncType (CTCons ("WUI","WuiSpec") [CTVar (4,"e")]) (CFuncType (CTCons ("WUI","WuiSpec") [CTVar (5,"f")]) (CTCons ("WUI","WuiSpec") [CTCons ("Prelude","(,,,,,)") [CTVar (0,"a"),CTVar (1,"b"),CTVar (2,"c"),CTVar (3,"d"),CTVar (4,"e"),CTVar (5,"f")]]))))))) (CRules CFlex [CRule [CPVar (0,"wa"),CPVar (1,"wb"),CPVar (2,"wc"),CPVar (3,"wd"),CPVar (4,"we"),CPVar (5,"wf")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("WUI","transformWSpec")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CLambda [CPComb ("Prelude","(,)") [CPComb ("Prelude","(,,)") [CPVar (6,"a"),CPVar (7,"b"),CPVar (8,"c")],CPComb ("Prelude","(,,)") [CPVar (9,"d"),CPVar (10,"e"),CPVar (11,"f")]]] (CApply (CApply (CApply (CApply (CApply (CApply (CSymbol ("Prelude","(,,,,,)")) (CVar (6,"a"))) (CVar (7,"b"))) (CVar (8,"c"))) (CVar (9,"d"))) (CVar (10,"e"))) (CVar (11,"f"))))) (CLambda [CPComb ("Prelude","(,,,,,)") [CPVar (12,"a"),CPVar (13,"b"),CPVar (14,"c"),CPVar (15,"d"),CPVar (16,"e"),CPVar (17,"f")]] (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CApply (CSymbol ("Prelude","(,,)")) (CVar (12,"a"))) (CVar (13,"b"))) (CVar (14,"c")))) (CApply (CApply (CApply (CSymbol ("Prelude","(,,)")) (CVar (15,"d"))) (CVar (16,"e"))) (CVar (17,"f"))))))) (CApply (CApply (CSymbol ("WUI","wJoinTuple")) (CApply (CApply (CApply (CSymbol ("WUI","wTriple")) (CVar (0,"wa"))) (CVar (1,"wb"))) (CVar (2,"wc")))) (CApply (CApply (CApply (CSymbol ("WUI","wTriple")) (CVar (3,"wd"))) (CVar (4,"we"))) (CVar (5,"wf")))))] []]),
  CFunc ("WUI","w7Tuple") 7 Public (CFuncType (CTCons ("WUI","WuiSpec") [CTVar (0,"a")]) (CFuncType (CTCons ("WUI","WuiSpec") [CTVar (1,"b")]) (CFuncType (CTCons ("WUI","WuiSpec") [CTVar (2,"c")]) (CFuncType (CTCons ("WUI","WuiSpec") [CTVar (3,"d")]) (CFuncType (CTCons ("WUI","WuiSpec") [CTVar (4,"e")]) (CFuncType (CTCons ("WUI","WuiSpec") [CTVar (5,"f")]) (CFuncType (CTCons ("WUI","WuiSpec") [CTVar (6,"g")]) (CTCons ("WUI","WuiSpec") [CTCons ("Prelude","(,,,,,,)") [CTVar (0,"a"),CTVar (1,"b"),CTVar (2,"c"),CTVar (3,"d"),CTVar (4,"e"),CTVar (5,"f"),CTVar (6,"g")]])))))))) (CRules CFlex [CRule [CPVar (0,"wa"),CPVar (1,"wb"),CPVar (2,"wc"),CPVar (3,"wd"),CPVar (4,"we"),CPVar (5,"wf"),CPVar (6,"wg")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("WUI","transformWSpec")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CLambda [CPComb ("Prelude","(,)") [CPComb ("Prelude","(,,,)") [CPVar (7,"a"),CPVar (8,"b"),CPVar (9,"c"),CPVar (10,"d")],CPComb ("Prelude","(,,)") [CPVar (11,"e"),CPVar (12,"f"),CPVar (13,"g")]]] (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CSymbol ("Prelude","(,,,,,,)")) (CVar (7,"a"))) (CVar (8,"b"))) (CVar (9,"c"))) (CVar (10,"d"))) (CVar (11,"e"))) (CVar (12,"f"))) (CVar (13,"g"))))) (CLambda [CPComb ("Prelude","(,,,,,,)") [CPVar (14,"a"),CPVar (15,"b"),CPVar (16,"c"),CPVar (17,"d"),CPVar (18,"e"),CPVar (19,"f"),CPVar (20,"g")]] (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CApply (CApply (CSymbol ("Prelude","(,,,)")) (CVar (14,"a"))) (CVar (15,"b"))) (CVar (16,"c"))) (CVar (17,"d")))) (CApply (CApply (CApply (CSymbol ("Prelude","(,,)")) (CVar (18,"e"))) (CVar (19,"f"))) (CVar (20,"g"))))))) (CApply (CApply (CSymbol ("WUI","wJoinTuple")) (CApply (CApply (CApply (CApply (CSymbol ("WUI","w4Tuple")) (CVar (0,"wa"))) (CVar (1,"wb"))) (CVar (2,"wc"))) (CVar (3,"wd")))) (CApply (CApply (CApply (CSymbol ("WUI","wTriple")) (CVar (4,"we"))) (CVar (5,"wf"))) (CVar (6,"wg")))))] []]),
  CFunc ("WUI","w8Tuple") 8 Public (CFuncType (CTCons ("WUI","WuiSpec") [CTVar (0,"a")]) (CFuncType (CTCons ("WUI","WuiSpec") [CTVar (1,"b")]) (CFuncType (CTCons ("WUI","WuiSpec") [CTVar (2,"c")]) (CFuncType (CTCons ("WUI","WuiSpec") [CTVar (3,"d")]) (CFuncType (CTCons ("WUI","WuiSpec") [CTVar (4,"e")]) (CFuncType (CTCons ("WUI","WuiSpec") [CTVar (5,"f")]) (CFuncType (CTCons ("WUI","WuiSpec") [CTVar (6,"g")]) (CFuncType (CTCons ("WUI","WuiSpec") [CTVar (7,"h")]) (CTCons ("WUI","WuiSpec") [CTCons ("Prelude","(,,,,,,,)") [CTVar (0,"a"),CTVar (1,"b"),CTVar (2,"c"),CTVar (3,"d"),CTVar (4,"e"),CTVar (5,"f"),CTVar (6,"g"),CTVar (7,"h")]]))))))))) (CRules CFlex [CRule [CPVar (0,"wa"),CPVar (1,"wb"),CPVar (2,"wc"),CPVar (3,"wd"),CPVar (4,"we"),CPVar (5,"wf"),CPVar (6,"wg"),CPVar (7,"wh")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("WUI","transformWSpec")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CLambda [CPComb ("Prelude","(,)") [CPComb ("Prelude","(,,,)") [CPVar (8,"a"),CPVar (9,"b"),CPVar (10,"c"),CPVar (11,"d")],CPComb ("Prelude","(,,,)") [CPVar (12,"e"),CPVar (13,"f"),CPVar (14,"g"),CPVar (15,"h")]]] (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CSymbol ("Prelude","(,,,,,,,)")) (CVar (8,"a"))) (CVar (9,"b"))) (CVar (10,"c"))) (CVar (11,"d"))) (CVar (12,"e"))) (CVar (13,"f"))) (CVar (14,"g"))) (CVar (15,"h"))))) (CLambda [CPComb ("Prelude","(,,,,,,,)") [CPVar (16,"a"),CPVar (17,"b"),CPVar (18,"c"),CPVar (19,"d"),CPVar (20,"e"),CPVar (21,"f"),CPVar (22,"g"),CPVar (23,"h")]] (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CApply (CApply (CSymbol ("Prelude","(,,,)")) (CVar (16,"a"))) (CVar (17,"b"))) (CVar (18,"c"))) (CVar (19,"d")))) (CApply (CApply (CApply (CApply (CSymbol ("Prelude","(,,,)")) (CVar (20,"e"))) (CVar (21,"f"))) (CVar (22,"g"))) (CVar (23,"h"))))))) (CApply (CApply (CSymbol ("WUI","wJoinTuple")) (CApply (CApply (CApply (CApply (CSymbol ("WUI","w4Tuple")) (CVar (0,"wa"))) (CVar (1,"wb"))) (CVar (2,"wc"))) (CVar (3,"wd")))) (CApply (CApply (CApply (CApply (CSymbol ("WUI","w4Tuple")) (CVar (4,"we"))) (CVar (5,"wf"))) (CVar (6,"wg"))) (CVar (7,"wh")))))] []]),
  CFunc ("WUI","w9Tuple") 9 Public (CFuncType (CTCons ("WUI","WuiSpec") [CTVar (0,"a")]) (CFuncType (CTCons ("WUI","WuiSpec") [CTVar (1,"b")]) (CFuncType (CTCons ("WUI","WuiSpec") [CTVar (2,"c")]) (CFuncType (CTCons ("WUI","WuiSpec") [CTVar (3,"d")]) (CFuncType (CTCons ("WUI","WuiSpec") [CTVar (4,"e")]) (CFuncType (CTCons ("WUI","WuiSpec") [CTVar (5,"f")]) (CFuncType (CTCons ("WUI","WuiSpec") [CTVar (6,"g")]) (CFuncType (CTCons ("WUI","WuiSpec") [CTVar (7,"h")]) (CFuncType (CTCons ("WUI","WuiSpec") [CTVar (8,"i")]) (CTCons ("WUI","WuiSpec") [CTCons ("Prelude","(,,,,,,,,)") [CTVar (0,"a"),CTVar (1,"b"),CTVar (2,"c"),CTVar (3,"d"),CTVar (4,"e"),CTVar (5,"f"),CTVar (6,"g"),CTVar (7,"h"),CTVar (8,"i")]])))))))))) (CRules CFlex [CRule [CPVar (0,"wa"),CPVar (1,"wb"),CPVar (2,"wc"),CPVar (3,"wd"),CPVar (4,"we"),CPVar (5,"wf"),CPVar (6,"wg"),CPVar (7,"wh"),CPVar (8,"wi")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("WUI","transformWSpec")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CLambda [CPComb ("Prelude","(,)") [CPComb ("Prelude","(,,,,)") [CPVar (9,"a"),CPVar (10,"b"),CPVar (11,"c"),CPVar (12,"d"),CPVar (13,"e")],CPComb ("Prelude","(,,,)") [CPVar (14,"f"),CPVar (15,"g"),CPVar (16,"h"),CPVar (17,"i")]]] (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CSymbol ("Prelude","(,,,,,,,,)")) (CVar (9,"a"))) (CVar (10,"b"))) (CVar (11,"c"))) (CVar (12,"d"))) (CVar (13,"e"))) (CVar (14,"f"))) (CVar (15,"g"))) (CVar (16,"h"))) (CVar (17,"i"))))) (CLambda [CPComb ("Prelude","(,,,,,,,,)") [CPVar (18,"a"),CPVar (19,"b"),CPVar (20,"c"),CPVar (21,"d"),CPVar (22,"e"),CPVar (23,"f"),CPVar (24,"g"),CPVar (25,"h"),CPVar (26,"i")]] (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CApply (CApply (CApply (CSymbol ("Prelude","(,,,,)")) (CVar (18,"a"))) (CVar (19,"b"))) (CVar (20,"c"))) (CVar (21,"d"))) (CVar (22,"e")))) (CApply (CApply (CApply (CApply (CSymbol ("Prelude","(,,,)")) (CVar (23,"f"))) (CVar (24,"g"))) (CVar (25,"h"))) (CVar (26,"i"))))))) (CApply (CApply (CSymbol ("WUI","wJoinTuple")) (CApply (CApply (CApply (CApply (CApply (CSymbol ("WUI","w5Tuple")) (CVar (0,"wa"))) (CVar (1,"wb"))) (CVar (2,"wc"))) (CVar (3,"wd"))) (CVar (4,"we")))) (CApply (CApply (CApply (CApply (CSymbol ("WUI","w4Tuple")) (CVar (5,"wf"))) (CVar (6,"wg"))) (CVar (7,"wh"))) (CVar (8,"wi")))))] []]),
  CFunc ("WUI","w10Tuple") 10 Public (CFuncType (CTCons ("WUI","WuiSpec") [CTVar (0,"a")]) (CFuncType (CTCons ("WUI","WuiSpec") [CTVar (1,"b")]) (CFuncType (CTCons ("WUI","WuiSpec") [CTVar (2,"c")]) (CFuncType (CTCons ("WUI","WuiSpec") [CTVar (3,"d")]) (CFuncType (CTCons ("WUI","WuiSpec") [CTVar (4,"e")]) (CFuncType (CTCons ("WUI","WuiSpec") [CTVar (5,"f")]) (CFuncType (CTCons ("WUI","WuiSpec") [CTVar (6,"g")]) (CFuncType (CTCons ("WUI","WuiSpec") [CTVar (7,"h")]) (CFuncType (CTCons ("WUI","WuiSpec") [CTVar (8,"i")]) (CFuncType (CTCons ("WUI","WuiSpec") [CTVar (9,"j")]) (CTCons ("WUI","WuiSpec") [CTCons ("Prelude","(,,,,,,,,,)") [CTVar (0,"a"),CTVar (1,"b"),CTVar (2,"c"),CTVar (3,"d"),CTVar (4,"e"),CTVar (5,"f"),CTVar (6,"g"),CTVar (7,"h"),CTVar (8,"i"),CTVar (9,"j")]]))))))))))) (CRules CFlex [CRule [CPVar (0,"wa"),CPVar (1,"wb"),CPVar (2,"wc"),CPVar (3,"wd"),CPVar (4,"we"),CPVar (5,"wf"),CPVar (6,"wg"),CPVar (7,"wh"),CPVar (8,"wi"),CPVar (9,"wj")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("WUI","transformWSpec")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CLambda [CPComb ("Prelude","(,)") [CPComb ("Prelude","(,,,,)") [CPVar (10,"a"),CPVar (11,"b"),CPVar (12,"c"),CPVar (13,"d"),CPVar (14,"e")],CPComb ("Prelude","(,,,,)") [CPVar (15,"f"),CPVar (16,"g"),CPVar (17,"h"),CPVar (18,"i"),CPVar (19,"j")]]] (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CSymbol ("Prelude","(,,,,,,,,,)")) (CVar (10,"a"))) (CVar (11,"b"))) (CVar (12,"c"))) (CVar (13,"d"))) (CVar (14,"e"))) (CVar (15,"f"))) (CVar (16,"g"))) (CVar (17,"h"))) (CVar (18,"i"))) (CVar (19,"j"))))) (CLambda [CPComb ("Prelude","(,,,,,,,,,)") [CPVar (20,"a"),CPVar (21,"b"),CPVar (22,"c"),CPVar (23,"d"),CPVar (24,"e"),CPVar (25,"f"),CPVar (26,"g"),CPVar (27,"h"),CPVar (28,"i"),CPVar (29,"j")]] (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CApply (CApply (CApply (CSymbol ("Prelude","(,,,,)")) (CVar (20,"a"))) (CVar (21,"b"))) (CVar (22,"c"))) (CVar (23,"d"))) (CVar (24,"e")))) (CApply (CApply (CApply (CApply (CApply (CSymbol ("Prelude","(,,,,)")) (CVar (25,"f"))) (CVar (26,"g"))) (CVar (27,"h"))) (CVar (28,"i"))) (CVar (29,"j"))))))) (CApply (CApply (CSymbol ("WUI","wJoinTuple")) (CApply (CApply (CApply (CApply (CApply (CSymbol ("WUI","w5Tuple")) (CVar (0,"wa"))) (CVar (1,"wb"))) (CVar (2,"wc"))) (CVar (3,"wd"))) (CVar (4,"we")))) (CApply (CApply (CApply (CApply (CApply (CSymbol ("WUI","w5Tuple")) (CVar (5,"wf"))) (CVar (6,"wg"))) (CVar (7,"wh"))) (CVar (8,"wi"))) (CVar (9,"wj")))))] []]),
  CFunc ("WUI","w11Tuple") 11 Public (CFuncType (CTCons ("WUI","WuiSpec") [CTVar (0,"a")]) (CFuncType (CTCons ("WUI","WuiSpec") [CTVar (1,"b")]) (CFuncType (CTCons ("WUI","WuiSpec") [CTVar (2,"c")]) (CFuncType (CTCons ("WUI","WuiSpec") [CTVar (3,"d")]) (CFuncType (CTCons ("WUI","WuiSpec") [CTVar (4,"e")]) (CFuncType (CTCons ("WUI","WuiSpec") [CTVar (5,"f")]) (CFuncType (CTCons ("WUI","WuiSpec") [CTVar (6,"g")]) (CFuncType (CTCons ("WUI","WuiSpec") [CTVar (7,"h")]) (CFuncType (CTCons ("WUI","WuiSpec") [CTVar (8,"i")]) (CFuncType (CTCons ("WUI","WuiSpec") [CTVar (9,"j")]) (CFuncType (CTCons ("WUI","WuiSpec") [CTVar (10,"k")]) (CTCons ("WUI","WuiSpec") [CTCons ("Prelude","(,,,,,,,,,,)") [CTVar (0,"a"),CTVar (1,"b"),CTVar (2,"c"),CTVar (3,"d"),CTVar (4,"e"),CTVar (5,"f"),CTVar (6,"g"),CTVar (7,"h"),CTVar (8,"i"),CTVar (9,"j"),CTVar (10,"k")]])))))))))))) (CRules CFlex [CRule [CPVar (0,"wa"),CPVar (1,"wb"),CPVar (2,"wc"),CPVar (3,"wd"),CPVar (4,"we"),CPVar (5,"wf"),CPVar (6,"wg"),CPVar (7,"wh"),CPVar (8,"wi"),CPVar (9,"wj"),CPVar (10,"wk")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("WUI","transformWSpec")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CLambda [CPComb ("Prelude","(,)") [CPComb ("Prelude","(,,,,)") [CPVar (11,"a"),CPVar (12,"b"),CPVar (13,"c"),CPVar (14,"d"),CPVar (15,"e")],CPComb ("Prelude","(,,,,,)") [CPVar (16,"f"),CPVar (17,"g"),CPVar (18,"h"),CPVar (19,"i"),CPVar (20,"j"),CPVar (21,"k")]]] (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CSymbol ("Prelude","(,,,,,,,,,,)")) (CVar (11,"a"))) (CVar (12,"b"))) (CVar (13,"c"))) (CVar (14,"d"))) (CVar (15,"e"))) (CVar (16,"f"))) (CVar (17,"g"))) (CVar (18,"h"))) (CVar (19,"i"))) (CVar (20,"j"))) (CVar (21,"k"))))) (CLambda [CPComb ("Prelude","(,,,,,,,,,,)") [CPVar (22,"a"),CPVar (23,"b"),CPVar (24,"c"),CPVar (25,"d"),CPVar (26,"e"),CPVar (27,"f"),CPVar (28,"g"),CPVar (29,"h"),CPVar (30,"i"),CPVar (31,"j"),CPVar (32,"k")]] (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CApply (CApply (CApply (CSymbol ("Prelude","(,,,,)")) (CVar (22,"a"))) (CVar (23,"b"))) (CVar (24,"c"))) (CVar (25,"d"))) (CVar (26,"e")))) (CApply (CApply (CApply (CApply (CApply (CApply (CSymbol ("Prelude","(,,,,,)")) (CVar (27,"f"))) (CVar (28,"g"))) (CVar (29,"h"))) (CVar (30,"i"))) (CVar (31,"j"))) (CVar (32,"k"))))))) (CApply (CApply (CSymbol ("WUI","wJoinTuple")) (CApply (CApply (CApply (CApply (CApply (CSymbol ("WUI","w5Tuple")) (CVar (0,"wa"))) (CVar (1,"wb"))) (CVar (2,"wc"))) (CVar (3,"wd"))) (CVar (4,"we")))) (CApply (CApply (CApply (CApply (CApply (CApply (CSymbol ("WUI","w6Tuple")) (CVar (5,"wf"))) (CVar (6,"wg"))) (CVar (7,"wh"))) (CVar (8,"wi"))) (CVar (9,"wj"))) (CVar (10,"wk")))))] []]),
  CFunc ("WUI","w12Tuple") 12 Public (CFuncType (CTCons ("WUI","WuiSpec") [CTVar (0,"a")]) (CFuncType (CTCons ("WUI","WuiSpec") [CTVar (1,"b")]) (CFuncType (CTCons ("WUI","WuiSpec") [CTVar (2,"c")]) (CFuncType (CTCons ("WUI","WuiSpec") [CTVar (3,"d")]) (CFuncType (CTCons ("WUI","WuiSpec") [CTVar (4,"e")]) (CFuncType (CTCons ("WUI","WuiSpec") [CTVar (5,"f")]) (CFuncType (CTCons ("WUI","WuiSpec") [CTVar (6,"g")]) (CFuncType (CTCons ("WUI","WuiSpec") [CTVar (7,"h")]) (CFuncType (CTCons ("WUI","WuiSpec") [CTVar (8,"i")]) (CFuncType (CTCons ("WUI","WuiSpec") [CTVar (9,"j")]) (CFuncType (CTCons ("WUI","WuiSpec") [CTVar (10,"k")]) (CFuncType (CTCons ("WUI","WuiSpec") [CTVar (11,"l")]) (CTCons ("WUI","WuiSpec") [CTCons ("Prelude","(,,,,,,,,,,,)") [CTVar (0,"a"),CTVar (1,"b"),CTVar (2,"c"),CTVar (3,"d"),CTVar (4,"e"),CTVar (5,"f"),CTVar (6,"g"),CTVar (7,"h"),CTVar (8,"i"),CTVar (9,"j"),CTVar (10,"k"),CTVar (11,"l")]]))))))))))))) (CRules CFlex [CRule [CPVar (0,"wa"),CPVar (1,"wb"),CPVar (2,"wc"),CPVar (3,"wd"),CPVar (4,"we"),CPVar (5,"wf"),CPVar (6,"wg"),CPVar (7,"wh"),CPVar (8,"wi"),CPVar (9,"wj"),CPVar (10,"wk"),CPVar (11,"wl")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("WUI","transformWSpec")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CLambda [CPComb ("Prelude","(,)") [CPComb ("Prelude","(,,,,,)") [CPVar (12,"a"),CPVar (13,"b"),CPVar (14,"c"),CPVar (15,"d"),CPVar (16,"e"),CPVar (17,"f")],CPComb ("Prelude","(,,,,,)") [CPVar (18,"g"),CPVar (19,"h"),CPVar (20,"i"),CPVar (21,"j"),CPVar (22,"k"),CPVar (23,"l")]]] (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CApply (CSymbol ("Prelude","(,,,,,,,,,,,)")) (CVar (12,"a"))) (CVar (13,"b"))) (CVar (14,"c"))) (CVar (15,"d"))) (CVar (16,"e"))) (CVar (17,"f"))) (CVar (18,"g"))) (CVar (19,"h"))) (CVar (20,"i"))) (CVar (21,"j"))) (CVar (22,"k"))) (CVar (23,"l"))))) (CLambda [CPComb ("Prelude","(,,,,,,,,,,,)") [CPVar (24,"a"),CPVar (25,"b"),CPVar (26,"c"),CPVar (27,"d"),CPVar (28,"e"),CPVar (29,"f"),CPVar (30,"g"),CPVar (31,"h"),CPVar (32,"i"),CPVar (33,"j"),CPVar (34,"k"),CPVar (35,"l")]] (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CApply (CApply (CApply (CApply (CSymbol ("Prelude","(,,,,,)")) (CVar (24,"a"))) (CVar (25,"b"))) (CVar (26,"c"))) (CVar (27,"d"))) (CVar (28,"e"))) (CVar (29,"f")))) (CApply (CApply (CApply (CApply (CApply (CApply (CSymbol ("Prelude","(,,,,,)")) (CVar (30,"g"))) (CVar (31,"h"))) (CVar (32,"i"))) (CVar (33,"j"))) (CVar (34,"k"))) (CVar (35,"l"))))))) (CApply (CApply (CSymbol ("WUI","wJoinTuple")) (CApply (CApply (CApply (CApply (CApply (CApply (CSymbol ("WUI","w6Tuple")) (CVar (0,"wa"))) (CVar (1,"wb"))) (CVar (2,"wc"))) (CVar (3,"wd"))) (CVar (4,"we"))) (CVar (5,"wf")))) (CApply (CApply (CApply (CApply (CApply (CApply (CSymbol ("WUI","w6Tuple")) (CVar (6,"wg"))) (CVar (7,"wh"))) (CVar (8,"wi"))) (CVar (9,"wj"))) (CVar (10,"wk"))) (CVar (11,"wl")))))] []]),
  CFunc ("WUI","wJoinTuple") 2 Public (CFuncType (CTCons ("WUI","WuiSpec") [CTVar (0,"a")]) (CFuncType (CTCons ("WUI","WuiSpec") [CTVar (1,"b")]) (CTCons ("WUI","WuiSpec") [CTCons ("Prelude","(,)") [CTVar (0,"a"),CTVar (1,"b")]]))) (CRules CFlex [CRule [CPComb ("WUI","WuiSpec") [CPVar (0,"rendera"),CPVar (1,"showa"),CPVar (2,"reada")],CPComb ("WUI","WuiSpec") [CPVar (3,"renderb"),CPVar (4,"showb"),CPVar (5,"readb")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("WUI","WuiSpec")) (CApply (CApply (CApply (CSymbol ("Prelude","(,,)")) (CSymbol ("WUI","renderTuple"))) (CSymbol ("WUI","tupleError"))) (CApply (CSymbol ("Prelude","const")) (CSymbol ("Prelude","True"))))) (CSymbol ("WUI","showc"))) (CSymbol ("WUI","readc")))] [CLocalFunc (CFunc ("WUI","render2joinrender") 2 Private (CFuncType (CFuncType (CTCons ("Prelude","[]") [CTCons ("HTML","HtmlExp") []]) (CTVar (0,"a"))) (CFuncType (CTCons ("Prelude","[]") [CTCons ("HTML","HtmlExp") []]) (CTVar (0,"a")))) (CRules CFlex [CRule [CPVar (6,"render"),CPComb ("Prelude",":") [CPVar (7,"h1"),CPComb ("Prelude",":") [CPVar (8,"h2"),CPComb ("Prelude","[]") []]]] [(CSymbol ("Prelude","success"),CLetDecl [CLocalPat (CPVar (9,"h1s")) (CApply (CSymbol ("WUI","unRenderTuple")) (CVar (7,"h1"))) [],CLocalPat (CPVar (10,"h2s")) (CApply (CSymbol ("WUI","unRenderTuple")) (CVar (8,"h2"))) []] (CApply (CVar (6,"render")) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (9,"h1s"))) (CVar (10,"h2s")))))] []])),CLocalFunc (CFunc ("WUI","showc") 2 Private (CFuncType (CTCons ("Prelude","(,,)") [CFuncType (CTCons ("Prelude","[]") [CTCons ("HTML","HtmlExp") []]) (CTVar (0,"a")),CTVar (1,"b"),CTVar (2,"c")]) (CFuncType (CTCons ("Prelude","(,)") [CTVar (3,"_749"),CTVar (4,"_751")]) (CTCons ("Prelude","(,)") [CTVar (0,"a"),CTCons ("WUI","WuiState") []]))) (CRules CFlex [CRule [CPVar (6,"wparams"),CPComb ("Prelude","(,)") [CPVar (7,"va"),CPVar (8,"vb")]] [(CSymbol ("Prelude","success"),CLetDecl [CLocalPat (CPComb ("Prelude","(,)") [CPVar (9,"hea"),CPVar (10,"rta")]) (CApply (CApply (CVar (1,"showa")) (CVar (0,"rendera"))) (CVar (7,"va"))) [],CLocalPat (CPComb ("Prelude","(,)") [CPVar (11,"heb"),CPVar (12,"rtb")]) (CApply (CApply (CVar (4,"showb")) (CVar (3,"renderb"))) (CVar (8,"vb"))) []] (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("WUI","render2joinrender")) (CApply (CSymbol ("WUI","renderOf")) (CVar (6,"wparams")))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (9,"hea"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (11,"heb"))) (CSymbol ("Prelude","[]")))))) (CApply (CSymbol ("WUI","states2state")) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (10,"rta"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (12,"rtb"))) (CSymbol ("Prelude","[]")))))))] []])),CLocalFunc (CFunc ("WUI","readc") 3 Private (CFuncType (CTCons ("Prelude","(,,)") [CFuncType (CTCons ("Prelude","[]") [CTCons ("HTML","HtmlExp") []]) (CTCons ("HTML","HtmlExp") []),CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CFuncType (CTCons ("Prelude","(,)") [CTVar (2,"_749"),CTVar (3,"_751")]) (CTCons ("Prelude","Bool") [])]) (CFuncType (CFuncType (CTCons ("HTML","CgiRef") []) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CFuncType (CTCons ("WUI","WuiState") []) (CTCons ("Prelude","(,)") [CTCons ("Prelude","Maybe") [CTCons ("Prelude","(,)") [CTVar (2,"_749"),CTVar (3,"_751")]],CTCons ("Prelude","(,)") [CTCons ("HTML","HtmlExp") [],CTCons ("WUI","WuiState") []]])))) (CRules CFlex [CRule [CPComb ("Prelude","(,,)") [CPVar (6,"orgrender"),CPVar (7,"errmsg"),CPVar (8,"legal")],CPVar (9,"env"),CPVar (10,"s")] [(CSymbol ("Prelude","success"),CLetDecl [CLocalPat (CPComb ("Prelude",":") [CPVar (11,"ra"),CPComb ("Prelude",":") [CPVar (12,"rb"),CPComb ("Prelude","[]") []]]) (CApply (CSymbol ("WUI","state2states")) (CVar (10,"s"))) [],CLocalPat (CPComb ("Prelude","(,)") [CPVar (13,"rav"),CPComb ("Prelude","(,)") [CPVar (14,"hea"),CPVar (15,"rta")]]) (CApply (CApply (CApply (CVar (2,"reada")) (CVar (0,"rendera"))) (CVar (9,"env"))) (CVar (11,"ra"))) [],CLocalPat (CPComb ("Prelude","(,)") [CPVar (16,"rbv"),CPComb ("Prelude","(,)") [CPVar (17,"heb"),CPVar (18,"rtb")]]) (CApply (CApply (CApply (CVar (5,"readb")) (CVar (3,"renderb"))) (CVar (9,"env"))) (CVar (12,"rb"))) [],CLocalPat (CPVar (19,"errhexps")) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (14,"hea"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (17,"heb"))) (CSymbol ("Prelude","[]")))) [],CLocalPat (CPVar (20,"errstate")) (CApply (CSymbol ("WUI","states2state")) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (15,"rta"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (18,"rtb"))) (CSymbol ("Prelude","[]"))))) [],CLocalPat (CPVar (21,"render")) (CApply (CSymbol ("WUI","render2joinrender")) (CVar (6,"orgrender"))) []] (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","||")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (13,"rav"))) (CSymbol ("Prelude","Nothing")))) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (16,"rbv"))) (CSymbol ("Prelude","Nothing"))))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CSymbol ("Prelude","Nothing"))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CVar (21,"render")) (CVar (19,"errhexps")))) (CVar (20,"errstate"))))) (CLetDecl [CLocalPat (CPVar (22,"value")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CSymbol ("Maybe","fromJust")) (CVar (13,"rav")))) (CApply (CSymbol ("Maybe","fromJust")) (CVar (16,"rbv")))) []] (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CVar (8,"legal")) (CVar (22,"value")))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CSymbol ("Prelude","Just")) (CVar (22,"value")))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CVar (21,"render")) (CVar (19,"errhexps")))) (CVar (20,"errstate"))))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CSymbol ("Prelude","Nothing"))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CApply (CSymbol ("WUI","renderError")) (CVar (21,"render"))) (CVar (7,"errmsg"))) (CVar (19,"errhexps")))) (CVar (20,"errstate"))))))))] []]))]]),
  CFunc ("WUI","wList") 1 Public (CFuncType (CTCons ("WUI","WuiSpec") [CTVar (0,"a")]) (CTCons ("WUI","WuiSpec") [CTCons ("Prelude","[]") [CTVar (0,"a")]])) (CRules CFlex [CRule [CPComb ("WUI","WuiSpec") [CPVar (0,"rendera"),CPVar (1,"showa"),CPVar (2,"reada")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("WUI","WuiSpec")) (CApply (CApply (CApply (CSymbol ("Prelude","(,,)")) (CSymbol ("WUI","renderList"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'I'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'g'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ':'))) (CSymbol ("Prelude","[]")))))))))))))))) (CApply (CSymbol ("Prelude","const")) (CSymbol ("Prelude","True"))))) (CLambda [CPVar (3,"wparams"),CPVar (4,"vas")] (CApply (CApply (CSymbol ("WUI","listWidget")) (CApply (CSymbol ("WUI","renderOf")) (CVar (3,"wparams")))) (CApply (CSymbol ("Prelude","unzip")) (CApply (CApply (CSymbol ("Prelude","map")) (CApply (CVar (1,"showa")) (CVar (0,"rendera")))) (CVar (4,"vas"))))))) (CLambda [CPComb ("Prelude","(,,)") [CPVar (5,"render"),CPVar (6,"errmsg"),CPVar (7,"legal")],CPVar (8,"env"),CPVar (9,"s")] (CLetDecl [CLocalPat (CPVar (10,"rvs")) (CApply (CApply (CSymbol ("Prelude","map")) (CApply (CApply (CVar (2,"reada")) (CVar (0,"rendera"))) (CVar (8,"env")))) (CApply (CSymbol ("WUI","state2states")) (CVar (9,"s")))) []] (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","elem")) (CSymbol ("Prelude","Nothing"))) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("Prelude","fst"))) (CVar (10,"rvs"))))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CSymbol ("Prelude","Nothing"))) (CApply (CApply (CSymbol ("WUI","listWidget")) (CVar (5,"render"))) (CApply (CSymbol ("Prelude","unzip")) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("Prelude","snd"))) (CVar (10,"rvs"))))))) (CLetDecl [CLocalPat (CPVar (11,"value")) (CApply (CApply (CSymbol ("Prelude","map")) (CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Maybe","fromJust"))) (CSymbol ("Prelude","fst")))) (CVar (10,"rvs"))) []] (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CVar (7,"legal")) (CVar (11,"value")))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CSymbol ("Prelude","Just")) (CVar (11,"value")))) (CApply (CApply (CSymbol ("WUI","listWidget")) (CVar (5,"render"))) (CApply (CSymbol ("Prelude","unzip")) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("Prelude","snd"))) (CVar (10,"rvs"))))))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CSymbol ("Prelude","Nothing"))) (CApply (CApply (CSymbol ("WUI","listWidget")) (CApply (CApply (CSymbol ("WUI","renderError")) (CVar (5,"render"))) (CVar (6,"errmsg")))) (CApply (CSymbol ("Prelude","unzip")) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("Prelude","snd"))) (CVar (10,"rvs"))))))))))))] [CLocalFunc (CFunc ("WUI","listWidget") 2 Private (CFuncType (CFuncType (CTVar (0,"a")) (CTVar (1,"b"))) (CFuncType (CTCons ("Prelude","(,)") [CTVar (0,"a"),CTCons ("Prelude","[]") [CTCons ("WUI","WuiState") []]]) (CTCons ("Prelude","(,)") [CTVar (1,"b"),CTCons ("WUI","WuiState") []]))) (CRules CFlex [CRule [CPVar (3,"render"),CPComb ("Prelude","(,)") [CPVar (4,"hes"),CPVar (5,"refs")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CVar (3,"render")) (CVar (4,"hes")))) (CApply (CSymbol ("WUI","states2state")) (CVar (5,"refs"))))] []]))]]),
  CFunc ("WUI","wListWithHeadings") 2 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]) (CFuncType (CTCons ("WUI","WuiSpec") [CTVar (0,"a")]) (CTCons ("WUI","WuiSpec") [CTCons ("Prelude","[]") [CTVar (0,"a")]]))) (CRules CFlex [CRule [CPVar (0,"headings"),CPVar (1,"wspec")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("WUI","withRendering")) (CApply (CSymbol ("WUI","wList")) (CVar (1,"wspec")))) (CSymbol ("WUI","renderHeadings")))] [CLocalFunc (CFunc ("WUI","renderHeadings") 1 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("HTML","HtmlExp") []]) (CTCons ("HTML","HtmlExp") [])) (CRules CFlex [CRule [CPVar (2,"hs")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("HTML","addHeadings")) (CApply (CSymbol ("WUI","renderList")) (CVar (2,"hs")))) (CApply (CApply (CSymbol ("Prelude","map")) (CLambda [CPVar (3,"s")] (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("HTML","htxt")) (CVar (3,"s")))) (CSymbol ("Prelude","[]"))))) (CVar (0,"headings"))))] []]))]]),
  CFunc ("WUI","wHList") 1 Public (CFuncType (CTCons ("WUI","WuiSpec") [CTVar (0,"a")]) (CTCons ("WUI","WuiSpec") [CTCons ("Prelude","[]") [CTVar (0,"a")]])) (CRules CFlex [CRule [CPVar (0,"wspec")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("WUI","withRendering")) (CApply (CSymbol ("WUI","wList")) (CVar (0,"wspec")))) (CSymbol ("WUI","renderTuple")))] []]),
  CFunc ("WUI","wMatrix") 1 Public (CFuncType (CTCons ("WUI","WuiSpec") [CTVar (0,"a")]) (CTCons ("WUI","WuiSpec") [CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTVar (0,"a")]]])) (CRules CFlex [CRule [CPVar (0,"wspec")] [(CSymbol ("Prelude","success"),CApply (CSymbol ("WUI","wList")) (CApply (CSymbol ("WUI","wHList")) (CVar (0,"wspec"))))] []]),
  CFunc ("WUI","wMaybe") 3 Public (CFuncType (CTCons ("WUI","WuiSpec") [CTCons ("Prelude","Bool") []]) (CFuncType (CTCons ("WUI","WuiSpec") [CTVar (0,"a")]) (CFuncType (CTVar (0,"a")) (CTCons ("WUI","WuiSpec") [CTCons ("Prelude","Maybe") [CTVar (0,"a")]])))) (CRules CFlex [CRule [CPComb ("WUI","WuiSpec") [CPVar (0,"paramb"),CPVar (1,"showb"),CPVar (2,"readb")],CPComb ("WUI","WuiSpec") [CPVar (3,"parama"),CPVar (4,"showa"),CPVar (5,"reada")],CPVar (6,"def")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("WUI","WuiSpec")) (CApply (CApply (CApply (CSymbol ("Prelude","(,,)")) (CSymbol ("WUI","renderTuple"))) (CSymbol ("WUI","tupleError"))) (CApply (CSymbol ("Prelude","const")) (CSymbol ("Prelude","True"))))) (CLambda [CPVar (7,"wparams"),CPVar (8,"mbs")] (CLetDecl [CLocalPat (CPComb ("Prelude","(,)") [CPVar (9,"heb"),CPVar (10,"rtb")]) (CApply (CApply (CVar (1,"showb")) (CVar (0,"paramb"))) (CApply (CApply (CSymbol ("Prelude","/=")) (CVar (8,"mbs"))) (CSymbol ("Prelude","Nothing")))) [],CLocalPat (CPComb ("Prelude","(,)") [CPVar (11,"hea"),CPVar (12,"rta")]) (CApply (CApply (CVar (4,"showa")) (CVar (3,"parama"))) (CApply (CApply (CApply (CSymbol ("Prelude","maybe")) (CVar (6,"def"))) (CSymbol ("Prelude","id"))) (CVar (8,"mbs")))) []] (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("WUI","renderOf")) (CVar (7,"wparams"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (9,"heb"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (11,"hea"))) (CSymbol ("Prelude","[]")))))) (CApply (CSymbol ("WUI","states2state")) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (10,"rtb"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (12,"rta"))) (CSymbol ("Prelude","[]"))))))))) (CLambda [CPComb ("Prelude","(,,)") [CPVar (13,"render"),CPVar (14,"errmsg"),CPVar (15,"legal")],CPVar (16,"env"),CPVar (17,"s")] (CLetDecl [CLocalPat (CPComb ("Prelude",":") [CPVar (18,"rb"),CPComb ("Prelude",":") [CPVar (19,"ra"),CPComb ("Prelude","[]") []]]) (CApply (CSymbol ("WUI","state2states")) (CVar (17,"s"))) [],CLocalPat (CPComb ("Prelude","(,)") [CPVar (20,"rbv"),CPComb ("Prelude","(,)") [CPVar (21,"heb"),CPVar (22,"rtb")]]) (CApply (CApply (CApply (CVar (2,"readb")) (CVar (0,"paramb"))) (CVar (16,"env"))) (CVar (18,"rb"))) [],CLocalPat (CPComb ("Prelude","(,)") [CPVar (23,"rav"),CPComb ("Prelude","(,)") [CPVar (24,"hea"),CPVar (25,"rta")]]) (CApply (CApply (CApply (CVar (5,"reada")) (CVar (3,"parama"))) (CVar (16,"env"))) (CVar (19,"ra"))) [],CLocalPat (CPVar (26,"errhexps")) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (21,"heb"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (24,"hea"))) (CSymbol ("Prelude","[]")))) [],CLocalPat (CPVar (27,"errstate")) (CApply (CSymbol ("WUI","states2state")) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (22,"rtb"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (25,"rta"))) (CSymbol ("Prelude","[]"))))) []] (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","||")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (20,"rbv"))) (CSymbol ("Prelude","Nothing")))) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (23,"rav"))) (CSymbol ("Prelude","Nothing"))))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CSymbol ("Prelude","Nothing"))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CVar (13,"render")) (CVar (26,"errhexps")))) (CVar (27,"errstate"))))) (CLetDecl [CLocalPat (CPVar (28,"value")) (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CSymbol ("Maybe","fromJust")) (CVar (20,"rbv")))) (CApply (CSymbol ("Prelude","Just")) (CApply (CSymbol ("Maybe","fromJust")) (CVar (23,"rav"))))) (CSymbol ("Prelude","Nothing"))) []] (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CVar (15,"legal")) (CVar (28,"value")))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CSymbol ("Prelude","Just")) (CVar (28,"value")))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CVar (13,"render")) (CVar (26,"errhexps")))) (CVar (27,"errstate"))))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CSymbol ("Prelude","Nothing"))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CApply (CSymbol ("WUI","renderError")) (CVar (13,"render"))) (CVar (14,"errmsg"))) (CVar (26,"errhexps")))) (CVar (27,"errstate"))))))))))] []]),
  CFunc ("WUI","wCheckMaybe") 2 Public (CFuncType (CTCons ("WUI","WuiSpec") [CTVar (0,"a")]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("HTML","HtmlExp") []]) (CFuncType (CTVar (0,"a")) (CTCons ("WUI","WuiSpec") [CTCons ("Prelude","Maybe") [CTVar (0,"a")]])))) (CRules CFlex [CRule [CPVar (0,"wspec"),CPVar (1,"exps")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("WUI","wMaybe")) (CApply (CSymbol ("WUI","wCheckBool")) (CVar (1,"exps")))) (CVar (0,"wspec")))] []]),
  CFunc ("WUI","wRadioMaybe") 3 Public (CFuncType (CTCons ("WUI","WuiSpec") [CTVar (0,"a")]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("HTML","HtmlExp") []]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("HTML","HtmlExp") []]) (CFuncType (CTVar (0,"a")) (CTCons ("WUI","WuiSpec") [CTCons ("Prelude","Maybe") [CTVar (0,"a")]]))))) (CRules CFlex [CRule [CPVar (0,"wspec"),CPVar (1,"hnothing"),CPVar (2,"hjust")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("WUI","wMaybe")) (CVar (3,"wBool"))) (CVar (0,"wspec")))] [CLocalPat (CPVar (3,"wBool")) (CApply (CApply (CSymbol ("WUI","wRadioSelect")) (CLambda [CPVar (4,"b")] (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CVar (4,"b"))) (CVar (2,"hjust"))) (CVar (1,"hnothing"))))) (CApply (CApply (CSymbol ("Prelude",":")) (CSymbol ("Prelude","False"))) (CApply (CApply (CSymbol ("Prelude",":")) (CSymbol ("Prelude","True"))) (CSymbol ("Prelude","[]"))))) []]]),
  CFunc ("WUI","wEither") 2 Public (CFuncType (CTCons ("WUI","WuiSpec") [CTVar (0,"a")]) (CFuncType (CTCons ("WUI","WuiSpec") [CTVar (1,"b")]) (CTCons ("WUI","WuiSpec") [CTCons ("Prelude","Either") [CTVar (0,"a"),CTVar (1,"b")]]))) (CRules CFlex [CRule [CPComb ("WUI","WuiSpec") [CPVar (0,"rendera"),CPVar (1,"showa"),CPVar (2,"reada")],CPComb ("WUI","WuiSpec") [CPVar (3,"renderb"),CPVar (4,"showb"),CPVar (5,"readb")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("WUI","WuiSpec")) (CApply (CApply (CApply (CSymbol ("Prelude","(,,)")) (CSymbol ("Prelude","head"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '?'))) (CSymbol ("Prelude","[]")))) (CApply (CSymbol ("Prelude","const")) (CSymbol ("Prelude","True"))))) (CSymbol ("WUI","showEither"))) (CSymbol ("WUI","readEither")))] [CLocalFunc (CFunc ("WUI","showEither") 2 Private (CFuncType (CTCons ("Prelude","(,,)") [CFuncType (CTCons ("Prelude","[]") [CTCons ("HTML","HtmlExp") []]) (CTVar (0,"a")),CTVar (1,"b"),CTVar (2,"c")]) (CFuncType (CTCons ("Prelude","Either") [CTVar (3,"_1446"),CTVar (4,"_1445")]) (CTCons ("Prelude","(,)") [CTVar (0,"a"),CTCons ("WUI","WuiState") []]))) (CRules CFlex [CRule [CPVar (6,"wparams"),CPComb ("Prelude","Left") [CPVar (7,"va")]] [(CSymbol ("Prelude","success"),CLetDecl [CLocalPat (CPComb ("Prelude","(,)") [CPVar (8,"hea"),CPVar (9,"rta")]) (CApply (CApply (CVar (1,"showa")) (CVar (0,"rendera"))) (CVar (7,"va"))) []] (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("WUI","renderOf")) (CVar (6,"wparams"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (8,"hea"))) (CSymbol ("Prelude","[]"))))) (CApply (CSymbol ("WUI","altstate2state")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CLit (CIntc 1))) (CVar (9,"rta"))))))] [],CRule [CPVar (10,"wparams"),CPComb ("Prelude","Right") [CPVar (11,"vb")]] [(CSymbol ("Prelude","success"),CLetDecl [CLocalPat (CPComb ("Prelude","(,)") [CPVar (12,"heb"),CPVar (13,"rtb")]) (CApply (CApply (CVar (4,"showb")) (CVar (3,"renderb"))) (CVar (11,"vb"))) []] (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("WUI","renderOf")) (CVar (10,"wparams"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (12,"heb"))) (CSymbol ("Prelude","[]"))))) (CApply (CSymbol ("WUI","altstate2state")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CLit (CIntc 2))) (CVar (13,"rtb"))))))] []])),CLocalFunc (CFunc ("WUI","readEither") 3 Private (CFuncType (CTCons ("Prelude","(,,)") [CFuncType (CTCons ("Prelude","[]") [CTCons ("HTML","HtmlExp") []]) (CTCons ("HTML","HtmlExp") []),CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CFuncType (CTCons ("Prelude","Either") [CTVar (2,"_1446"),CTVar (3,"_1445")]) (CTCons ("Prelude","Bool") [])]) (CFuncType (CFuncType (CTCons ("HTML","CgiRef") []) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CFuncType (CTCons ("WUI","WuiState") []) (CTCons ("Prelude","(,)") [CTCons ("Prelude","Maybe") [CTCons ("Prelude","Either") [CTVar (2,"_1446"),CTVar (3,"_1445")]],CTCons ("Prelude","(,)") [CTCons ("HTML","HtmlExp") [],CTCons ("WUI","WuiState") []]])))) (CRules CFlex [CRule [CPComb ("Prelude","(,,)") [CPVar (6,"render"),CPVar (7,"errmsg"),CPVar (8,"legal")],CPVar (9,"env"),CPVar (10,"s")] [(CSymbol ("Prelude","success"),CLetDecl [CLocalPat (CPComb ("Prelude","(,)") [CPVar (11,"altindex"),CPVar (12,"rab")]) (CApply (CSymbol ("WUI","state2altstate")) (CVar (10,"s"))) []] (CCase (CVar (11,"altindex")) [CBranch (CPLit (CIntc 1)) (CLetDecl [CLocalPat (CPComb ("Prelude","(,)") [CPVar (13,"rv"),CPComb ("Prelude","(,)") [CPVar (14,"he"),CPVar (15,"rst")]]) (CApply (CApply (CApply (CVar (2,"reada")) (CVar (0,"rendera"))) (CVar (9,"env"))) (CVar (12,"rab"))) []] (CApply (CApply (CApply (CApply (CSymbol ("WUI","checkValue")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (13,"rv"))) (CSymbol ("Prelude","Nothing")))) (CApply (CSymbol ("Prelude","Left")) (CApply (CSymbol ("Maybe","fromJust")) (CVar (13,"rv"))))) (CVar (14,"he"))) (CApply (CSymbol ("WUI","altstate2state")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CLit (CIntc 1))) (CVar (15,"rst")))))),CBranch (CPLit (CIntc 2)) (CLetDecl [CLocalPat (CPComb ("Prelude","(,)") [CPVar (16,"rv"),CPComb ("Prelude","(,)") [CPVar (17,"he"),CPVar (18,"rst")]]) (CApply (CApply (CApply (CVar (5,"readb")) (CVar (3,"renderb"))) (CVar (9,"env"))) (CVar (12,"rab"))) []] (CApply (CApply (CApply (CApply (CSymbol ("WUI","checkValue")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (16,"rv"))) (CSymbol ("Prelude","Nothing")))) (CApply (CSymbol ("Prelude","Right")) (CApply (CSymbol ("Maybe","fromJust")) (CVar (16,"rv"))))) (CVar (17,"he"))) (CApply (CSymbol ("WUI","altstate2state")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CLit (CIntc 2))) (CVar (18,"rst"))))))]))] [CLocalFunc (CFunc ("WUI","checkValue") 4 Private (CFuncType (CTCons ("Prelude","Bool") []) (CFuncType (CTCons ("Prelude","Either") [CTVar (2,"_1446"),CTVar (3,"_1445")]) (CFuncType (CTCons ("HTML","HtmlExp") []) (CFuncType (CTVar (0,"a")) (CTCons ("Prelude","(,)") [CTCons ("Prelude","Maybe") [CTCons ("Prelude","Either") [CTVar (2,"_1446"),CTVar (3,"_1445")]],CTCons ("Prelude","(,)") [CTCons ("HTML","HtmlExp") [],CTVar (0,"a")]]))))) (CRules CFlex [CRule [CPVar (11,"isnothing"),CPVar (12,"value"),CPVar (13,"hexp"),CPVar (14,"altstate")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CVar (11,"isnothing"))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CSymbol ("Prelude","Nothing"))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CVar (6,"render")) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (13,"hexp"))) (CSymbol ("Prelude","[]"))))) (CVar (14,"altstate"))))) (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CVar (8,"legal")) (CVar (12,"value")))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CSymbol ("Prelude","Just")) (CVar (12,"value")))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CVar (6,"render")) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (13,"hexp"))) (CSymbol ("Prelude","[]"))))) (CVar (14,"altstate"))))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CSymbol ("Prelude","Nothing"))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CApply (CSymbol ("WUI","renderError")) (CVar (6,"render"))) (CVar (7,"errmsg"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (13,"hexp"))) (CSymbol ("Prelude","[]"))))) (CVar (14,"altstate"))))))] []]))]]))]]),
  CFunc ("WUI","wTree") 1 Public (CFuncType (CTCons ("WUI","WuiSpec") [CTVar (0,"a")]) (CTCons ("WUI","WuiSpec") [CTCons ("WUI","WTree") [CTVar (0,"a")]])) (CRules CFlex [CRule [CPComb ("WUI","WuiSpec") [CPVar (0,"rendera"),CPVar (1,"showa"),CPVar (2,"reada")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("WUI","WuiSpec")) (CApply (CApply (CApply (CSymbol ("Prelude","(,,)")) (CSymbol ("WUI","renderList"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'I'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'g'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ':'))) (CSymbol ("Prelude","[]")))))))))))))))) (CApply (CSymbol ("Prelude","const")) (CSymbol ("Prelude","True"))))) (CSymbol ("WUI","showTree"))) (CSymbol ("WUI","readTree")))] [CLocalFunc (CFunc ("WUI","showTree") 2 Private (CFuncType (CTCons ("Prelude","(,,)") [CFuncType (CTCons ("Prelude","[]") [CTCons ("HTML","HtmlExp") []]) (CTCons ("HTML","HtmlExp") []),CTVar (0,"a"),CTVar (1,"b")]) (CFuncType (CTCons ("WUI","WTree") [CTVar (2,"_1539")]) (CTCons ("Prelude","(,)") [CTCons ("HTML","HtmlExp") [],CTCons ("WUI","WuiState") []]))) (CRules CFlex [CRule [CPVar (3,"_"),CPComb ("WUI","WLeaf") [CPVar (4,"va")]] [(CSymbol ("Prelude","success"),CLetDecl [CLocalPat (CPComb ("Prelude","(,)") [CPVar (5,"hea"),CPVar (6,"rta")]) (CApply (CApply (CVar (1,"showa")) (CVar (0,"rendera"))) (CVar (4,"va"))) []] (CApply (CApply (CSymbol ("Prelude","(,)")) (CVar (5,"hea"))) (CApply (CSymbol ("WUI","altstate2state")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CLit (CIntc 1))) (CVar (6,"rta"))))))] [],CRule [CPVar (7,"wparams"),CPComb ("WUI","WNode") [CPVar (8,"ns")]] [(CSymbol ("Prelude","success"),CLetDecl [CLocalPat (CPComb ("Prelude","(,)") [CPVar (9,"hes"),CPVar (10,"sts")]) (CApply (CSymbol ("Prelude","unzip")) (CApply (CApply (CSymbol ("Prelude","map")) (CApply (CSymbol ("WUI","showTree")) (CVar (7,"wparams")))) (CVar (8,"ns")))) []] (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("WUI","renderOf")) (CVar (7,"wparams"))) (CVar (9,"hes")))) (CApply (CSymbol ("WUI","altstate2state")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CLit (CIntc 2))) (CApply (CSymbol ("WUI","states2state")) (CVar (10,"sts")))))))] []])),CLocalFunc (CFunc ("WUI","readTree") 3 Private (CFuncType (CTCons ("Prelude","(,,)") [CFuncType (CTCons ("Prelude","[]") [CTCons ("HTML","HtmlExp") []]) (CTCons ("HTML","HtmlExp") []),CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CFuncType (CTCons ("WUI","WTree") [CTVar (1,"_1539")]) (CTCons ("Prelude","Bool") [])]) (CFuncType (CFuncType (CTCons ("HTML","CgiRef") []) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CFuncType (CTCons ("WUI","WuiState") []) (CTCons ("Prelude","(,)") [CTCons ("Prelude","Maybe") [CTCons ("WUI","WTree") [CTVar (1,"_1539")]],CTCons ("Prelude","(,)") [CTCons ("HTML","HtmlExp") [],CTCons ("WUI","WuiState") []]])))) (CRules CFlex [CRule [CPVar (3,"wpar"),CPVar (4,"env"),CPVar (5,"s")] [(CSymbol ("Prelude","success"),CLetDecl [CLocalPat (CPComb ("Prelude","(,)") [CPVar (6,"altindex"),CPVar (7,"rab")]) (CApply (CSymbol ("WUI","state2altstate")) (CVar (5,"s"))) []] (CCase (CVar (6,"altindex")) [CBranch (CPLit (CIntc 1)) (CLetDecl [CLocalPat (CPComb ("Prelude","(,)") [CPVar (8,"rv"),CPComb ("Prelude","(,)") [CPVar (9,"he"),CPVar (10,"rst")]]) (CApply (CApply (CApply (CVar (2,"reada")) (CVar (0,"rendera"))) (CVar (4,"env"))) (CVar (7,"rab"))) []] (CApply (CApply (CApply (CApply (CApply (CSymbol ("WUI","checkValue")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (8,"rv"))) (CSymbol ("Prelude","Nothing")))) (CApply (CSymbol ("WUI","WLeaf")) (CApply (CSymbol ("Maybe","fromJust")) (CVar (8,"rv"))))) (CSymbol ("Prelude","head"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (9,"he"))) (CSymbol ("Prelude","[]")))) (CApply (CSymbol ("WUI","altstate2state")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CLit (CIntc 1))) (CVar (10,"rst")))))),CBranch (CPLit (CIntc 2)) (CLetDecl [CLocalPat (CPVar (11,"rvs")) (CApply (CApply (CSymbol ("Prelude","map")) (CApply (CApply (CSymbol ("WUI","readTree")) (CVar (3,"wpar"))) (CVar (4,"env")))) (CApply (CSymbol ("WUI","state2states")) (CVar (7,"rab")))) []] (CApply (CApply (CApply (CApply (CApply (CSymbol ("WUI","checkValue")) (CApply (CApply (CSymbol ("Prelude","elem")) (CSymbol ("Prelude","Nothing"))) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("Prelude","fst"))) (CVar (11,"rvs"))))) (CApply (CSymbol ("WUI","WNode")) (CApply (CApply (CSymbol ("Prelude","map")) (CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Maybe","fromJust"))) (CSymbol ("Prelude","fst")))) (CVar (11,"rvs"))))) (CApply (CSymbol ("WUI","renderOf")) (CVar (3,"wpar")))) (CApply (CApply (CSymbol ("Prelude","map")) (CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Prelude","fst"))) (CSymbol ("Prelude","snd")))) (CVar (11,"rvs")))) (CApply (CSymbol ("WUI","altstate2state")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CLit (CIntc 2))) (CApply (CSymbol ("WUI","states2state")) (CApply (CApply (CSymbol ("Prelude","map")) (CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("Prelude","snd"))) (CSymbol ("Prelude","snd")))) (CVar (11,"rvs"))))))))]))] [CLocalFunc (CFunc ("WUI","checkValue") 5 Private (CFuncType (CTCons ("Prelude","Bool") []) (CFuncType (CTCons ("WUI","WTree") [CTVar (1,"_1539")]) (CFuncType (CFuncType (CTCons ("Prelude","[]") [CTCons ("HTML","HtmlExp") []]) (CTCons ("HTML","HtmlExp") [])) (CFuncType (CTCons ("Prelude","[]") [CTCons ("HTML","HtmlExp") []]) (CFuncType (CTVar (0,"a")) (CTCons ("Prelude","(,)") [CTCons ("Prelude","Maybe") [CTCons ("WUI","WTree") [CTVar (1,"_1539")]],CTCons ("Prelude","(,)") [CTCons ("HTML","HtmlExp") [],CTVar (0,"a")]])))))) (CRules CFlex [CRule [CPVar (6,"isnothing"),CPVar (7,"value"),CPVar (8,"rendertree"),CPVar (9,"hexps"),CPVar (10,"altstate")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CVar (6,"isnothing"))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CSymbol ("Prelude","Nothing"))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CVar (8,"rendertree")) (CVar (9,"hexps")))) (CVar (10,"altstate"))))) (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("WUI","conditionOf")) (CVar (3,"wpar"))) (CVar (7,"value")))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CSymbol ("Prelude","Just")) (CVar (7,"value")))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CVar (8,"rendertree")) (CVar (9,"hexps")))) (CVar (10,"altstate"))))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CSymbol ("Prelude","Nothing"))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CApply (CSymbol ("WUI","renderError")) (CVar (8,"rendertree"))) (CApply (CSymbol ("WUI","errorOf")) (CVar (3,"wpar")))) (CVar (9,"hexps")))) (CVar (10,"altstate"))))))] []]))]]))]]),
  CFunc ("WUI","renderTuple") 1 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("HTML","HtmlExp") []]) (CTCons ("HTML","HtmlExp") [])) (CRules CFlex [CRule [CPVar (0,"hexps")] [(CSymbol ("Prelude","success"),CApply (CSymbol ("HTML","table")) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude","map")) (CLambda [CPVar (1,"h")] (CApply (CApply (CSymbol ("Prelude",":")) (CVar (1,"h"))) (CSymbol ("Prelude","[]"))))) (CVar (0,"hexps")))) (CSymbol ("Prelude","[]"))))] []]),
  CFunc ("WUI","unRenderTuple") 1 Private (CFuncType (CTCons ("HTML","HtmlExp") []) (CTCons ("Prelude","[]") [CTCons ("HTML","HtmlExp") []])) (CRules CFlex [CRule [CPVar (0,"hexp")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CSymbol ("WUI","isTupleTable")) (CVar (0,"hexp")))) (CApply (CSymbol ("WUI","getTupleTableElems")) (CVar (0,"hexp")))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (0,"hexp"))) (CSymbol ("Prelude","[]"))))] [CLocalFunc (CFunc ("WUI","isTupleTable") 1 Private (CFuncType (CTCons ("HTML","HtmlExp") []) (CTCons ("Prelude","Bool") [])) (CRules CFlex [CRule [CPVar (1,"he")] [(CSymbol ("Prelude","success"),CCase (CVar (1,"he")) [CBranch (CPComb ("HTML","HtmlStruct") [CPComb ("Prelude",":") [CPLit (CCharc 't'),CPComb ("Prelude",":") [CPLit (CCharc 'a'),CPComb ("Prelude",":") [CPLit (CCharc 'b'),CPComb ("Prelude",":") [CPLit (CCharc 'l'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude","[]") []]]]]],CPComb ("Prelude","[]") [],CPComb ("Prelude",":") [CPComb ("HTML","HtmlStruct") [CPComb ("Prelude",":") [CPLit (CCharc 't'),CPComb ("Prelude",":") [CPLit (CCharc 'r'),CPComb ("Prelude","[]") []]],CPComb ("Prelude","[]") [],CPVar (2,"tds")],CPComb ("Prelude","[]") []]]) (CApply (CApply (CSymbol ("Prelude","all")) (CSymbol ("WUI","isSingleElem"))) (CVar (2,"tds"))),CBranch (CPVar (3,"_")) (CSymbol ("Prelude","False"))])] []])),CLocalFunc (CFunc ("WUI","isSingleElem") 1 Private (CFuncType (CTCons ("HTML","HtmlExp") []) (CTCons ("Prelude","Bool") [])) (CRules CFlex [CRule [CPVar (1,"he")] [(CSymbol ("Prelude","success"),CCase (CVar (1,"he")) [CBranch (CPComb ("HTML","HtmlStruct") [CPComb ("Prelude",":") [CPLit (CCharc 't'),CPComb ("Prelude",":") [CPLit (CCharc 'd'),CPComb ("Prelude","[]") []]],CPVar (2,"_"),CPComb ("Prelude",":") [CPVar (3,"_"),CPComb ("Prelude","[]") []]]) (CSymbol ("Prelude","True")),CBranch (CPVar (4,"_")) (CSymbol ("Prelude","False"))])] []])),CLocalFunc (CFunc ("WUI","getTupleTableElems") 1 Private (CFuncType (CTCons ("HTML","HtmlExp") []) (CTCons ("Prelude","[]") [CTCons ("HTML","HtmlExp") []])) (CRules CFlex [CRule [CPComb ("HTML","HtmlStruct") [CPComb ("Prelude",":") [CPLit (CCharc 't'),CPComb ("Prelude",":") [CPLit (CCharc 'a'),CPComb ("Prelude",":") [CPLit (CCharc 'b'),CPComb ("Prelude",":") [CPLit (CCharc 'l'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude","[]") []]]]]],CPComb ("Prelude","[]") [],CPComb ("Prelude",":") [CPComb ("HTML","HtmlStruct") [CPComb ("Prelude",":") [CPLit (CCharc 't'),CPComb ("Prelude",":") [CPLit (CCharc 'r'),CPComb ("Prelude","[]") []]],CPComb ("Prelude","[]") [],CPVar (1,"tds")],CPComb ("Prelude","[]") []]]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","map")) (CLambda [CPComb ("HTML","HtmlStruct") [CPComb ("Prelude",":") [CPLit (CCharc 't'),CPComb ("Prelude",":") [CPLit (CCharc 'd'),CPComb ("Prelude","[]") []]],CPVar (2,"_"),CPComb ("Prelude",":") [CPVar (3,"e"),CPComb ("Prelude","[]") []]]] (CVar (3,"e")))) (CVar (1,"tds")))] []]))]]),
  CFunc ("WUI","tupleError") 0 Private (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'I'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'g'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'b'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ':'))) (CSymbol ("Prelude","[]"))))))))))))))))))))))] []]),
  CFunc ("WUI","renderTaggedTuple") 2 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("HTML","HtmlExp") []]) (CTCons ("HTML","HtmlExp") []))) (CRules CFlex [CRule [CPVar (0,"tags"),CPVar (1,"hexps")] [(CSymbol ("Prelude","success"),CApply (CSymbol ("HTML","table")) (CApply (CApply (CSymbol ("Prelude","map")) (CLambda [CPComb ("Prelude","(,)") [CPVar (2,"t"),CPVar (3,"h")]] (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("HTML","bold")) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("HTML","htxt")) (CVar (2,"t")))) (CSymbol ("Prelude","[]"))))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (3,"h"))) (CSymbol ("Prelude","[]")))) (CSymbol ("Prelude","[]")))))) (CApply (CApply (CSymbol ("Prelude","zip")) (CVar (0,"tags"))) (CVar (1,"hexps")))))] []]),
  CFunc ("WUI","renderList") 1 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("HTML","HtmlExp") []]) (CTCons ("HTML","HtmlExp") [])) (CRules CFlex [CRule [CPVar (0,"hexps")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("HTML","addAttr")) (CApply (CSymbol ("WUI","mergeTableOfTable")) (CApply (CSymbol ("HTML","table")) (CApply (CApply (CSymbol ("Prelude","map")) (CLambda [CPVar (1,"h")] (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (1,"h"))) (CSymbol ("Prelude","[]")))) (CSymbol ("Prelude","[]"))))) (CVar (0,"hexps")))))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'b'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CSymbol ("Prelude","[]"))))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '1'))) (CSymbol ("Prelude","[]")))))] []]),
  CFunc ("WUI","renderError") 3 Private (CFuncType (CFuncType (CTCons ("Prelude","[]") [CTCons ("HTML","HtmlExp") []]) (CTCons ("HTML","HtmlExp") [])) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("HTML","HtmlExp") []]) (CTCons ("HTML","HtmlExp") [])))) (CRules CFlex [CRule [CPVar (0,"render"),CPVar (1,"errmsg"),CPVar (2,"hexps")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("HTML","addAttr")) (CApply (CSymbol ("HTML","table")) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("WUI","boldRedTxt")) (CVar (1,"errmsg")))) (CSymbol ("Prelude","[]")))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CVar (0,"render")) (CVar (2,"hexps")))) (CSymbol ("Prelude","[]")))) (CSymbol ("Prelude","[]")))) (CSymbol ("Prelude","[]")))))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'b'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'g'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CSymbol ("Prelude","[]")))))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '#'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'f'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'f'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'f'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'f'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '0'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '0'))) (CSymbol ("Prelude","[]")))))))))))] []]),
  CFunc ("WUI","boldRedTxt") 1 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("HTML","HtmlExp") [])) (CRules CFlex [CRule [CPVar (0,"s")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("HTML","HtmlStruct")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'f'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CSymbol ("Prelude","[]"))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CSymbol ("Prelude","[]")))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '#'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'f'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'f'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '0'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '0'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '0'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '0'))) (CSymbol ("Prelude","[]"))))))))))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("HTML","bold")) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("HTML","htxt")) (CVar (0,"s")))) (CSymbol ("Prelude","[]"))))) (CSymbol ("Prelude","[]"))))] []]),
  CFunc ("WUI","mergeTableOfTable") 1 Private (CFuncType (CTCons ("HTML","HtmlExp") []) (CTCons ("HTML","HtmlExp") [])) (CRules CFlex [CRule [CPComb ("HTML","HtmlStruct") [CPComb ("Prelude",":") [CPLit (CCharc 't'),CPComb ("Prelude",":") [CPLit (CCharc 'a'),CPComb ("Prelude",":") [CPLit (CCharc 'b'),CPComb ("Prelude",":") [CPLit (CCharc 'l'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude","[]") []]]]]],CPVar (0,"attrs"),CPVar (1,"rows")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("HTML","HtmlStruct")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'b'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]")))))))) (CVar (0,"attrs"))) (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","all")) (CSymbol ("WUI","isRowWithSingleTableData"))) (CVar (1,"rows")))) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("WUI","mergeRowWithSingleTableData"))) (CVar (1,"rows")))) (CVar (1,"rows"))))] []]),
  CFunc ("WUI","isRowWithSingleTableData") 1 Private (CFuncType (CTCons ("HTML","HtmlExp") []) (CTCons ("Prelude","Bool") [])) (CRules CFlex [CRule [CPVar (0,"row")] [(CSymbol ("Prelude","success"),CCase (CVar (0,"row")) [CBranch (CPComb ("HTML","HtmlStruct") [CPComb ("Prelude",":") [CPLit (CCharc 't'),CPComb ("Prelude",":") [CPLit (CCharc 'r'),CPComb ("Prelude","[]") []]],CPComb ("Prelude","[]") [],CPComb ("Prelude",":") [CPComb ("HTML","HtmlStruct") [CPComb ("Prelude",":") [CPLit (CCharc 't'),CPComb ("Prelude",":") [CPLit (CCharc 'd'),CPComb ("Prelude","[]") []]],CPComb ("Prelude","[]") [],CPComb ("Prelude",":") [CPComb ("HTML","HtmlStruct") [CPComb ("Prelude",":") [CPLit (CCharc 't'),CPComb ("Prelude",":") [CPLit (CCharc 'a'),CPComb ("Prelude",":") [CPLit (CCharc 'b'),CPComb ("Prelude",":") [CPLit (CCharc 'l'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude","[]") []]]]]],CPVar (1,"_"),CPComb ("Prelude",":") [CPComb ("HTML","HtmlStruct") [CPComb ("Prelude",":") [CPLit (CCharc 't'),CPComb ("Prelude",":") [CPLit (CCharc 'r'),CPComb ("Prelude","[]") []]],CPVar (2,"_"),CPVar (3,"_")],CPComb ("Prelude","[]") []]],CPComb ("Prelude","[]") []]],CPComb ("Prelude","[]") []]]) (CSymbol ("Prelude","True")),CBranch (CPVar (4,"_")) (CSymbol ("Prelude","False"))])] []]),
  CFunc ("WUI","mergeRowWithSingleTableData") 1 Private (CFuncType (CTCons ("HTML","HtmlExp") []) (CTCons ("HTML","HtmlExp") [])) (CRules CFlex [CRule [CPComb ("HTML","HtmlStruct") [CPComb ("Prelude",":") [CPLit (CCharc 't'),CPComb ("Prelude",":") [CPLit (CCharc 'r'),CPComb ("Prelude","[]") []]],CPComb ("Prelude","[]") [],CPComb ("Prelude",":") [CPComb ("HTML","HtmlStruct") [CPComb ("Prelude",":") [CPLit (CCharc 't'),CPComb ("Prelude",":") [CPLit (CCharc 'd'),CPComb ("Prelude","[]") []]],CPComb ("Prelude","[]") [],CPComb ("Prelude",":") [CPComb ("HTML","HtmlStruct") [CPComb ("Prelude",":") [CPLit (CCharc 't'),CPComb ("Prelude",":") [CPLit (CCharc 'a'),CPComb ("Prelude",":") [CPLit (CCharc 'b'),CPComb ("Prelude",":") [CPLit (CCharc 'l'),CPComb ("Prelude",":") [CPLit (CCharc 'e'),CPComb ("Prelude","[]") []]]]]],CPVar (0,"_"),CPComb ("Prelude",":") [CPVar (1,"row"),CPComb ("Prelude","[]") []]],CPComb ("Prelude","[]") []]],CPComb ("Prelude","[]") []]]] [(CSymbol ("Prelude","success"),CVar (1,"row"))] []]),
  CFunc ("WUI","mainWUI") 3 Public (CFuncType (CTCons ("WUI","WuiSpec") [CTVar (0,"a")]) (CFuncType (CTVar (0,"a")) (CFuncType (CFuncType (CTVar (0,"a")) (CTCons ("Prelude","IO") [CTCons ("HTML","HtmlForm") []])) (CTCons ("Prelude","IO") [CTCons ("HTML","HtmlForm") []])))) (CRules CFlex [CRule [CPVar (0,"wuispec"),CPVar (1,"val"),CPVar (2,"store")] [(CSymbol ("Prelude","success"),CDoExpr [CSLet [CLocalPat (CPComb ("Prelude","(,)") [CPVar (3,"hexp"),CPVar (4,"handler")]) (CApply (CApply (CApply (CSymbol ("WUI","wui2html")) (CVar (0,"wuispec"))) (CVar (1,"val"))) (CVar (2,"store"))) []],CSExpr (CApply (CApply (CSymbol ("Prelude","$")) (CSymbol ("Prelude","return"))) (CApply (CApply (CSymbol ("HTML","form")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'W'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'U'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'I'))) (CSymbol ("Prelude","[]")))))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (3,"hexp"))) (CApply (CApply (CSymbol ("Prelude",":")) (CSymbol ("HTML","breakline"))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("WUI","wuiHandler2button")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'S'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'b'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CSymbol ("Prelude","[]"))))))))) (CVar (4,"handler")))) (CSymbol ("Prelude","[]")))))))])] []]),
  CFunc ("WUI","wui2html") 3 Public (CFuncType (CTCons ("WUI","WuiSpec") [CTVar (0,"a")]) (CFuncType (CTVar (0,"a")) (CFuncType (CFuncType (CTVar (0,"a")) (CTCons ("Prelude","IO") [CTCons ("HTML","HtmlForm") []])) (CTCons ("Prelude","(,)") [CTCons ("HTML","HtmlExp") [],CTCons ("WUI","WuiHandler") []])))) (CRules CFlex [CRule [CPVar (0,"wspec"),CPVar (1,"val"),CPVar (2,"store")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CSymbol ("WUI","wuiWithErrorForm")) (CVar (0,"wspec"))) (CVar (1,"val"))) (CVar (2,"store"))) (CSymbol ("WUI","standardErrorForm")))] []]),
  CFunc ("WUI","standardErrorForm") 2 Private (CFuncType (CTCons ("HTML","HtmlExp") []) (CFuncType (CTCons ("WUI","WuiHandler") []) (CTCons ("Prelude","IO") [CTCons ("HTML","HtmlForm") []]))) (CRules CFlex [CRule [CPVar (0,"hexp"),CPVar (1,"whandler")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","$")) (CSymbol ("Prelude","return"))) (CApply (CApply (CSymbol ("HTML","standardForm")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'I'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CSymbol ("Prelude","[]")))))))))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (0,"hexp"))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("WUI","wuiHandler2button")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'S'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'b'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'm'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CSymbol ("Prelude","[]"))))))))) (CVar (1,"whandler")))) (CSymbol ("Prelude","[]"))))))] []]),
  CFunc ("WUI","wuiInForm") 4 Public (CFuncType (CTCons ("WUI","WuiSpec") [CTVar (0,"a")]) (CFuncType (CTVar (0,"a")) (CFuncType (CFuncType (CTVar (0,"a")) (CTCons ("Prelude","IO") [CTCons ("HTML","HtmlForm") []])) (CFuncType (CFuncType (CTCons ("HTML","HtmlExp") []) (CFuncType (CTCons ("WUI","WuiHandler") []) (CTCons ("Prelude","IO") [CTCons ("HTML","HtmlForm") []]))) (CTCons ("Prelude","IO") [CTCons ("HTML","HtmlForm") []]))))) (CRules CFlex [CRule [CPVar (0,"wspec"),CPVar (1,"val"),CPVar (2,"store"),CPVar (3,"userform")] [(CSymbol ("Prelude","success"),CApply (CSymbol ("WUI","answerForm")) (CApply (CApply (CApply (CApply (CSymbol ("WUI","wuiWithErrorForm")) (CVar (0,"wspec"))) (CVar (1,"val"))) (CVar (2,"store"))) (CVar (3,"userform"))))] [CLocalFunc (CFunc ("WUI","answerForm") 1 Private (CFuncType (CTCons ("Prelude","(,)") [CTCons ("HTML","HtmlExp") [],CTCons ("WUI","WuiHandler") []]) (CTCons ("Prelude","IO") [CTCons ("HTML","HtmlForm") []])) (CRules CFlex [CRule [CPComb ("Prelude","(,)") [CPVar (4,"hexp"),CPVar (5,"whandler")]] [(CSymbol ("Prelude","success"),CApply (CApply (CVar (3,"userform")) (CVar (4,"hexp"))) (CVar (5,"whandler")))] []]))]]),
  CFunc ("WUI","wuiWithErrorForm") 4 Public (CFuncType (CTCons ("WUI","WuiSpec") [CTVar (0,"a")]) (CFuncType (CTVar (0,"a")) (CFuncType (CFuncType (CTVar (0,"a")) (CTCons ("Prelude","IO") [CTCons ("HTML","HtmlForm") []])) (CFuncType (CFuncType (CTCons ("HTML","HtmlExp") []) (CFuncType (CTCons ("WUI","WuiHandler") []) (CTCons ("Prelude","IO") [CTCons ("HTML","HtmlForm") []]))) (CTCons ("Prelude","(,)") [CTCons ("HTML","HtmlExp") [],CTCons ("WUI","WuiHandler") []]))))) (CRules CFlex [CRule [CPVar (0,"wspec"),CPVar (1,"val"),CPVar (2,"store"),CPVar (3,"errorform")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CApply (CSymbol ("WUI","showAndReadWUI")) (CVar (0,"wspec"))) (CVar (2,"store"))) (CVar (3,"errorform"))) (CApply (CApply (CSymbol ("WUI","generateWUI")) (CVar (0,"wspec"))) (CVar (1,"val"))))] []]),
  CFunc ("WUI","generateWUI") 2 Private (CFuncType (CTCons ("WUI","WuiSpec") [CTVar (0,"a")]) (CFuncType (CTVar (0,"a")) (CTCons ("Prelude","(,)") [CTCons ("HTML","HtmlExp") [],CFuncType (CFuncType (CTCons ("HTML","CgiRef") []) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CTCons ("Prelude","(,)") [CTCons ("Prelude","Maybe") [CTVar (0,"a")],CTCons ("Prelude","(,)") [CTCons ("HTML","HtmlExp") [],CTCons ("WUI","WuiState") []]])]))) (CRules CFlex [CRule [CPComb ("WUI","WuiSpec") [CPVar (0,"wparams"),CPVar (1,"showhtml"),CPVar (2,"readval")],CPVar (3,"val")] [(CSymbol ("Prelude","success"),CApply (CSymbol ("WUI","hst2result")) (CApply (CApply (CVar (1,"showhtml")) (CVar (0,"wparams"))) (CVar (3,"val"))))] [CLocalFunc (CFunc ("WUI","hst2result") 1 Private (CFuncType (CTCons ("Prelude","(,)") [CTVar (0,"a"),CTCons ("WUI","WuiState") []]) (CTCons ("Prelude","(,)") [CTVar (0,"a"),CFuncType (CFuncType (CTCons ("HTML","CgiRef") []) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CTCons ("Prelude","(,)") [CTCons ("Prelude","Maybe") [CTVar (1,"_1598")],CTCons ("Prelude","(,)") [CTCons ("HTML","HtmlExp") [],CTCons ("WUI","WuiState") []]])])) (CRules CFlex [CRule [CPComb ("Prelude","(,)") [CPVar (4,"htmledits"),CPVar (5,"wstate")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","(,)")) (CVar (4,"htmledits"))) (CLambda [CPVar (6,"env")] (CApply (CApply (CApply (CVar (2,"readval")) (CVar (0,"wparams"))) (CVar (6,"env"))) (CVar (5,"wstate")))))] []]))]]),
  CFunc ("WUI","showAndReadWUI") 4 Private (CFuncType (CTCons ("WUI","WuiSpec") [CTVar (0,"a")]) (CFuncType (CFuncType (CTVar (0,"a")) (CTCons ("Prelude","IO") [CTCons ("HTML","HtmlForm") []])) (CFuncType (CFuncType (CTCons ("HTML","HtmlExp") []) (CFuncType (CTCons ("WUI","WuiHandler") []) (CTCons ("Prelude","IO") [CTCons ("HTML","HtmlForm") []]))) (CFuncType (CTCons ("Prelude","(,)") [CTCons ("HTML","HtmlExp") [],CFuncType (CFuncType (CTCons ("HTML","CgiRef") []) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CTCons ("Prelude","(,)") [CTCons ("Prelude","Maybe") [CTVar (0,"a")],CTCons ("Prelude","(,)") [CTCons ("HTML","HtmlExp") [],CTCons ("WUI","WuiState") []]])]) (CTCons ("Prelude","(,)") [CTCons ("HTML","HtmlExp") [],CTCons ("WUI","WuiHandler") []]))))) (CRules CFlex [CRule [CPVar (0,"wspec"),CPVar (1,"store"),CPVar (2,"errorform"),CPComb ("Prelude","(,)") [CPVar (3,"htmledits"),CPVar (4,"readenv")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","(,)")) (CVar (3,"htmledits"))) (CApply (CSymbol ("WUI","WHandler")) (CApply (CSymbol ("WUI","htmlhandler")) (CVar (0,"wspec")))))] [CLocalFunc (CFunc ("WUI","htmlhandler") 2 Private (CFuncType (CTCons ("WUI","WuiSpec") [CTVar (1,"_1628")]) (CFuncType (CFuncType (CTCons ("HTML","CgiRef") []) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CTCons ("Prelude","IO") [CTCons ("HTML","HtmlForm") []]))) (CRules CFlex [CRule [CPAs (8,"wui") (CPComb ("WUI","WuiSpec") [CPVar (5,"wparams"),CPVar (6,"_"),CPVar (7,"readval")]),CPVar (9,"env")] [(CSymbol ("Prelude","success"),CLetDecl [CLocalPat (CPComb ("Prelude","(,)") [CPVar (10,"mbnewval"),CPComb ("Prelude","(,)") [CPVar (11,"htmlerrform"),CPVar (12,"errwstate")]]) (CApply (CVar (4,"readenv")) (CVar (9,"env"))) []] (CApply (CApply (CApply (CSymbol ("Prelude","maybe")) (CLetDecl [CLocalPat (CPComb ("Prelude","(,)") [CPVar (13,"errhexp"),CPVar (14,"errhdl")]) (CApply (CApply (CApply (CApply (CSymbol ("WUI","showAndReadWUI")) (CVar (8,"wui"))) (CVar (1,"store"))) (CVar (2,"errorform"))) (CApply (CApply (CSymbol ("Prelude","(,)")) (CVar (11,"htmlerrform"))) (CLambda [CPVar (15,"errenv")] (CApply (CApply (CApply (CVar (7,"readval")) (CVar (5,"wparams"))) (CVar (15,"errenv"))) (CVar (12,"errwstate")))))) []] (CApply (CApply (CVar (2,"errorform")) (CVar (13,"errhexp"))) (CVar (14,"errhdl"))))) (CLambda [CPVar (16,"newval")] (CApply (CApply (CSymbol ("Prelude","seq")) (CApply (CSymbol ("Prelude","normalForm")) (CVar (16,"newval")))) (CApply (CVar (1,"store")) (CVar (16,"newval")))))) (CVar (10,"mbnewval"))))] []]))]])]
 [COp ("WUI","withRendering") CInfixlOp 0,COp ("WUI","withError") CInfixlOp 0,COp ("WUI","withCondition") CInfixlOp 0]
