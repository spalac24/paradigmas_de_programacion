CurryProg "JavaScript"
 ["Prelude","List"]
 [CType ("JavaScript","JSExp") Public [] [CCons ("JavaScript","JSString") 1 Public [CTCons ("Prelude","String") []],CCons ("JavaScript","JSInt") 1 Public [CTCons ("Prelude","Int") []],CCons ("JavaScript","JSBool") 1 Public [CTCons ("Prelude","Bool") []],CCons ("JavaScript","JSIVar") 1 Public [CTCons ("Prelude","Int") []],CCons ("JavaScript","JSIArrayIdx") 2 Public [CTCons ("Prelude","Int") [],CTCons ("Prelude","Int") []],CCons ("JavaScript","JSOp") 3 Public [CTCons ("Prelude","String") [],CTCons ("JavaScript","JSExp") [],CTCons ("JavaScript","JSExp") []],CCons ("JavaScript","JSFCall") 2 Public [CTCons ("Prelude","String") [],CTCons ("Prelude","[]") [CTCons ("JavaScript","JSExp") []]],CCons ("JavaScript","JSApply") 2 Public [CTCons ("JavaScript","JSExp") [],CTCons ("JavaScript","JSExp") []],CCons ("JavaScript","JSLambda") 2 Public [CTCons ("Prelude","[]") [CTCons ("Prelude","Int") []],CTCons ("Prelude","[]") [CTCons ("JavaScript","JSStat") []]]],
  CType ("JavaScript","JSStat") Public [] [CCons ("JavaScript","JSAssign") 2 Public [CTCons ("JavaScript","JSExp") [],CTCons ("JavaScript","JSExp") []],CCons ("JavaScript","JSIf") 3 Public [CTCons ("JavaScript","JSExp") [],CTCons ("Prelude","[]") [CTCons ("JavaScript","JSStat") []],CTCons ("Prelude","[]") [CTCons ("JavaScript","JSStat") []]],CCons ("JavaScript","JSSwitch") 2 Public [CTCons ("JavaScript","JSExp") [],CTCons ("Prelude","[]") [CTCons ("JavaScript","JSBranch") []]],CCons ("JavaScript","JSPCall") 2 Public [CTCons ("Prelude","String") [],CTCons ("Prelude","[]") [CTCons ("JavaScript","JSExp") []]],CCons ("JavaScript","JSReturn") 1 Public [CTCons ("JavaScript","JSExp") []],CCons ("JavaScript","JSVarDecl") 1 Public [CTCons ("Prelude","Int") []]],
  CType ("JavaScript","JSBranch") Public [] [CCons ("JavaScript","JSCase") 2 Public [CTCons ("Prelude","String") [],CTCons ("Prelude","[]") [CTCons ("JavaScript","JSStat") []]],CCons ("JavaScript","JSDefault") 1 Public [CTCons ("Prelude","[]") [CTCons ("JavaScript","JSStat") []]]],
  CType ("JavaScript","JSFDecl") Public [] [CCons ("JavaScript","JSFDecl") 3 Public [CTCons ("Prelude","String") [],CTCons ("Prelude","[]") [CTCons ("Prelude","Int") []],CTCons ("Prelude","[]") [CTCons ("JavaScript","JSStat") []]]]]
 [CFunc ("JavaScript","showJSExp") 1 Public (CFuncType (CTCons ("JavaScript","JSExp") []) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CRules CFlex [CRule [CPComb ("JavaScript","JSString") [CPVar (0,"s")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '"'))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (0,"s"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '"'))) (CSymbol ("Prelude","[]")))))] [],CRule [CPComb ("JavaScript","JSInt") [CPVar (1,"i")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Prelude","show")) (CVar (1,"i")))] [],CRule [CPComb ("JavaScript","JSBool") [CPVar (2,"b")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CVar (2,"b"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]"))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'f'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CSymbol ("Prelude","[]"))))))))] [],CRule [CPComb ("JavaScript","JSIVar") [CPVar (3,"i")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'x'))) (CSymbol ("Prelude","[]")))) (CApply (CSymbol ("Prelude","show")) (CVar (3,"i"))))] [],CRule [CPComb ("JavaScript","JSIArrayIdx") [CPVar (4,"ai"),CPVar (5,"i")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'x'))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("Prelude","show")) (CVar (4,"ai")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '['))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("Prelude","show")) (CVar (5,"i")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ']'))) (CSymbol ("Prelude","[]")))))))] [],CRule [CPComb ("JavaScript","JSOp") [CPVar (6,"op"),CPVar (7,"e1"),CPVar (8,"e2")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '('))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("JavaScript","showJSExp")) (CVar (7,"e1")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (6,"op"))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("JavaScript","showJSExp")) (CVar (8,"e2")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ')'))) (CSymbol ("Prelude","[]")))))))))] [],CRule [CPComb ("JavaScript","JSFCall") [CPVar (9,"f"),CPVar (10,"args")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CVar (9,"f"))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '('))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("Prelude","concat")) (CApply (CApply (CSymbol ("List","intersperse")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ','))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("JavaScript","showJSExp"))) (CVar (10,"args")))))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ')'))) (CSymbol ("Prelude","[]"))))))] [],CRule [CPComb ("JavaScript","JSApply") [CPVar (11,"f"),CPVar (12,"e")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("JavaScript","showJSExp")) (CVar (11,"f")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '('))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("JavaScript","showJSExp")) (CVar (12,"e")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ')'))) (CSymbol ("Prelude","[]"))))))] [],CRule [CPComb ("JavaScript","JSLambda") [CPVar (13,"params"),CPVar (14,"body")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'f'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '('))) (CSymbol ("Prelude","[]")))))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("Prelude","concat")) (CApply (CApply (CSymbol ("List","intersperse")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ','))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude","map")) (CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("JavaScript","showJSExp"))) (CSymbol ("JavaScript","JSIVar")))) (CVar (13,"params")))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ')'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '{'))) (CSymbol ("Prelude","[]")))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude","concatMap")) (CApply (CSymbol ("JavaScript","showJSStat")) (CLit (CIntc 1)))) (CVar (14,"body")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '}'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]"))))))))] []]),
  CFunc ("JavaScript","showJSStat") 2 Public (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("JavaScript","JSStat") []) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]))) (CRules CFlex [CRule [CPVar (0,"i"),CPComb ("JavaScript","JSAssign") [CPVar (1,"e1"),CPVar (2,"e2")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("JavaScript","blanks")) (CVar (0,"i")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("JavaScript","showJSExp")) (CVar (1,"e1")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '='))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]")))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("JavaScript","showJSExp")) (CVar (2,"e2")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ';'))) (CSymbol ("Prelude","[]")))))))] [],CRule [CPVar (3,"i"),CPComb ("JavaScript","JSIf") [CPVar (4,"e"),CPVar (5,"s1"),CPVar (6,"s2")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("JavaScript","blanks")) (CVar (3,"i")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'f'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '('))) (CSymbol ("Prelude","[]"))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("JavaScript","showJSExp")) (CVar (4,"e")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ')'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '{'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CSymbol ("Prelude","[]"))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude","concatMap")) (CApply (CApply (CSymbol ("Prelude",".")) (CLambda [CPVar (7,"x0")] (CApply (CApply (CSymbol ("Prelude","++")) (CVar (7,"x0"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CSymbol ("Prelude","[]")))))) (CApply (CSymbol ("JavaScript","showJSStat")) (CApply (CApply (CSymbol ("Prelude","+")) (CVar (3,"i"))) (CLit (CIntc 2)))))) (CVar (5,"s1")))) (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CSymbol ("Prelude","null")) (CVar (6,"s2")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("JavaScript","blanks")) (CVar (3,"i")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '}'))) (CSymbol ("Prelude","[]"))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("JavaScript","blanks")) (CVar (3,"i")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '}'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '{'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CSymbol ("Prelude","[]")))))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude","concatMap")) (CApply (CApply (CSymbol ("Prelude",".")) (CLambda [CPVar (8,"x0")] (CApply (CApply (CSymbol ("Prelude","++")) (CVar (8,"x0"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CSymbol ("Prelude","[]")))))) (CApply (CSymbol ("JavaScript","showJSStat")) (CApply (CApply (CSymbol ("Prelude","+")) (CVar (3,"i"))) (CLit (CIntc 2)))))) (CVar (6,"s2")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("JavaScript","blanks")) (CVar (3,"i")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '}'))) (CSymbol ("Prelude","[]")))))))))))))] [],CRule [CPVar (9,"i"),CPComb ("JavaScript","JSSwitch") [CPVar (10,"e"),CPVar (11,"bs")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("JavaScript","blanks")) (CVar (9,"i")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'w'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'h'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '('))) (CSymbol ("Prelude","[]"))))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("JavaScript","showJSExp")) (CVar (10,"e")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ')'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '{'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CSymbol ("Prelude","[]"))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude","concatMap")) (CSymbol ("JavaScript","showJSBranch"))) (CVar (11,"bs")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("JavaScript","blanks")) (CVar (9,"i")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '}'))) (CSymbol ("Prelude","[]")))))))))] [CLocalFunc (CFunc ("JavaScript","showJSBranch") 1 Private (CFuncType (CTCons ("JavaScript","JSBranch") []) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CRules CFlex [CRule [CPComb ("JavaScript","JSCase") [CPVar (12,"cs"),CPVar (13,"bstats")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("JavaScript","blanks")) (CApply (CApply (CSymbol ("Prelude","+")) (CVar (9,"i"))) (CLit (CIntc 2))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '"'))) (CSymbol ("Prelude","[]"))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (12,"cs"))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '"'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ':'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CSymbol ("Prelude","[]"))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude","concatMap")) (CApply (CApply (CSymbol ("Prelude",".")) (CLambda [CPVar (14,"x0")] (CApply (CApply (CSymbol ("Prelude","++")) (CVar (14,"x0"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CSymbol ("Prelude","[]")))))) (CApply (CSymbol ("JavaScript","showJSStat")) (CApply (CApply (CSymbol ("Prelude","+")) (CVar (9,"i"))) (CLit (CIntc 4)))))) (CVar (13,"bstats")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("JavaScript","blanks")) (CApply (CApply (CSymbol ("Prelude","+")) (CVar (9,"i"))) (CLit (CIntc 4))))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'b'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'k'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ';'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CSymbol ("Prelude","[]")))))))))))))))] [],CRule [CPComb ("JavaScript","JSDefault") [CPVar (15,"bstats")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("JavaScript","blanks")) (CApply (CApply (CSymbol ("Prelude","+")) (CVar (9,"i"))) (CLit (CIntc 2))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'd'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'f'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'l'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ':'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CSymbol ("Prelude","[]"))))))))))))) (CApply (CApply (CSymbol ("Prelude","concatMap")) (CApply (CApply (CSymbol ("Prelude",".")) (CLambda [CPVar (16,"x0")] (CApply (CApply (CSymbol ("Prelude","++")) (CVar (16,"x0"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CSymbol ("Prelude","[]")))))) (CApply (CSymbol ("JavaScript","showJSStat")) (CApply (CApply (CSymbol ("Prelude","+")) (CVar (9,"i"))) (CLit (CIntc 4)))))) (CVar (15,"bstats")))))] []]))],CRule [CPVar (12,"i"),CPComb ("JavaScript","JSPCall") [CPVar (13,"p"),CPVar (14,"args")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("JavaScript","blanks")) (CVar (12,"i")))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (13,"p"))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '('))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("Prelude","concat")) (CApply (CApply (CSymbol ("List","intersperse")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ','))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("JavaScript","showJSExp"))) (CVar (14,"args")))))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ')'))) (CSymbol ("Prelude","[]")))))))] [],CRule [CPVar (15,"i"),CPComb ("JavaScript","JSReturn") [CPVar (16,"e")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("JavaScript","blanks")) (CVar (15,"i")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]")))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("JavaScript","showJSExp")) (CVar (16,"e")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ';'))) (CSymbol ("Prelude","[]"))))))] [],CRule [CPVar (17,"i"),CPComb ("JavaScript","JSVarDecl") [CPVar (18,"vi")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("JavaScript","blanks")) (CVar (17,"i")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'v'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'x'))) (CSymbol ("Prelude","[]")))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("Prelude","show")) (CVar (18,"vi")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ';'))) (CSymbol ("Prelude","[]"))))))] []]),
  CFunc ("JavaScript","blanks") 1 Private (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CRules CFlex [CRule [CPVar (0,"n")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","replicate")) (CVar (0,"n"))) (CLit (CCharc ' ')))] []]),
  CFunc ("JavaScript","showJSFDecl") 1 Public (CFuncType (CTCons ("JavaScript","JSFDecl") []) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CRules CFlex [CRule [CPComb ("JavaScript","JSFDecl") [CPVar (0,"f"),CPVar (1,"args"),CPVar (2,"body")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'f'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'u'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'c'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'i'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]")))))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (0,"f"))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '('))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CSymbol ("Prelude","concat")) (CApply (CApply (CSymbol ("List","intersperse")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ','))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("JavaScript","showJSExp"))) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("JavaScript","JSIVar"))) (CVar (1,"args"))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ')'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '{'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CSymbol ("Prelude","[]"))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude","concatMap")) (CApply (CApply (CSymbol ("Prelude",".")) (CLambda [CPVar (3,"x0")] (CApply (CApply (CSymbol ("Prelude","++")) (CVar (3,"x0"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CSymbol ("Prelude","[]")))))) (CApply (CSymbol ("JavaScript","showJSStat")) (CLit (CIntc 2))))) (CVar (2,"body")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '}'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\n'))) (CSymbol ("Prelude","[]")))))))))))] []]),
  CFunc ("JavaScript","jsConsTerm") 2 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("JavaScript","JSExp") []]) (CTCons ("JavaScript","JSExp") []))) (CRules CFlex [CRule [CPVar (0,"cons"),CPVar (1,"args")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("JavaScript","JSFCall")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'n'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'w'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'A'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'a'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'y'))) (CSymbol ("Prelude","[]")))))))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CSymbol ("JavaScript","JSString")) (CVar (0,"cons")))) (CVar (1,"args"))))] []])]
 []
