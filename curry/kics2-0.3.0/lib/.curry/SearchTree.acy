CurryProg "SearchTree"
 ["Prelude","ValueSequence"]
 [CType ("SearchTree","SearchTree") Public [(0,"a")] [CCons ("SearchTree","Value") 1 Public [CTVar (0,"a")],CCons ("SearchTree","Fail") 1 Public [CTCons ("Prelude","Int") []],CCons ("SearchTree","Or") 2 Public [CTCons ("SearchTree","SearchTree") [CTVar (0,"a")],CTCons ("SearchTree","SearchTree") [CTVar (0,"a")]]],
  CTypeSyn ("SearchTree","Strategy") Public [(0,"a")] (CFuncType (CTCons ("SearchTree","SearchTree") [CTVar (0,"a")]) (CTCons ("ValueSequence","ValueSequence") [CTVar (0,"a")])),
  CType ("SearchTree","AbortList") Private [(0,"a")] [CCons ("SearchTree","Nil") 0 Private [],CCons ("SearchTree","Cons") 2 Private [CTVar (0,"a"),CTCons ("SearchTree","AbortList") [CTVar (0,"a")]],CCons ("SearchTree","FCons") 2 Private [CTCons ("Prelude","Int") [],CTCons ("SearchTree","AbortList") [CTVar (0,"a")]],CCons ("SearchTree","Abort") 0 Private []]]
 [CFunc ("SearchTree","getSearchTree") 1 Public (CFuncType (CTVar (0,"a")) (CTCons ("Prelude","IO") [CTCons ("SearchTree","SearchTree") [CTVar (0,"a")]])) (CRules CFlex [CRule [CPVar (0,"x")] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Prelude","return")) (CApply (CSymbol ("SearchTree","someSearchTree")) (CVar (0,"x"))))] []]),
  CFunc ("SearchTree","someSearchTree") 1 Public (CFuncType (CTVar (0,"a")) (CTCons ("SearchTree","SearchTree") [CTVar (0,"a")])) (CExternal "someSearchTree"),
  CFunc ("SearchTree","isDefined") 1 Public (CFuncType (CTVar (0,"a")) (CTCons ("Prelude","Bool") [])) (CRules CFlex [CRule [CPVar (0,"x")] [(CSymbol ("Prelude","success"),CApply (CSymbol ("SearchTree","hasValue")) (CApply (CSymbol ("SearchTree","someSearchTree")) (CVar (0,"x"))))] [CLocalFunc (CFunc ("SearchTree","hasValue") 1 Private (CFuncType (CTCons ("SearchTree","SearchTree") [CTVar (0,"a")]) (CTCons ("Prelude","Bool") [])) (CRules CFlex [CRule [CPVar (1,"y")] [(CSymbol ("Prelude","success"),CCase (CVar (1,"y")) [CBranch (CPComb ("SearchTree","Value") [CPVar (2,"_")]) (CSymbol ("Prelude","True")),CBranch (CPComb ("SearchTree","Fail") [CPVar (3,"_")]) (CSymbol ("Prelude","False")),CBranch (CPComb ("SearchTree","Or") [CPVar (4,"t1"),CPVar (5,"t2")]) (CApply (CApply (CSymbol ("Prelude","||")) (CApply (CSymbol ("SearchTree","hasValue")) (CVar (4,"t1")))) (CApply (CSymbol ("SearchTree","hasValue")) (CVar (5,"t2"))))])] []]))]]),
  CFunc ("SearchTree","showSearchTree") 1 Public (CFuncType (CTCons ("SearchTree","SearchTree") [CTVar (0,"a")]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CRules CFlex [CRule [CPVar (0,"st")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("SearchTree","showsST")) (CSymbol ("Prelude","[]"))) (CVar (0,"st"))) (CSymbol ("Prelude","[]")))] [CLocalFunc (CFunc ("SearchTree","showsST") 2 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Bool") []]) (CFuncType (CTCons ("SearchTree","SearchTree") [CTVar (0,"a")]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])))) (CRules CFlex [CRule [CPVar (6,"ctxt"),CPComb ("SearchTree","Value") [CPVar (7,"a")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",".")) (CApply (CSymbol ("SearchTree","indent")) (CVar (6,"ctxt")))) (CApply (CApply (CSymbol ("Prelude",".")) (CApply (CSymbol ("SearchTree","shows")) (CVar (7,"a")))) (CVar (5,"nl"))))] [],CRule [CPVar (8,"ctxt"),CPComb ("SearchTree","Fail") [CPVar (9,"_")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",".")) (CApply (CSymbol ("SearchTree","indent")) (CVar (8,"ctxt")))) (CApply (CApply (CSymbol ("Prelude",".")) (CApply (CSymbol ("SearchTree","showChar")) (CLit (CCharc '!')))) (CVar (5,"nl"))))] [],CRule [CPVar (10,"ctxt"),CPComb ("SearchTree","Or") [CPVar (11,"t1"),CPVar (12,"t2")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",".")) (CApply (CSymbol ("SearchTree","indent")) (CVar (10,"ctxt")))) (CApply (CApply (CSymbol ("Prelude",".")) (CApply (CSymbol ("SearchTree","showChar")) (CLit (CCharc '?')))) (CApply (CApply (CSymbol ("Prelude",".")) (CVar (5,"nl"))) (CApply (CApply (CSymbol ("Prelude",".")) (CApply (CApply (CSymbol ("SearchTree","showsST")) (CApply (CApply (CSymbol ("Prelude",":")) (CSymbol ("Prelude","False"))) (CVar (10,"ctxt")))) (CVar (11,"t1")))) (CApply (CApply (CSymbol ("SearchTree","showsST")) (CApply (CApply (CSymbol ("Prelude",":")) (CSymbol ("Prelude","True"))) (CVar (10,"ctxt")))) (CVar (12,"t2")))))))] []])),CLocalFunc (CFunc ("SearchTree","indent") 1 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Bool") []]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]))) (CRules CFlex [CRule [CPComb ("Prelude","[]") []] [(CSymbol ("Prelude","success"),CSymbol ("Prelude","id"))] [],CRule [CPComb ("Prelude",":") [CPVar (6,"i"),CPVar (7,"is")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",".")) (CApply (CSymbol ("SearchTree","showString")) (CApply (CApply (CSymbol ("Prelude","$")) (CApply (CSymbol ("Prelude","concatMap")) (CSymbol ("SearchTree","showIndent")))) (CApply (CSymbol ("Prelude","reverse")) (CVar (7,"is")))))) (CApply (CApply (CSymbol ("Prelude",".")) (CApply (CSymbol ("SearchTree","showChar")) (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CVar (6,"i"))) (CVar (3,"llc"))) (CVar (4,"lmc"))))) (CApply (CSymbol ("SearchTree","showString")) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (2,"hbar"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]")))))))] [CLocalFunc (CFunc ("SearchTree","showIndent") 1 Private (CFuncType (CTCons ("Prelude","Bool") []) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CRules CFlex [CRule [CPVar (8,"isLast")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CVar (8,"isLast"))) (CLit (CCharc ' '))) (CVar (1,"vbar")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]")))))] []]))]])),CLocalPat (CPVar (1,"vbar")) (CLit (CCharc '\9474')) [],CLocalPat (CPVar (2,"hbar")) (CLit (CCharc '\9472')) [],CLocalPat (CPVar (3,"llc")) (CLit (CCharc '\9492')) [],CLocalPat (CPVar (4,"lmc")) (CLit (CCharc '\9500')) [],CLocalPat (CPVar (5,"nl")) (CApply (CSymbol ("SearchTree","showChar")) (CLit (CCharc '\n'))) [],CLocalFunc (CFunc ("SearchTree","shows") 1 Private (CFuncType (CTVar (0,"a")) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]))) (CRules CFlex [CRule [CPVar (6,"x")] [(CSymbol ("Prelude","success"),CApply (CSymbol ("SearchTree","showString")) (CApply (CSymbol ("Prelude","show")) (CVar (6,"x"))))] []])),CLocalFunc (CFunc ("SearchTree","showChar") 1 Private (CFuncType (CTVar (0,"a")) (CFuncType (CTCons ("Prelude","[]") [CTVar (0,"a")]) (CTCons ("Prelude","[]") [CTVar (0,"a")]))) (CRules CFlex [CRule [CPVar (6,"c")] [(CSymbol ("Prelude","success"),CLambda [CPVar (7,"x0")] (CApply (CApply (CSymbol ("Prelude",":")) (CVar (6,"c"))) (CVar (7,"x0"))))] []])),CLocalFunc (CFunc ("SearchTree","showString") 1 Private (CFuncType (CTCons ("Prelude","[]") [CTVar (0,"a")]) (CFuncType (CTCons ("Prelude","[]") [CTVar (0,"a")]) (CTCons ("Prelude","[]") [CTVar (0,"a")]))) (CRules CFlex [CRule [CPVar (6,"s")] [(CSymbol ("Prelude","success"),CLambda [CPVar (7,"x0")] (CApply (CApply (CSymbol ("Prelude","++")) (CVar (6,"s"))) (CVar (7,"x0"))))] []]))]]),
  CFunc ("SearchTree","searchTreeSize") 1 Public (CFuncType (CTCons ("SearchTree","SearchTree") [CTVar (0,"a")]) (CTCons ("Prelude","(,,)") [CTCons ("Prelude","Int") [],CTCons ("Prelude","Int") [],CTCons ("Prelude","Int") []])) (CRules CFlex [CRule [CPComb ("SearchTree","Value") [CPVar (0,"_")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","(,,)")) (CLit (CIntc 1))) (CLit (CIntc 0))) (CLit (CIntc 0)))] [],CRule [CPComb ("SearchTree","Fail") [CPVar (1,"_")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","(,,)")) (CLit (CIntc 0))) (CLit (CIntc 1))) (CLit (CIntc 0)))] [],CRule [CPComb ("SearchTree","Or") [CPVar (2,"t1"),CPVar (3,"t2")]] [(CSymbol ("Prelude","success"),CLetDecl [CLocalPat (CPComb ("Prelude","(,,)") [CPVar (4,"v1"),CPVar (5,"f1"),CPVar (6,"o1")]) (CApply (CSymbol ("SearchTree","searchTreeSize")) (CVar (2,"t1"))) [],CLocalPat (CPComb ("Prelude","(,,)") [CPVar (7,"v2"),CPVar (8,"f2"),CPVar (9,"o2")]) (CApply (CSymbol ("SearchTree","searchTreeSize")) (CVar (3,"t2"))) []] (CApply (CApply (CApply (CSymbol ("Prelude","(,,)")) (CApply (CApply (CSymbol ("Prelude","+")) (CVar (4,"v1"))) (CVar (7,"v2")))) (CApply (CApply (CSymbol ("Prelude","+")) (CVar (5,"f1"))) (CVar (8,"f2")))) (CApply (CApply (CSymbol ("Prelude","+")) (CApply (CApply (CSymbol ("Prelude","+")) (CVar (6,"o1"))) (CVar (9,"o2")))) (CLit (CIntc 1)))))] []]),
  CFunc ("SearchTree","allValuesDFS") 0 Public (CFuncType (CTCons ("SearchTree","SearchTree") [CTVar (0,"a")]) (CTCons ("Prelude","[]") [CTVar (0,"a")])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("ValueSequence","vsToList"))) (CSymbol ("SearchTree","dfsStrategy")))] []]),
  CFunc ("SearchTree","dfsStrategy") 1 Public (CFuncType (CTCons ("SearchTree","SearchTree") [CTVar (0,"a")]) (CTCons ("ValueSequence","ValueSequence") [CTVar (0,"a")])) (CRules CFlex [CRule [CPComb ("SearchTree","Fail") [CPVar (0,"d")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("ValueSequence","failVS")) (CVar (0,"d")))] [],CRule [CPComb ("SearchTree","Value") [CPVar (1,"x")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("ValueSequence","addVS")) (CVar (1,"x"))) (CSymbol ("ValueSequence","emptyVS")))] [],CRule [CPComb ("SearchTree","Or") [CPVar (2,"x"),CPVar (3,"y")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("ValueSequence","|++|")) (CApply (CSymbol ("SearchTree","dfsStrategy")) (CVar (2,"x")))) (CApply (CSymbol ("SearchTree","dfsStrategy")) (CVar (3,"y"))))] []]),
  CFunc ("SearchTree","allValuesBFS") 1 Public (CFuncType (CTCons ("SearchTree","SearchTree") [CTVar (0,"a")]) (CTCons ("Prelude","[]") [CTVar (0,"a")])) (CRules CFlex [CRule [CPVar (0,"t")] [(CSymbol ("Prelude","success"),CApply (CSymbol ("ValueSequence","vsToList")) (CApply (CSymbol ("SearchTree","bfsStrategy")) (CVar (0,"t"))))] []]),
  CFunc ("SearchTree","children") 1 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("SearchTree","SearchTree") [CTVar (0,"a")]]) (CTCons ("Prelude","[]") [CTCons ("SearchTree","SearchTree") [CTVar (0,"a")]])) (CRules CFlex [CRule [CPComb ("Prelude","[]") []] [(CSymbol ("Prelude","success"),CSymbol ("Prelude","[]"))] [],CRule [CPComb ("Prelude",":") [CPComb ("SearchTree","Fail") [CPVar (0,"_")],CPVar (1,"ts")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("SearchTree","children")) (CVar (1,"ts")))] [],CRule [CPComb ("Prelude",":") [CPComb ("SearchTree","Value") [CPVar (2,"_")],CPVar (3,"ts")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("SearchTree","children")) (CVar (3,"ts")))] [],CRule [CPComb ("Prelude",":") [CPComb ("SearchTree","Or") [CPVar (4,"x"),CPVar (5,"y")],CPVar (6,"ts")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",":")) (CVar (4,"x"))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (5,"y"))) (CApply (CSymbol ("SearchTree","children")) (CVar (6,"ts")))))] []]),
  CFunc ("SearchTree","values") 1 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("SearchTree","SearchTree") [CTVar (0,"a")]]) (CTCons ("ValueSequence","ValueSequence") [CTVar (0,"a")])) (CRules CFlex [CRule [CPComb ("Prelude","[]") []] [(CSymbol ("Prelude","success"),CSymbol ("ValueSequence","emptyVS"))] [],CRule [CPComb ("Prelude",":") [CPComb ("SearchTree","Fail") [CPVar (0,"d")],CPVar (1,"ts")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("ValueSequence","|++|")) (CApply (CSymbol ("ValueSequence","failVS")) (CVar (0,"d")))) (CApply (CSymbol ("SearchTree","values")) (CVar (1,"ts"))))] [],CRule [CPComb ("Prelude",":") [CPComb ("SearchTree","Value") [CPVar (2,"x")],CPVar (3,"ts")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("ValueSequence","addVS")) (CVar (2,"x"))) (CApply (CSymbol ("SearchTree","values")) (CVar (3,"ts"))))] [],CRule [CPComb ("Prelude",":") [CPComb ("SearchTree","Or") [CPVar (4,"_"),CPVar (5,"_")],CPVar (6,"ts")]] [(CSymbol ("Prelude","success"),CApply (CSymbol ("SearchTree","values")) (CVar (6,"ts")))] []]),
  CFunc ("SearchTree","allBFS") 1 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("SearchTree","SearchTree") [CTVar (0,"a")]]) (CTCons ("ValueSequence","ValueSequence") [CTVar (0,"a")])) (CRules CFlex [CRule [CPComb ("Prelude","[]") []] [(CSymbol ("Prelude","success"),CSymbol ("ValueSequence","emptyVS"))] [],CRule [CPComb ("Prelude",":") [CPVar (0,"t"),CPVar (1,"ts")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("ValueSequence","|++|")) (CApply (CSymbol ("SearchTree","values")) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (0,"t"))) (CVar (1,"ts"))))) (CApply (CSymbol ("SearchTree","allBFS")) (CApply (CSymbol ("SearchTree","children")) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (0,"t"))) (CVar (1,"ts"))))))] []]),
  CFunc ("SearchTree","bfsStrategy") 1 Public (CFuncType (CTCons ("SearchTree","SearchTree") [CTVar (0,"a")]) (CTCons ("ValueSequence","ValueSequence") [CTVar (0,"a")])) (CRules CFlex [CRule [CPVar (0,"t")] [(CSymbol ("Prelude","success"),CApply (CSymbol ("SearchTree","allBFS")) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (0,"t"))) (CSymbol ("Prelude","[]"))))] []]),
  CFunc ("SearchTree","defIDSDepth") 0 Private (CTCons ("Prelude","Int") []) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CLit (CIntc 100))] []]),
  CFunc ("SearchTree","defIDSInc") 0 Private (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("Prelude","Int") [])) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CLambda [CPVar (0,"x0")] (CApply (CApply (CSymbol ("Prelude","*")) (CLit (CIntc 2))) (CVar (0,"x0"))))] []]),
  CFunc ("SearchTree","allValuesIDS") 1 Public (CFuncType (CTCons ("SearchTree","SearchTree") [CTVar (0,"a")]) (CTCons ("Prelude","[]") [CTVar (0,"a")])) (CRules CFlex [CRule [CPVar (0,"t")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("SearchTree","allValuesIDSwith")) (CSymbol ("SearchTree","defIDSDepth"))) (CSymbol ("SearchTree","defIDSInc"))) (CVar (0,"t")))] []]),
  CFunc ("SearchTree","idsStrategy") 1 Public (CFuncType (CTCons ("SearchTree","SearchTree") [CTVar (0,"a")]) (CTCons ("ValueSequence","ValueSequence") [CTVar (0,"a")])) (CRules CFlex [CRule [CPVar (0,"t")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("SearchTree","idsStrategyWith")) (CSymbol ("SearchTree","defIDSDepth"))) (CSymbol ("SearchTree","defIDSInc"))) (CVar (0,"t")))] []]),
  CFunc ("SearchTree","allValuesIDSwith") 2 Public (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("Prelude","Int") [])) (CFuncType (CTCons ("SearchTree","SearchTree") [CTVar (0,"a")]) (CTCons ("Prelude","[]") [CTVar (0,"a")])))) (CRules CFlex [CRule [CPVar (0,"initdepth"),CPVar (1,"incrdepth")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude",".")) (CSymbol ("ValueSequence","vsToList"))) (CApply (CApply (CSymbol ("SearchTree","idsStrategyWith")) (CVar (0,"initdepth"))) (CVar (1,"incrdepth"))))] []]),
  CFunc ("SearchTree","idsStrategyWith") 3 Public (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("Prelude","Int") [])) (CFuncType (CTCons ("SearchTree","SearchTree") [CTVar (0,"a")]) (CTCons ("ValueSequence","ValueSequence") [CTVar (0,"a")])))) (CRules CFlex [CRule [CPVar (0,"initdepth"),CPVar (1,"incrdepth"),CPVar (2,"st")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("SearchTree","iterIDS")) (CVar (0,"initdepth"))) (CApply (CApply (CApply (CSymbol ("SearchTree","collectInBounds")) (CLit (CIntc 0))) (CVar (0,"initdepth"))) (CVar (2,"st"))))] [CLocalFunc (CFunc ("SearchTree","iterIDS") 2 Private (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("SearchTree","AbortList") [CTVar (1,"_310")]) (CTCons ("ValueSequence","ValueSequence") [CTVar (1,"_310")]))) (CRules CFlex [CRule [CPVar (3,"_"),CPComb ("SearchTree","Nil") []] [(CSymbol ("Prelude","success"),CSymbol ("ValueSequence","emptyVS"))] [],CRule [CPVar (4,"n"),CPComb ("SearchTree","Cons") [CPVar (5,"x"),CPVar (6,"xs")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("ValueSequence","addVS")) (CVar (5,"x"))) (CApply (CApply (CSymbol ("SearchTree","iterIDS")) (CVar (4,"n"))) (CVar (6,"xs"))))] [],CRule [CPVar (7,"n"),CPComb ("SearchTree","FCons") [CPVar (8,"fd"),CPVar (9,"xs")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("ValueSequence","|++|")) (CApply (CSymbol ("ValueSequence","failVS")) (CVar (8,"fd")))) (CApply (CApply (CSymbol ("SearchTree","iterIDS")) (CVar (7,"n"))) (CVar (9,"xs"))))] [],CRule [CPVar (10,"n"),CPComb ("SearchTree","Abort") []] [(CSymbol ("Prelude","success"),CLetDecl [CLocalPat (CPVar (11,"newdepth")) (CApply (CVar (1,"incrdepth")) (CVar (10,"n"))) []] (CApply (CApply (CSymbol ("SearchTree","iterIDS")) (CVar (11,"newdepth"))) (CApply (CApply (CApply (CSymbol ("SearchTree","collectInBounds")) (CVar (10,"n"))) (CVar (11,"newdepth"))) (CVar (2,"st")))))] []]))]]),
  CFunc ("SearchTree","collectInBounds") 3 Private (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("SearchTree","SearchTree") [CTVar (0,"a")]) (CTCons ("SearchTree","AbortList") [CTVar (0,"a")])))) (CRules CFlex [CRule [CPVar (0,"oldbound"),CPVar (1,"newbound"),CPVar (2,"st")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("SearchTree","collectLevel")) (CVar (1,"newbound"))) (CVar (2,"st")))] [CLocalFunc (CFunc ("SearchTree","collectLevel") 2 Private (CFuncType (CTCons ("Prelude","Int") []) (CFuncType (CTCons ("SearchTree","SearchTree") [CTVar (0,"a")]) (CTCons ("SearchTree","AbortList") [CTVar (0,"a")]))) (CRules CFlex [CRule [CPVar (3,"d"),CPComb ("SearchTree","Fail") [CPVar (4,"fd")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","<")) (CVar (3,"d"))) (CApply (CApply (CSymbol ("Prelude","-")) (CVar (1,"newbound"))) (CVar (0,"oldbound"))))) (CApply (CApply (CSymbol ("SearchTree","FCons")) (CVar (4,"fd"))) (CSymbol ("SearchTree","Nil")))) (CSymbol ("SearchTree","Nil")))] [],CRule [CPVar (5,"d"),CPComb ("SearchTree","Value") [CPVar (6,"x")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","<")) (CVar (5,"d"))) (CApply (CApply (CSymbol ("Prelude","-")) (CVar (1,"newbound"))) (CVar (0,"oldbound"))))) (CApply (CApply (CSymbol ("SearchTree","Cons")) (CVar (6,"x"))) (CSymbol ("SearchTree","Nil")))) (CSymbol ("SearchTree","Nil")))] [],CRule [CPVar (7,"d"),CPComb ("SearchTree","Or") [CPVar (8,"x"),CPVar (9,"y")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude",">")) (CVar (7,"d"))) (CLit (CIntc 0)))) (CApply (CApply (CSymbol ("SearchTree","concA")) (CApply (CApply (CSymbol ("SearchTree","collectLevel")) (CApply (CApply (CSymbol ("Prelude","-")) (CVar (7,"d"))) (CLit (CIntc 1)))) (CVar (8,"x")))) (CApply (CApply (CSymbol ("SearchTree","collectLevel")) (CApply (CApply (CSymbol ("Prelude","-")) (CVar (7,"d"))) (CLit (CIntc 1)))) (CVar (9,"y"))))) (CSymbol ("SearchTree","Abort")))] []]))]]),
  CFunc ("SearchTree","concA") 2 Private (CFuncType (CTCons ("SearchTree","AbortList") [CTVar (0,"a")]) (CFuncType (CTCons ("SearchTree","AbortList") [CTVar (0,"a")]) (CTCons ("SearchTree","AbortList") [CTVar (0,"a")]))) (CRules CFlex [CRule [CPComb ("SearchTree","Abort") [],CPComb ("SearchTree","Abort") []] [(CSymbol ("Prelude","success"),CSymbol ("SearchTree","Abort"))] [],CRule [CPComb ("SearchTree","Abort") [],CPComb ("SearchTree","Nil") []] [(CSymbol ("Prelude","success"),CSymbol ("SearchTree","Abort"))] [],CRule [CPComb ("SearchTree","Abort") [],CPComb ("SearchTree","Cons") [CPVar (0,"x"),CPVar (1,"xs")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("SearchTree","Cons")) (CVar (0,"x"))) (CApply (CApply (CSymbol ("SearchTree","concA")) (CSymbol ("SearchTree","Abort"))) (CVar (1,"xs"))))] [],CRule [CPComb ("SearchTree","Abort") [],CPComb ("SearchTree","FCons") [CPVar (2,"d"),CPVar (3,"xs")]] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("SearchTree","FCons")) (CVar (2,"d"))) (CApply (CApply (CSymbol ("SearchTree","concA")) (CSymbol ("SearchTree","Abort"))) (CVar (3,"xs"))))] [],CRule [CPComb ("SearchTree","Nil") [],CPVar (4,"ys")] [(CSymbol ("Prelude","success"),CVar (4,"ys"))] [],CRule [CPComb ("SearchTree","Cons") [CPVar (5,"x"),CPVar (6,"xs")],CPVar (7,"ys")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("SearchTree","Cons")) (CVar (5,"x"))) (CApply (CApply (CSymbol ("SearchTree","concA")) (CVar (6,"xs"))) (CVar (7,"ys"))))] [],CRule [CPComb ("SearchTree","FCons") [CPVar (8,"d"),CPVar (9,"xs")],CPVar (10,"ys")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("SearchTree","FCons")) (CVar (8,"d"))) (CApply (CApply (CSymbol ("SearchTree","concA")) (CVar (9,"xs"))) (CVar (10,"ys"))))] []]),
  CFunc ("SearchTree","getAllValuesWith") 2 Public (CFuncType (CFuncType (CTCons ("SearchTree","SearchTree") [CTVar (0,"a")]) (CTCons ("ValueSequence","ValueSequence") [CTVar (0,"a")])) (CFuncType (CTVar (0,"a")) (CTCons ("Prelude","IO") [CTCons ("Prelude","[]") [CTVar (0,"a")]]))) (CRules CFlex [CRule [CPVar (0,"strategy"),CPVar (1,"exp")] [(CSymbol ("Prelude","success"),CDoExpr [CSPat (CPVar (2,"t")) (CApply (CSymbol ("SearchTree","getSearchTree")) (CVar (1,"exp"))),CSExpr (CApply (CSymbol ("Prelude","return")) (CApply (CSymbol ("ValueSequence","vsToList")) (CApply (CVar (0,"strategy")) (CVar (2,"t")))))])] []]),
  CFunc ("SearchTree","someValue") 0 Public (CFuncType (CTVar (0,"a")) (CTVar (0,"a"))) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("SearchTree","someValueWith")) (CSymbol ("SearchTree","bfsStrategy")))] []]),
  CFunc ("SearchTree","someValueWith") 2 Public (CFuncType (CFuncType (CTCons ("SearchTree","SearchTree") [CTVar (0,"a")]) (CTCons ("ValueSequence","ValueSequence") [CTVar (0,"a")])) (CFuncType (CTVar (0,"a")) (CTVar (0,"a")))) (CRules CFlex [CRule [CPVar (0,"strategy"),CPVar (1,"x")] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Prelude","head")) (CApply (CSymbol ("ValueSequence","vsToList")) (CApply (CVar (0,"strategy")) (CApply (CSymbol ("SearchTree","someSearchTree")) (CVar (1,"x"))))))] []])]
 []
