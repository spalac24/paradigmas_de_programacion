CurryProg "System"
 ["Prelude","Global"]
 []
 [CFunc ("System","getCPUTime") 0 Public (CTCons ("Prelude","IO") [CTCons ("Prelude","Int") []]) (CExternal "getCPUTime"),
  CFunc ("System","getElapsedTime") 0 Public (CTCons ("Prelude","IO") [CTCons ("Prelude","Int") []]) (CExternal "getElapsedTime"),
  CFunc ("System","getArgs") 0 Public (CTCons ("Prelude","IO") [CTCons ("Prelude","[]") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]]) (CExternal "getArgs"),
  CFunc ("System","getEnviron") 1 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","IO") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]])) (CRules CFlex [CRule [CPVar (0,"evar")] [(CSymbol ("Prelude","success"),CDoExpr [CSPat (CPVar (1,"envs")) (CApply (CSymbol ("Global","readGlobal")) (CSymbol ("System","environ"))),CSExpr (CApply (CApply (CApply (CSymbol ("Prelude","maybe")) (CApply (CApply (CSymbol ("Prelude","$##")) (CSymbol ("System","prim_getEnviron"))) (CVar (0,"evar")))) (CSymbol ("Prelude","return"))) (CApply (CApply (CSymbol ("Prelude","lookup")) (CVar (0,"evar"))) (CVar (1,"envs"))))])] []]),
  CFunc ("System","prim_getEnviron") 1 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","IO") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]])) (CExternal "prim_getEnviron"),
  CFunc ("System","environ") 0 Private (CTCons ("Global","Global") [CTCons ("Prelude","[]") [CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]]]) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Global","global")) (CSymbol ("Prelude","[]"))) (CSymbol ("Global","Temporary")))] []]),
  CFunc ("System","setEnviron") 2 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","IO") [CTCons ("Prelude","()") []]))) (CRules CFlex [CRule [CPVar (0,"evar"),CPVar (1,"val")] [(CSymbol ("Prelude","success"),CDoExpr [CSPat (CPVar (2,"envs")) (CApply (CSymbol ("Global","readGlobal")) (CSymbol ("System","environ"))),CSExpr (CApply (CApply (CSymbol ("Global","writeGlobal")) (CSymbol ("System","environ"))) (CApply (CApply (CSymbol ("Prelude",":")) (CApply (CApply (CSymbol ("Prelude","(,)")) (CVar (0,"evar"))) (CVar (1,"val")))) (CApply (CApply (CSymbol ("Prelude","filter")) (CApply (CApply (CSymbol ("Prelude",".")) (CLambda [CPVar (3,"x0")] (CApply (CApply (CSymbol ("Prelude","/=")) (CVar (3,"x0"))) (CVar (0,"evar"))))) (CSymbol ("Prelude","fst")))) (CVar (2,"envs")))))])] []]),
  CFunc ("System","unsetEnviron") 1 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","IO") [CTCons ("Prelude","()") []])) (CRules CFlex [CRule [CPVar (0,"evar")] [(CSymbol ("Prelude","success"),CDoExpr [CSPat (CPVar (1,"envs")) (CApply (CSymbol ("Global","readGlobal")) (CSymbol ("System","environ"))),CSExpr (CApply (CApply (CSymbol ("Global","writeGlobal")) (CSymbol ("System","environ"))) (CApply (CApply (CSymbol ("Prelude","filter")) (CApply (CApply (CSymbol ("Prelude",".")) (CLambda [CPVar (2,"x0")] (CApply (CApply (CSymbol ("Prelude","/=")) (CVar (2,"x0"))) (CVar (0,"evar"))))) (CSymbol ("Prelude","fst")))) (CVar (1,"envs"))))])] []]),
  CFunc ("System","getHostname") 0 Public (CTCons ("Prelude","IO") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]) (CExternal "getHostname"),
  CFunc ("System","getPID") 0 Public (CTCons ("Prelude","IO") [CTCons ("Prelude","Int") []]) (CExternal "getPID"),
  CFunc ("System","getProgName") 0 Public (CTCons ("Prelude","IO") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]) (CExternal "getProgName"),
  CFunc ("System","system") 1 Public (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","IO") [CTCons ("Prelude","Int") []])) (CRules CFlex [CRule [CPVar (0,"cmd")] [(CSymbol ("Prelude","success"),CDoExpr [CSPat (CPVar (3,"envs")) (CApply (CSymbol ("Global","readGlobal")) (CSymbol ("System","environ"))),CSExpr (CApply (CApply (CSymbol ("Prelude","$##")) (CSymbol ("System","prim_system"))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude","concatMap")) (CSymbol ("System","envToExport"))) (CVar (3,"envs")))) (CVar (2,"escapedCmd"))))])] [CLocalPat (CPVar (1,"win")) (CSymbol ("System","isWindows")) [],CLocalPat (CPVar (2,"escapedCmd")) (CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CVar (1,"win"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '"'))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (0,"cmd"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '"'))) (CSymbol ("Prelude","[]")))))) (CVar (0,"cmd"))) [],CLocalFunc (CFunc ("System","envToExport") 1 Private (CFuncType (CTCons ("Prelude","(,)") [CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []],CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]]) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CRules CFlex [CRule [CPComb ("Prelude","(,)") [CPVar (3,"var"),CPVar (4,"val")]] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CVar (1,"win"))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 's'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]"))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (3,"var"))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '='))) (CSymbol ("Prelude","[]")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude","concatMap")) (CSymbol ("System","escapeWinSpecials"))) (CVar (4,"val")))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '&'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '&'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]"))))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (3,"var"))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '='))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\''))) (CSymbol ("Prelude","[]"))))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude","concatMap")) (CSymbol ("System","encodeShellSpecials"))) (CVar (4,"val")))) (CApply (CApply (CSymbol ("Prelude","++")) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '\''))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ';'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'e'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'x'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'p'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'o'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 'r'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc 't'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]")))))))))))))) (CApply (CApply (CSymbol ("Prelude","++")) (CVar (3,"var"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ';'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc ' '))) (CSymbol ("Prelude","[]")))))))))))] []])),CLocalFunc (CFunc ("System","escapeWinSpecials") 1 Private (CFuncType (CTCons ("Prelude","Char") []) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CRules CFlex [CRule [CPVar (3,"c")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","elem")) (CVar (3,"c"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '<'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '>'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '|'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '&'))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '^'))) (CSymbol ("Prelude","[]"))))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CCharc '^'))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (3,"c"))) (CSymbol ("Prelude","[]"))))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (3,"c"))) (CSymbol ("Prelude","[]"))))] []])),CLocalFunc (CFunc ("System","encodeShellSpecials") 1 Private (CFuncType (CTCons ("Prelude","Char") []) (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []])) (CRules CFlex [CRule [CPVar (3,"c")] [(CSymbol ("Prelude","success"),CApply (CApply (CApply (CSymbol ("Prelude","if_then_else")) (CApply (CApply (CSymbol ("Prelude","==")) (CVar (3,"c"))) (CLit (CCharc '\'')))) (CApply (CApply (CSymbol ("Prelude","map")) (CSymbol ("Prelude","chr"))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CIntc 39))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CIntc 34))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CIntc 39))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CIntc 34))) (CApply (CApply (CSymbol ("Prelude",":")) (CLit (CIntc 39))) (CSymbol ("Prelude","[]"))))))))) (CApply (CApply (CSymbol ("Prelude",":")) (CVar (3,"c"))) (CSymbol ("Prelude","[]"))))] []]))]]),
  CFunc ("System","prim_system") 1 Private (CFuncType (CTCons ("Prelude","[]") [CTCons ("Prelude","Char") []]) (CTCons ("Prelude","IO") [CTCons ("Prelude","Int") []])) (CExternal "prim_system"),
  CFunc ("System","exitWith") 1 Public (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("Prelude","IO") [CTVar (0,"a")])) (CRules CFlex [CRule [CPVar (0,"exitcode")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","$#")) (CSymbol ("System","prim_exitWith"))) (CVar (0,"exitcode")))] []]),
  CFunc ("System","prim_exitWith") 1 Private (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("Prelude","IO") [CTVar (0,"a")])) (CExternal "prim_exitWith"),
  CFunc ("System","sleep") 1 Public (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("Prelude","IO") [CTCons ("Prelude","()") []])) (CRules CFlex [CRule [CPVar (0,"n")] [(CSymbol ("Prelude","success"),CApply (CApply (CSymbol ("Prelude","$#")) (CSymbol ("System","prim_sleep"))) (CVar (0,"n")))] []]),
  CFunc ("System","prim_sleep") 1 Private (CFuncType (CTCons ("Prelude","Int") []) (CTCons ("Prelude","IO") [CTCons ("Prelude","()") []])) (CExternal "prim_sleep"),
  CFunc ("System","isPosix") 0 Public (CTCons ("Prelude","Bool") []) (CRules CFlex [CRule [] [(CSymbol ("Prelude","success"),CApply (CSymbol ("Prelude","not")) (CSymbol ("System","isWindows")))] []]),
  CFunc ("System","isWindows") 0 Public (CTCons ("Prelude","Bool") []) (CExternal "isWindows")]
 []
