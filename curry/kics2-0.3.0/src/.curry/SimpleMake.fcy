Prog "SimpleMake" ["Directory","Prelude","Time"] [] [Func ("SimpleMake","smake") 4 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","IO") [TVar 0]) (FuncType (TCons ("Prelude","IO") [TVar 0]) (TCons ("Prelude","IO") [TVar 0]))))) (Rule [1,2,3,4] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("SimpleMake","getDestTime") [Var 1],Comb (FuncPartCall 1) ("SimpleMake","smake._#lambda1") [Var 4,Var 3,Var 2]])),Func ("SimpleMake","smake.make.2") 4 Private (FuncType (TCons ("Prelude","IO") [TVar 29]) (FuncType (TCons ("Prelude","IO") [TVar 29]) (FuncType (TCons ("Prelude","Maybe") [TCons ("Time","ClockTime") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Time","ClockTime") []]) (TCons ("Prelude","IO") [TVar 29]))))) (Rule [1,2,3,4] (Case  Flex (Var 3) [Branch (Pattern ("Prelude","Nothing") []) (Var 2),Branch (Pattern ("Prelude","Just") [5]) (Case  Rigid (Comb FuncCall ("SimpleMake","outOfDate") [Var 5,Var 4]) [Branch (Pattern ("Prelude","True") []) (Var 2),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Var 1),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])),Func ("SimpleMake","smake._#lambda1") 4 Private (FuncType (TCons ("Prelude","IO") [TVar 29]) (FuncType (TCons ("Prelude","IO") [TVar 29]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","Maybe") [TCons ("Time","ClockTime") []]) (TCons ("Prelude","IO") [TVar 29]))))) (Rule [1,2,3,4] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("SimpleMake","getDepTimes") [],Var 3],Comb (FuncPartCall 1) ("SimpleMake","smake._#lambda1._#lambda2") [Var 1,Var 2,Var 4]])),Func ("SimpleMake","smake._#lambda1._#lambda2") 4 Private (FuncType (TCons ("Prelude","IO") [TVar 29]) (FuncType (TCons ("Prelude","IO") [TVar 29]) (FuncType (TCons ("Prelude","Maybe") [TCons ("Time","ClockTime") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Time","ClockTime") []]) (TCons ("Prelude","IO") [TVar 29]))))) (Rule [1,2,3,4] (Comb FuncCall ("SimpleMake","smake.make.2") [Var 1,Var 2,Var 3,Var 4])),Func ("SimpleMake","getDestTime") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","Maybe") [TCons ("Time","ClockTime") []]])) (Rule [1] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Directory","doesFileExist") [Var 1],Comb (FuncPartCall 1) ("SimpleMake","getDestTime._#lambda3") [Var 1]])),Func ("SimpleMake","getDestTime._#lambda3") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","IO") [TCons ("Prelude","Maybe") [TCons ("Time","ClockTime") []]]))) (Rule [1,2] (Case  Rigid (Var 2) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","liftIO") [Comb (ConsPartCall 1) ("Prelude","Just") [],Comb FuncCall ("Directory","getModificationTime") [Var 1]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","return") [Comb ConsCall ("Prelude","Nothing") []])])),Func ("SimpleMake","getDepTimes") 0 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","IO") [TCons ("Prelude","[]") [TCons ("Time","ClockTime") []]])) (Rule [] (Comb FuncCall ("Prelude","mapIO") [Comb (FuncPartCall 1) ("Directory","getModificationTime") []])),Func ("SimpleMake","outOfDate") 2 Private (FuncType (TCons ("Time","ClockTime") []) (FuncType (TCons ("Prelude","[]") [TCons ("Time","ClockTime") []]) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","any") [Comb (FuncPartCall 1) ("Prelude","flip") [Comb (FuncPartCall 2) ("Prelude",">") [],Var 1]],Var 2]))] []