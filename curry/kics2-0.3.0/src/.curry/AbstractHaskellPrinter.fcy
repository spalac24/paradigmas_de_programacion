Prog "AbstractHaskellPrinter" ["AbstractHaskell","Char","List","Names","Prelude","Maybe","Read"] [Type ("AbstractHaskellPrinter","Options") Private [] [Cons ("AbstractHaskellPrinter","Options") 1 Private [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]] [Func ("AbstractHaskellPrinter","_#selR@Options.currentModule") 1 Private (FuncType (TCons ("AbstractHaskellPrinter","Options") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("AbstractHaskellPrinter","Options") [2]) (Var 2)])),Func ("AbstractHaskellPrinter","_#updR@Options.currentModule") 2 Private (FuncType (TCons ("AbstractHaskellPrinter","Options") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("AbstractHaskellPrinter","Options") []))) (Rule [1,2] (Case  Flex (Var 1) [Branch (Pattern ("AbstractHaskellPrinter","Options") [3]) (Comb ConsCall ("AbstractHaskellPrinter","Options") [Var 2])])),Func ("AbstractHaskellPrinter","defaultOptions") 0 Private (TCons ("AbstractHaskellPrinter","Options") []) (Rule [] (Comb ConsCall ("AbstractHaskellPrinter","Options") [Comb ConsCall ("Prelude","[]") []])),Func ("AbstractHaskellPrinter","showProg") 1 Public (FuncType (TCons ("AbstractHaskell","Prog") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("AbstractHaskell","Prog") [2,3,4,5,6]) (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("AbstractHaskellPrinter","intercalate") [Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Prelude","filter") [Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","not") [],Comb (FuncPartCall 1) ("Prelude","null") []]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("AbstractHaskellPrinter","showModuleHeader") [Var 2,Var 4,Var 5,Var 3],Comb ConsCall ("Prelude",":") [Comb FuncCall ("AbstractHaskellPrinter","showDecls") [Var 2,Var 6,Var 4,Var 5],Comb ConsCall ("Prelude","[]") []]]]])])),Func ("AbstractHaskellPrinter","showModuleHeader") 4 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("AbstractHaskell","TypeDecl") []]) (FuncType (TCons ("Prelude","[]") [TCons ("AbstractHaskell","FuncDecl") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (Rule [1,2,3,4] (Let [(5,Comb FuncCall ("AbstractHaskellPrinter","showExports") [Var 2,Var 3]),(6,Comb FuncCall ("AbstractHaskellPrinter","showImports") [Var 4])] (Comb FuncCall ("Prelude","concat") [Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]]],Var 1],Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude","++") [Var 5,Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]],Comb ConsCall ("Prelude",":") [Case  Rigid (Comb FuncCall ("Prelude","null") [Var 6]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude","[]") []]],Var 6])],Comb ConsCall ("Prelude","[]") []]]]]]))),Func ("AbstractHaskellPrinter","showDecls") 4 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("AbstractHaskell","OpDecl") []]) (FuncType (TCons ("Prelude","[]") [TCons ("AbstractHaskell","TypeDecl") []]) (FuncType (TCons ("Prelude","[]") [TCons ("AbstractHaskell","FuncDecl") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (Rule [1,2,3,4] (Let [(5,Comb ConsCall ("AbstractHaskellPrinter","Options") [Var 1])] (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("AbstractHaskellPrinter","intercalate") [Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("Prelude","filter") [Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","not") [],Comb (FuncPartCall 1) ("Prelude","null") []],Comb ConsCall ("Prelude",":") [Comb FuncCall ("AbstractHaskellPrinter","showOpDecls") [Var 2],Comb ConsCall ("Prelude",":") [Comb FuncCall ("AbstractHaskellPrinter","showTypeDecls") [Var 5,Var 3],Comb ConsCall ("Prelude",":") [Comb FuncCall ("AbstractHaskellPrinter","showFuncDecls") [Var 5,Var 4],Comb ConsCall ("Prelude","[]") []]]]]]))),Func ("AbstractHaskellPrinter","showExports") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("AbstractHaskell","TypeDecl") []]) (FuncType (TCons ("Prelude","[]") [TCons ("AbstractHaskell","FuncDecl") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1,2] (Let [(3,Comb FuncCall ("Prelude","filter") [Comb (FuncPartCall 1) ("AbstractHaskellPrinter","showExports.isPublicType.13") [],Var 1]),(4,Comb FuncCall ("List","partition") [Comb (FuncPartCall 1) ("AbstractHaskellPrinter","showExports.allPublicCons.13") [],Var 3]),(5,Comb FuncCall ("AbstractHaskellPrinter","showExports._#selFP2#withCons") [Var 4]),(6,Comb FuncCall ("AbstractHaskellPrinter","showExports._#selFP3#withoutCons") [Var 4])] (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("AbstractHaskellPrinter","intercalate") [Comb ConsCall ("Prelude",":") [Lit (Charc  ','),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","map") [Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","flip") [Comb (FuncPartCall 2) ("Prelude","++") [],Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude","[]") []]]]]]],Comb (FuncPartCall 1) ("AbstractHaskellPrinter","showExports.getTypeName.13") []],Var 5],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("AbstractHaskellPrinter","showExports.getTypeName.13") [],Var 6],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("AbstractHaskellPrinter","showExports.getFuncName.13") [],Comb FuncCall ("Prelude","filter") [Comb (FuncPartCall 1) ("AbstractHaskellPrinter","showExports.isPublicFunc.13") [],Var 2]]]]]))),Func ("AbstractHaskellPrinter","showExports.isPublicType.13") 1 Private (FuncType (TCons ("AbstractHaskell","TypeDecl") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("AbstractHaskell","Type") [2,3,4,5]) (Comb FuncCall ("Prelude","==") [Var 3,Comb ConsCall ("AbstractHaskell","Public") []]),Branch (Pattern ("AbstractHaskell","TypeSyn") [6,7,8,9]) (Comb FuncCall ("Prelude","==") [Var 7,Comb ConsCall ("AbstractHaskell","Public") []]),Branch (Pattern ("AbstractHaskell","Instance") [10,11,12,13]) (Comb ConsCall ("Prelude","False") [])])),Func ("AbstractHaskellPrinter","showExports.isPublicFunc.13") 1 Private (FuncType (TCons ("AbstractHaskell","FuncDecl") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("AbstractHaskell","Func") [2,3,4,5,6,7]) (Comb FuncCall ("Prelude","==") [Var 5,Comb ConsCall ("AbstractHaskell","Public") []])])),Func ("AbstractHaskellPrinter","showExports.getTypeName.13") 1 Private (FuncType (TCons ("AbstractHaskell","TypeDecl") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("AbstractHaskell","Type") [2,3,4,5]) (Case  Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [6,7]) (Var 7)]),Branch (Pattern ("AbstractHaskell","TypeSyn") [8,9,10,11]) (Case  Flex (Var 8) [Branch (Pattern ("Prelude","(,)") [12,13]) (Var 13)]),Branch (Pattern ("AbstractHaskell","Instance") [14,15,16,17]) (Case  Flex (Var 14) [Branch (Pattern ("Prelude","(,)") [18,19]) (Var 19)])])),Func ("AbstractHaskellPrinter","showExports.allPublicCons.13") 1 Private (FuncType (TCons ("AbstractHaskell","TypeDecl") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("AbstractHaskell","Type") [2,3,4,5]) (Comb FuncCall ("Prelude","==") [Comb FuncCall ("Prelude","length") [Comb FuncCall ("Prelude","filter") [Comb (FuncPartCall 1) ("AbstractHaskellPrinter","showExports.allPublicCons.13.isPublicCons.59") [],Var 5]],Comb FuncCall ("Prelude","length") [Var 5]]),Branch (Pattern ("AbstractHaskell","TypeSyn") [6,7,8,9]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractHaskell","Instance") [10,11,12,13]) (Comb ConsCall ("Prelude","False") [])])),Func ("AbstractHaskellPrinter","showExports.allPublicCons.13.isPublicCons.59") 1 Private (FuncType (TCons ("AbstractHaskell","ConsDecl") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("AbstractHaskell","Cons") [2,3,4,5]) (Comb FuncCall ("Prelude","==") [Var 4,Comb ConsCall ("AbstractHaskell","Public") []])])),Func ("AbstractHaskellPrinter","showExports.getFuncName.13") 1 Private (FuncType (TCons ("AbstractHaskell","FuncDecl") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("AbstractHaskell","Func") [2,3,4,5,6,7]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude","(,)") [8,9]) (Case  Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("AbstractHaskellPrinter","isInfixOpName") [],Var 9]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Var 9,Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude","[]") []]]]),Branch (Pattern ("Prelude","False") []) (Var 9)])])])),Func ("AbstractHaskellPrinter","showExports._#selFP2#withCons") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("AbstractHaskell","TypeDecl") []],TCons ("Prelude","[]") [TCons ("AbstractHaskell","TypeDecl") []]]) (TCons ("Prelude","[]") [TCons ("AbstractHaskell","TypeDecl") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("AbstractHaskellPrinter","showExports._#selFP3#withoutCons") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("AbstractHaskell","TypeDecl") []],TCons ("Prelude","[]") [TCons ("AbstractHaskell","TypeDecl") []]]) (TCons ("Prelude","[]") [TCons ("AbstractHaskell","TypeDecl") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("AbstractHaskellPrinter","showImports") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Comb FuncCall ("AbstractHaskellPrinter","prefixInter") [Comb (FuncPartCall 1) ("AbstractHaskellPrinter","showImports.showImport.89") [],Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude","[]") []]])),Func ("AbstractHaskellPrinter","showImports.showImport.89") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Names","isHaskellModule") [],Var 1]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]]],Var 1]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'q'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]],Var 1]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])),Func ("AbstractHaskellPrinter","showOpDecls") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("AbstractHaskell","OpDecl") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Comb FuncCall ("AbstractHaskellPrinter","prefixInter") [Comb (FuncPartCall 1) ("AbstractHaskellPrinter","showOpDecl") [],Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude","[]") []]])),Func ("AbstractHaskellPrinter","showOpDecl") 1 Private (FuncType (TCons ("AbstractHaskell","OpDecl") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("AbstractHaskell","Op") [2,3,4]) (Case  Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [5,6]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractHaskellPrinter","showFixity") [Var 3],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","show") [Var 4],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []],Case  Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("AbstractHaskellPrinter","isInfixOpName") [],Var 6]) [Branch (Pattern ("Prelude","True") []) (Var 6),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  '`'),Comb FuncCall ("Prelude","++") [Var 6,Comb ConsCall ("Prelude",":") [Lit (Charc  '`'),Comb ConsCall ("Prelude","[]") []]]])]]]]])])])),Func ("AbstractHaskellPrinter","showFixity") 1 Private (FuncType (TCons ("AbstractHaskell","Fixity") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("AbstractHaskell","InfixOp") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude","[]") []]]]]]),Branch (Pattern ("AbstractHaskell","InfixlOp") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude","[]") []]]]]]]),Branch (Pattern ("AbstractHaskell","InfixrOp") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude","[]") []]]]]]])])),Func ("AbstractHaskellPrinter","showTypeDecls") 2 Public (FuncType (TCons ("AbstractHaskellPrinter","Options") []) (FuncType (TCons ("Prelude","[]") [TCons ("AbstractHaskell","TypeDecl") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1,2] (Comb FuncCall ("AbstractHaskellPrinter","prefixInter") [Comb (FuncPartCall 1) ("AbstractHaskellPrinter","showTypeDecl") [Var 1],Var 2,Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude","[]") []]]])),Func ("AbstractHaskellPrinter","showTypeDecl") 2 Public (FuncType (TCons ("AbstractHaskellPrinter","Options") []) (FuncType (TCons ("AbstractHaskell","TypeDecl") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("AbstractHaskell","TypeSyn") [3,4,5,6]) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]],Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractHaskellPrinter","showSymbol") [Var 1,Var 3],Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractHaskellPrinter","prefixMap") [Comb (FuncPartCall 1) ("AbstractHaskellPrinter","showTypeExpr") [Var 1,Comb ConsCall ("Prelude","False") []],Comb FuncCall ("Prelude","map") [Comb (ConsPartCall 1) ("AbstractHaskell","TVar") [],Var 5],Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '='),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("AbstractHaskellPrinter","showTypeExpr") [Var 1,Comb ConsCall ("Prelude","False") [],Var 6]]]]]),Branch (Pattern ("AbstractHaskell","Type") [7,8,9,10]) (Case  Rigid (Comb FuncCall ("Prelude","null") [Var 10]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]],Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractHaskellPrinter","showSymbol") [Var 1,Var 7],Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractHaskellPrinter","prefixMap") [Comb (FuncPartCall 1) ("AbstractHaskellPrinter","showTypeExpr") [Var 1,Comb ConsCall ("Prelude","False") []],Comb FuncCall ("Prelude","map") [Comb (ConsPartCall 1) ("AbstractHaskell","TVar") [],Var 9],Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("AbstractHaskellPrinter","showBlock") [Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '='),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("AbstractHaskellPrinter","combineMap") [Comb (FuncPartCall 1) ("AbstractHaskellPrinter","showConsDecl") [Var 1],Var 10,Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude",":") [Lit (Charc  '|'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])]),Branch (Pattern ("AbstractHaskell","Instance") [11,12,13,14]) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]],Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractHaskellPrinter","showContext") [Var 1,Var 13],Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractHaskellPrinter","showSymbol") [Var 1,Var 11],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractHaskellPrinter","showTypeExpr") [Var 1,Comb ConsCall ("Prelude","True") [],Var 12],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","concatMap") [Comb (FuncPartCall 1) ("AbstractHaskellPrinter","showTypeDecl.showInstRule.112") [Var 1]],Var 14]]]]]]])])),Func ("AbstractHaskellPrinter","showTypeDecl.showInstRule.112") 2 Private (FuncType (TCons ("AbstractHaskellPrinter","Options") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("AbstractHaskell","Rule") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [3,4]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Case  Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("AbstractHaskellPrinter","isInfixOpName") [],Var 6]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("Prelude","++") [Var 6,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractHaskellPrinter","showRule") [Var 1,Var 4],Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude","[]") []]]]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude","++") [Var 6,Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractHaskellPrinter","showRule") [Var 1,Var 4],Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude","[]") []]]]])])])])),Func ("AbstractHaskellPrinter","showContext") 2 Private (FuncType (TCons ("AbstractHaskellPrinter","Options") []) (FuncType (TCons ("Prelude","[]") [TCons ("AbstractHaskell","Context") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [3,4]) (Case  Flex (Var 4) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractHaskellPrinter","showClass") [Var 1,Var 3],Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '='),Comb ConsCall ("Prelude",":") [Lit (Charc  '>'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]),Branch (Pattern ("Prelude",":") [5,6]) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","concat") [Comb FuncCall ("List","intersperse") [Comb ConsCall ("Prelude",":") [Lit (Charc  ','),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("AbstractHaskellPrinter","showClass") [Var 1],Var 2]]],Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '='),Comb ConsCall ("Prelude",":") [Lit (Charc  '>'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]]])])])),Func ("AbstractHaskellPrinter","showClass") 2 Private (FuncType (TCons ("AbstractHaskellPrinter","Options") []) (FuncType (TCons ("AbstractHaskell","Context") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("AbstractHaskell","Context") [3,4]) (Comb FuncCall ("AbstractHaskellPrinter","showTypeExpr") [Var 1,Comb ConsCall ("Prelude","False") [],Comb ConsCall ("AbstractHaskell","TCons") [Var 3,Comb FuncCall ("Prelude","map") [Comb (ConsPartCall 1) ("AbstractHaskell","TVar") [],Var 4]]])])),Func ("AbstractHaskellPrinter","showConsDecl") 2 Private (FuncType (TCons ("AbstractHaskellPrinter","Options") []) (FuncType (TCons ("AbstractHaskell","ConsDecl") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("AbstractHaskell","Cons") [3,4,5,6]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractHaskellPrinter","showSymbol") [Var 1,Var 3],Comb FuncCall ("AbstractHaskellPrinter","prefixMap") [Comb (FuncPartCall 1) ("AbstractHaskellPrinter","showTypeExpr") [Var 1,Comb ConsCall ("Prelude","True") []],Var 6,Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]])])),Func ("AbstractHaskellPrinter","showTypeExpr") 3 Public (FuncType (TCons ("AbstractHaskellPrinter","Options") []) (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("AbstractHaskell","TypeExpr") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1,2,3] (Case  Flex (Var 3) [Branch (Pattern ("AbstractHaskell","TVar") [4]) (Case  Flex (Var 4) [Branch (Pattern ("Prelude","(,)") [5,6]) (Comb FuncCall ("AbstractHaskellPrinter","showTypeVar") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("AbstractHaskellPrinter","showIdentifier") [],Var 6]])]),Branch (Pattern ("AbstractHaskell","FuncType") [7,8]) (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("AbstractHaskellPrinter","maybeShowBrackets") [Var 2],Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractHaskellPrinter","showTypeExpr") [Var 1,Comb FuncCall ("AbstractHaskellPrinter","isFuncType") [Var 7],Var 7],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  '>'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("AbstractHaskellPrinter","showTypeExpr") [Var 1,Comb ConsCall ("Prelude","False") [],Var 8]]]]),Branch (Pattern ("AbstractHaskell","TCons") [9,10]) (Case  Flex (Var 9) [Branch (Pattern ("Prelude","(,)") [11,12]) (Case  Rigid (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","==") [Var 11,Comb FuncCall ("Names","prelude") []],Comb FuncCall ("Prelude","==") [Var 12,Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("AbstractHaskellPrinter","maybeShowBrackets") [Comb FuncCall ("Prelude","&&") [Var 2,Comb FuncCall ("Prelude","not") [Comb FuncCall ("Prelude","null") [Var 10]]],Comb FuncCall ("AbstractHaskellPrinter","showTypeCons") [Var 1,Var 9,Var 10]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])])),Func ("AbstractHaskellPrinter","showTypeSig") 3 Private (FuncType (TCons ("AbstractHaskellPrinter","Options") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("AbstractHaskell","TypeSig") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1,2,3] (Case  Flex (Var 3) [Branch (Pattern ("AbstractHaskell","Untyped") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("AbstractHaskell","FType") [4]) (Comb FuncCall ("Prelude","++") [Case  Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("AbstractHaskellPrinter","isInfixOpName") [],Var 2]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Var 2,Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude","[]") []]]]),Branch (Pattern ("Prelude","False") []) (Var 2)],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractHaskellPrinter","showTypeExpr") [Var 1,Comb ConsCall ("Prelude","False") [],Var 4],Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude","[]") []]]]]),Branch (Pattern ("AbstractHaskell","CType") [5,6]) (Comb FuncCall ("Prelude","++") [Case  Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("AbstractHaskellPrinter","isInfixOpName") [],Var 2]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Var 2,Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude","[]") []]]]),Branch (Pattern ("Prelude","False") []) (Var 2)],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractHaskellPrinter","showContext") [Var 1,Var 5],Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractHaskellPrinter","showTypeExpr") [Var 1,Comb ConsCall ("Prelude","False") [],Var 6],Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude","[]") []]]]]])])),Func ("AbstractHaskellPrinter","showTypeVar") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Rigid (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","==") [Var 2,Lit (Charc  'a')],Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","not") [Comb FuncCall ("Prelude","null") [Var 3]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","all") [Comb (FuncPartCall 1) ("Char","isDigit") []],Var 3]]]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Var 3]]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude",":") [Var 2,Var 3])])])),Func ("AbstractHaskellPrinter","showIdentifier") 0 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Comb (FuncPartCall 1) ("Prelude","filter") [Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","not") [],Comb (FuncPartCall 1) ("Prelude","flip") [Comb (FuncPartCall 1) ("Prelude","elem") [],Comb ConsCall ("Prelude",":") [Lit (Charc  '<'),Comb ConsCall ("Prelude",":") [Lit (Charc  '>'),Comb ConsCall ("Prelude","[]") []]]]]])),Func ("AbstractHaskellPrinter","showFuncDecl") 0 Public (FuncType (TCons ("AbstractHaskell","FuncDecl") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Comb (FuncPartCall 1) ("AbstractHaskellPrinter","showFuncDeclOpt") [Comb FuncCall ("AbstractHaskellPrinter","defaultOptions") []])),Func ("AbstractHaskellPrinter","showFuncDecls") 2 Private (FuncType (TCons ("AbstractHaskellPrinter","Options") []) (FuncType (TCons ("Prelude","[]") [TCons ("AbstractHaskell","FuncDecl") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1,2] (Comb FuncCall ("AbstractHaskellPrinter","prefixInter") [Comb (FuncPartCall 1) ("AbstractHaskellPrinter","showFuncDeclOpt") [Var 1],Var 2,Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude","[]") []]]])),Func ("AbstractHaskellPrinter","showFuncDeclOpt") 2 Private (FuncType (TCons ("AbstractHaskellPrinter","Options") []) (FuncType (TCons ("AbstractHaskell","FuncDecl") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("AbstractHaskell","Func") [3,4,5,6,7,8]) (Case  Flex (Var 4) [Branch (Pattern ("Prelude","(,)") [9,10]) (Case  Flex (Var 8) [Branch (Pattern ("AbstractHaskell","Rules") [11]) (Let [(12,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("AbstractHaskellPrinter","isInfixOpName") [],Var 10]),(13,Case  Rigid (Var 12) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Var 10,Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude","[]") []]]]),Branch (Pattern ("Prelude","False") []) (Var 10)])] (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("AbstractHaskellPrinter","funcComment") [],Var 3],Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractHaskellPrinter","showTypeSig") [Var 1,Var 10,Var 7],Case  Rigid (Var 12) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("AbstractHaskellPrinter","showFuncDeclOpt.rulePrints.160") [Var 13,Var 10,Var 1,Var 11,Var 5]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","++") [Var 10,Comb FuncCall ("AbstractHaskellPrinter","prefixInter") [Comb (FuncPartCall 1) ("AbstractHaskellPrinter","showRule") [Var 1],Var 11,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude","[]") []],Var 10]]])]]])),Branch (Pattern ("AbstractHaskell","External") [14]) (Let [(15,Case  Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("AbstractHaskellPrinter","isInfixOpName") [],Var 10]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Var 10,Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude","[]") []]]]),Branch (Pattern ("Prelude","False") []) (Var 10)])] (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("AbstractHaskellPrinter","funcComment") [],Var 3],Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractHaskellPrinter","showTypeSig") [Var 1,Var 10,Var 7],Comb FuncCall ("Prelude","++") [Var 15,Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]))])])])),Func ("AbstractHaskellPrinter","showFuncDeclOpt.insertName.160") 4 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (Rule [1,2,3,4] (Case  Flex (Var 4) [Branch (Pattern ("Prelude","(,)") [5,6]) (Case  Rigid (Comb FuncCall ("Prelude","/=") [Var 3,Lit (Intc  0)]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","++") [Var 5,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Var 2,Var 6]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","++") [Var 1,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Var 5,Var 6]]])])])),Func ("AbstractHaskellPrinter","showFuncDeclOpt.rulePrints.160") 5 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("AbstractHaskellPrinter","Options") []) (FuncType (TCons ("Prelude","[]") [TCons ("AbstractHaskell","Rule") []]) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))))) (Rule [1,2,3,4,5] (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("AbstractHaskellPrinter","intercalate") [Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude","map") [Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("AbstractHaskellPrinter","showFuncDeclOpt.insertName.160") [Var 1,Var 2,Var 5],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","span") [Comb (FuncPartCall 1) ("Prelude","flip") [Comb (FuncPartCall 2) ("Prelude","/=") [],Lit (Charc  ' ')]],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","tail") [],Comb (FuncPartCall 1) ("AbstractHaskellPrinter","showRule") [Var 3]]]],Var 4]])),Func ("AbstractHaskellPrinter","funcComment") 0 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","unlines") [],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","map") [Comb (FuncPartCall 1) ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]],Comb (FuncPartCall 1) ("Prelude","lines") []]])),Func ("AbstractHaskellPrinter","showLocalFuncDecl") 1 Private (FuncType (TCons ("AbstractHaskellPrinter","Options") []) (FuncType (TCons ("AbstractHaskell","FuncDecl") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1] (Comb (FuncPartCall 1) ("AbstractHaskellPrinter","showFuncDeclOpt") [Var 1])),Func ("AbstractHaskellPrinter","showRule") 2 Private (FuncType (TCons ("AbstractHaskellPrinter","Options") []) (FuncType (TCons ("AbstractHaskell","Rule") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("AbstractHaskell","Rule") [3,4,5]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractHaskellPrinter","prefixMap") [Comb (FuncPartCall 1) ("AbstractHaskellPrinter","showPattern") [Var 1],Var 3,Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractHaskellPrinter","showCrhsList") [Var 1,Var 4],Case  Rigid (Comb FuncCall ("Prelude","null") [Var 5]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]],Comb FuncCall ("AbstractHaskellPrinter","showBlock") [Comb FuncCall ("AbstractHaskellPrinter","prefixMap") [Comb (FuncPartCall 1) ("AbstractHaskellPrinter","showLocalDecl") [Var 1],Var 5,Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude","[]") []]]]])]]])])),Func ("AbstractHaskellPrinter","showCrhsList") 2 Private (FuncType (TCons ("AbstractHaskellPrinter","Options") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("AbstractHaskell","Expr") [],TCons ("AbstractHaskell","Expr") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [3,4]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Case  Rigid (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","==") [Var 4,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","==") [Var 5,Comb ConsCall ("AbstractHaskell","Symbol") [Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Names","prelude") [],Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '='),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("AbstractHaskellPrinter","showExprOpt") [Var 1,Var 6]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("AbstractHaskellPrinter","showBlock") [Comb FuncCall ("AbstractHaskellPrinter","combineMap") [Comb (FuncPartCall 1) ("AbstractHaskellPrinter","showCrhs") [Var 1],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Var 5,Var 6],Var 4],Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude","[]") []]]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])])),Func ("AbstractHaskellPrinter","showCrhs") 2 Private (FuncType (TCons ("AbstractHaskellPrinter","Options") []) (FuncType (TCons ("Prelude","(,)") [TCons ("AbstractHaskell","Expr") [],TCons ("AbstractHaskell","Expr") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '|'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractHaskellPrinter","showExprOpt") [Var 1,Var 3],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude",":") [Lit (Charc  '='),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("AbstractHaskellPrinter","showExprOpt") [Var 1,Var 4]]]])])),Func ("AbstractHaskellPrinter","showLocalDecl") 2 Private (FuncType (TCons ("AbstractHaskellPrinter","Options") []) (FuncType (TCons ("AbstractHaskell","LocalDecl") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("AbstractHaskell","LocalFunc") [3]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("AbstractHaskellPrinter","showLocalFuncDecl") [Var 1],Var 3]),Branch (Pattern ("AbstractHaskell","LocalPat") [4,5,6]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractHaskellPrinter","showPattern") [Var 1,Var 4],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '='),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractHaskellPrinter","showExprOpt") [Var 1,Var 5],Case  Rigid (Comb FuncCall ("Prelude","null") [Var 6]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]],Comb FuncCall ("AbstractHaskellPrinter","showBlock") [Comb FuncCall ("AbstractHaskellPrinter","prefixMap") [Comb (FuncPartCall 1) ("AbstractHaskellPrinter","showLocalDecl") [Var 1],Var 6,Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude","[]") []]]]])]]]]),Branch (Pattern ("AbstractHaskell","LocalVar") [7]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractHaskellPrinter","showPattern") [Var 1,Comb ConsCall ("AbstractHaskell","PVar") [Var 7]],Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]])])),Func ("AbstractHaskellPrinter","showExpr") 0 Public (FuncType (TCons ("AbstractHaskell","Expr") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Comb (FuncPartCall 1) ("AbstractHaskellPrinter","showExprOpt") [Comb FuncCall ("AbstractHaskellPrinter","defaultOptions") []])),Func ("AbstractHaskellPrinter","showExprOpt") 2 Private (FuncType (TCons ("AbstractHaskellPrinter","Options") []) (FuncType (TCons ("AbstractHaskell","Expr") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("AbstractHaskell","Var") [3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("AbstractHaskellPrinter","showIdentifier") [],Var 5])]),Branch (Pattern ("AbstractHaskell","Lit") [6]) (Comb FuncCall ("AbstractHaskellPrinter","showLiteral") [Var 6]),Branch (Pattern ("AbstractHaskell","Symbol") [7]) (Case  Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("AbstractHaskellPrinter","isInfixOpName") [],Comb FuncCall ("Prelude","snd") [Var 7]]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractHaskellPrinter","showSymbol") [Var 1,Var 7],Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude","[]") []]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("AbstractHaskellPrinter","showSymbol") [Var 1,Var 7])]),Branch (Pattern ("AbstractHaskell","Apply") [8,9]) (Comb FuncCall ("AbstractHaskellPrinter","showApplication") [Var 1,Comb ConsCall ("AbstractHaskell","Apply") [Var 8,Var 9]]),Branch (Pattern ("AbstractHaskell","Lambda") [10,11]) (Comb FuncCall ("AbstractHaskellPrinter","showLambdaOrSection") [Var 1,Var 10,Var 11]),Branch (Pattern ("AbstractHaskell","Let") [12,13]) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("AbstractHaskellPrinter","showBlock") [Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractHaskellPrinter","combineMap") [Comb (FuncPartCall 1) ("AbstractHaskellPrinter","showLocalDecl") [Var 1],Var 12,Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]],Comb FuncCall ("AbstractHaskellPrinter","showBoxedExpr") [Var 1,Var 13]]]]]),Branch (Pattern ("AbstractHaskell","DoExpr") [14]) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude","[]") []]]]]]]]],Comb FuncCall ("AbstractHaskellPrinter","showBlock") [Comb FuncCall ("AbstractHaskellPrinter","combineMap") [Comb (FuncPartCall 1) ("AbstractHaskellPrinter","showStatement") [Var 1],Var 14,Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude","[]") []]]]]),Branch (Pattern ("AbstractHaskell","ListComp") [15,16]) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '['),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractHaskellPrinter","showBoxedExpr") [Var 1,Var 15],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '|'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractHaskellPrinter","combineMap") [Comb (FuncPartCall 1) ("AbstractHaskellPrinter","showStatement") [Var 1],Var 16,Comb ConsCall ("Prelude",":") [Lit (Charc  ','),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude",":") [Lit (Charc  ']'),Comb ConsCall ("Prelude","[]") []]]]]]),Branch (Pattern ("AbstractHaskell","Case") [17,18]) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]],Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractHaskellPrinter","showBoxedExpr") [Var 1,Var 17],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("AbstractHaskellPrinter","showBlock") [Comb FuncCall ("AbstractHaskellPrinter","combineMap") [Comb (FuncPartCall 1) ("AbstractHaskellPrinter","showBranchExpr") [Var 1],Var 18,Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude","[]") []]]]]]]),Branch (Pattern ("AbstractHaskell","Typed") [19,20]) (Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractHaskellPrinter","showExprOpt") [Var 1,Var 19],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractHaskellPrinter","showTypeExpr") [Var 1,Comb ConsCall ("Prelude","False") [],Var 20],Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude","[]") []]]]]])])),Func ("AbstractHaskellPrinter","showSymbol") 2 Private (FuncType (TCons ("AbstractHaskellPrinter","Options") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [3,4]) (Case  Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Names","isHaskellModule") [],Var 3]) [Branch (Pattern ("Prelude","True") []) (Var 4),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 3,Comb FuncCall ("AbstractHaskellPrinter","_#selR@Options.currentModule") [Var 1]]) [Branch (Pattern ("Prelude","True") []) (Var 4),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","++") [Var 3,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude","[]") []],Var 4]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])])),Func ("AbstractHaskellPrinter","showLambdaOrSection") 3 Private (FuncType (TCons ("AbstractHaskellPrinter","Options") []) (FuncType (TCons ("Prelude","[]") [TCons ("AbstractHaskell","Pattern") []]) (FuncType (TCons ("AbstractHaskell","Expr") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1,2,3] (Case  Rigid (Var 2) [Branch (Pattern ("Prelude",":") [4,5]) (Case  Rigid (Var 4) [Branch (Pattern ("AbstractHaskell","PVar") [6]) (Case  Rigid (Var 5) [Branch (Pattern ("Prelude","[]") []) (Case  Rigid (Var 3) [Branch (Pattern ("AbstractHaskell","Apply") [7,8]) (Case  Rigid (Var 7) [Branch (Pattern ("AbstractHaskell","Apply") [9,10]) (Case  Rigid (Var 9) [Branch (Pattern ("AbstractHaskell","Symbol") [11]) (Case  Rigid (Var 11) [Branch (Pattern ("Prelude","(,)") [12,13]) (Case  Rigid (Var 8) [Branch (Pattern ("AbstractHaskell","Var") [14]) (Case  Rigid (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("AbstractHaskellPrinter","isInfixOpName") [],Var 13],Comb FuncCall ("Prelude","&&") [Comb FuncCall ("AbstractHaskellPrinter","isAtom") [Var 10],Comb FuncCall ("Prelude","/=") [Comb ConsCall ("AbstractHaskell","Var") [Var 14],Var 10]]]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 6,Var 14]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractHaskellPrinter","showBoxedExpr") [Var 1,Var 10],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractHaskellPrinter","showSymbol") [Var 1,Var 11],Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude","[]") []]]]]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 10,Comb ConsCall ("AbstractHaskell","Var") [Var 6]]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractHaskellPrinter","showSymbol") [Var 1,Var 11],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractHaskellPrinter","showExprOpt") [Var 1,Comb ConsCall ("AbstractHaskell","Var") [Var 14]],Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude","[]") []]]]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("AbstractHaskellPrinter","showLambda") [Var 1,Var 2,Var 3])])]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("AbstractHaskellPrinter","showLambda") [Var 1,Var 2,Var 3])]),Branch (Pattern ("AbstractHaskell","Lit") [15]) (Case  Rigid (Var 10) [Branch (Pattern ("AbstractHaskell","Var") [16]) (Case  Rigid (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("AbstractHaskellPrinter","isInfixOpName") [],Var 13],Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","==") [Var 6,Var 16],Comb FuncCall ("Prelude","&&") [Comb FuncCall ("AbstractHaskellPrinter","isAtom") [Comb ConsCall ("AbstractHaskell","Lit") [Var 15]],Comb FuncCall ("Prelude","/=") [Comb ConsCall ("AbstractHaskell","Var") [Var 16],Comb ConsCall ("AbstractHaskell","Lit") [Var 15]]]]]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Var 13,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractHaskellPrinter","showBoxedExpr") [Var 1,Comb ConsCall ("AbstractHaskell","Lit") [Var 15]],Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude","[]") []]]]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("AbstractHaskellPrinter","showLambda") [Var 1,Var 2,Var 3])]),Branch (Pattern ("AbstractHaskell","Lit") [17]) (Comb FuncCall ("AbstractHaskellPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractHaskell","Symbol") [18]) (Comb FuncCall ("AbstractHaskellPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractHaskell","Apply") [19,20]) (Comb FuncCall ("AbstractHaskellPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractHaskell","Lambda") [21,22]) (Comb FuncCall ("AbstractHaskellPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractHaskell","Let") [23,24]) (Comb FuncCall ("AbstractHaskellPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractHaskell","DoExpr") [25]) (Comb FuncCall ("AbstractHaskellPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractHaskell","ListComp") [26,27]) (Comb FuncCall ("AbstractHaskellPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractHaskell","Case") [28,29]) (Comb FuncCall ("AbstractHaskellPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractHaskell","Typed") [30,31]) (Comb FuncCall ("AbstractHaskellPrinter","showLambda") [Var 1,Var 2,Var 3])]),Branch (Pattern ("AbstractHaskell","Symbol") [32]) (Case  Rigid (Var 10) [Branch (Pattern ("AbstractHaskell","Var") [33]) (Case  Rigid (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("AbstractHaskellPrinter","isInfixOpName") [],Var 13],Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","==") [Var 6,Var 33],Comb FuncCall ("Prelude","&&") [Comb FuncCall ("AbstractHaskellPrinter","isAtom") [Comb ConsCall ("AbstractHaskell","Symbol") [Var 32]],Comb FuncCall ("Prelude","/=") [Comb ConsCall ("AbstractHaskell","Var") [Var 33],Comb ConsCall ("AbstractHaskell","Symbol") [Var 32]]]]]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Var 13,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractHaskellPrinter","showBoxedExpr") [Var 1,Comb ConsCall ("AbstractHaskell","Symbol") [Var 32]],Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude","[]") []]]]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("AbstractHaskellPrinter","showLambda") [Var 1,Var 2,Var 3])]),Branch (Pattern ("AbstractHaskell","Lit") [34]) (Comb FuncCall ("AbstractHaskellPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractHaskell","Symbol") [35]) (Comb FuncCall ("AbstractHaskellPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractHaskell","Apply") [36,37]) (Comb FuncCall ("AbstractHaskellPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractHaskell","Lambda") [38,39]) (Comb FuncCall ("AbstractHaskellPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractHaskell","Let") [40,41]) (Comb FuncCall ("AbstractHaskellPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractHaskell","DoExpr") [42]) (Comb FuncCall ("AbstractHaskellPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractHaskell","ListComp") [43,44]) (Comb FuncCall ("AbstractHaskellPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractHaskell","Case") [45,46]) (Comb FuncCall ("AbstractHaskellPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractHaskell","Typed") [47,48]) (Comb FuncCall ("AbstractHaskellPrinter","showLambda") [Var 1,Var 2,Var 3])]),Branch (Pattern ("AbstractHaskell","Apply") [49,50]) (Case  Rigid (Var 10) [Branch (Pattern ("AbstractHaskell","Var") [51]) (Case  Rigid (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("AbstractHaskellPrinter","isInfixOpName") [],Var 13],Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","==") [Var 6,Var 51],Comb FuncCall ("Prelude","&&") [Comb FuncCall ("AbstractHaskellPrinter","isAtom") [Comb ConsCall ("AbstractHaskell","Apply") [Var 49,Var 50]],Comb FuncCall ("Prelude","/=") [Comb ConsCall ("AbstractHaskell","Var") [Var 51],Comb ConsCall ("AbstractHaskell","Apply") [Var 49,Var 50]]]]]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Var 13,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractHaskellPrinter","showBoxedExpr") [Var 1,Comb ConsCall ("AbstractHaskell","Apply") [Var 49,Var 50]],Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude","[]") []]]]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("AbstractHaskellPrinter","showLambda") [Var 1,Var 2,Var 3])]),Branch (Pattern ("AbstractHaskell","Lit") [52]) (Comb FuncCall ("AbstractHaskellPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractHaskell","Symbol") [53]) (Comb FuncCall ("AbstractHaskellPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractHaskell","Apply") [54,55]) (Comb FuncCall ("AbstractHaskellPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractHaskell","Lambda") [56,57]) (Comb FuncCall ("AbstractHaskellPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractHaskell","Let") [58,59]) (Comb FuncCall ("AbstractHaskellPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractHaskell","DoExpr") [60]) (Comb FuncCall ("AbstractHaskellPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractHaskell","ListComp") [61,62]) (Comb FuncCall ("AbstractHaskellPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractHaskell","Case") [63,64]) (Comb FuncCall ("AbstractHaskellPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractHaskell","Typed") [65,66]) (Comb FuncCall ("AbstractHaskellPrinter","showLambda") [Var 1,Var 2,Var 3])]),Branch (Pattern ("AbstractHaskell","Lambda") [67,68]) (Case  Rigid (Var 10) [Branch (Pattern ("AbstractHaskell","Var") [69]) (Case  Rigid (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("AbstractHaskellPrinter","isInfixOpName") [],Var 13],Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","==") [Var 6,Var 69],Comb FuncCall ("Prelude","&&") [Comb FuncCall ("AbstractHaskellPrinter","isAtom") [Comb ConsCall ("AbstractHaskell","Lambda") [Var 67,Var 68]],Comb FuncCall ("Prelude","/=") [Comb ConsCall ("AbstractHaskell","Var") [Var 69],Comb ConsCall ("AbstractHaskell","Lambda") [Var 67,Var 68]]]]]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Var 13,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractHaskellPrinter","showBoxedExpr") [Var 1,Comb ConsCall ("AbstractHaskell","Lambda") [Var 67,Var 68]],Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude","[]") []]]]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("AbstractHaskellPrinter","showLambda") [Var 1,Var 2,Var 3])]),Branch (Pattern ("AbstractHaskell","Lit") [70]) (Comb FuncCall ("AbstractHaskellPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractHaskell","Symbol") [71]) (Comb FuncCall ("AbstractHaskellPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractHaskell","Apply") [72,73]) (Comb FuncCall ("AbstractHaskellPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractHaskell","Lambda") [74,75]) (Comb FuncCall ("AbstractHaskellPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractHaskell","Let") [76,77]) (Comb FuncCall ("AbstractHaskellPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractHaskell","DoExpr") [78]) (Comb FuncCall ("AbstractHaskellPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractHaskell","ListComp") [79,80]) (Comb FuncCall ("AbstractHaskellPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractHaskell","Case") [81,82]) (Comb FuncCall ("AbstractHaskellPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractHaskell","Typed") [83,84]) (Comb FuncCall ("AbstractHaskellPrinter","showLambda") [Var 1,Var 2,Var 3])]),Branch (Pattern ("AbstractHaskell","Let") [85,86]) (Case  Rigid (Var 10) [Branch (Pattern ("AbstractHaskell","Var") [87]) (Case  Rigid (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("AbstractHaskellPrinter","isInfixOpName") [],Var 13],Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","==") [Var 6,Var 87],Comb FuncCall ("Prelude","&&") [Comb FuncCall ("AbstractHaskellPrinter","isAtom") [Comb ConsCall ("AbstractHaskell","Let") [Var 85,Var 86]],Comb FuncCall ("Prelude","/=") [Comb ConsCall ("AbstractHaskell","Var") [Var 87],Comb ConsCall ("AbstractHaskell","Let") [Var 85,Var 86]]]]]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Var 13,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractHaskellPrinter","showBoxedExpr") [Var 1,Comb ConsCall ("AbstractHaskell","Let") [Var 85,Var 86]],Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude","[]") []]]]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("AbstractHaskellPrinter","showLambda") [Var 1,Var 2,Var 3])]),Branch (Pattern ("AbstractHaskell","Lit") [88]) (Comb FuncCall ("AbstractHaskellPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractHaskell","Symbol") [89]) (Comb FuncCall ("AbstractHaskellPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractHaskell","Apply") [90,91]) (Comb FuncCall ("AbstractHaskellPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractHaskell","Lambda") [92,93]) (Comb FuncCall ("AbstractHaskellPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractHaskell","Let") [94,95]) (Comb FuncCall ("AbstractHaskellPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractHaskell","DoExpr") [96]) (Comb FuncCall ("AbstractHaskellPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractHaskell","ListComp") [97,98]) (Comb FuncCall ("AbstractHaskellPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractHaskell","Case") [99,100]) (Comb FuncCall ("AbstractHaskellPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractHaskell","Typed") [101,102]) (Comb FuncCall ("AbstractHaskellPrinter","showLambda") [Var 1,Var 2,Var 3])]),Branch (Pattern ("AbstractHaskell","DoExpr") [103]) (Case  Rigid (Var 10) [Branch (Pattern ("AbstractHaskell","Var") [104]) (Case  Rigid (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("AbstractHaskellPrinter","isInfixOpName") [],Var 13],Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","==") [Var 6,Var 104],Comb FuncCall ("Prelude","&&") [Comb FuncCall ("AbstractHaskellPrinter","isAtom") [Comb ConsCall ("AbstractHaskell","DoExpr") [Var 103]],Comb FuncCall ("Prelude","/=") [Comb ConsCall ("AbstractHaskell","Var") [Var 104],Comb ConsCall ("AbstractHaskell","DoExpr") [Var 103]]]]]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Var 13,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractHaskellPrinter","showBoxedExpr") [Var 1,Comb ConsCall ("AbstractHaskell","DoExpr") [Var 103]],Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude","[]") []]]]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("AbstractHaskellPrinter","showLambda") [Var 1,Var 2,Var 3])]),Branch (Pattern ("AbstractHaskell","Lit") [105]) (Comb FuncCall ("AbstractHaskellPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractHaskell","Symbol") [106]) (Comb FuncCall ("AbstractHaskellPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractHaskell","Apply") [107,108]) (Comb FuncCall ("AbstractHaskellPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractHaskell","Lambda") [109,110]) (Comb FuncCall ("AbstractHaskellPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractHaskell","Let") [111,112]) (Comb FuncCall ("AbstractHaskellPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractHaskell","DoExpr") [113]) (Comb FuncCall ("AbstractHaskellPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractHaskell","ListComp") [114,115]) (Comb FuncCall ("AbstractHaskellPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractHaskell","Case") [116,117]) (Comb FuncCall ("AbstractHaskellPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractHaskell","Typed") [118,119]) (Comb FuncCall ("AbstractHaskellPrinter","showLambda") [Var 1,Var 2,Var 3])]),Branch (Pattern ("AbstractHaskell","ListComp") [120,121]) (Case  Rigid (Var 10) [Branch (Pattern ("AbstractHaskell","Var") [122]) (Case  Rigid (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("AbstractHaskellPrinter","isInfixOpName") [],Var 13],Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","==") [Var 6,Var 122],Comb FuncCall ("Prelude","&&") [Comb FuncCall ("AbstractHaskellPrinter","isAtom") [Comb ConsCall ("AbstractHaskell","ListComp") [Var 120,Var 121]],Comb FuncCall ("Prelude","/=") [Comb ConsCall ("AbstractHaskell","Var") [Var 122],Comb ConsCall ("AbstractHaskell","ListComp") [Var 120,Var 121]]]]]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Var 13,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractHaskellPrinter","showBoxedExpr") [Var 1,Comb ConsCall ("AbstractHaskell","ListComp") [Var 120,Var 121]],Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude","[]") []]]]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("AbstractHaskellPrinter","showLambda") [Var 1,Var 2,Var 3])]),Branch (Pattern ("AbstractHaskell","Lit") [123]) (Comb FuncCall ("AbstractHaskellPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractHaskell","Symbol") [124]) (Comb FuncCall ("AbstractHaskellPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractHaskell","Apply") [125,126]) (Comb FuncCall ("AbstractHaskellPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractHaskell","Lambda") [127,128]) (Comb FuncCall ("AbstractHaskellPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractHaskell","Let") [129,130]) (Comb FuncCall ("AbstractHaskellPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractHaskell","DoExpr") [131]) (Comb FuncCall ("AbstractHaskellPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractHaskell","ListComp") [132,133]) (Comb FuncCall ("AbstractHaskellPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractHaskell","Case") [134,135]) (Comb FuncCall ("AbstractHaskellPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractHaskell","Typed") [136,137]) (Comb FuncCall ("AbstractHaskellPrinter","showLambda") [Var 1,Var 2,Var 3])]),Branch (Pattern ("AbstractHaskell","Case") [138,139]) (Case  Rigid (Var 10) [Branch (Pattern ("AbstractHaskell","Var") [140]) (Case  Rigid (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("AbstractHaskellPrinter","isInfixOpName") [],Var 13],Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","==") [Var 6,Var 140],Comb FuncCall ("Prelude","&&") [Comb FuncCall ("AbstractHaskellPrinter","isAtom") [Comb ConsCall ("AbstractHaskell","Case") [Var 138,Var 139]],Comb FuncCall ("Prelude","/=") [Comb ConsCall ("AbstractHaskell","Var") [Var 140],Comb ConsCall ("AbstractHaskell","Case") [Var 138,Var 139]]]]]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Var 13,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractHaskellPrinter","showBoxedExpr") [Var 1,Comb ConsCall ("AbstractHaskell","Case") [Var 138,Var 139]],Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude","[]") []]]]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("AbstractHaskellPrinter","showLambda") [Var 1,Var 2,Var 3])]),Branch (Pattern ("AbstractHaskell","Lit") [141]) (Comb FuncCall ("AbstractHaskellPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractHaskell","Symbol") [142]) (Comb FuncCall ("AbstractHaskellPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractHaskell","Apply") [143,144]) (Comb FuncCall ("AbstractHaskellPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractHaskell","Lambda") [145,146]) (Comb FuncCall ("AbstractHaskellPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractHaskell","Let") [147,148]) (Comb FuncCall ("AbstractHaskellPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractHaskell","DoExpr") [149]) (Comb FuncCall ("AbstractHaskellPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractHaskell","ListComp") [150,151]) (Comb FuncCall ("AbstractHaskellPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractHaskell","Case") [152,153]) (Comb FuncCall ("AbstractHaskellPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractHaskell","Typed") [154,155]) (Comb FuncCall ("AbstractHaskellPrinter","showLambda") [Var 1,Var 2,Var 3])]),Branch (Pattern ("AbstractHaskell","Typed") [156,157]) (Case  Rigid (Var 10) [Branch (Pattern ("AbstractHaskell","Var") [158]) (Case  Rigid (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("AbstractHaskellPrinter","isInfixOpName") [],Var 13],Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","==") [Var 6,Var 158],Comb FuncCall ("Prelude","&&") [Comb FuncCall ("AbstractHaskellPrinter","isAtom") [Comb ConsCall ("AbstractHaskell","Typed") [Var 156,Var 157]],Comb FuncCall ("Prelude","/=") [Comb ConsCall ("AbstractHaskell","Var") [Var 158],Comb ConsCall ("AbstractHaskell","Typed") [Var 156,Var 157]]]]]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Var 13,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractHaskellPrinter","showBoxedExpr") [Var 1,Comb ConsCall ("AbstractHaskell","Typed") [Var 156,Var 157]],Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude","[]") []]]]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("AbstractHaskellPrinter","showLambda") [Var 1,Var 2,Var 3])]),Branch (Pattern ("AbstractHaskell","Lit") [159]) (Comb FuncCall ("AbstractHaskellPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractHaskell","Symbol") [160]) (Comb FuncCall ("AbstractHaskellPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractHaskell","Apply") [161,162]) (Comb FuncCall ("AbstractHaskellPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractHaskell","Lambda") [163,164]) (Comb FuncCall ("AbstractHaskellPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractHaskell","Let") [165,166]) (Comb FuncCall ("AbstractHaskellPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractHaskell","DoExpr") [167]) (Comb FuncCall ("AbstractHaskellPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractHaskell","ListComp") [168,169]) (Comb FuncCall ("AbstractHaskellPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractHaskell","Case") [170,171]) (Comb FuncCall ("AbstractHaskellPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractHaskell","Typed") [172,173]) (Comb FuncCall ("AbstractHaskellPrinter","showLambda") [Var 1,Var 2,Var 3])])])]),Branch (Pattern ("AbstractHaskell","Var") [174]) (Comb FuncCall ("AbstractHaskellPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractHaskell","Lit") [175]) (Comb FuncCall ("AbstractHaskellPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractHaskell","Apply") [176,177]) (Comb FuncCall ("AbstractHaskellPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractHaskell","Lambda") [178,179]) (Comb FuncCall ("AbstractHaskellPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractHaskell","Let") [180,181]) (Comb FuncCall ("AbstractHaskellPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractHaskell","DoExpr") [182]) (Comb FuncCall ("AbstractHaskellPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractHaskell","ListComp") [183,184]) (Comb FuncCall ("AbstractHaskellPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractHaskell","Case") [185,186]) (Comb FuncCall ("AbstractHaskellPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractHaskell","Typed") [187,188]) (Comb FuncCall ("AbstractHaskellPrinter","showLambda") [Var 1,Var 2,Var 3])]),Branch (Pattern ("AbstractHaskell","Var") [189]) (Comb FuncCall ("AbstractHaskellPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractHaskell","Lit") [190]) (Comb FuncCall ("AbstractHaskellPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractHaskell","Symbol") [191]) (Comb FuncCall ("AbstractHaskellPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractHaskell","Lambda") [192,193]) (Comb FuncCall ("AbstractHaskellPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractHaskell","Let") [194,195]) (Comb FuncCall ("AbstractHaskellPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractHaskell","DoExpr") [196]) (Comb FuncCall ("AbstractHaskellPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractHaskell","ListComp") [197,198]) (Comb FuncCall ("AbstractHaskellPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractHaskell","Case") [199,200]) (Comb FuncCall ("AbstractHaskellPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractHaskell","Typed") [201,202]) (Comb FuncCall ("AbstractHaskellPrinter","showLambda") [Var 1,Var 2,Var 3])]),Branch (Pattern ("AbstractHaskell","Var") [203]) (Comb FuncCall ("AbstractHaskellPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractHaskell","Lit") [204]) (Comb FuncCall ("AbstractHaskellPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractHaskell","Symbol") [205]) (Comb FuncCall ("AbstractHaskellPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractHaskell","Lambda") [206,207]) (Comb FuncCall ("AbstractHaskellPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractHaskell","Let") [208,209]) (Comb FuncCall ("AbstractHaskellPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractHaskell","DoExpr") [210]) (Comb FuncCall ("AbstractHaskellPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractHaskell","ListComp") [211,212]) (Comb FuncCall ("AbstractHaskellPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractHaskell","Case") [213,214]) (Comb FuncCall ("AbstractHaskellPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractHaskell","Typed") [215,216]) (Comb FuncCall ("AbstractHaskellPrinter","showLambda") [Var 1,Var 2,Var 3])]),Branch (Pattern ("Prelude",":") [217,218]) (Comb FuncCall ("AbstractHaskellPrinter","showLambda") [Var 1,Var 2,Var 3])]),Branch (Pattern ("AbstractHaskell","PLit") [219]) (Comb FuncCall ("AbstractHaskellPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractHaskell","PComb") [220,221]) (Comb FuncCall ("AbstractHaskellPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractHaskell","PAs") [222,223]) (Comb FuncCall ("AbstractHaskellPrinter","showLambda") [Var 1,Var 2,Var 3]),Branch (Pattern ("AbstractHaskell","PFuncComb") [224,225]) (Comb FuncCall ("AbstractHaskellPrinter","showLambda") [Var 1,Var 2,Var 3])]),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("AbstractHaskellPrinter","showLambda") [Var 1,Var 2,Var 3])])),Func ("AbstractHaskellPrinter","showLambda") 3 Private (FuncType (TCons ("AbstractHaskellPrinter","Options") []) (FuncType (TCons ("Prelude","[]") [TCons ("AbstractHaskell","Pattern") []]) (FuncType (TCons ("AbstractHaskell","Expr") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1,2,3] (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '\\'),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractHaskellPrinter","combineMap") [Comb (FuncPartCall 1) ("AbstractHaskellPrinter","showPattern") [Var 1],Var 2,Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  '>'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("AbstractHaskellPrinter","showExprOpt") [Var 1,Var 3]]]])),Func ("AbstractHaskellPrinter","showStatement") 2 Private (FuncType (TCons ("AbstractHaskellPrinter","Options") []) (FuncType (TCons ("AbstractHaskell","Statement") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("AbstractHaskell","SExpr") [3]) (Comb FuncCall ("AbstractHaskellPrinter","showExprOpt") [Var 1,Var 3]),Branch (Pattern ("AbstractHaskell","SPat") [4,5]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractHaskellPrinter","showPattern") [Var 1,Var 4],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '<'),Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("AbstractHaskellPrinter","showExprOpt") [Var 1,Var 5]]]),Branch (Pattern ("AbstractHaskell","SLet") [6]) (Case  Rigid (Var 6) [Branch (Pattern ("Prelude",":") [7,8]) (Case  Rigid (Var 8) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("AbstractHaskellPrinter","showLocalDecl") [Var 1,Var 7]]),Branch (Pattern ("Prelude",":") [9,10]) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("AbstractHaskellPrinter","showBlock") [Comb FuncCall ("AbstractHaskellPrinter","combineMap") [Comb (FuncPartCall 1) ("AbstractHaskellPrinter","showLocalDecl") [Var 1],Var 6,Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude","[]") []]]]])]),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("AbstractHaskellPrinter","showBlock") [Comb FuncCall ("AbstractHaskellPrinter","combineMap") [Comb (FuncPartCall 1) ("AbstractHaskellPrinter","showLocalDecl") [Var 1],Var 6,Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude","[]") []]]]])])])),Func ("AbstractHaskellPrinter","showPattern") 2 Public (FuncType (TCons ("AbstractHaskellPrinter","Options") []) (FuncType (TCons ("AbstractHaskell","Pattern") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("AbstractHaskell","PVar") [3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("AbstractHaskellPrinter","showIdentifier") [],Var 5])]),Branch (Pattern ("AbstractHaskell","PLit") [6]) (Comb FuncCall ("AbstractHaskellPrinter","showLitPattern") [Var 1,Var 6]),Branch (Pattern ("AbstractHaskell","PComb") [7,8]) (Case  Flex (Var 8) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("AbstractHaskellPrinter","showSymbol") [Var 1,Var 7]),Branch (Pattern ("Prelude",":") [9,10]) (Case  Flex (Var 7) [Branch (Pattern ("Prelude","(,)") [11,12]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 11,Comb FuncCall ("Names","prelude") []]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("AbstractHaskellPrinter","showPreludeCons") [Var 1,Comb ConsCall ("AbstractHaskell","PComb") [Var 7,Comb ConsCall ("Prelude",":") [Var 9,Var 10]]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractHaskellPrinter","showSymbol") [Var 1,Var 7],Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractHaskellPrinter","prefixMap") [Comb (FuncPartCall 1) ("AbstractHaskellPrinter","showPattern") [Var 1],Comb ConsCall ("Prelude",":") [Var 9,Var 10],Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude","[]") []]]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])]),Branch (Pattern ("AbstractHaskell","PAs") [13,14]) (Case  Flex (Var 13) [Branch (Pattern ("Prelude","(,)") [15,16]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("AbstractHaskellPrinter","showIdentifier") [],Var 16],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '@'),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("AbstractHaskellPrinter","showPattern") [Var 1,Var 14]]])]),Branch (Pattern ("AbstractHaskell","PFuncComb") [17,18]) (Comb FuncCall ("AbstractHaskellPrinter","showPattern") [Var 1,Comb ConsCall ("AbstractHaskell","PComb") [Var 17,Var 18]])])),Func ("AbstractHaskellPrinter","showLitPattern") 2 Private (FuncType (TCons ("AbstractHaskellPrinter","Options") []) (FuncType (TCons ("AbstractHaskell","Literal") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("AbstractHaskell","Intc") [3]) (Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractHaskellPrinter","showSymbol") [Var 1,Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Names","curryPrelude") [],Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude",":") [Lit (Charc  'I'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractHaskellPrinter","showInt") [Var 3],Comb ConsCall ("Prelude",":") [Lit (Charc  '#'),Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude","[]") []]]]]]]),Branch (Pattern ("AbstractHaskell","Floatc") [4]) (Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractHaskellPrinter","showSymbol") [Var 1,Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Names","curryPrelude") [],Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude",":") [Lit (Charc  'F'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude","[]") []]]]]]]]]],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractHaskellPrinter","showFloat") [Var 4],Comb ConsCall ("Prelude",":") [Lit (Charc  '#'),Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude","[]") []]]]]]]),Branch (Pattern ("AbstractHaskell","Charc") [5]) (Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractHaskellPrinter","showSymbol") [Var 1,Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Names","curryPrelude") [],Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude","[]") []]]]]]]]],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '\''),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractHaskellPrinter","showCharc") [Var 2],Comb ConsCall ("Prelude",":") [Lit (Charc  '\''),Comb ConsCall ("Prelude",":") [Lit (Charc  '#'),Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude","[]") []]]]]]]])])),Func ("AbstractHaskellPrinter","showPreludeCons") 2 Private (FuncType (TCons ("AbstractHaskellPrinter","Options") []) (FuncType (TCons ("AbstractHaskell","Pattern") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1,2] (Let [(3,Comb FuncCall ("AbstractHaskellPrinter","showPreludeCons._#selFP5#qname") [Var 2]),(4,Comb FuncCall ("AbstractHaskellPrinter","showPreludeCons._#selFP6#name") [Var 2]),(5,Comb FuncCall ("AbstractHaskellPrinter","showPreludeCons._#selFP7#pattlist") [Var 2])] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 4,Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude","[]") []]]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("AbstractHaskellPrinter","showPatternList") [Var 1,Var 2]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("AbstractHaskellPrinter","isTuple") [Var 4]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractHaskellPrinter","combineMap") [Comb (FuncPartCall 1) ("AbstractHaskellPrinter","showPattern") [Var 1],Var 5,Comb ConsCall ("Prelude",":") [Lit (Charc  ','),Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude","[]") []]]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractHaskellPrinter","showSymbol") [Var 1,Var 3],Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractHaskellPrinter","prefixMap") [Comb (FuncPartCall 1) ("AbstractHaskellPrinter","showPattern") [Var 1],Var 5,Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude","[]") []]]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])]))),Func ("AbstractHaskellPrinter","showPreludeCons._#selFP5#qname") 1 Private (FuncType (TCons ("AbstractHaskell","Pattern") []) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("AbstractHaskell","PComb") [2,3]) (Case  Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Var 2)])])),Func ("AbstractHaskellPrinter","showPreludeCons._#selFP6#name") 1 Private (FuncType (TCons ("AbstractHaskell","Pattern") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("AbstractHaskell","PComb") [2,3]) (Case  Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Var 5)])])),Func ("AbstractHaskellPrinter","showPreludeCons._#selFP7#pattlist") 1 Private (FuncType (TCons ("AbstractHaskell","Pattern") []) (TCons ("Prelude","[]") [TCons ("AbstractHaskell","Pattern") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("AbstractHaskell","PComb") [2,3]) (Case  Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Var 3)])])),Func ("AbstractHaskellPrinter","showPatternList") 2 Private (FuncType (TCons ("AbstractHaskellPrinter","Options") []) (FuncType (TCons ("AbstractHaskell","Pattern") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1,2] (Case  Rigid (Comb FuncCall ("AbstractHaskellPrinter","isClosedStringPattern") [Var 2]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  '"'),Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","filter") [Comb (FuncPartCall 1) ("Prelude","flip") [Comb (FuncPartCall 2) ("Prelude","/=") [],Lit (Charc  '\'')],Comb FuncCall ("Prelude","concat") [Comb FuncCall ("AbstractHaskellPrinter","showPatListElems") [Var 1,Var 2]]],Comb ConsCall ("Prelude",":") [Lit (Charc  '"'),Comb ConsCall ("Prelude","[]") []]]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("AbstractHaskellPrinter","isClosedPatternList") [Var 2]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '['),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","concat") [Comb FuncCall ("List","intersperse") [Comb ConsCall ("Prelude",":") [Lit (Charc  ','),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("AbstractHaskellPrinter","showPatListElems") [Var 1,Var 2]]],Comb ConsCall ("Prelude",":") [Lit (Charc  ']'),Comb ConsCall ("Prelude","[]") []]]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("AbstractHaskellPrinter","isAsPattern") [Var 2]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("AbstractHaskellPrinter","showAsPatternList") [Var 1,Var 2]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","concat") [Comb FuncCall ("List","intersperse") [Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("AbstractHaskellPrinter","showPatListElems") [Var 1,Var 2]]],Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude","[]") []]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])])),Func ("AbstractHaskellPrinter","showPatListElems") 2 Private (FuncType (TCons ("AbstractHaskellPrinter","Options") []) (FuncType (TCons ("AbstractHaskell","Pattern") []) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("AbstractHaskell","PComb") [3,4]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Case  Flex (Var 6) [Branch (Pattern ("Prelude",":") [7,8]) (Case  Flex (Var 7) [Branch (LPattern (Charc  ':')) (Case  Flex (Var 8) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 4) [Branch (Pattern ("Prelude",":") [9,10]) (Case  Flex (Var 10) [Branch (Pattern ("Prelude",":") [11,12]) (Case  Flex (Var 12) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude",":") [Comb FuncCall ("AbstractHaskellPrinter","showPattern") [Var 1,Var 9],Comb FuncCall ("AbstractHaskellPrinter","showPatListElems") [Var 1,Var 11]])])])])]),Branch (LPattern (Charc  '[')) (Case  Flex (Var 8) [Branch (Pattern ("Prelude",":") [13,14]) (Case  Flex (Var 13) [Branch (LPattern (Charc  ']')) (Case  Flex (Var 14) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 4) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") [])])])])])])])]),Branch (Pattern ("AbstractHaskell","PVar") [15]) (Comb ConsCall ("Prelude",":") [Comb FuncCall ("AbstractHaskellPrinter","showPattern") [Var 1,Comb ConsCall ("AbstractHaskell","PVar") [Var 15]],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("AbstractHaskell","PAs") [16,17]) (Comb ConsCall ("Prelude",":") [Comb FuncCall ("AbstractHaskellPrinter","showPattern") [Var 1,Comb ConsCall ("AbstractHaskell","PAs") [Var 16,Var 17]],Comb ConsCall ("Prelude","[]") []])])),Func ("AbstractHaskellPrinter","showAsPatternList") 2 Private (FuncType (TCons ("AbstractHaskellPrinter","Options") []) (FuncType (TCons ("AbstractHaskell","Pattern") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("AbstractHaskell","PAs") [3,4]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Comb FuncCall ("Prelude","++") [Var 6,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '@'),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractHaskellPrinter","intercalate") [Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("AbstractHaskellPrinter","showPatListElems") [Var 1,Var 4]],Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude","[]") []]]]]])])])),Func ("AbstractHaskellPrinter","showBranchExpr") 2 Private (FuncType (TCons ("AbstractHaskellPrinter","Options") []) (FuncType (TCons ("AbstractHaskell","BranchExpr") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("AbstractHaskell","Branch") [3,4]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractHaskellPrinter","showPattern") [Var 1,Var 3],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  '>'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("AbstractHaskellPrinter","showExprOpt") [Var 1,Var 4]]])])),Func ("AbstractHaskellPrinter","showLiteral") 1 Public (FuncType (TCons ("AbstractHaskell","Literal") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("AbstractHaskell","Intc") [2]) (Comb FuncCall ("AbstractHaskellPrinter","showInt") [Var 2]),Branch (Pattern ("AbstractHaskell","Floatc") [3]) (Comb FuncCall ("AbstractHaskellPrinter","showFloat") [Var 3]),Branch (Pattern ("AbstractHaskell","Charc") [4]) (Comb FuncCall ("Prelude","show") [Var 4])])),Func ("AbstractHaskellPrinter","showInt") 1 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Rigid (Comb FuncCall ("Prelude",">=") [Var 1,Lit (Intc  0)]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","show") [Var 1]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb FuncCall ("Prelude","show") [Comb FuncCall ("Prelude","negate") [Var 1]]])])),Func ("AbstractHaskellPrinter","showFloat") 1 Public (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Rigid (Comb FuncCall ("Prelude",">=") [Var 1,Lit (Floatc  0.0)]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","show") [Var 1]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb FuncCall ("Prelude","show") [Comb FuncCall ("Prelude","negateFloat") [Var 1]]])])),Func ("AbstractHaskellPrinter","showCharc") 1 Private (FuncType (TCons ("AbstractHaskell","Literal") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("AbstractHaskell","Charc") [2]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 2,Lit (Charc  '\010')]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  '\\'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude","[]") []]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 2,Lit (Charc  '\013')]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  '\\'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude","[]") []]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 2,Lit (Charc  '\009')]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  '\\'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude","[]") []]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 2,Lit (Charc  '\\')]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  '\\'),Comb ConsCall ("Prelude",":") [Lit (Charc  '\\'),Comb ConsCall ("Prelude","[]") []]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 2,Lit (Charc  '"')]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  '\\'),Comb ConsCall ("Prelude",":") [Lit (Charc  '"'),Comb ConsCall ("Prelude","[]") []]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 2,Lit (Charc  '\'')]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  '\\'),Comb ConsCall ("Prelude",":") [Lit (Charc  '\''),Comb ConsCall ("Prelude","[]") []]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])])])])])])),Func ("AbstractHaskellPrinter","showBlock") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Comb FuncCall ("AbstractHaskellPrinter","combineMap") [Comb (FuncPartCall 1) ("Prelude","id") [],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]],Comb FuncCall ("Prelude","filter") [Comb (FuncPartCall 1) ("Prelude","/=") [Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","lines") [Var 1]]],Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude","[]") []]])),Func ("AbstractHaskellPrinter","showTypeCons") 3 Private (FuncType (TCons ("AbstractHaskellPrinter","Options") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("AbstractHaskell","TypeExpr") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1,2,3] (Case  Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("AbstractHaskellPrinter","showSymbol") [Var 1,Var 2]),Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [6,7]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 6,Comb FuncCall ("Names","prelude") []]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("AbstractHaskellPrinter","showPreludeTypeCons") [Var 1,Var 7,Comb ConsCall ("Prelude",":") [Var 4,Var 5]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractHaskellPrinter","showSymbol") [Var 1,Var 2],Comb FuncCall ("AbstractHaskellPrinter","prefixMap") [Comb (FuncPartCall 1) ("AbstractHaskellPrinter","showTypeExpr") [Var 1,Comb ConsCall ("Prelude","True") []],Comb ConsCall ("Prelude",":") [Var 4,Var 5],Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])])),Func ("AbstractHaskellPrinter","showPreludeTypeCons") 3 Private (FuncType (TCons ("AbstractHaskellPrinter","Options") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("AbstractHaskell","TypeExpr") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1,2,3] (Case  Rigid (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","==") [Var 2,Comb ConsCall ("Prelude",":") [Lit (Charc  '['),Comb ConsCall ("Prelude",":") [Lit (Charc  ']'),Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("Prelude","==") [Comb FuncCall ("Prelude","head") [Var 3],Comb ConsCall ("AbstractHaskell","TCons") [Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Names","prelude") [],Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude","[]") []]]]]],Comb ConsCall ("Prelude","[]") []]]]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  'S'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude","[]") []]]]]]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 2,Comb ConsCall ("Prelude",":") [Lit (Charc  '['),Comb ConsCall ("Prelude",":") [Lit (Charc  ']'),Comb ConsCall ("Prelude","[]") []]]]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '['),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractHaskellPrinter","showTypeExpr") [Var 1,Comb ConsCall ("Prelude","False") [],Comb FuncCall ("Prelude","head") [Var 3]],Comb ConsCall ("Prelude",":") [Lit (Charc  ']'),Comb ConsCall ("Prelude","[]") []]]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("AbstractHaskellPrinter","isTuple") [Var 2]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractHaskellPrinter","combineMap") [Comb (FuncPartCall 1) ("AbstractHaskellPrinter","showTypeExpr") [Var 1,Comb ConsCall ("Prelude","False") []],Var 3,Comb ConsCall ("Prelude",":") [Lit (Charc  ','),Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude","[]") []]]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","++") [Var 2,Comb FuncCall ("AbstractHaskellPrinter","prefixMap") [Comb (FuncPartCall 1) ("AbstractHaskellPrinter","showTypeExpr") [Var 1,Comb ConsCall ("Prelude","True") []],Var 3,Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])])),Func ("AbstractHaskellPrinter","showApplication") 2 Private (FuncType (TCons ("AbstractHaskellPrinter","Options") []) (FuncType (TCons ("AbstractHaskell","Expr") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1,2] (Case  Rigid (Comb FuncCall ("AbstractHaskellPrinter","applicationHead") [Var 2]) [Branch (Pattern ("AbstractHaskell","Symbol") [3]) (Comb FuncCall ("AbstractHaskellPrinter","showSymbolApplication") [Var 1,Var 3,Var 2]),Branch (Pattern ("AbstractHaskell","Var") [4]) (Comb FuncCall ("AbstractHaskellPrinter","showSimpleApplication") [Var 1,Var 2]),Branch (Pattern ("AbstractHaskell","Lit") [5]) (Comb FuncCall ("AbstractHaskellPrinter","showSimpleApplication") [Var 1,Var 2]),Branch (Pattern ("AbstractHaskell","Apply") [6,7]) (Comb FuncCall ("AbstractHaskellPrinter","showSimpleApplication") [Var 1,Var 2]),Branch (Pattern ("AbstractHaskell","Lambda") [8,9]) (Comb FuncCall ("AbstractHaskellPrinter","showSimpleApplication") [Var 1,Var 2]),Branch (Pattern ("AbstractHaskell","Let") [10,11]) (Comb FuncCall ("AbstractHaskellPrinter","showSimpleApplication") [Var 1,Var 2]),Branch (Pattern ("AbstractHaskell","DoExpr") [12]) (Comb FuncCall ("AbstractHaskellPrinter","showSimpleApplication") [Var 1,Var 2]),Branch (Pattern ("AbstractHaskell","ListComp") [13,14]) (Comb FuncCall ("AbstractHaskellPrinter","showSimpleApplication") [Var 1,Var 2]),Branch (Pattern ("AbstractHaskell","Case") [15,16]) (Comb FuncCall ("AbstractHaskellPrinter","showSimpleApplication") [Var 1,Var 2]),Branch (Pattern ("AbstractHaskell","Typed") [17,18]) (Comb FuncCall ("AbstractHaskellPrinter","showSimpleApplication") [Var 1,Var 2])])),Func ("AbstractHaskellPrinter","applicationHead") 1 Private (FuncType (TCons ("AbstractHaskell","Expr") []) (TCons ("AbstractHaskell","Expr") [])) (Rule [1] (Case  Rigid (Var 1) [Branch (Pattern ("AbstractHaskell","Apply") [2,3]) (Comb FuncCall ("AbstractHaskellPrinter","applicationHead") [Var 2]),Branch (Pattern ("AbstractHaskell","Var") [4]) (Var 1),Branch (Pattern ("AbstractHaskell","Lit") [5]) (Var 1),Branch (Pattern ("AbstractHaskell","Symbol") [6]) (Var 1),Branch (Pattern ("AbstractHaskell","Lambda") [7,8]) (Var 1),Branch (Pattern ("AbstractHaskell","Let") [9,10]) (Var 1),Branch (Pattern ("AbstractHaskell","DoExpr") [11]) (Var 1),Branch (Pattern ("AbstractHaskell","ListComp") [12,13]) (Var 1),Branch (Pattern ("AbstractHaskell","Case") [14,15]) (Var 1),Branch (Pattern ("AbstractHaskell","Typed") [16,17]) (Var 1)])),Func ("AbstractHaskellPrinter","showSymbolApplication") 3 Private (FuncType (TCons ("AbstractHaskellPrinter","Options") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("AbstractHaskell","Expr") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1,2,3] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Case  Rigid (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","==") [Var 4,Comb FuncCall ("Names","prelude") []],Comb FuncCall ("Prelude","==") [Var 5,Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude","[]") []]]]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("AbstractHaskellPrinter","showListApplication") [Var 1,Var 3]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("AbstractHaskellPrinter","isInfixOpName") [],Var 5]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("AbstractHaskellPrinter","showInfixApplication") [Var 1,Comb ConsCall ("Prelude","(,)") [Var 4,Var 5],Var 3]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","==") [Var 4,Comb FuncCall ("Names","prelude") []],Comb FuncCall ("Prelude","==") [Var 5,Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("AbstractHaskellPrinter","showITEApplication") [Var 1,Var 3]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("AbstractHaskellPrinter","isTuple") [Var 5]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("AbstractHaskellPrinter","showTupleApplication") [Var 1,Var 3]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("AbstractHaskellPrinter","showSimpleApplication") [Var 1,Var 3]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])])])])),Func ("AbstractHaskellPrinter","showListApplication") 2 Private (FuncType (TCons ("AbstractHaskellPrinter","Options") []) (FuncType (TCons ("AbstractHaskell","Expr") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1,2] (Case  Rigid (Comb FuncCall ("AbstractHaskellPrinter","isStringList") [Var 2]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '"'),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractHaskellPrinter","showCharListApplication") [Var 1,Var 2],Comb ConsCall ("Prelude",":") [Lit (Charc  '"'),Comb ConsCall ("Prelude","[]") []]]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("AbstractHaskellPrinter","isClosedList") [Var 2]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '['),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractHaskellPrinter","showConsListApplication") [Var 1,Var 2],Comb ConsCall ("Prelude",":") [Lit (Charc  ']'),Comb ConsCall ("Prelude","[]") []]]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractHaskellPrinter","showSimpleListApplication") [Var 1,Var 2],Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude","[]") []]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])),Func ("AbstractHaskellPrinter","showCharListApplication") 2 Private (FuncType (TCons ("AbstractHaskellPrinter","Options") []) (FuncType (TCons ("AbstractHaskell","Expr") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("AbstractHaskell","Apply") [3,4]) (Case  Flex (Var 3) [Branch (Pattern ("AbstractHaskell","Apply") [5,6]) (Case  Flex (Var 6) [Branch (Pattern ("AbstractHaskell","Lit") [7]) (Case  Rigid (Var 4) [Branch (Pattern ("AbstractHaskell","Symbol") [8]) (Comb FuncCall ("AbstractHaskellPrinter","showCharc") [Var 7]),Branch (Pattern ("AbstractHaskell","Var") [9]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractHaskellPrinter","showCharc") [Var 7],Comb FuncCall ("AbstractHaskellPrinter","showCharListApplication") [Var 1,Var 4]]),Branch (Pattern ("AbstractHaskell","Lit") [10]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractHaskellPrinter","showCharc") [Var 7],Comb FuncCall ("AbstractHaskellPrinter","showCharListApplication") [Var 1,Var 4]]),Branch (Pattern ("AbstractHaskell","Apply") [11,12]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractHaskellPrinter","showCharc") [Var 7],Comb FuncCall ("AbstractHaskellPrinter","showCharListApplication") [Var 1,Var 4]]),Branch (Pattern ("AbstractHaskell","Lambda") [13,14]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractHaskellPrinter","showCharc") [Var 7],Comb FuncCall ("AbstractHaskellPrinter","showCharListApplication") [Var 1,Var 4]]),Branch (Pattern ("AbstractHaskell","Let") [15,16]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractHaskellPrinter","showCharc") [Var 7],Comb FuncCall ("AbstractHaskellPrinter","showCharListApplication") [Var 1,Var 4]]),Branch (Pattern ("AbstractHaskell","DoExpr") [17]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractHaskellPrinter","showCharc") [Var 7],Comb FuncCall ("AbstractHaskellPrinter","showCharListApplication") [Var 1,Var 4]]),Branch (Pattern ("AbstractHaskell","ListComp") [18,19]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractHaskellPrinter","showCharc") [Var 7],Comb FuncCall ("AbstractHaskellPrinter","showCharListApplication") [Var 1,Var 4]]),Branch (Pattern ("AbstractHaskell","Case") [20,21]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractHaskellPrinter","showCharc") [Var 7],Comb FuncCall ("AbstractHaskellPrinter","showCharListApplication") [Var 1,Var 4]]),Branch (Pattern ("AbstractHaskell","Typed") [22,23]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractHaskellPrinter","showCharc") [Var 7],Comb FuncCall ("AbstractHaskellPrinter","showCharListApplication") [Var 1,Var 4]])])])])])),Func ("AbstractHaskellPrinter","showConsListApplication") 2 Private (FuncType (TCons ("AbstractHaskellPrinter","Options") []) (FuncType (TCons ("AbstractHaskell","Expr") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("AbstractHaskell","Apply") [3,4]) (Case  Flex (Var 3) [Branch (Pattern ("AbstractHaskell","Apply") [5,6]) (Case  Rigid (Var 4) [Branch (Pattern ("AbstractHaskell","Symbol") [7]) (Comb FuncCall ("AbstractHaskellPrinter","showBoxedExpr") [Var 1,Var 6]),Branch (Pattern ("AbstractHaskell","Var") [8]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractHaskellPrinter","showBoxedExpr") [Var 1,Var 6],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ','),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("AbstractHaskellPrinter","showConsListApplication") [Var 1,Var 4]]]),Branch (Pattern ("AbstractHaskell","Lit") [9]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractHaskellPrinter","showBoxedExpr") [Var 1,Var 6],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ','),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("AbstractHaskellPrinter","showConsListApplication") [Var 1,Var 4]]]),Branch (Pattern ("AbstractHaskell","Apply") [10,11]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractHaskellPrinter","showBoxedExpr") [Var 1,Var 6],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ','),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("AbstractHaskellPrinter","showConsListApplication") [Var 1,Var 4]]]),Branch (Pattern ("AbstractHaskell","Lambda") [12,13]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractHaskellPrinter","showBoxedExpr") [Var 1,Var 6],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ','),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("AbstractHaskellPrinter","showConsListApplication") [Var 1,Var 4]]]),Branch (Pattern ("AbstractHaskell","Let") [14,15]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractHaskellPrinter","showBoxedExpr") [Var 1,Var 6],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ','),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("AbstractHaskellPrinter","showConsListApplication") [Var 1,Var 4]]]),Branch (Pattern ("AbstractHaskell","DoExpr") [16]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractHaskellPrinter","showBoxedExpr") [Var 1,Var 6],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ','),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("AbstractHaskellPrinter","showConsListApplication") [Var 1,Var 4]]]),Branch (Pattern ("AbstractHaskell","ListComp") [17,18]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractHaskellPrinter","showBoxedExpr") [Var 1,Var 6],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ','),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("AbstractHaskellPrinter","showConsListApplication") [Var 1,Var 4]]]),Branch (Pattern ("AbstractHaskell","Case") [19,20]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractHaskellPrinter","showBoxedExpr") [Var 1,Var 6],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ','),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("AbstractHaskellPrinter","showConsListApplication") [Var 1,Var 4]]]),Branch (Pattern ("AbstractHaskell","Typed") [21,22]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractHaskellPrinter","showBoxedExpr") [Var 1,Var 6],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ','),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("AbstractHaskellPrinter","showConsListApplication") [Var 1,Var 4]]])])])])),Func ("AbstractHaskellPrinter","showSimpleListApplication") 2 Private (FuncType (TCons ("AbstractHaskellPrinter","Options") []) (FuncType (TCons ("AbstractHaskell","Expr") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("AbstractHaskell","Apply") [3,4]) (Case  Flex (Var 3) [Branch (Pattern ("AbstractHaskell","Apply") [5,6]) (Case  Rigid (Var 4) [Branch (Pattern ("AbstractHaskell","Symbol") [7]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractHaskellPrinter","showBoxedExpr") [Var 1,Var 6],Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude",":") [Lit (Charc  '['),Comb ConsCall ("Prelude",":") [Lit (Charc  ']'),Comb ConsCall ("Prelude","[]") []]]]]),Branch (Pattern ("AbstractHaskell","Var") [8]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractHaskellPrinter","showBoxedExpr") [Var 1,Var 6],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("AbstractHaskellPrinter","showBoxedExpr") [Var 1,Var 4]]]),Branch (Pattern ("AbstractHaskell","Lit") [9]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractHaskellPrinter","showBoxedExpr") [Var 1,Var 6],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("AbstractHaskellPrinter","showBoxedExpr") [Var 1,Var 4]]]),Branch (Pattern ("AbstractHaskell","Apply") [10,11]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractHaskellPrinter","showBoxedExpr") [Var 1,Var 6],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("AbstractHaskellPrinter","showBoxedExpr") [Var 1,Var 4]]]),Branch (Pattern ("AbstractHaskell","Lambda") [12,13]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractHaskellPrinter","showBoxedExpr") [Var 1,Var 6],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("AbstractHaskellPrinter","showBoxedExpr") [Var 1,Var 4]]]),Branch (Pattern ("AbstractHaskell","Let") [14,15]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractHaskellPrinter","showBoxedExpr") [Var 1,Var 6],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("AbstractHaskellPrinter","showBoxedExpr") [Var 1,Var 4]]]),Branch (Pattern ("AbstractHaskell","DoExpr") [16]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractHaskellPrinter","showBoxedExpr") [Var 1,Var 6],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("AbstractHaskellPrinter","showBoxedExpr") [Var 1,Var 4]]]),Branch (Pattern ("AbstractHaskell","ListComp") [17,18]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractHaskellPrinter","showBoxedExpr") [Var 1,Var 6],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("AbstractHaskellPrinter","showBoxedExpr") [Var 1,Var 4]]]),Branch (Pattern ("AbstractHaskell","Case") [19,20]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractHaskellPrinter","showBoxedExpr") [Var 1,Var 6],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("AbstractHaskellPrinter","showBoxedExpr") [Var 1,Var 4]]]),Branch (Pattern ("AbstractHaskell","Typed") [21,22]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractHaskellPrinter","showBoxedExpr") [Var 1,Var 6],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("AbstractHaskellPrinter","showBoxedExpr") [Var 1,Var 4]]])]),Branch (Pattern ("AbstractHaskell","Symbol") [23]) (Case  Flex (Var 23) [Branch (Pattern ("Prelude","(,)") [24,25]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractHaskellPrinter","showBoxedExpr") [Var 1,Var 4],Var 25])])])])),Func ("AbstractHaskellPrinter","showInfixApplication") 3 Private (FuncType (TCons ("AbstractHaskellPrinter","Options") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("AbstractHaskell","Expr") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1,2,3] (Case  Flex (Var 3) [Branch (Pattern ("AbstractHaskell","Apply") [4,5]) (Case  Rigid (Var 4) [Branch (Pattern ("AbstractHaskell","Apply") [6,7]) (Case  Rigid (Var 6) [Branch (Pattern ("AbstractHaskell","Apply") [8,9]) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractHaskellPrinter","showInfixApplication") [Var 1,Var 2,Var 4],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("AbstractHaskellPrinter","showBoxedExpr") [Var 1,Var 5]]]]),Branch (Pattern ("AbstractHaskell","Var") [10]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractHaskellPrinter","showBoxedExpr") [Var 1,Var 7],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractHaskellPrinter","showSymbol") [Var 1,Var 2],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("AbstractHaskellPrinter","showBoxedExpr") [Var 1,Var 5]]]]]),Branch (Pattern ("AbstractHaskell","Lit") [11]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractHaskellPrinter","showBoxedExpr") [Var 1,Var 7],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractHaskellPrinter","showSymbol") [Var 1,Var 2],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("AbstractHaskellPrinter","showBoxedExpr") [Var 1,Var 5]]]]]),Branch (Pattern ("AbstractHaskell","Symbol") [12]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractHaskellPrinter","showBoxedExpr") [Var 1,Var 7],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractHaskellPrinter","showSymbol") [Var 1,Var 2],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("AbstractHaskellPrinter","showBoxedExpr") [Var 1,Var 5]]]]]),Branch (Pattern ("AbstractHaskell","Lambda") [13,14]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractHaskellPrinter","showBoxedExpr") [Var 1,Var 7],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractHaskellPrinter","showSymbol") [Var 1,Var 2],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("AbstractHaskellPrinter","showBoxedExpr") [Var 1,Var 5]]]]]),Branch (Pattern ("AbstractHaskell","Let") [15,16]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractHaskellPrinter","showBoxedExpr") [Var 1,Var 7],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractHaskellPrinter","showSymbol") [Var 1,Var 2],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("AbstractHaskellPrinter","showBoxedExpr") [Var 1,Var 5]]]]]),Branch (Pattern ("AbstractHaskell","DoExpr") [17]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractHaskellPrinter","showBoxedExpr") [Var 1,Var 7],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractHaskellPrinter","showSymbol") [Var 1,Var 2],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("AbstractHaskellPrinter","showBoxedExpr") [Var 1,Var 5]]]]]),Branch (Pattern ("AbstractHaskell","ListComp") [18,19]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractHaskellPrinter","showBoxedExpr") [Var 1,Var 7],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractHaskellPrinter","showSymbol") [Var 1,Var 2],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("AbstractHaskellPrinter","showBoxedExpr") [Var 1,Var 5]]]]]),Branch (Pattern ("AbstractHaskell","Case") [20,21]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractHaskellPrinter","showBoxedExpr") [Var 1,Var 7],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractHaskellPrinter","showSymbol") [Var 1,Var 2],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("AbstractHaskellPrinter","showBoxedExpr") [Var 1,Var 5]]]]]),Branch (Pattern ("AbstractHaskell","Typed") [22,23]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractHaskellPrinter","showBoxedExpr") [Var 1,Var 7],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractHaskellPrinter","showSymbol") [Var 1,Var 2],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("AbstractHaskellPrinter","showBoxedExpr") [Var 1,Var 5]]]]])]),Branch (Pattern ("AbstractHaskell","Var") [24]) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractHaskellPrinter","showSymbol") [Var 1,Var 2],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("AbstractHaskellPrinter","showBoxedExpr") [Var 1,Var 5]]]]),Branch (Pattern ("AbstractHaskell","Lit") [25]) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractHaskellPrinter","showSymbol") [Var 1,Var 2],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("AbstractHaskellPrinter","showBoxedExpr") [Var 1,Var 5]]]]),Branch (Pattern ("AbstractHaskell","Symbol") [26]) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractHaskellPrinter","showSymbol") [Var 1,Var 2],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("AbstractHaskellPrinter","showBoxedExpr") [Var 1,Var 5]]]]),Branch (Pattern ("AbstractHaskell","Lambda") [27,28]) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractHaskellPrinter","showSymbol") [Var 1,Var 2],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("AbstractHaskellPrinter","showBoxedExpr") [Var 1,Var 5]]]]),Branch (Pattern ("AbstractHaskell","Let") [29,30]) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractHaskellPrinter","showSymbol") [Var 1,Var 2],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("AbstractHaskellPrinter","showBoxedExpr") [Var 1,Var 5]]]]),Branch (Pattern ("AbstractHaskell","DoExpr") [31]) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractHaskellPrinter","showSymbol") [Var 1,Var 2],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("AbstractHaskellPrinter","showBoxedExpr") [Var 1,Var 5]]]]),Branch (Pattern ("AbstractHaskell","ListComp") [32,33]) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractHaskellPrinter","showSymbol") [Var 1,Var 2],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("AbstractHaskellPrinter","showBoxedExpr") [Var 1,Var 5]]]]),Branch (Pattern ("AbstractHaskell","Case") [34,35]) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractHaskellPrinter","showSymbol") [Var 1,Var 2],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("AbstractHaskellPrinter","showBoxedExpr") [Var 1,Var 5]]]]),Branch (Pattern ("AbstractHaskell","Typed") [36,37]) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractHaskellPrinter","showSymbol") [Var 1,Var 2],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("AbstractHaskellPrinter","showBoxedExpr") [Var 1,Var 5]]]])])])),Func ("AbstractHaskellPrinter","showITEApplication") 2 Private (FuncType (TCons ("AbstractHaskellPrinter","Options") []) (FuncType (TCons ("AbstractHaskell","Expr") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("AbstractHaskell","Apply") [3,4]) (Case  Flex (Var 3) [Branch (Pattern ("AbstractHaskell","Apply") [5,6]) (Case  Flex (Var 5) [Branch (Pattern ("AbstractHaskell","Apply") [7,8]) (Case  Flex (Var 7) [Branch (Pattern ("AbstractHaskell","Symbol") [9]) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractHaskellPrinter","showExprOpt") [Var 1,Var 8],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]],Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractHaskellPrinter","showExprOpt") [Var 1,Var 6],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]],Comb FuncCall ("AbstractHaskellPrinter","showExprOpt") [Var 1,Var 4]]]]]]),Branch (Pattern ("AbstractHaskell","Apply") [10,11]) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractHaskellPrinter","showITEApplication") [Var 1,Var 3],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("AbstractHaskellPrinter","showBoxedExpr") [Var 1,Var 4]]]])])])])])),Func ("AbstractHaskellPrinter","showTupleApplication") 2 Private (FuncType (TCons ("AbstractHaskellPrinter","Options") []) (FuncType (TCons ("AbstractHaskell","Expr") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1,2] (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractHaskellPrinter","showTupleApplication.p_showTuple.390") [Var 1,Var 2],Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude","[]") []]]])),Func ("AbstractHaskellPrinter","showTupleApplication.p_showTuple.390") 2 Private (FuncType (TCons ("AbstractHaskellPrinter","Options") []) (FuncType (TCons ("AbstractHaskell","Expr") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("AbstractHaskell","Apply") [3,4]) (Case  Flex (Var 3) [Branch (Pattern ("AbstractHaskell","Symbol") [5]) (Comb FuncCall ("AbstractHaskellPrinter","showExprOpt") [Var 1,Var 4]),Branch (Pattern ("AbstractHaskell","Apply") [6,7]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractHaskellPrinter","showTupleApplication.p_showTuple.390") [Var 1,Comb ConsCall ("AbstractHaskell","Apply") [Var 6,Var 7]],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ','),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("AbstractHaskellPrinter","showExprOpt") [Var 1,Var 4]]])])])),Func ("AbstractHaskellPrinter","showSimpleApplication") 2 Private (FuncType (TCons ("AbstractHaskellPrinter","Options") []) (FuncType (TCons ("AbstractHaskell","Expr") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1,2] (Case  Rigid (Var 2) [Branch (Pattern ("AbstractHaskell","Apply") [3,4]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractHaskellPrinter","showSimpleApplication") [Var 1,Var 3],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("AbstractHaskellPrinter","showBoxedExpr") [Var 1,Var 4]]]),Branch (Pattern ("AbstractHaskell","Var") [5]) (Comb FuncCall ("AbstractHaskellPrinter","showBoxedExpr") [Var 1,Var 2]),Branch (Pattern ("AbstractHaskell","Lit") [6]) (Comb FuncCall ("AbstractHaskellPrinter","showBoxedExpr") [Var 1,Var 2]),Branch (Pattern ("AbstractHaskell","Symbol") [7]) (Comb FuncCall ("AbstractHaskellPrinter","showBoxedExpr") [Var 1,Var 2]),Branch (Pattern ("AbstractHaskell","Lambda") [8,9]) (Comb FuncCall ("AbstractHaskellPrinter","showBoxedExpr") [Var 1,Var 2]),Branch (Pattern ("AbstractHaskell","Let") [10,11]) (Comb FuncCall ("AbstractHaskellPrinter","showBoxedExpr") [Var 1,Var 2]),Branch (Pattern ("AbstractHaskell","DoExpr") [12]) (Comb FuncCall ("AbstractHaskellPrinter","showBoxedExpr") [Var 1,Var 2]),Branch (Pattern ("AbstractHaskell","ListComp") [13,14]) (Comb FuncCall ("AbstractHaskellPrinter","showBoxedExpr") [Var 1,Var 2]),Branch (Pattern ("AbstractHaskell","Case") [15,16]) (Comb FuncCall ("AbstractHaskellPrinter","showBoxedExpr") [Var 1,Var 2]),Branch (Pattern ("AbstractHaskell","Typed") [17,18]) (Comb FuncCall ("AbstractHaskellPrinter","showBoxedExpr") [Var 1,Var 2])])),Func ("AbstractHaskellPrinter","showBoxedExpr") 2 Private (FuncType (TCons ("AbstractHaskellPrinter","Options") []) (FuncType (TCons ("AbstractHaskell","Expr") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1,2] (Case  Rigid (Comb FuncCall ("AbstractHaskellPrinter","isSimpleExpr") [Var 2]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("AbstractHaskellPrinter","showExprOpt") [Var 1,Var 2]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Comb FuncCall ("AbstractHaskellPrinter","showExprOpt") [Var 1,Var 2],Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude","[]") []]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])),Func ("AbstractHaskellPrinter","intercalate") 2 Private (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 0]]) (TCons ("Prelude","[]") [TVar 0]))) (Rule [1,2] (Comb FuncCall ("Prelude","concat") [Comb FuncCall ("List","intersperse") [Var 1,Var 2]])),Func ("AbstractHaskellPrinter","prefixMap") 3 Private (FuncType (FuncType (TVar 0) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1,2,3] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","concatMap") [Comb (FuncPartCall 1) ("Prelude","++") [Var 3]],Comb FuncCall ("Prelude","map") [Var 1,Var 2]])),Func ("AbstractHaskellPrinter","prefixInter") 3 Private (FuncType (FuncType (TVar 0) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1,2,3] (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Prelude","concat") [],Comb FuncCall ("List","intersperse") [Var 3,Comb FuncCall ("Prelude","map") [Var 1,Var 2]]])),Func ("AbstractHaskellPrinter","combineMap") 3 Private (FuncType (FuncType (TVar 0) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1,2,3] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [4,5]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Var 1,Var 4],Comb FuncCall ("AbstractHaskellPrinter","prefixMap") [Var 1,Var 5,Var 3]])])),Func ("AbstractHaskellPrinter","dropTags") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Let [(4,Var 2)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 4,Lit (Charc  '"')]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("AbstractHaskellPrinter","dropTags") [],Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Prelude","tail") [],Comb FuncCall ("Prelude","dropWhile") [Comb (FuncPartCall 1) ("Prelude","flip") [Comb (FuncPartCall 2) ("Prelude","/=") [],Lit (Charc  '"')],Var 3]]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 4,Lit (Charc  '>')]) [Branch (Pattern ("Prelude","True") []) (Var 3),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("AbstractHaskellPrinter","dropTags") [Var 3])])]))])),Func ("AbstractHaskellPrinter","isClosedPatternList") 1 Private (FuncType (TCons ("AbstractHaskell","Pattern") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("AbstractHaskell","PComb") [2,3]) (Case  Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Case  Flex (Var 5) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 6) [Branch (LPattern (Charc  ':')) (Case  Flex (Var 7) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [8,9]) (Case  Flex (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case  Flex (Var 11) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","==") [Var 4,Comb FuncCall ("Names","prelude") []],Comb FuncCall ("AbstractHaskellPrinter","isClosedPatternList") [Var 10]])])])])]),Branch (LPattern (Charc  '[')) (Case  Flex (Var 7) [Branch (Pattern ("Prelude",":") [12,13]) (Case  Flex (Var 12) [Branch (LPattern (Charc  ']')) (Case  Flex (Var 13) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","==") [Var 4,Comb FuncCall ("Names","prelude") []])])])])])])])]),Branch (Pattern ("AbstractHaskell","PVar") [14]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractHaskell","PAs") [15,16]) (Comb FuncCall ("AbstractHaskellPrinter","isClosedPatternList") [Var 16])])),Func ("AbstractHaskellPrinter","isClosedStringPattern") 1 Private (FuncType (TCons ("AbstractHaskell","Pattern") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("AbstractHaskell","PComb") [2,3]) (Case  Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Case  Flex (Var 5) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 6) [Branch (LPattern (Charc  ':')) (Case  Flex (Var 7) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 3) [Branch (Pattern ("Prelude",":") [8,9]) (Case  Flex (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case  Flex (Var 11) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","==") [Var 4,Comb FuncCall ("Names","prelude") []],Comb FuncCall ("Prelude","&&") [Comb FuncCall ("AbstractHaskellPrinter","isCharPattern") [Var 8],Comb FuncCall ("AbstractHaskellPrinter","isClosedStringPattern") [Var 10]]])])])])]),Branch (LPattern (Charc  '[')) (Case  Flex (Var 7) [Branch (Pattern ("Prelude",":") [12,13]) (Case  Flex (Var 12) [Branch (LPattern (Charc  ']')) (Case  Flex (Var 13) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","==") [Var 4,Comb FuncCall ("Names","prelude") []])])])])])])])]),Branch (Pattern ("AbstractHaskell","PVar") [14]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractHaskell","PAs") [15,16]) (Comb ConsCall ("Prelude","False") [])])),Func ("AbstractHaskellPrinter","isCharPattern") 1 Private (FuncType (TCons ("AbstractHaskell","Pattern") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Case  Rigid (Var 1) [Branch (Pattern ("AbstractHaskell","PLit") [2]) (Case  Rigid (Var 2) [Branch (Pattern ("AbstractHaskell","Charc") [3]) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("AbstractHaskell","Intc") [4]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractHaskell","Floatc") [5]) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("AbstractHaskell","PVar") [6]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractHaskell","PComb") [7,8]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractHaskell","PAs") [9,10]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractHaskell","PFuncComb") [11,12]) (Comb ConsCall ("Prelude","False") [])])),Func ("AbstractHaskellPrinter","isAsPattern") 1 Private (FuncType (TCons ("AbstractHaskell","Pattern") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Case  Rigid (Var 1) [Branch (Pattern ("AbstractHaskell","PAs") [2,3]) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("AbstractHaskell","PVar") [4]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractHaskell","PLit") [5]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractHaskell","PComb") [6,7]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractHaskell","PFuncComb") [8,9]) (Comb ConsCall ("Prelude","False") [])])),Func ("AbstractHaskellPrinter","isInfixOpName") 0 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","Bool") [])) (Rule [] (Comb FuncCall ("Prelude","all") [Comb (FuncPartCall 1) ("Prelude","flip") [Comb (FuncPartCall 1) ("Prelude","elem") [],Comb FuncCall ("AbstractHaskellPrinter","infixIDs") []]])),Func ("AbstractHaskellPrinter","isStringList") 1 Private (FuncType (TCons ("AbstractHaskell","Expr") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("AbstractHaskell","Symbol") [2]) (Case  Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","==") [Var 3,Comb FuncCall ("Names","prelude") []],Comb FuncCall ("Prelude","==") [Var 4,Comb ConsCall ("Prelude",":") [Lit (Charc  '['),Comb ConsCall ("Prelude",":") [Lit (Charc  ']'),Comb ConsCall ("Prelude","[]") []]]]])]),Branch (Pattern ("AbstractHaskell","Var") [5]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractHaskell","Apply") [6,7]) (Case  Rigid (Var 6) [Branch (Pattern ("AbstractHaskell","Apply") [8,9]) (Case  Rigid (Var 9) [Branch (Pattern ("AbstractHaskell","Lit") [10]) (Case  Rigid (Var 10) [Branch (Pattern ("AbstractHaskell","Charc") [11]) (Comb FuncCall ("AbstractHaskellPrinter","isStringList") [Var 7]),Branch (Pattern ("AbstractHaskell","Intc") [12]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractHaskell","Floatc") [13]) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("AbstractHaskell","Var") [14]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractHaskell","Symbol") [15]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractHaskell","Apply") [16,17]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractHaskell","Lambda") [18,19]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractHaskell","Let") [20,21]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractHaskell","DoExpr") [22]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractHaskell","ListComp") [23,24]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractHaskell","Case") [25,26]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractHaskell","Typed") [27,28]) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("AbstractHaskell","Var") [29]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractHaskell","Lit") [30]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractHaskell","Symbol") [31]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractHaskell","Lambda") [32,33]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractHaskell","Let") [34,35]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractHaskell","DoExpr") [36]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractHaskell","ListComp") [37,38]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractHaskell","Case") [39,40]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractHaskell","Typed") [41,42]) (Comb ConsCall ("Prelude","False") [])])])),Func ("AbstractHaskellPrinter","isClosedList") 1 Private (FuncType (TCons ("AbstractHaskell","Expr") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Case  Rigid (Var 1) [Branch (Pattern ("AbstractHaskell","Apply") [2,3]) (Case  Rigid (Var 2) [Branch (Pattern ("AbstractHaskell","Apply") [4,5]) (Case  Rigid (Var 4) [Branch (Pattern ("AbstractHaskell","Symbol") [6]) (Case  Rigid (Var 6) [Branch (Pattern ("Prelude","(,)") [7,8]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","==") [Var 7,Comb FuncCall ("Names","prelude") []],Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","==") [Var 8,Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("AbstractHaskellPrinter","isClosedList") [Var 3]]])]),Branch (Pattern ("AbstractHaskell","Var") [9]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractHaskell","Lit") [10]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractHaskell","Apply") [11,12]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractHaskell","Lambda") [13,14]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractHaskell","Let") [15,16]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractHaskell","DoExpr") [17]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractHaskell","ListComp") [18,19]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractHaskell","Case") [20,21]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractHaskell","Typed") [22,23]) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("AbstractHaskell","Var") [24]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractHaskell","Lit") [25]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractHaskell","Symbol") [26]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractHaskell","Lambda") [27,28]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractHaskell","Let") [29,30]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractHaskell","DoExpr") [31]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractHaskell","ListComp") [32,33]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractHaskell","Case") [34,35]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractHaskell","Typed") [36,37]) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("AbstractHaskell","Symbol") [38]) (Case  Rigid (Var 38) [Branch (Pattern ("Prelude","(,)") [39,40]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","==") [Var 39,Comb FuncCall ("Names","prelude") []],Comb FuncCall ("Prelude","==") [Var 40,Comb ConsCall ("Prelude",":") [Lit (Charc  '['),Comb ConsCall ("Prelude",":") [Lit (Charc  ']'),Comb ConsCall ("Prelude","[]") []]]]])]),Branch (Pattern ("AbstractHaskell","Var") [41]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractHaskell","Lit") [42]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractHaskell","Lambda") [43,44]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractHaskell","Let") [45,46]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractHaskell","DoExpr") [47]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractHaskell","ListComp") [48,49]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractHaskell","Case") [50,51]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractHaskell","Typed") [52,53]) (Comb ConsCall ("Prelude","False") [])])),Func ("AbstractHaskellPrinter","isSimpleExpr") 1 Private (FuncType (TCons ("AbstractHaskell","Expr") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Case  Rigid (Var 1) [Branch (Pattern ("AbstractHaskell","Var") [2]) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("AbstractHaskell","Lit") [3]) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("AbstractHaskell","Symbol") [4]) (Case  Rigid (Var 4) [Branch (Pattern ("Prelude","(,)") [5,6]) (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Prelude","not") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("AbstractHaskellPrinter","isInfixOpName") [],Var 6]])]),Branch (Pattern ("AbstractHaskell","Apply") [7,8]) (Case  Rigid (Comb FuncCall ("AbstractHaskellPrinter","applicationHead") [Var 7]) [Branch (Pattern ("AbstractHaskell","Symbol") [9]) (Case  Rigid (Var 9) [Branch (Pattern ("Prelude","(,)") [10,11]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","==") [Var 10,Comb FuncCall ("Names","prelude") []],Comb FuncCall ("Prelude","||") [Comb FuncCall ("Prelude","==") [Var 11,Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude","||") [Comb FuncCall ("Prelude","==") [Var 11,Comb ConsCall ("Prelude",":") [Lit (Charc  '['),Comb ConsCall ("Prelude",":") [Lit (Charc  ']'),Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("Prelude","||") [Comb FuncCall ("Prelude","==") [Var 11,Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("AbstractHaskellPrinter","isTuple") [Var 11]]]]])]),Branch (Pattern ("AbstractHaskell","Var") [12]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractHaskell","Lit") [13]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractHaskell","Apply") [14,15]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractHaskell","Lambda") [16,17]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractHaskell","Let") [18,19]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractHaskell","DoExpr") [20]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractHaskell","ListComp") [21,22]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractHaskell","Case") [23,24]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractHaskell","Typed") [25,26]) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("AbstractHaskell","Lambda") [27,28]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractHaskell","Let") [29,30]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractHaskell","DoExpr") [31]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractHaskell","ListComp") [32,33]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractHaskell","Case") [34,35]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractHaskell","Typed") [36,37]) (Comb ConsCall ("Prelude","False") [])])),Func ("AbstractHaskellPrinter","isFuncType") 1 Private (FuncType (TCons ("AbstractHaskell","TypeExpr") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Case  Rigid (Var 1) [Branch (Pattern ("AbstractHaskell","FuncType") [2,3]) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("AbstractHaskell","TVar") [4]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractHaskell","TCons") [5,6]) (Comb ConsCall ("Prelude","False") [])])),Func ("AbstractHaskellPrinter","isAtom") 1 Private (FuncType (TCons ("AbstractHaskell","Expr") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Case  Rigid (Var 1) [Branch (Pattern ("AbstractHaskell","Var") [2]) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("AbstractHaskell","Lit") [3]) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("AbstractHaskell","Symbol") [4]) (Case  Rigid (Var 4) [Branch (Pattern ("Prelude","(,)") [5,6]) (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Prelude","not") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("AbstractHaskellPrinter","isInfixOpName") [],Var 6]])]),Branch (Pattern ("AbstractHaskell","Apply") [7,8]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractHaskell","Lambda") [9,10]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractHaskell","Let") [11,12]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractHaskell","DoExpr") [13]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractHaskell","ListComp") [14,15]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractHaskell","Case") [16,17]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("AbstractHaskell","Typed") [18,19]) (Comb ConsCall ("Prelude","False") [])])),Func ("AbstractHaskellPrinter","isTuple") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","Bool") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude",":") [2,3]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","==") [Var 2,Lit (Charc  '(')],Comb FuncCall ("AbstractHaskellPrinter","isTuple.p1_isTuple.539") [Var 3]])])),Func ("AbstractHaskellPrinter","isTuple.p1_isTuple.539") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","Bool") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","==") [Var 2,Lit (Charc  ')')]),Branch (Pattern ("Prelude",":") [4,5]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","==") [Var 2,Lit (Charc  ',')],Comb FuncCall ("AbstractHaskellPrinter","isTuple.p1_isTuple.539") [Comb ConsCall ("Prelude",":") [Var 4,Var 5]]])])])),Func ("AbstractHaskellPrinter","infixIDs") 0 Private (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (Rule [] (Comb ConsCall ("Prelude",":") [Lit (Charc  '~'),Comb ConsCall ("Prelude",":") [Lit (Charc  '!'),Comb ConsCall ("Prelude",":") [Lit (Charc  '@'),Comb ConsCall ("Prelude",":") [Lit (Charc  '#'),Comb ConsCall ("Prelude",":") [Lit (Charc  '$'),Comb ConsCall ("Prelude",":") [Lit (Charc  '%'),Comb ConsCall ("Prelude",":") [Lit (Charc  '^'),Comb ConsCall ("Prelude",":") [Lit (Charc  '&'),Comb ConsCall ("Prelude",":") [Lit (Charc  '*'),Comb ConsCall ("Prelude",":") [Lit (Charc  '+'),Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  '='),Comb ConsCall ("Prelude",":") [Lit (Charc  '<'),Comb ConsCall ("Prelude",":") [Lit (Charc  '>'),Comb ConsCall ("Prelude",":") [Lit (Charc  '?'),Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude",":") [Lit (Charc  '/'),Comb ConsCall ("Prelude",":") [Lit (Charc  '|'),Comb ConsCall ("Prelude",":") [Lit (Charc  '\\'),Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]])),Func ("AbstractHaskellPrinter","maybeShowBrackets") 2 Private (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1,2] (Case  Rigid (Var 1) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Var 2,Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude","[]") []]]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Var 2),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])]))] []