Prog "EliminateCond" ["AnnotatedFlatCurry","AnnotatedFlatCurryGoodies","FlatCurry","List","Prelude","State"] [] [Func ("EliminateCond","eliminateCond") 1 Public (FuncType (TCons ("AnnotatedFlatCurry","AProg") [TCons ("FlatCurry","TypeExpr") []]) (TCons ("AnnotatedFlatCurry","AProg") [TCons ("FlatCurry","TypeExpr") []])) (Rule [1] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("AnnotatedFlatCurryGoodies","updProgFuncs") [Comb FuncCall ("Prelude","concatMap") [Comb (FuncPartCall 1) ("EliminateCond","transFunc") []]],Var 1])),Func ("EliminateCond","transFunc") 1 Private (FuncType (TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]) (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("AnnotatedFlatCurry","AFunc") [2,3,4,5,6]) (Case  Flex (Var 6) [Branch (Pattern ("AnnotatedFlatCurry","AExternal") [7,8]) (Comb ConsCall ("Prelude",":") [Var 1,Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("AnnotatedFlatCurry","ARule") [9,10,11]) (Let [(12,Comb FuncCall ("State","runState") [Comb FuncCall ("EliminateCond","transExpr") [Var 2,Var 11],Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","[]") [],Lit (Intc  0)]]),(13,Comb FuncCall ("EliminateCond","transFunc._#selFP2#e'") [Var 12]),(14,Comb FuncCall ("EliminateCond","transFunc._#selFP3#newFuns") [Var 12])] (Comb ConsCall ("Prelude",":") [Comb ConsCall ("AnnotatedFlatCurry","AFunc") [Var 2,Var 3,Var 4,Var 5,Comb ConsCall ("AnnotatedFlatCurry","ARule") [Var 9,Var 10,Var 13]],Var 14]))])])),Func ("EliminateCond","transFunc._#selFP2#e'") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("AnnotatedFlatCurry","AExpr") [TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]],TCons ("Prelude","Int") []]]) (TCons ("AnnotatedFlatCurry","AExpr") [TCons ("FlatCurry","TypeExpr") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude","(,)") [4,5]) (Var 2)])])),Func ("EliminateCond","transFunc._#selFP3#newFuns") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("AnnotatedFlatCurry","AExpr") [TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]],TCons ("Prelude","Int") []]]) (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude","(,)") [4,5]) (Var 4)])])),Func ("EliminateCond","transExpr") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("AnnotatedFlatCurry","AExpr") [TCons ("FlatCurry","TypeExpr") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]],TCons ("Prelude","Int") []]) (TCons ("Prelude","(,)") [TCons ("AnnotatedFlatCurry","AExpr") [TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]],TCons ("Prelude","Int") []]])))) (Rule [1,2] (Comb FuncCall ("AnnotatedFlatCurryGoodies","trExpr") [Comb (FuncPartCall 2) ("EliminateCond","transExpr.transVar.18") [],Comb (FuncPartCall 2) ("EliminateCond","transExpr.transLit.18") [],Comb (FuncPartCall 4) ("EliminateCond","transExpr.transComb.18") [Var 1],Comb (FuncPartCall 3) ("EliminateCond","transExpr.transLet.18") [],Comb (FuncPartCall 3) ("EliminateCond","transExpr.transFree.18") [],Comb (FuncPartCall 3) ("EliminateCond","transExpr.transOr.18") [],Comb (FuncPartCall 4) ("EliminateCond","transExpr.transCase.18") [],Comb (FuncPartCall 2) ("EliminateCond","transExpr.transBranch.18") [],Comb (FuncPartCall 3) ("EliminateCond","transExpr.transTyped.18") [],Var 2])),Func ("EliminateCond","transExpr.transVar.18") 2 Private (FuncType (TVar 0) (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 1) (TCons ("Prelude","(,)") [TCons ("AnnotatedFlatCurry","AExpr") [TVar 0],TVar 1])))) (Rule [1,2] (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 2) ("State","returnS") [],Comb ConsCall ("AnnotatedFlatCurry","AVar") [Var 1,Var 2]])),Func ("EliminateCond","transExpr.transLit.18") 2 Private (FuncType (TVar 0) (FuncType (TCons ("FlatCurry","Literal") []) (FuncType (TVar 1) (TCons ("Prelude","(,)") [TCons ("AnnotatedFlatCurry","AExpr") [TVar 0],TVar 1])))) (Rule [1,2] (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 2) ("State","returnS") [],Comb ConsCall ("AnnotatedFlatCurry","ALit") [Var 1,Var 2]])),Func ("EliminateCond","transExpr.transComb.18") 5 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("FlatCurry","TypeExpr") []) (FuncType (TCons ("FlatCurry","CombType") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("FlatCurry","TypeExpr") []]) (FuncType (TCons ("Prelude","[]") [FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]],TCons ("Prelude","Int") []]) (TCons ("Prelude","(,)") [TCons ("AnnotatedFlatCurry","AExpr") [TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]],TCons ("Prelude","Int") []]])]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]],TCons ("Prelude","Int") []]) (TCons ("Prelude","(,)") [TCons ("AnnotatedFlatCurry","AExpr") [TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]],TCons ("Prelude","Int") []]]))))))) (Rule [1,2,3,4,5] (Case  Flex (Var 4) [Branch (Pattern ("Prelude","(,)") [6,7]) (Case  Rigid (Comb ConsCall ("Prelude","(,)") [Var 6,Var 5]) [Branch (Pattern ("Prelude","(,)") [8,9]) (Case  Rigid (Var 8) [Branch (Pattern ("Prelude","(,)") [10,11]) (Case  Rigid (Var 10) [Branch (Pattern ("Prelude",":") [12,13]) (Let [(14,Var 12)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 14,Lit (Charc  'P')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 13) [Branch (Pattern ("Prelude",":") [15,16]) (Let [(17,Var 15)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 17,Lit (Charc  'r')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 16) [Branch (Pattern ("Prelude",":") [18,19]) (Let [(20,Var 18)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 20,Lit (Charc  'e')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 19) [Branch (Pattern ("Prelude",":") [21,22]) (Let [(23,Var 21)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 23,Lit (Charc  'l')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 22) [Branch (Pattern ("Prelude",":") [24,25]) (Let [(26,Var 24)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 26,Lit (Charc  'u')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 25) [Branch (Pattern ("Prelude",":") [27,28]) (Let [(29,Var 27)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 29,Lit (Charc  'd')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 28) [Branch (Pattern ("Prelude",":") [30,31]) (Let [(32,Var 30)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 32,Lit (Charc  'e')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 31) [Branch (Pattern ("Prelude","[]") []) (Case  Rigid (Var 11) [Branch (Pattern ("Prelude",":") [33,34]) (Let [(35,Var 33)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 35,Lit (Charc  'c')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 34) [Branch (Pattern ("Prelude",":") [36,37]) (Let [(38,Var 36)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 38,Lit (Charc  'o')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 37) [Branch (Pattern ("Prelude",":") [39,40]) (Let [(41,Var 39)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 41,Lit (Charc  'n')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 40) [Branch (Pattern ("Prelude",":") [42,43]) (Let [(44,Var 42)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 44,Lit (Charc  'd')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 43) [Branch (Pattern ("Prelude","[]") []) (Case  Rigid (Var 9) [Branch (Pattern ("Prelude",":") [45,46]) (Case  Rigid (Var 46) [Branch (Pattern ("Prelude",":") [47,48]) (Case  Rigid (Var 48) [Branch (Pattern ("Prelude","[]") []) (Comb (FuncPartCall 1) ("State","bindS") [Var 45,Comb (FuncPartCall 1) ("EliminateCond","transExpr.transComb.18._#lambda2") [Var 47,Var 1,Var 2]]),Branch (Pattern ("Prelude",":") [49,50]) (Comb (FuncPartCall 1) ("State","bindS") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("State","sequenceS") [],Var 5],Comb (FuncPartCall 1) ("EliminateCond","transExpr.transComb.18._#lambda4") [Var 6,Var 7,Var 3,Var 2]])]),Branch (Pattern ("Prelude","[]") []) (Comb (FuncPartCall 1) ("State","bindS") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("State","sequenceS") [],Var 5],Comb (FuncPartCall 1) ("EliminateCond","transExpr.transComb.18._#lambda4") [Var 6,Var 7,Var 3,Var 2]])]),Branch (Pattern ("Prelude","[]") []) (Comb (FuncPartCall 1) ("State","bindS") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("State","sequenceS") [],Var 5],Comb (FuncPartCall 1) ("EliminateCond","transExpr.transComb.18._#lambda4") [Var 6,Var 7,Var 3,Var 2]])]),Branch (Pattern ("Prelude",":") [51,52]) (Comb (FuncPartCall 1) ("State","bindS") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("State","sequenceS") [],Var 5],Comb (FuncPartCall 1) ("EliminateCond","transExpr.transComb.18._#lambda4") [Var 6,Var 7,Var 3,Var 2]])]),Branch (Pattern ("Prelude","False") []) (Comb (FuncPartCall 1) ("State","bindS") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("State","sequenceS") [],Var 5],Comb (FuncPartCall 1) ("EliminateCond","transExpr.transComb.18._#lambda4") [Var 6,Var 7,Var 3,Var 2]])])),Branch (Pattern ("Prelude","[]") []) (Comb (FuncPartCall 1) ("State","bindS") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("State","sequenceS") [],Var 5],Comb (FuncPartCall 1) ("EliminateCond","transExpr.transComb.18._#lambda4") [Var 6,Var 7,Var 3,Var 2]])]),Branch (Pattern ("Prelude","False") []) (Comb (FuncPartCall 1) ("State","bindS") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("State","sequenceS") [],Var 5],Comb (FuncPartCall 1) ("EliminateCond","transExpr.transComb.18._#lambda4") [Var 6,Var 7,Var 3,Var 2]])])),Branch (Pattern ("Prelude","[]") []) (Comb (FuncPartCall 1) ("State","bindS") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("State","sequenceS") [],Var 5],Comb (FuncPartCall 1) ("EliminateCond","transExpr.transComb.18._#lambda4") [Var 6,Var 7,Var 3,Var 2]])]),Branch (Pattern ("Prelude","False") []) (Comb (FuncPartCall 1) ("State","bindS") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("State","sequenceS") [],Var 5],Comb (FuncPartCall 1) ("EliminateCond","transExpr.transComb.18._#lambda4") [Var 6,Var 7,Var 3,Var 2]])])),Branch (Pattern ("Prelude","[]") []) (Comb (FuncPartCall 1) ("State","bindS") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("State","sequenceS") [],Var 5],Comb (FuncPartCall 1) ("EliminateCond","transExpr.transComb.18._#lambda4") [Var 6,Var 7,Var 3,Var 2]])]),Branch (Pattern ("Prelude","False") []) (Comb (FuncPartCall 1) ("State","bindS") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("State","sequenceS") [],Var 5],Comb (FuncPartCall 1) ("EliminateCond","transExpr.transComb.18._#lambda4") [Var 6,Var 7,Var 3,Var 2]])])),Branch (Pattern ("Prelude","[]") []) (Comb (FuncPartCall 1) ("State","bindS") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("State","sequenceS") [],Var 5],Comb (FuncPartCall 1) ("EliminateCond","transExpr.transComb.18._#lambda4") [Var 6,Var 7,Var 3,Var 2]])]),Branch (Pattern ("Prelude",":") [53,54]) (Comb (FuncPartCall 1) ("State","bindS") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("State","sequenceS") [],Var 5],Comb (FuncPartCall 1) ("EliminateCond","transExpr.transComb.18._#lambda4") [Var 6,Var 7,Var 3,Var 2]])]),Branch (Pattern ("Prelude","False") []) (Comb (FuncPartCall 1) ("State","bindS") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("State","sequenceS") [],Var 5],Comb (FuncPartCall 1) ("EliminateCond","transExpr.transComb.18._#lambda4") [Var 6,Var 7,Var 3,Var 2]])])),Branch (Pattern ("Prelude","[]") []) (Comb (FuncPartCall 1) ("State","bindS") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("State","sequenceS") [],Var 5],Comb (FuncPartCall 1) ("EliminateCond","transExpr.transComb.18._#lambda4") [Var 6,Var 7,Var 3,Var 2]])]),Branch (Pattern ("Prelude","False") []) (Comb (FuncPartCall 1) ("State","bindS") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("State","sequenceS") [],Var 5],Comb (FuncPartCall 1) ("EliminateCond","transExpr.transComb.18._#lambda4") [Var 6,Var 7,Var 3,Var 2]])])),Branch (Pattern ("Prelude","[]") []) (Comb (FuncPartCall 1) ("State","bindS") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("State","sequenceS") [],Var 5],Comb (FuncPartCall 1) ("EliminateCond","transExpr.transComb.18._#lambda4") [Var 6,Var 7,Var 3,Var 2]])]),Branch (Pattern ("Prelude","False") []) (Comb (FuncPartCall 1) ("State","bindS") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("State","sequenceS") [],Var 5],Comb (FuncPartCall 1) ("EliminateCond","transExpr.transComb.18._#lambda4") [Var 6,Var 7,Var 3,Var 2]])])),Branch (Pattern ("Prelude","[]") []) (Comb (FuncPartCall 1) ("State","bindS") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("State","sequenceS") [],Var 5],Comb (FuncPartCall 1) ("EliminateCond","transExpr.transComb.18._#lambda4") [Var 6,Var 7,Var 3,Var 2]])]),Branch (Pattern ("Prelude","False") []) (Comb (FuncPartCall 1) ("State","bindS") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("State","sequenceS") [],Var 5],Comb (FuncPartCall 1) ("EliminateCond","transExpr.transComb.18._#lambda4") [Var 6,Var 7,Var 3,Var 2]])])),Branch (Pattern ("Prelude","[]") []) (Comb (FuncPartCall 1) ("State","bindS") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("State","sequenceS") [],Var 5],Comb (FuncPartCall 1) ("EliminateCond","transExpr.transComb.18._#lambda4") [Var 6,Var 7,Var 3,Var 2]])]),Branch (Pattern ("Prelude","False") []) (Comb (FuncPartCall 1) ("State","bindS") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("State","sequenceS") [],Var 5],Comb (FuncPartCall 1) ("EliminateCond","transExpr.transComb.18._#lambda4") [Var 6,Var 7,Var 3,Var 2]])])),Branch (Pattern ("Prelude","[]") []) (Comb (FuncPartCall 1) ("State","bindS") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("State","sequenceS") [],Var 5],Comb (FuncPartCall 1) ("EliminateCond","transExpr.transComb.18._#lambda4") [Var 6,Var 7,Var 3,Var 2]])]),Branch (Pattern ("Prelude","False") []) (Comb (FuncPartCall 1) ("State","bindS") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("State","sequenceS") [],Var 5],Comb (FuncPartCall 1) ("EliminateCond","transExpr.transComb.18._#lambda4") [Var 6,Var 7,Var 3,Var 2]])])),Branch (Pattern ("Prelude","[]") []) (Comb (FuncPartCall 1) ("State","bindS") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("State","sequenceS") [],Var 5],Comb (FuncPartCall 1) ("EliminateCond","transExpr.transComb.18._#lambda4") [Var 6,Var 7,Var 3,Var 2]])]),Branch (Pattern ("Prelude","False") []) (Comb (FuncPartCall 1) ("State","bindS") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("State","sequenceS") [],Var 5],Comb (FuncPartCall 1) ("EliminateCond","transExpr.transComb.18._#lambda4") [Var 6,Var 7,Var 3,Var 2]])])),Branch (Pattern ("Prelude","[]") []) (Comb (FuncPartCall 1) ("State","bindS") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("State","sequenceS") [],Var 5],Comb (FuncPartCall 1) ("EliminateCond","transExpr.transComb.18._#lambda4") [Var 6,Var 7,Var 3,Var 2]])])])])])),Func ("EliminateCond","transExpr.transComb.18._#lambda2") 4 Private (FuncType (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]],TCons ("Prelude","Int") []]) (TCons ("Prelude","(,)") [TCons ("AnnotatedFlatCurry","AExpr") [TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]],TCons ("Prelude","Int") []]])) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("FlatCurry","TypeExpr") []) (FuncType (TCons ("AnnotatedFlatCurry","AExpr") [TCons ("FlatCurry","TypeExpr") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]],TCons ("Prelude","Int") []]) (TCons ("Prelude","(,)") [TCons ("AnnotatedFlatCurry","AExpr") [TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]],TCons ("Prelude","Int") []]])))))) (Rule [1,2,3,4] (Comb (FuncPartCall 1) ("State","bindS") [Var 1,Comb (FuncPartCall 1) ("EliminateCond","transExpr.transComb.18._#lambda2._#lambda3") [Var 2,Var 4,Var 3]])),Func ("EliminateCond","transExpr.transComb.18._#lambda2._#lambda3") 4 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("AnnotatedFlatCurry","AExpr") [TCons ("FlatCurry","TypeExpr") []]) (FuncType (TCons ("FlatCurry","TypeExpr") []) (FuncType (TCons ("AnnotatedFlatCurry","AExpr") [TCons ("FlatCurry","TypeExpr") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]],TCons ("Prelude","Int") []]) (TCons ("Prelude","(,)") [TCons ("AnnotatedFlatCurry","AExpr") [TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]],TCons ("Prelude","Int") []]])))))) (Rule [1,2,3,4] (Comb FuncCall ("EliminateCond","makeAuxFuncCall") [Var 1,Var 3,Var 2,Var 4])),Func ("EliminateCond","transExpr.transComb.18._#lambda4") 5 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("FlatCurry","TypeExpr") []) (FuncType (TCons ("FlatCurry","CombType") []) (FuncType (TCons ("FlatCurry","TypeExpr") []) (FuncType (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AExpr") [TCons ("FlatCurry","TypeExpr") []]]) (FuncType (TVar 326) (TCons ("Prelude","(,)") [TCons ("AnnotatedFlatCurry","AExpr") [TCons ("FlatCurry","TypeExpr") []],TVar 326]))))))) (Rule [1,2,3,4,5] (Comb (FuncPartCall 1) ("State","returnS") [Comb ConsCall ("AnnotatedFlatCurry","AComb") [Var 4,Var 3,Comb ConsCall ("Prelude","(,)") [Var 1,Var 2],Var 5]])),Func ("EliminateCond","transExpr.transLet.18") 3 Private (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],FuncType (TVar 1) (TCons ("Prelude","(,)") [TCons ("AnnotatedFlatCurry","AExpr") [TVar 0],TVar 1])]]) (FuncType (FuncType (TVar 1) (TCons ("Prelude","(,)") [TCons ("AnnotatedFlatCurry","AExpr") [TVar 0],TVar 1])) (FuncType (TVar 1) (TCons ("Prelude","(,)") [TCons ("AnnotatedFlatCurry","AExpr") [TVar 0],TVar 1]))))) (Rule [1,2,3] (Let [(4,Comb FuncCall ("Prelude","unzip") [Var 2]),(5,Comb FuncCall ("EliminateCond","transExpr.transLet.18._#selFP5#vars") [Var 4]),(6,Comb FuncCall ("EliminateCond","transExpr.transLet.18._#selFP6#exps") [Var 4])] (Comb (FuncPartCall 1) ("State","bindS") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("State","sequenceS") [],Var 6],Comb (FuncPartCall 1) ("EliminateCond","transExpr.transLet.18._#lambda5") [Var 3,Var 1,Var 5]]))),Func ("EliminateCond","transExpr.transLet.18._#selFP5#vars") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Int") []],TCons ("Prelude","[]") [FuncType (TVar 258) (TCons ("Prelude","(,)") [TCons ("AnnotatedFlatCurry","AExpr") [TVar 240],TVar 258])]]) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("EliminateCond","transExpr.transLet.18._#selFP6#exps") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Int") []],TCons ("Prelude","[]") [FuncType (TVar 258) (TCons ("Prelude","(,)") [TCons ("AnnotatedFlatCurry","AExpr") [TVar 240],TVar 258])]]) (TCons ("Prelude","[]") [FuncType (TVar 258) (TCons ("Prelude","(,)") [TCons ("AnnotatedFlatCurry","AExpr") [TVar 240],TVar 258])])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("EliminateCond","transExpr.transLet.18._#lambda5") 4 Private (FuncType (FuncType (TVar 258) (TCons ("Prelude","(,)") [TCons ("AnnotatedFlatCurry","AExpr") [TVar 240],TVar 258])) (FuncType (TVar 240) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (FuncType (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AExpr") [TVar 240]]) (FuncType (TVar 258) (TCons ("Prelude","(,)") [TCons ("AnnotatedFlatCurry","AExpr") [TVar 240],TVar 258])))))) (Rule [1,2,3,4] (Comb (FuncPartCall 1) ("State","bindS") [Var 1,Comb (FuncPartCall 1) ("EliminateCond","transExpr.transLet.18._#lambda5._#lambda6") [Var 4,Var 2,Var 3]])),Func ("EliminateCond","transExpr.transLet.18._#lambda5._#lambda6") 4 Private (FuncType (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AExpr") [TVar 240]]) (FuncType (TVar 240) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (FuncType (TCons ("AnnotatedFlatCurry","AExpr") [TVar 240]) (FuncType (TVar 327) (TCons ("Prelude","(,)") [TCons ("AnnotatedFlatCurry","AExpr") [TVar 240],TVar 327])))))) (Rule [1,2,3,4] (Comb (FuncPartCall 1) ("State","returnS") [Comb ConsCall ("AnnotatedFlatCurry","ALet") [Var 2,Comb FuncCall ("Prelude","zip") [Var 3,Var 1],Var 4]])),Func ("EliminateCond","transExpr.transFree.18") 3 Private (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TVar 0]]) (FuncType (FuncType (TVar 1) (TCons ("Prelude","(,)") [TCons ("AnnotatedFlatCurry","AExpr") [TVar 0],TVar 1])) (FuncType (TVar 1) (TCons ("Prelude","(,)") [TCons ("AnnotatedFlatCurry","AExpr") [TVar 0],TVar 1]))))) (Rule [1,2,3] (Comb (FuncPartCall 1) ("State","bindS") [Var 3,Comb (FuncPartCall 1) ("EliminateCond","transExpr.transFree.18._#lambda7") [Var 1,Var 2]])),Func ("EliminateCond","transExpr.transFree.18._#lambda7") 3 Private (FuncType (TVar 263) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TVar 263]]) (FuncType (TCons ("AnnotatedFlatCurry","AExpr") [TVar 263]) (FuncType (TVar 328) (TCons ("Prelude","(,)") [TCons ("AnnotatedFlatCurry","AExpr") [TVar 263],TVar 328]))))) (Rule [1,2,3] (Comb (FuncPartCall 1) ("State","returnS") [Comb ConsCall ("AnnotatedFlatCurry","AFree") [Var 1,Var 2,Var 3]])),Func ("EliminateCond","transExpr.transOr.18") 3 Private (FuncType (TVar 0) (FuncType (FuncType (TVar 1) (TCons ("Prelude","(,)") [TCons ("AnnotatedFlatCurry","AExpr") [TVar 0],TVar 1])) (FuncType (FuncType (TVar 1) (TCons ("Prelude","(,)") [TCons ("AnnotatedFlatCurry","AExpr") [TVar 0],TVar 1])) (FuncType (TVar 1) (TCons ("Prelude","(,)") [TCons ("AnnotatedFlatCurry","AExpr") [TVar 0],TVar 1]))))) (Rule [1,2,3] (Comb (FuncPartCall 1) ("State","bindS") [Var 2,Comb (FuncPartCall 1) ("EliminateCond","transExpr.transOr.18._#lambda8") [Var 3,Var 1]])),Func ("EliminateCond","transExpr.transOr.18._#lambda8") 3 Private (FuncType (FuncType (TVar 286) (TCons ("Prelude","(,)") [TCons ("AnnotatedFlatCurry","AExpr") [TVar 274],TVar 286])) (FuncType (TVar 274) (FuncType (TCons ("AnnotatedFlatCurry","AExpr") [TVar 274]) (FuncType (TVar 286) (TCons ("Prelude","(,)") [TCons ("AnnotatedFlatCurry","AExpr") [TVar 274],TVar 286]))))) (Rule [1,2,3] (Comb (FuncPartCall 1) ("State","bindS") [Var 1,Comb (FuncPartCall 1) ("EliminateCond","transExpr.transOr.18._#lambda8._#lambda9") [Var 3,Var 2]])),Func ("EliminateCond","transExpr.transOr.18._#lambda8._#lambda9") 3 Private (FuncType (TCons ("AnnotatedFlatCurry","AExpr") [TVar 274]) (FuncType (TVar 274) (FuncType (TCons ("AnnotatedFlatCurry","AExpr") [TVar 274]) (FuncType (TVar 329) (TCons ("Prelude","(,)") [TCons ("AnnotatedFlatCurry","AExpr") [TVar 274],TVar 329]))))) (Rule [1,2,3] (Comb (FuncPartCall 1) ("State","returnS") [Comb ConsCall ("AnnotatedFlatCurry","AOr") [Var 2,Var 1,Var 3]])),Func ("EliminateCond","transExpr.transCase.18") 4 Private (FuncType (TVar 0) (FuncType (TCons ("FlatCurry","CaseType") []) (FuncType (FuncType (TVar 1) (TCons ("Prelude","(,)") [TCons ("AnnotatedFlatCurry","AExpr") [TVar 0],TVar 1])) (FuncType (TCons ("Prelude","[]") [FuncType (TVar 1) (TCons ("Prelude","(,)") [TCons ("AnnotatedFlatCurry","ABranchExpr") [TVar 0],TVar 1])]) (FuncType (TVar 1) (TCons ("Prelude","(,)") [TCons ("AnnotatedFlatCurry","AExpr") [TVar 0],TVar 1])))))) (Rule [1,2,3,4] (Comb (FuncPartCall 1) ("State","bindS") [Var 3,Comb (FuncPartCall 1) ("EliminateCond","transExpr.transCase.18._#lambda10") [Var 4,Var 2,Var 1]])),Func ("EliminateCond","transExpr.transCase.18._#lambda10") 4 Private (FuncType (TCons ("Prelude","[]") [FuncType (TVar 304) (TCons ("Prelude","(,)") [TCons ("AnnotatedFlatCurry","ABranchExpr") [TVar 289],TVar 304])]) (FuncType (TCons ("FlatCurry","CaseType") []) (FuncType (TVar 289) (FuncType (TCons ("AnnotatedFlatCurry","AExpr") [TVar 289]) (FuncType (TVar 304) (TCons ("Prelude","(,)") [TCons ("AnnotatedFlatCurry","AExpr") [TVar 289],TVar 304])))))) (Rule [1,2,3,4] (Comb (FuncPartCall 1) ("State","bindS") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("State","sequenceS") [],Var 1],Comb (FuncPartCall 1) ("EliminateCond","transExpr.transCase.18._#lambda10._#lambda11") [Var 2,Var 4,Var 3]])),Func ("EliminateCond","transExpr.transCase.18._#lambda10._#lambda11") 4 Private (FuncType (TCons ("FlatCurry","CaseType") []) (FuncType (TCons ("AnnotatedFlatCurry","AExpr") [TVar 289]) (FuncType (TVar 289) (FuncType (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","ABranchExpr") [TVar 289]]) (FuncType (TVar 330) (TCons ("Prelude","(,)") [TCons ("AnnotatedFlatCurry","AExpr") [TVar 289],TVar 330])))))) (Rule [1,2,3,4] (Comb (FuncPartCall 1) ("State","returnS") [Comb ConsCall ("AnnotatedFlatCurry","ACase") [Var 3,Var 1,Var 2,Var 4]])),Func ("EliminateCond","transExpr.transBranch.18") 2 Private (FuncType (TCons ("AnnotatedFlatCurry","APattern") [TVar 0]) (FuncType (FuncType (TVar 1) (TCons ("Prelude","(,)") [TCons ("AnnotatedFlatCurry","AExpr") [TVar 0],TVar 1])) (FuncType (TVar 1) (TCons ("Prelude","(,)") [TCons ("AnnotatedFlatCurry","ABranchExpr") [TVar 0],TVar 1])))) (Rule [1,2] (Comb (FuncPartCall 1) ("State","bindS") [Var 2,Comb (FuncPartCall 1) ("EliminateCond","transExpr.transBranch.18._#lambda12") [Var 1]])),Func ("EliminateCond","transExpr.transBranch.18._#lambda12") 2 Private (FuncType (TCons ("AnnotatedFlatCurry","APattern") [TVar 315]) (FuncType (TCons ("AnnotatedFlatCurry","AExpr") [TVar 315]) (FuncType (TVar 331) (TCons ("Prelude","(,)") [TCons ("AnnotatedFlatCurry","ABranchExpr") [TVar 315],TVar 331])))) (Rule [1,2] (Comb (FuncPartCall 1) ("State","returnS") [Comb ConsCall ("AnnotatedFlatCurry","ABranch") [Var 1,Var 2]])),Func ("EliminateCond","transExpr.transTyped.18") 3 Private (FuncType (TVar 0) (FuncType (FuncType (TVar 1) (TCons ("Prelude","(,)") [TCons ("AnnotatedFlatCurry","AExpr") [TVar 0],TVar 1])) (FuncType (TCons ("FlatCurry","TypeExpr") []) (FuncType (TVar 1) (TCons ("Prelude","(,)") [TCons ("AnnotatedFlatCurry","AExpr") [TVar 0],TVar 1]))))) (Rule [1,2,3] (Comb (FuncPartCall 1) ("State","bindS") [Var 2,Comb (FuncPartCall 1) ("EliminateCond","transExpr.transTyped.18._#lambda13") [Var 1,Var 3]])),Func ("EliminateCond","transExpr.transTyped.18._#lambda13") 3 Private (FuncType (TVar 317) (FuncType (TCons ("FlatCurry","TypeExpr") []) (FuncType (TCons ("AnnotatedFlatCurry","AExpr") [TVar 317]) (FuncType (TVar 332) (TCons ("Prelude","(,)") [TCons ("AnnotatedFlatCurry","AExpr") [TVar 317],TVar 332]))))) (Rule [1,2,3] (Comb (FuncPartCall 1) ("State","returnS") [Comb ConsCall ("AnnotatedFlatCurry","ATyped") [Var 1,Var 3,Var 2]])),Func ("EliminateCond","makeAuxFuncCall") 4 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("FlatCurry","TypeExpr") []) (FuncType (TCons ("AnnotatedFlatCurry","AExpr") [TCons ("FlatCurry","TypeExpr") []]) (FuncType (TCons ("AnnotatedFlatCurry","AExpr") [TCons ("FlatCurry","TypeExpr") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]],TCons ("Prelude","Int") []]) (TCons ("Prelude","(,)") [TCons ("AnnotatedFlatCurry","AExpr") [TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]],TCons ("Prelude","Int") []]])))))) (Rule [1,2,3,4] (Let [(5,Comb FuncCall ("AnnotatedFlatCurryGoodies","annExpr") [Var 3]),(6,Comb FuncCall ("EliminateCond","unboundVars") [Var 4]),(7,Comb FuncCall ("Prelude","zip") [Comb FuncCall ("Prelude","enumFrom") [Lit (Intc  1)],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Prelude","snd") [],Var 6],Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude","[]") []]]]),(8,Comb FuncCall ("Prelude","foldr") [Comb (ConsPartCall 2) ("FlatCurry","FuncType") [],Var 2,Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Prelude","snd") [],Var 7]]),(9,Comb FuncCall ("Prelude","+") [Comb FuncCall ("Prelude","length") [Var 6],Lit (Intc  1)]),(10,Comb ConsCall ("AnnotatedFlatCurry","ARule") [Var 8,Var 7,Comb ConsCall ("AnnotatedFlatCurry","ACase") [Var 2,Comb ConsCall ("FlatCurry","Flex") [],Comb ConsCall ("AnnotatedFlatCurry","AVar") [Var 5,Var 9],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AnnotatedFlatCurry","ABranch") [Comb ConsCall ("AnnotatedFlatCurry","APattern") [Var 5,Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("EliminateCond","successId") [],Comb FuncCall ("EliminateCond","successType") []],Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("AnnotatedFlatCurryGoodies","rnmAllVars") [Comb (FuncPartCall 1) ("EliminateCond","makeAuxFuncCall.renameVarFun.57") [Var 6]],Var 4]],Comb ConsCall ("Prelude","[]") []]]])] (Comb (FuncPartCall 1) ("State","bindS") [Comb (FuncPartCall 1) ("State","getS") [],Comb (FuncPartCall 1) ("EliminateCond","makeAuxFuncCall._#lambda14") [Var 3,Var 8,Var 1,Var 9,Var 10,Var 2,Var 6]]))),Func ("EliminateCond","makeAuxFuncCall.renameVarFun.57") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (Rule [1,2] (Comb FuncCall ("Prelude","maybe") [Var 2,Comb (FuncPartCall 1) ("Prelude","flip") [Comb (FuncPartCall 2) ("Prelude","+") [],Lit (Intc  1)],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("List","elemIndex") [Var 2],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Prelude","fst") [],Var 1]]])),Func ("EliminateCond","makeAuxFuncCall.mkNewName.57") 2 Private (FuncType (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TVar 1) (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]))) (Rule [1,2] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb ConsCall ("Prelude","(,)") [Var 3,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","show") [Var 2],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude","[]") []],Var 4]]]])])),Func ("EliminateCond","makeAuxFuncCall.newFun.57") 5 Private (FuncType (TCons ("FlatCurry","TypeExpr") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("AnnotatedFlatCurry","ARule") [TCons ("FlatCurry","TypeExpr") []]) (FuncType (TVar 0) (TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []])))))) (Rule [1,2,3,4,5] (Comb ConsCall ("AnnotatedFlatCurry","AFunc") [Comb FuncCall ("EliminateCond","makeAuxFuncCall.mkNewName.57") [Var 2,Var 5],Var 3,Comb ConsCall ("FlatCurry","Private") [],Var 1,Var 4])),Func ("EliminateCond","makeAuxFuncCall._#lambda14") 8 Private (FuncType (TCons ("AnnotatedFlatCurry","AExpr") [TCons ("FlatCurry","TypeExpr") []]) (FuncType (TCons ("FlatCurry","TypeExpr") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("AnnotatedFlatCurry","ARule") [TCons ("FlatCurry","TypeExpr") []]) (FuncType (TCons ("FlatCurry","TypeExpr") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]],TCons ("Prelude","Int") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]],TCons ("Prelude","Int") []]) (TCons ("Prelude","(,)") [TCons ("AnnotatedFlatCurry","AExpr") [TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]],TCons ("Prelude","Int") []]])))))))))) (Rule [1,2,3,4,5,6,7,8] (Case  Flex (Var 8) [Branch (Pattern ("Prelude","(,)") [9,10]) (Comb (FuncPartCall 1) ("State","bindS") [Comb (FuncPartCall 1) ("State","putS") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Comb FuncCall ("EliminateCond","makeAuxFuncCall.newFun.57") [Var 2,Var 3,Var 4,Var 5,Var 10],Var 9],Comb FuncCall ("Prelude","+") [Var 10,Lit (Intc  1)]]],Comb (FuncPartCall 1) ("EliminateCond","makeAuxFuncCall._#lambda14._#lambda15") [Var 1,Var 2,Var 10,Var 3,Var 6,Var 7]])])),Func ("EliminateCond","makeAuxFuncCall._#lambda14._#lambda15") 7 Private (FuncType (TCons ("AnnotatedFlatCurry","AExpr") [TCons ("FlatCurry","TypeExpr") []]) (FuncType (TCons ("FlatCurry","TypeExpr") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("FlatCurry","TypeExpr") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]) (FuncType (TCons ("Prelude","()") []) (FuncType (TVar 333) (TCons ("Prelude","(,)") [TCons ("AnnotatedFlatCurry","AExpr") [TCons ("FlatCurry","TypeExpr") []],TVar 333]))))))))) (Rule [1,2,3,4,5,6,7] (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 2) ("State","returnS") [],Comb ConsCall ("AnnotatedFlatCurry","AComb") [Var 5,Comb ConsCall ("FlatCurry","FuncCall") [],Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("EliminateCond","makeAuxFuncCall.mkNewName.57") [Var 4,Var 3],Var 2],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Prelude","uncurry") [Comb (FuncPartCall 2) ("Prelude","flip") [Comb (ConsPartCall 2) ("AnnotatedFlatCurry","AVar") []]],Var 6],Comb ConsCall ("Prelude",":") [Var 1,Comb ConsCall ("Prelude","[]") []]]]])),Func ("EliminateCond","successId") 0 Private (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (Rule [] (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb ConsCall ("Prelude",":") [Lit (Charc  'S'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude","[]") []]]]]]]]])),Func ("EliminateCond","successType") 0 Private (TCons ("FlatCurry","TypeExpr") []) (Rule [] (Comb ConsCall ("FlatCurry","TCons") [Comb FuncCall ("EliminateCond","successId") [],Comb ConsCall ("Prelude","[]") []])),Func ("EliminateCond","unboundVars") 1 Private (FuncType (TCons ("AnnotatedFlatCurry","AExpr") [TCons ("FlatCurry","TypeExpr") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]])) (Rule [1] (Comb FuncCall ("List","nub") [Comb FuncCall ("AnnotatedFlatCurryGoodies","trExpr") [Comb (FuncPartCall 2) ("EliminateCond","unboundVars.var.82") [],Comb (FuncPartCall 2) ("EliminateCond","unboundVars.lit.82") [],Comb (FuncPartCall 3) ("EliminateCond","unboundVars.comb.82") [],Comb (FuncPartCall 3) ("EliminateCond","unboundVars.leT.82") [],Comb (FuncPartCall 2) ("EliminateCond","unboundVars.freE.82") [],Comb (FuncPartCall 1) ("EliminateCond","unboundVars.oR.82") [],Comb (FuncPartCall 4) ("EliminateCond","unboundVars.casE.82") [],Comb (FuncPartCall 2) ("EliminateCond","unboundVars.branch.82") [],Comb (FuncPartCall 3) ("EliminateCond","unboundVars.typed.82") [],Var 1]])),Func ("EliminateCond","unboundVars.var.82") 2 Private (FuncType (TVar 0) (FuncType (TVar 1) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 1,TVar 0]]))) (Rule [1,2] (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Var 2,Var 1],Comb ConsCall ("Prelude","[]") []])),Func ("EliminateCond","unboundVars.lit.82") 2 Private (FuncType (TVar 0) (FuncType (TVar 1) (TCons ("Prelude","[]") [TVar 2]))) (Rule [1,2] (Comb ConsCall ("Prelude","[]") [])),Func ("EliminateCond","unboundVars.comb.82") 3 Private (FuncType (TVar 0) (FuncType (TVar 1) (FuncType (TVar 2) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 3]]) (TCons ("Prelude","[]") [TVar 3]))))) (Rule [1,2,3] (Comb (FuncPartCall 1) ("Prelude","concat") [])),Func ("EliminateCond","unboundVars.leT.82") 3 Private (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 1,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 1,TVar 2]]]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 1,TVar 2]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 1,TVar 2]])))) (Rule [1,2,3] (Let [(4,Comb FuncCall ("Prelude","unzip") [Var 2]),(5,Comb FuncCall ("EliminateCond","unboundVars.leT.82._#selFP8#vs") [Var 4]),(6,Comb FuncCall ("EliminateCond","unboundVars.leT.82._#selFP9#es") [Var 4])] (Comb FuncCall ("Prelude","filter") [Comb (FuncPartCall 1) ("EliminateCond","unboundVars.leT.82._#lambda16") [Var 5],Comb FuncCall ("Prelude","concat") [Comb ConsCall ("Prelude",":") [Var 3,Var 6]]]))),Func ("EliminateCond","unboundVars.leT.82._#selFP8#vs") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 22],TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 22,TVar 28]]]]) (TCons ("Prelude","[]") [TVar 22])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("EliminateCond","unboundVars.leT.82._#selFP9#es") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 22],TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 22,TVar 28]]]]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 22,TVar 28]]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("EliminateCond","unboundVars.leT.82._#lambda16") 2 Private (FuncType (TCons ("Prelude","[]") [TVar 22]) (FuncType (TCons ("Prelude","(,)") [TVar 22,TVar 28]) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","notElem") [Comb FuncCall ("Prelude","fst") [Var 2]],Var 1])),Func ("EliminateCond","unboundVars.freE.82") 2 Private (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 1,TVar 2]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 1,TVar 3]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 1,TVar 3]])))) (Rule [1,2] (Comb (FuncPartCall 1) ("Prelude","filter") [Comb (FuncPartCall 1) ("EliminateCond","unboundVars.freE.82._#lambda17") [Var 2]])),Func ("EliminateCond","unboundVars.freE.82._#lambda17") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 41,TVar 42]]) (FuncType (TCons ("Prelude","(,)") [TVar 41,TVar 38]) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","notElem") [Comb FuncCall ("Prelude","fst") [Var 2]],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Prelude","fst") [],Var 1]])),Func ("EliminateCond","unboundVars.oR.82") 1 Private (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TVar 1]) (FuncType (TCons ("Prelude","[]") [TVar 1]) (TCons ("Prelude","[]") [TVar 1])))) (Rule [1] (Comb (FuncPartCall 2) ("Prelude","++") [])),Func ("EliminateCond","unboundVars.casE.82") 4 Private (FuncType (TVar 0) (FuncType (TVar 1) (FuncType (TCons ("Prelude","[]") [TVar 2]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 2]]) (TCons ("Prelude","[]") [TVar 2]))))) (Rule [1,2,3,4] (Comb FuncCall ("Prelude","concat") [Comb ConsCall ("Prelude",":") [Var 3,Var 4]])),Func ("EliminateCond","unboundVars.branch.82") 2 Private (FuncType (TCons ("AnnotatedFlatCurry","APattern") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TVar 1]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TVar 1]]))) (Rule [1,2] (Case  Flex (Var 1) [Branch (Pattern ("AnnotatedFlatCurry","APattern") [3,4,5]) (Comb FuncCall ("Prelude","filter") [Comb (FuncPartCall 1) ("EliminateCond","unboundVars.branch.82._#lambda18") [Var 5],Var 2])])),Func ("EliminateCond","unboundVars.branch.82._#lambda18") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TVar 55]]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TVar 63]) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","notElem") [Comb FuncCall ("Prelude","fst") [Var 2]],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Prelude","fst") [],Var 1]])),Func ("EliminateCond","unboundVars.typed.82") 3 Private (FuncType (TVar 0) (FuncType (TVar 1) (FuncType (TVar 2) (TVar 1)))) (Rule [1,2,3] (Var 2))] []