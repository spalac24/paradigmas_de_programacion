Prog "Linker" ["FilePath","GhciComm","IO","Installation","List","Names","Prelude","RCFile","ReadShowTerm","System","Utils","AbstractCurry","Directory","PropertyFile"] [Type ("Linker","_#Rec:ReplState") Public [] [Cons ("Linker","_#Lab:kics2Home") 1 Public [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],Cons ("Linker","_#Lab:rcvars") 1 Public [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]],Cons ("Linker","_#Lab:idSupply") 1 Public [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],Cons ("Linker","_#Lab:verbose") 1 Public [TCons ("Prelude","Int") []],Cons ("Linker","_#Lab:importPaths") 1 Public [TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]],Cons ("Linker","_#Lab:libPaths") 1 Public [TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]],Cons ("Linker","_#Lab:outputSubdir") 1 Public [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],Cons ("Linker","_#Lab:mainMod") 1 Public [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],Cons ("Linker","_#Lab:addMods") 1 Public [TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]],Cons ("Linker","_#Lab:prompt") 1 Public [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],Cons ("Linker","_#Lab:optim") 1 Public [TCons ("Prelude","Bool") []],Cons ("Linker","_#Lab:ndMode") 1 Public [TCons ("Linker","NonDetMode") []],Cons ("Linker","_#Lab:firstSol") 1 Public [TCons ("Prelude","Bool") []],Cons ("Linker","_#Lab:interactive") 1 Public [TCons ("Prelude","Bool") []],Cons ("Linker","_#Lab:showBindings") 1 Public [TCons ("Prelude","Bool") []],Cons ("Linker","_#Lab:showTime") 1 Public [TCons ("Prelude","Bool") []],Cons ("Linker","_#Lab:useGhci") 1 Public [TCons ("Prelude","Bool") []],Cons ("Linker","_#Lab:cmpOpts") 1 Public [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],Cons ("Linker","_#Lab:ghcOpts") 1 Public [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],Cons ("Linker","_#Lab:rtsOpts") 1 Public [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],Cons ("Linker","_#Lab:rtsArgs") 1 Public [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],Cons ("Linker","_#Lab:quit") 1 Public [TCons ("Prelude","Bool") []],Cons ("Linker","_#Lab:sourceguis") 1 Public [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("IO","Handle") []]]]],Cons ("Linker","_#Lab:ghcicomm") 1 Public [TCons ("Prelude","Maybe") [TCons ("GhciComm","GhciComm") []]]],Type ("Linker","ReplState") Public [] [Cons ("Linker","ReplState") 24 Private [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","Bool") [],TCons ("Linker","NonDetMode") [],TCons ("Prelude","Bool") [],TCons ("Prelude","Bool") [],TCons ("Prelude","Bool") [],TCons ("Prelude","Bool") [],TCons ("Prelude","Bool") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","Bool") [],TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("IO","Handle") []]]],TCons ("Prelude","Maybe") [TCons ("GhciComm","GhciComm") []]]],Type ("Linker","MainCompile") Public [] [Cons ("Linker","MainError") 0 Public [],Cons ("Linker","MainDet") 0 Public [],Cons ("Linker","MainNonDet") 0 Public []],Type ("Linker","NonDetMode") Public [] [Cons ("Linker","DFS") 0 Public [],Cons ("Linker","BFS") 0 Public [],Cons ("Linker","IDS") 1 Public [TCons ("Prelude","Int") []],Cons ("Linker","Par") 1 Public [TCons ("Prelude","Int") []],Cons ("Linker","PrDFS") 0 Public [],Cons ("Linker","PrtChoices") 1 Public [TCons ("Prelude","Int") []]],Type ("Linker","EvalMode") Private [] [Cons ("Linker","All") 0 Private [],Cons ("Linker","One") 0 Private [],Cons ("Linker","Interactive") 1 Private [TCons ("Linker","MoreDefault") []]],Type ("Linker","MoreDefault") Private [] [Cons ("Linker","MoreYes") 0 Private [],Cons ("Linker","MoreNo") 0 Private [],Cons ("Linker","MoreAll") 0 Private []]] [Func ("Linker","_#selR@ReplState.kics2Home") 1 Public (FuncType (TCons ("Linker","ReplState") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Linker","ReplState") [2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]) (Var 2)])),Func ("Linker","_#updR@ReplState.kics2Home") 2 Public (FuncType (TCons ("Linker","ReplState") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Linker","ReplState") []))) (Rule [1,2] (Case  Flex (Var 1) [Branch (Pattern ("Linker","ReplState") [3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]) (Comb ConsCall ("Linker","ReplState") [Var 2,Var 4,Var 5,Var 6,Var 7,Var 8,Var 9,Var 10,Var 11,Var 12,Var 13,Var 14,Var 15,Var 16,Var 17,Var 18,Var 19,Var 20,Var 21,Var 22,Var 23,Var 24,Var 25,Var 26])])),Func ("Linker","_#selR@ReplState.rcvars") 1 Public (FuncType (TCons ("Linker","ReplState") []) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Linker","ReplState") [2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]) (Var 3)])),Func ("Linker","_#updR@ReplState.rcvars") 2 Public (FuncType (TCons ("Linker","ReplState") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Linker","ReplState") []))) (Rule [1,2] (Case  Flex (Var 1) [Branch (Pattern ("Linker","ReplState") [3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]) (Comb ConsCall ("Linker","ReplState") [Var 3,Var 2,Var 5,Var 6,Var 7,Var 8,Var 9,Var 10,Var 11,Var 12,Var 13,Var 14,Var 15,Var 16,Var 17,Var 18,Var 19,Var 20,Var 21,Var 22,Var 23,Var 24,Var 25,Var 26])])),Func ("Linker","_#selR@ReplState.idSupply") 1 Public (FuncType (TCons ("Linker","ReplState") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Linker","ReplState") [2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]) (Var 4)])),Func ("Linker","_#updR@ReplState.idSupply") 2 Public (FuncType (TCons ("Linker","ReplState") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Linker","ReplState") []))) (Rule [1,2] (Case  Flex (Var 1) [Branch (Pattern ("Linker","ReplState") [3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]) (Comb ConsCall ("Linker","ReplState") [Var 3,Var 4,Var 2,Var 6,Var 7,Var 8,Var 9,Var 10,Var 11,Var 12,Var 13,Var 14,Var 15,Var 16,Var 17,Var 18,Var 19,Var 20,Var 21,Var 22,Var 23,Var 24,Var 25,Var 26])])),Func ("Linker","_#selR@ReplState.verbose") 1 Public (FuncType (TCons ("Linker","ReplState") []) (TCons ("Prelude","Int") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Linker","ReplState") [2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]) (Var 5)])),Func ("Linker","_#updR@ReplState.verbose") 2 Public (FuncType (TCons ("Linker","ReplState") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Linker","ReplState") []))) (Rule [1,2] (Case  Flex (Var 1) [Branch (Pattern ("Linker","ReplState") [3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]) (Comb ConsCall ("Linker","ReplState") [Var 3,Var 4,Var 5,Var 2,Var 7,Var 8,Var 9,Var 10,Var 11,Var 12,Var 13,Var 14,Var 15,Var 16,Var 17,Var 18,Var 19,Var 20,Var 21,Var 22,Var 23,Var 24,Var 25,Var 26])])),Func ("Linker","_#selR@ReplState.importPaths") 1 Public (FuncType (TCons ("Linker","ReplState") []) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Linker","ReplState") [2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]) (Var 6)])),Func ("Linker","_#updR@ReplState.importPaths") 2 Public (FuncType (TCons ("Linker","ReplState") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Linker","ReplState") []))) (Rule [1,2] (Case  Flex (Var 1) [Branch (Pattern ("Linker","ReplState") [3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]) (Comb ConsCall ("Linker","ReplState") [Var 3,Var 4,Var 5,Var 6,Var 2,Var 8,Var 9,Var 10,Var 11,Var 12,Var 13,Var 14,Var 15,Var 16,Var 17,Var 18,Var 19,Var 20,Var 21,Var 22,Var 23,Var 24,Var 25,Var 26])])),Func ("Linker","_#selR@ReplState.libPaths") 1 Public (FuncType (TCons ("Linker","ReplState") []) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Linker","ReplState") [2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]) (Var 7)])),Func ("Linker","_#updR@ReplState.libPaths") 2 Public (FuncType (TCons ("Linker","ReplState") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Linker","ReplState") []))) (Rule [1,2] (Case  Flex (Var 1) [Branch (Pattern ("Linker","ReplState") [3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]) (Comb ConsCall ("Linker","ReplState") [Var 3,Var 4,Var 5,Var 6,Var 7,Var 2,Var 9,Var 10,Var 11,Var 12,Var 13,Var 14,Var 15,Var 16,Var 17,Var 18,Var 19,Var 20,Var 21,Var 22,Var 23,Var 24,Var 25,Var 26])])),Func ("Linker","_#selR@ReplState.outputSubdir") 1 Public (FuncType (TCons ("Linker","ReplState") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Linker","ReplState") [2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]) (Var 8)])),Func ("Linker","_#updR@ReplState.outputSubdir") 2 Public (FuncType (TCons ("Linker","ReplState") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Linker","ReplState") []))) (Rule [1,2] (Case  Flex (Var 1) [Branch (Pattern ("Linker","ReplState") [3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]) (Comb ConsCall ("Linker","ReplState") [Var 3,Var 4,Var 5,Var 6,Var 7,Var 8,Var 2,Var 10,Var 11,Var 12,Var 13,Var 14,Var 15,Var 16,Var 17,Var 18,Var 19,Var 20,Var 21,Var 22,Var 23,Var 24,Var 25,Var 26])])),Func ("Linker","_#selR@ReplState.mainMod") 1 Public (FuncType (TCons ("Linker","ReplState") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Linker","ReplState") [2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]) (Var 9)])),Func ("Linker","_#updR@ReplState.mainMod") 2 Public (FuncType (TCons ("Linker","ReplState") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Linker","ReplState") []))) (Rule [1,2] (Case  Flex (Var 1) [Branch (Pattern ("Linker","ReplState") [3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]) (Comb ConsCall ("Linker","ReplState") [Var 3,Var 4,Var 5,Var 6,Var 7,Var 8,Var 9,Var 2,Var 11,Var 12,Var 13,Var 14,Var 15,Var 16,Var 17,Var 18,Var 19,Var 20,Var 21,Var 22,Var 23,Var 24,Var 25,Var 26])])),Func ("Linker","_#selR@ReplState.addMods") 1 Public (FuncType (TCons ("Linker","ReplState") []) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Linker","ReplState") [2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]) (Var 10)])),Func ("Linker","_#updR@ReplState.addMods") 2 Public (FuncType (TCons ("Linker","ReplState") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Linker","ReplState") []))) (Rule [1,2] (Case  Flex (Var 1) [Branch (Pattern ("Linker","ReplState") [3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]) (Comb ConsCall ("Linker","ReplState") [Var 3,Var 4,Var 5,Var 6,Var 7,Var 8,Var 9,Var 10,Var 2,Var 12,Var 13,Var 14,Var 15,Var 16,Var 17,Var 18,Var 19,Var 20,Var 21,Var 22,Var 23,Var 24,Var 25,Var 26])])),Func ("Linker","_#selR@ReplState.prompt") 1 Public (FuncType (TCons ("Linker","ReplState") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Linker","ReplState") [2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]) (Var 11)])),Func ("Linker","_#updR@ReplState.prompt") 2 Public (FuncType (TCons ("Linker","ReplState") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Linker","ReplState") []))) (Rule [1,2] (Case  Flex (Var 1) [Branch (Pattern ("Linker","ReplState") [3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]) (Comb ConsCall ("Linker","ReplState") [Var 3,Var 4,Var 5,Var 6,Var 7,Var 8,Var 9,Var 10,Var 11,Var 2,Var 13,Var 14,Var 15,Var 16,Var 17,Var 18,Var 19,Var 20,Var 21,Var 22,Var 23,Var 24,Var 25,Var 26])])),Func ("Linker","_#selR@ReplState.optim") 1 Public (FuncType (TCons ("Linker","ReplState") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Linker","ReplState") [2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]) (Var 12)])),Func ("Linker","_#updR@ReplState.optim") 2 Public (FuncType (TCons ("Linker","ReplState") []) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Linker","ReplState") []))) (Rule [1,2] (Case  Flex (Var 1) [Branch (Pattern ("Linker","ReplState") [3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]) (Comb ConsCall ("Linker","ReplState") [Var 3,Var 4,Var 5,Var 6,Var 7,Var 8,Var 9,Var 10,Var 11,Var 12,Var 2,Var 14,Var 15,Var 16,Var 17,Var 18,Var 19,Var 20,Var 21,Var 22,Var 23,Var 24,Var 25,Var 26])])),Func ("Linker","_#selR@ReplState.ndMode") 1 Public (FuncType (TCons ("Linker","ReplState") []) (TCons ("Linker","NonDetMode") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Linker","ReplState") [2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]) (Var 13)])),Func ("Linker","_#updR@ReplState.ndMode") 2 Public (FuncType (TCons ("Linker","ReplState") []) (FuncType (TCons ("Linker","NonDetMode") []) (TCons ("Linker","ReplState") []))) (Rule [1,2] (Case  Flex (Var 1) [Branch (Pattern ("Linker","ReplState") [3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]) (Comb ConsCall ("Linker","ReplState") [Var 3,Var 4,Var 5,Var 6,Var 7,Var 8,Var 9,Var 10,Var 11,Var 12,Var 13,Var 2,Var 15,Var 16,Var 17,Var 18,Var 19,Var 20,Var 21,Var 22,Var 23,Var 24,Var 25,Var 26])])),Func ("Linker","_#selR@ReplState.firstSol") 1 Public (FuncType (TCons ("Linker","ReplState") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Linker","ReplState") [2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]) (Var 14)])),Func ("Linker","_#updR@ReplState.firstSol") 2 Public (FuncType (TCons ("Linker","ReplState") []) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Linker","ReplState") []))) (Rule [1,2] (Case  Flex (Var 1) [Branch (Pattern ("Linker","ReplState") [3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]) (Comb ConsCall ("Linker","ReplState") [Var 3,Var 4,Var 5,Var 6,Var 7,Var 8,Var 9,Var 10,Var 11,Var 12,Var 13,Var 14,Var 2,Var 16,Var 17,Var 18,Var 19,Var 20,Var 21,Var 22,Var 23,Var 24,Var 25,Var 26])])),Func ("Linker","_#selR@ReplState.interactive") 1 Public (FuncType (TCons ("Linker","ReplState") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Linker","ReplState") [2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]) (Var 15)])),Func ("Linker","_#updR@ReplState.interactive") 2 Public (FuncType (TCons ("Linker","ReplState") []) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Linker","ReplState") []))) (Rule [1,2] (Case  Flex (Var 1) [Branch (Pattern ("Linker","ReplState") [3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]) (Comb ConsCall ("Linker","ReplState") [Var 3,Var 4,Var 5,Var 6,Var 7,Var 8,Var 9,Var 10,Var 11,Var 12,Var 13,Var 14,Var 15,Var 2,Var 17,Var 18,Var 19,Var 20,Var 21,Var 22,Var 23,Var 24,Var 25,Var 26])])),Func ("Linker","_#selR@ReplState.showBindings") 1 Public (FuncType (TCons ("Linker","ReplState") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Linker","ReplState") [2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]) (Var 16)])),Func ("Linker","_#updR@ReplState.showBindings") 2 Public (FuncType (TCons ("Linker","ReplState") []) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Linker","ReplState") []))) (Rule [1,2] (Case  Flex (Var 1) [Branch (Pattern ("Linker","ReplState") [3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]) (Comb ConsCall ("Linker","ReplState") [Var 3,Var 4,Var 5,Var 6,Var 7,Var 8,Var 9,Var 10,Var 11,Var 12,Var 13,Var 14,Var 15,Var 16,Var 2,Var 18,Var 19,Var 20,Var 21,Var 22,Var 23,Var 24,Var 25,Var 26])])),Func ("Linker","_#selR@ReplState.showTime") 1 Public (FuncType (TCons ("Linker","ReplState") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Linker","ReplState") [2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]) (Var 17)])),Func ("Linker","_#updR@ReplState.showTime") 2 Public (FuncType (TCons ("Linker","ReplState") []) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Linker","ReplState") []))) (Rule [1,2] (Case  Flex (Var 1) [Branch (Pattern ("Linker","ReplState") [3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]) (Comb ConsCall ("Linker","ReplState") [Var 3,Var 4,Var 5,Var 6,Var 7,Var 8,Var 9,Var 10,Var 11,Var 12,Var 13,Var 14,Var 15,Var 16,Var 17,Var 2,Var 19,Var 20,Var 21,Var 22,Var 23,Var 24,Var 25,Var 26])])),Func ("Linker","_#selR@ReplState.useGhci") 1 Public (FuncType (TCons ("Linker","ReplState") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Linker","ReplState") [2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]) (Var 18)])),Func ("Linker","_#updR@ReplState.useGhci") 2 Public (FuncType (TCons ("Linker","ReplState") []) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Linker","ReplState") []))) (Rule [1,2] (Case  Flex (Var 1) [Branch (Pattern ("Linker","ReplState") [3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]) (Comb ConsCall ("Linker","ReplState") [Var 3,Var 4,Var 5,Var 6,Var 7,Var 8,Var 9,Var 10,Var 11,Var 12,Var 13,Var 14,Var 15,Var 16,Var 17,Var 18,Var 2,Var 20,Var 21,Var 22,Var 23,Var 24,Var 25,Var 26])])),Func ("Linker","_#selR@ReplState.cmpOpts") 1 Public (FuncType (TCons ("Linker","ReplState") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Linker","ReplState") [2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]) (Var 19)])),Func ("Linker","_#updR@ReplState.cmpOpts") 2 Public (FuncType (TCons ("Linker","ReplState") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Linker","ReplState") []))) (Rule [1,2] (Case  Flex (Var 1) [Branch (Pattern ("Linker","ReplState") [3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]) (Comb ConsCall ("Linker","ReplState") [Var 3,Var 4,Var 5,Var 6,Var 7,Var 8,Var 9,Var 10,Var 11,Var 12,Var 13,Var 14,Var 15,Var 16,Var 17,Var 18,Var 19,Var 2,Var 21,Var 22,Var 23,Var 24,Var 25,Var 26])])),Func ("Linker","_#selR@ReplState.ghcOpts") 1 Public (FuncType (TCons ("Linker","ReplState") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Linker","ReplState") [2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]) (Var 20)])),Func ("Linker","_#updR@ReplState.ghcOpts") 2 Public (FuncType (TCons ("Linker","ReplState") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Linker","ReplState") []))) (Rule [1,2] (Case  Flex (Var 1) [Branch (Pattern ("Linker","ReplState") [3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]) (Comb ConsCall ("Linker","ReplState") [Var 3,Var 4,Var 5,Var 6,Var 7,Var 8,Var 9,Var 10,Var 11,Var 12,Var 13,Var 14,Var 15,Var 16,Var 17,Var 18,Var 19,Var 20,Var 2,Var 22,Var 23,Var 24,Var 25,Var 26])])),Func ("Linker","_#selR@ReplState.rtsOpts") 1 Public (FuncType (TCons ("Linker","ReplState") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Linker","ReplState") [2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]) (Var 21)])),Func ("Linker","_#updR@ReplState.rtsOpts") 2 Public (FuncType (TCons ("Linker","ReplState") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Linker","ReplState") []))) (Rule [1,2] (Case  Flex (Var 1) [Branch (Pattern ("Linker","ReplState") [3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]) (Comb ConsCall ("Linker","ReplState") [Var 3,Var 4,Var 5,Var 6,Var 7,Var 8,Var 9,Var 10,Var 11,Var 12,Var 13,Var 14,Var 15,Var 16,Var 17,Var 18,Var 19,Var 20,Var 21,Var 2,Var 23,Var 24,Var 25,Var 26])])),Func ("Linker","_#selR@ReplState.rtsArgs") 1 Public (FuncType (TCons ("Linker","ReplState") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Linker","ReplState") [2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]) (Var 22)])),Func ("Linker","_#updR@ReplState.rtsArgs") 2 Public (FuncType (TCons ("Linker","ReplState") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Linker","ReplState") []))) (Rule [1,2] (Case  Flex (Var 1) [Branch (Pattern ("Linker","ReplState") [3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]) (Comb ConsCall ("Linker","ReplState") [Var 3,Var 4,Var 5,Var 6,Var 7,Var 8,Var 9,Var 10,Var 11,Var 12,Var 13,Var 14,Var 15,Var 16,Var 17,Var 18,Var 19,Var 20,Var 21,Var 22,Var 2,Var 24,Var 25,Var 26])])),Func ("Linker","_#selR@ReplState.quit") 1 Public (FuncType (TCons ("Linker","ReplState") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Linker","ReplState") [2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]) (Var 23)])),Func ("Linker","_#updR@ReplState.quit") 2 Public (FuncType (TCons ("Linker","ReplState") []) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Linker","ReplState") []))) (Rule [1,2] (Case  Flex (Var 1) [Branch (Pattern ("Linker","ReplState") [3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]) (Comb ConsCall ("Linker","ReplState") [Var 3,Var 4,Var 5,Var 6,Var 7,Var 8,Var 9,Var 10,Var 11,Var 12,Var 13,Var 14,Var 15,Var 16,Var 17,Var 18,Var 19,Var 20,Var 21,Var 22,Var 23,Var 2,Var 25,Var 26])])),Func ("Linker","_#selR@ReplState.sourceguis") 1 Public (FuncType (TCons ("Linker","ReplState") []) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("IO","Handle") []]]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Linker","ReplState") [2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]) (Var 24)])),Func ("Linker","_#updR@ReplState.sourceguis") 2 Public (FuncType (TCons ("Linker","ReplState") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("IO","Handle") []]]]) (TCons ("Linker","ReplState") []))) (Rule [1,2] (Case  Flex (Var 1) [Branch (Pattern ("Linker","ReplState") [3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]) (Comb ConsCall ("Linker","ReplState") [Var 3,Var 4,Var 5,Var 6,Var 7,Var 8,Var 9,Var 10,Var 11,Var 12,Var 13,Var 14,Var 15,Var 16,Var 17,Var 18,Var 19,Var 20,Var 21,Var 22,Var 23,Var 24,Var 2,Var 26])])),Func ("Linker","_#selR@ReplState.ghcicomm") 1 Public (FuncType (TCons ("Linker","ReplState") []) (TCons ("Prelude","Maybe") [TCons ("GhciComm","GhciComm") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Linker","ReplState") [2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]) (Var 25)])),Func ("Linker","_#updR@ReplState.ghcicomm") 2 Public (FuncType (TCons ("Linker","ReplState") []) (FuncType (TCons ("Prelude","Maybe") [TCons ("GhciComm","GhciComm") []]) (TCons ("Linker","ReplState") []))) (Rule [1,2] (Case  Flex (Var 1) [Branch (Pattern ("Linker","ReplState") [3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]) (Comb ConsCall ("Linker","ReplState") [Var 3,Var 4,Var 5,Var 6,Var 7,Var 8,Var 9,Var 10,Var 11,Var 12,Var 13,Var 14,Var 15,Var 16,Var 17,Var 18,Var 19,Var 20,Var 21,Var 22,Var 23,Var 24,Var 25,Var 2])])),Func ("Linker","initReplState") 0 Public (TCons ("Linker","ReplState") []) (Rule [] (Comb ConsCall ("Linker","ReplState") [Comb ConsCall ("Prelude","[]") [],Comb ConsCall ("Prelude","[]") [],Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude","[]") []]]]]],Lit (Intc  1),Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","map") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FilePath","</>") [],Comb FuncCall ("Installation","installDir") []],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'b'),Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FilePath","</>") [],Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'b'),Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude","[]") []]]]]],Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FilePath","</>") [],Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb ConsCall ("Prelude",":") [Lit (Charc  'k'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  '2'),Comb ConsCall ("Prelude","[]") []]]]]]],Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb ConsCall ("Prelude","[]") [],Comb ConsCall ("Prelude",":") [Lit (Charc  '%'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  '>'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude","True") [],Comb ConsCall ("Linker","BFS") [],Comb ConsCall ("Prelude","False") [],Comb ConsCall ("Prelude","False") [],Comb ConsCall ("Prelude","True") [],Comb ConsCall ("Prelude","False") [],Comb ConsCall ("Prelude","False") [],Comb ConsCall ("Prelude","[]") [],Comb ConsCall ("Prelude","[]") [],Comb ConsCall ("Prelude","[]") [],Comb ConsCall ("Prelude","[]") [],Comb ConsCall ("Prelude","False") [],Comb ConsCall ("Prelude","[]") [],Comb ConsCall ("Prelude","Nothing") []])),Func ("Linker","loadPaths") 1 Public (FuncType (TCons ("Linker","ReplState") []) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Linker","_#selR@ReplState.importPaths") [Var 1],Comb FuncCall ("Linker","_#selR@ReplState.libPaths") [Var 1]]])),Func ("Linker","mainGoalFile") 0 Public (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (Rule [] (Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude",":") [Lit (Charc  'M'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude",":") [Lit (Charc  'G'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]])),Func ("Linker","writeVerboseInfo") 3 Public (FuncType (TCons ("Linker","ReplState") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []])))) (Rule [1,2,3] (Comb FuncCall ("Utils","unless") [Comb FuncCall ("Prelude","<") [Comb FuncCall ("Linker","_#selR@ReplState.verbose") [Var 1],Var 2],Comb FuncCall ("Prelude",">>") [Comb FuncCall ("Prelude","putStrLn") [Var 3],Comb FuncCall ("IO","hFlush") [Comb FuncCall ("IO","stdout") []]]])),Func ("Linker","readInfoFile") 1 Private (FuncType (TCons ("Linker","ReplState") []) (TCons ("Prelude","IO") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","Bool") []]]])) (Rule [1] (Comb FuncCall ("ReadShowTerm","readQTermFile") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Names","funcInfoFile") [Comb FuncCall ("Linker","_#selR@ReplState.outputSubdir") [Var 1]],Comb FuncCall ("Linker","mainGoalFile") []]])),Func ("Linker","getGoalInfo") 1 Private (FuncType (TCons ("Linker","ReplState") []) (TCons ("Prelude","IO") [TCons ("Prelude","(,)") [TCons ("Prelude","Bool") [],TCons ("Prelude","Bool") []]])) (Rule [1] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Linker","readInfoFile") [Var 1],Comb (FuncPartCall 1) ("Linker","getGoalInfo._#lambda1") [Var 1]])),Func ("Linker","getGoalInfo._#lambda1") 2 Private (FuncType (TCons ("Linker","ReplState") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","Bool") []]]) (TCons ("Prelude","IO") [TCons ("Prelude","(,)") [TCons ("Prelude","Bool") [],TCons ("Prelude","Bool") []]]))) (Rule [1,2] (Let [(3,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Utils","notNull") [],Comb FuncCall ("Prelude","filter") [Comb (FuncPartCall 1) ("Linker","getGoalInfo._#lambda1._#lambda2") [],Var 2]]),(4,Comb FuncCall ("Prelude","snd") [Comb FuncCall ("Prelude","head") [Comb FuncCall ("Prelude","filter") [Comb (FuncPartCall 1) ("Linker","getGoalInfo._#lambda1._#lambda3") [Var 3],Var 2]]])] (Comb FuncCall ("Prelude",">>") [Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Linker","writeVerboseInfo") [Var 1,Lit (Intc  3)],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'I'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]],Comb FuncCall ("Prelude","++") [Case  Rigid (Var 3) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude","[]") []]]]])],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]],Comb FuncCall ("Prelude","++") [Case  Rigid (Var 4) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]])],Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'I'),Comb ConsCall ("Prelude",":") [Lit (Charc  'O'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]],Comb FuncCall ("Prelude","return") [Comb ConsCall ("Prelude","(,)") [Var 3,Var 4]]]))),Func ("Linker","getGoalInfo._#lambda1._#lambda2") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","Bool") []]) (TCons ("Prelude","Bool") [])) (Rule [1] (Comb FuncCall ("Prelude","==") [Comb FuncCall ("Prelude","snd") [Comb FuncCall ("Prelude","fst") [Var 1]],Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude",":") [Lit (Charc  'k'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  '2'),Comb ConsCall ("Prelude",":") [Lit (Charc  'M'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'G'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]])),Func ("Linker","getGoalInfo._#lambda1._#lambda3") 2 Private (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","Bool") []]) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Comb FuncCall ("Prelude","==") [Comb FuncCall ("Prelude","snd") [Comb FuncCall ("Prelude","fst") [Var 2]],Comb FuncCall ("Prelude","++") [Case  Rigid (Var 1) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude","[]") []]])],Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude",":") [Lit (Charc  'k'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  '2'),Comb ConsCall ("Prelude",":") [Lit (Charc  'M'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'G'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]])),Func ("Linker","updateGhcOptions") 1 Private (FuncType (TCons ("Linker","ReplState") []) (TCons ("Prelude","IO") [TCons ("Prelude","(,)") [TCons ("Linker","ReplState") [],TCons ("Prelude","Bool") []]])) (Rule [1] (Let [(2,Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]),(3,Comb FuncCall ("RCFile","rcValue") [Comb FuncCall ("Linker","_#selR@ReplState.rcvars") [Var 1],Var 2]),(4,Comb FuncCall ("Linker","_#selR@ReplState.ghcOpts") [Var 1])] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 3,Var 4]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","return") [Comb ConsCall ("Prelude","(,)") [Var 1,Comb ConsCall ("Prelude","False") []]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude",">>") [Comb FuncCall ("RCFile","setRCProperty") [Var 2,Var 4],Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("RCFile","readRC") [],Comb (FuncPartCall 1) ("Linker","updateGhcOptions._#lambda4") [Var 1]]])]))),Func ("Linker","updateGhcOptions._#lambda4") 2 Private (FuncType (TCons ("Linker","ReplState") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","IO") [TCons ("Prelude","(,)") [TCons ("Linker","ReplState") [],TCons ("Prelude","Bool") []]]))) (Rule [1,2] (Comb FuncCall ("Prelude","return") [Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Linker","_#updR@ReplState.rcvars") [Var 1,Var 2],Comb ConsCall ("Prelude","True") []]])),Func ("Linker","createAndCompileMain") 4 Public (FuncType (TCons ("Linker","ReplState") []) (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","Maybe") [TCons ("Prelude","Int") []]) (TCons ("Prelude","IO") [TCons ("Prelude","(,)") [TCons ("Linker","ReplState") [],TCons ("Linker","MainCompile") []]]))))) (Rule [1,2,3,4] (Let [(5,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FilePath","</>") [],Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FilePath","</>") [],Comb FuncCall ("Linker","_#selR@ReplState.outputSubdir") [Var 1]],Comb ConsCall ("Prelude",":") [Lit (Charc  'M'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]),(6,Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Linker","_#selR@ReplState.useGhci") [Var 1],Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","not") [Var 2],Comb FuncCall ("Prelude","not") [Comb FuncCall ("Linker","_#selR@ReplState.interactive") [Var 1]]]])] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Linker","getGoalInfo") [Var 1],Comb (FuncPartCall 1) ("Linker","createAndCompileMain._#lambda5") [Var 4,Var 3,Var 5,Var 1,Var 6]]))),Func ("Linker","createAndCompileMain._#lambda5") 6 Private (FuncType (TCons ("Prelude","Maybe") [TCons ("Prelude","Int") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Linker","ReplState") []) (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Bool") [],TCons ("Prelude","Bool") []]) (TCons ("Prelude","IO") [TCons ("Prelude","(,)") [TCons ("Linker","ReplState") [],TCons ("Linker","MainCompile") []]]))))))) (Rule [1,2,3,4,5,6] (Case  Flex (Var 6) [Branch (Pattern ("Prelude","(,)") [7,8]) (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Linker","updateGhcOptions") [Var 4],Comb (FuncPartCall 1) ("Linker","createAndCompileMain._#lambda5._#lambda6") [Var 1,Var 7,Var 8,Var 2,Var 3,Var 5]])])),Func ("Linker","createAndCompileMain._#lambda5._#lambda6") 7 Private (FuncType (TCons ("Prelude","Maybe") [TCons ("Prelude","Int") []]) (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Linker","ReplState") [],TCons ("Prelude","Bool") []]) (TCons ("Prelude","IO") [TCons ("Prelude","(,)") [TCons ("Linker","ReplState") [],TCons ("Linker","MainCompile") []]])))))))) (Rule [1,2,3,4,5,6,7] (Case  Flex (Var 7) [Branch (Pattern ("Prelude","(,)") [8,9]) (Comb FuncCall ("Prelude",">>") [Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Prelude","writeFile") [Var 5],Comb FuncCall ("Linker","mainModule") [Var 8,Var 2,Var 3,Var 1]],Let [(10,Comb FuncCall ("Linker","ghcCall") [Var 8,Var 6,Var 9,Var 5])] (Comb FuncCall ("Prelude",">>") [Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Linker","writeVerboseInfo") [Var 8,Lit (Intc  2)],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]],Comb FuncCall ("Prelude","++") [Var 5,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]]],Var 10]]]],Comb FuncCall ("Prelude",">>=") [Case  Rigid (Var 6) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Linker","compileWithGhci") [Var 8,Var 10,Var 4]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("System","system") [Var 10],Comb (FuncPartCall 1) ("Linker","createAndCompileMain._#lambda5._#lambda6._#lambda7") [Var 8]])],Comb (FuncPartCall 1) ("Linker","createAndCompileMain._#lambda5._#lambda6._#lambda8") [Var 2,Var 3]]])])])),Func ("Linker","createAndCompileMain._#lambda5._#lambda6._#lambda7") 2 Private (FuncType (TCons ("Linker","ReplState") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","IO") [TCons ("Prelude","(,)") [TCons ("Linker","ReplState") [],TCons ("Prelude","Int") []]]))) (Rule [1,2] (Comb FuncCall ("Prelude","return") [Comb ConsCall ("Prelude","(,)") [Var 1,Var 2]])),Func ("Linker","createAndCompileMain._#lambda5._#lambda6._#lambda8") 3 Private (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Linker","ReplState") [],TCons ("Prelude","Int") []]) (TCons ("Prelude","IO") [TCons ("Prelude","(,)") [TCons ("Linker","ReplState") [],TCons ("Linker","MainCompile") []]])))) (Rule [1,2,3] (Case  Flex (Var 3) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb FuncCall ("Prelude","return") [Comb ConsCall ("Prelude","(,)") [Var 4,Case  Rigid (Comb FuncCall ("Prelude",">") [Var 5,Lit (Intc  0)]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Linker","MainError") []),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","||") [Var 1,Var 2]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Linker","MainDet") []),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Linker","MainNonDet") [])])]]])])),Func ("Linker","compileWithGhci") 3 Private (FuncType (TCons ("Linker","ReplState") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","(,)") [TCons ("Linker","ReplState") [],TCons ("Prelude","Int") []]])))) (Rule [1,2,3] (Let [(4,Case  Rigid (Comb FuncCall ("Linker","_#selR@ReplState.ghcicomm") [Var 1]) [Branch (Pattern ("Prelude","Nothing") []) (Comb (FuncPartCall 2) ("GhciComm","initGhciComm") []),Branch (Pattern ("Prelude","Just") [5]) (Comb (FuncPartCall 2) ("GhciComm","restartGhciComm") [Var 5])])] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 4,Var 2],Comb FuncCall ("Prelude",">") [Comb FuncCall ("Linker","_#selR@ReplState.verbose") [Var 1],Lit (Intc  2)]],Comb (FuncPartCall 1) ("Linker","compileWithGhci._#lambda10") [Var 3,Var 1]]))),Func ("Linker","compileWithGhci._#lambda10") 3 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Linker","ReplState") []) (FuncType (TCons ("GhciComm","GhciComm") []) (TCons ("Prelude","IO") [TCons ("Prelude","(,)") [TCons ("Linker","ReplState") [],TCons ("Prelude","Int") []]])))) (Rule [1,2,3] (Comb FuncCall ("Prelude",">>") [Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Linker","writeVerboseInfo") [Var 2,Lit (Intc  1)],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'E'),Comb ConsCall ("Prelude",":") [Lit (Charc  'v'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Utils","strip") [],Var 1]]],Comb FuncCall ("Prelude",">>") [Comb FuncCall ("GhciComm","evalMainCmd") [Var 3,Comb FuncCall ("Linker","_#selR@ReplState.showTime") [Var 2]],Comb FuncCall ("Prelude","return") [Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Linker","_#updR@ReplState.ghcicomm") [Var 2,Comb ConsCall ("Prelude","Just") [Var 3]],Lit (Intc  0)]]]])),Func ("Linker","ghcCall") 4 Private (FuncType (TCons ("Linker","ReplState") []) (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (Rule [1,2,3,4] (Let [(5,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","elem") [Comb FuncCall ("Linker","_#selR@ReplState.idSupply") [Var 1]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude","[]") []]]]]],Comb ConsCall ("Prelude","[]") []]]]),(6,Case  Rigid (Comb FuncCall ("Linker","_#selR@ReplState.ndMode") [Var 1]) [Branch (Pattern ("Linker","Par") [7]) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Linker","DFS") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Linker","BFS") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Linker","IDS") [8]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Linker","PrDFS") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Linker","PrtChoices") [9]) (Comb ConsCall ("Prelude","False") [])]),(10,Comb FuncCall ("Prelude","||") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Utils","notNull") [],Comb FuncCall ("Linker","_#selR@ReplState.rtsOpts") [Var 1]],Var 6]),(11,Case  Rigid (Comb FuncCall ("Installation","installGlobal") []) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Prelude","flip") [Comb FuncCall ("FilePath","</>") [],Comb FuncCall ("Linker","_#selR@ReplState.outputSubdir") [Var 1]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Linker","_#selR@ReplState.importPaths") [Var 1]]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FilePath","</>") [],Comb FuncCall ("Linker","_#selR@ReplState.kics2Home") [Var 1]],Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FilePath","</>") [],Comb FuncCall ("Linker","_#selR@ReplState.kics2Home") [Var 1]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FilePath","</>") [],Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]]],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude","[]") []]]]]]]]],Comb FuncCall ("Linker","_#selR@ReplState.idSupply") [Var 1]]]],Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Prelude","flip") [Comb FuncCall ("FilePath","</>") [],Comb FuncCall ("Linker","_#selR@ReplState.outputSubdir") [Var 1]],Comb FuncCall ("Linker","loadPaths") [Var 1]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])] (Comb FuncCall ("Prelude","$") [Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","unwords") [],Comb (FuncPartCall 1) ("Prelude","filter") [Comb FuncCall ("Utils","notNull") []]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("Installation","ghcExec") [],Comb ConsCall ("Prelude",":") [Comb FuncCall ("Installation","ghcOptions") [],Comb ConsCall ("Prelude",":") [Case  Rigid (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Linker","_#selR@ReplState.optim") [Var 1],Comb FuncCall ("Prelude","not") [Var 2]]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  'O'),Comb ConsCall ("Prelude",":") [Lit (Charc  '2'),Comb ConsCall ("Prelude","[]") []]]]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","[]") [])],Comb ConsCall ("Prelude",":") [Case  Rigid (Var 2) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'v'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'k'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]])],Comb ConsCall ("Prelude",":") [Case  Rigid (Comb FuncCall ("Prelude","<") [Comb FuncCall ("Linker","_#selR@ReplState.verbose") [Var 1],Lit (Intc  2)]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  'v'),Comb ConsCall ("Prelude",":") [Lit (Charc  '0'),Comb ConsCall ("Prelude","[]") []]]]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  'v'),Comb ConsCall ("Prelude",":") [Lit (Charc  '1'),Comb ConsCall ("Prelude","[]") []]]])],Comb ConsCall ("Prelude",":") [Case  Rigid (Var 5) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'k'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","[]") [])],Comb ConsCall ("Prelude",":") [Case  Rigid (Var 6) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","[]") [])],Comb ConsCall ("Prelude",":") [Case  Rigid (Var 10) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude","[]") []]]]]]]]]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","[]") [])],Comb ConsCall ("Prelude",":") [Case  Rigid (Var 3) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","[]") [])],Comb ConsCall ("Prelude",":") [Comb FuncCall ("Linker","_#selR@ReplState.ghcOpts") [Var 1],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  'X'),Comb ConsCall ("Prelude",":") [Lit (Charc  'M'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'T'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  'X'),Comb ConsCall ("Prelude",":") [Lit (Charc  'F'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'b'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'I'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  'X'),Comb ConsCall ("Prelude",":") [Lit (Charc  'R'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  'R'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("List","intercalate") [Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude","[]") []],Var 11]],Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]))),Func ("Linker","mainModule") 4 Private (FuncType (TCons ("Linker","ReplState") []) (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Maybe") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (Rule [1,2,3,4] (Let [(5,Case  Rigid (Comb FuncCall ("RCFile","rcValue") [Comb FuncCall ("Linker","_#selR@ReplState.rcvars") [Var 1],Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]) [Branch (Pattern ("Prelude",":") [6,7]) (Let [(8,Var 6)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 8,Lit (Charc  'y')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 7) [Branch (Pattern ("Prelude",":") [9,10]) (Let [(11,Var 9)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 11,Lit (Charc  'e')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 10) [Branch (Pattern ("Prelude",":") [12,13]) (Let [(14,Var 12)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 14,Lit (Charc  's')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 13) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Linker","MoreYes") []),Branch (Pattern ("Prelude",":") [15,16]) (Comb ConsCall ("Linker","MoreYes") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Linker","MoreYes") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Linker","MoreYes") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Linker","MoreYes") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Linker","MoreYes") [])]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 8,Lit (Charc  'n')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 7) [Branch (Pattern ("Prelude",":") [17,18]) (Let [(19,Var 17)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 19,Lit (Charc  'o')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 18) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Linker","MoreNo") []),Branch (Pattern ("Prelude",":") [20,21]) (Comb ConsCall ("Linker","MoreYes") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Linker","MoreYes") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Linker","MoreYes") [])]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 8,Lit (Charc  'a')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 7) [Branch (Pattern ("Prelude",":") [22,23]) (Let [(24,Var 22)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 24,Lit (Charc  'l')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 23) [Branch (Pattern ("Prelude",":") [25,26]) (Let [(27,Var 25)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 27,Lit (Charc  'l')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 26) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Linker","MoreAll") []),Branch (Pattern ("Prelude",":") [28,29]) (Comb ConsCall ("Linker","MoreYes") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Linker","MoreYes") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Linker","MoreYes") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Linker","MoreYes") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Linker","MoreYes") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Linker","MoreYes") [])])])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Linker","MoreYes") [])]),(30,Case  Rigid (Comb FuncCall ("Linker","_#selR@ReplState.interactive") [Var 1]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Linker","Interactive") [Var 5]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Linker","_#selR@ReplState.firstSol") [Var 1]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Linker","One") []),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Linker","All") []),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])] (Comb FuncCall ("Prelude","unlines") [Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'M'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]],Comb ConsCall ("Prelude",":") [Case  Rigid (Comb FuncCall ("Linker","_#selR@ReplState.interactive") [Var 1]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'M'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'L'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","[]") [])],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'B'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'S'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'E'),Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]],Comb ConsCall ("Prelude",":") [Case  Rigid (Comb FuncCall ("Prelude","==") [Var 4,Comb ConsCall ("Prelude","Nothing") []]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]])],Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FilePath","dropExtension") [],Comb FuncCall ("Linker","mainGoalFile") []]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","[]") [],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'I'),Comb ConsCall ("Prelude",":") [Lit (Charc  'O'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("Linker","mainExpr") [Comb ConsCall ("Prelude",":") [Lit (Charc  'k'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  '2'),Comb ConsCall ("Prelude",":") [Lit (Charc  'M'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'G'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]],Var 2,Var 3,Comb FuncCall ("Linker","_#selR@ReplState.ndMode") [Var 1],Var 30,Var 4],Comb ConsCall ("Prelude","[]") []]]]]]]]]]]))),Func ("Linker","mainExpr") 6 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Linker","NonDetMode") []) (FuncType (TCons ("Linker","EvalMode") []) (FuncType (TCons ("Prelude","Maybe") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))))) (Rule [1,2,3,4,5,6] (Let [(7,Case  Rigid (Var 2) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude","[]") []]]]]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude","[]") []]]]]])]),(8,Comb FuncCall ("Prelude","maybe") [Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude","[]") []]]]]],Comb (FuncPartCall 1) ("Linker","mainExpr.printWithBindings.77") [],Var 6]),(9,Case  Rigid (Var 5) [Branch (Pattern ("Linker","All") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Linker","One") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  '1'),Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Linker","Interactive") [10]) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude","show") [Var 10]])]),(11,Case  Rigid (Comb FuncCall ("Prelude","&&") [Var 3,Var 2]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'v'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'D'),Comb ConsCall ("Prelude",":") [Lit (Charc  'I'),Comb ConsCall ("Prelude",":") [Lit (Charc  'O'),Comb ConsCall ("Prelude","[]") []]]]]]]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Var 2) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'v'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'D'),Comb ConsCall ("Prelude","[]") []]]]]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Var 3) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'v'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'I'),Comb ConsCall ("Prelude",":") [Lit (Charc  'O'),Comb ConsCall ("Prelude","[]") []]]]]]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 4) [Branch (Pattern ("Linker","PrDFS") []) (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Linker","mainExpr.searchExpr.77") [Var 8],Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude","[]") []]]]]]]),Branch (Pattern ("Linker","DFS") []) (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Linker","mainExpr.searchExpr.77") [Var 8],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'D'),Comb ConsCall ("Prelude",":") [Lit (Charc  'F'),Comb ConsCall ("Prelude",":") [Lit (Charc  'S'),Comb ConsCall ("Prelude","[]") []]]]]]]]],Var 9]]),Branch (Pattern ("Linker","BFS") []) (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Linker","mainExpr.searchExpr.77") [Var 8],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'B'),Comb ConsCall ("Prelude",":") [Lit (Charc  'F'),Comb ConsCall ("Prelude",":") [Lit (Charc  'S'),Comb ConsCall ("Prelude","[]") []]]]]]]]],Var 9]]),Branch (Pattern ("Linker","IDS") [12]) (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Linker","mainExpr.searchExpr.77") [Var 8],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'I'),Comb ConsCall ("Prelude",":") [Lit (Charc  'D'),Comb ConsCall ("Prelude",":") [Lit (Charc  'S'),Comb ConsCall ("Prelude","[]") []]]]]]]]],Comb FuncCall ("Prelude","++") [Var 9,Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb FuncCall ("Prelude","show") [Var 12]]]]]),Branch (Pattern ("Linker","Par") [13]) (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Linker","mainExpr.searchExpr.77") [Var 8],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude","[]") []]]]]]]]],Var 9]]),Branch (Pattern ("Linker","PrtChoices") [14]) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'T'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]],Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb FuncCall ("Prelude","show") [Var 14]]])]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])])] (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '='),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb FuncCall ("Prelude","++") [Var 11,Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb FuncCall ("Prelude","++") [Var 7,Var 1]]]]))),Func ("Linker","mainExpr.printWithBindings.77") 1 Private (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb ConsCall ("Prelude",":") [Lit (Charc  '\\'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb ConsCall ("Prelude",":") [Lit (Charc  'O'),Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude",":") [Lit (Charc  'T'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","show") [Comb FuncCall ("Prelude","+") [Var 1,Lit (Intc  2)]],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","concatMap") [Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'v'),Comb ConsCall ("Prelude","[]") []]]],Comb (FuncPartCall 1) ("Prelude","show") []]],Comb FuncCall ("Prelude","enumFromTo") [Lit (Intc  1),Var 1]],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  '>'),Comb ConsCall ("Prelude","[]") []]]]]],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'W'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'B'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb ConsCall ("Prelude",":") [Lit (Charc  'z'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '['),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],Comb FuncCall ("Prelude","++") [Comb FuncCall ("List","intercalate") [Comb ConsCall ("Prelude",":") [Lit (Charc  ','),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","map") [Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'v'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb (FuncPartCall 1) ("Prelude","show") []],Comb FuncCall ("Prelude","enumFromTo") [Lit (Intc  1),Var 1]]],Comb ConsCall ("Prelude",":") [Lit (Charc  ']'),Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]])),Func ("Linker","mainExpr.searchExpr.77") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1,2] (Comb FuncCall ("Prelude","++") [Var 2,Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Var 1]]))] []