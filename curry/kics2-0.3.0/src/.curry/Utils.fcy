Prog "Utils" ["Char","Prelude"] [] [Func ("Utils","unless") 2 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","IO") [TCons ("Prelude","()") []]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []]))) (Rule [1,2] (Case  Rigid (Var 1) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","done") []),Branch (Pattern ("Prelude","False") []) (Var 2)])),Func ("Utils","notNull") 0 Public (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","Bool") [])) (Rule [] (Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","not") [],Comb (FuncPartCall 1) ("Prelude","null") []])),Func ("Utils","when") 2 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","IO") [TCons ("Prelude","()") []]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []]))) (Rule [1,2] (Case  Rigid (Var 1) [Branch (Pattern ("Prelude","True") []) (Var 2),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","done") [])])),Func ("Utils","strip") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Comb FuncCall ("Prelude",".") [Comb FuncCall ("Prelude","reverse") [],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","dropWhile") [Comb (FuncPartCall 1) ("Char","isSpace") []],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Prelude","reverse") [],Comb (FuncPartCall 1) ("Prelude","dropWhile") [Comb (FuncPartCall 1) ("Char","isSpace") []]]]]))] []