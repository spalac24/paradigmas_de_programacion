Prog "Compile" ["AbstractHaskell","AbstractHaskellGoodies","AbstractHaskellPrinter","AnnotatedFlatCurryGoodies","Base","Char","CompilerOpts","DefaultPolymorphic","Directory","EliminateCond","FileGoodies","FilePath","Files","FiniteMap","FlatCurry","FlatCurry2AbstractHaskell","FlatCurryGoodies","Inference","LiftCase","List","Maybe","Message","ModuleDeps","Names","Prelude","ReadShowTerm","SimpleMake","TransFunctions","TransTypes","Utils"] [] [Func ("Compile","main") 0 Public (TCons ("Prelude","IO") [TCons ("Prelude","()") []]) (Rule [] (Var 0)),Func ("Compile","build") 2 Public (FuncType (TCons ("CompilerOpts","Options") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []]))) (Rule [] (Var 0)),Func ("Compile","locateCurryFile") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","Maybe") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Compile","makeModule") 3 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("FlatCurry","Prog") []]]]) (FuncType (TCons ("TransFunctions","State") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("FlatCurry","Prog") []]],TCons ("Prelude","Int") []]) (TCons ("Prelude","IO") [TCons ("TransFunctions","State") []])))) (Rule [] (Var 0)),Func ("Compile","storeAnalysis") 3 Public (FuncType (TCons ("TransFunctions","State") []) (FuncType (TCons ("Prelude","(,,,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]],TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Base","NDClass") []],TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Base","HOClass") []],TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Base","HOClass") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []])))) (Rule [] (Var 0)),Func ("Compile","loadAnalysis") 3 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("TransFunctions","State") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("FlatCurry","Prog") []]],TCons ("Prelude","Int") []]) (TCons ("Prelude","IO") [TCons ("TransFunctions","State") []])))) (Rule [] (Var 0)),Func ("Compile","compileModule") 4 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("FlatCurry","Prog") []]]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("TransFunctions","State") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("FlatCurry","Prog") []]],TCons ("Prelude","Int") []]) (TCons ("Prelude","IO") [TCons ("TransFunctions","State") []]))))) (Rule [] (Var 0)),Func ("Compile","extractFuncInfos") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("AbstractHaskell","FuncDecl") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","Bool") []]])) (Rule [] (Var 0)),Func ("Compile","patchCurryTypeClassIntoPrelude") 1 Public (FuncType (TCons ("AbstractHaskell","Prog") []) (TCons ("AbstractHaskell","Prog") [])) (Rule [] (Var 0)),Func ("Compile","compMessage") 5 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))))) (Rule [] (Var 0)),Func ("Compile","filterPrelude") 2 Public (FuncType (TCons ("CompilerOpts","Options") []) (FuncType (TCons ("FlatCurry","Prog") []) (TCons ("FlatCurry","Prog") []))) (Rule [] (Var 0)),Func ("Compile","integrateExternals") 3 Public (FuncType (TCons ("CompilerOpts","Options") []) (FuncType (TCons ("AbstractHaskell","Prog") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])))) (Rule [] (Var 0)),Func ("Compile","lookupExternals") 2 Public (FuncType (TCons ("CompilerOpts","Options") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]))) (Rule [] (Var 0)),Func ("Compile","splitExternals") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Compile","dump") 4 Public (FuncType (TCons ("CompilerOpts","DumpFormat") []) (FuncType (TCons ("CompilerOpts","Options") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []]))))) (Rule [] (Var 0)),Func ("Compile","rename") 1 Public (FuncType (TCons ("FlatCurry","Prog") []) (TCons ("FlatCurry","Prog") [])) (Rule [] (Var 0))] []