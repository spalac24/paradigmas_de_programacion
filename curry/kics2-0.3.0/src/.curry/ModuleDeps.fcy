Prog "ModuleDeps" ["CompilerOpts","Directory","Distribution","FileGoodies","FilePath","FiniteMap","FlatCurry","Function","List","Maybe","Prelude","SCC","Time","Files"] [TypeSyn ("ModuleDeps","ModuleIdent") Public [] (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]),TypeSyn ("ModuleDeps","FilePath") Private [] (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]),TypeSyn ("ModuleDeps","Source") Public [] (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("FlatCurry","Prog") []]),TypeSyn ("ModuleDeps","SourceEnv") Private [] (TCons ("FiniteMap","FM") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","Maybe") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("FlatCurry","Prog") []]]])] [Func ("ModuleDeps","deps") 2 Public (FuncType (TCons ("CompilerOpts","Options") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("FlatCurry","Prog") []]]],TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]]))) (Rule [1,2] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("ModuleDeps","sourceDeps") [Var 1,Comb FuncCall ("Prelude","$") [Comb FuncCall ("FilePath","dropExtension") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FilePath","takeBaseName") [],Var 2]],Var 2,Comb FuncCall ("FiniteMap","emptyFM") [Comb (FuncPartCall 2) ("Prelude","<") []]],Comb (FuncPartCall 1) ("ModuleDeps","deps._#lambda1") [Var 2]])),Func ("ModuleDeps","deps._#lambda1") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("FiniteMap","FM") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","Maybe") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("FlatCurry","Prog") []]]]) (TCons ("Prelude","IO") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("FlatCurry","Prog") []]]],TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]]))) (Rule [1,2] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("ModuleDeps","isFlatCurryValid") [Var 1],Comb (FuncPartCall 1) ("ModuleDeps","deps._#lambda1._#lambda2") [Var 2]])),Func ("ModuleDeps","deps._#lambda1._#lambda2") 2 Private (FuncType (TCons ("FiniteMap","FM") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","Maybe") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("FlatCurry","Prog") []]]]) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","IO") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("FlatCurry","Prog") []]]],TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]]))) (Rule [1,2] (Let [(3,Comb FuncCall ("ModuleDeps","filterMissing") [Var 1]),(4,Comb FuncCall ("ModuleDeps","deps._#lambda1._#lambda2._#selFP5#mods1") [Var 3]),(5,Comb FuncCall ("ModuleDeps","deps._#lambda1._#lambda2._#selFP6#errs1") [Var 3]),(6,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("ModuleDeps","flattenDeps") [],Var 4]),(7,Comb FuncCall ("ModuleDeps","deps._#lambda1._#lambda2._#selFP3#mods2") [Var 6]),(8,Comb FuncCall ("ModuleDeps","deps._#lambda1._#lambda2._#selFP4#errs2") [Var 6])] (Comb FuncCall ("Prelude","return") [Comb ConsCall ("Prelude","(,)") [Var 7,Case  Rigid (Var 2) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","++") [Var 5,Var 8]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'b'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]],Comb ConsCall ("Prelude","[]") []])]]]))),Func ("ModuleDeps","deps._#lambda1._#lambda2._#selFP5#mods1") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("FlatCurry","Prog") []]]],TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("FlatCurry","Prog") []]]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("ModuleDeps","deps._#lambda1._#lambda2._#selFP6#errs1") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("FlatCurry","Prog") []]]],TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("ModuleDeps","deps._#lambda1._#lambda2._#selFP3#mods2") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("FlatCurry","Prog") []]]],TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("FlatCurry","Prog") []]]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("ModuleDeps","deps._#lambda1._#lambda2._#selFP4#errs2") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("FlatCurry","Prog") []]]],TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("ModuleDeps","isFlatCurryValid") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","Bool") []])) (Rule [1] (Let [(2,Comb FuncCall ("FlatCurry","flatCurryFileName") [Var 1])] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Directory","doesFileExist") [Var 1],Comb (FuncPartCall 1) ("ModuleDeps","isFlatCurryValid._#lambda3") [Var 2,Var 1]]))),Func ("ModuleDeps","isFlatCurryValid._#lambda3") 3 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","IO") [TCons ("Prelude","Bool") []])))) (Rule [1,2,3] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Directory","doesFileExist") [Var 1],Comb (FuncPartCall 1) ("ModuleDeps","isFlatCurryValid._#lambda3._#lambda4") [Var 3,Var 1,Var 2]])),Func ("ModuleDeps","isFlatCurryValid._#lambda3._#lambda4") 4 Private (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","IO") [TCons ("Prelude","Bool") []]))))) (Rule [1,2,3,4] (Case  Rigid (Comb FuncCall ("Prelude","&&") [Var 1,Var 4]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Directory","getModificationTime") [Var 3],Comb (FuncPartCall 1) ("ModuleDeps","isFlatCurryValid._#lambda3._#lambda4._#lambda5") [Var 2]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","return") [Comb ConsCall ("Prelude","False") []])])),Func ("ModuleDeps","isFlatCurryValid._#lambda3._#lambda4._#lambda5") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Time","ClockTime") []) (TCons ("Prelude","IO") [TCons ("Prelude","Bool") []]))) (Rule [1,2] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Directory","getModificationTime") [Var 1],Comb (FuncPartCall 1) ("ModuleDeps","isFlatCurryValid._#lambda3._#lambda4._#lambda5._#lambda6") [Var 2]])),Func ("ModuleDeps","isFlatCurryValid._#lambda3._#lambda4._#lambda5._#lambda6") 2 Private (FuncType (TCons ("Time","ClockTime") []) (FuncType (TCons ("Time","ClockTime") []) (TCons ("Prelude","IO") [TCons ("Prelude","Bool") []]))) (Rule [1,2] (Comb FuncCall ("Prelude","return") [Comb FuncCall ("Prelude",">=") [Var 2,Var 1]])),Func ("ModuleDeps","moduleDeps") 3 Private (FuncType (TCons ("CompilerOpts","Options") []) (FuncType (TCons ("FiniteMap","FM") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","Maybe") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("FlatCurry","Prog") []]]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("FiniteMap","FM") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","Maybe") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("FlatCurry","Prog") []]]]])))) (Rule [1,2,3] (Case  Rigid (Comb FuncCall ("FiniteMap","lookupFM") [Var 2,Var 3]) [Branch (Pattern ("Prelude","Just") [4]) (Comb FuncCall ("Prelude","return") [Var 2]),Branch (Pattern ("Prelude","Nothing") []) (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("ModuleDeps","lookupModule") [Var 1,Var 3],Comb (FuncPartCall 1) ("ModuleDeps","moduleDeps._#lambda8") [Var 3,Var 2,Var 1]])])),Func ("ModuleDeps","moduleDeps._#lambda8") 4 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("FiniteMap","FM") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","Maybe") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("FlatCurry","Prog") []]]]) (FuncType (TCons ("CompilerOpts","Options") []) (FuncType (TCons ("Prelude","Maybe") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","IO") [TCons ("FiniteMap","FM") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","Maybe") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("FlatCurry","Prog") []]]]]))))) (Rule [1,2,3,4] (Case  Rigid (Var 4) [Branch (Pattern ("Prelude","Nothing") []) (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Prelude","return") [],Comb FuncCall ("FiniteMap","addToFM") [Var 2,Var 1,Comb ConsCall ("Prelude","Nothing") []]]),Branch (Pattern ("Prelude","Just") [5]) (Comb FuncCall ("ModuleDeps","sourceDeps") [Var 3,Var 1,Var 5,Var 2])])),Func ("ModuleDeps","lookupModule") 2 Private (FuncType (TCons ("CompilerOpts","Options") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","Maybe") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Let [(3,Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("CompilerOpts","_#selR@Options.optImportPaths") [Var 1]])] (Comb FuncCall ("FileGoodies","lookupFileInPath") [Var 2,Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude","[]") []]]]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("FilePath","dropTrailingPathSeparator") [],Var 3]]))),Func ("ModuleDeps","sourceDeps") 4 Private (FuncType (TCons ("CompilerOpts","Options") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("FiniteMap","FM") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","Maybe") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("FlatCurry","Prog") []]]]) (TCons ("Prelude","IO") [TCons ("FiniteMap","FM") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","Maybe") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("FlatCurry","Prog") []]]]]))))) (Rule [1,2,3,4] (Let [(5,Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("CompilerOpts","_#selR@Options.optImportPaths") [Var 1]]),(6,Comb FuncCall ("Prelude","<") [Comb FuncCall ("CompilerOpts","_#selR@Options.optVerbosity") [Var 1],Comb ConsCall ("CompilerOpts","VerbFrontend") []])] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("FlatCurry","readFlatCurryWithParseOptions") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FilePath","dropExtension") [],Var 3]],Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Distribution","setFullPath") [Var 5],Comb FuncCall ("Distribution","setQuiet") [Var 6,Comb FuncCall ("Distribution","defaultParams") []]]],Comb (FuncPartCall 1) ("ModuleDeps","sourceDeps._#lambda10") [Var 3,Var 2,Var 4,Var 1]]))),Func ("ModuleDeps","sourceDeps._#lambda10") 5 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("FiniteMap","FM") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","Maybe") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("FlatCurry","Prog") []]]]) (FuncType (TCons ("CompilerOpts","Options") []) (FuncType (TCons ("FlatCurry","Prog") []) (TCons ("Prelude","IO") [TCons ("FiniteMap","FM") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","Maybe") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("FlatCurry","Prog") []]]]])))))) (Rule [1,2,3,4,5] (Case  Flex (Var 5) [Branch (Pattern ("FlatCurry","Prog") [6,7,8,9,10]) (Comb FuncCall ("Prelude","foldIO") [Comb (FuncPartCall 2) ("ModuleDeps","moduleDeps") [Var 4],Comb FuncCall ("FiniteMap","addToFM") [Var 3,Var 2,Comb ConsCall ("Prelude","Just") [Comb ConsCall ("Prelude","(,)") [Var 1,Var 5]]],Var 7])])),Func ("ModuleDeps","filterMissing") 1 Private (FuncType (TCons ("FiniteMap","FM") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","Maybe") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("FlatCurry","Prog") []]]]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("FlatCurry","Prog") []]]],TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Let [(2,Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("List","partition") [Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Maybe","isJust") [],Comb (FuncPartCall 1) ("Prelude","snd") []]],Comb FuncCall ("FiniteMap","fmToList") [Var 1]]),(3,Comb FuncCall ("ModuleDeps","filterMissing._#selFP8#present") [Var 2]),(4,Comb FuncCall ("ModuleDeps","filterMissing._#selFP9#missing") [Var 2]),(5,Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("ModuleDeps","filterMissing._#lambda11") [],Var 4])] (Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Function","second") [Comb (FuncPartCall 1) ("Maybe","fromJust") []],Var 3],Var 5]))),Func ("ModuleDeps","filterMissing._#selFP8#present") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","Maybe") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("FlatCurry","Prog") []]]]],TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","Maybe") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("FlatCurry","Prog") []]]]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","Maybe") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("FlatCurry","Prog") []]]]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("ModuleDeps","filterMissing._#selFP9#missing") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","Maybe") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("FlatCurry","Prog") []]]]],TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","Maybe") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("FlatCurry","Prog") []]]]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","Maybe") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("FlatCurry","Prog") []]]]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("ModuleDeps","filterMissing._#lambda11") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","Maybe") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("FlatCurry","Prog") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'M'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb FuncCall ("Prelude","++") [Var 2,Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'b'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]])])),Func ("ModuleDeps","flattenDeps") 0 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("FlatCurry","Prog") []]]]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("FlatCurry","Prog") []]]],TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Let [(1,Comb FuncCall ("SCC","scc") [Comb (FuncPartCall 1) ("ModuleDeps","flattenDeps.modules.48") [],Comb (FuncPartCall 1) ("ModuleDeps","flattenDeps.imports.48") []]),(2,Comb (FuncPartCall 1) ("Prelude","foldr") [Comb (FuncPartCall 2) ("ModuleDeps","flattenDeps.checkdep.47") [],Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","[]") [],Comb ConsCall ("Prelude","[]") []]])] (Comb FuncCall ("Prelude",".") [Var 2,Var 1]))),Func ("ModuleDeps","flattenDeps.modules.48") 1 Private (FuncType (TCons ("Prelude","(,)") [TVar 0,TVar 1]) (TCons ("Prelude","[]") [TVar 0])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude","[]") []])])),Func ("ModuleDeps","flattenDeps.imports.48") 1 Private (FuncType (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","(,)") [TVar 1,TCons ("FlatCurry","Prog") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude","(,)") [4,5]) (Case  Flex (Var 5) [Branch (Pattern ("FlatCurry","Prog") [6,7,8,9,10]) (Var 7)])])])),Func ("ModuleDeps","flattenDeps.cyclicError.47") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Let [(2,Comb FuncCall ("ModuleDeps","flattenDeps.cyclicError.47.splitLast.71") [Var 1]),(3,Comb FuncCall ("ModuleDeps","flattenDeps.cyclicError.47._#selFP14#inits") [Var 2]),(4,Comb FuncCall ("ModuleDeps","flattenDeps.cyclicError.47._#selFP15#last") [Var 2])] (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'b'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],Comb FuncCall ("Prelude","++") [Comb FuncCall ("List","intercalate") [Comb ConsCall ("Prelude",":") [Lit (Charc  ','),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]],Var 3],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]],Var 4]]]))),Func ("ModuleDeps","flattenDeps.cyclicError.47.splitLast.71") 1 Private (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TVar 0])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","[]") [],Var 2]),Branch (Pattern ("Prelude",":") [4,5]) (Let [(6,Comb FuncCall ("ModuleDeps","flattenDeps.cyclicError.47.splitLast.71") [Comb ConsCall ("Prelude",":") [Var 4,Var 5]]),(7,Comb FuncCall ("ModuleDeps","flattenDeps.cyclicError.47.splitLast.71._#selFP12#xs") [Var 6]),(8,Comb FuncCall ("ModuleDeps","flattenDeps.cyclicError.47.splitLast.71._#selFP13#z") [Var 6])] (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Var 2,Var 7],Var 8]))])])),Func ("ModuleDeps","flattenDeps.cyclicError.47.splitLast.71._#selFP12#xs") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 122],TVar 122]) (TCons ("Prelude","[]") [TVar 122])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("ModuleDeps","flattenDeps.cyclicError.47.splitLast.71._#selFP13#z") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 122],TVar 122]) (TVar 122)) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("ModuleDeps","flattenDeps.cyclicError.47._#selFP14#inits") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("ModuleDeps","flattenDeps.cyclicError.47._#selFP15#last") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("ModuleDeps","flattenDeps.checkdep.47") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TVar 0]]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TVar 0]],TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TVar 0]],TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb ConsCall ("Prelude","(,)") [Var 3,Var 4])]),Branch (Pattern ("Prelude",":") [5,6]) (Case  Flex (Var 6) [Branch (Pattern ("Prelude","[]") []) (Case  Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [7,8]) (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Var 5,Var 7],Var 8])]),Branch (Pattern ("Prelude",":") [9,10]) (Case  Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [11,12]) (Comb ConsCall ("Prelude","(,)") [Var 11,Comb ConsCall ("Prelude",":") [Comb FuncCall ("ModuleDeps","flattenDeps.cyclicError.47") [Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Prelude","fst") [],Var 1]],Var 12]])])])]))] []