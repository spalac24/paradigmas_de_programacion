Prog "AbstractHaskellGoodies" ["AbstractHaskell","Char","Prelude"] [] [Func ("AbstractHaskellGoodies","lowerFirst") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Comb ConsCall ("Prelude",":") [Comb FuncCall ("Char","toLower") [Var 2],Var 3]),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") [])])),Func ("AbstractHaskellGoodies","applyF") 2 Public (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("AbstractHaskell","Expr") []]) (TCons ("AbstractHaskell","Expr") []))) (Rule [1,2] (Comb FuncCall ("Prelude","foldl") [Comb (ConsPartCall 2) ("AbstractHaskell","Apply") [],Comb ConsCall ("AbstractHaskell","Symbol") [Var 1],Var 2])),Func ("AbstractHaskellGoodies","constF") 1 Public (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("AbstractHaskell","Expr") [])) (Rule [1] (Comb FuncCall ("AbstractHaskellGoodies","applyF") [Var 1,Comb ConsCall ("Prelude","[]") []])),Func ("AbstractHaskellGoodies","applyV") 2 Public (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("AbstractHaskell","Expr") []]) (TCons ("AbstractHaskell","Expr") []))) (Rule [1,2] (Comb FuncCall ("Prelude","foldl") [Comb (ConsPartCall 2) ("AbstractHaskell","Apply") [],Comb ConsCall ("AbstractHaskell","Var") [Var 1],Var 2])),Func ("AbstractHaskellGoodies","tuplePat") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("AbstractHaskell","Pattern") []]) (TCons ("AbstractHaskell","Pattern") [])) (Rule [1] (Let [(2,Comb FuncCall ("Prelude","length") [Var 1])] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 2,Lit (Intc  0)]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("AbstractHaskell","PComb") [Comb FuncCall ("AbstractHaskellGoodies","pre") [Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 2,Lit (Intc  1)]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","head") [Var 1]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("AbstractHaskell","PComb") [Comb FuncCall ("AbstractHaskellGoodies","pre") [Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","take") [Comb FuncCall ("Prelude","-") [Var 2,Lit (Intc  1)],Comb FuncCall ("Prelude","repeat") [Lit (Charc  ',')]],Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude","[]") []]]]],Var 1]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])]))),Func ("AbstractHaskellGoodies","tupleExpr") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("AbstractHaskell","Expr") []]) (TCons ("AbstractHaskell","Expr") [])) (Rule [1] (Let [(2,Comb FuncCall ("Prelude","length") [Var 1])] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 2,Lit (Intc  0)]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("AbstractHaskellGoodies","constF") [Comb FuncCall ("AbstractHaskellGoodies","pre") [Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude","[]") []]]]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 2,Lit (Intc  1)]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","head") [Var 1]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("AbstractHaskellGoodies","applyF") [Comb FuncCall ("AbstractHaskellGoodies","pre") [Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","take") [Comb FuncCall ("Prelude","-") [Var 2,Lit (Intc  1)],Comb FuncCall ("Prelude","repeat") [Lit (Charc  ',')]],Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude","[]") []]]]],Var 1]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])]))),Func ("AbstractHaskellGoodies","tuplePattern") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("AbstractHaskell","Pattern") []]) (TCons ("AbstractHaskell","Pattern") [])) (Rule [1] (Let [(2,Comb FuncCall ("Prelude","length") [Var 1])] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 2,Lit (Intc  0)]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("AbstractHaskell","PComb") [Comb FuncCall ("AbstractHaskellGoodies","pre") [Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 2,Lit (Intc  1)]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","head") [Var 1]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("AbstractHaskell","PComb") [Comb FuncCall ("AbstractHaskellGoodies","pre") [Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","take") [Comb FuncCall ("Prelude","-") [Var 2,Lit (Intc  1)],Comb FuncCall ("Prelude","repeat") [Lit (Charc  ',')]],Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude","[]") []]]]],Var 1]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])]))),Func ("AbstractHaskellGoodies","~>") 2 Public (FuncType (TCons ("AbstractHaskell","TypeExpr") []) (FuncType (TCons ("AbstractHaskell","TypeExpr") []) (TCons ("AbstractHaskell","TypeExpr") []))) (Rule [1,2] (Comb ConsCall ("AbstractHaskell","FuncType") [Var 1,Var 2])),Func ("AbstractHaskellGoodies","baseType") 1 Public (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("AbstractHaskell","TypeExpr") [])) (Rule [1] (Comb ConsCall ("AbstractHaskell","TCons") [Var 1,Comb ConsCall ("Prelude","[]") []])),Func ("AbstractHaskellGoodies","listType") 1 Public (FuncType (TCons ("AbstractHaskell","TypeExpr") []) (TCons ("AbstractHaskell","TypeExpr") [])) (Rule [1] (Comb ConsCall ("AbstractHaskell","TCons") [Comb FuncCall ("AbstractHaskellGoodies","pre") [Comb ConsCall ("Prelude",":") [Lit (Charc  '['),Comb ConsCall ("Prelude",":") [Lit (Charc  ']'),Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude",":") [Var 1,Comb ConsCall ("Prelude","[]") []]])),Func ("AbstractHaskellGoodies","tupleType") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("AbstractHaskell","TypeExpr") []]) (TCons ("AbstractHaskell","TypeExpr") [])) (Rule [1] (Let [(2,Comb FuncCall ("Prelude","length") [Var 1])] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 2,Lit (Intc  0)]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("AbstractHaskellGoodies","baseType") [Comb FuncCall ("AbstractHaskellGoodies","pre") [Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude","[]") []]]]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 2,Lit (Intc  1)]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","head") [Var 1]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("AbstractHaskell","TCons") [Comb FuncCall ("AbstractHaskellGoodies","pre") [Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","take") [Comb FuncCall ("Prelude","-") [Var 2,Lit (Intc  1)],Comb FuncCall ("Prelude","repeat") [Lit (Charc  ',')]],Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude","[]") []]]]],Var 1]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])]))),Func ("AbstractHaskellGoodies","ioType") 1 Public (FuncType (TCons ("AbstractHaskell","TypeExpr") []) (TCons ("AbstractHaskell","TypeExpr") [])) (Rule [1] (Comb ConsCall ("AbstractHaskell","TCons") [Comb FuncCall ("AbstractHaskellGoodies","pre") [Comb ConsCall ("Prelude",":") [Lit (Charc  'I'),Comb ConsCall ("Prelude",":") [Lit (Charc  'O'),Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude",":") [Var 1,Comb ConsCall ("Prelude","[]") []]])),Func ("AbstractHaskellGoodies","maybeType") 1 Public (FuncType (TCons ("AbstractHaskell","TypeExpr") []) (TCons ("AbstractHaskell","TypeExpr") [])) (Rule [1] (Comb ConsCall ("AbstractHaskell","TCons") [Comb FuncCall ("AbstractHaskellGoodies","pre") [Comb ConsCall ("Prelude",":") [Lit (Charc  'M'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  'b'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]],Comb ConsCall ("Prelude",":") [Var 1,Comb ConsCall ("Prelude","[]") []]])),Func ("AbstractHaskellGoodies","stringType") 0 Public (TCons ("AbstractHaskell","TypeExpr") []) (Rule [] (Comb FuncCall ("AbstractHaskellGoodies","baseType") [Comb FuncCall ("AbstractHaskellGoodies","pre") [Comb ConsCall ("Prelude",":") [Lit (Charc  'S'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude","[]") []]]]]]]]])),Func ("AbstractHaskellGoodies","intType") 0 Public (TCons ("AbstractHaskell","TypeExpr") []) (Rule [] (Comb FuncCall ("AbstractHaskellGoodies","baseType") [Comb FuncCall ("AbstractHaskellGoodies","pre") [Comb ConsCall ("Prelude",":") [Lit (Charc  'I'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude","[]") []]]]]])),Func ("AbstractHaskellGoodies","boolType") 0 Public (TCons ("AbstractHaskell","TypeExpr") []) (Rule [] (Comb FuncCall ("AbstractHaskellGoodies","baseType") [Comb FuncCall ("AbstractHaskellGoodies","pre") [Comb ConsCall ("Prelude",":") [Lit (Charc  'B'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude","[]") []]]]]]])),Func ("AbstractHaskellGoodies","dateType") 0 Public (TCons ("AbstractHaskell","TypeExpr") []) (Rule [] (Comb FuncCall ("AbstractHaskellGoodies","baseType") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc  'T'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'T'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]])),Func ("AbstractHaskellGoodies","tfunc") 5 Public (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("AbstractHaskell","Visibility") []) (FuncType (TCons ("AbstractHaskell","TypeExpr") []) (FuncType (TCons ("Prelude","[]") [TCons ("AbstractHaskell","Rule") []]) (TCons ("AbstractHaskell","FuncDecl") [])))))) (Rule [1,2,3,4,5] (Comb ConsCall ("AbstractHaskell","Func") [Comb ConsCall ("Prelude","[]") [],Var 1,Var 2,Var 3,Comb ConsCall ("AbstractHaskell","FType") [Var 4],Comb ConsCall ("AbstractHaskell","Rules") [Var 5]])),Func ("AbstractHaskellGoodies","ctfunc") 6 Public (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("AbstractHaskell","Visibility") []) (FuncType (TCons ("Prelude","[]") [TCons ("AbstractHaskell","Context") []]) (FuncType (TCons ("AbstractHaskell","TypeExpr") []) (FuncType (TCons ("Prelude","[]") [TCons ("AbstractHaskell","Rule") []]) (TCons ("AbstractHaskell","FuncDecl") []))))))) (Rule [1,2,3,4,5,6] (Comb ConsCall ("AbstractHaskell","Func") [Comb ConsCall ("Prelude","[]") [],Var 1,Var 2,Var 3,Comb ConsCall ("AbstractHaskell","CType") [Var 4,Var 5],Comb ConsCall ("AbstractHaskell","Rules") [Var 6]])),Func ("AbstractHaskellGoodies","ufunc") 4 Public (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("AbstractHaskell","Visibility") []) (FuncType (TCons ("Prelude","[]") [TCons ("AbstractHaskell","Rule") []]) (TCons ("AbstractHaskell","FuncDecl") []))))) (Rule [1,2,3,4] (Comb ConsCall ("AbstractHaskell","Func") [Comb ConsCall ("Prelude","[]") [],Var 1,Var 2,Var 3,Comb ConsCall ("AbstractHaskell","Untyped") [],Comb ConsCall ("AbstractHaskell","Rules") [Var 4]])),Func ("AbstractHaskellGoodies","cmtfunc") 7 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("AbstractHaskell","Visibility") []) (FuncType (TCons ("Prelude","[]") [TCons ("AbstractHaskell","Context") []]) (FuncType (TCons ("AbstractHaskell","TypeExpr") []) (FuncType (TCons ("Prelude","[]") [TCons ("AbstractHaskell","Rule") []]) (TCons ("AbstractHaskell","FuncDecl") [])))))))) (Rule [1,2,3,4,5,6,7] (Comb ConsCall ("AbstractHaskell","Func") [Var 1,Var 2,Var 3,Var 4,Comb ConsCall ("AbstractHaskell","CType") [Var 5,Var 6],Comb ConsCall ("AbstractHaskell","Rules") [Var 7]])),Func ("AbstractHaskellGoodies","string2ac") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("AbstractHaskell","Expr") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("AbstractHaskellGoodies","constF") [Comb FuncCall ("AbstractHaskellGoodies","pre") [Comb ConsCall ("Prelude",":") [Lit (Charc  '['),Comb ConsCall ("Prelude",":") [Lit (Charc  ']'),Comb ConsCall ("Prelude","[]") []]]]]),Branch (Pattern ("Prelude",":") [2,3]) (Comb FuncCall ("AbstractHaskellGoodies","applyF") [Comb FuncCall ("AbstractHaskellGoodies","pre") [Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("AbstractHaskell","Lit") [Comb ConsCall ("AbstractHaskell","Charc") [Var 2]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("AbstractHaskellGoodies","string2ac") [Var 3],Comb ConsCall ("Prelude","[]") []]]])])),Func ("AbstractHaskellGoodies","noGuard") 1 Public (FuncType (TCons ("AbstractHaskell","Expr") []) (TCons ("Prelude","(,)") [TCons ("AbstractHaskell","Expr") [],TCons ("AbstractHaskell","Expr") []])) (Rule [1] (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("AbstractHaskell","Symbol") [Comb FuncCall ("AbstractHaskellGoodies","pre") [Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude","[]") []]]]]]]]]],Var 1])),Func ("AbstractHaskellGoodies","pre") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]],Var 1])),Func ("AbstractHaskellGoodies","cvar") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("AbstractHaskell","Expr") [])) (Rule [1] (Comb ConsCall ("AbstractHaskell","Var") [Comb ConsCall ("Prelude","(,)") [Lit (Intc  1),Var 1]])),Func ("AbstractHaskellGoodies","clet") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("AbstractHaskell","LocalDecl") []]) (FuncType (TCons ("AbstractHaskell","Expr") []) (TCons ("AbstractHaskell","Expr") []))) (Rule [1,2] (Case  Rigid (Comb FuncCall ("Prelude","null") [Var 1]) [Branch (Pattern ("Prelude","True") []) (Var 2),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("AbstractHaskell","Let") [Var 1,Var 2])])),Func ("AbstractHaskellGoodies","ctvar") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("AbstractHaskell","TypeExpr") [])) (Rule [1] (Comb ConsCall ("AbstractHaskell","TVar") [Comb ConsCall ("Prelude","(,)") [Lit (Intc  1),Var 1]])),Func ("AbstractHaskellGoodies","list2ac") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("AbstractHaskell","Expr") []]) (TCons ("AbstractHaskell","Expr") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("AbstractHaskellGoodies","applyF") [Comb FuncCall ("AbstractHaskellGoodies","pre") [Comb ConsCall ("Prelude",":") [Lit (Charc  '['),Comb ConsCall ("Prelude",":") [Lit (Charc  ']'),Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude",":") [2,3]) (Comb FuncCall ("AbstractHaskellGoodies","applyF") [Comb FuncCall ("AbstractHaskellGoodies","pre") [Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude",":") [Comb FuncCall ("AbstractHaskellGoodies","list2ac") [Var 3],Comb ConsCall ("Prelude","[]") []]]])])),Func ("AbstractHaskellGoodies","renameSymbolInProg") 2 Public (FuncType (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (FuncType (TCons ("AbstractHaskell","Prog") []) (TCons ("AbstractHaskell","Prog") []))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("AbstractHaskell","Prog") [3,4,5,6,7]) (Comb ConsCall ("AbstractHaskell","Prog") [Comb FuncCall ("Prelude","fst") [Comb FuncCall ("Prelude","apply") [Var 1,Comb ConsCall ("Prelude","(,)") [Var 3,Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("AbstractHaskellGoodies","renameSymbolInProg._#lambda1") [Var 1],Var 4],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("AbstractHaskellGoodies","renameSymbolInTypeDecl") [Var 1],Var 5],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("AbstractHaskellGoodies","renameSymbolInFunc") [Var 1],Var 6],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("AbstractHaskellGoodies","renameOpDecl") [Var 1],Var 7]])])),Func ("AbstractHaskellGoodies","renameSymbolInProg._#lambda1") 2 Private (FuncType (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1,2] (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Prelude","fst") [],Comb FuncCall ("Prelude","apply") [Var 1,Comb ConsCall ("Prelude","(,)") [Var 2,Comb ConsCall ("Prelude","[]") []]]])),Func ("AbstractHaskellGoodies","renameSymbolInTypeDecl") 2 Public (FuncType (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (FuncType (TCons ("AbstractHaskell","TypeDecl") []) (TCons ("AbstractHaskell","TypeDecl") []))) (Rule [1,2] (Case  Rigid (Var 2) [Branch (Pattern ("AbstractHaskell","Type") [3,4,5,6]) (Comb ConsCall ("AbstractHaskell","Type") [Comb FuncCall ("Prelude","apply") [Var 1,Var 3],Var 4,Var 5,Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("AbstractHaskellGoodies","renameSymbolInConsDecl") [Var 1],Var 6]]),Branch (Pattern ("AbstractHaskell","TypeSyn") [7,8,9,10]) (Comb ConsCall ("AbstractHaskell","TypeSyn") [Comb FuncCall ("Prelude","apply") [Var 1,Var 7],Var 8,Var 9,Comb FuncCall ("AbstractHaskellGoodies","renameSymbolInTypeExpr") [Var 1,Var 10]]),Branch (Pattern ("AbstractHaskell","Instance") [11,12,13,14]) (Comb ConsCall ("AbstractHaskell","Instance") [Comb FuncCall ("Prelude","apply") [Var 1,Var 11],Comb FuncCall ("AbstractHaskellGoodies","renameSymbolInTypeExpr") [Var 1,Var 12],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("AbstractHaskellGoodies","renameSymbolInTypeDecl._#lambda3") [Var 1],Var 13],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("AbstractHaskellGoodies","renameSymbolInTypeDecl.renameSymbolInInstRule.85") [Var 1],Var 14]])])),Func ("AbstractHaskellGoodies","renameSymbolInTypeDecl.renameSymbolInInstRule.85") 2 Private (FuncType (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("AbstractHaskell","Rule") []]) (TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("AbstractHaskell","Rule") []]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Prelude","apply") [Var 1,Var 3],Comb FuncCall ("AbstractHaskellGoodies","renameSymbolInRule") [Var 1,Var 4]])])),Func ("AbstractHaskellGoodies","renameSymbolInTypeDecl._#lambda3") 2 Private (FuncType (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (FuncType (TCons ("AbstractHaskell","Context") []) (TCons ("AbstractHaskell","Context") []))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("AbstractHaskell","Context") [3,4]) (Comb ConsCall ("AbstractHaskell","Context") [Comb FuncCall ("Prelude","apply") [Var 1,Var 3],Var 4])])),Func ("AbstractHaskellGoodies","renameSymbolInConsDecl") 2 Public (FuncType (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (FuncType (TCons ("AbstractHaskell","ConsDecl") []) (TCons ("AbstractHaskell","ConsDecl") []))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("AbstractHaskell","Cons") [3,4,5,6]) (Comb ConsCall ("AbstractHaskell","Cons") [Comb FuncCall ("Prelude","apply") [Var 1,Var 3],Var 4,Var 5,Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("AbstractHaskellGoodies","renameSymbolInTypeExpr") [Var 1],Var 6]])])),Func ("AbstractHaskellGoodies","renameSymbolInTypeExpr") 2 Public (FuncType (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (FuncType (TCons ("AbstractHaskell","TypeExpr") []) (TCons ("AbstractHaskell","TypeExpr") []))) (Rule [1,2] (Case  Rigid (Var 2) [Branch (Pattern ("AbstractHaskell","TCons") [3,4]) (Comb ConsCall ("AbstractHaskell","TCons") [Comb FuncCall ("Prelude","apply") [Var 1,Var 3],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("AbstractHaskellGoodies","renameSymbolInTypeExpr") [Var 1],Var 4]]),Branch (Pattern ("AbstractHaskell","FuncType") [5,6]) (Comb ConsCall ("AbstractHaskell","FuncType") [Comb FuncCall ("AbstractHaskellGoodies","renameSymbolInTypeExpr") [Var 1,Var 5],Comb FuncCall ("AbstractHaskellGoodies","renameSymbolInTypeExpr") [Var 1,Var 6]]),Branch (Pattern ("AbstractHaskell","TVar") [7]) (Comb ConsCall ("AbstractHaskell","TVar") [Var 7])])),Func ("AbstractHaskellGoodies","renameSymbolInExpr") 2 Public (FuncType (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (FuncType (TCons ("AbstractHaskell","Expr") []) (TCons ("AbstractHaskell","Expr") []))) (Rule [1,2] (Case  Rigid (Var 2) [Branch (Pattern ("AbstractHaskell","Symbol") [3]) (Comb ConsCall ("AbstractHaskell","Symbol") [Comb FuncCall ("Prelude","apply") [Var 1,Var 3]]),Branch (Pattern ("AbstractHaskell","Apply") [4,5]) (Comb ConsCall ("AbstractHaskell","Apply") [Comb FuncCall ("AbstractHaskellGoodies","renameSymbolInExpr") [Var 1,Var 4],Comb FuncCall ("AbstractHaskellGoodies","renameSymbolInExpr") [Var 1,Var 5]]),Branch (Pattern ("AbstractHaskell","Lambda") [6,7]) (Comb ConsCall ("AbstractHaskell","Lambda") [Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("AbstractHaskellGoodies","renameSymbolInPat") [Var 1],Var 6],Comb FuncCall ("AbstractHaskellGoodies","renameSymbolInExpr") [Var 1,Var 7]]),Branch (Pattern ("AbstractHaskell","Let") [8,9]) (Comb ConsCall ("AbstractHaskell","Let") [Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("AbstractHaskellGoodies","renameSymbolInLocal") [Var 1],Var 8],Comb FuncCall ("AbstractHaskellGoodies","renameSymbolInExpr") [Var 1,Var 9]]),Branch (Pattern ("AbstractHaskell","DoExpr") [10]) (Comb ConsCall ("AbstractHaskell","DoExpr") [Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("AbstractHaskellGoodies","renameSymbolInStat") [Var 1],Var 10]]),Branch (Pattern ("AbstractHaskell","ListComp") [11,12]) (Comb ConsCall ("AbstractHaskell","ListComp") [Comb FuncCall ("AbstractHaskellGoodies","renameSymbolInExpr") [Var 1,Var 11],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("AbstractHaskellGoodies","renameSymbolInStat") [Var 1],Var 12]]),Branch (Pattern ("AbstractHaskell","Case") [13,14]) (Comb ConsCall ("AbstractHaskell","Case") [Comb FuncCall ("AbstractHaskellGoodies","renameSymbolInExpr") [Var 1,Var 13],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("AbstractHaskellGoodies","renameSymbolInBranch") [Var 1],Var 14]]),Branch (Pattern ("AbstractHaskell","Typed") [15,16]) (Comb ConsCall ("AbstractHaskell","Typed") [Comb FuncCall ("AbstractHaskellGoodies","renameSymbolInExpr") [Var 1,Var 15],Var 16]),Branch (Pattern ("AbstractHaskell","Var") [17]) (Var 2),Branch (Pattern ("AbstractHaskell","Lit") [18]) (Var 2)])),Func ("AbstractHaskellGoodies","renameSymbolInPat") 2 Public (FuncType (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (FuncType (TCons ("AbstractHaskell","Pattern") []) (TCons ("AbstractHaskell","Pattern") []))) (Rule [1,2] (Case  Rigid (Var 2) [Branch (Pattern ("AbstractHaskell","PComb") [3,4]) (Comb ConsCall ("AbstractHaskell","PComb") [Comb FuncCall ("Prelude","apply") [Var 1,Var 3],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("AbstractHaskellGoodies","renameSymbolInPat") [Var 1],Var 4]]),Branch (Pattern ("AbstractHaskell","PAs") [5,6]) (Comb ConsCall ("AbstractHaskell","PAs") [Var 5,Comb FuncCall ("AbstractHaskellGoodies","renameSymbolInPat") [Var 1,Var 6]]),Branch (Pattern ("AbstractHaskell","PFuncComb") [7,8]) (Comb ConsCall ("AbstractHaskell","PFuncComb") [Comb FuncCall ("Prelude","apply") [Var 1,Var 7],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("AbstractHaskellGoodies","renameSymbolInPat") [Var 1],Var 8]]),Branch (Pattern ("AbstractHaskell","PVar") [9]) (Var 2),Branch (Pattern ("AbstractHaskell","PLit") [10]) (Var 2)])),Func ("AbstractHaskellGoodies","renameSymbolInBranch") 2 Public (FuncType (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (FuncType (TCons ("AbstractHaskell","BranchExpr") []) (TCons ("AbstractHaskell","BranchExpr") []))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("AbstractHaskell","Branch") [3,4]) (Comb ConsCall ("AbstractHaskell","Branch") [Comb FuncCall ("AbstractHaskellGoodies","renameSymbolInPat") [Var 1,Var 3],Comb FuncCall ("AbstractHaskellGoodies","renameSymbolInExpr") [Var 1,Var 4]])])),Func ("AbstractHaskellGoodies","renameSymbolInStat") 2 Public (FuncType (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (FuncType (TCons ("AbstractHaskell","Statement") []) (TCons ("AbstractHaskell","Statement") []))) (Rule [1,2] (Case  Rigid (Var 2) [Branch (Pattern ("AbstractHaskell","SExpr") [3]) (Comb ConsCall ("AbstractHaskell","SExpr") [Comb FuncCall ("AbstractHaskellGoodies","renameSymbolInExpr") [Var 1,Var 3]]),Branch (Pattern ("AbstractHaskell","SPat") [4,5]) (Comb ConsCall ("AbstractHaskell","SPat") [Comb FuncCall ("AbstractHaskellGoodies","renameSymbolInPat") [Var 1,Var 4],Comb FuncCall ("AbstractHaskellGoodies","renameSymbolInExpr") [Var 1,Var 5]]),Branch (Pattern ("AbstractHaskell","SLet") [6]) (Comb ConsCall ("AbstractHaskell","SLet") [Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("AbstractHaskellGoodies","renameSymbolInLocal") [Var 1],Var 6]])])),Func ("AbstractHaskellGoodies","renameSymbolInLocal") 2 Public (FuncType (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (FuncType (TCons ("AbstractHaskell","LocalDecl") []) (TCons ("AbstractHaskell","LocalDecl") []))) (Rule [1,2] (Case  Rigid (Var 2) [Branch (Pattern ("AbstractHaskell","LocalFunc") [3]) (Comb ConsCall ("AbstractHaskell","LocalFunc") [Comb FuncCall ("AbstractHaskellGoodies","renameSymbolInFunc") [Var 1,Var 3]]),Branch (Pattern ("AbstractHaskell","LocalPat") [4,5,6]) (Comb ConsCall ("AbstractHaskell","LocalPat") [Comb FuncCall ("AbstractHaskellGoodies","renameSymbolInPat") [Var 1,Var 4],Comb FuncCall ("AbstractHaskellGoodies","renameSymbolInExpr") [Var 1,Var 5],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("AbstractHaskellGoodies","renameSymbolInLocal") [Var 1],Var 6]]),Branch (Pattern ("AbstractHaskell","LocalVar") [7]) (Var 2)])),Func ("AbstractHaskellGoodies","renameSymbolInTypeSig") 2 Public (FuncType (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (FuncType (TCons ("AbstractHaskell","TypeSig") []) (TCons ("AbstractHaskell","TypeSig") []))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("AbstractHaskell","Untyped") []) (Comb ConsCall ("AbstractHaskell","Untyped") []),Branch (Pattern ("AbstractHaskell","FType") [3]) (Comb ConsCall ("AbstractHaskell","FType") [Comb FuncCall ("AbstractHaskellGoodies","renameSymbolInTypeExpr") [Var 1,Var 3]]),Branch (Pattern ("AbstractHaskell","CType") [4,5]) (Comb ConsCall ("AbstractHaskell","CType") [Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("AbstractHaskellGoodies","renameSymbolInTypeSig._#lambda9") [Var 1],Var 4],Comb FuncCall ("AbstractHaskellGoodies","renameSymbolInTypeExpr") [Var 1,Var 5]])])),Func ("AbstractHaskellGoodies","renameSymbolInTypeSig._#lambda9") 2 Private (FuncType (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (FuncType (TCons ("AbstractHaskell","Context") []) (TCons ("AbstractHaskell","Context") []))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("AbstractHaskell","Context") [3,4]) (Comb ConsCall ("AbstractHaskell","Context") [Comb FuncCall ("Prelude","apply") [Var 1,Var 3],Var 4])])),Func ("AbstractHaskellGoodies","renameSymbolInFunc") 2 Public (FuncType (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (FuncType (TCons ("AbstractHaskell","FuncDecl") []) (TCons ("AbstractHaskell","FuncDecl") []))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("AbstractHaskell","Func") [3,4,5,6,7,8]) (Comb ConsCall ("AbstractHaskell","Func") [Var 3,Comb FuncCall ("Prelude","apply") [Var 1,Var 4],Var 5,Var 6,Comb FuncCall ("AbstractHaskellGoodies","renameSymbolInTypeSig") [Var 1,Var 7],Comb FuncCall ("AbstractHaskellGoodies","renameSymbolInRules") [Var 1,Var 8]])])),Func ("AbstractHaskellGoodies","renameSymbolInRules") 2 Public (FuncType (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (FuncType (TCons ("AbstractHaskell","Rules") []) (TCons ("AbstractHaskell","Rules") []))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("AbstractHaskell","Rules") [3]) (Comb ConsCall ("AbstractHaskell","Rules") [Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("AbstractHaskellGoodies","renameSymbolInRule") [Var 1],Var 3]]),Branch (Pattern ("AbstractHaskell","External") [4]) (Comb ConsCall ("AbstractHaskell","External") [Var 4])])),Func ("AbstractHaskellGoodies","renameSymbolInRule") 2 Public (FuncType (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (FuncType (TCons ("AbstractHaskell","Rule") []) (TCons ("AbstractHaskell","Rule") []))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("AbstractHaskell","Rule") [3,4,5]) (Comb ConsCall ("AbstractHaskell","Rule") [Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("AbstractHaskellGoodies","renameSymbolInPat") [Var 1],Var 3],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("AbstractHaskellGoodies","renameSymbolInRule._#lambda10") [Var 1],Var 4],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("AbstractHaskellGoodies","renameSymbolInLocal") [Var 1],Var 5]])])),Func ("AbstractHaskellGoodies","renameSymbolInRule._#lambda10") 2 Private (FuncType (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (FuncType (TCons ("Prelude","(,)") [TCons ("AbstractHaskell","Expr") [],TCons ("AbstractHaskell","Expr") []]) (TCons ("Prelude","(,)") [TCons ("AbstractHaskell","Expr") [],TCons ("AbstractHaskell","Expr") []]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("AbstractHaskellGoodies","renameSymbolInExpr") [Var 1,Var 3],Comb FuncCall ("AbstractHaskellGoodies","renameSymbolInExpr") [Var 1,Var 4]])])),Func ("AbstractHaskellGoodies","renameOpDecl") 2 Public (FuncType (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (FuncType (TCons ("AbstractHaskell","OpDecl") []) (TCons ("AbstractHaskell","OpDecl") []))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("AbstractHaskell","Op") [3,4,5]) (Comb ConsCall ("AbstractHaskell","Op") [Comb FuncCall ("Prelude","apply") [Var 1,Var 3],Var 4,Var 5])])),Func ("AbstractHaskellGoodies","funcDecls") 1 Public (FuncType (TCons ("AbstractHaskell","Prog") []) (TCons ("Prelude","[]") [TCons ("AbstractHaskell","FuncDecl") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("AbstractHaskell","Prog") [2,3,4,5,6]) (Var 5)])),Func ("AbstractHaskellGoodies","funcName") 1 Public (FuncType (TCons ("AbstractHaskell","FuncDecl") []) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("AbstractHaskell","Func") [2,3,4,5,6,7]) (Var 3)])),Func ("AbstractHaskellGoodies","typeOf") 1 Public (FuncType (TCons ("AbstractHaskell","FuncDecl") []) (TCons ("AbstractHaskell","TypeSig") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("AbstractHaskell","Func") [2,3,4,5,6,7]) (Var 6)])),Func ("AbstractHaskellGoodies","commentOf") 1 Public (FuncType (TCons ("AbstractHaskell","FuncDecl") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("AbstractHaskell","Func") [2,3,4,5,6,7]) (Var 2)]))] [Op ("AbstractHaskellGoodies","~>") InfixrOp 9]