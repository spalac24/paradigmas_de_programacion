Prog "LiftCase" ["AnnotatedFlatCurry","AnnotatedFlatCurryGoodies","FlatCurry","List","Prelude","FiniteMap"] [TypeSyn ("LiftCase","FuncList") Private [] (FuncType (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]])),TypeSyn ("LiftCase","TypedVar") Private [] (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]),TypeSyn ("LiftCase","Result") Private [] (TCons ("Prelude","(,,)") [FuncType (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]),TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]])]),TypeSyn ("LiftCase","M") Private [0] (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","(,,,)") [TVar 0,TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]),TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]]))] [Func ("LiftCase","liftCases") 2 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("AnnotatedFlatCurry","AProg") [TCons ("FlatCurry","TypeExpr") []]) (TCons ("AnnotatedFlatCurry","AProg") [TCons ("FlatCurry","TypeExpr") []]))) (Rule [1,2] (Let [(3,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("AnnotatedFlatCurryGoodies","progFuncs") [],Var 2]),(4,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("LiftCase","genAuxName") [],Comb FuncCall ("Prelude","map") [Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","snd") [],Comb FuncCall ("AnnotatedFlatCurryGoodies","funcName") []],Var 3]]),(5,Comb FuncCall ("List","partition") [Comb FuncCall ("AnnotatedFlatCurryGoodies","isExternal") [],Var 3]),(6,Comb FuncCall ("LiftCase","liftCases._#selFP5#exts") [Var 5]),(7,Comb FuncCall ("LiftCase","liftCases._#selFP6#ins") [Var 5]),(8,Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("LiftCase","liftCasesFunc") [Var 1,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("AnnotatedFlatCurryGoodies","progName") [],Var 2],Var 4],Comb ConsCall ("Prelude","(,,)") [Comb (FuncPartCall 1) ("Prelude","id") [],Lit (Intc  0),Comb (FuncPartCall 1) ("Prelude","id") []],Var 7]),(9,Comb FuncCall ("LiftCase","liftCases._#selFP3#newFsf") [Var 8]),(10,Comb FuncCall ("LiftCase","liftCases._#selFP4#auxFf") [Var 8])] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("AnnotatedFlatCurryGoodies","updProgFuncs") [Comb (FuncPartCall 1) ("Prelude","const") [Comb FuncCall ("Prelude","apply") [Var 9,Comb FuncCall ("Prelude","apply") [Var 10,Var 6]]]],Var 2]))),Func ("LiftCase","liftCases._#selFP5#exts") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]],TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]]) (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("LiftCase","liftCases._#selFP6#ins") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]],TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]]) (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("LiftCase","liftCases._#selFP3#newFsf") 1 Private (FuncType (TCons ("Prelude","(,,)") [FuncType (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]),TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]])]) (FuncType (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]))) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,)") [2,3,4]) (Var 2)])),Func ("LiftCase","liftCases._#selFP4#auxFf") 1 Private (FuncType (TCons ("Prelude","(,,)") [FuncType (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]),TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]])]) (FuncType (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]))) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,)") [2,3,4]) (Var 4)])),Func ("LiftCase","sequence") 2 Private (FuncType (TCons ("Prelude","[]") [FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","(,,,)") [TVar 0,TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]),TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]])]) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]),TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]]))) (Rule [1,2] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("LiftCase","sequence.once.11") [],Comb ConsCall ("Prelude","(,,,)") [Comb ConsCall ("Prelude","[]") [],Var 2,Comb (FuncPartCall 1) ("Prelude","id") [],Comb ConsCall ("Prelude","[]") []],Var 1])),Func ("LiftCase","sequence.once.11") 2 Private (FuncType (FuncType (TVar 0) (TCons ("Prelude","(,,,)") [TVar 1,TVar 2,FuncType (TVar 3) (TVar 4),TCons ("Prelude","[]") [TVar 5]])) (FuncType (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TVar 1],TVar 0,FuncType (TVar 4) (TVar 6),TCons ("Prelude","[]") [TVar 5]]) (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TVar 1],TVar 2,FuncType (TVar 3) (TVar 6),TCons ("Prelude","[]") [TVar 5]]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","(,,,)") [3,4,5,6]) (Let [(7,Comb FuncCall ("Prelude","apply") [Var 1,Var 4]),(8,Comb FuncCall ("LiftCase","sequence.once.11._#selFP8#e") [Var 7]),(9,Comb FuncCall ("LiftCase","sequence.once.11._#selFP9#k") [Var 7]),(10,Comb FuncCall ("LiftCase","sequence.once.11._#selFP10#ff2") [Var 7]),(11,Comb FuncCall ("LiftCase","sequence.once.11._#selFP11#vs2") [Var 7])] (Comb ConsCall ("Prelude","(,,,)") [Comb ConsCall ("Prelude",":") [Var 8,Var 3],Var 9,Comb FuncCall ("Prelude",".") [Var 5,Var 10],Comb FuncCall ("Prelude","++") [Var 6,Var 11]]))])),Func ("LiftCase","sequence.once.11._#selFP8#e") 1 Private (FuncType (TCons ("Prelude","(,,,)") [TVar 10,TVar 11,FuncType (TVar 19) (TVar 17),TCons ("Prelude","[]") [TVar 20]]) (TVar 10)) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,,)") [2,3,4,5]) (Var 2)])),Func ("LiftCase","sequence.once.11._#selFP9#k") 1 Private (FuncType (TCons ("Prelude","(,,,)") [TVar 10,TVar 11,FuncType (TVar 19) (TVar 17),TCons ("Prelude","[]") [TVar 20]]) (TVar 11)) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,,)") [2,3,4,5]) (Var 3)])),Func ("LiftCase","sequence.once.11._#selFP10#ff2") 1 Private (FuncType (TCons ("Prelude","(,,,)") [TVar 10,TVar 11,FuncType (TVar 19) (TVar 17),TCons ("Prelude","[]") [TVar 20]]) (FuncType (TVar 19) (TVar 17))) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,,)") [2,3,4,5]) (Var 4)])),Func ("LiftCase","sequence.once.11._#selFP11#vs2") 1 Private (FuncType (TCons ("Prelude","(,,,)") [TVar 10,TVar 11,FuncType (TVar 19) (TVar 17),TCons ("Prelude","[]") [TVar 20]]) (TCons ("Prelude","[]") [TVar 20])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,,)") [2,3,4,5]) (Var 5)])),Func ("LiftCase","liftCasesFunc") 5 Private (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]) (FuncType (TCons ("Prelude","(,,)") [FuncType (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]),TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]])]) (TCons ("Prelude","(,,)") [FuncType (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]),TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]])])))))) (Rule [1,2,3,4,5] (Case  Flex (Var 5) [Branch (Pattern ("Prelude","(,,)") [6,7,8]) (Let [(9,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("AnnotatedFlatCurryGoodies","funcBody") [],Var 4]),(10,Comb (FuncPartCall 1) ("AnnotatedFlatCurryGoodies","trExpr") [Comb (FuncPartCall 3) ("LiftCase","liftCasesFunc.var.17") [],Comb (FuncPartCall 3) ("LiftCase","liftCasesFunc.lit.17") [],Comb (FuncPartCall 5) ("LiftCase","liftCasesFunc.comb.17") [],Comb (FuncPartCall 4) ("LiftCase","liftCasesFunc.leT.17") [],Comb (FuncPartCall 4) ("LiftCase","liftCasesFunc.freE.17") [],Comb (FuncPartCall 4) ("LiftCase","liftCasesFunc.or.17") [],Comb (FuncPartCall 5) ("LiftCase","liftCasesFunc.casE.17") [Var 3,Var 2],Comb (FuncPartCall 3) ("LiftCase","liftCasesFunc.branch.17") [],Comb (FuncPartCall 4) ("LiftCase","liftCasesFunc.typed.17") []]),(11,Case  Rigid (Var 1) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 9) [Branch (Pattern ("AnnotatedFlatCurry","ACase") [12,13,14,15]) (Case  Rigid (Var 14) [Branch (Pattern ("AnnotatedFlatCurry","AVar") [16,17]) (Let [(18,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 10,Comb ConsCall ("AnnotatedFlatCurry","AVar") [Var 16,Var 17]],Var 7]),(19,Comb FuncCall ("LiftCase","liftCasesFunc._#selFP67#e'") [Var 18]),(20,Comb FuncCall ("LiftCase","liftCasesFunc._#selFP68#i'") [Var 18]),(21,Comb FuncCall ("LiftCase","liftCasesFunc._#selFP69#ffe") [Var 18]),(22,Comb FuncCall ("LiftCase","sequence") [Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("LiftCase","liftCasesFunc._#lambda2") [Var 10],Var 15],Var 20]),(23,Comb FuncCall ("LiftCase","liftCasesFunc._#selFP64#bs'") [Var 22]),(24,Comb FuncCall ("LiftCase","liftCasesFunc._#selFP65#i''") [Var 22]),(25,Comb FuncCall ("LiftCase","liftCasesFunc._#selFP66#ffbs") [Var 22])] (Comb ConsCall ("Prelude","(,,,)") [Comb ConsCall ("AnnotatedFlatCurry","ACase") [Var 12,Var 13,Var 19,Var 23],Var 24,Comb FuncCall ("Prelude",".") [Var 21,Var 25],Comb ConsCall ("Prelude","[]") []])),Branch (Pattern ("AnnotatedFlatCurry","ALit") [26,27]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 10,Var 9],Var 7]),Branch (Pattern ("AnnotatedFlatCurry","AComb") [28,29,30,31]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 10,Var 9],Var 7]),Branch (Pattern ("AnnotatedFlatCurry","ALet") [32,33,34]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 10,Var 9],Var 7]),Branch (Pattern ("AnnotatedFlatCurry","AFree") [35,36,37]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 10,Var 9],Var 7]),Branch (Pattern ("AnnotatedFlatCurry","AOr") [38,39,40]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 10,Var 9],Var 7]),Branch (Pattern ("AnnotatedFlatCurry","ACase") [41,42,43,44]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 10,Var 9],Var 7]),Branch (Pattern ("AnnotatedFlatCurry","ATyped") [45,46,47]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 10,Var 9],Var 7])]),Branch (Pattern ("AnnotatedFlatCurry","AVar") [48,49]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 10,Var 9],Var 7]),Branch (Pattern ("AnnotatedFlatCurry","ALit") [50,51]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 10,Var 9],Var 7]),Branch (Pattern ("AnnotatedFlatCurry","AComb") [52,53,54,55]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 10,Var 9],Var 7]),Branch (Pattern ("AnnotatedFlatCurry","ALet") [56,57,58]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 10,Var 9],Var 7]),Branch (Pattern ("AnnotatedFlatCurry","AFree") [59,60,61]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 10,Var 9],Var 7]),Branch (Pattern ("AnnotatedFlatCurry","AOr") [62,63,64]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 10,Var 9],Var 7]),Branch (Pattern ("AnnotatedFlatCurry","ATyped") [65,66,67]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 10,Var 9],Var 7])]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 10,Var 9],Var 7])]),(68,Comb FuncCall ("LiftCase","liftCasesFunc._#selFP70#exp") [Var 11]),(69,Comb FuncCall ("LiftCase","liftCasesFunc._#selFP71#iMain") [Var 11]),(70,Comb FuncCall ("LiftCase","liftCasesFunc._#selFP72#ffeMain") [Var 11])] (Comb ConsCall ("Prelude","(,,)") [Comb FuncCall ("Prelude",".") [Comb (ConsPartCall 1) ("Prelude",":") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("AnnotatedFlatCurryGoodies","updFuncBody") [],Comb (FuncPartCall 1) ("Prelude","const") [Var 68]],Var 4]],Var 6],Var 69,Comb FuncCall ("Prelude",".") [Var 8,Var 70]]))])),Func ("LiftCase","liftCasesFunc.var.17") 3 Private (FuncType (TCons ("FlatCurry","TypeExpr") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","(,,,)") [TCons ("AnnotatedFlatCurry","AExpr") [TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]),TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]])))) (Rule [1,2,3] (Comb ConsCall ("Prelude","(,,,)") [Comb ConsCall ("AnnotatedFlatCurry","AVar") [Var 1,Var 2],Var 3,Comb (FuncPartCall 1) ("Prelude","id") [],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Var 2,Var 1],Comb ConsCall ("Prelude","[]") []]])),Func ("LiftCase","liftCasesFunc.lit.17") 3 Private (FuncType (TCons ("FlatCurry","TypeExpr") []) (FuncType (TCons ("FlatCurry","Literal") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","(,,,)") [TCons ("AnnotatedFlatCurry","AExpr") [TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]),TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]])))) (Rule [1,2,3] (Comb ConsCall ("Prelude","(,,,)") [Comb ConsCall ("AnnotatedFlatCurry","ALit") [Var 1,Var 2],Var 3,Comb (FuncPartCall 1) ("Prelude","id") [],Comb ConsCall ("Prelude","[]") []])),Func ("LiftCase","liftCasesFunc.comb.17") 5 Private (FuncType (TCons ("FlatCurry","TypeExpr") []) (FuncType (TCons ("FlatCurry","CombType") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("FlatCurry","TypeExpr") []]) (FuncType (TCons ("Prelude","[]") [FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","(,,,)") [TCons ("AnnotatedFlatCurry","AExpr") [TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]),TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]])]) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","(,,,)") [TCons ("AnnotatedFlatCurry","AExpr") [TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]),TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]])))))) (Rule [1,2,3,4,5] (Let [(6,Comb FuncCall ("LiftCase","sequence") [Var 4,Var 5]),(7,Comb FuncCall ("LiftCase","liftCasesFunc.comb.17._#selFP14#args'") [Var 6]),(8,Comb FuncCall ("LiftCase","liftCasesFunc.comb.17._#selFP15#i'") [Var 6]),(9,Comb FuncCall ("LiftCase","liftCasesFunc.comb.17._#selFP16#ff") [Var 6]),(10,Comb FuncCall ("LiftCase","liftCasesFunc.comb.17._#selFP17#vs") [Var 6])] (Comb ConsCall ("Prelude","(,,,)") [Comb ConsCall ("AnnotatedFlatCurry","AComb") [Var 1,Var 2,Var 3,Var 7],Var 8,Var 9,Var 10]))),Func ("LiftCase","liftCasesFunc.comb.17._#selFP14#args'") 1 Private (FuncType (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AExpr") [TCons ("FlatCurry","TypeExpr") []]],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]),TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]]) (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AExpr") [TCons ("FlatCurry","TypeExpr") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,,)") [2,3,4,5]) (Var 2)])),Func ("LiftCase","liftCasesFunc.comb.17._#selFP15#i'") 1 Private (FuncType (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AExpr") [TCons ("FlatCurry","TypeExpr") []]],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]),TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]]) (TCons ("Prelude","Int") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,,)") [2,3,4,5]) (Var 3)])),Func ("LiftCase","liftCasesFunc.comb.17._#selFP16#ff") 1 Private (FuncType (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AExpr") [TCons ("FlatCurry","TypeExpr") []]],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]),TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]]) (FuncType (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]))) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,,)") [2,3,4,5]) (Var 4)])),Func ("LiftCase","liftCasesFunc.comb.17._#selFP17#vs") 1 Private (FuncType (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AExpr") [TCons ("FlatCurry","TypeExpr") []]],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]),TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,,)") [2,3,4,5]) (Var 5)])),Func ("LiftCase","liftCasesFunc.leT.17") 4 Private (FuncType (TCons ("FlatCurry","TypeExpr") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","(,,,)") [TCons ("AnnotatedFlatCurry","AExpr") [TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]),TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]])]]) (FuncType (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","(,,,)") [TCons ("AnnotatedFlatCurry","AExpr") [TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]),TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]])) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","(,,,)") [TCons ("AnnotatedFlatCurry","AExpr") [TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]),TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]]))))) (Rule [1,2,3,4] (Let [(5,Comb FuncCall ("Prelude","unzip") [Var 2]),(6,Comb FuncCall ("LiftCase","liftCasesFunc.leT.17._#selFP29#vs") [Var 5]),(7,Comb FuncCall ("LiftCase","liftCasesFunc.leT.17._#selFP30#es") [Var 5]),(8,Comb FuncCall ("LiftCase","sequence") [Var 7,Var 4]),(9,Comb FuncCall ("LiftCase","liftCasesFunc.leT.17._#selFP25#es'") [Var 8]),(10,Comb FuncCall ("LiftCase","liftCasesFunc.leT.17._#selFP26#i'") [Var 8]),(11,Comb FuncCall ("LiftCase","liftCasesFunc.leT.17._#selFP27#ffes") [Var 8]),(12,Comb FuncCall ("LiftCase","liftCasesFunc.leT.17._#selFP28#ves") [Var 8]),(13,Comb FuncCall ("Prelude","apply") [Var 3,Var 10]),(14,Comb FuncCall ("LiftCase","liftCasesFunc.leT.17._#selFP21#e'") [Var 13]),(15,Comb FuncCall ("LiftCase","liftCasesFunc.leT.17._#selFP22#i''") [Var 13]),(16,Comb FuncCall ("LiftCase","liftCasesFunc.leT.17._#selFP23#ffe") [Var 13]),(17,Comb FuncCall ("LiftCase","liftCasesFunc.leT.17._#selFP24#ve") [Var 13])] (Comb ConsCall ("Prelude","(,,,)") [Comb ConsCall ("AnnotatedFlatCurry","ALet") [Var 1,Comb FuncCall ("Prelude","zip") [Var 6,Var 9],Var 14],Var 15,Comb FuncCall ("Prelude",".") [Var 11,Var 16],Comb FuncCall ("Prelude","filter") [Comb (FuncPartCall 1) ("LiftCase","liftCasesFunc.leT.17._#lambda3") [Var 6],Comb FuncCall ("Prelude","++") [Var 12,Var 17]]]))),Func ("LiftCase","liftCasesFunc.leT.17._#selFP29#vs") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Int") []],TCons ("Prelude","[]") [FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","(,,,)") [TCons ("AnnotatedFlatCurry","AExpr") [TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]),TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]])]]) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("LiftCase","liftCasesFunc.leT.17._#selFP30#es") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Int") []],TCons ("Prelude","[]") [FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","(,,,)") [TCons ("AnnotatedFlatCurry","AExpr") [TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]),TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]])]]) (TCons ("Prelude","[]") [FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","(,,,)") [TCons ("AnnotatedFlatCurry","AExpr") [TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]),TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]])])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("LiftCase","liftCasesFunc.leT.17._#selFP25#es'") 1 Private (FuncType (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AExpr") [TCons ("FlatCurry","TypeExpr") []]],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]),TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]]) (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AExpr") [TCons ("FlatCurry","TypeExpr") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,,)") [2,3,4,5]) (Var 2)])),Func ("LiftCase","liftCasesFunc.leT.17._#selFP26#i'") 1 Private (FuncType (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AExpr") [TCons ("FlatCurry","TypeExpr") []]],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]),TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]]) (TCons ("Prelude","Int") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,,)") [2,3,4,5]) (Var 3)])),Func ("LiftCase","liftCasesFunc.leT.17._#selFP27#ffes") 1 Private (FuncType (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AExpr") [TCons ("FlatCurry","TypeExpr") []]],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]),TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]]) (FuncType (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]))) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,,)") [2,3,4,5]) (Var 4)])),Func ("LiftCase","liftCasesFunc.leT.17._#selFP28#ves") 1 Private (FuncType (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AExpr") [TCons ("FlatCurry","TypeExpr") []]],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]),TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,,)") [2,3,4,5]) (Var 5)])),Func ("LiftCase","liftCasesFunc.leT.17._#selFP21#e'") 1 Private (FuncType (TCons ("Prelude","(,,,)") [TCons ("AnnotatedFlatCurry","AExpr") [TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]),TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]]) (TCons ("AnnotatedFlatCurry","AExpr") [TCons ("FlatCurry","TypeExpr") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,,)") [2,3,4,5]) (Var 2)])),Func ("LiftCase","liftCasesFunc.leT.17._#selFP22#i''") 1 Private (FuncType (TCons ("Prelude","(,,,)") [TCons ("AnnotatedFlatCurry","AExpr") [TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]),TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]]) (TCons ("Prelude","Int") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,,)") [2,3,4,5]) (Var 3)])),Func ("LiftCase","liftCasesFunc.leT.17._#selFP23#ffe") 1 Private (FuncType (TCons ("Prelude","(,,,)") [TCons ("AnnotatedFlatCurry","AExpr") [TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]),TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]]) (FuncType (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]))) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,,)") [2,3,4,5]) (Var 4)])),Func ("LiftCase","liftCasesFunc.leT.17._#selFP24#ve") 1 Private (FuncType (TCons ("Prelude","(,,,)") [TCons ("AnnotatedFlatCurry","AExpr") [TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]),TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,,)") [2,3,4,5]) (Var 5)])),Func ("LiftCase","liftCasesFunc.leT.17._#lambda3") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","notElem") [Comb FuncCall ("Prelude","fst") [Var 2]],Var 1])),Func ("LiftCase","liftCasesFunc.freE.17") 4 Private (FuncType (TCons ("FlatCurry","TypeExpr") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]) (FuncType (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","(,,,)") [TCons ("AnnotatedFlatCurry","AExpr") [TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]),TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]])) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","(,,,)") [TCons ("AnnotatedFlatCurry","AExpr") [TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]),TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]]))))) (Rule [1,2,3,4] (Let [(5,Comb FuncCall ("Prelude","apply") [Var 3,Var 4]),(6,Comb FuncCall ("LiftCase","liftCasesFunc.freE.17._#selFP32#e'") [Var 5]),(7,Comb FuncCall ("LiftCase","liftCasesFunc.freE.17._#selFP33#i'") [Var 5]),(8,Comb FuncCall ("LiftCase","liftCasesFunc.freE.17._#selFP34#ff") [Var 5]),(9,Comb FuncCall ("LiftCase","liftCasesFunc.freE.17._#selFP35#ve") [Var 5])] (Comb ConsCall ("Prelude","(,,,)") [Comb ConsCall ("AnnotatedFlatCurry","AFree") [Var 1,Var 2,Var 6],Var 7,Var 8,Comb FuncCall ("Prelude","filter") [Comb (FuncPartCall 1) ("LiftCase","liftCasesFunc.freE.17._#lambda4") [Var 2],Var 9]]))),Func ("LiftCase","liftCasesFunc.freE.17._#selFP32#e'") 1 Private (FuncType (TCons ("Prelude","(,,,)") [TCons ("AnnotatedFlatCurry","AExpr") [TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]),TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]]) (TCons ("AnnotatedFlatCurry","AExpr") [TCons ("FlatCurry","TypeExpr") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,,)") [2,3,4,5]) (Var 2)])),Func ("LiftCase","liftCasesFunc.freE.17._#selFP33#i'") 1 Private (FuncType (TCons ("Prelude","(,,,)") [TCons ("AnnotatedFlatCurry","AExpr") [TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]),TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]]) (TCons ("Prelude","Int") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,,)") [2,3,4,5]) (Var 3)])),Func ("LiftCase","liftCasesFunc.freE.17._#selFP34#ff") 1 Private (FuncType (TCons ("Prelude","(,,,)") [TCons ("AnnotatedFlatCurry","AExpr") [TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]),TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]]) (FuncType (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]))) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,,)") [2,3,4,5]) (Var 4)])),Func ("LiftCase","liftCasesFunc.freE.17._#selFP35#ve") 1 Private (FuncType (TCons ("Prelude","(,,,)") [TCons ("AnnotatedFlatCurry","AExpr") [TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]),TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,,)") [2,3,4,5]) (Var 5)])),Func ("LiftCase","liftCasesFunc.freE.17._#lambda4") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","notElem") [Comb FuncCall ("Prelude","fst") [Var 2]],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Prelude","fst") [],Var 1]])),Func ("LiftCase","liftCasesFunc.or.17") 4 Private (FuncType (TCons ("FlatCurry","TypeExpr") []) (FuncType (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","(,,,)") [TCons ("AnnotatedFlatCurry","AExpr") [TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]),TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]])) (FuncType (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","(,,,)") [TCons ("AnnotatedFlatCurry","AExpr") [TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]),TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]])) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","(,,,)") [TCons ("AnnotatedFlatCurry","AExpr") [TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]),TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]]))))) (Rule [1,2,3,4] (Let [(5,Comb FuncCall ("LiftCase","sequence") [Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude",":") [Var 3,Comb ConsCall ("Prelude","[]") []]],Var 4]),(6,Comb FuncCall ("LiftCase","liftCasesFunc.or.17._#selFP37#e1'") [Var 5]),(7,Comb FuncCall ("LiftCase","liftCasesFunc.or.17._#selFP38#e2'") [Var 5]),(8,Comb FuncCall ("LiftCase","liftCasesFunc.or.17._#selFP39#i'") [Var 5]),(9,Comb FuncCall ("LiftCase","liftCasesFunc.or.17._#selFP40#ff") [Var 5]),(10,Comb FuncCall ("LiftCase","liftCasesFunc.or.17._#selFP41#vs") [Var 5])] (Comb ConsCall ("Prelude","(,,,)") [Comb ConsCall ("AnnotatedFlatCurry","AOr") [Var 1,Var 6,Var 7],Var 8,Var 9,Var 10]))),Func ("LiftCase","liftCasesFunc.or.17._#selFP37#e1'") 1 Private (FuncType (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AExpr") [TCons ("FlatCurry","TypeExpr") []]],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]),TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]]) (TCons ("AnnotatedFlatCurry","AExpr") [TCons ("FlatCurry","TypeExpr") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,,)") [2,3,4,5]) (Case  Flex (Var 2) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case  Flex (Var 9) [Branch (Pattern ("Prelude","[]") []) (Var 6)])])])])),Func ("LiftCase","liftCasesFunc.or.17._#selFP38#e2'") 1 Private (FuncType (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AExpr") [TCons ("FlatCurry","TypeExpr") []]],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]),TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]]) (TCons ("AnnotatedFlatCurry","AExpr") [TCons ("FlatCurry","TypeExpr") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,,)") [2,3,4,5]) (Case  Flex (Var 2) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case  Flex (Var 9) [Branch (Pattern ("Prelude","[]") []) (Var 8)])])])])),Func ("LiftCase","liftCasesFunc.or.17._#selFP39#i'") 1 Private (FuncType (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AExpr") [TCons ("FlatCurry","TypeExpr") []]],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]),TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]]) (TCons ("Prelude","Int") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,,)") [2,3,4,5]) (Case  Flex (Var 2) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case  Flex (Var 9) [Branch (Pattern ("Prelude","[]") []) (Var 3)])])])])),Func ("LiftCase","liftCasesFunc.or.17._#selFP40#ff") 1 Private (FuncType (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AExpr") [TCons ("FlatCurry","TypeExpr") []]],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]),TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]]) (FuncType (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]))) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,,)") [2,3,4,5]) (Case  Flex (Var 2) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case  Flex (Var 9) [Branch (Pattern ("Prelude","[]") []) (Var 4)])])])])),Func ("LiftCase","liftCasesFunc.or.17._#selFP41#vs") 1 Private (FuncType (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AExpr") [TCons ("FlatCurry","TypeExpr") []]],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]),TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,,)") [2,3,4,5]) (Case  Flex (Var 2) [Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case  Flex (Var 9) [Branch (Pattern ("Prelude","[]") []) (Var 5)])])])])),Func ("LiftCase","liftCasesFunc.casE.17") 7 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("FlatCurry","TypeExpr") []) (FuncType (TCons ("FlatCurry","CaseType") []) (FuncType (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","(,,,)") [TCons ("AnnotatedFlatCurry","AExpr") [TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]),TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]])) (FuncType (TCons ("Prelude","[]") [FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","(,,,)") [TCons ("AnnotatedFlatCurry","ABranchExpr") [TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]),TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]])]) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","(,,,)") [TCons ("AnnotatedFlatCurry","AExpr") [TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]),TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]])))))))) (Rule [1,2,3,4,5,6,7] (Let [(8,Comb FuncCall ("Prelude","apply") [Var 5,Var 7]),(9,Comb FuncCall ("LiftCase","liftCasesFunc.casE.17._#selFP48#e'") [Var 8]),(10,Comb FuncCall ("LiftCase","liftCasesFunc.casE.17._#selFP49#i'") [Var 8]),(11,Comb FuncCall ("LiftCase","liftCasesFunc.casE.17._#selFP50#ffe") [Var 8]),(12,Comb FuncCall ("LiftCase","liftCasesFunc.casE.17._#selFP51#ve") [Var 8]),(13,Comb FuncCall ("LiftCase","sequence") [Var 6,Var 10]),(14,Comb FuncCall ("LiftCase","liftCasesFunc.casE.17._#selFP44#bs'") [Var 13]),(15,Comb FuncCall ("LiftCase","liftCasesFunc.casE.17._#selFP45#i''") [Var 13]),(16,Comb FuncCall ("LiftCase","liftCasesFunc.casE.17._#selFP46#ffbs") [Var 13]),(17,Comb FuncCall ("LiftCase","liftCasesFunc.casE.17._#selFP47#vbs") [Var 13]),(18,Comb FuncCall ("List","nub") [Comb FuncCall ("Prelude","++") [Var 12,Var 17]]),(19,Case  Rigid (Var 9) [Branch (Pattern ("AnnotatedFlatCurry","AVar") [20,21]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("List","delete") [],Comb ConsCall ("Prelude","(,)") [Var 21,Var 20]],Var 18]),Branch (Pattern ("AnnotatedFlatCurry","ALit") [22,23]) (Var 18),Branch (Pattern ("AnnotatedFlatCurry","AComb") [24,25,26,27]) (Var 18),Branch (Pattern ("AnnotatedFlatCurry","ALet") [28,29,30]) (Var 18),Branch (Pattern ("AnnotatedFlatCurry","AFree") [31,32,33]) (Var 18),Branch (Pattern ("AnnotatedFlatCurry","AOr") [34,35,36]) (Var 18),Branch (Pattern ("AnnotatedFlatCurry","ACase") [37,38,39,40]) (Var 18),Branch (Pattern ("AnnotatedFlatCurry","ATyped") [41,42,43]) (Var 18)])] (Comb ConsCall ("Prelude","(,,,)") [Comb FuncCall ("LiftCase","genFuncCall") [Var 2,Var 1,Var 15,Var 3,Var 19,Var 9],Comb FuncCall ("Prelude","+") [Var 15,Lit (Intc  1)],Comb FuncCall ("Prelude",".") [Comb (ConsPartCall 1) ("Prelude",":") [Comb FuncCall ("LiftCase","genFunc") [Var 2,Var 1,Var 15,Var 3,Var 19,Var 9,Var 4,Var 14]],Comb FuncCall ("Prelude",".") [Var 11,Var 16]],Var 18]))),Func ("LiftCase","liftCasesFunc.casE.17._#selFP48#e'") 1 Private (FuncType (TCons ("Prelude","(,,,)") [TCons ("AnnotatedFlatCurry","AExpr") [TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]),TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]]) (TCons ("AnnotatedFlatCurry","AExpr") [TCons ("FlatCurry","TypeExpr") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,,)") [2,3,4,5]) (Var 2)])),Func ("LiftCase","liftCasesFunc.casE.17._#selFP49#i'") 1 Private (FuncType (TCons ("Prelude","(,,,)") [TCons ("AnnotatedFlatCurry","AExpr") [TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]),TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]]) (TCons ("Prelude","Int") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,,)") [2,3,4,5]) (Var 3)])),Func ("LiftCase","liftCasesFunc.casE.17._#selFP50#ffe") 1 Private (FuncType (TCons ("Prelude","(,,,)") [TCons ("AnnotatedFlatCurry","AExpr") [TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]),TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]]) (FuncType (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]))) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,,)") [2,3,4,5]) (Var 4)])),Func ("LiftCase","liftCasesFunc.casE.17._#selFP51#ve") 1 Private (FuncType (TCons ("Prelude","(,,,)") [TCons ("AnnotatedFlatCurry","AExpr") [TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]),TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,,)") [2,3,4,5]) (Var 5)])),Func ("LiftCase","liftCasesFunc.casE.17._#selFP44#bs'") 1 Private (FuncType (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","ABranchExpr") [TCons ("FlatCurry","TypeExpr") []]],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]),TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]]) (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","ABranchExpr") [TCons ("FlatCurry","TypeExpr") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,,)") [2,3,4,5]) (Var 2)])),Func ("LiftCase","liftCasesFunc.casE.17._#selFP45#i''") 1 Private (FuncType (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","ABranchExpr") [TCons ("FlatCurry","TypeExpr") []]],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]),TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]]) (TCons ("Prelude","Int") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,,)") [2,3,4,5]) (Var 3)])),Func ("LiftCase","liftCasesFunc.casE.17._#selFP46#ffbs") 1 Private (FuncType (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","ABranchExpr") [TCons ("FlatCurry","TypeExpr") []]],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]),TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]]) (FuncType (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]))) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,,)") [2,3,4,5]) (Var 4)])),Func ("LiftCase","liftCasesFunc.casE.17._#selFP47#vbs") 1 Private (FuncType (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","ABranchExpr") [TCons ("FlatCurry","TypeExpr") []]],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]),TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,,)") [2,3,4,5]) (Var 5)])),Func ("LiftCase","liftCasesFunc.branch.17") 3 Private (FuncType (TCons ("AnnotatedFlatCurry","APattern") [TCons ("FlatCurry","TypeExpr") []]) (FuncType (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","(,,,)") [TCons ("AnnotatedFlatCurry","AExpr") [TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]),TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]])) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","(,,,)") [TCons ("AnnotatedFlatCurry","ABranchExpr") [TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]),TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]])))) (Rule [1,2,3] (Let [(4,Comb FuncCall ("Prelude","apply") [Var 2,Var 3]),(5,Comb FuncCall ("LiftCase","liftCasesFunc.branch.17._#selFP53#e'") [Var 4]),(6,Comb FuncCall ("LiftCase","liftCasesFunc.branch.17._#selFP54#i'") [Var 4]),(7,Comb FuncCall ("LiftCase","liftCasesFunc.branch.17._#selFP55#ff") [Var 4]),(8,Comb FuncCall ("LiftCase","liftCasesFunc.branch.17._#selFP56#ve") [Var 4])] (Comb ConsCall ("Prelude","(,,,)") [Comb ConsCall ("AnnotatedFlatCurry","ABranch") [Var 1,Var 5],Var 6,Var 7,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("LiftCase","removePVars") [Var 8],Var 1]]))),Func ("LiftCase","liftCasesFunc.branch.17._#selFP53#e'") 1 Private (FuncType (TCons ("Prelude","(,,,)") [TCons ("AnnotatedFlatCurry","AExpr") [TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]),TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]]) (TCons ("AnnotatedFlatCurry","AExpr") [TCons ("FlatCurry","TypeExpr") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,,)") [2,3,4,5]) (Var 2)])),Func ("LiftCase","liftCasesFunc.branch.17._#selFP54#i'") 1 Private (FuncType (TCons ("Prelude","(,,,)") [TCons ("AnnotatedFlatCurry","AExpr") [TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]),TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]]) (TCons ("Prelude","Int") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,,)") [2,3,4,5]) (Var 3)])),Func ("LiftCase","liftCasesFunc.branch.17._#selFP55#ff") 1 Private (FuncType (TCons ("Prelude","(,,,)") [TCons ("AnnotatedFlatCurry","AExpr") [TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]),TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]]) (FuncType (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]))) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,,)") [2,3,4,5]) (Var 4)])),Func ("LiftCase","liftCasesFunc.branch.17._#selFP56#ve") 1 Private (FuncType (TCons ("Prelude","(,,,)") [TCons ("AnnotatedFlatCurry","AExpr") [TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]),TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,,)") [2,3,4,5]) (Var 5)])),Func ("LiftCase","liftCasesFunc.typed.17") 4 Private (FuncType (TCons ("FlatCurry","TypeExpr") []) (FuncType (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","(,,,)") [TCons ("AnnotatedFlatCurry","AExpr") [TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]),TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]])) (FuncType (TCons ("FlatCurry","TypeExpr") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","(,,,)") [TCons ("AnnotatedFlatCurry","AExpr") [TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]),TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]]))))) (Rule [1,2,3,4] (Let [(5,Comb FuncCall ("Prelude","apply") [Var 2,Var 4]),(6,Comb FuncCall ("LiftCase","liftCasesFunc.typed.17._#selFP58#e'") [Var 5]),(7,Comb FuncCall ("LiftCase","liftCasesFunc.typed.17._#selFP59#i'") [Var 5]),(8,Comb FuncCall ("LiftCase","liftCasesFunc.typed.17._#selFP60#ff") [Var 5]),(9,Comb FuncCall ("LiftCase","liftCasesFunc.typed.17._#selFP61#ve") [Var 5])] (Comb ConsCall ("Prelude","(,,,)") [Comb ConsCall ("AnnotatedFlatCurry","ATyped") [Var 1,Var 6,Var 3],Var 7,Var 8,Var 9]))),Func ("LiftCase","liftCasesFunc.typed.17._#selFP58#e'") 1 Private (FuncType (TCons ("Prelude","(,,,)") [TCons ("AnnotatedFlatCurry","AExpr") [TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]),TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]]) (TCons ("AnnotatedFlatCurry","AExpr") [TCons ("FlatCurry","TypeExpr") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,,)") [2,3,4,5]) (Var 2)])),Func ("LiftCase","liftCasesFunc.typed.17._#selFP59#i'") 1 Private (FuncType (TCons ("Prelude","(,,,)") [TCons ("AnnotatedFlatCurry","AExpr") [TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]),TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]]) (TCons ("Prelude","Int") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,,)") [2,3,4,5]) (Var 3)])),Func ("LiftCase","liftCasesFunc.typed.17._#selFP60#ff") 1 Private (FuncType (TCons ("Prelude","(,,,)") [TCons ("AnnotatedFlatCurry","AExpr") [TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]),TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]]) (FuncType (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]))) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,,)") [2,3,4,5]) (Var 4)])),Func ("LiftCase","liftCasesFunc.typed.17._#selFP61#ve") 1 Private (FuncType (TCons ("Prelude","(,,,)") [TCons ("AnnotatedFlatCurry","AExpr") [TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]),TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,,)") [2,3,4,5]) (Var 5)])),Func ("LiftCase","liftCasesFunc._#selFP67#e'") 1 Private (FuncType (TCons ("Prelude","(,,,)") [TCons ("AnnotatedFlatCurry","AExpr") [TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]),TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]]) (TCons ("AnnotatedFlatCurry","AExpr") [TCons ("FlatCurry","TypeExpr") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,,)") [2,3,4,5]) (Var 2)])),Func ("LiftCase","liftCasesFunc._#selFP68#i'") 1 Private (FuncType (TCons ("Prelude","(,,,)") [TCons ("AnnotatedFlatCurry","AExpr") [TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]),TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]]) (TCons ("Prelude","Int") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,,)") [2,3,4,5]) (Var 3)])),Func ("LiftCase","liftCasesFunc._#selFP69#ffe") 1 Private (FuncType (TCons ("Prelude","(,,,)") [TCons ("AnnotatedFlatCurry","AExpr") [TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]),TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]]) (FuncType (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]))) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,,)") [2,3,4,5]) (Var 4)])),Func ("LiftCase","liftCasesFunc._#lambda2") 2 Private (FuncType (FuncType (TCons ("AnnotatedFlatCurry","AExpr") [TCons ("FlatCurry","TypeExpr") []]) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","(,,,)") [TCons ("AnnotatedFlatCurry","AExpr") [TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]),TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]]))) (FuncType (TCons ("AnnotatedFlatCurry","ABranchExpr") [TCons ("FlatCurry","TypeExpr") []]) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","(,,,)") [TCons ("AnnotatedFlatCurry","ABranchExpr") [TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]),TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]])))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("AnnotatedFlatCurry","ABranch") [3,4]) (Comb (FuncPartCall 1) ("LiftCase","liftCasesFunc.branch.17") [Var 3,Comb FuncCall ("Prelude","apply") [Var 1,Var 4]])])),Func ("LiftCase","liftCasesFunc._#selFP64#bs'") 1 Private (FuncType (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","ABranchExpr") [TCons ("FlatCurry","TypeExpr") []]],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]),TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]]) (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","ABranchExpr") [TCons ("FlatCurry","TypeExpr") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,,)") [2,3,4,5]) (Var 2)])),Func ("LiftCase","liftCasesFunc._#selFP65#i''") 1 Private (FuncType (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","ABranchExpr") [TCons ("FlatCurry","TypeExpr") []]],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]),TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]]) (TCons ("Prelude","Int") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,,)") [2,3,4,5]) (Var 3)])),Func ("LiftCase","liftCasesFunc._#selFP66#ffbs") 1 Private (FuncType (TCons ("Prelude","(,,,)") [TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","ABranchExpr") [TCons ("FlatCurry","TypeExpr") []]],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]),TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]]) (FuncType (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]))) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,,)") [2,3,4,5]) (Var 4)])),Func ("LiftCase","liftCasesFunc._#selFP70#exp") 1 Private (FuncType (TCons ("Prelude","(,,,)") [TCons ("AnnotatedFlatCurry","AExpr") [TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]),TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]]) (TCons ("AnnotatedFlatCurry","AExpr") [TCons ("FlatCurry","TypeExpr") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,,)") [2,3,4,5]) (Var 2)])),Func ("LiftCase","liftCasesFunc._#selFP71#iMain") 1 Private (FuncType (TCons ("Prelude","(,,,)") [TCons ("AnnotatedFlatCurry","AExpr") [TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]),TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]]) (TCons ("Prelude","Int") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,,)") [2,3,4,5]) (Var 3)])),Func ("LiftCase","liftCasesFunc._#selFP72#ffeMain") 1 Private (FuncType (TCons ("Prelude","(,,,)") [TCons ("AnnotatedFlatCurry","AExpr") [TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],FuncType (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]),TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]]) (FuncType (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]))) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,,)") [2,3,4,5]) (Var 4)])),Func ("LiftCase","genFuncCall") 6 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("FlatCurry","TypeExpr") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]) (FuncType (TCons ("AnnotatedFlatCurry","AExpr") [TCons ("FlatCurry","TypeExpr") []]) (TCons ("AnnotatedFlatCurry","AExpr") [TCons ("FlatCurry","TypeExpr") []]))))))) (Rule [1,2,3,4,5,6] (Let [(7,Comb FuncCall ("Prelude","foldr") [Comb (ConsPartCall 2) ("FlatCurry","FuncType") [],Comb ConsCall ("FlatCurry","FuncType") [Comb FuncCall ("AnnotatedFlatCurryGoodies","annExpr") [Var 6],Var 4],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Prelude","snd") [],Var 5]])] (Comb ConsCall ("AnnotatedFlatCurry","AComb") [Var 4,Comb ConsCall ("FlatCurry","FuncCall") [],Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("LiftCase","newName") [Var 1,Var 2,Var 3],Var 7],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Prelude","uncurry") [Comb (FuncPartCall 2) ("Prelude","flip") [Comb (ConsPartCall 2) ("AnnotatedFlatCurry","AVar") []]],Var 5],Comb ConsCall ("Prelude",":") [Var 6,Comb ConsCall ("Prelude","[]") []]]]))),Func ("LiftCase","genFunc") 8 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("FlatCurry","TypeExpr") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]) (FuncType (TCons ("AnnotatedFlatCurry","AExpr") [TCons ("FlatCurry","TypeExpr") []]) (FuncType (TCons ("FlatCurry","CaseType") []) (FuncType (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","ABranchExpr") [TCons ("FlatCurry","TypeExpr") []]]) (TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]))))))))) (Rule [1,2,3,4,5,6,7,8] (Let [(9,Comb FuncCall ("AnnotatedFlatCurryGoodies","annExpr") [Var 6]),(10,Case  Rigid (Var 6) [Branch (Pattern ("AnnotatedFlatCurry","AVar") [11,12]) (Var 12),Branch (Pattern ("AnnotatedFlatCurry","ALit") [13,14]) (Comb FuncCall ("LiftCase","nextLocalName") [Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Prelude","fst") [],Var 5],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","concatMap") [Comb (FuncPartCall 1) ("LiftCase","genFunc.allVarsBranch.82") []],Var 8]]]),Branch (Pattern ("AnnotatedFlatCurry","AComb") [15,16,17,18]) (Comb FuncCall ("LiftCase","nextLocalName") [Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Prelude","fst") [],Var 5],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","concatMap") [Comb (FuncPartCall 1) ("LiftCase","genFunc.allVarsBranch.82") []],Var 8]]]),Branch (Pattern ("AnnotatedFlatCurry","ALet") [19,20,21]) (Comb FuncCall ("LiftCase","nextLocalName") [Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Prelude","fst") [],Var 5],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","concatMap") [Comb (FuncPartCall 1) ("LiftCase","genFunc.allVarsBranch.82") []],Var 8]]]),Branch (Pattern ("AnnotatedFlatCurry","AFree") [22,23,24]) (Comb FuncCall ("LiftCase","nextLocalName") [Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Prelude","fst") [],Var 5],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","concatMap") [Comb (FuncPartCall 1) ("LiftCase","genFunc.allVarsBranch.82") []],Var 8]]]),Branch (Pattern ("AnnotatedFlatCurry","AOr") [25,26,27]) (Comb FuncCall ("LiftCase","nextLocalName") [Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Prelude","fst") [],Var 5],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","concatMap") [Comb (FuncPartCall 1) ("LiftCase","genFunc.allVarsBranch.82") []],Var 8]]]),Branch (Pattern ("AnnotatedFlatCurry","ACase") [28,29,30,31]) (Comb FuncCall ("LiftCase","nextLocalName") [Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Prelude","fst") [],Var 5],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","concatMap") [Comb (FuncPartCall 1) ("LiftCase","genFunc.allVarsBranch.82") []],Var 8]]]),Branch (Pattern ("AnnotatedFlatCurry","ATyped") [32,33,34]) (Comb FuncCall ("LiftCase","nextLocalName") [Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Prelude","fst") [],Var 5],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","concatMap") [Comb (FuncPartCall 1) ("LiftCase","genFunc.allVarsBranch.82") []],Var 8]]])]),(35,Comb FuncCall ("Prelude","++") [Var 5,Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Var 10,Var 9],Comb ConsCall ("Prelude","[]") []]]),(36,Comb FuncCall ("Prelude","foldr") [Comb (ConsPartCall 2) ("FlatCurry","FuncType") [],Var 4,Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Prelude","snd") [],Var 35]]),(37,Comb ConsCall ("AnnotatedFlatCurry","ARule") [Var 36,Var 35,Comb ConsCall ("AnnotatedFlatCurry","ACase") [Var 4,Var 7,Comb ConsCall ("AnnotatedFlatCurry","AVar") [Var 9,Var 10],Var 8]])] (Comb ConsCall ("AnnotatedFlatCurry","AFunc") [Comb FuncCall ("LiftCase","newName") [Var 1,Var 2,Var 3],Comb FuncCall ("Prelude","length") [Var 35],Comb ConsCall ("FlatCurry","Private") [],Var 36,Var 37]))),Func ("LiftCase","genFunc.allVarsBranch.82") 1 Private (FuncType (TCons ("AnnotatedFlatCurry","ABranchExpr") [TVar 0]) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("AnnotatedFlatCurry","ABranch") [2,3]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("AnnotatedFlatCurryGoodies","trPattern") [Comb (FuncPartCall 3) ("LiftCase","genFunc.allVarsBranch.82._#lambda7") [],Comb (FuncPartCall 2) ("LiftCase","genFunc.allVarsBranch.82._#lambda8") [],Var 2],Comb FuncCall ("AnnotatedFlatCurryGoodies","allVars") [Var 3]])])),Func ("LiftCase","genFunc.allVarsBranch.82._#lambda7") 3 Private (FuncType (TVar 81) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TVar 81]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TVar 81]]) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []])))) (Rule [1,2,3] (Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Prelude","fst") [],Var 3])),Func ("LiftCase","genFunc.allVarsBranch.82._#lambda8") 2 Private (FuncType (TVar 81) (FuncType (TCons ("FlatCurry","Literal") []) (TCons ("Prelude","[]") [TVar 82]))) (Rule [1,2] (Comb ConsCall ("Prelude","[]") [])),Func ("LiftCase","removePVars") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]) (FuncType (TCons ("AnnotatedFlatCurry","APattern") [TCons ("FlatCurry","TypeExpr") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]))) (Rule [1] (Comb (FuncPartCall 1) ("AnnotatedFlatCurryGoodies","trPattern") [Comb (FuncPartCall 3) ("LiftCase","removePVars._#lambda9") [Var 1],Comb (FuncPartCall 2) ("LiftCase","removePVars._#lambda11") [Var 1]])),Func ("LiftCase","removePVars._#lambda9") 4 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]) (FuncType (TCons ("FlatCurry","TypeExpr") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("FlatCurry","TypeExpr") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]))))) (Rule [1,2,3,4] (Comb FuncCall ("Prelude","filter") [Comb (FuncPartCall 1) ("LiftCase","removePVars._#lambda9._#lambda10") [Var 4],Var 1])),Func ("LiftCase","removePVars._#lambda9._#lambda10") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","notElem") [Comb FuncCall ("Prelude","fst") [Var 2]],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Prelude","fst") [],Var 1]])),Func ("LiftCase","removePVars._#lambda11") 3 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]) (FuncType (TCons ("FlatCurry","TypeExpr") []) (FuncType (TCons ("FlatCurry","Literal") []) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]])))) (Rule [1,2,3] (Var 1)),Func ("LiftCase","genAuxName") 0 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Comb (FuncPartCall 1) ("Prelude","foldl") [Comb (FuncPartCall 2) ("LiftCase","addUnderscores") [],Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude","[]") []]]]]]]])),Func ("LiftCase","addUnderscores") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1,2] (Case  Rigid (Comb FuncCall ("List","isPrefixOf") [Var 1,Var 2]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("LiftCase","addUnderscores") [Comb FuncCall ("Prelude","++") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude","[]") []]],Var 2]),Branch (Pattern ("Prelude","False") []) (Var 1)])),Func ("LiftCase","newName") 3 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])))) (Rule [1,2,3] (Comb ConsCall ("Prelude","(,)") [Var 1,Comb FuncCall ("Prelude","++") [Var 2,Comb FuncCall ("Prelude","show") [Var 3]]])),Func ("LiftCase","nextLocalName") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","Int") [])) (Rule [1] (Comb FuncCall ("Prelude","+") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Prelude","max") [],Lit (Intc  0),Var 1],Lit (Intc  1)]))] []