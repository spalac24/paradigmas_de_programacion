Prog "Analysis" ["Base","Dependency2","FiniteMap","FlatCurry","FlatCurryGoodies","List","Maybe","Names","Prelude"] [TypeSyn ("Analysis","Map") Public [0] (TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TVar 0]),TypeSyn ("Analysis","AnalysisFunction") Public [0,1] (FuncType (TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TVar 1]) (FuncType (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]]) (TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TVar 1]))),TypeSyn ("Analysis","NDResult") Public [] (TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Base","NDClass") []]),TypeSyn ("Analysis","HOResult") Public [] (TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Base","HOClass") []]),Type ("Analysis","Declaration") Public [] [Cons ("Analysis","F") 1 Public [TCons ("FlatCurry","FuncDecl") []],Cons ("Analysis","T") 1 Public [TCons ("FlatCurry","TypeDecl") []]],Type ("Analysis","Visibilities") Public [] [Cons ("Analysis","Vis") 3 Public [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]],TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]],TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]],TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]]]]] [Func ("Analysis","getDeclName") 1 Public (FuncType (TCons ("Analysis","Declaration") []) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Rigid (Var 1) [Branch (Pattern ("Analysis","F") [2]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FlatCurryGoodies","funcName") [],Var 2]),Branch (Pattern ("Analysis","T") [3]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FlatCurryGoodies","typeName") [],Var 3])])),Func ("Analysis","getFunctionCalls") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("FlatCurry","FuncDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]]])) (Rule [1] (Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Analysis","getFunctionCalls._#lambda2") [],Var 1])),Func ("Analysis","getFunctionCalls._#lambda2") 1 Private (FuncType (TCons ("FlatCurry","FuncDecl") []) (TCons ("Prelude","(,)") [TCons ("FlatCurry","FuncDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]])) (Rule [1] (Comb ConsCall ("Prelude","(,)") [Var 1,Comb FuncCall ("Dependency2","callsDirectly") [Var 1]])),Func ("Analysis","getCalls") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Analysis","Declaration") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Analysis","Declaration") [],TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]]])) (Rule [1] (Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Analysis","getCalls._#lambda4") [],Var 1])),Func ("Analysis","getCalls.callHelp.11") 1 Private (FuncType (TCons ("Analysis","Declaration") []) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Case  Rigid (Var 1) [Branch (Pattern ("Analysis","F") [2]) (Comb FuncCall ("Dependency2","callsDirectly") [Var 2]),Branch (Pattern ("Analysis","T") [3]) (Comb FuncCall ("Dependency2","callsDirectly2") [Var 3])])),Func ("Analysis","getCalls._#lambda4") 1 Private (FuncType (TCons ("Analysis","Declaration") []) (TCons ("Prelude","(,)") [TCons ("Analysis","Declaration") [],TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]])) (Rule [1] (Comb ConsCall ("Prelude","(,)") [Var 1,Comb FuncCall ("Analysis","getCalls.callHelp.11") [Var 1]])),Func ("Analysis","fullIteration") 4 Public (FuncType (FuncType (TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TVar 0]) (FuncType (TCons ("Prelude","(,)") [TVar 1,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]]) (TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TVar 0]))) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 1,TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]]]) (FuncType (TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TVar 0]) (FuncType (TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TVar 0]) (TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TVar 0]))))) (Rule [1,2,3,4] (Let [(5,Comb FuncCall ("Prelude","$") [Comb FuncCall ("FiniteMap","listToFM") [Comb (FuncPartCall 2) ("Prelude","<") []],Comb FuncCall ("Prelude","map") [Comb FuncCall ("Prelude","apply") [Var 1,Comb FuncCall ("FiniteMap","plusFM") [Var 3,Var 4]],Var 2]])] (Case  Rigid (Comb FuncCall ("FiniteMap","eqFM") [Var 4,Var 5]) [Branch (Pattern ("Prelude","True") []) (Var 4),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Analysis","fullIteration") [Var 1,Var 2,Var 3,Var 5])]))),Func ("Analysis","initNDResult") 0 Public (TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Base","NDClass") []]) (Rule [] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FiniteMap","listToFM") [Comb (FuncPartCall 2) ("Prelude","<") []],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Analysis","qmark") [],Comb ConsCall ("Base","ND") []],Comb ConsCall ("Prelude","[]") []]])),Func ("Analysis","analyseND") 2 Public (FuncType (TCons ("FlatCurry","Prog") []) (FuncType (TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Base","NDClass") []]) (TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Base","NDClass") []]))) (Rule [1,2] (Let [(3,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FlatCurryGoodies","progFuncs") [],Var 1]),(4,Comb FuncCall ("Prelude","$") [Comb FuncCall ("FiniteMap","listToFM") [Comb (FuncPartCall 2) ("Prelude","<") []],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Analysis","analyseND.initValue.26") [],Var 3]])] (Comb FuncCall ("Analysis","fullIteration") [Comb (FuncPartCall 2) ("Analysis","ndFunc") [],Comb FuncCall ("Analysis","getFunctionCalls") [Var 3],Var 2,Var 4]))),Func ("Analysis","analyseND.initValue.26") 1 Private (FuncType (TCons ("FlatCurry","FuncDecl") []) (TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Base","NDClass") []])) (Rule [1] (Let [(2,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FlatCurryGoodies","funcName") [],Var 1])] (Comb ConsCall ("Prelude","(,)") [Var 2,Case  Rigid (Comb FuncCall ("Prelude","==") [Var 2,Comb FuncCall ("Analysis","qmark") []]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Base","ND") []),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Base","D") [])]]))),Func ("Analysis","ndFunc") 2 Public (FuncType (TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Base","NDClass") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("FlatCurry","FuncDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]]) (TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Base","NDClass") []]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [3,4]) (Let [(5,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FlatCurryGoodies","funcName") [],Var 3]),(6,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FlatCurryGoodies","funcRule") [],Var 3]),(7,Comb FuncCall ("Prelude","$") [Comb FuncCall ("Prelude","any") [Comb (FuncPartCall 1) ("Prelude","flip") [Comb (FuncPartCall 2) ("Prelude","==") [],Comb ConsCall ("Prelude","Just") [Comb ConsCall ("Base","ND") []]]],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("FiniteMap","lookupFM") [Var 1],Var 4]]),(8,Comb ConsCall ("Prelude","(,)") [Var 5,Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Maybe","fromJust") [],Comb FuncCall ("FiniteMap","lookupFM") [Var 1,Var 5]]])] (Case  Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FlatCurryGoodies","isRuleExternal") [],Var 6]) [Branch (Pattern ("Prelude","True") []) (Var 8),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Analysis","isNDExpr") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FlatCurryGoodies","ruleBody") [],Var 6]]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","(,)") [Var 5,Comb ConsCall ("Base","ND") []]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Var 7) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","(,)") [Var 5,Comb ConsCall ("Base","ND") []]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Var 8),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])]))])),Func ("Analysis","isNDExpr") 0 Public (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("Prelude","Bool") [])) (Rule [] (Comb (FuncPartCall 1) ("FlatCurryGoodies","trExpr") [Comb (FuncPartCall 1) ("Analysis","isNDExpr.cf.41") [],Comb (FuncPartCall 1) ("Analysis","isNDExpr.cf.41") [],Comb (FuncPartCall 3) ("Analysis","isNDExpr.combf.41") [],Comb (FuncPartCall 2) ("Analysis","isNDExpr.letf.41") [],Comb (FuncPartCall 2) ("Analysis","isNDExpr.freef.41") [],Comb (FuncPartCall 2) ("Analysis","isNDExpr.orf.41") [],Comb (FuncPartCall 3) ("Analysis","isNDExpr.casef.41") [],Comb (FuncPartCall 2) ("Analysis","isNDExpr.branchf.41") [],Comb (FuncPartCall 2) ("Analysis","isNDExpr.typedf.41") []])),Func ("Analysis","isNDExpr.cf.41") 1 Private (FuncType (TVar 0) (TCons ("Prelude","Bool") [])) (Rule [1] (Comb FuncCall ("Prelude","const") [Comb ConsCall ("Prelude","False") [],Var 1])),Func ("Analysis","isNDExpr.combf.41") 3 Private (FuncType (TVar 0) (FuncType (TVar 1) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Bool") []]) (TCons ("Prelude","Bool") [])))) (Rule [1,2,3] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","or") [],Var 3])),Func ("Analysis","isNDExpr.letf.41") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Bool") []]]) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Comb FuncCall ("Prelude","$") [Comb FuncCall ("Prelude","or") [],Comb ConsCall ("Prelude",":") [Var 2,Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Prelude","snd") [],Var 1]]])),Func ("Analysis","isNDExpr.freef.41") 2 Private (FuncType (TVar 0) (FuncType (TVar 1) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Comb ConsCall ("Prelude","True") [])),Func ("Analysis","isNDExpr.orf.41") 2 Private (FuncType (TVar 0) (FuncType (TVar 1) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Comb ConsCall ("Prelude","True") [])),Func ("Analysis","isNDExpr.casef.41") 3 Private (FuncType (TVar 0) (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Bool") []]) (TCons ("Prelude","Bool") [])))) (Rule [1,2,3] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","or") [],Comb ConsCall ("Prelude",":") [Var 2,Var 3]])),Func ("Analysis","isNDExpr.branchf.41") 2 Private (FuncType (TVar 0) (FuncType (TVar 1) (TVar 1))) (Rule [1,2] (Var 2)),Func ("Analysis","isNDExpr.typedf.41") 2 Private (FuncType (TVar 0) (FuncType (TVar 1) (TVar 0))) (Rule [1,2] (Var 1)),Func ("Analysis","qmark") 0 Public (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (Rule [] (Comb FuncCall ("Names","renameQName") [Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Names","prelude") [],Comb ConsCall ("Prelude",":") [Lit (Charc  '?'),Comb ConsCall ("Prelude","[]") []]]])),Func ("Analysis","initHOResult") 0 Public (TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Base","HOClass") []]) (Rule [] (Comb FuncCall ("FiniteMap","emptyFM") [Comb (FuncPartCall 2) ("Prelude","<") []])),Func ("Analysis","analyseHOFunc") 2 Public (FuncType (TCons ("FlatCurry","Prog") []) (FuncType (TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Base","HOClass") []]) (TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Base","HOClass") []]))) (Rule [1,2] (Let [(3,Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Prelude","map") [Comb (ConsPartCall 1) ("Analysis","F") []],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FlatCurryGoodies","progFuncs") [],Var 1]]),(4,Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Prelude","map") [Comb (ConsPartCall 1) ("Analysis","T") []],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FlatCurryGoodies","progTypes") [],Var 1]]),(5,Comb FuncCall ("Prelude","++") [Var 3,Var 4]),(6,Comb FuncCall ("Prelude","$") [Comb FuncCall ("FiniteMap","listToFM") [Comb (FuncPartCall 2) ("Prelude","<") []],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Analysis","analyseHOFunc._#lambda5") [],Var 5]])] (Comb FuncCall ("Analysis","fullIteration") [Comb (FuncPartCall 2) ("Analysis","ordFunc") [],Comb FuncCall ("Analysis","getCalls") [Var 5],Var 2,Var 6]))),Func ("Analysis","analyseHOFunc._#lambda5") 1 Private (FuncType (TCons ("Analysis","Declaration") []) (TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Base","HOClass") []])) (Rule [1] (Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Analysis","getDeclName") [Var 1],Comb ConsCall ("Base","FO") []])),Func ("Analysis","analyseHOCons") 1 Public (FuncType (TCons ("FlatCurry","Prog") []) (TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Base","HOClass") []])) (Rule [1] (Comb FuncCall ("Prelude","$") [Comb FuncCall ("FiniteMap","listToFM") [Comb (FuncPartCall 2) ("Prelude","<") []],Comb FuncCall ("Prelude","$") [Comb (ConsPartCall 1) ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]],Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude",":") [Lit (Charc  'S'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]],Comb ConsCall ("Base","FO") []]],Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Prelude","map") [Comb (FuncPartCall 1) ("Analysis","consOrder") []],Comb FuncCall ("Prelude","$") [Comb FuncCall ("Prelude","concatMap") [Comb FuncCall ("FlatCurryGoodies","typeConsDecls") []],Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Prelude","filter") [Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","not") [],Comb FuncCall ("FlatCurryGoodies","isTypeSyn") []]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FlatCurryGoodies","progTypes") [],Var 1]]]]]])),Func ("Analysis","consOrder") 1 Public (FuncType (TCons ("FlatCurry","ConsDecl") []) (TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Base","HOClass") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","Cons") [2,3,4,5]) (Comb ConsCall ("Prelude","(,)") [Var 2,Comb FuncCall ("Analysis","consOrder.consOrder'.84") [Var 5]])])),Func ("Analysis","consOrder.consOrder'.84") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","TypeExpr") []]) (TCons ("Base","HOClass") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Base","FO") []),Branch (Pattern ("Prelude",":") [2,3]) (Case  Rigid (Var 2) [Branch (Pattern ("FlatCurry","FuncType") [4,5]) (Comb ConsCall ("Base","HO") []),Branch (Pattern ("FlatCurry","TCons") [6,7]) (Comb FuncCall ("Analysis","consOrder.consOrder'.84") [Comb FuncCall ("Prelude","++") [Var 7,Var 3]]),Branch (Pattern ("FlatCurry","TVar") [8]) (Comb FuncCall ("Analysis","consOrder.consOrder'.84") [Var 3])])])),Func ("Analysis","hoOr") 2 Public (FuncType (TCons ("Base","HOClass") []) (FuncType (TCons ("Base","HOClass") []) (TCons ("Base","HOClass") []))) (Rule [1,2] (Case  Flex (Var 1) [Branch (Pattern ("Base","HO") []) (Comb ConsCall ("Base","HO") []),Branch (Pattern ("Base","FO") []) (Var 2)])),Func ("Analysis","ordFunc") 2 Public (FuncType (TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Base","HOClass") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Analysis","Declaration") [],TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]]) (TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Base","HOClass") []]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [3,4]) (Case  Flex (Var 3) [Branch (Pattern ("Analysis","T") [5]) (Case  Flex (Var 5) [Branch (Pattern ("FlatCurry","Type") [6,7,8,9]) (Comb ConsCall ("Prelude","(,)") [Var 6,Comb FuncCall ("Analysis","goThroughConsList") [Var 1,Var 9]]),Branch (Pattern ("FlatCurry","TypeSyn") [10,11,12,13]) (Comb ConsCall ("Prelude","(,)") [Var 10,Comb FuncCall ("Analysis","ordHelp1") [Var 1,Var 13]])]),Branch (Pattern ("Analysis","F") [14]) (Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FlatCurryGoodies","funcName") [],Var 14],Comb FuncCall ("Analysis","ordHelp2") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FlatCurryGoodies","funcType") [],Var 14],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FlatCurryGoodies","funcArity") [],Var 14],Var 1]])])])),Func ("Analysis","goThroughConsList") 2 Public (FuncType (TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Base","HOClass") []]) (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","ConsDecl") []]) (TCons ("Base","HOClass") []))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Base","FO") []),Branch (Pattern ("Prelude",":") [3,4]) (Case  Flex (Var 3) [Branch (Pattern ("FlatCurry","Cons") [5,6,7,8]) (Comb FuncCall ("Analysis","hoOr") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Analysis","goThroughConsList._#lambda7") [Var 1],Comb ConsCall ("Base","FO") [],Var 8],Comb FuncCall ("Analysis","goThroughConsList") [Var 1,Var 4]])])])),Func ("Analysis","goThroughConsList._#lambda7") 3 Private (FuncType (TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Base","HOClass") []]) (FuncType (TCons ("FlatCurry","TypeExpr") []) (FuncType (TCons ("Base","HOClass") []) (TCons ("Base","HOClass") [])))) (Rule [1,2,3] (Comb FuncCall ("Analysis","hoOr") [Var 3,Comb FuncCall ("Analysis","ordHelp1") [Var 1,Var 2]])),Func ("Analysis","ordHelp1") 2 Public (FuncType (TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Base","HOClass") []]) (FuncType (TCons ("FlatCurry","TypeExpr") []) (TCons ("Base","HOClass") []))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("FlatCurry","TVar") [3]) (Comb ConsCall ("Base","FO") []),Branch (Pattern ("FlatCurry","FuncType") [4,5]) (Comb ConsCall ("Base","HO") []),Branch (Pattern ("FlatCurry","TCons") [6,7]) (Comb FuncCall ("Analysis","hoOr") [Comb FuncCall ("Maybe","fromMaybe") [Comb ConsCall ("Base","FO") [],Comb FuncCall ("FiniteMap","lookupFM") [Var 1,Var 6]],Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Analysis","ordHelp1._#lambda8") [Var 1],Comb ConsCall ("Base","FO") [],Var 7]])])),Func ("Analysis","ordHelp1._#lambda8") 3 Private (FuncType (TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Base","HOClass") []]) (FuncType (TCons ("FlatCurry","TypeExpr") []) (FuncType (TCons ("Base","HOClass") []) (TCons ("Base","HOClass") [])))) (Rule [1,2,3] (Comb FuncCall ("Analysis","hoOr") [Var 3,Comb FuncCall ("Analysis","ordHelp1") [Var 1,Var 2]])),Func ("Analysis","ordHelp2") 3 Public (FuncType (TCons ("FlatCurry","TypeExpr") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Base","HOClass") []]) (TCons ("Base","HOClass") [])))) (Rule [1,2,3] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 2,Lit (Intc  0)]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 1) [Branch (Pattern ("FlatCurry","FuncType") [4,5]) (Comb ConsCall ("Base","HO") []),Branch (Pattern ("FlatCurry","TCons") [6,7]) (Case  Rigid (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Let [(10,Comb FuncCall ("Analysis","ordHelp2") [Var 8,Lit (Intc  0),Var 3]),(11,Comb FuncCall ("Analysis","ordHelp2") [Comb ConsCall ("FlatCurry","TCons") [Var 6,Var 9],Lit (Intc  0),Var 3])] (Comb FuncCall ("Analysis","hoOr") [Var 10,Var 11])),Branch (Pattern ("Prelude","[]") []) (Case  Rigid (Var 6) [Branch (Pattern ("Prelude","(,)") [12,13]) (Comb FuncCall ("Maybe","fromMaybe") [Comb ConsCall ("Base","FO") [],Comb FuncCall ("FiniteMap","lookupFM") [Var 3,Comb ConsCall ("Prelude","(,)") [Var 12,Var 13]]])])]),Branch (Pattern ("FlatCurry","TVar") [14]) (Comb ConsCall ("Base","FO") [])]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Var 1) [Branch (Pattern ("FlatCurry","FuncType") [15,16]) (Let [(17,Comb FuncCall ("Analysis","ordHelp2") [Var 15,Lit (Intc  0),Var 3]),(18,Comb FuncCall ("Analysis","ordHelp2") [Var 16,Comb FuncCall ("Prelude","-") [Var 2,Lit (Intc  1)],Var 3])] (Comb FuncCall ("Analysis","hoOr") [Var 17,Var 18])),Branch (Pattern ("FlatCurry","TVar") [19]) (Comb FuncCall ("Prelude","failed") []),Branch (Pattern ("FlatCurry","TCons") [20,21]) (Comb FuncCall ("Prelude","failed") [])])])),Func ("Analysis","getPrivateFunc") 1 Public (FuncType (TCons ("Analysis","Visibilities") []) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Analysis","Vis") [2,3,4]) (Case  Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [5,6]) (Var 6)])])),Func ("Analysis","getPublicFunc") 1 Public (FuncType (TCons ("Analysis","Visibilities") []) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Analysis","Vis") [2,3,4]) (Case  Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [5,6]) (Var 5)])])),Func ("Analysis","getPrivateType") 1 Public (FuncType (TCons ("Analysis","Visibilities") []) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Analysis","Vis") [2,3,4]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Var 6)])])),Func ("Analysis","getPublicType") 1 Public (FuncType (TCons ("Analysis","Visibilities") []) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Analysis","Vis") [2,3,4]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Var 5)])])),Func ("Analysis","getPrivateCons") 1 Public (FuncType (TCons ("Analysis","Visibilities") []) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Analysis","Vis") [2,3,4]) (Case  Flex (Var 4) [Branch (Pattern ("Prelude","(,)") [5,6]) (Var 6)])])),Func ("Analysis","getPublicCons") 1 Public (FuncType (TCons ("Analysis","Visibilities") []) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Analysis","Vis") [2,3,4]) (Case  Flex (Var 4) [Branch (Pattern ("Prelude","(,)") [5,6]) (Var 5)])])),Func ("Analysis","analyzeVisibility") 1 Public (FuncType (TCons ("FlatCurry","Prog") []) (TCons ("Analysis","Visibilities") [])) (Rule [1] (Let [(2,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FlatCurryGoodies","progTypes") [],Var 1])] (Comb ConsCall ("Analysis","Vis") [Comb FuncCall ("Analysis","splitVisibleFuncs") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FlatCurryGoodies","progFuncs") [],Var 1]],Comb FuncCall ("Analysis","splitVisibleTypes") [Var 2],Comb FuncCall ("Analysis","splitVisibleCons") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","concatMap") [Comb FuncCall ("FlatCurryGoodies","typeConsDecls") []],Comb FuncCall ("Prelude","filter") [Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","not") [],Comb FuncCall ("FlatCurryGoodies","isTypeSyn") []],Var 2]]]]))),Func ("Analysis","splitVisibleFuncs") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]],TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]])) (Rule [1] (Let [(2,Comb FuncCall ("List","partition") [Comb (FuncPartCall 1) ("Analysis","splitVisibleFuncs._#lambda11") [],Var 1]),(3,Comb FuncCall ("Analysis","splitVisibleFuncs._#selFP2#pubs") [Var 2]),(4,Comb FuncCall ("Analysis","splitVisibleFuncs._#selFP3#privs") [Var 2])] (Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Prelude","map") [Comb FuncCall ("FlatCurryGoodies","funcName") [],Var 3],Comb FuncCall ("Prelude","map") [Comb FuncCall ("FlatCurryGoodies","funcName") [],Var 4]]))),Func ("Analysis","splitVisibleFuncs._#lambda11") 1 Private (FuncType (TCons ("FlatCurry","FuncDecl") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Comb FuncCall ("Prelude","==") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FlatCurryGoodies","funcVisibility") [],Var 1],Comb ConsCall ("FlatCurry","Public") []])),Func ("Analysis","splitVisibleFuncs._#selFP2#pubs") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []],TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]]) (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("Analysis","splitVisibleFuncs._#selFP3#privs") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []],TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]]) (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("Analysis","splitVisibleTypes") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","TypeDecl") []]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]],TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]])) (Rule [1] (Let [(2,Comb FuncCall ("List","partition") [Comb (FuncPartCall 1) ("Analysis","splitVisibleTypes._#lambda12") [],Var 1]),(3,Comb FuncCall ("Analysis","splitVisibleTypes._#selFP5#pubs") [Var 2]),(4,Comb FuncCall ("Analysis","splitVisibleTypes._#selFP6#privs") [Var 2])] (Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Prelude","map") [Comb FuncCall ("FlatCurryGoodies","typeName") [],Var 3],Comb FuncCall ("Prelude","map") [Comb FuncCall ("FlatCurryGoodies","typeName") [],Var 4]]))),Func ("Analysis","splitVisibleTypes._#lambda12") 1 Private (FuncType (TCons ("FlatCurry","TypeDecl") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Comb FuncCall ("Prelude","==") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FlatCurryGoodies","typeVisibility") [],Var 1],Comb ConsCall ("FlatCurry","Public") []])),Func ("Analysis","splitVisibleTypes._#selFP5#pubs") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("FlatCurry","TypeDecl") []],TCons ("Prelude","[]") [TCons ("FlatCurry","TypeDecl") []]]) (TCons ("Prelude","[]") [TCons ("FlatCurry","TypeDecl") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("Analysis","splitVisibleTypes._#selFP6#privs") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("FlatCurry","TypeDecl") []],TCons ("Prelude","[]") [TCons ("FlatCurry","TypeDecl") []]]) (TCons ("Prelude","[]") [TCons ("FlatCurry","TypeDecl") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("Analysis","splitVisibleCons") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","ConsDecl") []]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]],TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]])) (Rule [1] (Let [(2,Comb FuncCall ("List","partition") [Comb (FuncPartCall 1) ("Analysis","splitVisibleCons._#lambda13") [],Var 1]),(3,Comb FuncCall ("Analysis","splitVisibleCons._#selFP8#pubs") [Var 2]),(4,Comb FuncCall ("Analysis","splitVisibleCons._#selFP9#privs") [Var 2])] (Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Prelude","map") [Comb FuncCall ("FlatCurryGoodies","consName") [],Var 3],Comb FuncCall ("Prelude","map") [Comb FuncCall ("FlatCurryGoodies","consName") [],Var 4]]))),Func ("Analysis","splitVisibleCons._#lambda13") 1 Private (FuncType (TCons ("FlatCurry","ConsDecl") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Comb FuncCall ("Prelude","==") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FlatCurryGoodies","consVisibility") [],Var 1],Comb ConsCall ("FlatCurry","Public") []])),Func ("Analysis","splitVisibleCons._#selFP8#pubs") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("FlatCurry","ConsDecl") []],TCons ("Prelude","[]") [TCons ("FlatCurry","ConsDecl") []]]) (TCons ("Prelude","[]") [TCons ("FlatCurry","ConsDecl") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("Analysis","splitVisibleCons._#selFP9#privs") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("FlatCurry","ConsDecl") []],TCons ("Prelude","[]") [TCons ("FlatCurry","ConsDecl") []]]) (TCons ("Prelude","[]") [TCons ("FlatCurry","ConsDecl") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("Analysis","|++|") 2 Public (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TVar 1]]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TVar 1]]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TVar 1]]))) (Rule [1,2] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Case  Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [5,6]) (Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Prelude","++") [Var 3,Var 5],Comb FuncCall ("Prelude","++") [Var 4,Var 6]])])]))] []