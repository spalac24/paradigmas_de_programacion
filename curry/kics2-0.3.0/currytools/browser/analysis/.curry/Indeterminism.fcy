Prog "Indeterminism" ["Dependency","FlatCurry","Prelude","List"] [] [Func ("Indeterminism","analyseIndeterminism") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","Bool") []]])) (Rule [] (Comb (FuncPartCall 1) ("Dependency","analyseWithDependencies") [Comb (FuncPartCall 1) ("Indeterminism","isIndeterministic") [],Comb FuncCall ("Prelude","or") []])),Func ("Indeterminism","isIndeterministic") 1 Private (FuncType (TCons ("FlatCurry","FuncDecl") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","Func") [2,3,4,5,6]) (Comb FuncCall ("Indeterminism","isIndetRule") [Var 6])])),Func ("Indeterminism","isIndetRule") 1 Private (FuncType (TCons ("FlatCurry","Rule") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","Rule") [2,3]) (Comb FuncCall ("Indeterminism","choiceInExpr") [Var 3]),Branch (Pattern ("FlatCurry","External") [4]) (Comb ConsCall ("Prelude","False") [])])),Func ("Indeterminism","choiceInExpr") 1 Public (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","Var") [2]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("FlatCurry","Lit") [3]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("FlatCurry","Comb") [4,5,6]) (Comb FuncCall ("Prelude","||") [Comb FuncCall ("Prelude","==") [Var 5,Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude","[]") []]]]]]]]],Comb FuncCall ("Prelude","||") [Comb FuncCall ("Prelude","==") [Var 5,Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude","[]") []]]]]],Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude","[]") []]]]]]],Comb FuncCall ("Prelude","||") [Comb FuncCall ("Prelude","==") [Var 5,Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude","[]") []]]]]],Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'S'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude","[]") []]]]]]]]],Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Prelude","||") [],Comb ConsCall ("Prelude","False") [],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Indeterminism","choiceInExpr") [],Var 6]]]]]),Branch (Pattern ("FlatCurry","Free") [7,8]) (Comb FuncCall ("Indeterminism","choiceInExpr") [Var 8]),Branch (Pattern ("FlatCurry","Let") [9,10]) (Comb FuncCall ("Prelude","||") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","any") [Comb (FuncPartCall 1) ("Indeterminism","choiceInExpr") []],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Prelude","snd") [],Var 9]],Comb FuncCall ("Indeterminism","choiceInExpr") [Var 10]]),Branch (Pattern ("FlatCurry","Or") [11,12]) (Comb FuncCall ("Prelude","||") [Comb FuncCall ("Indeterminism","choiceInExpr") [Var 11],Comb FuncCall ("Indeterminism","choiceInExpr") [Var 12]]),Branch (Pattern ("FlatCurry","Case") [13,14,15]) (Comb FuncCall ("Prelude","||") [Comb FuncCall ("Indeterminism","choiceInExpr") [Var 14],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","any") [Comb (FuncPartCall 1) ("Indeterminism","choiceInExpr.choiceInBranch.33") []],Var 15]])])),Func ("Indeterminism","choiceInExpr.choiceInBranch.33") 1 Private (FuncType (TCons ("FlatCurry","BranchExpr") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","Branch") [2,3]) (Comb FuncCall ("Indeterminism","choiceInExpr") [Var 3])]))] []