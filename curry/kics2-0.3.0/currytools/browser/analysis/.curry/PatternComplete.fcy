Prog "PatternComplete" ["Dependency","FlatCurry","Prelude"] [Type ("PatternComplete","CompletenessType") Public [] [Cons ("PatternComplete","Complete") 0 Public [],Cons ("PatternComplete","InComplete") 0 Public [],Cons ("PatternComplete","InCompleteOr") 0 Public []]] [Func ("PatternComplete","analyseTotallyDefined") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","TypeDecl") []]) (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("PatternComplete","CompletenessType") []]]))) (Rule [1] (Let [(2,Comb (FuncPartCall 1) ("Prelude","foldr") [Comb (FuncPartCall 2) ("PatternComplete","combineAndResults") [],Comb ConsCall ("PatternComplete","Complete") []])] (Comb (FuncPartCall 1) ("Dependency","analyseWithDependencies") [Comb (FuncPartCall 1) ("PatternComplete","analyseCompleteness") [Var 1],Var 2]))),Func ("PatternComplete","analyseCompleteness") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","TypeDecl") []]) (FuncType (TCons ("FlatCurry","FuncDecl") []) (TCons ("PatternComplete","CompletenessType") []))) (Rule [1,2] (Comb FuncCall ("PatternComplete","analyseCompleteness.anaFun.5") [Var 1,Var 2])),Func ("PatternComplete","analyseCompleteness.anaFun.5") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","TypeDecl") []]) (FuncType (TCons ("FlatCurry","FuncDecl") []) (TCons ("PatternComplete","CompletenessType") []))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("FlatCurry","Func") [3,4,5,6,7]) (Case  Flex (Var 7) [Branch (Pattern ("FlatCurry","Rule") [8,9]) (Comb FuncCall ("PatternComplete","isComplete") [Var 1,Var 9]),Branch (Pattern ("FlatCurry","External") [10]) (Comb ConsCall ("PatternComplete","Complete") [])])])),Func ("PatternComplete","isComplete") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","TypeDecl") []]) (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("PatternComplete","CompletenessType") []))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("FlatCurry","Var") [3]) (Comb ConsCall ("PatternComplete","Complete") []),Branch (Pattern ("FlatCurry","Lit") [4]) (Comb ConsCall ("PatternComplete","Complete") []),Branch (Pattern ("FlatCurry","Comb") [5,6,7]) (Case  Rigid (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","==") [Var 6,Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude","[]") []]]]]]]]],Comb FuncCall ("Prelude","==") [Comb FuncCall ("Prelude","length") [Var 7],Lit (Intc  1)]]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("PatternComplete","isComplete") [Var 1,Comb FuncCall ("Prelude","head") [Var 7]]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("PatternComplete","Complete") [])]),Branch (Pattern ("FlatCurry","Free") [8,9]) (Comb ConsCall ("PatternComplete","Complete") []),Branch (Pattern ("FlatCurry","Let") [10,11]) (Comb ConsCall ("PatternComplete","Complete") []),Branch (Pattern ("FlatCurry","Or") [12,13]) (Comb FuncCall ("PatternComplete","combineOrResults") [Comb FuncCall ("PatternComplete","isComplete") [Var 1,Var 12],Comb FuncCall ("PatternComplete","isComplete") [Var 1,Var 13]]),Branch (Pattern ("FlatCurry","Case") [14,15,16]) (Case  Flex (Var 16) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("PatternComplete","InComplete") []),Branch (Pattern ("Prelude",":") [17,18]) (Case  Flex (Var 17) [Branch (Pattern ("FlatCurry","Branch") [19,20]) (Case  Flex (Var 19) [Branch (Pattern ("FlatCurry","LPattern") [21]) (Comb ConsCall ("PatternComplete","InComplete") []),Branch (Pattern ("FlatCurry","Pattern") [22,23]) (Comb FuncCall ("PatternComplete","isComplete.checkAllCons.60") [Var 1,Comb FuncCall ("PatternComplete","getConstructors") [Var 22,Var 1],Comb ConsCall ("Prelude",":") [Comb ConsCall ("FlatCurry","Branch") [Comb ConsCall ("FlatCurry","Pattern") [Var 22,Var 23],Var 20],Var 18]])])])])])),Func ("PatternComplete","isComplete.checkAllCons.60") 3 Private (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","TypeDecl") []]) (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","ConsDecl") []]) (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","BranchExpr") []]) (TCons ("PatternComplete","CompletenessType") [])))) (Rule [1,2,3] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("PatternComplete","Complete") []),Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("PatternComplete","InComplete") []),Branch (Pattern ("Prelude",":") [6,7]) (Case  Flex (Var 6) [Branch (Pattern ("FlatCurry","Branch") [8,9]) (Case  Flex (Var 8) [Branch (Pattern ("FlatCurry","LPattern") [10]) (Comb ConsCall ("PatternComplete","InComplete") []),Branch (Pattern ("FlatCurry","Pattern") [11,12]) (Comb FuncCall ("PatternComplete","combineAndResults") [Comb FuncCall ("PatternComplete","isComplete.checkAllCons.60") [Var 1,Comb FuncCall ("PatternComplete","removeConstructor") [Var 11,Comb ConsCall ("Prelude",":") [Var 4,Var 5]],Var 7],Comb FuncCall ("PatternComplete","isComplete") [Var 1,Var 9]])])])])])),Func ("PatternComplete","combineOrResults") 2 Private (FuncType (TCons ("PatternComplete","CompletenessType") []) (FuncType (TCons ("PatternComplete","CompletenessType") []) (TCons ("PatternComplete","CompletenessType") []))) (Rule [1,2] (Case  Flex (Var 1) [Branch (Pattern ("PatternComplete","Complete") []) (Comb ConsCall ("PatternComplete","Complete") []),Branch (Pattern ("PatternComplete","InComplete") []) (Case  Flex (Var 2) [Branch (Pattern ("PatternComplete","Complete") []) (Comb ConsCall ("PatternComplete","Complete") []),Branch (Pattern ("PatternComplete","InComplete") []) (Comb ConsCall ("PatternComplete","InCompleteOr") []),Branch (Pattern ("PatternComplete","InCompleteOr") []) (Comb ConsCall ("PatternComplete","InCompleteOr") [])]),Branch (Pattern ("PatternComplete","InCompleteOr") []) (Case  Flex (Var 2) [Branch (Pattern ("PatternComplete","Complete") []) (Comb ConsCall ("PatternComplete","Complete") []),Branch (Pattern ("PatternComplete","InComplete") []) (Comb ConsCall ("PatternComplete","InCompleteOr") []),Branch (Pattern ("PatternComplete","InCompleteOr") []) (Comb ConsCall ("PatternComplete","InCompleteOr") [])])])),Func ("PatternComplete","combineAndResults") 2 Private (FuncType (TCons ("PatternComplete","CompletenessType") []) (FuncType (TCons ("PatternComplete","CompletenessType") []) (TCons ("PatternComplete","CompletenessType") []))) (Rule [1,2] (Case  Flex (Var 1) [Branch (Pattern ("PatternComplete","InComplete") []) (Comb ConsCall ("PatternComplete","InComplete") []),Branch (Pattern ("PatternComplete","Complete") []) (Case  Flex (Var 2) [Branch (Pattern ("PatternComplete","Complete") []) (Comb ConsCall ("PatternComplete","Complete") []),Branch (Pattern ("PatternComplete","InComplete") []) (Comb ConsCall ("PatternComplete","InComplete") []),Branch (Pattern ("PatternComplete","InCompleteOr") []) (Comb ConsCall ("PatternComplete","InCompleteOr") [])]),Branch (Pattern ("PatternComplete","InCompleteOr") []) (Case  Flex (Var 2) [Branch (Pattern ("PatternComplete","Complete") []) (Comb ConsCall ("PatternComplete","InCompleteOr") []),Branch (Pattern ("PatternComplete","InComplete") []) (Comb ConsCall ("PatternComplete","InComplete") []),Branch (Pattern ("PatternComplete","InCompleteOr") []) (Comb ConsCall ("PatternComplete","InCompleteOr") [])])])),Func ("PatternComplete","getConstructors") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","TypeDecl") []]) (TCons ("Prelude","[]") [TCons ("FlatCurry","ConsDecl") []]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","error") [Comb ConsCall ("Prelude",":") [Lit (Charc  'I'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  '!'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]),Branch (Pattern ("Prelude",":") [3,4]) (Case  Flex (Var 3) [Branch (Pattern ("FlatCurry","TypeSyn") [5,6,7,8]) (Comb FuncCall ("PatternComplete","getConstructors") [Var 1,Var 4]),Branch (Pattern ("FlatCurry","Type") [9,10,11,12]) (Case  Rigid (Comb FuncCall ("PatternComplete","getConstructors.hasCons.121") [Var 1,Var 12]) [Branch (Pattern ("Prelude","True") []) (Var 12),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("PatternComplete","getConstructors") [Var 1,Var 4])])])])),Func ("PatternComplete","getConstructors.hasCons.121") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","ConsDecl") []]) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude",":") [3,4]) (Case  Flex (Var 3) [Branch (Pattern ("FlatCurry","Cons") [5,6,7,8]) (Comb FuncCall ("Prelude","||") [Comb FuncCall ("Prelude","==") [Var 1,Var 5],Comb FuncCall ("PatternComplete","getConstructors.hasCons.121") [Var 1,Var 4]])])])),Func ("PatternComplete","removeConstructor") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","ConsDecl") []]) (TCons ("Prelude","[]") [TCons ("FlatCurry","ConsDecl") []]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","error") [Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","show") [Var 1],Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  '!'),Comb ConsCall ("Prelude",":") [Lit (Charc  '!'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]),Branch (Pattern ("Prelude",":") [3,4]) (Case  Flex (Var 3) [Branch (Pattern ("FlatCurry","Cons") [5,6,7,8]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 1,Var 5]) [Branch (Pattern ("Prelude","True") []) (Var 4),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("FlatCurry","Cons") [Var 5,Var 6,Var 7,Var 8],Comb FuncCall ("PatternComplete","removeConstructor") [Var 1,Var 4]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])]))] []