Prog "Linearity" ["Dependency","FlatCurry","List","Maybe","Prelude"] [] [Func ("Linearity","analyseRightLinearity") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","Bool") []]])) (Rule [] (Comb (FuncPartCall 1) ("Dependency","analyseWithDependencies") [Comb (FuncPartCall 1) ("Linearity","hasRightLinearRules") [],Comb FuncCall ("Prelude","and") []])),Func ("Linearity","hasRightLinearRules") 1 Public (FuncType (TCons ("FlatCurry","FuncDecl") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","Func") [2,3,4,5,6]) (Comb FuncCall ("Linearity","isRightLinearRule") [Var 6])])),Func ("Linearity","isRightLinearRule") 1 Private (FuncType (TCons ("FlatCurry","Rule") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","Rule") [2,3]) (Comb FuncCall ("Linearity","linearExpr") [Var 3]),Branch (Pattern ("FlatCurry","External") [4]) (Comb ConsCall ("Prelude","True") [])])),Func ("Linearity","linearExpr") 1 Public (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Comb FuncCall ("Prelude","maybe") [Comb ConsCall ("Prelude","False") [],Comb (FuncPartCall 1) ("Prelude","const") [Comb ConsCall ("Prelude","True") []],Comb FuncCall ("Linearity","linearVariables") [Var 1]])),Func ("Linearity","linearVariables") 1 Private (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("Prelude","Maybe") [TCons ("Prelude","[]") [TCons ("Prelude","Int") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","Var") [2]) (Comb ConsCall ("Prelude","Just") [Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude","[]") []]]),Branch (Pattern ("FlatCurry","Lit") [3]) (Comb ConsCall ("Prelude","Just") [Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("FlatCurry","Comb") [4,5,6]) (Case  Rigid (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","==") [Var 5,Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb ConsCall ("Prelude",":") [Lit (Charc  '?'),Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("Prelude","==") [Comb FuncCall ("Prelude","length") [Var 6],Lit (Intc  2)]]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Linearity","linearVariables") [Comb ConsCall ("FlatCurry","Or") [Comb FuncCall ("Prelude","head") [Var 6],Comb FuncCall ("Prelude","head") [Comb FuncCall ("Prelude","tail") [Var 6]]]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Maybe",">>-") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Maybe","mapMMaybe") [Comb (FuncPartCall 1) ("Linearity","linearVariables") []],Var 6],Comb (FuncPartCall 1) ("Linearity","linearVariables._#lambda1") []]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])]),Branch (Pattern ("FlatCurry","Free") [7,8]) (Comb FuncCall ("Maybe",">>-") [Comb FuncCall ("Linearity","linearVariables") [Var 8],Comb (FuncPartCall 1) ("Linearity","linearVariables._#lambda2") [Var 7]]),Branch (Pattern ("FlatCurry","Let") [9,10]) (Comb FuncCall ("Maybe",">>-") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Maybe","mapMMaybe") [Comb (FuncPartCall 1) ("Linearity","linearVariables") []],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Prelude","snd") [],Var 9]],Comb (FuncPartCall 1) ("Linearity","linearVariables._#lambda3") [Var 9,Var 10]]),Branch (Pattern ("FlatCurry","Or") [11,12]) (Comb FuncCall ("Maybe",">>-") [Comb FuncCall ("Linearity","linearVariables") [Var 11],Comb (FuncPartCall 1) ("Linearity","linearVariables._#lambda5") [Var 12]]),Branch (Pattern ("FlatCurry","Case") [13,14,15]) (Comb FuncCall ("Maybe",">>-") [Comb FuncCall ("Linearity","linearVariables") [Var 14],Comb (FuncPartCall 1) ("Linearity","linearVariables._#lambda7") [Var 15]])])),Func ("Linearity","linearVariables._#lambda1") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Int") []]]) (TCons ("Prelude","Maybe") [TCons ("Prelude","[]") [TCons ("Prelude","Int") []]])) (Rule [1] (Let [(2,Comb FuncCall ("Prelude","concat") [Var 1])] (Case  Rigid (Comb FuncCall ("Prelude","==") [Comb FuncCall ("List","nub") [Var 2],Var 2]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","Just") [Var 2]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","Nothing") [])]))),Func ("Linearity","linearVariables._#lambda2") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","Maybe") [TCons ("Prelude","[]") [TCons ("Prelude","Int") []]]))) (Rule [1,2] (Comb ConsCall ("Prelude","Just") [Comb FuncCall ("List","\\\\") [Var 2,Var 1]])),Func ("Linearity","linearVariables._#lambda3") 3 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","Expr") []]]) (FuncType (TCons ("FlatCurry","Expr") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Int") []]]) (TCons ("Prelude","Maybe") [TCons ("Prelude","[]") [TCons ("Prelude","Int") []]])))) (Rule [1,2,3] (Comb FuncCall ("Maybe",">>-") [Comb FuncCall ("Linearity","linearVariables") [Var 2],Comb (FuncPartCall 1) ("Linearity","linearVariables._#lambda3._#lambda4") [Var 1,Var 3]])),Func ("Linearity","linearVariables._#lambda3._#lambda4") 3 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","Expr") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Int") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","Maybe") [TCons ("Prelude","[]") [TCons ("Prelude","Int") []]])))) (Rule [1,2,3] (Let [(4,Comb FuncCall ("Prelude","concat") [Comb ConsCall ("Prelude",":") [Var 3,Var 2]])] (Case  Rigid (Comb FuncCall ("Prelude","==") [Comb FuncCall ("List","nub") [Var 4],Var 4]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","Just") [Comb FuncCall ("List","\\\\") [Var 4,Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Prelude","fst") [],Var 1]]]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","Nothing") [])]))),Func ("Linearity","linearVariables._#lambda5") 2 Private (FuncType (TCons ("FlatCurry","Expr") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","Maybe") [TCons ("Prelude","[]") [TCons ("Prelude","Int") []]]))) (Rule [1,2] (Comb FuncCall ("Maybe",">>-") [Comb FuncCall ("Linearity","linearVariables") [Var 1],Comb (FuncPartCall 1) ("Linearity","linearVariables._#lambda5._#lambda6") [Var 2]])),Func ("Linearity","linearVariables._#lambda5._#lambda6") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","Maybe") [TCons ("Prelude","[]") [TCons ("Prelude","Int") []]]))) (Rule [1,2] (Comb ConsCall ("Prelude","Just") [Comb FuncCall ("List","union") [Var 1,Var 2]])),Func ("Linearity","linearVariables.patternVars.44") 1 Private (FuncType (TCons ("FlatCurry","BranchExpr") []) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","Branch") [2,3]) (Case  Flex (Var 2) [Branch (Pattern ("FlatCurry","Pattern") [4,5]) (Var 5),Branch (Pattern ("FlatCurry","LPattern") [6]) (Comb ConsCall ("Prelude","[]") [])])])),Func ("Linearity","linearVariables._#lambda7") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","BranchExpr") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","Maybe") [TCons ("Prelude","[]") [TCons ("Prelude","Int") []]]))) (Rule [1,2] (Comb FuncCall ("Maybe",">>-") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Maybe","mapMMaybe") [Comb (FuncPartCall 1) ("Linearity","linearVariables") []],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Linearity","linearVariables._#lambda7._#lambda8") [],Var 1]],Comb (FuncPartCall 1) ("Linearity","linearVariables._#lambda7._#lambda9") [Var 1,Var 2]])),Func ("Linearity","linearVariables._#lambda7._#lambda8") 1 Private (FuncType (TCons ("FlatCurry","BranchExpr") []) (TCons ("FlatCurry","Expr") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","Branch") [2,3]) (Var 3)])),Func ("Linearity","linearVariables._#lambda7._#lambda9") 3 Private (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","BranchExpr") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Int") []]]) (TCons ("Prelude","Maybe") [TCons ("Prelude","[]") [TCons ("Prelude","Int") []]])))) (Rule [1,2,3] (Let [(4,Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("List","union") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Linearity","linearVariables._#lambda7._#lambda9._#lambda10") [],Comb FuncCall ("Prelude","zip") [Var 1,Var 3]]],Var 2])] (Case  Rigid (Comb FuncCall ("Prelude","==") [Comb FuncCall ("List","nub") [Var 4],Var 4]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","Just") [Var 4]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","Nothing") [])]))),Func ("Linearity","linearVariables._#lambda7._#lambda9._#lambda10") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("FlatCurry","BranchExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Int") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Comb FuncCall ("List","\\\\") [Var 3,Comb FuncCall ("Linearity","linearVariables.patternVars.44") [Var 2]])]))] []