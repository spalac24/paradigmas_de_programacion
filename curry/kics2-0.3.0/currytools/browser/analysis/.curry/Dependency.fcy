Prog "Dependency" ["FlatCurry","Maybe","Prelude","RedBlackTree","SetRBT","Sort","List"] [] [Func ("Dependency","analyseWithDependencies") 3 Public (FuncType (FuncType (TCons ("FlatCurry","FuncDecl") []) (TVar 0)) (FuncType (FuncType (TCons ("Prelude","[]") [TVar 0]) (TVar 0)) (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TVar 0]])))) (Rule [1,2,3] (Let [(4,Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Dependency","analyseWithDependencies._#lambda1") [Var 1],Var 3]),(5,Comb FuncCall ("Dependency","indirectlyDependent") [Var 3])] (Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Dependency","analyseWithDependencies.anaFun.2") [Var 2,Var 4],Var 5]))),Func ("Dependency","analyseWithDependencies.funcName.2") 1 Private (FuncType (TCons ("FlatCurry","FuncDecl") []) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","Func") [2,3,4,5,6]) (Var 2)])),Func ("Dependency","analyseWithDependencies._#lambda1") 2 Private (FuncType (FuncType (TCons ("FlatCurry","FuncDecl") []) (TVar 122)) (FuncType (TCons ("FlatCurry","FuncDecl") []) (TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TVar 122]))) (Rule [1,2] (Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Dependency","analyseWithDependencies.funcName.2") [Var 2],Comb FuncCall ("Prelude","apply") [Var 1,Var 2]])),Func ("Dependency","analyseWithDependencies.lookupProp.2") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TVar 0]]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TVar 0))) (Rule [1,2] (Comb FuncCall ("Maybe","fromJust") [Comb FuncCall ("Prelude","lookup") [Var 2,Var 1]])),Func ("Dependency","analyseWithDependencies.anaFun.2") 3 Private (FuncType (FuncType (TCons ("Prelude","[]") [TVar 122]) (TVar 122)) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TVar 122]]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]]) (TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TVar 122])))) (Rule [1,2,3] (Case  Flex (Var 3) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb ConsCall ("Prelude","(,)") [Var 4,Comb FuncCall ("Prelude","apply") [Var 1,Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Dependency","analyseWithDependencies.lookupProp.2") [Var 2],Comb ConsCall ("Prelude",":") [Var 4,Var 5]]]])])),Func ("Dependency","externalDependent") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]]])) (Rule [1] (Let [(2,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","concatMap") [Comb (FuncPartCall 1) ("Dependency","externalDependent.getExternal.17") []],Var 1])] (Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Dependency","externalDependent._#lambda2") [Var 2],Comb FuncCall ("Dependency","indirectlyDependent") [Var 1]]))),Func ("Dependency","externalDependent.getExternal.17") 1 Private (FuncType (TCons ("FlatCurry","FuncDecl") []) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","Func") [2,3,4,5,6]) (Case  Flex (Var 6) [Branch (Pattern ("FlatCurry","Rule") [7,8]) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("FlatCurry","External") [9]) (Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude","[]") []])])])),Func ("Dependency","externalDependent._#lambda2") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]]) (TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb ConsCall ("Prelude","(,)") [Var 3,Comb FuncCall ("Prelude","filter") [Comb (FuncPartCall 1) ("Prelude","flip") [Comb (FuncPartCall 1) ("Prelude","elem") [],Var 1],Var 4]])])),Func ("Dependency","indirectlyDependent") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]]])) (Rule [1] (Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Dependency","indirectlyDependent._#lambda3") [],Comb FuncCall ("Dependency","depsClosure") [Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Dependency","directlyDependent") [],Var 1]]])),Func ("Dependency","indirectlyDependent._#lambda3") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("RedBlackTree","RedBlackTree") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]]) (TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Comb ConsCall ("Prelude","(,)") [Var 2,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("SetRBT","setRBT2list") [],Var 3]])])),Func ("Dependency","callsDirectly") 1 Public (FuncType (TCons ("FlatCurry","FuncDecl") []) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("SetRBT","setRBT2list") [],Comb FuncCall ("Prelude","snd") [Comb FuncCall ("Dependency","directlyDependent") [Var 1]]])),Func ("Dependency","directlyDependent") 1 Private (FuncType (TCons ("FlatCurry","FuncDecl") []) (TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("RedBlackTree","RedBlackTree") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","Func") [2,3,4,5,6]) (Case  Flex (Var 6) [Branch (Pattern ("FlatCurry","Rule") [7,8]) (Comb ConsCall ("Prelude","(,)") [Var 2,Comb FuncCall ("Dependency","funcSetOfExpr") [Var 8]]),Branch (Pattern ("FlatCurry","External") [9]) (Comb ConsCall ("Prelude","(,)") [Var 2,Comb FuncCall ("Dependency","emptySet") []])])])),Func ("Dependency","depsClosure") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("RedBlackTree","RedBlackTree") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("RedBlackTree","RedBlackTree") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]]])) (Rule [1] (Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Dependency","depsClosure._#lambda5") [Var 1],Var 1])),Func ("Dependency","depsClosure.closure.52") 3 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("RedBlackTree","RedBlackTree") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]]]) (FuncType (TCons ("RedBlackTree","RedBlackTree") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("RedBlackTree","RedBlackTree") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case  Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Var 2),Branch (Pattern ("Prelude",":") [4,5]) (Let [(6,Comb FuncCall ("Prelude","filter") [Comb (FuncPartCall 1) ("Dependency","depsClosure.closure.52._#lambda4") [Var 2],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("SetRBT","setRBT2list") [],Comb FuncCall ("Prelude","maybe") [Comb FuncCall ("Dependency","emptySet") [],Comb (FuncPartCall 1) ("Prelude","id") [],Comb FuncCall ("Prelude","lookup") [Var 4,Var 1]]]])] (Comb FuncCall ("Dependency","depsClosure.closure.52") [Var 1,Comb FuncCall ("Prelude","foldr") [Comb FuncCall ("SetRBT","insertRBT") [],Var 2,Var 6],Comb FuncCall ("Prelude","++") [Var 6,Var 5]]))])),Func ("Dependency","depsClosure.closure.52._#lambda4") 2 Private (FuncType (TCons ("RedBlackTree","RedBlackTree") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Comb FuncCall ("Prelude","not") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("SetRBT","elemRBT") [Var 2],Var 1]])),Func ("Dependency","depsClosure._#lambda5") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("RedBlackTree","RedBlackTree") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]]]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("RedBlackTree","RedBlackTree") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]]) (TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("RedBlackTree","RedBlackTree") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb ConsCall ("Prelude","(,)") [Var 3,Comb FuncCall ("Dependency","depsClosure.closure.52") [Var 1,Var 4,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("SetRBT","setRBT2list") [],Var 4]]])])),Func ("Dependency","dependencyGraphs") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]]]]])) (Rule [1] (Let [(2,Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Dependency","directlyDependent") [],Var 1])] (Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Dependency","dependencyGraphs._#lambda6") [Var 2],Comb FuncCall ("Dependency","depsClosure") [Var 2]]))),Func ("Dependency","dependencyGraphs._#lambda6") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("RedBlackTree","RedBlackTree") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]]]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("RedBlackTree","RedBlackTree") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]]) (TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]]]]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb ConsCall ("Prelude","(,)") [Var 3,Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Dependency","dependencyGraphs._#lambda6._#lambda7") [Var 1],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("SetRBT","setRBT2list") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("SetRBT","insertRBT") [],Var 3],Var 4]]]])])),Func ("Dependency","dependencyGraphs._#lambda6._#lambda7") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("RedBlackTree","RedBlackTree") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]]]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]]))) (Rule [1,2] (Comb ConsCall ("Prelude","(,)") [Var 2,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("SetRBT","setRBT2list") [],Comb FuncCall ("Maybe","fromJust") [Comb FuncCall ("Prelude","lookup") [Var 2,Var 1]]]])),Func ("Dependency","localDependencyGraphs") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]]]]])) (Rule [1] (Let [(2,Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Dependency","directlyDependent") [],Var 1])] (Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Dependency","localDependencyGraphs._#lambda8") [Var 2],Comb FuncCall ("Dependency","localDepsClosure") [Var 2]]))),Func ("Dependency","localDependencyGraphs._#lambda8") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("RedBlackTree","RedBlackTree") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]]]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("RedBlackTree","RedBlackTree") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]]) (TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]]]]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb ConsCall ("Prelude","(,)") [Var 3,Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Dependency","localDependencyGraphs._#lambda8._#lambda9") [Var 1,Var 3],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("SetRBT","setRBT2list") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("SetRBT","insertRBT") [],Var 3],Var 4]]]])])),Func ("Dependency","localDependencyGraphs._#lambda8._#lambda9") 3 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("RedBlackTree","RedBlackTree") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]]]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]])))) (Rule [1,2,3] (Comb ConsCall ("Prelude","(,)") [Var 3,Case  Rigid (Comb FuncCall ("Prelude","==") [Comb FuncCall ("Prelude","fst") [Var 2],Comb FuncCall ("Prelude","fst") [Var 3]]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("SetRBT","setRBT2list") [],Comb FuncCall ("Maybe","fromJust") [Comb FuncCall ("Prelude","lookup") [Var 3,Var 1]]]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","[]") [])]])),Func ("Dependency","localDepsClosure") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("RedBlackTree","RedBlackTree") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("RedBlackTree","RedBlackTree") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]]])) (Rule [1] (Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Dependency","localDepsClosure._#lambda11") [Var 1],Var 1])),Func ("Dependency","localDepsClosure.closure.74") 4 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("RedBlackTree","RedBlackTree") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("RedBlackTree","RedBlackTree") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("RedBlackTree","RedBlackTree") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [1,2,3,4] (Case  Flex (Var 4) [Branch (Pattern ("Prelude","[]") []) (Var 3),Branch (Pattern ("Prelude",":") [5,6]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 2,Comb FuncCall ("Prelude","fst") [Var 5]]) [Branch (Pattern ("Prelude","True") []) (Let [(7,Comb FuncCall ("Prelude","filter") [Comb (FuncPartCall 1) ("Dependency","localDepsClosure.closure.74._#lambda10") [Var 3],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("SetRBT","setRBT2list") [],Comb FuncCall ("Prelude","maybe") [Comb FuncCall ("Dependency","emptySet") [],Comb (FuncPartCall 1) ("Prelude","id") [],Comb FuncCall ("Prelude","lookup") [Var 5,Var 1]]]])] (Comb FuncCall ("Dependency","localDepsClosure.closure.74") [Var 1,Var 2,Comb FuncCall ("Prelude","foldr") [Comb FuncCall ("SetRBT","insertRBT") [],Var 3,Var 7],Comb FuncCall ("Prelude","++") [Var 7,Var 6]])),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Dependency","localDepsClosure.closure.74") [Var 1,Var 2,Var 3,Var 6]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])),Func ("Dependency","localDepsClosure.closure.74._#lambda10") 2 Private (FuncType (TCons ("RedBlackTree","RedBlackTree") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Comb FuncCall ("Prelude","not") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("SetRBT","elemRBT") [Var 2],Var 1]])),Func ("Dependency","localDepsClosure._#lambda11") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("RedBlackTree","RedBlackTree") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]]]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("RedBlackTree","RedBlackTree") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]]) (TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("RedBlackTree","RedBlackTree") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb ConsCall ("Prelude","(,)") [Var 3,Comb FuncCall ("Dependency","localDepsClosure.closure.74") [Var 1,Comb FuncCall ("Prelude","fst") [Var 3],Var 4,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("SetRBT","setRBT2list") [],Var 4]]])])),Func ("Dependency","funcsInExpr") 1 Public (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("SetRBT","setRBT2list") [],Comb FuncCall ("Dependency","funcSetOfExpr") [Var 1]])),Func ("Dependency","funcSetOfExpr") 1 Private (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("RedBlackTree","RedBlackTree") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","Var") [2]) (Comb FuncCall ("Dependency","emptySet") []),Branch (Pattern ("FlatCurry","Lit") [3]) (Comb FuncCall ("Dependency","emptySet") []),Branch (Pattern ("FlatCurry","Comb") [4,5,6]) (Case  Rigid (Comb FuncCall ("Dependency","isConstructorComb") [Var 4]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Dependency","unionMap") [Comb (FuncPartCall 1) ("Dependency","funcSetOfExpr") []],Var 6]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("SetRBT","insertRBT") [],Var 5],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Dependency","unionMap") [Comb (FuncPartCall 1) ("Dependency","funcSetOfExpr") []],Var 6]])]),Branch (Pattern ("FlatCurry","Free") [7,8]) (Comb FuncCall ("Dependency","funcSetOfExpr") [Var 8]),Branch (Pattern ("FlatCurry","Let") [9,10]) (Comb FuncCall ("SetRBT","unionRBT") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Dependency","unionMap") [Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Dependency","funcSetOfExpr") [],Comb (FuncPartCall 1) ("Prelude","snd") []]],Var 9],Comb FuncCall ("Dependency","funcSetOfExpr") [Var 10]]),Branch (Pattern ("FlatCurry","Or") [11,12]) (Comb FuncCall ("SetRBT","unionRBT") [Comb FuncCall ("Dependency","funcSetOfExpr") [Var 11],Comb FuncCall ("Dependency","funcSetOfExpr") [Var 12]]),Branch (Pattern ("FlatCurry","Case") [13,14,15]) (Comb FuncCall ("SetRBT","unionRBT") [Comb FuncCall ("Dependency","funcSetOfExpr") [Var 14],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Dependency","unionMap") [Comb (FuncPartCall 1) ("Dependency","funcSetOfExpr.funcSetOfBranch.103") []],Var 15]])])),Func ("Dependency","funcSetOfExpr.funcSetOfBranch.103") 1 Private (FuncType (TCons ("FlatCurry","BranchExpr") []) (TCons ("RedBlackTree","RedBlackTree") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","Branch") [2,3]) (Comb FuncCall ("Dependency","funcSetOfExpr") [Var 3])])),Func ("Dependency","isConstructorComb") 1 Private (FuncType (TCons ("FlatCurry","CombType") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Case  Rigid (Var 1) [Branch (Pattern ("FlatCurry","ConsCall") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("FlatCurry","ConsPartCall") [2]) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("FlatCurry","FuncCall") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("FlatCurry","FuncPartCall") [3]) (Comb ConsCall ("Prelude","False") [])])),Func ("Dependency","unionMap") 1 Private (FuncType (FuncType (TVar 0) (TCons ("RedBlackTree","RedBlackTree") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("RedBlackTree","RedBlackTree") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1] (Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","foldr") [Comb (FuncPartCall 2) ("SetRBT","unionRBT") [],Comb FuncCall ("Dependency","emptySet") []],Comb (FuncPartCall 1) ("Prelude","map") [Var 1]])),Func ("Dependency","emptySet") 0 Private (TCons ("RedBlackTree","RedBlackTree") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (Rule [] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("SetRBT","emptySetRBT") [],Comb (FuncPartCall 2) ("Dependency","leqQName") []])),Func ("Dependency","leqQName") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Case  Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [5,6]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Sort","leqString") [],Comb FuncCall ("Prelude","++") [Var 3,Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Var 4]]],Comb FuncCall ("Prelude","++") [Var 5,Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Var 6]]])])]))] []