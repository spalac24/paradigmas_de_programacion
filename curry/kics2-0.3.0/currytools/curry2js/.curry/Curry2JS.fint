Prog "Curry2JS" ["Char","CompactFlatCurry","Directory","Distribution","FlatCurry","Integer","JavaScript","List","Maybe","Prelude","ReadNumeric","System","Time","Unsafe","FlatCurryShow"] [Type ("Curry2JS","VarDef") Public [] [Cons ("Curry2JS","SimpleVar") 1 Public [TCons ("Prelude","Int") []],Cons ("Curry2JS","ComplexDef") 2 Public [TCons ("JavaScript","JSExp") [],TCons ("Prelude","Int") []]]] [Func ("Curry2JS","explicitApply") 0 Public (TCons ("Prelude","Bool") []) (Rule [] (Var 0)),Func ("Curry2JS","optimizeSingleVars") 0 Public (TCons ("Prelude","Bool") []) (Rule [] (Var 0)),Func ("Curry2JS","optimizeUniqueCase") 0 Public (TCons ("Prelude","Bool") []) (Rule [] (Var 0)),Func ("Curry2JS","lazyStringConversion") 0 Public (TCons ("Prelude","Bool") []) (Rule [] (Var 0)),Func ("Curry2JS","prelude") 0 Public (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (Rule [] (Var 0)),Func ("Curry2JS","wuiModName") 0 Public (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (Rule [] (Var 0)),Func ("Curry2JS","flatprog2JS") 1 Public (FuncType (TCons ("FlatCurry","Prog") []) (TCons ("Prelude","[]") [TCons ("JavaScript","JSFDecl") []])) (Rule [] (Var 0)),Func ("Curry2JS","isRelevantFunction") 1 Public (FuncType (TCons ("FlatCurry","FuncDecl") []) (TCons ("Prelude","Bool") [])) (Rule [] (Var 0)),Func ("Curry2JS","genApply") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","Int") []]]) (TCons ("JavaScript","JSFDecl") [])) (Rule [] (Var 0)),Func ("Curry2JS","flat2JS") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","TypeDecl") []]) (FuncType (TCons ("FlatCurry","FuncDecl") []) (TCons ("JavaScript","JSFDecl") []))) (Rule [] (Var 0)),Func ("Curry2JS","flatExp2JS") 6 Public (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","TypeDecl") []]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") []]]]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("Prelude","[]") [TCons ("JavaScript","JSStat") []]))))))) (Rule [] (Var 0)),Func ("Curry2JS","flatExps2JS") 5 Public (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","TypeDecl") []]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") []]]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","Expr") []]]) (TCons ("Prelude","[]") [TCons ("JavaScript","JSStat") []])))))) (Rule [] (Var 0)),Func ("Curry2JS","case2JS") 7 Public (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","TypeDecl") []]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") []]]]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("FlatCurry","Expr") []) (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","BranchExpr") []]) (TCons ("Prelude","[]") [TCons ("JavaScript","JSStat") []])))))))) (Rule [] (Var 0)),Func ("Curry2JS","branch2JS") 7 Public (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","TypeDecl") []]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") []]]]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","BranchExpr") []]) (TCons ("Prelude","[]") [TCons ("JavaScript","JSBranch") []])))))))) (Rule [] (Var 0)),Func ("Curry2JS","isUniqueConstructor") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","TypeDecl") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Curry2JS","ite2JS") 8 Public (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","TypeDecl") []]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") []]]]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("FlatCurry","Expr") []) (FuncType (TCons ("FlatCurry","Expr") []) (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("Prelude","[]") [TCons ("JavaScript","JSStat") []]))))))))) (Rule [] (Var 0)),Func ("Curry2JS","curryFunc2JSFunc") 2 Public (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("JavaScript","JSExp") []]) (TCons ("JavaScript","JSExp") []))) (Rule [] (Var 0)),Func ("Curry2JS","consQName2JS") 1 Public (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Var 0)),Func ("Curry2JS","qname2JS") 1 Public (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Var 0)),Func ("Curry2JS","encodeCurryId") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Var 0)),Func ("Curry2JS","jsFunctions") 0 Public (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (Rule [] (Var 0)),Func ("Curry2JS","jsConstructors") 0 Public (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (Rule [] (Var 0)),Func ("Curry2JS","jsOperators") 0 Public (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (Rule [] (Var 0)),Func ("Curry2JS","ignoredFunctions") 0 Public (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (Rule [] (Var 0)),Func ("Curry2JS","trySequentializeLetBindings") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","Expr") []]]) (TCons ("Prelude","Maybe") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","Expr") []]]])) (Rule [] (Var 0)),Func ("Curry2JS","trySequentializeLetBinding") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","Expr") []]]) (TCons ("Prelude","Maybe") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","Expr") []]]]))) (Rule [] (Var 0)),Func ("Curry2JS","freeVarsInExp") 1 Public (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []])) (Rule [] (Var 0)),Func ("Curry2JS","freeVarsInBranch") 1 Public (FuncType (TCons ("FlatCurry","BranchExpr") []) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []])) (Rule [] (Var 0)),Func ("Curry2JS","maxVarIndexInExp") 1 Public (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("Prelude","Int") [])) (Rule [] (Var 0)),Func ("Curry2JS","pafsOfProg") 1 Public (FuncType (TCons ("FlatCurry","Prog") []) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","Int") []]])) (Rule [] (Var 0)),Func ("Curry2JS","pafsOfFuncs") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","Int") []]])) (Rule [] (Var 0)),Func ("Curry2JS","pafsOfFunc") 1 Public (FuncType (TCons ("FlatCurry","FuncDecl") []) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","Int") []]])) (Rule [] (Var 0)),Func ("Curry2JS","pafsOfExpr") 1 Public (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","Int") []]])) (Rule [] (Var 0)),Func ("Curry2JS","mapUnion") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 0]]) (TCons ("Prelude","[]") [TVar 0])) (Rule [] (Var 0)),Func ("Curry2JS","jscOfProg") 1 Public (FuncType (TCons ("FlatCurry","Prog") []) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","Bool") []]])) (Rule [] (Var 0)),Func ("Curry2JS","jscOfFuncs") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","Bool") []]])) (Rule [] (Var 0)),Func ("Curry2JS","jscOfFunc") 1 Public (FuncType (TCons ("FlatCurry","FuncDecl") []) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","Bool") []]])) (Rule [] (Var 0)),Func ("Curry2JS","jscOfExpr") 1 Public (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","Bool") []]])) (Rule [] (Var 0)),Func ("Curry2JS","replaceJscOfProg") 1 Public (FuncType (TCons ("FlatCurry","Prog") []) (TCons ("FlatCurry","Prog") [])) (Rule [] (Var 0)),Func ("Curry2JS","replaceJscOfFunc") 1 Public (FuncType (TCons ("FlatCurry","FuncDecl") []) (TCons ("FlatCurry","FuncDecl") [])) (Rule [] (Var 0)),Func ("Curry2JS","replaceJscOfExpr") 1 Public (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("FlatCurry","Expr") [])) (Rule [] (Var 0)),Func ("Curry2JS","flatEmptyList") 1 Public (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("Prelude","Bool") [])) (Rule [] (Var 0)),Func ("Curry2JS","flatString") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("FlatCurry","Expr") [])) (Rule [] (Var 0)),Func ("Curry2JS","uniqueDefsOfStats") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Maybe") [TCons ("Curry2JS","VarDef") []]]]) (FuncType (TCons ("Prelude","[]") [TCons ("JavaScript","JSStat") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Maybe") [TCons ("Curry2JS","VarDef") []]]]))) (Rule [] (Var 0)),Func ("Curry2JS","uniqueDefsOfStat") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Maybe") [TCons ("Curry2JS","VarDef") []]]]) (FuncType (TCons ("JavaScript","JSStat") []) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Maybe") [TCons ("Curry2JS","VarDef") []]]]))) (Rule [] (Var 0)),Func ("Curry2JS","uniqueDefsOfExp") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Maybe") [TCons ("Curry2JS","VarDef") []]]]) (FuncType (TCons ("JavaScript","JSExp") []) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Maybe") [TCons ("Curry2JS","VarDef") []]]]))) (Rule [] (Var 0)),Func ("Curry2JS","uniqueDefsOfExps") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Maybe") [TCons ("Curry2JS","VarDef") []]]]) (FuncType (TCons ("Prelude","[]") [TCons ("JavaScript","JSExp") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Maybe") [TCons ("Curry2JS","VarDef") []]]]))) (Rule [] (Var 0)),Func ("Curry2JS","updateAssoc") 3 Public (FuncType (TVar 0) (FuncType (TVar 1) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TVar 1]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TVar 1]])))) (Rule [] (Var 0)),Func ("Curry2JS","removeSingleVarsJSStatements") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("JavaScript","JSStat") []]) (TCons ("Prelude","[]") [TCons ("JavaScript","JSStat") []])) (Rule [] (Var 0)),Func ("Curry2JS","removeSingleVarsInStats") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Maybe") [TCons ("Curry2JS","VarDef") []]]]) (FuncType (TCons ("Prelude","[]") [TCons ("JavaScript","JSStat") []]) (TCons ("Prelude","[]") [TCons ("JavaScript","JSStat") []]))) (Rule [] (Var 0)),Func ("Curry2JS","maybeReplaceVar") 3 Public (FuncType (TVar 0) (FuncType (TVar 0) (FuncType (TCons ("Curry2JS","VarDef") []) (TVar 0)))) (Rule [] (Var 0)),Func ("Curry2JS","removeSingleVarsInStat") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Maybe") [TCons ("Curry2JS","VarDef") []]]]) (FuncType (TCons ("JavaScript","JSStat") []) (TCons ("Prelude","[]") [TCons ("JavaScript","JSStat") []]))) (Rule [] (Var 0)),Func ("Curry2JS","removeSingleVarsInExp") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Maybe") [TCons ("Curry2JS","VarDef") []]]]) (FuncType (TCons ("JavaScript","JSExp") []) (TCons ("JavaScript","JSExp") []))) (Rule [] (Var 0)),Func ("Curry2JS","curry2js") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [] (Var 0)),Func ("Curry2JS","transformWUI") 3 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []])))) (Rule [] (Var 0)),Func ("Curry2JS","getAndTransformWUIConditions") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","Bool") []]]])) (Rule [] (Var 0)),Func ("Curry2JS","generateJavaScript") 4 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []]))))) (Rule [] (Var 0)),Func ("Curry2JS","fileExistsAndNewerThan") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","Bool") []]))) (Rule [] (Var 0)),Func ("Curry2JS","showQName") 1 Public (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Var 0)),Func ("Curry2JS","main") 0 Public (TCons ("Prelude","IO") [TCons ("Prelude","()") []]) (Rule [] (Var 0)),Func ("Curry2JS","mp") 0 Public (TCons ("Prelude","IO") [TCons ("Prelude","()") []]) (Rule [] (Var 0)),Func ("Curry2JS","mo") 0 Public (TCons ("Prelude","IO") [TCons ("Prelude","()") []]) (Rule [] (Var 0))] []