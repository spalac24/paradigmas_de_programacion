Prog "Groundness" ["Analysis","FlatCurry","GenericProgInfo","List","Prelude"] [Type ("Groundness","Ground") Public [] [Cons ("Groundness","G") 0 Public [],Cons ("Groundness","A") 0 Public [],Cons ("Groundness","P") 1 Public [TCons ("Prelude","[]") [TCons ("Prelude","Int") []]]],Type ("Groundness","NDEffect") Public [] [Cons ("Groundness","NDEffect") 3 Public [TCons ("Prelude","Bool") [],TCons ("Prelude","Bool") [],TCons ("Prelude","[]") [TCons ("Prelude","Int") []]]]] [Func ("Groundness","showGround") 2 Public (FuncType (TCons ("Analysis","AOutFormat") []) (FuncType (TCons ("Groundness","Ground") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1,2] (Case  Flex (Var 1) [Branch (Pattern ("Analysis","ANote") []) (Case  Flex (Var 2) [Branch (Pattern ("Groundness","G") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  'G'),Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Groundness","A") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  'A'),Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Groundness","P") [3]) (Comb FuncCall ("Prelude","show") [Var 3])]),Branch (Pattern ("Analysis","AText") []) (Case  Flex (Var 2) [Branch (Pattern ("Groundness","G") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]),Branch (Pattern ("Groundness","A") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'b'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]),Branch (Pattern ("Groundness","P") [4]) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]],Case  Rigid (Comb FuncCall ("Prelude","==") [Comb FuncCall ("Prelude","length") [Var 4],Lit (Intc  1)]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","show") [Comb FuncCall ("Prelude","head") [Var 4]],Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","show") [Var 4],Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]])]])])])),Func ("Groundness","lubG") 2 Private (FuncType (TCons ("Groundness","Ground") []) (FuncType (TCons ("Groundness","Ground") []) (TCons ("Groundness","Ground") []))) (Rule [1,2] (Case  Flex (Var 1) [Branch (Pattern ("Groundness","G") []) (Var 2),Branch (Pattern ("Groundness","A") []) (Comb ConsCall ("Groundness","A") []),Branch (Pattern ("Groundness","P") [3]) (Case  Flex (Var 2) [Branch (Pattern ("Groundness","G") []) (Comb ConsCall ("Groundness","P") [Var 3]),Branch (Pattern ("Groundness","A") []) (Comb ConsCall ("Groundness","A") []),Branch (Pattern ("Groundness","P") [4]) (Comb ConsCall ("Groundness","P") [Comb FuncCall ("Groundness","mergeInts") [Var 3,Var 4]])])])),Func ("Groundness","groundAnalysis") 0 Public (TCons ("Analysis","Analysis") [TCons ("Groundness","Ground") []]) (Rule [] (Comb FuncCall ("Analysis","dependencyFuncAnalysis") [Comb ConsCall ("Prelude",":") [Lit (Charc  'G'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]],Comb ConsCall ("Groundness","G") [],Comb (FuncPartCall 2) ("Groundness","groundFunc") []])),Func ("Groundness","groundFunc") 2 Private (FuncType (TCons ("FlatCurry","FuncDecl") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Groundness","Ground") []]]) (TCons ("Groundness","Ground") []))) (Rule [1,2] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","Func") [3,4,5,6,7]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude","(,)") [8,9]) (Let [(10,Comb FuncCall ("Groundness","groundFuncRule") [Var 2,Var 7]),(11,Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Groundness","P") [Comb ConsCall ("Prelude",":") [Lit (Intc  2),Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'q'),Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Groundness","P") [Comb ConsCall ("Prelude",":") [Lit (Intc  2),Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'N'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'F'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]],Comb ConsCall ("Groundness","P") [Comb ConsCall ("Prelude",":") [Lit (Intc  1),Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude","[]") []]]]),(12,Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  '+'),Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  '*'),Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'v'),Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'v'),Comb ConsCall ("Prelude",":") [Lit (Charc  'M'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude","[]") []]]]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'q'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'q'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'R'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'F'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  '='),Comb ConsCall ("Prelude",":") [Lit (Charc  '='),Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  '='),Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude",":") [Lit (Charc  '='),Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  '='),Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude",":") [Lit (Charc  '<'),Comb ConsCall ("Prelude",":") [Lit (Charc  '='),Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  '<'),Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  '>'),Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  '<'),Comb ConsCall ("Prelude",":") [Lit (Charc  '='),Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  '>'),Comb ConsCall ("Prelude",":") [Lit (Charc  '='),Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude","[]") []]]]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude","[]") []]]]]],Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]])] (Case  Rigid (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","==") [Var 8,Comb FuncCall ("Groundness","prelude") []],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","elem") [Var 9],Var 12]]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Groundness","G") []),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 8,Comb FuncCall ("Groundness","prelude") []]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","maybe") [Var 10,Comb (FuncPartCall 1) ("Prelude","id") [],Comb FuncCall ("Prelude","lookup") [Var 9,Var 11]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Var 10),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])]))])])),Func ("Groundness","groundFuncRule") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Groundness","Ground") []]]) (FuncType (TCons ("FlatCurry","Rule") []) (TCons ("Groundness","Ground") []))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("FlatCurry","External") [3]) (Comb ConsCall ("Groundness","A") []),Branch (Pattern ("FlatCurry","Rule") [4,5]) (Comb FuncCall ("Groundness","groundFuncRule.absEvalExpr.44") [Var 1,Comb FuncCall ("Prelude","zip") [Var 4,Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Groundness","groundFuncRule._#lambda3") [],Comb FuncCall ("Prelude","enumFrom") [Lit (Intc  1)]]],Var 5])])),Func ("Groundness","groundFuncRule.absEvalExpr.44") 3 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Groundness","Ground") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Groundness","Ground") []]]) (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("Groundness","Ground") [])))) (Rule [1,2,3] (Case  Flex (Var 3) [Branch (Pattern ("FlatCurry","Var") [4]) (Comb FuncCall ("Prelude","maybe") [Comb ConsCall ("Groundness","A") [],Comb (FuncPartCall 1) ("Prelude","id") [],Comb FuncCall ("Prelude","lookup") [Var 4,Var 2]]),Branch (Pattern ("FlatCurry","Lit") [5]) (Comb ConsCall ("Groundness","G") []),Branch (Pattern ("FlatCurry","Comb") [6,7,8]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 6,Comb ConsCall ("FlatCurry","FuncCall") []]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","maybe") [Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Prelude","error") [],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'A'),Comb ConsCall ("Prelude",":") [Lit (Charc  'b'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'v'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","show") [Var 7],Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  '!'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]],Comb (FuncPartCall 1) ("Groundness","groundFuncRule.absEvalExpr.44._#lambda1") [Var 1,Var 2,Var 8],Comb FuncCall ("Prelude","lookup") [Var 7,Var 1]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Groundness","lubG") [],Comb ConsCall ("Groundness","G") [],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Groundness","groundFuncRule.absEvalExpr.44") [Var 1,Var 2],Var 8]])]),Branch (Pattern ("FlatCurry","Free") [9,10]) (Comb FuncCall ("Groundness","groundFuncRule.absEvalExpr.44") [Var 1,Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","zip") [Var 9,Comb FuncCall ("Prelude","repeat") [Comb ConsCall ("Groundness","A") []]],Var 2],Var 10]),Branch (Pattern ("FlatCurry","Let") [11,12]) (Comb FuncCall ("Groundness","groundFuncRule.absEvalExpr.44") [Var 1,Comb FuncCall ("Groundness","groundFuncRule.absEvalBindings.44") [Var 1,Var 2,Var 11],Var 12]),Branch (Pattern ("FlatCurry","Or") [13,14]) (Comb FuncCall ("Groundness","lubG") [Comb FuncCall ("Groundness","groundFuncRule.absEvalExpr.44") [Var 1,Var 2,Var 13],Comb FuncCall ("Groundness","groundFuncRule.absEvalExpr.44") [Var 1,Var 2,Var 14]]),Branch (Pattern ("FlatCurry","Typed") [15,16]) (Comb FuncCall ("Groundness","groundFuncRule.absEvalExpr.44") [Var 1,Var 2,Var 15]),Branch (Pattern ("FlatCurry","Case") [17,18,19]) (Let [(20,Comb FuncCall ("Groundness","groundFuncRule.absEvalExpr.44") [Var 1,Var 2,Var 18])] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Groundness","lubG") [],Comb ConsCall ("Groundness","G") [],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Groundness","groundFuncRule.absEvalExpr.44.absEvalBranch.68") [Var 1,Var 2,Var 20],Var 19]]))])),Func ("Groundness","groundFuncRule.absEvalExpr.44._#lambda1") 4 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Groundness","Ground") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Groundness","Ground") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","Expr") []]) (FuncType (TCons ("Groundness","Ground") []) (TCons ("Groundness","Ground") []))))) (Rule [1,2,3,4] (Let [(5,Comb FuncCall ("Prelude","zip") [Comb FuncCall ("Prelude","enumFrom") [Lit (Intc  1)],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Groundness","groundFuncRule.absEvalExpr.44") [Var 1,Var 2],Var 3]])] (Comb FuncCall ("Groundness","groundApply") [Var 4,Var 5]))),Func ("Groundness","groundFuncRule.absEvalExpr.44.absEvalBranch.68") 4 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Groundness","Ground") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Groundness","Ground") []]]) (FuncType (TCons ("Groundness","Ground") []) (FuncType (TCons ("FlatCurry","BranchExpr") []) (TCons ("Groundness","Ground") []))))) (Rule [1,2,3,4] (Case  Flex (Var 4) [Branch (Pattern ("FlatCurry","Branch") [5,6]) (Case  Flex (Var 5) [Branch (Pattern ("FlatCurry","LPattern") [7]) (Comb FuncCall ("Groundness","groundFuncRule.absEvalExpr.44") [Var 1,Var 2,Var 6]),Branch (Pattern ("FlatCurry","Pattern") [8,9]) (Comb FuncCall ("Groundness","groundFuncRule.absEvalExpr.44") [Var 1,Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Groundness","groundFuncRule.absEvalExpr.44.absEvalBranch.68._#lambda2") [Var 3],Var 9],Var 2],Var 6])])])),Func ("Groundness","groundFuncRule.absEvalExpr.44.absEvalBranch.68._#lambda2") 2 Private (FuncType (TCons ("Groundness","Ground") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Groundness","Ground") []]))) (Rule [1,2] (Comb ConsCall ("Prelude","(,)") [Var 2,Var 1])),Func ("Groundness","groundFuncRule.absEvalBindings.44") 3 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Groundness","Ground") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Groundness","Ground") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","Expr") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Groundness","Ground") []]])))) (Rule [1,2,3] (Case  Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Var 2),Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 4) [Branch (Pattern ("Prelude","(,)") [6,7]) (Comb FuncCall ("Groundness","groundFuncRule.absEvalBindings.44") [Var 1,Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Var 6,Comb FuncCall ("Groundness","groundFuncRule.absEvalExpr.44") [Var 1,Var 2,Var 7]],Var 2],Var 5])])])),Func ("Groundness","groundFuncRule._#lambda3") 1 Private (FuncType (TCons ("Prelude","Int") []) (TCons ("Groundness","Ground") [])) (Rule [1] (Comb ConsCall ("Groundness","P") [Comb ConsCall ("Prelude",":") [Var 1,Comb ConsCall ("Prelude","[]") []]])),Func ("Groundness","groundApply") 2 Private (FuncType (TCons ("Groundness","Ground") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Groundness","Ground") []]]) (TCons ("Groundness","Ground") []))) (Rule [1,2] (Case  Flex (Var 1) [Branch (Pattern ("Groundness","G") []) (Comb ConsCall ("Groundness","G") []),Branch (Pattern ("Groundness","A") []) (Comb ConsCall ("Groundness","A") []),Branch (Pattern ("Groundness","P") [3]) (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Groundness","lubG") [],Comb ConsCall ("Groundness","G") [],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Groundness","groundApply._#lambda4") [Var 2],Var 3]])])),Func ("Groundness","groundApply._#lambda4") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Groundness","Ground") []]]) (FuncType (TCons ("Prelude","Int") []) (TCons ("Groundness","Ground") []))) (Rule [1,2] (Comb FuncCall ("Prelude","maybe") [Comb ConsCall ("Groundness","A") [],Comb (FuncPartCall 1) ("Prelude","id") [],Comb FuncCall ("Prelude","lookup") [Var 2,Var 1]])),Func ("Groundness","noEffect") 0 Private (TCons ("Groundness","NDEffect") []) (Rule [] (Comb ConsCall ("Groundness","NDEffect") [Comb ConsCall ("Prelude","False") [],Comb ConsCall ("Prelude","False") [],Comb ConsCall ("Prelude","[]") []])),Func ("Groundness","orEffect") 0 Private (TCons ("Groundness","NDEffect") []) (Rule [] (Comb ConsCall ("Groundness","NDEffect") [Comb ConsCall ("Prelude","True") [],Comb ConsCall ("Prelude","False") [],Comb ConsCall ("Prelude","[]") []])),Func ("Groundness","narrEffect") 0 Private (TCons ("Groundness","NDEffect") []) (Rule [] (Comb ConsCall ("Groundness","NDEffect") [Comb ConsCall ("Prelude","False") [],Comb ConsCall ("Prelude","True") [],Comb ConsCall ("Prelude","[]") []])),Func ("Groundness","narrIfEffect") 0 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Groundness","NDEffect") [])) (Rule [] (Comb (ConsPartCall 1) ("Groundness","NDEffect") [Comb ConsCall ("Prelude","False") [],Comb ConsCall ("Prelude","False") []])),Func ("Groundness","showNDEffect") 2 Public (FuncType (TCons ("Analysis","AOutFormat") []) (FuncType (TCons ("Groundness","NDEffect") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1,2] (Case  Flex (Var 1) [Branch (Pattern ("Analysis","ANote") []) (Case  Flex (Var 2) [Branch (Pattern ("Groundness","NDEffect") [3,4,5]) (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("List","intercalate") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude","++") [Case  Rigid (Var 3) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","[]") [])],Comb FuncCall ("Prelude","++") [Case  Rigid (Var 4) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","[]") [])],Case  Rigid (Comb FuncCall ("Prelude","not") [Comb FuncCall ("Prelude","null") [Var 5]]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'I'),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude","[]") []]]]]]],Comb FuncCall ("Prelude","show") [Var 5]],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","[]") [])]]]])]),Branch (Pattern ("Analysis","AText") []) (Case  Flex (Var 2) [Branch (Pattern ("Groundness","NDEffect") [6,7,8]) (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("List","intercalate") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '/'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("Prelude","++") [Case  Rigid (Var 6) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","[]") [])],Comb FuncCall ("Prelude","++") [Case  Rigid (Var 7) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'b'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","[]") [])],Case  Rigid (Comb FuncCall ("Prelude","not") [Comb FuncCall ("Prelude","null") [Var 8]]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],Case  Rigid (Comb FuncCall ("Prelude","==") [Comb FuncCall ("Prelude","length") [Var 8],Lit (Intc  1)]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","show") [Comb FuncCall ("Prelude","head") [Var 8]],Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","show") [Var 8],Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]])]],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","[]") [])]]]])])])),Func ("Groundness","lubE") 2 Private (FuncType (TCons ("Groundness","NDEffect") []) (FuncType (TCons ("Groundness","NDEffect") []) (TCons ("Groundness","NDEffect") []))) (Rule [1,2] (Case  Flex (Var 1) [Branch (Pattern ("Groundness","NDEffect") [3,4,5]) (Case  Flex (Var 2) [Branch (Pattern ("Groundness","NDEffect") [6,7,8]) (Let [(9,Comb FuncCall ("Prelude","||") [Var 4,Var 7])] (Comb ConsCall ("Groundness","NDEffect") [Comb FuncCall ("Prelude","||") [Var 3,Var 6],Var 9,Case  Rigid (Var 9) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Groundness","mergeInts") [Var 5,Var 8])]]))])])),Func ("Groundness","lubGE") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Groundness","Ground") [],TCons ("Groundness","NDEffect") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Groundness","Ground") [],TCons ("Groundness","NDEffect") []]) (TCons ("Prelude","(,)") [TCons ("Groundness","Ground") [],TCons ("Groundness","NDEffect") []]))) (Rule [1,2] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Case  Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [5,6]) (Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Groundness","lubG") [Var 3,Var 5],Comb FuncCall ("Groundness","lubE") [Var 4,Var 6]])])])),Func ("Groundness","ndEffectAnalysis") 0 Public (TCons ("Analysis","Analysis") [TCons ("Groundness","NDEffect") []]) (Rule [] (Comb FuncCall ("Analysis","combinedDependencyFuncAnalysis") [Comb ConsCall ("Prelude",":") [Lit (Charc  'N'),Comb ConsCall ("Prelude",":") [Lit (Charc  'D'),Comb ConsCall ("Prelude",":") [Lit (Charc  'E'),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude","[]") []]]]]]]]],Comb FuncCall ("Groundness","groundAnalysis") [],Comb FuncCall ("Groundness","noEffect") [],Comb (FuncPartCall 3) ("Groundness","ndEffectFunc") []])),Func ("Groundness","ndEffectFunc") 3 Private (FuncType (TCons ("GenericProgInfo","ProgInfo") [TCons ("Groundness","Ground") []]) (FuncType (TCons ("FlatCurry","FuncDecl") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Groundness","NDEffect") []]]) (TCons ("Groundness","NDEffect") [])))) (Rule [1,2,3] (Case  Flex (Var 2) [Branch (Pattern ("FlatCurry","Func") [4,5,6,7,8]) (Case  Flex (Var 4) [Branch (Pattern ("Prelude","(,)") [9,10]) (Let [(11,Comb FuncCall ("Groundness","ndEffectFuncRule") [Var 1,Var 3,Var 8]),(12,Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc  '?'),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Groundness","orEffect") []],Comb ConsCall ("Prelude","[]") []])] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 9,Comb FuncCall ("Groundness","prelude") []]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","maybe") [Var 11,Comb (FuncPartCall 1) ("Prelude","id") [],Comb FuncCall ("Prelude","lookup") [Var 10,Var 12]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Var 11),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])]))])])),Func ("Groundness","ndEffectFuncRule") 3 Private (FuncType (TCons ("GenericProgInfo","ProgInfo") [TCons ("Groundness","Ground") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Groundness","NDEffect") []]]) (FuncType (TCons ("FlatCurry","Rule") []) (TCons ("Groundness","NDEffect") [])))) (Rule [1,2,3] (Case  Flex (Var 3) [Branch (Pattern ("FlatCurry","External") [4]) (Comb FuncCall ("Groundness","noEffect") []),Branch (Pattern ("FlatCurry","Rule") [5,6]) (Comb FuncCall ("Prelude","snd") [Comb FuncCall ("Groundness","ndEffectFuncRule.absEvalExpr.125") [Var 2,Var 1,Comb FuncCall ("Prelude","zip") [Var 5,Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Groundness","ndEffectFuncRule._#lambda8") [],Comb FuncCall ("Prelude","enumFrom") [Lit (Intc  1)]]],Var 6]])])),Func ("Groundness","ndEffectFuncRule.absEvalExpr.125") 4 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Groundness","NDEffect") []]]) (FuncType (TCons ("GenericProgInfo","ProgInfo") [TCons ("Groundness","Ground") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","(,)") [TCons ("Groundness","Ground") [],TCons ("Groundness","NDEffect") []]]]) (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("Prelude","(,)") [TCons ("Groundness","Ground") [],TCons ("Groundness","NDEffect") []]))))) (Rule [1,2,3,4] (Case  Flex (Var 4) [Branch (Pattern ("FlatCurry","Var") [5]) (Comb FuncCall ("Prelude","maybe") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Groundness","A") [],Comb FuncCall ("Groundness","noEffect") []],Comb (FuncPartCall 1) ("Prelude","id") [],Comb FuncCall ("Prelude","lookup") [Var 5,Var 3]]),Branch (Pattern ("FlatCurry","Lit") [6]) (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Groundness","G") [],Comb FuncCall ("Groundness","noEffect") []]),Branch (Pattern ("FlatCurry","Comb") [7,8,9]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 7,Comb ConsCall ("FlatCurry","FuncCall") []]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","maybe") [Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Prelude","error") [],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'A'),Comb ConsCall ("Prelude",":") [Lit (Charc  'b'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'v'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","show") [Var 8],Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  '!'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]],Comb (FuncPartCall 1) ("Groundness","ndEffectFuncRule.absEvalExpr.125._#lambda5") [Var 1,Var 3,Var 9,Var 8,Var 2],Comb FuncCall ("Prelude","lookup") [Var 8,Var 1]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Groundness","lubGE") [],Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Groundness","G") [],Comb FuncCall ("Groundness","noEffect") []],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Groundness","ndEffectFuncRule.absEvalExpr.125") [Var 1,Var 2,Var 3],Var 9]])]),Branch (Pattern ("FlatCurry","Free") [10,11]) (Comb FuncCall ("Groundness","ndEffectFuncRule.absEvalExpr.125") [Var 1,Var 2,Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","zip") [Var 10,Comb FuncCall ("Prelude","repeat") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Groundness","A") [],Comb FuncCall ("Groundness","noEffect") []]]],Var 3],Var 11]),Branch (Pattern ("FlatCurry","Let") [12,13]) (Comb FuncCall ("Groundness","ndEffectFuncRule.absEvalExpr.125") [Var 1,Var 2,Comb FuncCall ("Groundness","ndEffectFuncRule.absEvalBindings.125") [Var 1,Var 2,Var 3,Var 12],Var 13]),Branch (Pattern ("FlatCurry","Or") [14,15]) (Let [(16,Comb FuncCall ("Groundness","ndEffectFuncRule.absEvalExpr.125") [Var 1,Var 2,Var 3,Var 14]),(17,Comb FuncCall ("Groundness","ndEffectFuncRule.absEvalExpr.125._#selFP5#g1") [Var 16]),(18,Comb FuncCall ("Groundness","ndEffectFuncRule.absEvalExpr.125._#selFP6#nd1") [Var 16]),(19,Comb FuncCall ("Groundness","ndEffectFuncRule.absEvalExpr.125") [Var 1,Var 2,Var 3,Var 15]),(20,Comb FuncCall ("Groundness","ndEffectFuncRule.absEvalExpr.125._#selFP3#g2") [Var 19]),(21,Comb FuncCall ("Groundness","ndEffectFuncRule.absEvalExpr.125._#selFP4#nd2") [Var 19])] (Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Groundness","lubG") [Var 17,Var 20],Comb FuncCall ("Groundness","lubE") [Comb FuncCall ("Groundness","orEffect") [],Comb FuncCall ("Groundness","lubE") [Var 18,Var 21]]])),Branch (Pattern ("FlatCurry","Typed") [22,23]) (Comb FuncCall ("Groundness","ndEffectFuncRule.absEvalExpr.125") [Var 1,Var 2,Var 3,Var 22]),Branch (Pattern ("FlatCurry","Case") [24,25,26]) (Let [(27,Comb FuncCall ("Groundness","ndEffectFuncRule.absEvalExpr.125") [Var 1,Var 2,Var 3,Var 25]),(28,Comb FuncCall ("Groundness","ndEffectFuncRule.absEvalExpr.125._#selFP11#gcase") [Var 27]),(29,Comb FuncCall ("Groundness","ndEffectFuncRule.absEvalExpr.125._#selFP12#ndcase") [Var 27]),(30,Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Groundness","lubGE") [],Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Groundness","G") [],Comb FuncCall ("Groundness","noEffect") []],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Groundness","ndEffectFuncRule.absEvalExpr.125.absEvalBranch.152") [Var 1,Var 3,Var 28,Var 2],Var 26]]),(31,Comb FuncCall ("Groundness","ndEffectFuncRule.absEvalExpr.125._#selFP9#gbrs") [Var 30]),(32,Comb FuncCall ("Groundness","ndEffectFuncRule.absEvalExpr.125._#selFP10#ndbrs") [Var 30])] (Case  Rigid (Comb FuncCall ("Prelude","||") [Comb FuncCall ("Prelude","==") [Var 24,Comb ConsCall ("FlatCurry","Rigid") []],Comb FuncCall ("Prelude","||") [Comb FuncCall ("Prelude","==") [Var 28,Comb ConsCall ("Groundness","G") []],Comb FuncCall ("Prelude","==") [Comb FuncCall ("Prelude","length") [Var 26],Lit (Intc  1)]]]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","(,)") [Var 31,Comb FuncCall ("Groundness","lubE") [Var 32,Var 29]]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","(,)") [Var 31,Comb FuncCall ("Groundness","lubE") [Comb FuncCall ("Groundness","ndEffectFuncRule.absEvalExpr.125.ground2nondet.152") [Var 28],Comb FuncCall ("Groundness","lubE") [Var 32,Var 29]]])]))])),Func ("Groundness","ndEffectFuncRule.absEvalExpr.125._#lambda5") 6 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Groundness","NDEffect") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","(,)") [TCons ("Groundness","Ground") [],TCons ("Groundness","NDEffect") []]]]) (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","Expr") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("GenericProgInfo","ProgInfo") [TCons ("Groundness","Ground") []]) (FuncType (TCons ("Groundness","NDEffect") []) (TCons ("Prelude","(,)") [TCons ("Groundness","Ground") [],TCons ("Groundness","NDEffect") []]))))))) (Rule [1,2,3,4,5,6] (Let [(7,Comb FuncCall ("Prelude","zip") [Comb FuncCall ("Prelude","enumFrom") [Lit (Intc  1)],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Groundness","ndEffectFuncRule.absEvalExpr.125") [Var 1,Var 5,Var 2],Var 3]])] (Comb FuncCall ("Prelude","maybe") [Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Prelude","error") [],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'G'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'v'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","show") [Var 4],Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  '!'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]],Comb (FuncPartCall 1) ("Groundness","ndEffectFuncRule.absEvalExpr.125._#lambda5._#lambda6") [Var 7,Var 6],Comb FuncCall ("GenericProgInfo","lookupProgInfo") [Var 4,Var 5]]))),Func ("Groundness","ndEffectFuncRule.absEvalExpr.125._#lambda5._#lambda6") 3 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","(,)") [TCons ("Groundness","Ground") [],TCons ("Groundness","NDEffect") []]]]) (FuncType (TCons ("Groundness","NDEffect") []) (FuncType (TCons ("Groundness","Ground") []) (TCons ("Prelude","(,)") [TCons ("Groundness","Ground") [],TCons ("Groundness","NDEffect") []])))) (Rule [1,2,3] (Comb FuncCall ("Groundness","ndEffectApply") [Comb ConsCall ("Prelude","(,)") [Var 3,Var 2],Var 1])),Func ("Groundness","ndEffectFuncRule.absEvalExpr.125._#selFP5#g1") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Groundness","Ground") [],TCons ("Groundness","NDEffect") []]) (TCons ("Groundness","Ground") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("Groundness","ndEffectFuncRule.absEvalExpr.125._#selFP6#nd1") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Groundness","Ground") [],TCons ("Groundness","NDEffect") []]) (TCons ("Groundness","NDEffect") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("Groundness","ndEffectFuncRule.absEvalExpr.125._#selFP3#g2") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Groundness","Ground") [],TCons ("Groundness","NDEffect") []]) (TCons ("Groundness","Ground") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("Groundness","ndEffectFuncRule.absEvalExpr.125._#selFP4#nd2") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Groundness","Ground") [],TCons ("Groundness","NDEffect") []]) (TCons ("Groundness","NDEffect") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("Groundness","ndEffectFuncRule.absEvalExpr.125._#selFP11#gcase") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Groundness","Ground") [],TCons ("Groundness","NDEffect") []]) (TCons ("Groundness","Ground") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("Groundness","ndEffectFuncRule.absEvalExpr.125._#selFP12#ndcase") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Groundness","Ground") [],TCons ("Groundness","NDEffect") []]) (TCons ("Groundness","NDEffect") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("Groundness","ndEffectFuncRule.absEvalExpr.125.absEvalBranch.152") 5 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Groundness","NDEffect") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","(,)") [TCons ("Groundness","Ground") [],TCons ("Groundness","NDEffect") []]]]) (FuncType (TCons ("Groundness","Ground") []) (FuncType (TCons ("GenericProgInfo","ProgInfo") [TCons ("Groundness","Ground") []]) (FuncType (TCons ("FlatCurry","BranchExpr") []) (TCons ("Prelude","(,)") [TCons ("Groundness","Ground") [],TCons ("Groundness","NDEffect") []])))))) (Rule [1,2,3,4,5] (Case  Flex (Var 5) [Branch (Pattern ("FlatCurry","Branch") [6,7]) (Case  Flex (Var 6) [Branch (Pattern ("FlatCurry","LPattern") [8]) (Comb FuncCall ("Groundness","ndEffectFuncRule.absEvalExpr.125") [Var 1,Var 4,Var 2,Var 7]),Branch (Pattern ("FlatCurry","Pattern") [9,10]) (Comb FuncCall ("Groundness","ndEffectFuncRule.absEvalExpr.125") [Var 1,Var 4,Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Groundness","ndEffectFuncRule.absEvalExpr.125.absEvalBranch.152._#lambda7") [Var 3],Var 10],Var 2],Var 7])])])),Func ("Groundness","ndEffectFuncRule.absEvalExpr.125.absEvalBranch.152._#lambda7") 2 Private (FuncType (TCons ("Groundness","Ground") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","(,)") [TCons ("Groundness","Ground") [],TCons ("Groundness","NDEffect") []]]))) (Rule [1,2] (Comb ConsCall ("Prelude","(,)") [Var 2,Comb ConsCall ("Prelude","(,)") [Var 1,Comb FuncCall ("Groundness","noEffect") []]])),Func ("Groundness","ndEffectFuncRule.absEvalExpr.125._#selFP9#gbrs") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Groundness","Ground") [],TCons ("Groundness","NDEffect") []]) (TCons ("Groundness","Ground") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("Groundness","ndEffectFuncRule.absEvalExpr.125._#selFP10#ndbrs") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Groundness","Ground") [],TCons ("Groundness","NDEffect") []]) (TCons ("Groundness","NDEffect") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("Groundness","ndEffectFuncRule.absEvalExpr.125.ground2nondet.152") 1 Private (FuncType (TCons ("Groundness","Ground") []) (TCons ("Groundness","NDEffect") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Groundness","G") []) (Comb FuncCall ("Groundness","noEffect") []),Branch (Pattern ("Groundness","A") []) (Comb FuncCall ("Groundness","narrEffect") []),Branch (Pattern ("Groundness","P") [2]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Groundness","narrIfEffect") [],Var 2])])),Func ("Groundness","ndEffectFuncRule.absEvalBindings.125") 4 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Groundness","NDEffect") []]]) (FuncType (TCons ("GenericProgInfo","ProgInfo") [TCons ("Groundness","Ground") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","(,)") [TCons ("Groundness","Ground") [],TCons ("Groundness","NDEffect") []]]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","Expr") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","(,)") [TCons ("Groundness","Ground") [],TCons ("Groundness","NDEffect") []]]]))))) (Rule [1,2,3,4] (Case  Flex (Var 4) [Branch (Pattern ("Prelude","[]") []) (Var 3),Branch (Pattern ("Prelude",":") [5,6]) (Case  Flex (Var 5) [Branch (Pattern ("Prelude","(,)") [7,8]) (Comb FuncCall ("Groundness","ndEffectFuncRule.absEvalBindings.125") [Var 1,Var 2,Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Var 7,Comb FuncCall ("Groundness","ndEffectFuncRule.absEvalExpr.125") [Var 1,Var 2,Var 3,Var 8]],Var 3],Var 6])])])),Func ("Groundness","ndEffectFuncRule._#lambda8") 1 Private (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","(,)") [TCons ("Groundness","Ground") [],TCons ("Groundness","NDEffect") []])) (Rule [1] (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Groundness","P") [Comb ConsCall ("Prelude",":") [Var 1,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Groundness","noEffect") []])),Func ("Groundness","ndEffectApply") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Groundness","Ground") [],TCons ("Groundness","NDEffect") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","(,)") [TCons ("Groundness","Ground") [],TCons ("Groundness","NDEffect") []]]]) (TCons ("Prelude","(,)") [TCons ("Groundness","Ground") [],TCons ("Groundness","NDEffect") []]))) (Rule [1,2] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Let [(5,Comb FuncCall ("Prelude","unzip") [Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Groundness","ndEffectApply._#lambda9") [],Var 2]]),(6,Comb FuncCall ("Groundness","ndEffectApply._#selFP14#argsgd") [Var 5]),(7,Comb FuncCall ("Groundness","ndEffectApply._#selFP15#argsnd") [Var 5])] (Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Groundness","groundApply") [Var 3,Var 6],Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Groundness","lubE") [],Comb FuncCall ("Groundness","ndEffectReplace") [Var 6,Var 4],Var 7]]))])),Func ("Groundness","ndEffectApply._#lambda9") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","(,)") [TCons ("Groundness","Ground") [],TCons ("Groundness","NDEffect") []]]) (TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Groundness","Ground") []],TCons ("Groundness","NDEffect") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","(,)") [Var 2,Var 4],Var 5])])])),Func ("Groundness","ndEffectApply._#selFP14#argsgd") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Groundness","Ground") []]],TCons ("Prelude","[]") [TCons ("Groundness","NDEffect") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Groundness","Ground") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("Groundness","ndEffectApply._#selFP15#argsnd") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Groundness","Ground") []]],TCons ("Prelude","[]") [TCons ("Groundness","NDEffect") []]]) (TCons ("Prelude","[]") [TCons ("Groundness","NDEffect") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("Groundness","ndEffectReplace") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Groundness","Ground") []]]) (FuncType (TCons ("Groundness","NDEffect") []) (TCons ("Groundness","NDEffect") []))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Groundness","NDEffect") [3,4,5]) (Comb FuncCall ("Groundness","ndEffectReplace.replaceProjs.181") [Var 1,Var 4,Var 3,Comb ConsCall ("Prelude","[]") [],Var 5])])),Func ("Groundness","ndEffectReplace.replaceProjs.181") 5 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Groundness","Ground") []]]) (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Groundness","NDEffect") [])))))) (Rule [1,2,3,4,5] (Case  Flex (Var 5) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Groundness","NDEffect") [Var 3,Var 2,Var 4]),Branch (Pattern ("Prelude",":") [6,7]) (Comb FuncCall ("Prelude","maybe") [Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Prelude","error") [],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'G'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'v'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","show") [Var 6],Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  '!'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]],Comb (FuncPartCall 1) ("Groundness","ndEffectReplace.replaceProjs.181._#lambda10") [Var 1,Var 7,Var 2,Var 3,Var 4],Comb FuncCall ("Prelude","lookup") [Var 6,Var 1]])])),Func ("Groundness","ndEffectReplace.replaceProjs.181._#lambda10") 6 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Groundness","Ground") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (FuncType (TCons ("Groundness","Ground") []) (TCons ("Groundness","NDEffect") []))))))) (Rule [1,2,3,4,5,6] (Case  Rigid (Var 6) [Branch (Pattern ("Groundness","G") []) (Comb FuncCall ("Groundness","ndEffectReplace.replaceProjs.181") [Var 1,Var 3,Var 4,Var 5,Var 2]),Branch (Pattern ("Groundness","A") []) (Comb ConsCall ("Groundness","NDEffect") [Var 4,Comb ConsCall ("Prelude","True") [],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Groundness","P") [7]) (Comb FuncCall ("Groundness","ndEffectReplace.replaceProjs.181") [Var 1,Var 3,Var 4,Comb FuncCall ("Groundness","mergeInts") [Var 7,Var 5],Var 2])])),Func ("Groundness","mergeInts") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]))) (Rule [1,2] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Var 2),Branch (Pattern ("Prelude",":") [3,4]) (Case  Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude",":") [Var 3,Var 4]),Branch (Pattern ("Prelude",":") [5,6]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 3,Var 5]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Var 3,Comb FuncCall ("Groundness","mergeInts") [Var 4,Var 6]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","<") [Var 3,Var 5]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Var 3,Comb FuncCall ("Groundness","mergeInts") [Var 4,Comb ConsCall ("Prelude",":") [Var 5,Var 6]]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude",">") [Var 3,Var 5]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Var 5,Comb FuncCall ("Groundness","mergeInts") [Comb ConsCall ("Prelude",":") [Var 3,Var 4],Var 6]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])])])),Func ("Groundness","prelude") 0 Private (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (Rule [] (Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]]))] []