Prog "Deterministic" ["Analysis","FlatCurry","Prelude","FlatCurryGoodies"] [Type ("Deterministic","Deterministic") Public [] [Cons ("Deterministic","NDet") 0 Public [],Cons ("Deterministic","Det") 0 Public []]] [Func ("Deterministic","overlapAnalysis") 0 Public (TCons ("Analysis","Analysis") [TCons ("Prelude","Bool") []]) (Rule [] (Comb FuncCall ("Analysis","simpleFuncAnalysis") [Comb ConsCall ("Prelude",":") [Lit (Charc  'O'),Comb ConsCall ("Prelude",":") [Lit (Charc  'v'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]],Comb (FuncPartCall 1) ("Deterministic","isOverlappingFunction") []])),Func ("Deterministic","isOverlappingFunction") 1 Private (FuncType (TCons ("FlatCurry","FuncDecl") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","Func") [2,3,4,5,6]) (Case  Flex (Var 6) [Branch (Pattern ("FlatCurry","Rule") [7,8]) (Comb FuncCall ("Deterministic","orInExpr") [Var 8]),Branch (Pattern ("FlatCurry","External") [9]) (Comb FuncCall ("Prelude","==") [Var 2,Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb ConsCall ("Prelude",":") [Lit (Charc  '?'),Comb ConsCall ("Prelude","[]") []]]])])])),Func ("Deterministic","orInExpr") 1 Private (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","Var") [2]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("FlatCurry","Lit") [3]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("FlatCurry","Comb") [4,5,6]) (Comb FuncCall ("Prelude","||") [Comb FuncCall ("Prelude","==") [Var 5,Comb FuncCall ("Deterministic","pre") [Comb ConsCall ("Prelude",":") [Lit (Charc  '?'),Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","any") [Comb (FuncPartCall 1) ("Deterministic","orInExpr") []],Var 6]]),Branch (Pattern ("FlatCurry","Free") [7,8]) (Comb FuncCall ("Deterministic","orInExpr") [Var 8]),Branch (Pattern ("FlatCurry","Let") [9,10]) (Comb FuncCall ("Prelude","||") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","any") [Comb (FuncPartCall 1) ("Deterministic","orInExpr") []],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Prelude","snd") [],Var 9]],Comb FuncCall ("Deterministic","orInExpr") [Var 10]]),Branch (Pattern ("FlatCurry","Or") [11,12]) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("FlatCurry","Case") [13,14,15]) (Comb FuncCall ("Prelude","||") [Comb FuncCall ("Deterministic","orInExpr") [Var 14],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","any") [Comb (FuncPartCall 1) ("Deterministic","orInExpr.orInBranch.36") []],Var 15]]),Branch (Pattern ("FlatCurry","Typed") [16,17]) (Comb FuncCall ("Deterministic","orInExpr") [Var 16])])),Func ("Deterministic","orInExpr.orInBranch.36") 1 Private (FuncType (TCons ("FlatCurry","BranchExpr") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","Branch") [2,3]) (Comb FuncCall ("Deterministic","orInExpr") [Var 3])])),Func ("Deterministic","showOverlap") 2 Public (FuncType (TCons ("Analysis","AOutFormat") []) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'v'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]),Branch (Pattern ("Prelude","False") []) (Case  Flex (Var 1) [Branch (Pattern ("Analysis","AText") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'v'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]),Branch (Pattern ("Analysis","ANote") []) (Comb ConsCall ("Prelude","[]") [])])])),Func ("Deterministic","showDet") 2 Public (FuncType (TCons ("Analysis","AOutFormat") []) (FuncType (TCons ("Deterministic","Deterministic") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Deterministic","NDet") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]),Branch (Pattern ("Deterministic","Det") []) (Case  Flex (Var 1) [Branch (Pattern ("Analysis","AText") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]),Branch (Pattern ("Analysis","ANote") []) (Comb ConsCall ("Prelude","[]") [])])])),Func ("Deterministic","nondetAnalysis") 0 Public (TCons ("Analysis","Analysis") [TCons ("Deterministic","Deterministic") []]) (Rule [] (Comb FuncCall ("Analysis","dependencyFuncAnalysis") [Comb ConsCall ("Prelude",":") [Lit (Charc  'D'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]],Comb ConsCall ("Deterministic","Det") [],Comb (FuncPartCall 2) ("Deterministic","nondetFunc") []])),Func ("Deterministic","nondetFunc") 2 Private (FuncType (TCons ("FlatCurry","FuncDecl") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Deterministic","Deterministic") []]]) (TCons ("Deterministic","Deterministic") []))) (Rule [1,2] (Case  Rigid (Comb FuncCall ("Prelude","||") [Comb FuncCall ("Deterministic","isNondetDefined") [Var 1],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","any") [Comb (FuncPartCall 1) ("Prelude","flip") [Comb (FuncPartCall 2) ("Prelude","==") [],Comb ConsCall ("Deterministic","NDet") []]],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Prelude","snd") [],Var 2]]]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Deterministic","NDet") []),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Deterministic","Det") [])])),Func ("Deterministic","isNondetDefined") 1 Private (FuncType (TCons ("FlatCurry","FuncDecl") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","Func") [2,3,4,5,6]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","notElem") [Var 2],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Deterministic","pre") [],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude","[]") []]]]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  '$'),Comb ConsCall ("Prelude",":") [Lit (Charc  '!'),Comb ConsCall ("Prelude",":") [Lit (Charc  '!'),Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  '$'),Comb ConsCall ("Prelude",":") [Lit (Charc  '#'),Comb ConsCall ("Prelude",":") [Lit (Charc  '#'),Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'F'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'N'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'F'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]],Comb ConsCall ("Prelude","[]") []]]]]]]],Comb FuncCall ("Deterministic","isNondetRule") [Var 6]])])),Func ("Deterministic","isNondetRule") 1 Private (FuncType (TCons ("FlatCurry","Rule") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","Rule") [2,3]) (Comb FuncCall ("Prelude","||") [Comb FuncCall ("Deterministic","orInExpr") [Var 3],Comb FuncCall ("Deterministic","extraVarInExpr") [Var 3]]),Branch (Pattern ("FlatCurry","External") [4]) (Comb ConsCall ("Prelude","False") [])])),Func ("Deterministic","extraVarInExpr") 1 Private (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","Var") [2]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("FlatCurry","Lit") [3]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("FlatCurry","Comb") [4,5,6]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","or") [],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Deterministic","extraVarInExpr") [],Var 6]]),Branch (Pattern ("FlatCurry","Free") [7,8]) (Comb FuncCall ("Prelude","||") [Comb FuncCall ("Prelude","not") [Comb FuncCall ("Prelude","null") [Var 7]],Comb FuncCall ("Deterministic","extraVarInExpr") [Var 8]]),Branch (Pattern ("FlatCurry","Let") [9,10]) (Comb FuncCall ("Prelude","||") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","any") [Comb (FuncPartCall 1) ("Deterministic","extraVarInExpr") []],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Prelude","snd") [],Var 9]],Comb FuncCall ("Deterministic","extraVarInExpr") [Var 10]]),Branch (Pattern ("FlatCurry","Or") [11,12]) (Comb FuncCall ("Prelude","||") [Comb FuncCall ("Deterministic","extraVarInExpr") [Var 11],Comb FuncCall ("Deterministic","extraVarInExpr") [Var 12]]),Branch (Pattern ("FlatCurry","Case") [13,14,15]) (Comb FuncCall ("Prelude","||") [Comb FuncCall ("Deterministic","extraVarInExpr") [Var 14],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","any") [Comb (FuncPartCall 1) ("Deterministic","extraVarInExpr.extraVarInBranch.90") []],Var 15]]),Branch (Pattern ("FlatCurry","Typed") [16,17]) (Comb FuncCall ("Deterministic","extraVarInExpr") [Var 16])])),Func ("Deterministic","extraVarInExpr.extraVarInBranch.90") 1 Private (FuncType (TCons ("FlatCurry","BranchExpr") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","Branch") [2,3]) (Comb FuncCall ("Deterministic","extraVarInExpr") [Var 3])])),Func ("Deterministic","pre") 1 Private (FuncType (TVar 0) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TVar 0])) (Rule [1] (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]],Var 1]))] []