Prog "HigherOrder" ["Analysis","FlatCurry","FlatCurryGoodies","GenericProgInfo","Maybe","Prelude"] [Type ("HigherOrder","Order") Public [] [Cons ("HigherOrder","HO") 0 Public [],Cons ("HigherOrder","FO") 0 Public []]] [Func ("HigherOrder","showOrder") 2 Public (FuncType (TCons ("Analysis","AOutFormat") []) (FuncType (TCons ("HigherOrder","Order") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("HigherOrder","HO") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]),Branch (Pattern ("HigherOrder","FO") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]])])),Func ("HigherOrder","hoOr") 2 Private (FuncType (TCons ("HigherOrder","Order") []) (FuncType (TCons ("HigherOrder","Order") []) (TCons ("HigherOrder","Order") []))) (Rule [1,2] (Case  Flex (Var 1) [Branch (Pattern ("HigherOrder","HO") []) (Comb ConsCall ("HigherOrder","HO") []),Branch (Pattern ("HigherOrder","FO") []) (Var 2)])),Func ("HigherOrder","hiOrdType") 0 Public (TCons ("Analysis","Analysis") [TCons ("HigherOrder","Order") []]) (Rule [] (Comb FuncCall ("Analysis","dependencyTypeAnalysis") [Comb ConsCall ("Prelude",":") [Lit (Charc  'H'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'O'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'T'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]],Comb ConsCall ("HigherOrder","FO") [],Comb (FuncPartCall 2) ("HigherOrder","orderOfType") []])),Func ("HigherOrder","orderOfType") 2 Private (FuncType (TCons ("FlatCurry","TypeDecl") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("HigherOrder","Order") []]]) (TCons ("HigherOrder","Order") []))) (Rule [1,2] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","Type") [3,4,5,6]) (Comb FuncCall ("HigherOrder","hoOr") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("HigherOrder","hoOr") [],Comb ConsCall ("HigherOrder","FO") [],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("HigherOrder","orderOfType.orderOfConsDecl.18") [],Var 6]],Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("HigherOrder","hoOr") [],Comb ConsCall ("HigherOrder","FO") [],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Prelude","snd") [],Var 2]]]),Branch (Pattern ("FlatCurry","TypeSyn") [7,8,9,10]) (Comb FuncCall ("HigherOrder","hoOr") [Comb FuncCall ("HigherOrder","orderOfTypeExpr") [Var 10],Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("HigherOrder","hoOr") [],Comb ConsCall ("HigherOrder","FO") [],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Prelude","snd") [],Var 2]]])])),Func ("HigherOrder","orderOfType.orderOfConsDecl.18") 1 Private (FuncType (TCons ("FlatCurry","ConsDecl") []) (TCons ("HigherOrder","Order") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","Cons") [2,3,4,5]) (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("HigherOrder","hoOr") [],Comb ConsCall ("HigherOrder","FO") [],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("HigherOrder","orderOfTypeExpr") [],Var 5]])])),Func ("HigherOrder","orderOfTypeExpr") 1 Private (FuncType (TCons ("FlatCurry","TypeExpr") []) (TCons ("HigherOrder","Order") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","TVar") [2]) (Comb ConsCall ("HigherOrder","FO") []),Branch (Pattern ("FlatCurry","FuncType") [3,4]) (Comb ConsCall ("HigherOrder","HO") []),Branch (Pattern ("FlatCurry","TCons") [5,6]) (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("HigherOrder","hoOr") [],Comb ConsCall ("HigherOrder","FO") [],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("HigherOrder","orderOfTypeExpr") [],Var 6]])])),Func ("HigherOrder","hiOrdCons") 0 Public (TCons ("Analysis","Analysis") [TCons ("HigherOrder","Order") []]) (Rule [] (Comb FuncCall ("Analysis","simpleConstructorAnalysis") [Comb ConsCall ("Prelude",":") [Lit (Charc  'H'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'O'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]],Comb (FuncPartCall 2) ("HigherOrder","hiOrdCons.orderOfConsDecl.40") []])),Func ("HigherOrder","hiOrdCons.orderOfConsDecl.40") 2 Private (FuncType (TCons ("FlatCurry","ConsDecl") []) (FuncType (TVar 0) (TCons ("HigherOrder","Order") []))) (Rule [1,2] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","Cons") [3,4,5,6]) (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("HigherOrder","hoOr") [],Comb ConsCall ("HigherOrder","FO") [],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("HigherOrder","orderOfTypeExpr") [],Var 6]])])),Func ("HigherOrder","hiOrdFunc") 0 Public (TCons ("Analysis","Analysis") [TCons ("HigherOrder","Order") []]) (Rule [] (Comb FuncCall ("Analysis","combinedSimpleFuncAnalysis") [Comb ConsCall ("Prelude",":") [Lit (Charc  'H'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'O'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'F'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]],Comb FuncCall ("HigherOrder","hiOrdType") [],Comb (FuncPartCall 2) ("HigherOrder","orderOfFunc") []])),Func ("HigherOrder","orderOfFunc") 2 Private (FuncType (TCons ("GenericProgInfo","ProgInfo") [TCons ("HigherOrder","Order") []]) (FuncType (TCons ("FlatCurry","FuncDecl") []) (TCons ("HigherOrder","Order") []))) (Rule [1,2] (Comb FuncCall ("HigherOrder","orderOfFuncTypeArity") [Var 1,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FlatCurryGoodies","funcType") [],Var 2],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FlatCurryGoodies","funcArity") [],Var 2]])),Func ("HigherOrder","orderOfFuncTypeArity") 3 Private (FuncType (TCons ("GenericProgInfo","ProgInfo") [TCons ("HigherOrder","Order") []]) (FuncType (TCons ("FlatCurry","TypeExpr") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("HigherOrder","Order") [])))) (Rule [1,2,3] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 3,Lit (Intc  0)]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 2) [Branch (Pattern ("FlatCurry","FuncType") [4,5]) (Comb ConsCall ("HigherOrder","HO") []),Branch (Pattern ("FlatCurry","TVar") [6]) (Let [(7,Var 6)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 7,Lit (Intc  -42)]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("HigherOrder","HO") []),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("HigherOrder","FO") [])])),Branch (Pattern ("FlatCurry","TCons") [8,9]) (Case  Rigid (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Comb FuncCall ("HigherOrder","hoOr") [Comb FuncCall ("HigherOrder","orderOfFuncTypeArity") [Var 1,Var 10,Lit (Intc  0)],Comb FuncCall ("HigherOrder","orderOfFuncTypeArity") [Var 1,Comb ConsCall ("FlatCurry","TCons") [Var 8,Var 11],Lit (Intc  0)]]),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Maybe","fromMaybe") [Comb ConsCall ("HigherOrder","FO") [],Comb FuncCall ("GenericProgInfo","lookupProgInfo") [Var 8,Var 1]])])]),Branch (Pattern ("Prelude","False") []) (Let [(12,Comb FuncCall ("HigherOrder","orderOfFuncTypeArity._#selFP2#x") [Var 2]),(13,Comb FuncCall ("HigherOrder","orderOfFuncTypeArity._#selFP3#y") [Var 2])] (Comb FuncCall ("HigherOrder","hoOr") [Comb FuncCall ("HigherOrder","orderOfFuncTypeArity") [Var 1,Var 12,Lit (Intc  0)],Comb FuncCall ("HigherOrder","orderOfFuncTypeArity") [Var 1,Var 13,Comb FuncCall ("Prelude","-") [Var 3,Lit (Intc  1)]]]))])),Func ("HigherOrder","orderOfFuncTypeArity._#selFP2#x") 1 Private (FuncType (TCons ("FlatCurry","TypeExpr") []) (TCons ("FlatCurry","TypeExpr") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","FuncType") [2,3]) (Var 2)])),Func ("HigherOrder","orderOfFuncTypeArity._#selFP3#y") 1 Private (FuncType (TCons ("FlatCurry","TypeExpr") []) (TCons ("FlatCurry","TypeExpr") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","FuncType") [2,3]) (Var 3)]))] []