Prog "CurryDocCDoc" ["CurryDocRead","FlatCurry","FlexRigid","Prelude","ReadShowTerm","CurryDocParams","List"] [Type ("CurryDocCDoc","ModuleInfo") Public [] [Cons ("CurryDocCDoc","ModuleInfo") 3 Public [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]],Type ("CurryDocCDoc","CurryInfo") Public [] [Cons ("CurryDocCDoc","CurryInfo") 3 Public [TCons ("CurryDocCDoc","ModuleInfo") [],TCons ("Prelude","[]") [TCons ("CurryDocCDoc","FunctionInfo") []],TCons ("Prelude","[]") [TCons ("CurryDocCDoc","TypeInfo") []]]],Type ("CurryDocCDoc","FunctionInfo") Public [] [Cons ("CurryDocCDoc","FunctionInfo") 6 Public [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("FlatCurry","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","Bool") [],TCons ("FlexRigid","FlexRigidResult") []]],Type ("CurryDocCDoc","TypeInfo") Public [] [Cons ("CurryDocCDoc","TypeInfo") 6 Public [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","[]") [TCons ("FlatCurry","TypeExpr") []]]],TCons ("Prelude","[]") [TCons ("Prelude","Int") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","Bool") []]]] [Func ("CurryDocCDoc","generateCDoc") 4 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("CurryDocRead","SourceLine") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (FuncType (TCons ("CurryDocRead","AnaInfo") []) (TCons ("Prelude","IO") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]))))) (Rule [1,2,3,4] (Let [(5,Comb FuncCall ("FlatCurry","flatCurryFileName") [Var 1])] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("FlatCurry","readFlatCurryFile") [Var 5],Comb (FuncPartCall 1) ("CurryDocCDoc","generateCDoc._#lambda1") [Var 4,Var 2,Var 3]]))),Func ("CurryDocCDoc","generateCDoc.filterT.2") 1 Private (FuncType (TCons ("FlatCurry","TypeDecl") []) (TCons ("Prelude","[]") [TCons ("FlatCurry","TypeDecl") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","Type") [2,3,4,5]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 3,Comb ConsCall ("FlatCurry","Public") []]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Var 1,Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","[]") [])]),Branch (Pattern ("FlatCurry","TypeSyn") [6,7,8,9]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 7,Comb ConsCall ("FlatCurry","Public") []]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Var 1,Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","[]") [])])])),Func ("CurryDocCDoc","generateCDoc._#lambda1") 4 Private (FuncType (TCons ("CurryDocRead","AnaInfo") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("CurryDocRead","SourceLine") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (FuncType (TCons ("FlatCurry","Prog") []) (TCons ("Prelude","IO") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]))))) (Rule [1,2,3,4] (Case  Flex (Var 4) [Branch (Pattern ("FlatCurry","Prog") [5,6,7,8,9]) (Let [(10,Comb FuncCall ("CurryDocRead","splitComment") [Var 2]),(11,Comb FuncCall ("CurryDocCDoc","generateCDoc._#lambda1._#selFP2#mCmts") [Var 10]),(12,Comb FuncCall ("CurryDocCDoc","generateCDoc._#lambda1._#selFP3#avCmts") [Var 10]),(13,Comb ConsCall ("CurryDocCDoc","ModuleInfo") [Var 5,Comb FuncCall ("CurryDocCDoc","author") [Var 12],Var 11]),(14,Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("CurryDocCDoc","generateCDoc._#lambda1.funcInfo.17") [Var 1,Var 3],Comb FuncCall ("Prelude","filter") [Comb (FuncPartCall 1) ("CurryDocCDoc","generateCDoc._#lambda1._#lambda3") [],Var 8]]),(15,Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("CurryDocCDoc","generateCDoc._#lambda1.typeInfo.17") [Var 3],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","concatMap") [Comb (FuncPartCall 1) ("CurryDocCDoc","generateCDoc.filterT.2") []],Var 7]])] (Comb FuncCall ("Prelude",">>") [Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Prelude","putStrLn") [],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'W'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]],Comb FuncCall ("Prelude","++") [Var 5,Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]],Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Prelude","return") [],Comb FuncCall ("ReadShowTerm","showTerm") [Comb ConsCall ("CurryDocCDoc","CurryInfo") [Var 13,Var 14,Var 15]]]]))])),Func ("CurryDocCDoc","generateCDoc._#lambda1._#selFP2#mCmts") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("CurryDocCDoc","generateCDoc._#lambda1._#selFP3#avCmts") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("CurryDocCDoc","generateCDoc._#lambda1.funcInfo.17") 3 Private (FuncType (TCons ("CurryDocRead","AnaInfo") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("CurryDocRead","SourceLine") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (FuncType (TCons ("FlatCurry","FuncDecl") []) (TCons ("CurryDocCDoc","FunctionInfo") [])))) (Rule [1,2,3] (Case  Flex (Var 3) [Branch (Pattern ("FlatCurry","Func") [4,5,6,7,8]) (Case  Flex (Var 4) [Branch (Pattern ("Prelude","(,)") [9,10]) (Comb ConsCall ("CurryDocCDoc","FunctionInfo") [Var 10,Var 7,Var 9,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("CurryDocCDoc","funcComment") [Var 10],Var 2],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("CurryDocRead","getNondetInfo") [Var 1],Var 4],Comb FuncCall ("CurryDocCDoc","flexRigid") [Var 8]])])])),Func ("CurryDocCDoc","generateCDoc._#lambda1.typeInfo.17") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("CurryDocRead","SourceLine") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (FuncType (TCons ("FlatCurry","TypeDecl") []) (TCons ("CurryDocCDoc","TypeInfo") []))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("FlatCurry","Type") [3,4,5,6]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude","(,)") [7,8]) (Comb ConsCall ("CurryDocCDoc","TypeInfo") [Var 8,Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("CurryDocCDoc","consSignature") [],Comb FuncCall ("Prelude","filter") [Comb (FuncPartCall 1) ("CurryDocCDoc","generateCDoc._#lambda1.typeInfo.17._#lambda2") [],Var 6]],Var 5,Var 7,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("CurryDocCDoc","dataComment") [Var 8],Var 1],Comb ConsCall ("Prelude","False") []])]),Branch (Pattern ("FlatCurry","TypeSyn") [9,10,11,12]) (Case  Flex (Var 9) [Branch (Pattern ("Prelude","(,)") [13,14]) (Comb ConsCall ("CurryDocCDoc","TypeInfo") [Var 14,Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Var 9,Comb ConsCall ("Prelude",":") [Var 12,Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude","[]") []],Var 11,Var 13,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("CurryDocCDoc","dataComment") [Var 14],Var 1],Comb ConsCall ("Prelude","True") []])])])),Func ("CurryDocCDoc","generateCDoc._#lambda1.typeInfo.17._#lambda2") 1 Private (FuncType (TCons ("FlatCurry","ConsDecl") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","Cons") [2,3,4,5]) (Comb FuncCall ("Prelude","==") [Var 4,Comb ConsCall ("FlatCurry","Public") []])])),Func ("CurryDocCDoc","generateCDoc._#lambda1._#lambda3") 1 Private (FuncType (TCons ("FlatCurry","FuncDecl") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","Func") [2,3,4,5,6]) (Comb FuncCall ("Prelude","==") [Var 4,Comb ConsCall ("FlatCurry","Public") []])])),Func ("CurryDocCDoc","funcComment") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("CurryDocRead","SourceLine") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1] (Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","fst") [],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("CurryDocRead","splitComment") [],Comb (FuncPartCall 1) ("CurryDocRead","getFuncComment") [Var 1]]])),Func ("CurryDocCDoc","dataComment") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("CurryDocRead","SourceLine") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1] (Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","fst") [],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("CurryDocRead","splitComment") [],Comb (FuncPartCall 1) ("CurryDocRead","getDataComment") [Var 1]]])),Func ("CurryDocCDoc","flexRigid") 1 Public (FuncType (TCons ("FlatCurry","Rule") []) (TCons ("FlexRigid","FlexRigidResult") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","Rule") [2,3]) (Comb FuncCall ("FlexRigid","getFlexRigid") [Var 3]),Branch (Pattern ("FlatCurry","External") [4]) (Comb ConsCall ("FlexRigid","UnknownFR") [])])),Func ("CurryDocCDoc","author") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Prelude","concat") [],Comb FuncCall ("CurryDocRead","getCommentType") [Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude","[]") []]]]]]],Var 1]])),Func ("CurryDocCDoc","consSignature") 1 Public (FuncType (TCons ("FlatCurry","ConsDecl") []) (TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","[]") [TCons ("FlatCurry","TypeExpr") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","Cons") [2,3,4,5]) (Case  Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [6,7]) (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","(,)") [Var 6,Var 7],Var 5])])]))] []