Prog "AnalysisServer" ["Analysis","AnalysisCollection","Char","Configuration","GenericProgInfo","IO","Prelude","ReadNumeric","ReadShowTerm","ServerFormats","ServerFunctions","Socket","System","FlatCurry"] [Type ("AnalysisServer","AnalysisServerMessage") Private [] [Cons ("AnalysisServer","GetAnalysis") 0 Private [],Cons ("AnalysisServer","AnalyzeModule") 4 Private [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","Bool") []],Cons ("AnalysisServer","AnalyzeEntity") 4 Private [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],Cons ("AnalysisServer","StopServer") 0 Private [],Cons ("AnalysisServer","SetCurryPath") 1 Private [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],Cons ("AnalysisServer","ParseError") 0 Private []]] [Func ("AnalysisServer","main") 0 Public (TCons ("Prelude","IO") [TCons ("Prelude","()") []]) (Rule [] (Comb FuncCall ("Prelude",">>") [Comb FuncCall ("Configuration","debugMessageLevel") [Lit (Intc  1),Comb FuncCall ("Configuration","systemBanner") []],Comb FuncCall ("Prelude",">>") [Comb FuncCall ("AnalysisServer","initializeAnalysisSystem") [],Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("System","getArgs") [],Comb (FuncPartCall 1) ("AnalysisServer","main._#lambda1") []]]])),Func ("AnalysisServer","main._#lambda1") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []])) (Rule [1] (Comb FuncCall ("AnalysisServer","processArgs") [Var 1])),Func ("AnalysisServer","processArgs") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []])) (Rule [1] (Let [(2,Comb FuncCall ("Prelude","error") [Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'I'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '\''),Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  '\''),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],Comb FuncCall ("Prelude","unwords") [Var 1]]])] (Case  Rigid (Var 1) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("AnalysisServer","mainServer") [Comb ConsCall ("Prelude","Nothing") []]),Branch (Pattern ("Prelude",":") [3,4]) (Case  Rigid (Var 3) [Branch (Pattern ("Prelude",":") [5,6]) (Let [(7,Var 5)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 7,Lit (Charc  '-')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 6) [Branch (Pattern ("Prelude",":") [8,9]) (Let [(10,Var 8)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 10,Lit (Charc  'p')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 9) [Branch (Pattern ("Prelude","[]") []) (Case  Rigid (Var 4) [Branch (Pattern ("Prelude",":") [11,12]) (Case  Rigid (Var 12) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","maybe") [Var 2,Comb (FuncPartCall 1) ("AnalysisServer","processArgs._#lambda3") [Var 2],Comb FuncCall ("ReadNumeric","readNat") [Var 11]]),Branch (Pattern ("Prelude",":") [13,14]) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude",":") [15,16]) (Case  Rigid (Var 4) [Branch (Pattern ("Prelude",":") [17,18]) (Case  Rigid (Var 18) [Branch (Pattern ("Prelude","[]") []) (Case  Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","elem") [Var 3],Comb FuncCall ("AnalysisCollection","registeredAnalysisNames") []]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("AnalysisServer","analyzeModule") [Var 3,Var 17,Comb ConsCall ("Analysis","AText") []],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","putStrLn") [],Comb (FuncPartCall 1) ("ServerFormats","formatResult") [Var 17,Comb ConsCall ("Prelude",":") [Lit (Charc  'T'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude","Nothing") [],Comb ConsCall ("Prelude","True") []]]]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude",":") [19,20]) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)])]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 10,Lit (Charc  'h')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 9) [Branch (Pattern ("Prelude","[]") []) (Case  Rigid (Var 4) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("AnalysisServer","showHelp") []),Branch (Pattern ("Prelude",":") [21,22]) (Case  Rigid (Var 22) [Branch (Pattern ("Prelude","[]") []) (Case  Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","elem") [Var 3],Comb FuncCall ("AnalysisCollection","registeredAnalysisNames") []]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("AnalysisServer","analyzeModule") [Var 3,Var 21,Comb ConsCall ("Analysis","AText") []],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","putStrLn") [],Comb (FuncPartCall 1) ("ServerFormats","formatResult") [Var 21,Comb ConsCall ("Prelude",":") [Lit (Charc  'T'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude","Nothing") [],Comb ConsCall ("Prelude","True") []]]]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude",":") [23,24]) (Var 2)])]),Branch (Pattern ("Prelude",":") [25,26]) (Case  Rigid (Var 4) [Branch (Pattern ("Prelude",":") [27,28]) (Case  Rigid (Var 28) [Branch (Pattern ("Prelude","[]") []) (Case  Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","elem") [Var 3],Comb FuncCall ("AnalysisCollection","registeredAnalysisNames") []]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("AnalysisServer","analyzeModule") [Var 3,Var 27,Comb ConsCall ("Analysis","AText") []],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","putStrLn") [],Comb (FuncPartCall 1) ("ServerFormats","formatResult") [Var 27,Comb ConsCall ("Prelude",":") [Lit (Charc  'T'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude","Nothing") [],Comb ConsCall ("Prelude","True") []]]]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude",":") [29,30]) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)])]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 10,Lit (Charc  '?')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 9) [Branch (Pattern ("Prelude","[]") []) (Case  Rigid (Var 4) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("AnalysisServer","showHelp") []),Branch (Pattern ("Prelude",":") [31,32]) (Case  Rigid (Var 32) [Branch (Pattern ("Prelude","[]") []) (Case  Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","elem") [Var 3],Comb FuncCall ("AnalysisCollection","registeredAnalysisNames") []]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("AnalysisServer","analyzeModule") [Var 3,Var 31,Comb ConsCall ("Analysis","AText") []],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","putStrLn") [],Comb (FuncPartCall 1) ("ServerFormats","formatResult") [Var 31,Comb ConsCall ("Prelude",":") [Lit (Charc  'T'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude","Nothing") [],Comb ConsCall ("Prelude","True") []]]]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude",":") [33,34]) (Var 2)])]),Branch (Pattern ("Prelude",":") [35,36]) (Case  Rigid (Var 4) [Branch (Pattern ("Prelude",":") [37,38]) (Case  Rigid (Var 38) [Branch (Pattern ("Prelude","[]") []) (Case  Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","elem") [Var 3],Comb FuncCall ("AnalysisCollection","registeredAnalysisNames") []]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("AnalysisServer","analyzeModule") [Var 3,Var 37,Comb ConsCall ("Analysis","AText") []],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","putStrLn") [],Comb (FuncPartCall 1) ("ServerFormats","formatResult") [Var 37,Comb ConsCall ("Prelude",":") [Lit (Charc  'T'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude","Nothing") [],Comb ConsCall ("Prelude","True") []]]]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude",":") [39,40]) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)])]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 10,Lit (Charc  '-')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 9) [Branch (Pattern ("Prelude",":") [41,42]) (Let [(43,Var 41)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 43,Lit (Charc  'h')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 42) [Branch (Pattern ("Prelude",":") [44,45]) (Let [(46,Var 44)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 46,Lit (Charc  'e')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 45) [Branch (Pattern ("Prelude",":") [47,48]) (Let [(49,Var 47)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 49,Lit (Charc  'l')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 48) [Branch (Pattern ("Prelude",":") [50,51]) (Let [(52,Var 50)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 52,Lit (Charc  'p')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 51) [Branch (Pattern ("Prelude","[]") []) (Case  Rigid (Var 4) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("AnalysisServer","showHelp") []),Branch (Pattern ("Prelude",":") [53,54]) (Case  Rigid (Var 54) [Branch (Pattern ("Prelude","[]") []) (Case  Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","elem") [Var 3],Comb FuncCall ("AnalysisCollection","registeredAnalysisNames") []]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("AnalysisServer","analyzeModule") [Var 3,Var 53,Comb ConsCall ("Analysis","AText") []],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","putStrLn") [],Comb (FuncPartCall 1) ("ServerFormats","formatResult") [Var 53,Comb ConsCall ("Prelude",":") [Lit (Charc  'T'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude","Nothing") [],Comb ConsCall ("Prelude","True") []]]]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude",":") [55,56]) (Var 2)])]),Branch (Pattern ("Prelude",":") [57,58]) (Case  Rigid (Var 4) [Branch (Pattern ("Prelude",":") [59,60]) (Case  Rigid (Var 60) [Branch (Pattern ("Prelude","[]") []) (Case  Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","elem") [Var 3],Comb FuncCall ("AnalysisCollection","registeredAnalysisNames") []]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("AnalysisServer","analyzeModule") [Var 3,Var 59,Comb ConsCall ("Analysis","AText") []],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","putStrLn") [],Comb (FuncPartCall 1) ("ServerFormats","formatResult") [Var 59,Comb ConsCall ("Prelude",":") [Lit (Charc  'T'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude","Nothing") [],Comb ConsCall ("Prelude","True") []]]]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude",":") [61,62]) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)])]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Var 4) [Branch (Pattern ("Prelude",":") [63,64]) (Case  Rigid (Var 64) [Branch (Pattern ("Prelude","[]") []) (Case  Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","elem") [Var 3],Comb FuncCall ("AnalysisCollection","registeredAnalysisNames") []]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("AnalysisServer","analyzeModule") [Var 3,Var 63,Comb ConsCall ("Analysis","AText") []],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","putStrLn") [],Comb (FuncPartCall 1) ("ServerFormats","formatResult") [Var 63,Comb ConsCall ("Prelude",":") [Lit (Charc  'T'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude","Nothing") [],Comb ConsCall ("Prelude","True") []]]]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude",":") [65,66]) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)])])),Branch (Pattern ("Prelude","[]") []) (Case  Rigid (Var 4) [Branch (Pattern ("Prelude",":") [67,68]) (Case  Rigid (Var 68) [Branch (Pattern ("Prelude","[]") []) (Case  Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","elem") [Var 3],Comb FuncCall ("AnalysisCollection","registeredAnalysisNames") []]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("AnalysisServer","analyzeModule") [Var 3,Var 67,Comb ConsCall ("Analysis","AText") []],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","putStrLn") [],Comb (FuncPartCall 1) ("ServerFormats","formatResult") [Var 67,Comb ConsCall ("Prelude",":") [Lit (Charc  'T'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude","Nothing") [],Comb ConsCall ("Prelude","True") []]]]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude",":") [69,70]) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)])]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Var 4) [Branch (Pattern ("Prelude",":") [71,72]) (Case  Rigid (Var 72) [Branch (Pattern ("Prelude","[]") []) (Case  Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","elem") [Var 3],Comb FuncCall ("AnalysisCollection","registeredAnalysisNames") []]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("AnalysisServer","analyzeModule") [Var 3,Var 71,Comb ConsCall ("Analysis","AText") []],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","putStrLn") [],Comb (FuncPartCall 1) ("ServerFormats","formatResult") [Var 71,Comb ConsCall ("Prelude",":") [Lit (Charc  'T'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude","Nothing") [],Comb ConsCall ("Prelude","True") []]]]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude",":") [73,74]) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)])])),Branch (Pattern ("Prelude","[]") []) (Case  Rigid (Var 4) [Branch (Pattern ("Prelude",":") [75,76]) (Case  Rigid (Var 76) [Branch (Pattern ("Prelude","[]") []) (Case  Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","elem") [Var 3],Comb FuncCall ("AnalysisCollection","registeredAnalysisNames") []]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("AnalysisServer","analyzeModule") [Var 3,Var 75,Comb ConsCall ("Analysis","AText") []],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","putStrLn") [],Comb (FuncPartCall 1) ("ServerFormats","formatResult") [Var 75,Comb ConsCall ("Prelude",":") [Lit (Charc  'T'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude","Nothing") [],Comb ConsCall ("Prelude","True") []]]]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude",":") [77,78]) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)])]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Var 4) [Branch (Pattern ("Prelude",":") [79,80]) (Case  Rigid (Var 80) [Branch (Pattern ("Prelude","[]") []) (Case  Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","elem") [Var 3],Comb FuncCall ("AnalysisCollection","registeredAnalysisNames") []]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("AnalysisServer","analyzeModule") [Var 3,Var 79,Comb ConsCall ("Analysis","AText") []],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","putStrLn") [],Comb (FuncPartCall 1) ("ServerFormats","formatResult") [Var 79,Comb ConsCall ("Prelude",":") [Lit (Charc  'T'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude","Nothing") [],Comb ConsCall ("Prelude","True") []]]]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude",":") [81,82]) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)])])),Branch (Pattern ("Prelude","[]") []) (Case  Rigid (Var 4) [Branch (Pattern ("Prelude",":") [83,84]) (Case  Rigid (Var 84) [Branch (Pattern ("Prelude","[]") []) (Case  Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","elem") [Var 3],Comb FuncCall ("AnalysisCollection","registeredAnalysisNames") []]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("AnalysisServer","analyzeModule") [Var 3,Var 83,Comb ConsCall ("Analysis","AText") []],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","putStrLn") [],Comb (FuncPartCall 1) ("ServerFormats","formatResult") [Var 83,Comb ConsCall ("Prelude",":") [Lit (Charc  'T'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude","Nothing") [],Comb ConsCall ("Prelude","True") []]]]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude",":") [85,86]) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)])]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Var 4) [Branch (Pattern ("Prelude",":") [87,88]) (Case  Rigid (Var 88) [Branch (Pattern ("Prelude","[]") []) (Case  Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","elem") [Var 3],Comb FuncCall ("AnalysisCollection","registeredAnalysisNames") []]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("AnalysisServer","analyzeModule") [Var 3,Var 87,Comb ConsCall ("Analysis","AText") []],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","putStrLn") [],Comb (FuncPartCall 1) ("ServerFormats","formatResult") [Var 87,Comb ConsCall ("Prelude",":") [Lit (Charc  'T'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude","Nothing") [],Comb ConsCall ("Prelude","True") []]]]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude",":") [89,90]) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)])])),Branch (Pattern ("Prelude","[]") []) (Case  Rigid (Var 4) [Branch (Pattern ("Prelude",":") [91,92]) (Case  Rigid (Var 92) [Branch (Pattern ("Prelude","[]") []) (Case  Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","elem") [Var 3],Comb FuncCall ("AnalysisCollection","registeredAnalysisNames") []]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("AnalysisServer","analyzeModule") [Var 3,Var 91,Comb ConsCall ("Analysis","AText") []],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","putStrLn") [],Comb (FuncPartCall 1) ("ServerFormats","formatResult") [Var 91,Comb ConsCall ("Prelude",":") [Lit (Charc  'T'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude","Nothing") [],Comb ConsCall ("Prelude","True") []]]]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude",":") [93,94]) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)])]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 10,Lit (Charc  'D')]) [Branch (Pattern ("Prelude","True") []) (Let [(95,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","break") [Comb (FuncPartCall 1) ("Prelude","flip") [Comb (FuncPartCall 2) ("Prelude","==") [],Lit (Charc  '=')]],Var 9]),(96,Comb FuncCall ("AnalysisServer","processArgs._#selFP2#key") [Var 95]),(97,Comb FuncCall ("AnalysisServer","processArgs._#selFP3#eqvalue") [Var 95])] (Case  Rigid (Comb FuncCall ("Prelude","null") [Var 97]) [Branch (Pattern ("Prelude","True") []) (Var 2),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude",">>") [Comb FuncCall ("Configuration","updateCurrentProperty") [Var 96,Comb FuncCall ("Prelude","tail") [Var 97]],Comb FuncCall ("AnalysisServer","processArgs") [Var 4]])])),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Var 4) [Branch (Pattern ("Prelude",":") [98,99]) (Case  Rigid (Var 99) [Branch (Pattern ("Prelude","[]") []) (Case  Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","elem") [Var 3],Comb FuncCall ("AnalysisCollection","registeredAnalysisNames") []]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("AnalysisServer","analyzeModule") [Var 3,Var 98,Comb ConsCall ("Analysis","AText") []],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","putStrLn") [],Comb (FuncPartCall 1) ("ServerFormats","formatResult") [Var 98,Comb ConsCall ("Prelude",":") [Lit (Charc  'T'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude","Nothing") [],Comb ConsCall ("Prelude","True") []]]]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude",":") [100,101]) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)])])])])])])),Branch (Pattern ("Prelude","[]") []) (Case  Rigid (Var 4) [Branch (Pattern ("Prelude",":") [102,103]) (Case  Rigid (Var 103) [Branch (Pattern ("Prelude","[]") []) (Case  Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","elem") [Var 3],Comb FuncCall ("AnalysisCollection","registeredAnalysisNames") []]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("AnalysisServer","analyzeModule") [Var 3,Var 102,Comb ConsCall ("Analysis","AText") []],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","putStrLn") [],Comb (FuncPartCall 1) ("ServerFormats","formatResult") [Var 102,Comb ConsCall ("Prelude",":") [Lit (Charc  'T'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude","Nothing") [],Comb ConsCall ("Prelude","True") []]]]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude",":") [104,105]) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)])]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Var 4) [Branch (Pattern ("Prelude",":") [106,107]) (Case  Rigid (Var 107) [Branch (Pattern ("Prelude","[]") []) (Case  Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","elem") [Var 3],Comb FuncCall ("AnalysisCollection","registeredAnalysisNames") []]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("AnalysisServer","analyzeModule") [Var 3,Var 106,Comb ConsCall ("Analysis","AText") []],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","putStrLn") [],Comb (FuncPartCall 1) ("ServerFormats","formatResult") [Var 106,Comb ConsCall ("Prelude",":") [Lit (Charc  'T'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude","Nothing") [],Comb ConsCall ("Prelude","True") []]]]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude",":") [108,109]) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)])])),Branch (Pattern ("Prelude","[]") []) (Case  Rigid (Var 4) [Branch (Pattern ("Prelude",":") [110,111]) (Case  Rigid (Var 111) [Branch (Pattern ("Prelude","[]") []) (Case  Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","elem") [Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("AnalysisCollection","registeredAnalysisNames") []]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("AnalysisServer","analyzeModule") [Comb ConsCall ("Prelude","[]") [],Var 110,Comb ConsCall ("Analysis","AText") []],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","putStrLn") [],Comb (FuncPartCall 1) ("ServerFormats","formatResult") [Var 110,Comb ConsCall ("Prelude",":") [Lit (Charc  'T'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude","Nothing") [],Comb ConsCall ("Prelude","True") []]]]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude",":") [112,113]) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)])])]))),Func ("AnalysisServer","processArgs._#lambda3") 2 Private (FuncType (TCons ("Prelude","IO") [TCons ("Prelude","()") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [3,4]) (Case  Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","all") [Comb (FuncPartCall 1) ("Char","isSpace") []],Var 4]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("AnalysisServer","mainServer") [Comb ConsCall ("Prelude","Just") [Var 3]]),Branch (Pattern ("Prelude","False") []) (Var 1)])])),Func ("AnalysisServer","processArgs._#selFP2#key") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("AnalysisServer","processArgs._#selFP3#eqvalue") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("AnalysisServer","initializeAnalysisSystem") 0 Public (TCons ("Prelude","IO") [TCons ("Prelude","()") []]) (Rule [] (Comb FuncCall ("Configuration","updateRCFile") [])),Func ("AnalysisServer","showHelp") 0 Private (TCons ("Prelude","IO") [TCons ("Prelude","()") []]) (Rule [] (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Prelude","putStrLn") [],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'U'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '<'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  '>'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '['),Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '<'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  '>'),Comb ConsCall ("Prelude",":") [Lit (Charc  ']'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'v'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '<'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  '>'),Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'b'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  ','),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'b'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'U'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '<'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  '>'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '<'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  '>'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '<'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  '>'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  'z'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'v'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '<'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  '>'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  'D'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  '='),Comb ConsCall ("Prelude",":") [Lit (Charc  'v'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '~'),Comb ConsCall ("Prelude",":") [Lit (Charc  '/'),Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '\''),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  '\''),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '\''),Comb ConsCall ("Prelude",":") [Lit (Charc  'v'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  '\''),Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'R'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]],Comb FuncCall ("Prelude","unlines") [Comb FuncCall ("AnalysisCollection","registeredAnalysisNames") []]]]]]]]]]]])),Func ("AnalysisServer","mainServer") 1 Private (FuncType (TCons ("Prelude","Maybe") [TCons ("Prelude","Int") []]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []])) (Rule [1] (Comb FuncCall ("Prelude",">>") [Comb FuncCall ("Prelude","putStrLn") [Comb ConsCall ("Prelude",":") [Lit (Charc  'S'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'S'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'v'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]],Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Prelude","maybe") [Comb FuncCall ("Socket","listenOnFresh") [],Comb (FuncPartCall 1) ("AnalysisServer","mainServer._#lambda4") [],Var 1],Comb (FuncPartCall 1) ("AnalysisServer","mainServer._#lambda6") []]])),Func ("AnalysisServer","mainServer._#lambda4") 1 Private (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","IO") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Socket","Socket") []]])) (Rule [1] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Socket","listenOn") [Var 1],Comb (FuncPartCall 1) ("AnalysisServer","mainServer._#lambda4._#lambda5") [Var 1]])),Func ("AnalysisServer","mainServer._#lambda4._#lambda5") 2 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Socket","Socket") []) (TCons ("Prelude","IO") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Socket","Socket") []]]))) (Rule [1,2] (Comb FuncCall ("Prelude","return") [Comb ConsCall ("Prelude","(,)") [Var 1,Var 2]])),Func ("AnalysisServer","mainServer._#lambda6") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Socket","Socket") []]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Comb FuncCall ("Prelude",">>") [Comb FuncCall ("Prelude","putStrLn") [Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'S'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'v'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]],Comb FuncCall ("Prelude","show") [Var 2]]],Comb FuncCall ("Prelude",">>") [Comb FuncCall ("Configuration","storeServerPortNumber") [Var 2],Comb FuncCall ("Prelude",">>") [Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Configuration","getDefaultPath") [],Comb (FuncPartCall 1) ("System","setEnviron") [Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'U'),Comb ConsCall ("Prelude",":") [Lit (Charc  'R'),Comb ConsCall ("Prelude",":") [Lit (Charc  'R'),Comb ConsCall ("Prelude",":") [Lit (Charc  'Y'),Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  'A'),Comb ConsCall ("Prelude",":") [Lit (Charc  'T'),Comb ConsCall ("Prelude",":") [Lit (Charc  'H'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]],Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Configuration","numberOfWorkers") [],Comb (FuncPartCall 1) ("AnalysisServer","mainServer._#lambda6._#lambda7") [Var 3]]]]])])),Func ("AnalysisServer","mainServer._#lambda6._#lambda7") 2 Private (FuncType (TCons ("Socket","Socket") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","IO") [TCons ("Prelude","()") []]))) (Rule [1,2] (Case  Rigid (Comb FuncCall ("Prelude",">") [Var 2,Lit (Intc  0)]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Configuration","getServerAddress") [],Comb (FuncPartCall 1) ("AnalysisServer","mainServer._#lambda6._#lambda7._#lambda8") [Var 2,Var 1]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("AnalysisServer","serverLoop") [Var 1,Comb ConsCall ("Prelude","[]") []])])),Func ("AnalysisServer","mainServer._#lambda6._#lambda7._#lambda8") 3 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Socket","Socket") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []])))) (Rule [1,2,3] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Socket","listenOnFresh") [],Comb (FuncPartCall 1) ("AnalysisServer","mainServer._#lambda6._#lambda7._#lambda8._#lambda9") [Var 1,Var 3,Var 2]])),Func ("AnalysisServer","mainServer._#lambda6._#lambda7._#lambda8._#lambda9") 4 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Socket","Socket") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Socket","Socket") []]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []]))))) (Rule [1,2,3,4] (Case  Flex (Var 4) [Branch (Pattern ("Prelude","(,)") [5,6]) (Comb FuncCall ("Prelude",">>") [Comb FuncCall ("Configuration","debugMessageLevel") [Lit (Intc  2),Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'S'),Comb ConsCall ("Prelude",":") [Lit (Charc  'E'),Comb ConsCall ("Prelude",":") [Lit (Charc  'R'),Comb ConsCall ("Prelude",":") [Lit (Charc  'V'),Comb ConsCall ("Prelude",":") [Lit (Charc  'E'),Comb ConsCall ("Prelude",":") [Lit (Charc  'R'),Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'k'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]],Comb FuncCall ("Prelude","show") [Var 5]]],Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("AnalysisServer","startWorkers") [Var 1,Var 6,Var 2,Var 5,Comb ConsCall ("Prelude","[]") []],Comb (FuncPartCall 1) ("AnalysisServer","mainServer._#lambda6._#lambda7._#lambda8._#lambda9._#lambda10") [Var 3,Var 6]]])])),Func ("AnalysisServer","mainServer._#lambda6._#lambda7._#lambda8._#lambda9._#lambda10") 3 Private (FuncType (TCons ("Socket","Socket") []) (FuncType (TCons ("Socket","Socket") []) (FuncType (TCons ("Prelude","[]") [TCons ("IO","Handle") []]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []])))) (Rule [1,2,3] (Comb FuncCall ("Prelude",">>") [Comb FuncCall ("AnalysisServer","serverLoop") [Var 1,Var 3],Comb FuncCall ("Socket","sClose") [Var 2]])),Func ("AnalysisServer","analyzeModuleForBrowser") 3 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Analysis","AOutFormat") []) (TCons ("Prelude","IO") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]])))) (Rule [1,2,3] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("AnalysisServer","analyzeModule") [Var 1,Var 2,Var 3],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","return") [],Comb (FuncPartCall 1) ("Prelude","either") [Comb (FuncPartCall 1) ("AnalysisServer","analyzeModuleForBrowser.pinfo2list.44") [],Comb (FuncPartCall 1) ("Prelude","const") [Comb ConsCall ("Prelude","[]") []]]]])),Func ("AnalysisServer","analyzeModuleForBrowser.pinfo2list.44") 1 Private (FuncType (TCons ("GenericProgInfo","ProgInfo") [TVar 0]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TVar 0]])) (Rule [1] (Let [(2,Comb FuncCall ("GenericProgInfo","progInfo2Lists") [Var 1]),(3,Comb FuncCall ("AnalysisServer","analyzeModuleForBrowser.pinfo2list.44._#selFP5#pubinfo") [Var 2]),(4,Comb FuncCall ("AnalysisServer","analyzeModuleForBrowser.pinfo2list.44._#selFP6#privinfo") [Var 2])] (Comb FuncCall ("Prelude","++") [Var 3,Var 4]))),Func ("AnalysisServer","analyzeModuleForBrowser.pinfo2list.44._#selFP5#pubinfo") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TVar 400]],TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TVar 400]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TVar 400]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("AnalysisServer","analyzeModuleForBrowser.pinfo2list.44._#selFP6#privinfo") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TVar 400]],TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TVar 400]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TVar 400]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("AnalysisServer","analyzeFunctionForBrowser") 3 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Analysis","AOutFormat") []) (TCons ("Prelude","IO") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])))) (Rule [1,2,3] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("AnalysisServer","analyzeModule") [Var 1,Var 4,Var 3],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","return") [],Comb (FuncPartCall 1) ("Prelude","either") [Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","maybe") [Comb ConsCall ("Prelude","[]") [],Comb (FuncPartCall 1) ("Prelude","id") []],Comb (FuncPartCall 1) ("GenericProgInfo","lookupProgInfo") [Var 2]],Comb (FuncPartCall 1) ("Prelude","const") [Comb ConsCall ("Prelude","[]") []]]]])])),Func ("AnalysisServer","analyzeModule") 3 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Analysis","AOutFormat") []) (TCons ("Prelude","IO") [TCons ("Prelude","Either") [TCons ("GenericProgInfo","ProgInfo") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Configuration","numberOfWorkers") [],Comb (FuncPartCall 1) ("AnalysisServer","analyzeModule._#lambda11") [Var 1,Var 3,Var 2]])),Func ("AnalysisServer","analyzeModule._#lambda11") 4 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Analysis","AOutFormat") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","IO") [TCons ("Prelude","Either") [TCons ("GenericProgInfo","ProgInfo") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [1,2,3,4] (Case  Rigid (Comb FuncCall ("Prelude",">") [Var 4,Lit (Intc  0)]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Configuration","getServerAddress") [],Comb (FuncPartCall 1) ("AnalysisServer","analyzeModule._#lambda11._#lambda12") [Var 1,Var 2,Var 3,Var 4]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("AnalysisCollection","runAnalysisWithWorkers") [Var 1,Var 2,Comb ConsCall ("Prelude","[]") [],Var 3])])),Func ("AnalysisServer","analyzeModule._#lambda11._#lambda12") 5 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Analysis","AOutFormat") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","Either") [TCons ("GenericProgInfo","ProgInfo") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))) (Rule [1,2,3,4,5] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Socket","listenOnFresh") [],Comb (FuncPartCall 1) ("AnalysisServer","analyzeModule._#lambda11._#lambda12._#lambda13") [Var 1,Var 2,Var 3,Var 4,Var 5]])),Func ("AnalysisServer","analyzeModule._#lambda11._#lambda12._#lambda13") 6 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Analysis","AOutFormat") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Socket","Socket") []]) (TCons ("Prelude","IO") [TCons ("Prelude","Either") [TCons ("GenericProgInfo","ProgInfo") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))))) (Rule [1,2,3,4,5,6] (Case  Flex (Var 6) [Branch (Pattern ("Prelude","(,)") [7,8]) (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("AnalysisServer","startWorkers") [Var 4,Var 8,Var 5,Var 7,Comb ConsCall ("Prelude","[]") []],Comb (FuncPartCall 1) ("AnalysisServer","analyzeModule._#lambda11._#lambda12._#lambda13._#lambda14") [Var 1,Var 2,Var 3,Var 8]])])),Func ("AnalysisServer","analyzeModule._#lambda11._#lambda12._#lambda13._#lambda14") 5 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Analysis","AOutFormat") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Socket","Socket") []) (FuncType (TCons ("Prelude","[]") [TCons ("IO","Handle") []]) (TCons ("Prelude","IO") [TCons ("Prelude","Either") [TCons ("GenericProgInfo","ProgInfo") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))) (Rule [1,2,3,4,5] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("AnalysisCollection","runAnalysisWithWorkers") [Var 1,Var 2,Var 5,Var 3],Comb (FuncPartCall 1) ("AnalysisServer","analyzeModule._#lambda11._#lambda12._#lambda13._#lambda14._#lambda15") [Var 5,Var 4]])),Func ("AnalysisServer","analyzeModule._#lambda11._#lambda12._#lambda13._#lambda14._#lambda15") 3 Private (FuncType (TCons ("Prelude","[]") [TCons ("IO","Handle") []]) (FuncType (TCons ("Socket","Socket") []) (FuncType (TCons ("Prelude","Either") [TCons ("GenericProgInfo","ProgInfo") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","IO") [TCons ("Prelude","Either") [TCons ("GenericProgInfo","ProgInfo") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Comb FuncCall ("Prelude",">>") [Comb FuncCall ("AnalysisServer","stopWorkers") [Var 1],Comb FuncCall ("Prelude",">>") [Comb FuncCall ("Socket","sClose") [Var 2],Comb FuncCall ("Prelude","return") [Var 3]]])),Func ("AnalysisServer","analyzeGeneric") 2 Public (FuncType (TCons ("Analysis","Analysis") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","Either") [TCons ("GenericProgInfo","ProgInfo") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Comb FuncCall ("Prelude",">>") [Comb FuncCall ("AnalysisServer","initializeAnalysisSystem") [],Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Configuration","numberOfWorkers") [],Comb (FuncPartCall 1) ("AnalysisServer","analyzeGeneric._#lambda16") [Var 1,Var 2]]])),Func ("AnalysisServer","analyzeGeneric._#lambda16") 3 Private (FuncType (TCons ("Analysis","Analysis") [TVar 453]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","IO") [TCons ("Prelude","Either") [TCons ("GenericProgInfo","ProgInfo") [TVar 453],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case  Rigid (Comb FuncCall ("Prelude",">") [Var 3,Lit (Intc  0)]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Configuration","getServerAddress") [],Comb (FuncPartCall 1) ("AnalysisServer","analyzeGeneric._#lambda16._#lambda17") [Var 1,Var 2,Var 3]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("AnalysisCollection","analyzeMain") [Var 1,Var 2,Comb ConsCall ("Prelude","[]") [],Comb ConsCall ("Prelude","True") []])])),Func ("AnalysisServer","analyzeGeneric._#lambda16._#lambda17") 4 Private (FuncType (TCons ("Analysis","Analysis") [TVar 453]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","Either") [TCons ("GenericProgInfo","ProgInfo") [TVar 453],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [1,2,3,4] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Socket","listenOnFresh") [],Comb (FuncPartCall 1) ("AnalysisServer","analyzeGeneric._#lambda16._#lambda17._#lambda18") [Var 1,Var 2,Var 3,Var 4]])),Func ("AnalysisServer","analyzeGeneric._#lambda16._#lambda17._#lambda18") 5 Private (FuncType (TCons ("Analysis","Analysis") [TVar 453]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Socket","Socket") []]) (TCons ("Prelude","IO") [TCons ("Prelude","Either") [TCons ("GenericProgInfo","ProgInfo") [TVar 453],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))) (Rule [1,2,3,4,5] (Case  Flex (Var 5) [Branch (Pattern ("Prelude","(,)") [6,7]) (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("AnalysisServer","startWorkers") [Var 3,Var 7,Var 4,Var 6,Comb ConsCall ("Prelude","[]") []],Comb (FuncPartCall 1) ("AnalysisServer","analyzeGeneric._#lambda16._#lambda17._#lambda18._#lambda19") [Var 1,Var 2,Var 7]])])),Func ("AnalysisServer","analyzeGeneric._#lambda16._#lambda17._#lambda18._#lambda19") 4 Private (FuncType (TCons ("Analysis","Analysis") [TVar 453]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Socket","Socket") []) (FuncType (TCons ("Prelude","[]") [TCons ("IO","Handle") []]) (TCons ("Prelude","IO") [TCons ("Prelude","Either") [TCons ("GenericProgInfo","ProgInfo") [TVar 453],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [1,2,3,4] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("AnalysisCollection","analyzeMain") [Var 1,Var 2,Var 4,Comb ConsCall ("Prelude","True") []],Comb (FuncPartCall 1) ("AnalysisServer","analyzeGeneric._#lambda16._#lambda17._#lambda18._#lambda19._#lambda20") [Var 4,Var 3]])),Func ("AnalysisServer","analyzeGeneric._#lambda16._#lambda17._#lambda18._#lambda19._#lambda20") 3 Private (FuncType (TCons ("Prelude","[]") [TCons ("IO","Handle") []]) (FuncType (TCons ("Socket","Socket") []) (FuncType (TCons ("Prelude","Either") [TCons ("GenericProgInfo","ProgInfo") [TVar 453],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","IO") [TCons ("Prelude","Either") [TCons ("GenericProgInfo","ProgInfo") [TVar 453],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Comb FuncCall ("Prelude",">>") [Comb FuncCall ("AnalysisServer","stopWorkers") [Var 1],Comb FuncCall ("Prelude",">>") [Comb FuncCall ("Socket","sClose") [Var 2],Comb FuncCall ("Prelude","return") [Var 3]]])),Func ("AnalysisServer","analyzeInterface") 2 Public (FuncType (TCons ("Analysis","Analysis") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","Either") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TVar 0]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("AnalysisServer","analyzeGeneric") [Var 1,Var 2],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","return") [],Comb (FuncPartCall 1) ("Prelude","either") [Comb FuncCall ("Prelude",".") [Comb (ConsPartCall 1) ("Prelude","Left") [],Comb (FuncPartCall 1) ("GenericProgInfo","publicListFromProgInfo") []],Comb (ConsPartCall 1) ("Prelude","Right") []]]])),Func ("AnalysisServer","startWorkers") 5 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Socket","Socket") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("IO","Handle") []]) (TCons ("Prelude","IO") [TCons ("Prelude","[]") [TCons ("IO","Handle") []]])))))) (Rule [1,2,3,4,5] (Case  Rigid (Comb FuncCall ("Prelude",">") [Var 1,Lit (Intc  0)]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude",">>") [Comb FuncCall ("Configuration","debugMessageLevel") [Lit (Intc  4),Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'N'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'b'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb FuncCall ("Prelude","show") [Var 1]]],Let [(6,Comb FuncCall ("Prelude","++") [Comb FuncCall ("Configuration","baseDir") [],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '/'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'k'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]],Comb FuncCall ("Prelude","++") [Var 3,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","show") [Var 4],Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '&'),Comb ConsCall ("Prelude","[]") []]]]]]]])] (Comb FuncCall ("Prelude",">>") [Comb FuncCall ("Configuration","debugMessageLevel") [Lit (Intc  4),Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]],Var 6]],Comb FuncCall ("Prelude",">>") [Comb FuncCall ("System","system") [Var 6],Comb FuncCall ("Prelude",">>") [Comb FuncCall ("Configuration","debugMessageLevel") [Lit (Intc  4),Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'W'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'k'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],Comb FuncCall ("Prelude","show") [Var 1]]],Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Socket","waitForSocketAccept") [Var 2,Comb FuncCall ("Configuration","waitTime") []],Comb (FuncPartCall 1) ("AnalysisServer","startWorkers._#lambda21") [Var 5,Var 1,Var 3,Var 4,Var 2]]]]])]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","return") [Var 5])])),Func ("AnalysisServer","startWorkers._#lambda21") 6 Private (FuncType (TCons ("Prelude","[]") [TCons ("IO","Handle") []]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Socket","Socket") []) (FuncType (TCons ("Prelude","Maybe") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("IO","Handle") []]]) (TCons ("Prelude","IO") [TCons ("Prelude","[]") [TCons ("IO","Handle") []]]))))))) (Rule [1,2,3,4,5,6] (Comb FuncCall ("Prelude",">>") [Comb FuncCall ("Configuration","debugMessageLevel") [Lit (Intc  4),Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'S'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'k'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]],Comb FuncCall ("Prelude","show") [Var 2]]],Case  Rigid (Var 6) [Branch (Pattern ("Prelude","Just") [7]) (Case  Rigid (Var 7) [Branch (Pattern ("Prelude","(,)") [8,9]) (Comb FuncCall ("AnalysisServer","startWorkers") [Comb FuncCall ("Prelude","-") [Var 2,Lit (Intc  1)],Var 5,Var 3,Var 4,Comb ConsCall ("Prelude",":") [Var 9,Var 1]])]),Branch (Pattern ("Prelude","Nothing") []) (Comb FuncCall ("Prelude",">>") [Comb FuncCall ("Prelude","putStrLn") [Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'W'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'k'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'k'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],Comb FuncCall ("Prelude","show") [Var 2]]],Comb FuncCall ("AnalysisServer","startWorkers") [Comb FuncCall ("Prelude","-") [Var 2,Lit (Intc  1)],Var 5,Var 3,Var 4,Var 1]])]])),Func ("AnalysisServer","stopWorkers") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("IO","Handle") []]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","done") []),Branch (Pattern ("Prelude",":") [2,3]) (Comb FuncCall ("Prelude",">>") [Comb FuncCall ("IO","hPutStrLn") [Var 2,Comb FuncCall ("ReadShowTerm","showQTerm") [Comb ConsCall ("ServerFunctions","StopWorker") []]],Comb FuncCall ("Prelude",">>") [Comb FuncCall ("IO","hClose") [Var 2],Comb FuncCall ("AnalysisServer","stopWorkers") [Var 3]]])])),Func ("AnalysisServer","serverLoop") 2 Private (FuncType (TCons ("Socket","Socket") []) (FuncType (TCons ("Prelude","[]") [TCons ("IO","Handle") []]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []]))) (Rule [1,2] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Socket","waitForSocketAccept") [Var 1,Comb FuncCall ("Configuration","waitTime") []],Comb (FuncPartCall 1) ("AnalysisServer","serverLoop._#lambda23") [Var 1,Var 2]])),Func ("AnalysisServer","serverLoop._#lambda23") 3 Private (FuncType (TCons ("Socket","Socket") []) (FuncType (TCons ("Prelude","[]") [TCons ("IO","Handle") []]) (FuncType (TCons ("Prelude","Maybe") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("IO","Handle") []]]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []])))) (Rule [1,2,3] (Case  Rigid (Var 3) [Branch (Pattern ("Prelude","Just") [4]) (Case  Rigid (Var 4) [Branch (Pattern ("Prelude","(,)") [5,6]) (Comb FuncCall ("AnalysisServer","serverLoopOnHandle") [Var 1,Var 2,Var 6])]),Branch (Pattern ("Prelude","Nothing") []) (Comb FuncCall ("Prelude",">>") [Comb FuncCall ("Prelude","putStrLn") [Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'v'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'L'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'F'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'S'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'k'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'A'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],Comb FuncCall ("Prelude",">>") [Comb FuncCall ("System","sleep") [Lit (Intc  1)],Comb FuncCall ("AnalysisServer","serverLoop") [Var 1,Var 2]]])])),Func ("AnalysisServer","hGetLineUntilEOF") 1 Private (FuncType (TCons ("IO","Handle") []) (TCons ("Prelude","IO") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("IO","hIsEOF") [Var 1],Comb (FuncPartCall 1) ("AnalysisServer","hGetLineUntilEOF._#lambda25") [Var 1]])),Func ("AnalysisServer","hGetLineUntilEOF._#lambda25") 2 Private (FuncType (TCons ("IO","Handle") []) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","IO") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]))) (Rule [1,2] (Case  Rigid (Var 2) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","return") [Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("IO","hGetChar") [Var 1],Comb (FuncPartCall 1) ("AnalysisServer","hGetLineUntilEOF._#lambda25._#lambda26") [Var 1]])])),Func ("AnalysisServer","hGetLineUntilEOF._#lambda25._#lambda26") 2 Private (FuncType (TCons ("IO","Handle") []) (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","IO") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]))) (Rule [1,2] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 2,Lit (Charc  '\010')]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","return") [Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("AnalysisServer","hGetLineUntilEOF") [Var 1],Comb (FuncPartCall 1) ("AnalysisServer","hGetLineUntilEOF._#lambda25._#lambda26._#lambda27") [Var 2]])])),Func ("AnalysisServer","hGetLineUntilEOF._#lambda25._#lambda26._#lambda27") 2 Private (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]))) (Rule [1,2] (Comb FuncCall ("Prelude","return") [Comb ConsCall ("Prelude",":") [Var 1,Var 2]])),Func ("AnalysisServer","serverLoopOnHandle") 3 Private (FuncType (TCons ("Socket","Socket") []) (FuncType (TCons ("Prelude","[]") [TCons ("IO","Handle") []]) (FuncType (TCons ("IO","Handle") []) (TCons ("Prelude","IO") [TCons ("Prelude","()") []])))) (Rule [1,2,3] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("IO","hIsEOF") [Var 3],Comb (FuncPartCall 1) ("AnalysisServer","serverLoopOnHandle._#lambda28") [Var 3,Var 1,Var 2]])),Func ("AnalysisServer","serverLoopOnHandle.sendResult.106") 4 Private (FuncType (TCons ("IO","Handle") []) (FuncType (TCons ("Socket","Socket") []) (FuncType (TCons ("Prelude","[]") [TCons ("IO","Handle") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []]))))) (Rule [1,2,3,4] (Comb FuncCall ("Prelude",">>") [Comb FuncCall ("Configuration","debugMessageLevel") [Lit (Intc  4),Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]],Var 4]],Comb FuncCall ("Prelude",">>") [Comb FuncCall ("AnalysisServer","sendServerResult") [Var 1,Var 4],Comb FuncCall ("AnalysisServer","serverLoopOnHandle") [Var 2,Var 3,Var 1]]])),Func ("AnalysisServer","serverLoopOnHandle.sendAnalysisError.106") 4 Private (FuncType (TCons ("IO","Handle") []) (FuncType (TCons ("Socket","Socket") []) (FuncType (TCons ("Prelude","[]") [TCons ("IO","Handle") []]) (FuncType (TCons ("Prelude","IOError") []) (TCons ("Prelude","IO") [TCons ("Prelude","()") []]))))) (Rule [1,2,3,4] (Comb FuncCall ("Prelude",">>") [Comb FuncCall ("AnalysisServer","sendServerError") [Var 1,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'E'),Comb ConsCall ("Prelude",":") [Lit (Charc  'R'),Comb ConsCall ("Prelude",":") [Lit (Charc  'R'),Comb ConsCall ("Prelude",":") [Lit (Charc  'O'),Comb ConsCall ("Prelude",":") [Lit (Charc  'R'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'v'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]],Comb FuncCall ("Prelude","showError") [Var 4]]],Comb FuncCall ("AnalysisServer","serverLoopOnHandle") [Var 2,Var 3,Var 1]])),Func ("AnalysisServer","serverLoopOnHandle._#lambda28") 4 Private (FuncType (TCons ("IO","Handle") []) (FuncType (TCons ("Socket","Socket") []) (FuncType (TCons ("Prelude","[]") [TCons ("IO","Handle") []]) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","IO") [TCons ("Prelude","()") []]))))) (Rule [1,2,3,4] (Case  Rigid (Var 4) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude",">>") [Comb FuncCall ("IO","hClose") [Var 1],Comb FuncCall ("Prelude",">>") [Comb FuncCall ("Configuration","debugMessageLevel") [Lit (Intc  2),Comb ConsCall ("Prelude",":") [Lit (Charc  'S'),Comb ConsCall ("Prelude",":") [Lit (Charc  'E'),Comb ConsCall ("Prelude",":") [Lit (Charc  'R'),Comb ConsCall ("Prelude",":") [Lit (Charc  'V'),Comb ConsCall ("Prelude",":") [Lit (Charc  'E'),Comb ConsCall ("Prelude",":") [Lit (Charc  'R'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]],Comb FuncCall ("AnalysisServer","serverLoop") [Var 2,Var 3]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("AnalysisServer","hGetLineUntilEOF") [Var 1],Comb (FuncPartCall 1) ("AnalysisServer","serverLoopOnHandle._#lambda28._#lambda29") [Var 1,Var 2,Var 3]])])),Func ("AnalysisServer","serverLoopOnHandle._#lambda28._#lambda29") 4 Private (FuncType (TCons ("IO","Handle") []) (FuncType (TCons ("Socket","Socket") []) (FuncType (TCons ("Prelude","[]") [TCons ("IO","Handle") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []]))))) (Rule [1,2,3,4] (Comb FuncCall ("Prelude",">>") [Comb FuncCall ("Configuration","debugMessageLevel") [Lit (Intc  2),Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'S'),Comb ConsCall ("Prelude",":") [Lit (Charc  'E'),Comb ConsCall ("Prelude",":") [Lit (Charc  'R'),Comb ConsCall ("Prelude",":") [Lit (Charc  'V'),Comb ConsCall ("Prelude",":") [Lit (Charc  'E'),Comb ConsCall ("Prelude",":") [Lit (Charc  'R'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]],Var 4]],Case  Rigid (Comb FuncCall ("AnalysisServer","parseServerMessage") [Var 4]) [Branch (Pattern ("AnalysisServer","ParseError") []) (Comb FuncCall ("Prelude",">>") [Comb FuncCall ("AnalysisServer","sendServerError") [Var 1,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'I'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'v'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]],Var 4]],Comb FuncCall ("AnalysisServer","serverLoopOnHandle") [Var 2,Var 3,Var 1]]),Branch (Pattern ("AnalysisServer","GetAnalysis") []) (Comb FuncCall ("Prelude",">>") [Comb FuncCall ("AnalysisServer","sendServerResult") [Var 1,Comb FuncCall ("AnalysisServer","showAnalysisNamesAndFormats") []],Comb FuncCall ("AnalysisServer","serverLoopOnHandle") [Var 2,Var 3,Var 1]]),Branch (Pattern ("AnalysisServer","AnalyzeModule") [5,6,7,8]) (Comb FuncCall ("Prelude","catch") [Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("AnalysisCollection","runAnalysisWithWorkers") [Var 5,Comb ConsCall ("Analysis","AText") [],Var 3,Var 7],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","return") [],Comb (FuncPartCall 1) ("ServerFormats","formatResult") [Var 7,Var 6,Comb ConsCall ("Prelude","Nothing") [],Var 8]]],Comb (FuncPartCall 1) ("AnalysisServer","serverLoopOnHandle.sendResult.106") [Var 1,Var 2,Var 3]],Comb (FuncPartCall 1) ("AnalysisServer","serverLoopOnHandle.sendAnalysisError.106") [Var 1,Var 2,Var 3]]),Branch (Pattern ("AnalysisServer","AnalyzeEntity") [9,10,11,12]) (Comb FuncCall ("Prelude","catch") [Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("AnalysisCollection","runAnalysisWithWorkers") [Var 9,Comb ConsCall ("Analysis","AText") [],Var 3,Var 11],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","return") [],Comb (FuncPartCall 1) ("ServerFormats","formatResult") [Var 11,Var 10,Comb ConsCall ("Prelude","Just") [Var 12],Comb ConsCall ("Prelude","False") []]]],Comb (FuncPartCall 1) ("AnalysisServer","serverLoopOnHandle.sendResult.106") [Var 1,Var 2,Var 3]],Comb (FuncPartCall 1) ("AnalysisServer","serverLoopOnHandle.sendAnalysisError.106") [Var 1,Var 2,Var 3]]),Branch (Pattern ("AnalysisServer","SetCurryPath") [13]) (Comb FuncCall ("Prelude",">>") [Comb FuncCall ("System","setEnviron") [Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'U'),Comb ConsCall ("Prelude",":") [Lit (Charc  'R'),Comb ConsCall ("Prelude",":") [Lit (Charc  'R'),Comb ConsCall ("Prelude",":") [Lit (Charc  'Y'),Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  'A'),Comb ConsCall ("Prelude",":") [Lit (Charc  'T'),Comb ConsCall ("Prelude",":") [Lit (Charc  'H'),Comb ConsCall ("Prelude","[]") []]]]]]]]]],Var 13],Comb FuncCall ("Prelude",">>") [Comb FuncCall ("AnalysisServer","changeWorkerPath") [Var 13,Var 3],Comb FuncCall ("Prelude",">>") [Comb FuncCall ("AnalysisServer","sendServerResult") [Var 1,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("AnalysisServer","serverLoopOnHandle") [Var 2,Var 3,Var 1]]]]),Branch (Pattern ("AnalysisServer","StopServer") []) (Comb FuncCall ("Prelude",">>") [Comb FuncCall ("AnalysisServer","stopWorkers") [Var 3],Comb FuncCall ("Prelude",">>") [Comb FuncCall ("AnalysisServer","sendServerResult") [Var 1,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude",">>") [Comb FuncCall ("IO","hClose") [Var 1],Comb FuncCall ("Prelude",">>") [Comb FuncCall ("Socket","sClose") [Var 2],Comb FuncCall ("Prelude",">>") [Comb FuncCall ("Prelude","putStrLn") [Comb ConsCall ("Prelude",":") [Lit (Charc  'S'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'S'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'v'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]],Comb FuncCall ("Configuration","removeServerPortNumber") []]]]]])]])),Func ("AnalysisServer","sendServerResult") 2 Private (FuncType (TCons ("IO","Handle") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []]))) (Rule [1,2] (Let [(3,Comb FuncCall ("Prelude","lines") [Var 2])] (Comb FuncCall ("Prelude",">>") [Comb FuncCall ("IO","hPutStrLn") [Var 1,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'k'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("Prelude","show") [Comb FuncCall ("Prelude","length") [Var 3]]]],Comb FuncCall ("Prelude",">>") [Comb FuncCall ("IO","hPutStr") [Var 1,Comb FuncCall ("Prelude","unlines") [Var 3]],Comb FuncCall ("IO","hFlush") [Var 1]]]))),Func ("AnalysisServer","sendServerError") 2 Private (FuncType (TCons ("IO","Handle") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []]))) (Rule [1,2] (Comb FuncCall ("Prelude",">>") [Comb FuncCall ("Configuration","debugMessageLevel") [Lit (Intc  1),Var 2],Comb FuncCall ("Prelude",">>") [Comb FuncCall ("IO","hPutStrLn") [Var 1,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]],Var 2]],Comb FuncCall ("IO","hFlush") [Var 1]]])),Func ("AnalysisServer","changeWorkerPath") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("IO","Handle") []]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","done") []),Branch (Pattern ("Prelude",":") [3,4]) (Comb FuncCall ("Prelude",">>") [Comb FuncCall ("IO","hPutStrLn") [Var 3,Comb FuncCall ("ReadShowTerm","showQTerm") [Comb ConsCall ("ServerFunctions","ChangePath") [Var 1]]],Comb FuncCall ("AnalysisServer","changeWorkerPath") [Var 1,Var 4]])])),Func ("AnalysisServer","parseServerMessage") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("AnalysisServer","AnalysisServerMessage") [])) (Rule [1] (Case  Rigid (Comb FuncCall ("Prelude","words") [Var 1]) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("AnalysisServer","ParseError") []),Branch (Pattern ("Prelude",":") [2,3]) (Case  Rigid (Var 2) [Branch (Pattern ("Prelude",":") [4,5]) (Let [(6,Var 4)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 6,Lit (Charc  'G')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 5) [Branch (Pattern ("Prelude",":") [7,8]) (Let [(9,Var 7)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 9,Lit (Charc  'e')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 8) [Branch (Pattern ("Prelude",":") [10,11]) (Let [(12,Var 10)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 12,Lit (Charc  't')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 11) [Branch (Pattern ("Prelude",":") [13,14]) (Let [(15,Var 13)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 15,Lit (Charc  'A')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 14) [Branch (Pattern ("Prelude",":") [16,17]) (Let [(18,Var 16)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 18,Lit (Charc  'n')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 17) [Branch (Pattern ("Prelude",":") [19,20]) (Let [(21,Var 19)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 21,Lit (Charc  'a')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 20) [Branch (Pattern ("Prelude",":") [22,23]) (Let [(24,Var 22)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 24,Lit (Charc  'l')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 23) [Branch (Pattern ("Prelude",":") [25,26]) (Let [(27,Var 25)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 27,Lit (Charc  'y')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 26) [Branch (Pattern ("Prelude",":") [28,29]) (Let [(30,Var 28)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 30,Lit (Charc  's')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 29) [Branch (Pattern ("Prelude",":") [31,32]) (Let [(33,Var 31)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 33,Lit (Charc  'i')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 32) [Branch (Pattern ("Prelude",":") [34,35]) (Let [(36,Var 34)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 36,Lit (Charc  's')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 35) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("AnalysisServer","GetAnalysis") []),Branch (Pattern ("Prelude",":") [37,38]) (Comb ConsCall ("AnalysisServer","ParseError") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("AnalysisServer","ParseError") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("AnalysisServer","ParseError") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("AnalysisServer","ParseError") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("AnalysisServer","ParseError") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("AnalysisServer","ParseError") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("AnalysisServer","ParseError") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("AnalysisServer","ParseError") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("AnalysisServer","ParseError") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("AnalysisServer","ParseError") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("AnalysisServer","ParseError") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("AnalysisServer","ParseError") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("AnalysisServer","ParseError") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("AnalysisServer","ParseError") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("AnalysisServer","ParseError") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("AnalysisServer","ParseError") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("AnalysisServer","ParseError") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("AnalysisServer","ParseError") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("AnalysisServer","ParseError") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("AnalysisServer","ParseError") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("AnalysisServer","ParseError") [])]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 6,Lit (Charc  'A')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 5) [Branch (Pattern ("Prelude",":") [39,40]) (Let [(41,Var 39)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 41,Lit (Charc  'n')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 40) [Branch (Pattern ("Prelude",":") [42,43]) (Let [(44,Var 42)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 44,Lit (Charc  'a')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 43) [Branch (Pattern ("Prelude",":") [45,46]) (Let [(47,Var 45)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 47,Lit (Charc  'l')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 46) [Branch (Pattern ("Prelude",":") [48,49]) (Let [(50,Var 48)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 50,Lit (Charc  'y')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 49) [Branch (Pattern ("Prelude",":") [51,52]) (Let [(53,Var 51)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 53,Lit (Charc  'z')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 52) [Branch (Pattern ("Prelude",":") [54,55]) (Let [(56,Var 54)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 56,Lit (Charc  'e')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 55) [Branch (Pattern ("Prelude",":") [57,58]) (Let [(59,Var 57)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 59,Lit (Charc  'M')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 58) [Branch (Pattern ("Prelude",":") [60,61]) (Let [(62,Var 60)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 62,Lit (Charc  'o')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 61) [Branch (Pattern ("Prelude",":") [63,64]) (Let [(65,Var 63)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 65,Lit (Charc  'd')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 64) [Branch (Pattern ("Prelude",":") [66,67]) (Let [(68,Var 66)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 68,Lit (Charc  'u')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 67) [Branch (Pattern ("Prelude",":") [69,70]) (Let [(71,Var 69)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 71,Lit (Charc  'l')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 70) [Branch (Pattern ("Prelude",":") [72,73]) (Let [(74,Var 72)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 74,Lit (Charc  'e')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 73) [Branch (Pattern ("Prelude","[]") []) (Case  Rigid (Var 3) [Branch (Pattern ("Prelude",":") [75,76]) (Case  Rigid (Var 76) [Branch (Pattern ("Prelude",":") [77,78]) (Case  Rigid (Var 78) [Branch (Pattern ("Prelude",":") [79,80]) (Case  Rigid (Var 80) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("AnalysisServer","parseServerMessage.checkFormat.141") [Var 77],Comb ConsCall ("AnalysisServer","AnalyzeModule") [Var 75,Var 77,Var 79,Comb ConsCall ("Prelude","False") []]]),Branch (Pattern ("Prelude",":") [81,82]) (Comb FuncCall ("Prelude","failed") [])]),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","failed") [])]),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","failed") [])]),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","failed") [])]),Branch (Pattern ("Prelude",":") [83,84]) (Comb ConsCall ("AnalysisServer","ParseError") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("AnalysisServer","ParseError") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("AnalysisServer","ParseError") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("AnalysisServer","ParseError") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("AnalysisServer","ParseError") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("AnalysisServer","ParseError") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("AnalysisServer","ParseError") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("AnalysisServer","ParseError") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("AnalysisServer","ParseError") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("AnalysisServer","ParseError") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("AnalysisServer","ParseError") [])]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 59,Lit (Charc  'I')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 58) [Branch (Pattern ("Prelude",":") [85,86]) (Let [(87,Var 85)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 87,Lit (Charc  'n')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 86) [Branch (Pattern ("Prelude",":") [88,89]) (Let [(90,Var 88)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 90,Lit (Charc  't')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 89) [Branch (Pattern ("Prelude",":") [91,92]) (Let [(93,Var 91)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 93,Lit (Charc  'e')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 92) [Branch (Pattern ("Prelude",":") [94,95]) (Let [(96,Var 94)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 96,Lit (Charc  'r')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 95) [Branch (Pattern ("Prelude",":") [97,98]) (Let [(99,Var 97)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 99,Lit (Charc  'f')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 98) [Branch (Pattern ("Prelude",":") [100,101]) (Let [(102,Var 100)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 102,Lit (Charc  'a')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 101) [Branch (Pattern ("Prelude",":") [103,104]) (Let [(105,Var 103)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 105,Lit (Charc  'c')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 104) [Branch (Pattern ("Prelude",":") [106,107]) (Let [(108,Var 106)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 108,Lit (Charc  'e')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 107) [Branch (Pattern ("Prelude","[]") []) (Case  Rigid (Var 3) [Branch (Pattern ("Prelude",":") [109,110]) (Case  Rigid (Var 110) [Branch (Pattern ("Prelude",":") [111,112]) (Case  Rigid (Var 112) [Branch (Pattern ("Prelude",":") [113,114]) (Case  Rigid (Var 114) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("AnalysisServer","parseServerMessage.checkFormat.141") [Var 111],Comb ConsCall ("AnalysisServer","AnalyzeModule") [Var 109,Var 111,Var 113,Comb ConsCall ("Prelude","True") []]]),Branch (Pattern ("Prelude",":") [115,116]) (Comb ConsCall ("AnalysisServer","ParseError") [])]),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("AnalysisServer","ParseError") [])]),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("AnalysisServer","ParseError") [])]),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("AnalysisServer","ParseError") [])]),Branch (Pattern ("Prelude",":") [117,118]) (Comb ConsCall ("AnalysisServer","ParseError") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("AnalysisServer","ParseError") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("AnalysisServer","ParseError") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("AnalysisServer","ParseError") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("AnalysisServer","ParseError") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("AnalysisServer","ParseError") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("AnalysisServer","ParseError") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("AnalysisServer","ParseError") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("AnalysisServer","ParseError") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("AnalysisServer","ParseError") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("AnalysisServer","ParseError") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("AnalysisServer","ParseError") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("AnalysisServer","ParseError") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("AnalysisServer","ParseError") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("AnalysisServer","ParseError") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("AnalysisServer","ParseError") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("AnalysisServer","ParseError") [])]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 59,Lit (Charc  'F')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 58) [Branch (Pattern ("Prelude",":") [119,120]) (Let [(121,Var 119)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 121,Lit (Charc  'u')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 120) [Branch (Pattern ("Prelude",":") [122,123]) (Let [(124,Var 122)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 124,Lit (Charc  'n')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 123) [Branch (Pattern ("Prelude",":") [125,126]) (Let [(127,Var 125)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 127,Lit (Charc  'c')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 126) [Branch (Pattern ("Prelude",":") [128,129]) (Let [(130,Var 128)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 130,Lit (Charc  't')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 129) [Branch (Pattern ("Prelude",":") [131,132]) (Let [(133,Var 131)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 133,Lit (Charc  'i')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 132) [Branch (Pattern ("Prelude",":") [134,135]) (Let [(136,Var 134)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 136,Lit (Charc  'o')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 135) [Branch (Pattern ("Prelude",":") [137,138]) (Let [(139,Var 137)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 139,Lit (Charc  'n')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 138) [Branch (Pattern ("Prelude","[]") []) (Case  Rigid (Var 3) [Branch (Pattern ("Prelude",":") [140,141]) (Case  Rigid (Var 141) [Branch (Pattern ("Prelude",":") [142,143]) (Case  Rigid (Var 143) [Branch (Pattern ("Prelude",":") [144,145]) (Case  Rigid (Var 145) [Branch (Pattern ("Prelude",":") [146,147]) (Case  Rigid (Var 147) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("AnalysisServer","parseServerMessage.checkFormat.141") [Var 142],Comb ConsCall ("AnalysisServer","AnalyzeEntity") [Var 140,Var 142,Var 144,Var 146]]),Branch (Pattern ("Prelude",":") [148,149]) (Comb ConsCall ("AnalysisServer","ParseError") [])]),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("AnalysisServer","ParseError") [])]),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("AnalysisServer","ParseError") [])]),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("AnalysisServer","ParseError") [])]),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("AnalysisServer","ParseError") [])]),Branch (Pattern ("Prelude",":") [150,151]) (Comb ConsCall ("AnalysisServer","ParseError") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("AnalysisServer","ParseError") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("AnalysisServer","ParseError") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("AnalysisServer","ParseError") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("AnalysisServer","ParseError") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("AnalysisServer","ParseError") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("AnalysisServer","ParseError") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("AnalysisServer","ParseError") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("AnalysisServer","ParseError") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("AnalysisServer","ParseError") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("AnalysisServer","ParseError") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("AnalysisServer","ParseError") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("AnalysisServer","ParseError") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("AnalysisServer","ParseError") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("AnalysisServer","ParseError") [])]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 59,Lit (Charc  'T')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 58) [Branch (Pattern ("Prelude",":") [152,153]) (Let [(154,Var 152)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 154,Lit (Charc  'y')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 153) [Branch (Pattern ("Prelude",":") [155,156]) (Let [(157,Var 155)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 157,Lit (Charc  'p')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 156) [Branch (Pattern ("Prelude",":") [158,159]) (Let [(160,Var 158)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 160,Lit (Charc  'e')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 159) [Branch (Pattern ("Prelude",":") [161,162]) (Let [(163,Var 161)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 163,Lit (Charc  'C')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 162) [Branch (Pattern ("Prelude",":") [164,165]) (Let [(166,Var 164)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 166,Lit (Charc  'o')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 165) [Branch (Pattern ("Prelude",":") [167,168]) (Let [(169,Var 167)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 169,Lit (Charc  'n')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 168) [Branch (Pattern ("Prelude",":") [170,171]) (Let [(172,Var 170)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 172,Lit (Charc  's')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 171) [Branch (Pattern ("Prelude",":") [173,174]) (Let [(175,Var 173)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 175,Lit (Charc  't')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 174) [Branch (Pattern ("Prelude",":") [176,177]) (Let [(178,Var 176)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 178,Lit (Charc  'r')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 177) [Branch (Pattern ("Prelude",":") [179,180]) (Let [(181,Var 179)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 181,Lit (Charc  'u')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 180) [Branch (Pattern ("Prelude",":") [182,183]) (Let [(184,Var 182)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 184,Lit (Charc  'c')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 183) [Branch (Pattern ("Prelude",":") [185,186]) (Let [(187,Var 185)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 187,Lit (Charc  't')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 186) [Branch (Pattern ("Prelude",":") [188,189]) (Let [(190,Var 188)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 190,Lit (Charc  'o')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 189) [Branch (Pattern ("Prelude",":") [191,192]) (Let [(193,Var 191)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 193,Lit (Charc  'r')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 192) [Branch (Pattern ("Prelude","[]") []) (Case  Rigid (Var 3) [Branch (Pattern ("Prelude",":") [194,195]) (Case  Rigid (Var 195) [Branch (Pattern ("Prelude",":") [196,197]) (Case  Rigid (Var 197) [Branch (Pattern ("Prelude",":") [198,199]) (Case  Rigid (Var 199) [Branch (Pattern ("Prelude",":") [200,201]) (Case  Rigid (Var 201) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("AnalysisServer","parseServerMessage.checkFormat.141") [Var 196],Comb ConsCall ("AnalysisServer","AnalyzeEntity") [Var 194,Var 196,Var 198,Var 200]]),Branch (Pattern ("Prelude",":") [202,203]) (Comb ConsCall ("AnalysisServer","ParseError") [])]),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("AnalysisServer","ParseError") [])]),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("AnalysisServer","ParseError") [])]),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("AnalysisServer","ParseError") [])]),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("AnalysisServer","ParseError") [])]),Branch (Pattern ("Prelude",":") [204,205]) (Comb ConsCall ("AnalysisServer","ParseError") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("AnalysisServer","ParseError") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("AnalysisServer","ParseError") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("AnalysisServer","ParseError") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("AnalysisServer","ParseError") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("AnalysisServer","ParseError") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("AnalysisServer","ParseError") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("AnalysisServer","ParseError") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("AnalysisServer","ParseError") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("AnalysisServer","ParseError") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("AnalysisServer","ParseError") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("AnalysisServer","ParseError") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("AnalysisServer","ParseError") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("AnalysisServer","ParseError") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("AnalysisServer","ParseError") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("AnalysisServer","ParseError") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("AnalysisServer","ParseError") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("AnalysisServer","ParseError") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("AnalysisServer","ParseError") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("AnalysisServer","ParseError") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("AnalysisServer","ParseError") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("AnalysisServer","ParseError") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("AnalysisServer","ParseError") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("AnalysisServer","ParseError") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("AnalysisServer","ParseError") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("AnalysisServer","ParseError") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("AnalysisServer","ParseError") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("AnalysisServer","ParseError") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("AnalysisServer","ParseError") [])]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 59,Lit (Charc  'D')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 58) [Branch (Pattern ("Prelude",":") [206,207]) (Let [(208,Var 206)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 208,Lit (Charc  'a')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 207) [Branch (Pattern ("Prelude",":") [209,210]) (Let [(211,Var 209)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 211,Lit (Charc  't')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 210) [Branch (Pattern ("Prelude",":") [212,213]) (Let [(214,Var 212)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 214,Lit (Charc  'a')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 213) [Branch (Pattern ("Prelude",":") [215,216]) (Let [(217,Var 215)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 217,Lit (Charc  'C')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 216) [Branch (Pattern ("Prelude",":") [218,219]) (Let [(220,Var 218)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 220,Lit (Charc  'o')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 219) [Branch (Pattern ("Prelude",":") [221,222]) (Let [(223,Var 221)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 223,Lit (Charc  'n')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 222) [Branch (Pattern ("Prelude",":") [224,225]) (Let [(226,Var 224)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 226,Lit (Charc  's')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 225) [Branch (Pattern ("Prelude",":") [227,228]) (Let [(229,Var 227)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 229,Lit (Charc  't')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 228) [Branch (Pattern ("Prelude",":") [230,231]) (Let [(232,Var 230)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 232,Lit (Charc  'r')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 231) [Branch (Pattern ("Prelude",":") [233,234]) (Let [(235,Var 233)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 235,Lit (Charc  'u')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 234) [Branch (Pattern ("Prelude",":") [236,237]) (Let [(238,Var 236)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 238,Lit (Charc  'c')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 237) [Branch (Pattern ("Prelude",":") [239,240]) (Let [(241,Var 239)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 241,Lit (Charc  't')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 240) [Branch (Pattern ("Prelude",":") [242,243]) (Let [(244,Var 242)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 244,Lit (Charc  'o')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 243) [Branch (Pattern ("Prelude",":") [245,246]) (Let [(247,Var 245)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 247,Lit (Charc  'r')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 246) [Branch (Pattern ("Prelude","[]") []) (Case  Rigid (Var 3) [Branch (Pattern ("Prelude",":") [248,249]) (Case  Rigid (Var 249) [Branch (Pattern ("Prelude",":") [250,251]) (Case  Rigid (Var 251) [Branch (Pattern ("Prelude",":") [252,253]) (Case  Rigid (Var 253) [Branch (Pattern ("Prelude",":") [254,255]) (Case  Rigid (Var 255) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("AnalysisServer","parseServerMessage.checkFormat.141") [Var 250],Comb ConsCall ("AnalysisServer","AnalyzeEntity") [Var 248,Var 250,Var 252,Var 254]]),Branch (Pattern ("Prelude",":") [256,257]) (Comb ConsCall ("AnalysisServer","ParseError") [])]),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("AnalysisServer","ParseError") [])]),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("AnalysisServer","ParseError") [])]),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("AnalysisServer","ParseError") [])]),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("AnalysisServer","ParseError") [])]),Branch (Pattern ("Prelude",":") [258,259]) (Comb ConsCall ("AnalysisServer","ParseError") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("AnalysisServer","ParseError") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("AnalysisServer","ParseError") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("AnalysisServer","ParseError") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("AnalysisServer","ParseError") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("AnalysisServer","ParseError") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("AnalysisServer","ParseError") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("AnalysisServer","ParseError") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("AnalysisServer","ParseError") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("AnalysisServer","ParseError") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("AnalysisServer","ParseError") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("AnalysisServer","ParseError") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("AnalysisServer","ParseError") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("AnalysisServer","ParseError") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("AnalysisServer","ParseError") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("AnalysisServer","ParseError") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("AnalysisServer","ParseError") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("AnalysisServer","ParseError") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("AnalysisServer","ParseError") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("AnalysisServer","ParseError") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("AnalysisServer","ParseError") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("AnalysisServer","ParseError") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("AnalysisServer","ParseError") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("AnalysisServer","ParseError") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("AnalysisServer","ParseError") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("AnalysisServer","ParseError") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("AnalysisServer","ParseError") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("AnalysisServer","ParseError") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("AnalysisServer","ParseError") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("AnalysisServer","ParseError") [])])])])])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("AnalysisServer","ParseError") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("AnalysisServer","ParseError") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("AnalysisServer","ParseError") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("AnalysisServer","ParseError") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("AnalysisServer","ParseError") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("AnalysisServer","ParseError") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("AnalysisServer","ParseError") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("AnalysisServer","ParseError") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("AnalysisServer","ParseError") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("AnalysisServer","ParseError") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("AnalysisServer","ParseError") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("AnalysisServer","ParseError") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("AnalysisServer","ParseError") [])]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 6,Lit (Charc  'S')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 5) [Branch (Pattern ("Prelude",":") [260,261]) (Let [(262,Var 260)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 262,Lit (Charc  'e')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 261) [Branch (Pattern ("Prelude",":") [263,264]) (Let [(265,Var 263)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 265,Lit (Charc  't')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 264) [Branch (Pattern ("Prelude",":") [266,267]) (Let [(268,Var 266)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 268,Lit (Charc  'C')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 267) [Branch (Pattern ("Prelude",":") [269,270]) (Let [(271,Var 269)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 271,Lit (Charc  'u')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 270) [Branch (Pattern ("Prelude",":") [272,273]) (Let [(274,Var 272)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 274,Lit (Charc  'r')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 273) [Branch (Pattern ("Prelude",":") [275,276]) (Let [(277,Var 275)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 277,Lit (Charc  'r')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 276) [Branch (Pattern ("Prelude",":") [278,279]) (Let [(280,Var 278)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 280,Lit (Charc  'y')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 279) [Branch (Pattern ("Prelude",":") [281,282]) (Let [(283,Var 281)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 283,Lit (Charc  'P')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 282) [Branch (Pattern ("Prelude",":") [284,285]) (Let [(286,Var 284)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 286,Lit (Charc  'a')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 285) [Branch (Pattern ("Prelude",":") [287,288]) (Let [(289,Var 287)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 289,Lit (Charc  't')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 288) [Branch (Pattern ("Prelude",":") [290,291]) (Let [(292,Var 290)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 292,Lit (Charc  'h')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 291) [Branch (Pattern ("Prelude","[]") []) (Case  Rigid (Var 3) [Branch (Pattern ("Prelude",":") [293,294]) (Case  Rigid (Var 294) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("AnalysisServer","SetCurryPath") [Var 293]),Branch (Pattern ("Prelude",":") [295,296]) (Comb ConsCall ("AnalysisServer","ParseError") [])]),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("AnalysisServer","ParseError") [])]),Branch (Pattern ("Prelude",":") [297,298]) (Comb ConsCall ("AnalysisServer","ParseError") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("AnalysisServer","ParseError") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("AnalysisServer","ParseError") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("AnalysisServer","ParseError") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("AnalysisServer","ParseError") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("AnalysisServer","ParseError") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("AnalysisServer","ParseError") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("AnalysisServer","ParseError") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("AnalysisServer","ParseError") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("AnalysisServer","ParseError") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("AnalysisServer","ParseError") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("AnalysisServer","ParseError") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("AnalysisServer","ParseError") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("AnalysisServer","ParseError") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("AnalysisServer","ParseError") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("AnalysisServer","ParseError") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("AnalysisServer","ParseError") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("AnalysisServer","ParseError") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("AnalysisServer","ParseError") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("AnalysisServer","ParseError") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("AnalysisServer","ParseError") [])]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 262,Lit (Charc  't')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 261) [Branch (Pattern ("Prelude",":") [299,300]) (Let [(301,Var 299)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 301,Lit (Charc  'o')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 300) [Branch (Pattern ("Prelude",":") [302,303]) (Let [(304,Var 302)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 304,Lit (Charc  'p')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 303) [Branch (Pattern ("Prelude",":") [305,306]) (Let [(307,Var 305)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 307,Lit (Charc  'S')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 306) [Branch (Pattern ("Prelude",":") [308,309]) (Let [(310,Var 308)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 310,Lit (Charc  'e')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 309) [Branch (Pattern ("Prelude",":") [311,312]) (Let [(313,Var 311)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 313,Lit (Charc  'r')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 312) [Branch (Pattern ("Prelude",":") [314,315]) (Let [(316,Var 314)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 316,Lit (Charc  'v')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 315) [Branch (Pattern ("Prelude",":") [317,318]) (Let [(319,Var 317)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 319,Lit (Charc  'e')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 318) [Branch (Pattern ("Prelude",":") [320,321]) (Let [(322,Var 320)] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 322,Lit (Charc  'r')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 321) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("AnalysisServer","StopServer") []),Branch (Pattern ("Prelude",":") [323,324]) (Comb ConsCall ("AnalysisServer","ParseError") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("AnalysisServer","ParseError") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("AnalysisServer","ParseError") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("AnalysisServer","ParseError") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("AnalysisServer","ParseError") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("AnalysisServer","ParseError") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("AnalysisServer","ParseError") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("AnalysisServer","ParseError") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("AnalysisServer","ParseError") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("AnalysisServer","ParseError") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("AnalysisServer","ParseError") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("AnalysisServer","ParseError") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("AnalysisServer","ParseError") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("AnalysisServer","ParseError") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("AnalysisServer","ParseError") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("AnalysisServer","ParseError") [])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("AnalysisServer","ParseError") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("AnalysisServer","ParseError") [])])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("AnalysisServer","ParseError") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("AnalysisServer","ParseError") [])])])])),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("AnalysisServer","ParseError") [])])])),Func ("AnalysisServer","parseServerMessage.checkFormat.141") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("AnalysisServer","AnalysisServerMessage") []) (TCons ("AnalysisServer","AnalysisServerMessage") []))) (Rule [1,2] (Case  Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","elem") [Var 1],Comb FuncCall ("ServerFormats","serverFormats") []]) [Branch (Pattern ("Prelude","True") []) (Var 2),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("AnalysisServer","ParseError") [])])),Func ("AnalysisServer","showAnalysisNamesAndFormats") 0 Private (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (Rule [] (Comb FuncCall ("Prelude","unlines") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","concatMap") [Comb (FuncPartCall 1) ("AnalysisServer","showAnalysisNamesAndFormats._#lambda39") []],Comb FuncCall ("AnalysisCollection","registeredAnalysisNames") []]])),Func ("AnalysisServer","showAnalysisNamesAndFormats._#lambda39") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Prelude","++") [Comb FuncCall ("Prelude","++") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("ServerFormats","serverFormats") []]))] []