Prog "GenericProgInfo" ["Configuration","FiniteMap","Prelude","XML","FlatCurry"] [Type ("GenericProgInfo","ProgInfo") Public [0] [Cons ("GenericProgInfo","ProgInfo") 2 Public [TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TVar 0],TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TVar 0]]]] [Func ("GenericProgInfo","emptyProgInfo") 0 Public (TCons ("GenericProgInfo","ProgInfo") [TVar 0]) (Rule [] (Comb ConsCall ("GenericProgInfo","ProgInfo") [Comb FuncCall ("FiniteMap","emptyFM") [Comb (FuncPartCall 2) ("Prelude","<") []],Comb FuncCall ("FiniteMap","emptyFM") [Comb (FuncPartCall 2) ("Prelude","<") []]])),Func ("GenericProgInfo","lookupProgInfo") 2 Public (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("GenericProgInfo","ProgInfo") [TVar 0]) (TCons ("Prelude","Maybe") [TVar 0]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("GenericProgInfo","ProgInfo") [3,4]) (Case  Rigid (Comb FuncCall ("FiniteMap","lookupFM") [Var 3,Var 1]) [Branch (Pattern ("Prelude","Just") [5]) (Comb ConsCall ("Prelude","Just") [Var 5]),Branch (Pattern ("Prelude","Nothing") []) (Comb FuncCall ("FiniteMap","lookupFM") [Var 4,Var 1])])])),Func ("GenericProgInfo","combineProgInfo") 2 Public (FuncType (TCons ("GenericProgInfo","ProgInfo") [TVar 0]) (FuncType (TCons ("GenericProgInfo","ProgInfo") [TVar 0]) (TCons ("GenericProgInfo","ProgInfo") [TVar 0]))) (Rule [1,2] (Case  Flex (Var 1) [Branch (Pattern ("GenericProgInfo","ProgInfo") [3,4]) (Case  Flex (Var 2) [Branch (Pattern ("GenericProgInfo","ProgInfo") [5,6]) (Comb ConsCall ("GenericProgInfo","ProgInfo") [Comb FuncCall ("FiniteMap","plusFM") [Var 3,Var 5],Comb FuncCall ("FiniteMap","plusFM") [Var 4,Var 6]])])])),Func ("GenericProgInfo","lists2ProgInfo") 1 Public (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TVar 0]],TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TVar 0]]]) (TCons ("GenericProgInfo","ProgInfo") [TVar 0])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Comb ConsCall ("GenericProgInfo","ProgInfo") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FiniteMap","listToFM") [Comb (FuncPartCall 2) ("Prelude","<") []],Var 2],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FiniteMap","listToFM") [Comb (FuncPartCall 2) ("Prelude","<") []],Var 3]])])),Func ("GenericProgInfo","publicListFromProgInfo") 1 Public (FuncType (TCons ("GenericProgInfo","ProgInfo") [TVar 0]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TVar 0]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("GenericProgInfo","ProgInfo") [2,3]) (Comb FuncCall ("FiniteMap","fmToList") [Var 2])])),Func ("GenericProgInfo","progInfo2Lists") 1 Public (FuncType (TCons ("GenericProgInfo","ProgInfo") [TVar 0]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TVar 0]],TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TVar 0]]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("GenericProgInfo","ProgInfo") [2,3]) (Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("FiniteMap","fmToList") [Var 2],Comb FuncCall ("FiniteMap","fmToList") [Var 3]])])),Func ("GenericProgInfo","progInfo2XML") 1 Public (FuncType (TCons ("GenericProgInfo","ProgInfo") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("XML","XmlExp") []],TCons ("Prelude","[]") [TCons ("XML","XmlExp") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("GenericProgInfo","ProgInfo") [2,3]) (Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("FiniteMap","foldFM") [Comb (FuncPartCall 3) ("GenericProgInfo","progInfo2XML.entry2xml.19") [],Comb ConsCall ("Prelude","[]") [],Var 2],Comb FuncCall ("FiniteMap","foldFM") [Comb (FuncPartCall 3) ("GenericProgInfo","progInfo2XML.entry2xml.19") [],Comb ConsCall ("Prelude","[]") [],Var 3]])])),Func ("GenericProgInfo","progInfo2XML.entry2xml.19") 3 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("XML","XmlExp") []]) (TCons ("Prelude","[]") [TCons ("XML","XmlExp") []])))) (Rule [1,2,3] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb ConsCall ("Prelude",":") [Comb FuncCall ("XML","xml") [Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude","[]") []]]]]]]]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("XML","xml") [Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("XML","xtxt") [Var 4],Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("XML","xml") [Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("XML","xtxt") [Var 5],Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("XML","xml") [Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude","[]") []]]]]]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("XML","xtxt") [Var 2],Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude","[]") []]]]],Var 3])])),Func ("GenericProgInfo","mapProgInfo") 2 Public (FuncType (FuncType (TVar 0) (TVar 1)) (FuncType (TCons ("GenericProgInfo","ProgInfo") [TVar 0]) (TCons ("GenericProgInfo","ProgInfo") [TVar 1]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("GenericProgInfo","ProgInfo") [3,4]) (Comb ConsCall ("GenericProgInfo","ProgInfo") [Comb FuncCall ("FiniteMap","mapFM") [Comb (FuncPartCall 2) ("GenericProgInfo","mapProgInfo._#lambda2") [Var 1],Var 3],Comb FuncCall ("FiniteMap","mapFM") [Comb (FuncPartCall 2) ("GenericProgInfo","mapProgInfo._#lambda3") [Var 1],Var 4]])])),Func ("GenericProgInfo","mapProgInfo._#lambda2") 3 Private (FuncType (FuncType (TVar 98) (TVar 93)) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TVar 98) (TVar 93)))) (Rule [1,2,3] (Comb FuncCall ("Prelude","apply") [Var 1,Var 3])),Func ("GenericProgInfo","mapProgInfo._#lambda3") 3 Private (FuncType (FuncType (TVar 98) (TVar 93)) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TVar 98) (TVar 93)))) (Rule [1,2,3] (Comb FuncCall ("Prelude","apply") [Var 1,Var 3])),Func ("GenericProgInfo","publicProgInfo") 1 Public (FuncType (TCons ("GenericProgInfo","ProgInfo") [TVar 0]) (TCons ("GenericProgInfo","ProgInfo") [TVar 0])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("GenericProgInfo","ProgInfo") [2,3]) (Comb ConsCall ("GenericProgInfo","ProgInfo") [Var 2,Comb FuncCall ("FiniteMap","emptyFM") [Comb (FuncPartCall 2) ("Prelude","<") []]])])),Func ("GenericProgInfo","writeAnalysisFiles") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("GenericProgInfo","ProgInfo") [TVar 0]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("GenericProgInfo","ProgInfo") [3,4]) (Comb FuncCall ("Prelude",">>") [Comb FuncCall ("Prelude","writeFile") [Comb FuncCall ("Prelude","++") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'v'),Comb ConsCall ("Prelude","[]") []]]]]]],Comb FuncCall ("FiniteMap","showFM") [Var 4]],Comb FuncCall ("Prelude",">>") [Comb FuncCall ("Prelude","writeFile") [Comb FuncCall ("Prelude","++") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'b'),Comb ConsCall ("Prelude","[]") []]]]]],Comb FuncCall ("FiniteMap","showFM") [Var 3]],Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Configuration","debugMessageLevel") [Lit (Intc  3)],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'A'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '\''),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]],Comb FuncCall ("Prelude","++") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc  '\''),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]])])),Func ("GenericProgInfo","readAnalysisFiles") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("GenericProgInfo","ProgInfo") [TVar 0]])) (Rule [1] (Comb FuncCall ("Prelude",">>") [Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Configuration","debugMessageLevel") [Lit (Intc  3)],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'R'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '\''),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]],Comb FuncCall ("Prelude","++") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc  '\''),Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Prelude","readFile") [Comb FuncCall ("Prelude","++") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'b'),Comb ConsCall ("Prelude","[]") []]]]]]],Comb (FuncPartCall 1) ("GenericProgInfo","readAnalysisFiles._#lambda4") [Var 1]]])),Func ("GenericProgInfo","readAnalysisFiles._#lambda4") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("GenericProgInfo","ProgInfo") [TVar 181]]))) (Rule [1,2] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Prelude","readFile") [Comb FuncCall ("Prelude","++") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'v'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb (FuncPartCall 1) ("GenericProgInfo","readAnalysisFiles._#lambda4._#lambda5") [Var 2]])),Func ("GenericProgInfo","readAnalysisFiles._#lambda4._#lambda5") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("GenericProgInfo","ProgInfo") [TVar 182]]))) (Rule [1,2] (Comb FuncCall ("Prelude","return") [Comb ConsCall ("GenericProgInfo","ProgInfo") [Comb FuncCall ("FiniteMap","readFM") [Comb (FuncPartCall 2) ("Prelude","<") [],Var 1],Comb FuncCall ("FiniteMap","readFM") [Comb (FuncPartCall 2) ("Prelude","<") [],Var 2]]])),Func ("GenericProgInfo","readAnalysisPublicFile") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("GenericProgInfo","ProgInfo") [TVar 0]])) (Rule [1] (Comb FuncCall ("Prelude",">>") [Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Configuration","debugMessageLevel") [Lit (Intc  3)],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'R'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'b'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '\''),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],Comb FuncCall ("Prelude","++") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc  '\''),Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Prelude","readFile") [Var 1],Comb (FuncPartCall 1) ("GenericProgInfo","readAnalysisPublicFile._#lambda6") []]])),Func ("GenericProgInfo","readAnalysisPublicFile._#lambda6") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("GenericProgInfo","ProgInfo") [TVar 183]])) (Rule [1] (Comb FuncCall ("Prelude","return") [Comb ConsCall ("GenericProgInfo","ProgInfo") [Comb FuncCall ("FiniteMap","readFM") [Comb (FuncPartCall 2) ("Prelude","<") [],Var 1],Comb FuncCall ("FiniteMap","emptyFM") [Comb (FuncPartCall 2) ("Prelude","<") []]]])),Func ("GenericProgInfo","showProgInfo") 1 Public (FuncType (TCons ("GenericProgInfo","ProgInfo") [TVar 0]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("GenericProgInfo","ProgInfo") [2,3]) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'b'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]],Comb FuncCall ("Prelude","++") [Comb FuncCall ("FiniteMap","showFM") [Var 2],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '\010'),Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'v'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]],Comb FuncCall ("FiniteMap","showFM") [Var 3]]]])])),Func ("GenericProgInfo","equalProgInfo") 2 Public (FuncType (TCons ("GenericProgInfo","ProgInfo") [TVar 0]) (FuncType (TCons ("GenericProgInfo","ProgInfo") [TVar 0]) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Case  Flex (Var 1) [Branch (Pattern ("GenericProgInfo","ProgInfo") [3,4]) (Case  Flex (Var 2) [Branch (Pattern ("GenericProgInfo","ProgInfo") [5,6]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("FiniteMap","eqFM") [Var 3,Var 5],Comb FuncCall ("FiniteMap","eqFM") [Var 4,Var 6]])])]))] []