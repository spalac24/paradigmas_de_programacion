Prog "UnificationSpec" ["FiniteMap","Prelude"] [TypeSyn ("UnificationSpec","VarIdx") Public [] (TCons ("Prelude","Int") []),TypeSyn ("UnificationSpec","TermEq") Public [] (TCons ("Prelude","(,)") [TCons ("UnificationSpec","Term") [],TCons ("UnificationSpec","Term") []]),TypeSyn ("UnificationSpec","TermEqs") Public [] (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("UnificationSpec","Term") [],TCons ("UnificationSpec","Term") []]]),TypeSyn ("UnificationSpec","Subst") Public [] (TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("UnificationSpec","Term") []]),Type ("UnificationSpec","Term") Public [] [Cons ("UnificationSpec","TermVar") 1 Public [TCons ("Prelude","Int") []],Cons ("UnificationSpec","TermCons") 2 Public [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("UnificationSpec","Term") []]]],Type ("UnificationSpec","UnificationError") Public [] [Cons ("UnificationSpec","Clash") 2 Public [TCons ("UnificationSpec","Term") [],TCons ("UnificationSpec","Term") []],Cons ("UnificationSpec","OccurCheck") 2 Public [TCons ("Prelude","Int") [],TCons ("UnificationSpec","Term") []]]] [Func ("UnificationSpec","showSubst") 0 Public (FuncType (TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("UnificationSpec","Term") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","unlines") [],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","map") [Comb (FuncPartCall 1) ("UnificationSpec","showSubst.showOne.2") []],Comb (FuncPartCall 1) ("FiniteMap","fmToList") []]])),Func ("UnificationSpec","showSubst.showOne.2") 1 Private (FuncType (TCons ("Prelude","(,)") [TVar 0,TVar 1]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","show") [Var 2],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  '>'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("Prelude","show") [Var 3]]])])),Func ("UnificationSpec","emptySubst") 0 Public (TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("UnificationSpec","Term") []]) (Rule [] (Comb FuncCall ("FiniteMap","emptyFM") [Comb (FuncPartCall 2) ("Prelude","<") []])),Func ("UnificationSpec","extendSubst") 0 Public (FuncType (TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("UnificationSpec","Term") []]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("UnificationSpec","Term") []) (TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("UnificationSpec","Term") []])))) (Rule [] (Comb (FuncPartCall 3) ("FiniteMap","addToFM") [])),Func ("UnificationSpec","lookupSubst") 0 Public (FuncType (TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("UnificationSpec","Term") []]) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Maybe") [TCons ("UnificationSpec","Term") []]))) (Rule [] (Comb (FuncPartCall 2) ("FiniteMap","lookupFM") [])),Func ("UnificationSpec","applySubst") 2 Public (FuncType (TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("UnificationSpec","Term") []]) (FuncType (TCons ("UnificationSpec","Term") []) (TCons ("UnificationSpec","Term") []))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("UnificationSpec","TermVar") [3]) (Comb FuncCall ("Prelude","maybe") [Var 2,Comb (FuncPartCall 1) ("Prelude","id") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("UnificationSpec","lookupSubst") [],Var 1],Var 3]]),Branch (Pattern ("UnificationSpec","TermCons") [4,5]) (Comb ConsCall ("UnificationSpec","TermCons") [Var 4,Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("UnificationSpec","applySubst") [Var 1],Var 5]])])),Func ("UnificationSpec","substituteSingle") 2 Private (FuncType (TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("UnificationSpec","Term") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("UnificationSpec","Term") [],TCons ("UnificationSpec","Term") []]) (TCons ("Prelude","(,)") [TCons ("UnificationSpec","Term") [],TCons ("UnificationSpec","Term") []]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("UnificationSpec","applySubst") [Var 1,Var 3],Comb FuncCall ("UnificationSpec","applySubst") [Var 1,Var 4]])])),Func ("UnificationSpec","substitute") 2 Private (FuncType (TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("UnificationSpec","Term") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("UnificationSpec","Term") [],TCons ("UnificationSpec","Term") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("UnificationSpec","Term") [],TCons ("UnificationSpec","Term") []]]))) (Rule [1,2] (Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("UnificationSpec","substituteSingle") [Var 1],Var 2])),Func ("UnificationSpec","unify") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("UnificationSpec","Term") [],TCons ("UnificationSpec","Term") []]]) (TCons ("Prelude","Either") [TCons ("UnificationSpec","UnificationError") [],TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("UnificationSpec","Term") []]])) (Rule [1] (Comb FuncCall ("Prelude","either") [Comb (ConsPartCall 1) ("Prelude","Left") [],Comb FuncCall ("Prelude",".") [Comb (ConsPartCall 1) ("Prelude","Right") [],Comb (FuncPartCall 1) ("UnificationSpec","eqsToSubst") []],Comb FuncCall ("UnificationSpec","unify'") [Var 1,Comb ConsCall ("Prelude","[]") []]])),Func ("UnificationSpec","eqsToSubst") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("UnificationSpec","Term") [],TCons ("UnificationSpec","Term") []]]) (TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("UnificationSpec","Term") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("UnificationSpec","emptySubst") []),Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Case  Rigid (Var 4) [Branch (Pattern ("UnificationSpec","TermVar") [6]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("UnificationSpec","extendSubst") [],Comb FuncCall ("UnificationSpec","eqsToSubst") [Var 3]],Var 6],Var 5]),Branch (Pattern ("UnificationSpec","TermCons") [7,8]) (Case  Rigid (Var 5) [Branch (Pattern ("UnificationSpec","TermVar") [9]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("UnificationSpec","extendSubst") [],Comb FuncCall ("UnificationSpec","eqsToSubst") [Var 3]],Var 9],Var 4]),Branch (Pattern ("UnificationSpec","TermCons") [10,11]) (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Prelude","error") [],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'q'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'T'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'S'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'b'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]],Comb FuncCall ("Prelude","show") [Comb ConsCall ("Prelude","(,)") [Var 4,Var 5]]]])])])])])),Func ("UnificationSpec","unify'") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("UnificationSpec","Term") [],TCons ("UnificationSpec","Term") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("UnificationSpec","Term") [],TCons ("UnificationSpec","Term") []]]) (TCons ("Prelude","Either") [TCons ("UnificationSpec","UnificationError") [],TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("UnificationSpec","Term") [],TCons ("UnificationSpec","Term") []]]]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","Right") [Var 1]),Branch (Pattern ("Prelude",":") [3,4]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Case  Flex (Var 5) [Branch (Pattern ("UnificationSpec","TermVar") [7]) (Case  Flex (Var 6) [Branch (Pattern ("UnificationSpec","TermCons") [8,9]) (Comb FuncCall ("UnificationSpec","elim") [Var 1,Var 7,Var 6,Var 4]),Branch (Pattern ("UnificationSpec","TermVar") [10]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 7,Var 10]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("UnificationSpec","unify'") [Var 1,Var 4]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("UnificationSpec","elim") [Var 1,Var 7,Var 6,Var 4]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])]),Branch (Pattern ("UnificationSpec","TermCons") [11,12]) (Case  Flex (Var 6) [Branch (Pattern ("UnificationSpec","TermVar") [13]) (Comb FuncCall ("UnificationSpec","elim") [Var 1,Var 13,Var 5,Var 4]),Branch (Pattern ("UnificationSpec","TermCons") [14,15]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 11,Var 14]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("UnificationSpec","unify'") [Var 1,Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","zip") [Var 12,Var 15],Var 4]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","Left") [Comb ConsCall ("UnificationSpec","Clash") [Var 5,Var 6]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])])])])),Func ("UnificationSpec","elim") 4 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("UnificationSpec","Term") [],TCons ("UnificationSpec","Term") []]]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("UnificationSpec","Term") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("UnificationSpec","Term") [],TCons ("UnificationSpec","Term") []]]) (TCons ("Prelude","Either") [TCons ("UnificationSpec","UnificationError") [],TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("UnificationSpec","Term") [],TCons ("UnificationSpec","Term") []]]]))))) (Rule [1,2,3,4] (Let [(5,Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("UnificationSpec","TermVar") [Var 2],Var 3],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("UnificationSpec","elim._#lambda3") [Var 2,Var 3],Var 1]])] (Case  Rigid (Comb FuncCall ("UnificationSpec","dependsOn") [Comb ConsCall ("UnificationSpec","TermVar") [Var 2],Var 3]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","Left") [Comb ConsCall ("UnificationSpec","OccurCheck") [Var 2,Var 3]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("UnificationSpec","unify'") [Var 5,Comb FuncCall ("UnificationSpec","substitute'") [Var 2,Var 3,Var 4]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])]))),Func ("UnificationSpec","elim._#lambda3") 3 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("UnificationSpec","Term") []) (FuncType (TCons ("Prelude","(,)") [TCons ("UnificationSpec","Term") [],TCons ("UnificationSpec","Term") []]) (TCons ("Prelude","(,)") [TCons ("UnificationSpec","Term") [],TCons ("UnificationSpec","Term") []])))) (Rule [1,2,3] (Case  Flex (Var 3) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb ConsCall ("Prelude","(,)") [Var 4,Comb FuncCall ("UnificationSpec","termSubstitute'") [Var 1,Var 2,Var 5]])])),Func ("UnificationSpec","termSubstitute'") 3 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("UnificationSpec","Term") []) (FuncType (TCons ("UnificationSpec","Term") []) (TCons ("UnificationSpec","Term") [])))) (Rule [1,2,3] (Case  Flex (Var 3) [Branch (Pattern ("UnificationSpec","TermVar") [4]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 4,Var 1]) [Branch (Pattern ("Prelude","True") []) (Var 2),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Var 3),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])]),Branch (Pattern ("UnificationSpec","TermCons") [5,6]) (Comb ConsCall ("UnificationSpec","TermCons") [Var 5,Comb FuncCall ("UnificationSpec","termsSubstitute'") [Var 1,Var 2,Var 6]])])),Func ("UnificationSpec","termsSubstitute'") 3 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("UnificationSpec","Term") []) (FuncType (TCons ("Prelude","[]") [TCons ("UnificationSpec","Term") []]) (TCons ("Prelude","[]") [TCons ("UnificationSpec","Term") []])))) (Rule [1,2,3] (Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("UnificationSpec","termSubstitute'") [Var 1,Var 2],Var 3])),Func ("UnificationSpec","substitute'") 3 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("UnificationSpec","Term") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("UnificationSpec","Term") [],TCons ("UnificationSpec","Term") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("UnificationSpec","Term") [],TCons ("UnificationSpec","Term") []]])))) (Rule [1,2,3] (Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("UnificationSpec","substituteSingle'") [Var 1,Var 2],Var 3])),Func ("UnificationSpec","substituteSingle'") 3 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("UnificationSpec","Term") []) (FuncType (TCons ("Prelude","(,)") [TCons ("UnificationSpec","Term") [],TCons ("UnificationSpec","Term") []]) (TCons ("Prelude","(,)") [TCons ("UnificationSpec","Term") [],TCons ("UnificationSpec","Term") []])))) (Rule [1,2,3] (Case  Flex (Var 3) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("UnificationSpec","termSubstitute'") [Var 1,Var 2,Var 4],Comb FuncCall ("UnificationSpec","termSubstitute'") [Var 1,Var 2,Var 5]])])),Func ("UnificationSpec","dependsOn") 2 Private (FuncType (TCons ("UnificationSpec","Term") []) (FuncType (TCons ("UnificationSpec","Term") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","and") [],Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","not") [Comb FuncCall ("Prelude","==") [Var 1,Var 2]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("UnificationSpec","dependsOn.dependsOnRecurse.65") [Var 1,Var 2],Comb ConsCall ("Prelude","[]") []]]])),Func ("UnificationSpec","dependsOn.dependsOnRecurse.65") 2 Private (FuncType (TCons ("UnificationSpec","Term") []) (FuncType (TCons ("UnificationSpec","Term") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("UnificationSpec","TermVar") [3]) (Comb FuncCall ("Prelude","==") [Var 1,Var 2]),Branch (Pattern ("UnificationSpec","TermCons") [4,5]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","any") [Comb (FuncPartCall 1) ("Prelude","id") []],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("UnificationSpec","dependsOn.dependsOnRecurse.65") [Var 1],Var 5]])]))] []