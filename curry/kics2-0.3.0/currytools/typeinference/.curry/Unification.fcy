Prog "Unification" ["FiniteMap","List","Prelude","UnificationSpec"] [TypeSyn ("Unification","RefTable") Private [] (TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("Unification","RTerm") []]),TypeSyn ("Unification","REq") Private [] (TCons ("Prelude","(,)") [TCons ("Unification","RTerm") [],TCons ("Unification","RTerm") []]),TypeSyn ("Unification","REqs") Private [] (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Unification","RTerm") [],TCons ("Unification","RTerm") []]]),Type ("Unification","RTerm") Private [] [Cons ("Unification","RTermCons") 2 Private [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Unification","RTerm") []]],Cons ("Unification","RTermVar") 1 Private [TCons ("Prelude","Int") []],Cons ("Unification","Ref") 1 Private [TCons ("Prelude","Int") []]]] [Func ("Unification","unify") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("UnificationSpec","Term") [],TCons ("UnificationSpec","Term") []]]) (TCons ("Prelude","Either") [TCons ("UnificationSpec","UnificationError") [],TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("UnificationSpec","Term") []]])) (Rule [1] (Let [(2,Comb FuncCall ("Unification","termEqsToREqs") [Var 1]),(3,Comb FuncCall ("Unification","unify._#selFP2#r") [Var 2]),(4,Comb FuncCall ("Unification","unify._#selFP3#rts") [Var 2])] (Case  Rigid (Comb FuncCall ("Unification","unify'") [Var 3,Var 4,Comb ConsCall ("Prelude","[]") []]) [Branch (Pattern ("Prelude","Right") [5]) (Case  Rigid (Var 5) [Branch (Pattern ("Prelude","(,)") [6,7]) (Comb ConsCall ("Prelude","Right") [Comb FuncCall ("Unification","eqsToSubst") [Var 6,Var 7]])]),Branch (Pattern ("Prelude","Left") [8]) (Comb ConsCall ("Prelude","Left") [Var 8])]))),Func ("Unification","unify._#selFP2#r") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("Unification","RTerm") []],TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Unification","RTerm") [],TCons ("Unification","RTerm") []]]]) (TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("Unification","RTerm") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("Unification","unify._#selFP3#rts") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("Unification","RTerm") []],TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Unification","RTerm") [],TCons ("Unification","RTerm") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Unification","RTerm") [],TCons ("Unification","RTerm") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("Unification","termEqsToREqs") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("UnificationSpec","Term") [],TCons ("UnificationSpec","Term") []]]) (TCons ("Prelude","(,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("Unification","RTerm") []],TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Unification","RTerm") [],TCons ("Unification","RTerm") []]]])) (Rule [1] (Comb FuncCall ("List","mapAccumL") [Comb (FuncPartCall 2) ("Unification","termEqToREq") [],Comb FuncCall ("FiniteMap","emptyFM") [Comb (FuncPartCall 2) ("Prelude","<") []],Var 1])),Func ("Unification","termEqToREq") 2 Private (FuncType (TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("Unification","RTerm") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("UnificationSpec","Term") [],TCons ("UnificationSpec","Term") []]) (TCons ("Prelude","(,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("Unification","RTerm") []],TCons ("Prelude","(,)") [TCons ("Unification","RTerm") [],TCons ("Unification","RTerm") []]]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [3,4]) (Let [(5,Comb FuncCall ("Unification","termToRTerm") [Var 1,Var 3]),(6,Comb FuncCall ("Unification","termEqToREq._#selFP8#r1") [Var 5]),(7,Comb FuncCall ("Unification","termEqToREq._#selFP9#a'") [Var 5]),(8,Comb FuncCall ("Unification","termToRTerm") [Var 6,Var 4]),(9,Comb FuncCall ("Unification","termEqToREq._#selFP6#r2") [Var 8]),(10,Comb FuncCall ("Unification","termEqToREq._#selFP7#b'") [Var 8])] (Comb ConsCall ("Prelude","(,)") [Var 9,Comb ConsCall ("Prelude","(,)") [Var 7,Var 10]]))])),Func ("Unification","termEqToREq._#selFP8#r1") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("Unification","RTerm") []],TCons ("Unification","RTerm") []]) (TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("Unification","RTerm") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("Unification","termEqToREq._#selFP9#a'") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("Unification","RTerm") []],TCons ("Unification","RTerm") []]) (TCons ("Unification","RTerm") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("Unification","termEqToREq._#selFP6#r2") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("Unification","RTerm") []],TCons ("Unification","RTerm") []]) (TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("Unification","RTerm") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("Unification","termEqToREq._#selFP7#b'") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("Unification","RTerm") []],TCons ("Unification","RTerm") []]) (TCons ("Unification","RTerm") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("Unification","termToRTerm") 2 Private (FuncType (TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("Unification","RTerm") []]) (FuncType (TCons ("UnificationSpec","Term") []) (TCons ("Prelude","(,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("Unification","RTerm") []],TCons ("Unification","RTerm") []]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("UnificationSpec","TermVar") [3]) (Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("FiniteMap","addToFM") [Var 1,Var 3,Comb ConsCall ("Unification","RTermVar") [Var 3]],Comb ConsCall ("Unification","Ref") [Var 3]]),Branch (Pattern ("UnificationSpec","TermCons") [4,5]) (Let [(6,Comb FuncCall ("List","mapAccumL") [Comb (FuncPartCall 2) ("Unification","termToRTerm") [],Var 1,Var 5]),(7,Comb FuncCall ("Unification","termToRTerm._#selFP11#r'") [Var 6]),(8,Comb FuncCall ("Unification","termToRTerm._#selFP12#l'") [Var 6])] (Comb ConsCall ("Prelude","(,)") [Var 7,Comb ConsCall ("Unification","RTermCons") [Var 4,Var 8]]))])),Func ("Unification","termToRTerm._#selFP11#r'") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("Unification","RTerm") []],TCons ("Prelude","[]") [TCons ("Unification","RTerm") []]]) (TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("Unification","RTerm") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("Unification","termToRTerm._#selFP12#l'") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("Unification","RTerm") []],TCons ("Prelude","[]") [TCons ("Unification","RTerm") []]]) (TCons ("Prelude","[]") [TCons ("Unification","RTerm") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("Unification","eqsToSubst") 2 Private (FuncType (TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("Unification","RTerm") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Unification","RTerm") [],TCons ("Unification","RTerm") []]]) (TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("UnificationSpec","Term") []]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("UnificationSpec","emptySubst") []),Branch (Pattern ("Prelude",":") [3,4]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Case  Rigid (Var 5) [Branch (Pattern ("Unification","Ref") [7]) (Comb FuncCall ("Unification","eqsToSubst") [Var 1,Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Unification","deref") [Var 1,Var 5],Var 6],Var 4]]),Branch (Pattern ("Unification","RTermVar") [8]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("UnificationSpec","extendSubst") [],Comb FuncCall ("Unification","eqsToSubst") [Var 1,Var 4]],Var 8],Comb FuncCall ("Unification","rTermToTerm") [Var 1,Var 6]]),Branch (Pattern ("Unification","RTermCons") [9,10]) (Case  Rigid (Var 6) [Branch (Pattern ("Unification","RTermVar") [11]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("UnificationSpec","extendSubst") [],Comb FuncCall ("Unification","eqsToSubst") [Var 1,Var 4]],Var 11],Comb FuncCall ("Unification","rTermToTerm") [Var 1,Var 5]]),Branch (Pattern ("Unification","Ref") [12]) (Comb FuncCall ("Unification","eqsToSubst") [Var 1,Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Var 5,Comb FuncCall ("Unification","deref") [Var 1,Var 6]],Var 4]]),Branch (Pattern ("Unification","RTermCons") [13,14]) (Comb FuncCall ("Unification","eqsToSubst") [Var 1,Var 4])])])])])),Func ("Unification","rTermToTerm") 2 Private (FuncType (TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("Unification","RTerm") []]) (FuncType (TCons ("Unification","RTerm") []) (TCons ("UnificationSpec","Term") []))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Unification","Ref") [3]) (Comb FuncCall ("Unification","rTermToTerm") [Var 1,Comb FuncCall ("Unification","deref") [Var 1,Var 2]]),Branch (Pattern ("Unification","RTermVar") [4]) (Comb ConsCall ("UnificationSpec","TermVar") [Var 4]),Branch (Pattern ("Unification","RTermCons") [5,6]) (Comb ConsCall ("UnificationSpec","TermCons") [Var 5,Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Unification","rTermToTerm") [Var 1],Var 6]])])),Func ("Unification","deref") 2 Private (FuncType (TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("Unification","RTerm") []]) (FuncType (TCons ("Unification","RTerm") []) (TCons ("Unification","RTerm") []))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Unification","Ref") [3]) (Case  Rigid (Comb FuncCall ("FiniteMap","lookupFM") [Var 1,Var 3]) [Branch (Pattern ("Prelude","Nothing") []) (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Prelude","error") [],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'U'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]],Comb FuncCall ("Prelude","show") [Var 3]]]),Branch (Pattern ("Prelude","Just") [4]) (Case  Rigid (Var 4) [Branch (Pattern ("Unification","RTermVar") [5]) (Var 4),Branch (Pattern ("Unification","RTermCons") [6,7]) (Var 4),Branch (Pattern ("Unification","Ref") [8]) (Comb FuncCall ("Unification","deref") [Var 1,Var 4])])]),Branch (Pattern ("Unification","RTermVar") [9]) (Var 2),Branch (Pattern ("Unification","RTermCons") [10,11]) (Var 2)])),Func ("Unification","unify'") 3 Private (FuncType (TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("Unification","RTerm") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Unification","RTerm") [],TCons ("Unification","RTerm") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Unification","RTerm") [],TCons ("Unification","RTerm") []]]) (TCons ("Prelude","Either") [TCons ("UnificationSpec","UnificationError") [],TCons ("Prelude","(,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("Unification","RTerm") []],TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Unification","RTerm") [],TCons ("Unification","RTerm") []]]]])))) (Rule [1,2,3] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","Right") [Comb ConsCall ("Prelude","(,)") [Var 1,Var 3]]),Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 4) [Branch (Pattern ("Prelude","(,)") [6,7]) (Case  Flex (Var 6) [Branch (Pattern ("Unification","RTermVar") [8]) (Case  Flex (Var 7) [Branch (Pattern ("Unification","RTermCons") [9,10]) (Comb FuncCall ("Unification","elim") [Var 1,Var 8,Var 7,Var 5,Var 3]),Branch (Pattern ("Unification","RTermVar") [11]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 8,Var 11]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Unification","unify'") [Var 1,Var 5,Var 3]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Unification","elim") [Var 1,Var 8,Var 7,Var 5,Var 3]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])]),Branch (Pattern ("Unification","Ref") [12]) (Comb FuncCall ("Unification","unify'") [Var 1,Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Var 6,Comb FuncCall ("Unification","deref") [Var 1,Var 7]],Var 5],Var 3])]),Branch (Pattern ("Unification","RTermCons") [13,14]) (Case  Flex (Var 7) [Branch (Pattern ("Unification","RTermVar") [15]) (Comb FuncCall ("Unification","elim") [Var 1,Var 15,Var 6,Var 5,Var 3]),Branch (Pattern ("Unification","RTermCons") [16,17]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 13,Var 16]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Unification","unify'") [Var 1,Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","zip") [Var 14,Var 17],Var 5],Var 3]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","Left") [Comb ConsCall ("UnificationSpec","Clash") [Comb FuncCall ("Unification","rTermToTerm") [Var 1,Var 6],Comb FuncCall ("Unification","rTermToTerm") [Var 1,Var 7]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])]),Branch (Pattern ("Unification","Ref") [18]) (Comb FuncCall ("Unification","unify'") [Var 1,Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Var 6,Comb FuncCall ("Unification","deref") [Var 1,Var 7]],Var 5],Var 3])]),Branch (Pattern ("Unification","Ref") [19]) (Case  Flex (Var 7) [Branch (Pattern ("Unification","RTermVar") [20]) (Comb FuncCall ("Unification","unify'") [Var 1,Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Unification","deref") [Var 1,Var 6],Var 7],Var 5],Var 3]),Branch (Pattern ("Unification","RTermCons") [21,22]) (Comb FuncCall ("Unification","unify'") [Var 1,Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Unification","deref") [Var 1,Var 6],Var 7],Var 5],Var 3]),Branch (Pattern ("Unification","Ref") [23]) (Comb FuncCall ("Unification","unify'") [Var 1,Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Unification","deref") [Var 1,Var 6],Comb FuncCall ("Unification","deref") [Var 1,Var 7]],Var 5],Var 3])])])])])),Func ("Unification","elim") 5 Private (FuncType (TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("Unification","RTerm") []]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Unification","RTerm") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Unification","RTerm") [],TCons ("Unification","RTerm") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Unification","RTerm") [],TCons ("Unification","RTerm") []]]) (TCons ("Prelude","Either") [TCons ("UnificationSpec","UnificationError") [],TCons ("Prelude","(,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("Unification","RTerm") []],TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Unification","RTerm") [],TCons ("Unification","RTerm") []]]]])))))) (Rule [1,2,3,4,5] (Case  Rigid (Comb FuncCall ("Unification","dependsOn") [Var 1,Comb ConsCall ("Unification","RTermVar") [Var 2],Var 3]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","Left") [Comb ConsCall ("UnificationSpec","OccurCheck") [Var 2,Comb FuncCall ("Unification","rTermToTerm") [Var 1,Var 3]]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 3) [Branch (Pattern ("Unification","RTermVar") [6]) (Comb FuncCall ("Unification","unify'") [Comb FuncCall ("FiniteMap","addToFM") [Var 1,Var 2,Comb ConsCall ("Unification","Ref") [Var 6]],Var 4,Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Unification","RTermVar") [Var 2],Comb ConsCall ("Unification","Ref") [Var 6]],Var 5]]),Branch (Pattern ("Unification","RTermCons") [7,8]) (Comb FuncCall ("Unification","unify'") [Comb FuncCall ("FiniteMap","addToFM") [Var 1,Var 2,Var 3],Var 4,Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Unification","RTermVar") [Var 2],Var 3],Var 5]]),Branch (Pattern ("Unification","Ref") [9]) (Comb FuncCall ("Prelude","failed") [])]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])),Func ("Unification","dependsOn") 3 Private (FuncType (TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("Unification","RTerm") []]) (FuncType (TCons ("Unification","RTerm") []) (FuncType (TCons ("Unification","RTerm") []) (TCons ("Prelude","Bool") [])))) (Rule [1,2,3] (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","/=") [Var 2,Var 3],Comb FuncCall ("Unification","dependsOn.dependsOnRecurse.122") [Var 2,Var 1,Var 3]])),Func ("Unification","dependsOn.dependsOnRecurse.122") 3 Private (FuncType (TCons ("Unification","RTerm") []) (FuncType (TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("Unification","RTerm") []]) (FuncType (TCons ("Unification","RTerm") []) (TCons ("Prelude","Bool") [])))) (Rule [1,2,3] (Case  Flex (Var 3) [Branch (Pattern ("Unification","RTermVar") [4]) (Comb FuncCall ("Prelude","==") [Var 1,Var 3]),Branch (Pattern ("Unification","RTermCons") [5,6]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","or") [],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Unification","dependsOn.dependsOnRecurse.122") [Var 1,Var 2],Var 6]]),Branch (Pattern ("Unification","Ref") [7]) (Comb FuncCall ("Prelude","==") [Comb FuncCall ("Unification","deref") [Var 2,Var 3],Var 1])]))] []