Prog "ErrorState" ["Prelude"] [TypeSyn ("ErrorState","ES") Public [0,1,2] (FuncType (TVar 1) (TCons ("Prelude","Either") [TVar 0,TCons ("Prelude","(,)") [TVar 2,TVar 1]]))] [Func ("ErrorState","evalES") 2 Public (FuncType (FuncType (TVar 0) (TCons ("Prelude","Either") [TVar 1,TCons ("Prelude","(,)") [TVar 2,TVar 0]])) (FuncType (TVar 0) (TCons ("Prelude","Either") [TVar 1,TVar 2]))) (Rule [1,2] (Case  Rigid (Comb FuncCall ("Prelude","apply") [Var 1,Var 2]) [Branch (Pattern ("Prelude","Left") [3]) (Comb ConsCall ("Prelude","Left") [Var 3]),Branch (Pattern ("Prelude","Right") [4]) (Case  Rigid (Var 4) [Branch (Pattern ("Prelude","(,)") [5,6]) (Comb ConsCall ("Prelude","Right") [Var 5])])])),Func ("ErrorState","returnES") 2 Public (FuncType (TVar 0) (FuncType (TVar 1) (TCons ("Prelude","Either") [TVar 2,TCons ("Prelude","(,)") [TVar 0,TVar 1]]))) (Rule [1,2] (Comb ConsCall ("Prelude","Right") [Comb ConsCall ("Prelude","(,)") [Var 1,Var 2]])),Func ("ErrorState",">+=") 3 Public (FuncType (FuncType (TVar 0) (TCons ("Prelude","Either") [TVar 1,TCons ("Prelude","(,)") [TVar 2,TVar 0]])) (FuncType (FuncType (TVar 2) (FuncType (TVar 0) (TCons ("Prelude","Either") [TVar 1,TCons ("Prelude","(,)") [TVar 3,TVar 0]]))) (FuncType (TVar 0) (TCons ("Prelude","Either") [TVar 1,TCons ("Prelude","(,)") [TVar 3,TVar 0]])))) (Rule [1,2,3] (Case  Rigid (Comb FuncCall ("Prelude","apply") [Var 1,Var 3]) [Branch (Pattern ("Prelude","Left") [4]) (Comb ConsCall ("Prelude","Left") [Var 4]),Branch (Pattern ("Prelude","Right") [5]) (Case  Rigid (Var 5) [Branch (Pattern ("Prelude","(,)") [6,7]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 2,Var 6],Var 7])])])),Func ("ErrorState",">+") 2 Public (FuncType (FuncType (TVar 0) (TCons ("Prelude","Either") [TVar 1,TCons ("Prelude","(,)") [TVar 2,TVar 0]])) (FuncType (FuncType (TVar 0) (TCons ("Prelude","Either") [TVar 1,TCons ("Prelude","(,)") [TVar 3,TVar 0]])) (FuncType (TVar 0) (TCons ("Prelude","Either") [TVar 1,TCons ("Prelude","(,)") [TVar 3,TVar 0]])))) (Rule [1,2] (Comb (FuncPartCall 1) ("ErrorState",">+=") [Var 1,Comb (FuncPartCall 1) ("ErrorState",">+._#lambda3") [Var 2]])),Func ("ErrorState",">+._#lambda3") 2 Private (FuncType (FuncType (TVar 56) (TCons ("Prelude","Either") [TVar 57,TCons ("Prelude","(,)") [TVar 59,TVar 56]])) (FuncType (TVar 60) (FuncType (TVar 56) (TCons ("Prelude","Either") [TVar 57,TCons ("Prelude","(,)") [TVar 59,TVar 56]])))) (Rule [1,2] (Var 1)),Func ("ErrorState","failES") 2 Public (FuncType (TVar 0) (FuncType (TVar 1) (TCons ("Prelude","Either") [TVar 0,TCons ("Prelude","(,)") [TVar 2,TVar 1]]))) (Rule [1,2] (Comb ConsCall ("Prelude","Left") [Var 1])),Func ("ErrorState","gets") 1 Public (FuncType (TVar 0) (TCons ("Prelude","Either") [TVar 1,TCons ("Prelude","(,)") [TVar 0,TVar 0]])) (Rule [1] (Comb ConsCall ("Prelude","Right") [Comb ConsCall ("Prelude","(,)") [Var 1,Var 1]])),Func ("ErrorState","puts") 2 Public (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Either") [TVar 1,TCons ("Prelude","(,)") [TCons ("Prelude","()") [],TVar 0]]))) (Rule [1,2] (Comb ConsCall ("Prelude","Right") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","()") [],Var 1]])),Func ("ErrorState","modify") 2 Public (FuncType (FuncType (TVar 0) (TVar 0)) (FuncType (TVar 0) (TCons ("Prelude","Either") [TVar 1,TCons ("Prelude","(,)") [TCons ("Prelude","()") [],TVar 0]]))) (Rule [1,2] (Comb ConsCall ("Prelude","Right") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","()") [],Comb FuncCall ("Prelude","apply") [Var 1,Var 2]]])),Func ("ErrorState","liftES") 2 Public (FuncType (FuncType (TVar 0) (TVar 1)) (FuncType (FuncType (TVar 2) (TCons ("Prelude","Either") [TVar 3,TCons ("Prelude","(,)") [TVar 0,TVar 2]])) (FuncType (TVar 2) (TCons ("Prelude","Either") [TVar 3,TCons ("Prelude","(,)") [TVar 1,TVar 2]])))) (Rule [1,2] (Comb (FuncPartCall 1) ("ErrorState",">+=") [Var 2,Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 2) ("ErrorState","returnES") [],Var 1]])),Func ("ErrorState","liftES2") 3 Public (FuncType (FuncType (TVar 0) (FuncType (TVar 1) (TVar 2))) (FuncType (FuncType (TVar 3) (TCons ("Prelude","Either") [TVar 4,TCons ("Prelude","(,)") [TVar 0,TVar 3]])) (FuncType (FuncType (TVar 3) (TCons ("Prelude","Either") [TVar 4,TCons ("Prelude","(,)") [TVar 1,TVar 3]])) (FuncType (TVar 3) (TCons ("Prelude","Either") [TVar 4,TCons ("Prelude","(,)") [TVar 2,TVar 3]]))))) (Rule [1,2,3] (Comb (FuncPartCall 1) ("ErrorState",">+=") [Var 2,Comb (FuncPartCall 1) ("ErrorState","liftES2._#lambda4") [Var 1,Var 3]])),Func ("ErrorState","liftES2._#lambda4") 3 Private (FuncType (FuncType (TVar 115) (FuncType (TVar 120) (TVar 127))) (FuncType (FuncType (TVar 122) (TCons ("Prelude","Either") [TVar 123,TCons ("Prelude","(,)") [TVar 120,TVar 122]])) (FuncType (TVar 115) (FuncType (TVar 122) (TCons ("Prelude","Either") [TVar 123,TCons ("Prelude","(,)") [TVar 127,TVar 122]]))))) (Rule [1,2,3] (Comb (FuncPartCall 1) ("ErrorState",">+=") [Var 2,Comb (FuncPartCall 1) ("ErrorState","liftES2._#lambda4._#lambda5") [Var 1,Var 3]])),Func ("ErrorState","liftES2._#lambda4._#lambda5") 3 Private (FuncType (FuncType (TVar 115) (FuncType (TVar 120) (TVar 127))) (FuncType (TVar 115) (FuncType (TVar 120) (FuncType (TVar 252) (TCons ("Prelude","Either") [TVar 253,TCons ("Prelude","(,)") [TVar 127,TVar 252]]))))) (Rule [1,2,3] (Comb (FuncPartCall 1) ("ErrorState","returnES") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 1,Var 2],Var 3]])),Func ("ErrorState","liftES3") 4 Public (FuncType (FuncType (TVar 0) (FuncType (TVar 1) (FuncType (TVar 2) (TVar 3)))) (FuncType (FuncType (TVar 4) (TCons ("Prelude","Either") [TVar 5,TCons ("Prelude","(,)") [TVar 0,TVar 4]])) (FuncType (FuncType (TVar 4) (TCons ("Prelude","Either") [TVar 5,TCons ("Prelude","(,)") [TVar 1,TVar 4]])) (FuncType (FuncType (TVar 4) (TCons ("Prelude","Either") [TVar 5,TCons ("Prelude","(,)") [TVar 2,TVar 4]])) (FuncType (TVar 4) (TCons ("Prelude","Either") [TVar 5,TCons ("Prelude","(,)") [TVar 3,TVar 4]])))))) (Rule [1,2,3,4] (Comb (FuncPartCall 1) ("ErrorState",">+=") [Var 2,Comb (FuncPartCall 1) ("ErrorState","liftES3._#lambda6") [Var 1,Var 3,Var 4]])),Func ("ErrorState","liftES3._#lambda6") 4 Private (FuncType (FuncType (TVar 142) (FuncType (TVar 147) (FuncType (TVar 152) (TVar 161)))) (FuncType (FuncType (TVar 154) (TCons ("Prelude","Either") [TVar 155,TCons ("Prelude","(,)") [TVar 147,TVar 154]])) (FuncType (FuncType (TVar 154) (TCons ("Prelude","Either") [TVar 155,TCons ("Prelude","(,)") [TVar 152,TVar 154]])) (FuncType (TVar 142) (FuncType (TVar 154) (TCons ("Prelude","Either") [TVar 155,TCons ("Prelude","(,)") [TVar 161,TVar 154]])))))) (Rule [1,2,3,4] (Comb (FuncPartCall 1) ("ErrorState",">+=") [Var 2,Comb (FuncPartCall 1) ("ErrorState","liftES3._#lambda6._#lambda7") [Var 1,Var 3,Var 4]])),Func ("ErrorState","liftES3._#lambda6._#lambda7") 4 Private (FuncType (FuncType (TVar 142) (FuncType (TVar 147) (FuncType (TVar 152) (TVar 161)))) (FuncType (FuncType (TVar 154) (TCons ("Prelude","Either") [TVar 155,TCons ("Prelude","(,)") [TVar 152,TVar 154]])) (FuncType (TVar 142) (FuncType (TVar 147) (FuncType (TVar 154) (TCons ("Prelude","Either") [TVar 155,TCons ("Prelude","(,)") [TVar 161,TVar 154]])))))) (Rule [1,2,3,4] (Comb (FuncPartCall 1) ("ErrorState",">+=") [Var 2,Comb (FuncPartCall 1) ("ErrorState","liftES3._#lambda6._#lambda7._#lambda8") [Var 1,Var 3,Var 4]])),Func ("ErrorState","liftES3._#lambda6._#lambda7._#lambda8") 4 Private (FuncType (FuncType (TVar 142) (FuncType (TVar 147) (FuncType (TVar 152) (TVar 161)))) (FuncType (TVar 142) (FuncType (TVar 147) (FuncType (TVar 152) (FuncType (TVar 254) (TCons ("Prelude","Either") [TVar 255,TCons ("Prelude","(,)") [TVar 161,TVar 254]])))))) (Rule [1,2,3,4] (Comb (FuncPartCall 1) ("ErrorState","returnES") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 1,Var 2],Var 3],Var 4]])),Func ("ErrorState","mapES") 2 Public (FuncType (FuncType (TVar 0) (FuncType (TVar 1) (TCons ("Prelude","Either") [TVar 2,TCons ("Prelude","(,)") [TVar 3,TVar 1]]))) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TVar 1) (TCons ("Prelude","Either") [TVar 2,TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 3],TVar 1]])))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Comb (FuncPartCall 1) ("ErrorState","returnES") [Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude",":") [3,4]) (Comb (FuncPartCall 1) ("ErrorState",">+=") [Comb FuncCall ("Prelude","apply") [Var 1,Var 3],Comb (FuncPartCall 1) ("ErrorState","mapES._#lambda9") [Var 1,Var 4]])])),Func ("ErrorState","mapES._#lambda9") 3 Private (FuncType (FuncType (TVar 174) (FuncType (TVar 193) (TCons ("Prelude","Either") [TVar 194,TCons ("Prelude","(,)") [TVar 182,TVar 193]]))) (FuncType (TCons ("Prelude","[]") [TVar 174]) (FuncType (TVar 182) (FuncType (TVar 193) (TCons ("Prelude","Either") [TVar 194,TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 182],TVar 193]]))))) (Rule [1,2,3] (Comb (FuncPartCall 1) ("ErrorState",">+=") [Comb FuncCall ("ErrorState","mapES") [Var 1,Var 2],Comb (FuncPartCall 1) ("ErrorState","mapES._#lambda9._#lambda10") [Var 3]])),Func ("ErrorState","mapES._#lambda9._#lambda10") 2 Private (FuncType (TVar 182) (FuncType (TCons ("Prelude","[]") [TVar 182]) (FuncType (TVar 256) (TCons ("Prelude","Either") [TVar 257,TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 182],TVar 256]])))) (Rule [1,2] (Comb (FuncPartCall 1) ("ErrorState","returnES") [Comb ConsCall ("Prelude",":") [Var 1,Var 2]])),Func ("ErrorState","concatMapES") 2 Public (FuncType (FuncType (TVar 0) (FuncType (TVar 1) (TCons ("Prelude","Either") [TVar 2,TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 3],TVar 1]]))) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TVar 1) (TCons ("Prelude","Either") [TVar 2,TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 3],TVar 1]])))) (Rule [1,2] (Comb FuncCall ("ErrorState","liftES") [Comb (FuncPartCall 1) ("Prelude","concat") [],Comb FuncCall ("ErrorState","mapES") [Var 1,Var 2]])),Func ("ErrorState","mapAccumES") 3 Public (FuncType (FuncType (TVar 0) (FuncType (TVar 1) (FuncType (TVar 2) (TCons ("Prelude","Either") [TVar 3,TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TVar 0,TVar 4],TVar 2]])))) (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TVar 1]) (FuncType (TVar 2) (TCons ("Prelude","Either") [TVar 3,TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TVar 4]],TVar 2]]))))) (Rule [1,2,3] (Case  Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Comb (FuncPartCall 1) ("ErrorState","returnES") [Comb ConsCall ("Prelude","(,)") [Var 2,Comb ConsCall ("Prelude","[]") []]]),Branch (Pattern ("Prelude",":") [4,5]) (Comb (FuncPartCall 1) ("ErrorState",">+=") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 1,Var 2],Var 4],Comb (FuncPartCall 1) ("ErrorState","mapAccumES._#lambda11") [Var 1,Var 5]])])),Func ("ErrorState","mapAccumES._#lambda11") 3 Private (FuncType (FuncType (TVar 247) (FuncType (TVar 226) (FuncType (TVar 250) (TCons ("Prelude","Either") [TVar 251,TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TVar 247,TVar 237],TVar 250]])))) (FuncType (TCons ("Prelude","[]") [TVar 226]) (FuncType (TCons ("Prelude","(,)") [TVar 247,TVar 237]) (FuncType (TVar 250) (TCons ("Prelude","Either") [TVar 251,TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TVar 247,TCons ("Prelude","[]") [TVar 237]],TVar 250]]))))) (Rule [1,2,3] (Case  Flex (Var 3) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb (FuncPartCall 1) ("ErrorState",">+=") [Comb FuncCall ("ErrorState","mapAccumES") [Var 1,Var 4,Var 2],Comb (FuncPartCall 1) ("ErrorState","mapAccumES._#lambda11._#lambda12") [Var 5]])])),Func ("ErrorState","mapAccumES._#lambda11._#lambda12") 2 Private (FuncType (TVar 237) (FuncType (TCons ("Prelude","(,)") [TVar 247,TCons ("Prelude","[]") [TVar 237]]) (FuncType (TVar 258) (TCons ("Prelude","Either") [TVar 259,TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TVar 247,TCons ("Prelude","[]") [TVar 237]],TVar 258]])))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb (FuncPartCall 1) ("ErrorState","returnES") [Comb ConsCall ("Prelude","(,)") [Var 3,Comb ConsCall ("Prelude",":") [Var 1,Var 4]]])]))] []