Prog "Inference" ["AFCSubst","AnnotatedFlatCurry","AnnotatedFlatCurryGoodies","ErrorState","FiniteMap","FlatCurry","List","Prelude","Unification","UnificationSpec"] [TypeSyn ("Inference","TypeEnv") Public [] (TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("FlatCurry","TypeExpr") []]),TypeSyn ("Inference","TIM") Private [0] (FuncType (TCons ("Prelude","(,,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","Either") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","(,,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]]])),TypeSyn ("Inference","TypeEqs") Private [] (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("FlatCurry","TypeExpr") [],TCons ("FlatCurry","TypeExpr") []]]),TypeSyn ("Inference","NormState") Private [] (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") []]]),TypeSyn ("Inference","NormStateM") Private [0] (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") []]]) (TCons ("Prelude","Either") [TCons ("Prelude","()") [],TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") []]]]]))] [Func ("Inference","inferProg") 1 Public (FuncType (TCons ("FlatCurry","Prog") []) (TCons ("Prelude","IO") [TCons ("Prelude","Either") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("AnnotatedFlatCurry","AProg") [TCons ("FlatCurry","TypeExpr") []]]])) (Rule [1] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Inference","getTypeEnv") [Var 1],Comb (FuncPartCall 1) ("Inference","inferProg._#lambda1") [Var 1]])),Func ("Inference","inferProg._#lambda1") 2 Private (FuncType (TCons ("FlatCurry","Prog") []) (FuncType (TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("FlatCurry","TypeExpr") []]) (TCons ("Prelude","IO") [TCons ("Prelude","Either") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("AnnotatedFlatCurry","AProg") [TCons ("FlatCurry","TypeExpr") []]]]))) (Rule [1,2] (Comb FuncCall ("Prelude","return") [Comb FuncCall ("Inference","inferProgEnv") [Var 2,Var 1]])),Func ("Inference","inferProgFromProgEnv") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("FlatCurry","Prog") []]]) (FuncType (TCons ("FlatCurry","Prog") []) (TCons ("Prelude","Either") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("AnnotatedFlatCurry","AProg") [TCons ("FlatCurry","TypeExpr") []]]))) (Rule [1,2] (Case  Rigid (Comb FuncCall ("Inference","getTypeEnvFromProgEnv") [Var 1,Var 2]) [Branch (Pattern ("Prelude","Left") [3]) (Comb ConsCall ("Prelude","Left") [Var 3]),Branch (Pattern ("Prelude","Right") [4]) (Comb FuncCall ("Inference","inferProgEnv") [Var 4,Var 2])])),Func ("Inference","inferProgEnv") 2 Public (FuncType (TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("FlatCurry","TypeExpr") []]) (FuncType (TCons ("FlatCurry","Prog") []) (TCons ("Prelude","Either") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("AnnotatedFlatCurry","AProg") [TCons ("FlatCurry","TypeExpr") []]]))) (Rule [1,2] (Comb FuncCall ("ErrorState","evalES") [Comb (FuncPartCall 1) ("ErrorState",">+=") [Comb FuncCall ("Inference","annProg") [Var 2],Comb (FuncPartCall 1) ("Inference","inferAProg") []],Comb FuncCall ("Inference","initTIM") [Var 1]])),Func ("Inference","inferFunction") 2 Public (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("FlatCurry","Prog") []) (TCons ("Prelude","IO") [TCons ("Prelude","Either") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]]))) (Rule [1,2] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Inference","getTypeEnv") [Var 2],Comb (FuncPartCall 1) ("Inference","inferFunction._#lambda3") [Var 1,Var 2]])),Func ("Inference","inferFunction._#lambda3") 3 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("FlatCurry","Prog") []) (FuncType (TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("FlatCurry","TypeExpr") []]) (TCons ("Prelude","IO") [TCons ("Prelude","Either") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]])))) (Rule [1,2,3] (Comb FuncCall ("Prelude","return") [Comb FuncCall ("Inference","inferFunctionEnv") [Var 3,Var 1,Var 2]])),Func ("Inference","inferFunctionEnv") 3 Public (FuncType (TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("FlatCurry","TypeExpr") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("FlatCurry","Prog") []) (TCons ("Prelude","Either") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]])))) (Rule [1,2,3] (Case  Flex (Var 3) [Branch (Pattern ("FlatCurry","Prog") [4,5,6,7,8]) (Case  Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("List","find") [Comb (FuncPartCall 1) ("Inference","inferFunctionEnv.hasName.20") [Var 2]],Var 7]) [Branch (Pattern ("Prelude","Nothing") []) (Comb ConsCall ("Prelude","Left") [Comb ConsCall ("Prelude",":") [Lit (Charc  'N'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]),Branch (Pattern ("Prelude","Just") [9]) (Comb FuncCall ("ErrorState","evalES") [Comb (FuncPartCall 1) ("ErrorState",">+=") [Comb FuncCall ("Inference","annFunc") [Var 9],Comb (FuncPartCall 1) ("Inference","inferFunc") []],Comb FuncCall ("Inference","initTIM") [Var 1]])])])),Func ("Inference","inferFunctionEnv.hasName.20") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("FlatCurry","FuncDecl") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("FlatCurry","Func") [3,4,5,6,7]) (Comb FuncCall ("Prelude","==") [Var 1,Var 3])])),Func ("Inference","lookupType") 0 Private (FuncType (TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("FlatCurry","TypeExpr") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","Maybe") [TCons ("FlatCurry","TypeExpr") []]))) (Rule [] (Comb (FuncPartCall 2) ("FiniteMap","lookupFM") [])),Func ("Inference","getTypeEnv") 1 Public (FuncType (TCons ("FlatCurry","Prog") []) (TCons ("Prelude","IO") [TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("FlatCurry","TypeExpr") []]])) (Rule [1] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Inference","extractImported") [Var 1],Comb (FuncPartCall 1) ("Inference","getTypeEnv._#lambda5") [Var 1]])),Func ("Inference","getTypeEnv._#lambda5") 2 Private (FuncType (TCons ("FlatCurry","Prog") []) (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","Prog") []]) (TCons ("Prelude","IO") [TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("FlatCurry","TypeExpr") []]]))) (Rule [1,2] (Comb FuncCall ("Prelude","return") [Comb FuncCall ("Inference","extractKnownTypes") [Comb ConsCall ("Prelude",":") [Var 1,Var 2]]])),Func ("Inference","extractImported") 1 Private (FuncType (TCons ("FlatCurry","Prog") []) (TCons ("Prelude","IO") [TCons ("Prelude","[]") [TCons ("FlatCurry","Prog") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","Prog") [2,3,4,5,6]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","mapIO") [Comb (FuncPartCall 1) ("FlatCurry","readFlatCurryInt") []],Var 3])])),Func ("Inference","getTypeEnvFromProgEnv") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("FlatCurry","Prog") []]]) (FuncType (TCons ("FlatCurry","Prog") []) (TCons ("Prelude","Either") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("FlatCurry","TypeExpr") []]]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("FlatCurry","Prog") [3,4,5,6,7]) (Case  Rigid (Comb FuncCall ("Inference","getTypeEnvFromProgEnv.extract.47") [Var 1,Var 4]) [Branch (Pattern ("Prelude","Left") [8]) (Comb ConsCall ("Prelude","Left") [Var 8]),Branch (Pattern ("Prelude","Right") [9]) (Comb ConsCall ("Prelude","Right") [Comb FuncCall ("Inference","extractKnownTypes") [Comb ConsCall ("Prelude",":") [Var 2,Var 9]]])])])),Func ("Inference","getTypeEnvFromProgEnv.extract.47") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("FlatCurry","Prog") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","Either") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("FlatCurry","Prog") []]]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","Right") [Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude",":") [3,4]) (Case  Rigid (Comb FuncCall ("Prelude","lookup") [Var 3,Var 1]) [Branch (Pattern ("Prelude","Nothing") []) (Comb ConsCall ("Prelude","Left") [Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'T'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'E'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'v'),Comb ConsCall ("Prelude",":") [Lit (Charc  'F'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],Var 3]]),Branch (Pattern ("Prelude","Just") [5]) (Case  Rigid (Comb FuncCall ("Inference","getTypeEnvFromProgEnv.extract.47") [Var 1,Var 4]) [Branch (Pattern ("Prelude","Left") [6]) (Comb ConsCall ("Prelude","Left") [Var 6]),Branch (Pattern ("Prelude","Right") [7]) (Comb ConsCall ("Prelude","Right") [Comb ConsCall ("Prelude",":") [Var 5,Var 7]])])])])),Func ("Inference","extractKnownTypes") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","Prog") []]) (TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("FlatCurry","TypeExpr") []])) (Rule [1] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FiniteMap","listToFM") [Comb (FuncPartCall 2) ("Prelude","<") []],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","concatMap") [Comb (FuncPartCall 1) ("Inference","extractKnownTypes.extractProg.65") []],Var 1]])),Func ("Inference","extractKnownTypes.extractFuncDecl.65") 1 Private (FuncType (TCons ("FlatCurry","FuncDecl") []) (TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("FlatCurry","TypeExpr") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","Func") [2,3,4,5,6]) (Comb ConsCall ("Prelude","(,)") [Var 2,Var 5])])),Func ("Inference","extractKnownTypes.extractConsDecl.65") 2 Private (FuncType (TCons ("FlatCurry","TypeExpr") []) (FuncType (TCons ("FlatCurry","ConsDecl") []) (TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("FlatCurry","TypeExpr") []]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("FlatCurry","Cons") [3,4,5,6]) (Comb ConsCall ("Prelude","(,)") [Var 3,Comb FuncCall ("Prelude","foldr") [Comb (ConsPartCall 2) ("FlatCurry","FuncType") [],Var 1,Var 6]])])),Func ("Inference","extractKnownTypes.extractTypeDecl.65") 1 Private (FuncType (TCons ("FlatCurry","TypeDecl") []) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("FlatCurry","TypeExpr") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","TypeSyn") [2,3,4,5]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Var 2,Var 5],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("FlatCurry","Type") [6,7,8,9]) (Let [(10,Comb ConsCall ("FlatCurry","TCons") [Var 6,Comb FuncCall ("Prelude","map") [Comb (ConsPartCall 1) ("FlatCurry","TVar") [],Var 8]])] (Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Inference","extractKnownTypes.extractConsDecl.65") [Var 10],Var 9]))])),Func ("Inference","extractKnownTypes.extractProg.65") 1 Private (FuncType (TCons ("FlatCurry","Prog") []) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("FlatCurry","TypeExpr") []]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","Prog") [2,3,4,5,6]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","concatMap") [Comb (FuncPartCall 1) ("Inference","extractKnownTypes.extractTypeDecl.65") []],Var 4],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Inference","extractKnownTypes.extractFuncDecl.65") [],Var 5]])])),Func ("Inference","initTIM") 1 Private (FuncType (TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("FlatCurry","TypeExpr") []]) (TCons ("Prelude","(,,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]])) (Rule [1] (Comb ConsCall ("Prelude","(,,)") [Var 1,Lit (Intc  0),Comb FuncCall ("FiniteMap","emptyFM") [Comb (FuncPartCall 2) ("Prelude","<") []]])),Func ("Inference","nextTVar") 0 Private (FuncType (TCons ("Prelude","(,,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","Either") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","(,)") [TCons ("FlatCurry","TypeExpr") [],TCons ("Prelude","(,,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]]])) (Rule [] (Comb (FuncPartCall 1) ("ErrorState",">+=") [Comb (FuncPartCall 1) ("ErrorState","gets") [],Comb (FuncPartCall 1) ("Inference","nextTVar._#lambda9") []])),Func ("Inference","nextTVar._#lambda9") 1 Private (FuncType (TCons ("Prelude","(,,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]) (FuncType (TCons ("Prelude","(,,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","Either") [TVar 1283,TCons ("Prelude","(,)") [TCons ("FlatCurry","TypeExpr") [],TCons ("Prelude","(,,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]]]))) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,)") [2,3,4]) (Comb FuncCall ("ErrorState",">+") [Comb (FuncPartCall 1) ("ErrorState","puts") [Comb ConsCall ("Prelude","(,,)") [Var 2,Comb FuncCall ("Prelude","+") [Var 3,Lit (Intc  1)],Var 4]],Comb (FuncPartCall 1) ("ErrorState","returnES") [Comb ConsCall ("FlatCurry","TVar") [Var 3]]])])),Func ("Inference","initVar2TVar") 0 Private (FuncType (TCons ("Prelude","(,,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","Either") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","(,)") [TCons ("Prelude","()") [],TCons ("Prelude","(,,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]]])) (Rule [] (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 2) ("ErrorState","modify") [],Comb (FuncPartCall 1) ("Inference","initVar2TVar._#lambda10") []])),Func ("Inference","initVar2TVar._#lambda10") 1 Private (FuncType (TCons ("Prelude","(,,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","(,,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],TCons ("FiniteMap","FM") [TVar 1284,TVar 1285]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,)") [2,3,4]) (Comb ConsCall ("Prelude","(,,)") [Var 2,Var 3,Comb FuncCall ("FiniteMap","emptyFM") [Comb (FuncPartCall 2) ("Prelude","<") []]])])),Func ("Inference","insertVar2TVar") 2 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("FlatCurry","TypeExpr") []) (FuncType (TCons ("Prelude","(,,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","Either") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","(,)") [TCons ("Prelude","()") [],TCons ("Prelude","(,,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]]])))) (Rule [1,2] (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 2) ("ErrorState","modify") [],Comb (FuncPartCall 1) ("Inference","insertVar2TVar._#lambda11") [Var 2,Var 1]])),Func ("Inference","insertVar2TVar._#lambda11") 3 Private (FuncType (TCons ("FlatCurry","TypeExpr") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","(,,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","(,,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]])))) (Rule [1,2,3] (Case  Flex (Var 3) [Branch (Pattern ("Prelude","(,,)") [4,5,6]) (Comb ConsCall ("Prelude","(,,)") [Var 4,Var 5,Comb FuncCall ("FiniteMap","addToFM") [Var 6,Var 2,Var 1]])])),Func ("Inference","insertFreshVar") 1 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","(,,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","Either") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","(,)") [TCons ("Prelude","()") [],TCons ("Prelude","(,,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]]]))) (Rule [1] (Comb (FuncPartCall 1) ("ErrorState",">+=") [Comb FuncCall ("Inference","nextTVar") [],Comb (FuncPartCall 1) ("Inference","insertVar2TVar") [Var 1]])),Func ("Inference","lookupVar2TVar") 1 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","(,,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","Either") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","(,)") [TCons ("Prelude","Maybe") [TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","(,,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]]]))) (Rule [1] (Comb (FuncPartCall 1) ("ErrorState",">+=") [Comb (FuncPartCall 1) ("ErrorState","gets") [],Comb (FuncPartCall 1) ("Inference","lookupVar2TVar._#lambda12") [Var 1]])),Func ("Inference","lookupVar2TVar._#lambda12") 2 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","(,,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]) (FuncType (TVar 1286) (TCons ("Prelude","Either") [TVar 1287,TCons ("Prelude","(,)") [TCons ("Prelude","Maybe") [TCons ("FlatCurry","TypeExpr") []],TVar 1286]])))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","(,,)") [3,4,5]) (Comb (FuncPartCall 1) ("ErrorState","returnES") [Comb FuncCall ("FiniteMap","lookupFM") [Var 5,Var 1]])])),Func ("Inference","getTypeVariant") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","(,,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","Either") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","(,,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]]]))) (Rule [1] (Comb (FuncPartCall 1) ("ErrorState",">+=") [Comb (FuncPartCall 1) ("ErrorState","gets") [],Comb (FuncPartCall 1) ("Inference","getTypeVariant._#lambda13") [Var 1]])),Func ("Inference","getTypeVariant._#lambda13") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","(,,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]) (FuncType (TCons ("Prelude","(,,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","Either") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","(,,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]]])))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","(,,)") [3,4,5]) (Case  Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Inference","lookupType") [],Var 3],Var 1]) [Branch (Pattern ("Prelude","Nothing") []) (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 2) ("ErrorState","failES") [],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'U'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'k'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],Comb FuncCall ("Prelude","show") [Var 1]]]),Branch (Pattern ("Prelude","Just") [6]) (Comb (FuncPartCall 1) ("ErrorState",">+=") [Comb FuncCall ("Inference","freshVariant") [Var 6],Comb (FuncPartCall 1) ("Inference","getTypeVariant._#lambda13._#lambda15") [Var 1]])])])),Func ("Inference","getTypeVariant._#lambda13._#lambda15") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("FlatCurry","TypeExpr") []) (FuncType (TVar 1288) (TCons ("Prelude","Either") [TVar 1289,TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("FlatCurry","TypeExpr") []],TVar 1288]])))) (Rule [1,2] (Comb (FuncPartCall 1) ("ErrorState","returnES") [Comb ConsCall ("Prelude","(,)") [Var 1,Var 2]])),Func ("Inference","freshVariant") 1 Private (FuncType (TCons ("FlatCurry","TypeExpr") []) (FuncType (TCons ("Prelude","(,,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","Either") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","(,)") [TCons ("FlatCurry","TypeExpr") [],TCons ("Prelude","(,,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]]]))) (Rule [1] (Comb FuncCall ("ErrorState","liftES") [Comb (FuncPartCall 1) ("Prelude","snd") [],Comb FuncCall ("Inference","freshVariant.rename.120") [Comb ConsCall ("Prelude","[]") [],Var 1]])),Func ("Inference","freshVariant.rename.120") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]) (FuncType (TCons ("FlatCurry","TypeExpr") []) (FuncType (TCons ("Prelude","(,,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","Either") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]],TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","(,,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]]])))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("FlatCurry","TVar") [3]) (Case  Rigid (Comb FuncCall ("Prelude","lookup") [Var 3,Var 1]) [Branch (Pattern ("Prelude","Just") [4]) (Comb (FuncPartCall 1) ("ErrorState","returnES") [Comb ConsCall ("Prelude","(,)") [Var 1,Var 4]]),Branch (Pattern ("Prelude","Nothing") []) (Comb (FuncPartCall 1) ("ErrorState",">+=") [Comb FuncCall ("Inference","nextTVar") [],Comb (FuncPartCall 1) ("Inference","freshVariant.rename.120._#lambda17") [Var 3,Var 1]])]),Branch (Pattern ("FlatCurry","FuncType") [5,6]) (Comb (FuncPartCall 1) ("ErrorState",">+=") [Comb FuncCall ("Inference","freshVariant.rename.120") [Var 1,Var 5],Comb (FuncPartCall 1) ("Inference","freshVariant.rename.120._#lambda18") [Var 6]]),Branch (Pattern ("FlatCurry","TCons") [7,8]) (Comb (FuncPartCall 1) ("ErrorState",">+=") [Comb FuncCall ("ErrorState","mapAccumES") [Comb (FuncPartCall 2) ("Inference","freshVariant.rename.120") [],Var 1,Var 8],Comb (FuncPartCall 1) ("Inference","freshVariant.rename.120._#lambda20") [Var 7]])])),Func ("Inference","freshVariant.rename.120._#lambda17") 3 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]) (FuncType (TCons ("FlatCurry","TypeExpr") []) (FuncType (TVar 1290) (TCons ("Prelude","Either") [TVar 1291,TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]],TCons ("FlatCurry","TypeExpr") []],TVar 1290]]))))) (Rule [1,2,3] (Comb (FuncPartCall 1) ("ErrorState","returnES") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Var 1,Var 3],Var 2],Var 3]])),Func ("Inference","freshVariant.rename.120._#lambda18") 2 Private (FuncType (TCons ("FlatCurry","TypeExpr") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]],TCons ("FlatCurry","TypeExpr") []]) (FuncType (TCons ("Prelude","(,,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","Either") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]],TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","(,,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]]])))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb (FuncPartCall 1) ("ErrorState",">+=") [Comb FuncCall ("Inference","freshVariant.rename.120") [Var 3,Var 1],Comb (FuncPartCall 1) ("Inference","freshVariant.rename.120._#lambda18._#lambda19") [Var 4]])])),Func ("Inference","freshVariant.rename.120._#lambda18._#lambda19") 2 Private (FuncType (TCons ("FlatCurry","TypeExpr") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]],TCons ("FlatCurry","TypeExpr") []]) (FuncType (TVar 1292) (TCons ("Prelude","Either") [TVar 1293,TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]],TCons ("FlatCurry","TypeExpr") []],TVar 1292]])))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb (FuncPartCall 1) ("ErrorState","returnES") [Comb ConsCall ("Prelude","(,)") [Var 3,Comb ConsCall ("FlatCurry","FuncType") [Var 1,Var 4]]])])),Func ("Inference","freshVariant.rename.120._#lambda20") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]],TCons ("Prelude","[]") [TCons ("FlatCurry","TypeExpr") []]]) (FuncType (TVar 1294) (TCons ("Prelude","Either") [TVar 1295,TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]],TCons ("FlatCurry","TypeExpr") []],TVar 1294]])))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb (FuncPartCall 1) ("ErrorState","returnES") [Comb ConsCall ("Prelude","(,)") [Var 3,Comb ConsCall ("FlatCurry","TCons") [Var 1,Var 4]]])])),Func ("Inference","++=") 0 Private (FuncType (FuncType (TCons ("Prelude","(,,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","Either") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","(,,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]]])) (FuncType (FuncType (TCons ("Prelude","(,,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","Either") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","(,,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]]])) (FuncType (TCons ("Prelude","(,,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","Either") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","(,,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]]])))) (Rule [] (Comb (FuncPartCall 2) ("ErrorState","liftES2") [Comb (FuncPartCall 2) ("Prelude","++") []])),Func ("Inference","annProg") 1 Private (FuncType (TCons ("FlatCurry","Prog") []) (FuncType (TCons ("Prelude","(,,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","Either") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","(,)") [TCons ("AnnotatedFlatCurry","AProg") [TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","(,,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]]]))) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","Prog") [2,3,4,5,6]) (Comb FuncCall ("ErrorState","liftES") [Comb (FuncPartCall 1) ("Inference","annProg._#lambda21") [Var 3,Var 2,Var 6,Var 4],Comb FuncCall ("ErrorState","mapES") [Comb (FuncPartCall 1) ("Inference","annFunc") [],Var 5]])])),Func ("Inference","annProg._#lambda21") 5 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","OpDecl") []]) (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","TypeDecl") []]) (FuncType (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]) (TCons ("AnnotatedFlatCurry","AProg") [TCons ("FlatCurry","TypeExpr") []])))))) (Rule [1,2,3,4,5] (Comb ConsCall ("AnnotatedFlatCurry","AProg") [Var 2,Var 1,Var 4,Var 5,Var 3])),Func ("Inference","annFunc") 1 Private (FuncType (TCons ("FlatCurry","FuncDecl") []) (FuncType (TCons ("Prelude","(,,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","Either") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","(,)") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","(,,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]]]))) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","Func") [2,3,4,5,6]) (Comb FuncCall ("ErrorState",">+") [Comb FuncCall ("Inference","initVar2TVar") [],Comb FuncCall ("ErrorState","liftES2") [Comb (ConsPartCall 2) ("AnnotatedFlatCurry","AFunc") [Var 2,Var 3,Var 4],Comb FuncCall ("Inference","freshVariant") [Var 5],Comb FuncCall ("Inference","annRule") [Var 6]]])])),Func ("Inference","annRule") 1 Private (FuncType (TCons ("FlatCurry","Rule") []) (FuncType (TCons ("Prelude","(,,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","Either") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","(,)") [TCons ("AnnotatedFlatCurry","ARule") [TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","(,,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]]]))) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","Rule") [2,3]) (Comb FuncCall ("ErrorState","liftES3") [Comb (ConsPartCall 3) ("AnnotatedFlatCurry","ARule") [],Comb FuncCall ("Inference","nextTVar") [],Comb FuncCall ("ErrorState","mapES") [Comb (FuncPartCall 1) ("Inference","annVar") [],Var 2],Comb FuncCall ("Inference","annExpr") [Var 3]]),Branch (Pattern ("FlatCurry","External") [4]) (Comb FuncCall ("ErrorState","liftES") [Comb (FuncPartCall 1) ("Inference","annRule._#lambda22") [Var 4],Comb FuncCall ("Inference","nextTVar") []])])),Func ("Inference","annRule._#lambda22") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("FlatCurry","TypeExpr") []) (TCons ("AnnotatedFlatCurry","ARule") [TCons ("FlatCurry","TypeExpr") []]))) (Rule [1,2] (Comb ConsCall ("AnnotatedFlatCurry","AExternal") [Var 2,Var 1])),Func ("Inference","annExpr") 1 Private (FuncType (TCons ("FlatCurry","Expr") []) (FuncType (TCons ("Prelude","(,,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","Either") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","(,)") [TCons ("AnnotatedFlatCurry","AExpr") [TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","(,,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]]]))) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","Var") [2]) (Let [(3,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'V'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'b'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","show") [Var 2],Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'z'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  '!'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])] (Comb (FuncPartCall 1) ("ErrorState",">+=") [Comb FuncCall ("Inference","lookupVar2TVar") [Var 2],Comb (FuncPartCall 1) ("Prelude","maybe") [Comb (FuncPartCall 1) ("ErrorState","failES") [Var 3],Comb (FuncPartCall 1) ("Inference","annExpr._#lambda23") [Var 2]]])),Branch (Pattern ("FlatCurry","Lit") [4]) (Comb (FuncPartCall 1) ("ErrorState",">+=") [Comb FuncCall ("Inference","nextTVar") [],Comb (FuncPartCall 1) ("Inference","annExpr._#lambda24") [Var 4]]),Branch (Pattern ("FlatCurry","Comb") [5,6,7]) (Comb FuncCall ("ErrorState","liftES3") [Comb (FuncPartCall 1) ("Inference","annExpr._#lambda25") [Var 5],Comb FuncCall ("Inference","nextTVar") [],Comb FuncCall ("Inference","getTypeVariant") [Var 6],Comb FuncCall ("ErrorState","mapES") [Comb (FuncPartCall 1) ("Inference","annExpr") [],Var 7]]),Branch (Pattern ("FlatCurry","Case") [8,9,10]) (Comb FuncCall ("ErrorState","liftES3") [Comb (FuncPartCall 1) ("Inference","annExpr._#lambda26") [Var 8],Comb FuncCall ("Inference","nextTVar") [],Comb FuncCall ("Inference","annExpr") [Var 9],Comb FuncCall ("ErrorState","mapES") [Comb (FuncPartCall 1) ("Inference","annBranch") [],Var 10]]),Branch (Pattern ("FlatCurry","Or") [11,12]) (Comb FuncCall ("ErrorState","liftES3") [Comb (ConsPartCall 3) ("AnnotatedFlatCurry","AOr") [],Comb FuncCall ("Inference","nextTVar") [],Comb FuncCall ("Inference","annExpr") [Var 11],Comb FuncCall ("Inference","annExpr") [Var 12]]),Branch (Pattern ("FlatCurry","Let") [13,14]) (Comb FuncCall ("ErrorState","liftES3") [Comb (ConsPartCall 3) ("AnnotatedFlatCurry","ALet") [],Comb FuncCall ("Inference","nextTVar") [],Comb FuncCall ("Inference","annExpr.annBindings.163") [Var 13],Comb FuncCall ("Inference","annExpr") [Var 14]]),Branch (Pattern ("FlatCurry","Free") [15,16]) (Comb FuncCall ("ErrorState","liftES3") [Comb (ConsPartCall 3) ("AnnotatedFlatCurry","AFree") [],Comb FuncCall ("Inference","nextTVar") [],Comb FuncCall ("ErrorState","mapES") [Comb (FuncPartCall 1) ("Inference","annExpr.annFree.173") [],Var 15],Comb FuncCall ("Inference","annExpr") [Var 16]]),Branch (Pattern ("FlatCurry","Typed") [17,18]) (Comb FuncCall ("ErrorState","liftES3") [Comb (ConsPartCall 3) ("AnnotatedFlatCurry","ATyped") [],Comb FuncCall ("Inference","nextTVar") [],Comb FuncCall ("Inference","annExpr") [Var 17],Comb FuncCall ("Inference","freshVariant") [Var 18]])])),Func ("Inference","annExpr._#lambda23") 2 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("FlatCurry","TypeExpr") []) (FuncType (TVar 1296) (TCons ("Prelude","Either") [TVar 1297,TCons ("Prelude","(,)") [TCons ("AnnotatedFlatCurry","AExpr") [TCons ("FlatCurry","TypeExpr") []],TVar 1296]])))) (Rule [1,2] (Comb (FuncPartCall 1) ("ErrorState","returnES") [Comb ConsCall ("AnnotatedFlatCurry","AVar") [Var 2,Var 1]])),Func ("Inference","annExpr._#lambda24") 2 Private (FuncType (TCons ("FlatCurry","Literal") []) (FuncType (TCons ("FlatCurry","TypeExpr") []) (FuncType (TVar 1298) (TCons ("Prelude","Either") [TVar 1299,TCons ("Prelude","(,)") [TCons ("AnnotatedFlatCurry","AExpr") [TCons ("FlatCurry","TypeExpr") []],TVar 1298]])))) (Rule [1,2] (Comb (FuncPartCall 1) ("ErrorState","returnES") [Comb ConsCall ("AnnotatedFlatCurry","ALit") [Var 2,Var 1]])),Func ("Inference","annExpr._#lambda25") 2 Private (FuncType (TCons ("FlatCurry","CombType") []) (FuncType (TCons ("FlatCurry","TypeExpr") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("FlatCurry","TypeExpr") []]) (FuncType (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AExpr") [TCons ("FlatCurry","TypeExpr") []]]) (TCons ("AnnotatedFlatCurry","AExpr") [TCons ("FlatCurry","TypeExpr") []]))))) (Rule [1,2] (Comb (ConsPartCall 2) ("AnnotatedFlatCurry","AComb") [Var 2,Var 1])),Func ("Inference","annExpr._#lambda26") 2 Private (FuncType (TCons ("FlatCurry","CaseType") []) (FuncType (TCons ("FlatCurry","TypeExpr") []) (FuncType (TCons ("AnnotatedFlatCurry","AExpr") [TCons ("FlatCurry","TypeExpr") []]) (FuncType (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","ABranchExpr") [TCons ("FlatCurry","TypeExpr") []]]) (TCons ("AnnotatedFlatCurry","AExpr") [TCons ("FlatCurry","TypeExpr") []]))))) (Rule [1,2] (Comb (ConsPartCall 2) ("AnnotatedFlatCurry","ACase") [Var 2,Var 1])),Func ("Inference","annExpr.checkVar.163") 1 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","(,,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","Either") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","(,,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]]]))) (Rule [1] (Comb FuncCall ("ErrorState",">+") [Comb FuncCall ("ErrorState",">+") [Comb FuncCall ("Inference","checkShadowing") [Var 1],Comb FuncCall ("Inference","insertFreshVar") [Var 1]],Comb (FuncPartCall 1) ("ErrorState","returnES") [Var 1]])),Func ("Inference","annExpr.annBindings.163") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","Expr") []]]) (FuncType (TCons ("Prelude","(,,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","Either") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("AnnotatedFlatCurry","AExpr") [TCons ("FlatCurry","TypeExpr") []]]],TCons ("Prelude","(,,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]]]))) (Rule [1] (Let [(2,Comb FuncCall ("Prelude","unzip") [Var 1]),(3,Comb FuncCall ("Inference","annExpr.annBindings.163._#selFP2#vs") [Var 2]),(4,Comb FuncCall ("Inference","annExpr.annBindings.163._#selFP3#es") [Var 2])] (Comb (FuncPartCall 1) ("ErrorState",">+=") [Comb FuncCall ("ErrorState","mapES") [Comb (FuncPartCall 1) ("Inference","annExpr.checkVar.163") [],Var 3],Comb (FuncPartCall 1) ("Inference","annExpr.annBindings.163._#lambda27") [Var 4]]))),Func ("Inference","annExpr.annBindings.163._#selFP2#vs") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Int") []],TCons ("Prelude","[]") [TCons ("FlatCurry","Expr") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("Inference","annExpr.annBindings.163._#selFP3#es") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Int") []],TCons ("Prelude","[]") [TCons ("FlatCurry","Expr") []]]) (TCons ("Prelude","[]") [TCons ("FlatCurry","Expr") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("Inference","annExpr.annBindings.163._#lambda27") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","Expr") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (FuncType (TCons ("Prelude","(,,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","Either") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("AnnotatedFlatCurry","AExpr") [TCons ("FlatCurry","TypeExpr") []]]],TCons ("Prelude","(,,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]]])))) (Rule [1,2] (Comb (FuncPartCall 1) ("ErrorState",">+=") [Comb FuncCall ("ErrorState","mapES") [Comb (FuncPartCall 1) ("Inference","annExpr") [],Var 1],Comb (FuncPartCall 1) ("Inference","annExpr.annBindings.163._#lambda27._#lambda28") [Var 2]])),Func ("Inference","annExpr.annBindings.163._#lambda27._#lambda28") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (FuncType (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AExpr") [TCons ("FlatCurry","TypeExpr") []]]) (FuncType (TVar 1300) (TCons ("Prelude","Either") [TVar 1301,TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("AnnotatedFlatCurry","AExpr") [TCons ("FlatCurry","TypeExpr") []]]],TVar 1300]])))) (Rule [1,2] (Comb (FuncPartCall 1) ("ErrorState","returnES") [Comb FuncCall ("Prelude","zip") [Var 1,Var 2]])),Func ("Inference","annExpr.annFree.173") 1 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","(,,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","Either") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","(,,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]]]))) (Rule [1] (Comb FuncCall ("ErrorState",">+") [Comb FuncCall ("Inference","checkShadowing") [Var 1],Comb FuncCall ("Inference","annVar") [Var 1]])),Func ("Inference","annVar") 1 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","(,,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","Either") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","(,,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]]]))) (Rule [1] (Comb (FuncPartCall 1) ("ErrorState",">+=") [Comb FuncCall ("Inference","nextTVar") [],Comb (FuncPartCall 1) ("Inference","annVar._#lambda29") [Var 1]])),Func ("Inference","annVar._#lambda29") 2 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("FlatCurry","TypeExpr") []) (FuncType (TCons ("Prelude","(,,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","Either") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","(,,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]]])))) (Rule [1,2] (Comb FuncCall ("ErrorState",">+") [Comb FuncCall ("Inference","insertVar2TVar") [Var 1,Var 2],Comb (FuncPartCall 1) ("ErrorState","returnES") [Comb ConsCall ("Prelude","(,)") [Var 1,Var 2]]])),Func ("Inference","checkShadowing") 1 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","(,,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","Either") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","(,)") [TCons ("Prelude","()") [],TCons ("Prelude","(,,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]]]))) (Rule [1] (Let [(2,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'v'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'b'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","show") [Var 1],Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  '!'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]])] (Comb (FuncPartCall 1) ("ErrorState",">+=") [Comb FuncCall ("Inference","lookupVar2TVar") [Var 1],Comb (FuncPartCall 1) ("Prelude","maybe") [Comb (FuncPartCall 1) ("ErrorState","returnES") [Comb ConsCall ("Prelude","()") []],Comb (FuncPartCall 1) ("Inference","checkShadowing._#lambda30") [Var 2]]]))),Func ("Inference","checkShadowing._#lambda30") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("FlatCurry","TypeExpr") []) (FuncType (TVar 1302) (TCons ("Prelude","Either") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","(,)") [TVar 1303,TVar 1302]])))) (Rule [1,2] (Comb (FuncPartCall 1) ("ErrorState","failES") [Var 1])),Func ("Inference","annBranch") 1 Private (FuncType (TCons ("FlatCurry","BranchExpr") []) (FuncType (TCons ("Prelude","(,,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","Either") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","(,)") [TCons ("AnnotatedFlatCurry","ABranchExpr") [TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","(,,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]]]))) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","Branch") [2,3]) (Comb FuncCall ("ErrorState","liftES2") [Comb (ConsPartCall 2) ("AnnotatedFlatCurry","ABranch") [],Comb FuncCall ("Inference","annPattern") [Var 2],Comb FuncCall ("Inference","annExpr") [Var 3]])])),Func ("Inference","annPattern") 1 Private (FuncType (TCons ("FlatCurry","Pattern") []) (FuncType (TCons ("Prelude","(,,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","Either") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","(,)") [TCons ("AnnotatedFlatCurry","APattern") [TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","(,,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]]]))) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","Pattern") [2,3]) (Comb FuncCall ("ErrorState","liftES3") [Comb (ConsPartCall 3) ("AnnotatedFlatCurry","APattern") [],Comb FuncCall ("Inference","nextTVar") [],Comb FuncCall ("Inference","getTypeVariant") [Var 2],Comb FuncCall ("ErrorState","mapES") [Comb (FuncPartCall 1) ("Inference","annPattern.annPVar.189") [],Var 3]]),Branch (Pattern ("FlatCurry","LPattern") [4]) (Comb FuncCall ("ErrorState","liftES") [Comb (FuncPartCall 1) ("Inference","annPattern._#lambda31") [Var 4],Comb FuncCall ("Inference","nextTVar") []])])),Func ("Inference","annPattern.annPVar.189") 1 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","(,,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","Either") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","(,,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]]]))) (Rule [1] (Comb FuncCall ("ErrorState",">+") [Comb FuncCall ("Inference","checkShadowing") [Var 1],Comb FuncCall ("Inference","annVar") [Var 1]])),Func ("Inference","annPattern._#lambda31") 2 Private (FuncType (TCons ("FlatCurry","Literal") []) (FuncType (TCons ("FlatCurry","TypeExpr") []) (TCons ("AnnotatedFlatCurry","APattern") [TCons ("FlatCurry","TypeExpr") []]))) (Rule [1,2] (Comb ConsCall ("AnnotatedFlatCurry","ALPattern") [Var 2,Var 1])),Func ("Inference","inferAProg") 1 Private (FuncType (TCons ("AnnotatedFlatCurry","AProg") [TCons ("FlatCurry","TypeExpr") []]) (FuncType (TCons ("Prelude","(,,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","Either") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","(,)") [TCons ("AnnotatedFlatCurry","AProg") [TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","(,,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]]]))) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("AnnotatedFlatCurry","AProg") [2,3,4,5,6]) (Comb FuncCall ("ErrorState","liftES") [Comb (FuncPartCall 1) ("Inference","inferAProg._#lambda32") [Var 3,Var 2,Var 6,Var 4],Comb FuncCall ("ErrorState","mapES") [Comb (FuncPartCall 1) ("Inference","inferFunc") [],Var 5]])])),Func ("Inference","inferAProg._#lambda32") 5 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","OpDecl") []]) (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","TypeDecl") []]) (FuncType (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]) (TCons ("AnnotatedFlatCurry","AProg") [TCons ("FlatCurry","TypeExpr") []])))))) (Rule [1,2,3,4,5] (Comb ConsCall ("AnnotatedFlatCurry","AProg") [Var 2,Var 1,Var 4,Var 5,Var 3])),Func ("Inference","inferFunc") 1 Private (FuncType (TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]) (FuncType (TCons ("Prelude","(,,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","Either") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","(,)") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","(,,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]]]))) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("AnnotatedFlatCurry","AFunc") [2,3,4,5,6]) (Comb (FuncPartCall 1) ("ErrorState",">+=") [Comb FuncCall ("Inference","inferRule") [Var 5,Var 6],Comb (FuncPartCall 1) ("Inference","inferFunc._#lambda33") [Var 1]])])),Func ("Inference","inferFunc._#lambda33") 2 Private (FuncType (TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("FlatCurry","TypeExpr") [],TCons ("FlatCurry","TypeExpr") []]]) (FuncType (TCons ("Prelude","(,,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","Either") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","(,)") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","(,,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]]])))) (Rule [1,2] (Comb (FuncPartCall 1) ("ErrorState",">+=") [Comb FuncCall ("Inference","unification") [Var 2],Comb (FuncPartCall 1) ("Inference","inferFunc._#lambda33._#lambda34") [Var 1]])),Func ("Inference","inferFunc._#lambda33._#lambda34") 2 Private (FuncType (TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]) (FuncType (TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]) (FuncType (TVar 1304) (TCons ("Prelude","Either") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","(,)") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []],TVar 1304]])))) (Rule [1,2] (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Inference","normFunc") [],Comb FuncCall ("AFCSubst","substFunc") [Var 2,Var 1]])),Func ("Inference","=.=") 2 Private (FuncType (TCons ("FlatCurry","TypeExpr") []) (FuncType (TCons ("FlatCurry","TypeExpr") []) (TCons ("Prelude","(,)") [TCons ("FlatCurry","TypeExpr") [],TCons ("FlatCurry","TypeExpr") []]))) (Rule [1,2] (Comb ConsCall ("Prelude","(,)") [Var 1,Var 2])),Func ("Inference","showTypeEqs") 0 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("FlatCurry","TypeExpr") [],TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","unlines") [],Comb (FuncPartCall 1) ("Prelude","map") [Comb (FuncPartCall 1) ("Inference","showTypeEqs.showEquation.208") []]])),Func ("Inference","showTypeEqs.showEquation.208") 1 Private (FuncType (TCons ("Prelude","(,)") [TVar 0,TVar 1]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","show") [Var 2],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '='),Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude",":") [Lit (Charc  '='),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]],Comb FuncCall ("Prelude","show") [Var 3]]])])),Func ("Inference","inferRule") 2 Private (FuncType (TCons ("FlatCurry","TypeExpr") []) (FuncType (TCons ("AnnotatedFlatCurry","ARule") [TCons ("FlatCurry","TypeExpr") []]) (FuncType (TCons ("Prelude","(,,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","Either") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("FlatCurry","TypeExpr") [],TCons ("FlatCurry","TypeExpr") []]],TCons ("Prelude","(,,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]]])))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("AnnotatedFlatCurry","ARule") [3,4,5]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Inference","++=") [],Comb (FuncPartCall 1) ("ErrorState","returnES") [Comb ConsCall ("Prelude",":") [Comb FuncCall ("Inference","=.=") [Var 1,Var 3],Comb FuncCall ("Inference","matchApp") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Inference","exprType") [],Var 5],Var 1,Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Prelude","snd") [],Var 4]]]]],Comb FuncCall ("Inference","inferExpr") [Var 5]]),Branch (Pattern ("AnnotatedFlatCurry","AExternal") [6,7]) (Comb (FuncPartCall 1) ("ErrorState","returnES") [Comb ConsCall ("Prelude",":") [Comb FuncCall ("Inference","=.=") [Var 1,Var 6],Comb ConsCall ("Prelude","[]") []]])])),Func ("Inference","matchApp") 3 Private (FuncType (TCons ("FlatCurry","TypeExpr") []) (FuncType (TCons ("FlatCurry","TypeExpr") []) (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","TypeExpr") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("FlatCurry","TypeExpr") [],TCons ("FlatCurry","TypeExpr") []]])))) (Rule [1,2,3] (Case  Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude",":") [Comb FuncCall ("Inference","=.=") [Var 1,Var 2],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude",":") [4,5]) (Case  Flex (Var 2) [Branch (Pattern ("FlatCurry","FuncType") [6,7]) (Comb ConsCall ("Prelude",":") [Comb FuncCall ("Inference","=.=") [Var 4,Var 6],Comb FuncCall ("Inference","matchApp") [Var 1,Var 7,Var 5]])])])),Func ("Inference","inferExpr") 1 Private (FuncType (TCons ("AnnotatedFlatCurry","AExpr") [TCons ("FlatCurry","TypeExpr") []]) (FuncType (TCons ("Prelude","(,,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","Either") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("FlatCurry","TypeExpr") [],TCons ("FlatCurry","TypeExpr") []]],TCons ("Prelude","(,,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]]]))) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("AnnotatedFlatCurry","AVar") [2,3]) (Comb (FuncPartCall 1) ("ErrorState","returnES") [Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("AnnotatedFlatCurry","ALit") [4,5]) (Comb (FuncPartCall 1) ("ErrorState","returnES") [Comb ConsCall ("Prelude",":") [Comb FuncCall ("Inference","=.=") [Var 4,Comb FuncCall ("Inference","literalType") [Var 5]],Comb ConsCall ("Prelude","[]") []]]),Branch (Pattern ("AnnotatedFlatCurry","AComb") [6,7,8,9]) (Case  Flex (Var 8) [Branch (Pattern ("Prelude","(,)") [10,11]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Inference","++=") [],Comb (FuncPartCall 1) ("ErrorState","returnES") [Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Inference","matchApp") [Var 6,Var 11],Comb FuncCall ("Prelude","map") [Comb FuncCall ("Inference","exprType") [],Var 9]]]],Comb FuncCall ("ErrorState","concatMapES") [Comb (FuncPartCall 1) ("Inference","inferExpr") [],Var 9]])]),Branch (Pattern ("AnnotatedFlatCurry","ACase") [12,13,14,15]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Inference","++=") [],Comb FuncCall ("Inference","inferExpr") [Var 14]],Comb FuncCall ("ErrorState","concatMapES") [Comb (FuncPartCall 1) ("Inference","inferBranch") [Var 12,Var 14],Var 15]]),Branch (Pattern ("AnnotatedFlatCurry","AOr") [16,17,18]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Inference","++=") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Inference","++=") [],Comb (FuncPartCall 1) ("ErrorState","returnES") [Comb ConsCall ("Prelude",":") [Comb FuncCall ("Inference","=.=") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Inference","exprType") [],Var 17],Var 16],Comb ConsCall ("Prelude",":") [Comb FuncCall ("Inference","=.=") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Inference","exprType") [],Var 18],Var 16],Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("Inference","inferExpr") [Var 17]]],Comb FuncCall ("Inference","inferExpr") [Var 18]]),Branch (Pattern ("AnnotatedFlatCurry","ALet") [19,20,21]) (Let [(22,Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Inference","inferExpr._#lambda35") [],Var 20])] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Inference","++=") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Inference","++=") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Inference","++=") [],Comb FuncCall ("ErrorState","concatMapES") [Comb (FuncPartCall 1) ("Inference","inferVars") [Var 22],Comb ConsCall ("Prelude",":") [Var 21,Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Prelude","snd") [],Var 20]]]],Comb FuncCall ("ErrorState","concatMapES") [Comb (FuncPartCall 1) ("Inference","inferExpr") [],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Prelude","snd") [],Var 20]]]],Comb FuncCall ("Inference","inferExpr") [Var 21]]],Comb (FuncPartCall 1) ("ErrorState","returnES") [Comb ConsCall ("Prelude",":") [Comb FuncCall ("Inference","=.=") [Var 19,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Inference","exprType") [],Var 21]],Comb ConsCall ("Prelude","[]") []]]])),Branch (Pattern ("AnnotatedFlatCurry","AFree") [23,24,25]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Inference","++=") [],Comb FuncCall ("Inference","inferExpr") [Var 25]],Comb (FuncPartCall 1) ("ErrorState","returnES") [Comb ConsCall ("Prelude",":") [Comb FuncCall ("Inference","=.=") [Var 23,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Inference","exprType") [],Var 25]],Comb ConsCall ("Prelude","[]") []]]]),Branch (Pattern ("AnnotatedFlatCurry","ATyped") [26,27,28]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Inference","++=") [],Comb FuncCall ("Inference","inferExpr") [Var 27]],Comb (FuncPartCall 1) ("ErrorState","returnES") [Comb ConsCall ("Prelude",":") [Comb FuncCall ("Inference","=.=") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Inference","exprType") [],Var 27],Var 26],Comb ConsCall ("Prelude",":") [Comb FuncCall ("Inference","=.=") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Inference","exprType") [],Var 27],Var 28],Comb ConsCall ("Prelude","[]") []]]]])])),Func ("Inference","inferExpr._#lambda35") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("AnnotatedFlatCurry","AExpr") [TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Comb ConsCall ("Prelude","(,)") [Var 2,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Inference","exprType") [],Var 3]])])),Func ("Inference","inferBranch") 3 Private (FuncType (TCons ("FlatCurry","TypeExpr") []) (FuncType (TCons ("AnnotatedFlatCurry","AExpr") [TCons ("FlatCurry","TypeExpr") []]) (FuncType (TCons ("AnnotatedFlatCurry","ABranchExpr") [TCons ("FlatCurry","TypeExpr") []]) (FuncType (TCons ("Prelude","(,,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","Either") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("FlatCurry","TypeExpr") [],TCons ("FlatCurry","TypeExpr") []]],TCons ("Prelude","(,,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]]]))))) (Rule [1,2,3] (Case  Flex (Var 3) [Branch (Pattern ("AnnotatedFlatCurry","ABranch") [4,5]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Inference","++=") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Inference","++=") [],Comb (FuncPartCall 1) ("ErrorState","returnES") [Comb ConsCall ("Prelude",":") [Comb FuncCall ("Inference","=.=") [Var 1,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Inference","exprType") [],Var 5]],Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("Inference","inferPattern") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Inference","exprType") [],Var 2],Var 4]]],Comb FuncCall ("Inference","inferExpr") [Var 5]])])),Func ("Inference","inferPattern") 2 Private (FuncType (TCons ("FlatCurry","TypeExpr") []) (FuncType (TCons ("AnnotatedFlatCurry","APattern") [TCons ("FlatCurry","TypeExpr") []]) (FuncType (TCons ("Prelude","(,,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","Either") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("FlatCurry","TypeExpr") [],TCons ("FlatCurry","TypeExpr") []]],TCons ("Prelude","(,,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]]])))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("AnnotatedFlatCurry","APattern") [3,4,5]) (Case  Flex (Var 4) [Branch (Pattern ("Prelude","(,)") [6,7]) (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 2) ("ErrorState","returnES") [],Comb ConsCall ("Prelude",":") [Comb FuncCall ("Inference","=.=") [Var 1,Var 3],Comb FuncCall ("Inference","matchApp") [Var 3,Var 7,Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Prelude","snd") [],Var 5]]]])]),Branch (Pattern ("AnnotatedFlatCurry","ALPattern") [8,9]) (Comb (FuncPartCall 1) ("ErrorState","returnES") [Comb ConsCall ("Prelude",":") [Comb FuncCall ("Inference","=.=") [Var 1,Var 8],Comb ConsCall ("Prelude",":") [Comb FuncCall ("Inference","=.=") [Var 8,Comb FuncCall ("Inference","literalType") [Var 9]],Comb ConsCall ("Prelude","[]") []]]])])),Func ("Inference","inferVars") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]) (FuncType (TCons ("AnnotatedFlatCurry","AExpr") [TCons ("FlatCurry","TypeExpr") []]) (FuncType (TCons ("Prelude","(,,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","Either") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("FlatCurry","TypeExpr") [],TCons ("FlatCurry","TypeExpr") []]],TCons ("Prelude","(,,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]]])))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("AnnotatedFlatCurry","AComb") [3,4,5,6]) (Comb FuncCall ("ErrorState","concatMapES") [Comb (FuncPartCall 1) ("Inference","inferVars") [Var 1],Var 6]),Branch (Pattern ("AnnotatedFlatCurry","ACase") [7,8,9,10]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Inference","++=") [],Comb FuncCall ("ErrorState","concatMapES") [Comb (FuncPartCall 1) ("Inference","inferVars.genBranchVarPairs.260") [Var 1],Var 10]],Comb FuncCall ("Inference","inferVars") [Var 1,Var 9]]),Branch (Pattern ("AnnotatedFlatCurry","AVar") [11,12]) (Case  Rigid (Comb FuncCall ("Prelude","lookup") [Var 12,Var 1]) [Branch (Pattern ("Prelude","Just") [13]) (Comb (FuncPartCall 1) ("ErrorState","returnES") [Case  Rigid (Comb FuncCall ("Prelude","==") [Var 11,Var 13]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude",":") [Comb FuncCall ("Inference","=.=") [Var 11,Var 13],Comb ConsCall ("Prelude","[]") []])]]),Branch (Pattern ("Prelude","Nothing") []) (Comb (FuncPartCall 1) ("ErrorState","returnES") [Comb ConsCall ("Prelude","[]") []])]),Branch (Pattern ("AnnotatedFlatCurry","ALit") [14,15]) (Comb (FuncPartCall 1) ("ErrorState","returnES") [Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("AnnotatedFlatCurry","AOr") [16,17,18]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Inference","++=") [],Comb FuncCall ("Inference","inferVars") [Var 1,Var 17]],Comb FuncCall ("Inference","inferVars") [Var 1,Var 18]]),Branch (Pattern ("AnnotatedFlatCurry","ALet") [19,20,21]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Inference","++=") [],Comb FuncCall ("ErrorState","concatMapES") [Comb (FuncPartCall 1) ("Inference","inferVars") [Var 1],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Prelude","snd") [],Var 20]]],Comb FuncCall ("Inference","inferVars") [Var 1,Var 21]]),Branch (Pattern ("AnnotatedFlatCurry","AFree") [22,23,24]) (Comb FuncCall ("Inference","inferVars") [Var 1,Var 24]),Branch (Pattern ("AnnotatedFlatCurry","ATyped") [25,26,27]) (Comb FuncCall ("Inference","inferVars") [Var 1,Var 26])])),Func ("Inference","inferVars.genBranchVarPairs.260") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]) (FuncType (TCons ("AnnotatedFlatCurry","ABranchExpr") [TCons ("FlatCurry","TypeExpr") []]) (FuncType (TCons ("Prelude","(,,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","Either") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("FlatCurry","TypeExpr") [],TCons ("FlatCurry","TypeExpr") []]],TCons ("Prelude","(,,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]]])))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("AnnotatedFlatCurry","ABranch") [3,4]) (Comb FuncCall ("Inference","inferVars") [Var 1,Var 4])])),Func ("Inference","literalType") 1 Private (FuncType (TCons ("FlatCurry","Literal") []) (TCons ("FlatCurry","TypeExpr") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","Intc") [2]) (Comb ConsCall ("FlatCurry","TCons") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb ConsCall ("Prelude",":") [Lit (Charc  'I'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("FlatCurry","Floatc") [3]) (Comb ConsCall ("FlatCurry","TCons") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb ConsCall ("Prelude",":") [Lit (Charc  'F'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude","[]") []]]]]]],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("FlatCurry","Charc") [4]) (Comb ConsCall ("FlatCurry","TCons") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc  'P'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude","[]") []]]]]],Comb ConsCall ("Prelude","[]") []])])),Func ("Inference","exprType") 0 Private (FuncType (TCons ("AnnotatedFlatCurry","AExpr") [TCons ("FlatCurry","TypeExpr") []]) (TCons ("FlatCurry","TypeExpr") [])) (Rule [] (Comb (FuncPartCall 1) ("AnnotatedFlatCurryGoodies","annExpr") [])),Func ("Inference","unification") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("FlatCurry","TypeExpr") [],TCons ("FlatCurry","TypeExpr") []]]) (FuncType (TCons ("Prelude","(,,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","Either") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","(,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","(,,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]]]))) (Rule [1] (Case  Rigid (Comb FuncCall ("Unification","unify") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Inference","fromTypeEqs") [],Var 1]]) [Branch (Pattern ("Prelude","Left") [2]) (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 2) ("ErrorState","failES") [],Comb FuncCall ("Inference","showUnificationError") [Var 2]]),Branch (Pattern ("Prelude","Right") [3]) (Comb (FuncPartCall 1) ("ErrorState","returnES") [Comb FuncCall ("FiniteMap","mapFM") [Comb (FuncPartCall 1) ("Inference","unification._#lambda38") [],Var 3]])])),Func ("Inference","unification._#lambda38") 1 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("UnificationSpec","Term") []) (TCons ("FlatCurry","TypeExpr") []))) (Rule [1] (Comb (FuncPartCall 1) ("Inference","toTypeExpr") [])),Func ("Inference","fromTypeEqs") 0 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("FlatCurry","TypeExpr") [],TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("UnificationSpec","Term") [],TCons ("UnificationSpec","Term") []]])) (Rule [] (Comb (FuncPartCall 1) ("Prelude","map") [Comb (FuncPartCall 1) ("Inference","fromTypeEqs._#lambda39") []])),Func ("Inference","fromTypeEqs._#lambda39") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("FlatCurry","TypeExpr") [],TCons ("FlatCurry","TypeExpr") []]) (TCons ("Prelude","(,)") [TCons ("UnificationSpec","Term") [],TCons ("UnificationSpec","Term") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Inference","fromTypeExpr") [Var 2],Comb FuncCall ("Inference","fromTypeExpr") [Var 3]])])),Func ("Inference","toTypeEqs") 0 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("UnificationSpec","Term") [],TCons ("UnificationSpec","Term") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("FlatCurry","TypeExpr") [],TCons ("FlatCurry","TypeExpr") []]])) (Rule [] (Comb (FuncPartCall 1) ("Prelude","map") [Comb (FuncPartCall 1) ("Inference","toTypeEqs._#lambda40") []])),Func ("Inference","toTypeEqs._#lambda40") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("UnificationSpec","Term") [],TCons ("UnificationSpec","Term") []]) (TCons ("Prelude","(,)") [TCons ("FlatCurry","TypeExpr") [],TCons ("FlatCurry","TypeExpr") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Comb FuncCall ("Inference","=.=") [Comb FuncCall ("Inference","toTypeExpr") [Var 2],Comb FuncCall ("Inference","toTypeExpr") [Var 3]])])),Func ("Inference","fromTypeExpr") 1 Private (FuncType (TCons ("FlatCurry","TypeExpr") []) (TCons ("UnificationSpec","Term") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","TVar") [2]) (Comb ConsCall ("UnificationSpec","TermVar") [Var 2]),Branch (Pattern ("FlatCurry","TCons") [3,4]) (Comb ConsCall ("UnificationSpec","TermCons") [Comb FuncCall ("Inference","fromQName") [Var 3],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Inference","fromTypeExpr") [],Var 4]]),Branch (Pattern ("FlatCurry","FuncType") [5,6]) (Comb ConsCall ("UnificationSpec","TermCons") [Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  '>'),Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude",":") [Comb FuncCall ("Inference","fromTypeExpr") [Var 5],Comb ConsCall ("Prelude",":") [Comb FuncCall ("Inference","fromTypeExpr") [Var 6],Comb ConsCall ("Prelude","[]") []]]])])),Func ("Inference","toTypeExpr") 1 Private (FuncType (TCons ("UnificationSpec","Term") []) (TCons ("FlatCurry","TypeExpr") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("UnificationSpec","TermVar") [2]) (Comb ConsCall ("FlatCurry","TVar") [Var 2]),Branch (Pattern ("UnificationSpec","TermCons") [3,4]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 3,Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  '>'),Comb ConsCall ("Prelude","[]") []]]]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("FlatCurry","FuncType") [Comb FuncCall ("Inference","toTypeExpr") [Comb FuncCall ("Prelude","!!") [Var 4,Lit (Intc  0)]],Comb FuncCall ("Inference","toTypeExpr") [Comb FuncCall ("Prelude","!!") [Var 4,Lit (Intc  1)]]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("FlatCurry","TCons") [Comb FuncCall ("Inference","toQName") [Var 3],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Inference","toTypeExpr") [],Var 4]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])),Func ("Inference","fromQName") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Comb FuncCall ("Prelude","++") [Var 2,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ';'),Comb ConsCall ("Prelude","[]") []],Var 3]])])),Func ("Inference","toQName") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Let [(2,Comb FuncCall ("Inference","splitFirst") [Var 1,Lit (Charc  ';')])] (Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Prelude","fst") [Var 2],Comb FuncCall ("Prelude","snd") [Var 2]]))),Func ("Inference","splitFirst") 2 Private (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TVar 0) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TVar 0]]))) (Rule [1,2] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","[]") [],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude",":") [3,4]) (Let [(5,Comb FuncCall ("Inference","splitFirst") [Var 4,Var 2])] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 3,Var 2]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","[]") [],Var 4]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Var 3,Comb FuncCall ("Prelude","fst") [Var 5]],Comb FuncCall ("Prelude","snd") [Var 5]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])]))])),Func ("Inference","showUnificationError") 1 Private (FuncType (TCons ("UnificationSpec","UnificationError") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("UnificationSpec","Clash") [2,3]) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Inference","showTypeExpr") [Comb FuncCall ("Inference","toTypeExpr") [Var 2]],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '='),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("Inference","showTypeExpr") [Comb FuncCall ("Inference","toTypeExpr") [Var 3]]]]]),Branch (Pattern ("UnificationSpec","OccurCheck") [4,5]) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'O'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'k'),Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'V'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'b'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Inference","showTypeExpr") [Comb FuncCall ("Inference","toTypeExpr") [Comb ConsCall ("UnificationSpec","TermVar") [Var 4]]],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]],Comb FuncCall ("Inference","showTypeExpr") [Comb FuncCall ("Inference","toTypeExpr") [Var 5]]]]])])),Func ("Inference","showTypeExpr") 1 Private (FuncType (TCons ("FlatCurry","TypeExpr") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","TVar") [2]) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb ConsCall ("Prelude",":") [Lit (Charc  'T'),Comb ConsCall ("Prelude",":") [Lit (Charc  'V'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","show") [Var 2],Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude","[]") []]]]),Branch (Pattern ("FlatCurry","TCons") [3,4]) (Case  Flex (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb ConsCall ("Prelude",":") [Lit (Charc  'T'),Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb ConsCall ("Prelude","[]") []]]]]]]]],Comb FuncCall ("Prelude","++") [Var 5,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ','),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude","++") [Var 6,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '['),Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Prelude","concat") [],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Inference","showTypeExpr") [],Var 4]],Comb ConsCall ("Prelude",":") [Lit (Charc  ']'),Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude","[]") []]]]]]]]])]),Branch (Pattern ("FlatCurry","FuncType") [7,8]) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb ConsCall ("Prelude",":") [Lit (Charc  'F'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'T'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Inference","showTypeExpr") [Var 7],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ','),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Inference","showTypeExpr") [Var 8],Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude","[]") []]]]]])])),Func ("Inference","normFunc") 1 Private (FuncType (TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]) (FuncType (TVar 0) (TCons ("Prelude","Either") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","(,)") [TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []],TVar 0]]))) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("AnnotatedFlatCurry","AFunc") [2,3,4,5,6]) (Let [(7,Comb FuncCall ("ErrorState","liftES2") [Comb (ConsPartCall 2) ("AnnotatedFlatCurry","AFunc") [Var 2,Var 3,Var 4],Comb FuncCall ("Inference","normType") [Var 5],Comb FuncCall ("Inference","normRule") [Var 6]])] (Case  Rigid (Comb FuncCall ("ErrorState","evalES") [Var 7,Comb ConsCall ("Prelude","(,)") [Lit (Intc  0),Comb FuncCall ("FiniteMap","emptyFM") [Comb (FuncPartCall 2) ("Prelude","<") []]]]) [Branch (Pattern ("Prelude","Left") [8]) (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 2) ("ErrorState","failES") [],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'N'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'z'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","show") [Var 2],Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]),Branch (Pattern ("Prelude","Right") [9]) (Comb (FuncPartCall 1) ("ErrorState","returnES") [Var 9])]))])),Func ("Inference","normType") 1 Private (FuncType (TCons ("FlatCurry","TypeExpr") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") []]]) (TCons ("Prelude","Either") [TCons ("Prelude","()") [],TCons ("Prelude","(,)") [TCons ("FlatCurry","TypeExpr") [],TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") []]]]]))) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","TVar") [2]) (Comb (FuncPartCall 1) ("ErrorState",">+=") [Comb (FuncPartCall 1) ("ErrorState","gets") [],Comb (FuncPartCall 1) ("Inference","normType._#lambda42") [Var 2]]),Branch (Pattern ("FlatCurry","TCons") [3,4]) (Comb FuncCall ("ErrorState","liftES") [Comb (ConsPartCall 1) ("FlatCurry","TCons") [Var 3],Comb FuncCall ("ErrorState","mapES") [Comb (FuncPartCall 1) ("Inference","normType") [],Var 4]]),Branch (Pattern ("FlatCurry","FuncType") [5,6]) (Comb FuncCall ("ErrorState","liftES2") [Comb (ConsPartCall 2) ("FlatCurry","FuncType") [],Comb FuncCall ("Inference","normType") [Var 5],Comb FuncCall ("Inference","normType") [Var 6]])])),Func ("Inference","normType._#lambda42") 2 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") []]]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") []]]) (TCons ("Prelude","Either") [TVar 1305,TCons ("Prelude","(,)") [TCons ("FlatCurry","TypeExpr") [],TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") []]]]])))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [3,4]) (Case  Rigid (Comb FuncCall ("FiniteMap","lookupFM") [Var 4,Var 1]) [Branch (Pattern ("Prelude","Nothing") []) (Comb FuncCall ("ErrorState",">+") [Comb (FuncPartCall 1) ("ErrorState","puts") [Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Prelude","+") [Var 3,Lit (Intc  1)],Comb FuncCall ("FiniteMap","addToFM") [Var 4,Var 1,Var 3]]],Comb (FuncPartCall 1) ("ErrorState","returnES") [Comb ConsCall ("FlatCurry","TVar") [Var 3]]]),Branch (Pattern ("Prelude","Just") [5]) (Comb (FuncPartCall 1) ("ErrorState","returnES") [Comb ConsCall ("FlatCurry","TVar") [Var 5]])])])),Func ("Inference","normRule") 1 Private (FuncType (TCons ("AnnotatedFlatCurry","ARule") [TCons ("FlatCurry","TypeExpr") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") []]]) (TCons ("Prelude","Either") [TCons ("Prelude","()") [],TCons ("Prelude","(,)") [TCons ("AnnotatedFlatCurry","ARule") [TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") []]]]]))) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("AnnotatedFlatCurry","ARule") [2,3,4]) (Comb FuncCall ("ErrorState","liftES3") [Comb (ConsPartCall 3) ("AnnotatedFlatCurry","ARule") [],Comb FuncCall ("Inference","normType") [Var 2],Comb FuncCall ("ErrorState","mapES") [Comb (FuncPartCall 1) ("Inference","normSnd") [],Var 3],Comb FuncCall ("Inference","normExpr") [Var 4]]),Branch (Pattern ("AnnotatedFlatCurry","AExternal") [5,6]) (Comb FuncCall ("ErrorState","liftES") [Comb (FuncPartCall 1) ("Inference","normRule._#lambda44") [Var 6],Comb FuncCall ("Inference","normType") [Var 5]])])),Func ("Inference","normRule._#lambda44") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("FlatCurry","TypeExpr") []) (TCons ("AnnotatedFlatCurry","ARule") [TCons ("FlatCurry","TypeExpr") []]))) (Rule [1,2] (Comb ConsCall ("AnnotatedFlatCurry","AExternal") [Var 2,Var 1])),Func ("Inference","normExpr") 1 Private (FuncType (TCons ("AnnotatedFlatCurry","AExpr") [TCons ("FlatCurry","TypeExpr") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") []]]) (TCons ("Prelude","Either") [TCons ("Prelude","()") [],TCons ("Prelude","(,)") [TCons ("AnnotatedFlatCurry","AExpr") [TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") []]]]]))) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("AnnotatedFlatCurry","AVar") [2,3]) (Comb FuncCall ("ErrorState","liftES") [Comb (FuncPartCall 1) ("Inference","normExpr._#lambda45") [Var 3],Comb FuncCall ("Inference","normType") [Var 2]]),Branch (Pattern ("AnnotatedFlatCurry","ALit") [4,5]) (Comb FuncCall ("ErrorState","liftES") [Comb (FuncPartCall 1) ("Inference","normExpr._#lambda46") [Var 5],Comb FuncCall ("Inference","normType") [Var 4]]),Branch (Pattern ("AnnotatedFlatCurry","AComb") [6,7,8,9]) (Comb FuncCall ("ErrorState","liftES3") [Comb (FuncPartCall 1) ("Inference","normExpr._#lambda47") [Var 7],Comb FuncCall ("Inference","normType") [Var 6],Comb FuncCall ("Inference","normSnd") [Var 8],Comb FuncCall ("ErrorState","mapES") [Comb (FuncPartCall 1) ("Inference","normExpr") [],Var 9]]),Branch (Pattern ("AnnotatedFlatCurry","ALet") [10,11,12]) (Comb FuncCall ("ErrorState","liftES3") [Comb (ConsPartCall 3) ("AnnotatedFlatCurry","ALet") [],Comb FuncCall ("Inference","normType") [Var 10],Comb FuncCall ("ErrorState","mapES") [Comb (FuncPartCall 1) ("Inference","normExpr.normBinding.383") [],Var 11],Comb FuncCall ("Inference","normExpr") [Var 12]]),Branch (Pattern ("AnnotatedFlatCurry","AOr") [13,14,15]) (Comb FuncCall ("ErrorState","liftES3") [Comb (ConsPartCall 3) ("AnnotatedFlatCurry","AOr") [],Comb FuncCall ("Inference","normType") [Var 13],Comb FuncCall ("Inference","normExpr") [Var 14],Comb FuncCall ("Inference","normExpr") [Var 15]]),Branch (Pattern ("AnnotatedFlatCurry","ACase") [16,17,18,19]) (Comb FuncCall ("ErrorState","liftES3") [Comb (FuncPartCall 1) ("Inference","normExpr._#lambda49") [Var 17],Comb FuncCall ("Inference","normType") [Var 16],Comb FuncCall ("Inference","normExpr") [Var 18],Comb FuncCall ("ErrorState","mapES") [Comb (FuncPartCall 1) ("Inference","normBranch") [],Var 19]]),Branch (Pattern ("AnnotatedFlatCurry","AFree") [20,21,22]) (Comb FuncCall ("ErrorState","liftES3") [Comb (ConsPartCall 3) ("AnnotatedFlatCurry","AFree") [],Comb FuncCall ("Inference","normType") [Var 20],Comb FuncCall ("ErrorState","mapES") [Comb (FuncPartCall 1) ("Inference","normSnd") [],Var 21],Comb FuncCall ("Inference","normExpr") [Var 22]]),Branch (Pattern ("AnnotatedFlatCurry","ATyped") [23,24,25]) (Comb FuncCall ("ErrorState","liftES3") [Comb (ConsPartCall 3) ("AnnotatedFlatCurry","ATyped") [],Comb FuncCall ("Inference","normType") [Var 23],Comb FuncCall ("Inference","normExpr") [Var 24],Comb FuncCall ("Inference","normType") [Var 25]])])),Func ("Inference","normExpr._#lambda45") 2 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("FlatCurry","TypeExpr") []) (TCons ("AnnotatedFlatCurry","AExpr") [TCons ("FlatCurry","TypeExpr") []]))) (Rule [1,2] (Comb ConsCall ("AnnotatedFlatCurry","AVar") [Var 2,Var 1])),Func ("Inference","normExpr._#lambda46") 2 Private (FuncType (TCons ("FlatCurry","Literal") []) (FuncType (TCons ("FlatCurry","TypeExpr") []) (TCons ("AnnotatedFlatCurry","AExpr") [TCons ("FlatCurry","TypeExpr") []]))) (Rule [1,2] (Comb ConsCall ("AnnotatedFlatCurry","ALit") [Var 2,Var 1])),Func ("Inference","normExpr._#lambda47") 2 Private (FuncType (TCons ("FlatCurry","CombType") []) (FuncType (TCons ("FlatCurry","TypeExpr") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("FlatCurry","TypeExpr") []]) (FuncType (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","AExpr") [TCons ("FlatCurry","TypeExpr") []]]) (TCons ("AnnotatedFlatCurry","AExpr") [TCons ("FlatCurry","TypeExpr") []]))))) (Rule [1,2] (Comb (ConsPartCall 2) ("AnnotatedFlatCurry","AComb") [Var 2,Var 1])),Func ("Inference","normExpr.normBinding.383") 1 Private (FuncType (TCons ("Prelude","(,)") [TVar 0,TCons ("AnnotatedFlatCurry","AExpr") [TCons ("FlatCurry","TypeExpr") []]]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") []]]) (TCons ("Prelude","Either") [TCons ("Prelude","()") [],TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TVar 0,TCons ("AnnotatedFlatCurry","AExpr") [TCons ("FlatCurry","TypeExpr") []]],TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") []]]]]))) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Comb (FuncPartCall 1) ("ErrorState",">+=") [Comb FuncCall ("Inference","normExpr") [Var 3],Comb (FuncPartCall 1) ("Inference","normExpr.normBinding.383._#lambda48") [Var 2]])])),Func ("Inference","normExpr.normBinding.383._#lambda48") 2 Private (FuncType (TVar 930) (FuncType (TCons ("AnnotatedFlatCurry","AExpr") [TCons ("FlatCurry","TypeExpr") []]) (FuncType (TVar 1306) (TCons ("Prelude","Either") [TVar 1307,TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TVar 930,TCons ("AnnotatedFlatCurry","AExpr") [TCons ("FlatCurry","TypeExpr") []]],TVar 1306]])))) (Rule [1,2] (Comb (FuncPartCall 1) ("ErrorState","returnES") [Comb ConsCall ("Prelude","(,)") [Var 1,Var 2]])),Func ("Inference","normExpr._#lambda49") 2 Private (FuncType (TCons ("FlatCurry","CaseType") []) (FuncType (TCons ("FlatCurry","TypeExpr") []) (FuncType (TCons ("AnnotatedFlatCurry","AExpr") [TCons ("FlatCurry","TypeExpr") []]) (FuncType (TCons ("Prelude","[]") [TCons ("AnnotatedFlatCurry","ABranchExpr") [TCons ("FlatCurry","TypeExpr") []]]) (TCons ("AnnotatedFlatCurry","AExpr") [TCons ("FlatCurry","TypeExpr") []]))))) (Rule [1,2] (Comb (ConsPartCall 2) ("AnnotatedFlatCurry","ACase") [Var 2,Var 1])),Func ("Inference","normSnd") 1 Private (FuncType (TCons ("Prelude","(,)") [TVar 0,TCons ("FlatCurry","TypeExpr") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") []]]) (TCons ("Prelude","Either") [TCons ("Prelude","()") [],TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TVar 0,TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") []]]]]))) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Comb (FuncPartCall 1) ("ErrorState",">+=") [Comb FuncCall ("Inference","normType") [Var 3],Comb (FuncPartCall 1) ("Inference","normSnd._#lambda50") [Var 2]])])),Func ("Inference","normSnd._#lambda50") 2 Private (FuncType (TVar 852) (FuncType (TCons ("FlatCurry","TypeExpr") []) (FuncType (TVar 1308) (TCons ("Prelude","Either") [TVar 1309,TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TVar 852,TCons ("FlatCurry","TypeExpr") []],TVar 1308]])))) (Rule [1,2] (Comb (FuncPartCall 1) ("ErrorState","returnES") [Comb ConsCall ("Prelude","(,)") [Var 1,Var 2]])),Func ("Inference","normBranch") 1 Private (FuncType (TCons ("AnnotatedFlatCurry","ABranchExpr") [TCons ("FlatCurry","TypeExpr") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") []]]) (TCons ("Prelude","Either") [TCons ("Prelude","()") [],TCons ("Prelude","(,)") [TCons ("AnnotatedFlatCurry","ABranchExpr") [TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") []]]]]))) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("AnnotatedFlatCurry","ABranch") [2,3]) (Comb FuncCall ("ErrorState","liftES2") [Comb (ConsPartCall 2) ("AnnotatedFlatCurry","ABranch") [],Comb FuncCall ("Inference","normPattern") [Var 2],Comb FuncCall ("Inference","normExpr") [Var 3]])])),Func ("Inference","normPattern") 1 Private (FuncType (TCons ("AnnotatedFlatCurry","APattern") [TCons ("FlatCurry","TypeExpr") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") []]]) (TCons ("Prelude","Either") [TCons ("Prelude","()") [],TCons ("Prelude","(,)") [TCons ("AnnotatedFlatCurry","APattern") [TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") []]]]]))) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("AnnotatedFlatCurry","APattern") [2,3,4]) (Comb FuncCall ("ErrorState","liftES3") [Comb (ConsPartCall 3) ("AnnotatedFlatCurry","APattern") [],Comb FuncCall ("Inference","normType") [Var 2],Comb FuncCall ("Inference","normSnd") [Var 3],Comb FuncCall ("ErrorState","mapES") [Comb (FuncPartCall 1) ("Inference","normSnd") [],Var 4]]),Branch (Pattern ("AnnotatedFlatCurry","ALPattern") [5,6]) (Comb FuncCall ("ErrorState","liftES") [Comb (FuncPartCall 1) ("Inference","normPattern._#lambda51") [Var 6],Comb FuncCall ("Inference","normType") [Var 5]])])),Func ("Inference","normPattern._#lambda51") 2 Private (FuncType (TCons ("FlatCurry","Literal") []) (FuncType (TCons ("FlatCurry","TypeExpr") []) (TCons ("AnnotatedFlatCurry","APattern") [TCons ("FlatCurry","TypeExpr") []]))) (Rule [1,2] (Comb ConsCall ("AnnotatedFlatCurry","ALPattern") [Var 2,Var 1]))] []