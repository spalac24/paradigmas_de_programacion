Prog "Inference" ["AFCSubst","AnnotatedFlatCurry","AnnotatedFlatCurryGoodies","ErrorState","FiniteMap","FlatCurry","List","Prelude","Unification","UnificationSpec"] [TypeSyn ("Inference","TypeEnv") Public [] (TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("FlatCurry","TypeExpr") []]),TypeSyn ("Inference","TIM") Private [0] (FuncType (TCons ("Prelude","(,,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]) (TCons ("Prelude","Either") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","(,,)") [TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("FlatCurry","TypeExpr") []],TCons ("Prelude","Int") [],TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("FlatCurry","TypeExpr") []]]]])),TypeSyn ("Inference","TypeEqs") Private [] (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("FlatCurry","TypeExpr") [],TCons ("FlatCurry","TypeExpr") []]]),TypeSyn ("Inference","NormState") Private [] (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") []]]),TypeSyn ("Inference","NormStateM") Private [0] (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") []]]) (TCons ("Prelude","Either") [TCons ("Prelude","()") [],TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("FiniteMap","FM") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") []]]]]))] [Func ("Inference","inferProg") 1 Public (FuncType (TCons ("FlatCurry","Prog") []) (TCons ("Prelude","IO") [TCons ("Prelude","Either") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("AnnotatedFlatCurry","AProg") [TCons ("FlatCurry","TypeExpr") []]]])) (Rule [] (Var 0)),Func ("Inference","inferProgFromProgEnv") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("FlatCurry","Prog") []]]) (FuncType (TCons ("FlatCurry","Prog") []) (TCons ("Prelude","Either") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("AnnotatedFlatCurry","AProg") [TCons ("FlatCurry","TypeExpr") []]]))) (Rule [] (Var 0)),Func ("Inference","inferProgEnv") 2 Public (FuncType (TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("FlatCurry","TypeExpr") []]) (FuncType (TCons ("FlatCurry","Prog") []) (TCons ("Prelude","Either") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("AnnotatedFlatCurry","AProg") [TCons ("FlatCurry","TypeExpr") []]]))) (Rule [] (Var 0)),Func ("Inference","inferFunction") 2 Public (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("FlatCurry","Prog") []) (TCons ("Prelude","IO") [TCons ("Prelude","Either") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]]]))) (Rule [] (Var 0)),Func ("Inference","inferFunctionEnv") 3 Public (FuncType (TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("FlatCurry","TypeExpr") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("FlatCurry","Prog") []) (TCons ("Prelude","Either") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("AnnotatedFlatCurry","AFuncDecl") [TCons ("FlatCurry","TypeExpr") []]])))) (Rule [] (Var 0)),Func ("Inference","getTypeEnv") 1 Public (FuncType (TCons ("FlatCurry","Prog") []) (TCons ("Prelude","IO") [TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("FlatCurry","TypeExpr") []]])) (Rule [] (Var 0)),Func ("Inference","getTypeEnvFromProgEnv") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("FlatCurry","Prog") []]]) (FuncType (TCons ("FlatCurry","Prog") []) (TCons ("Prelude","Either") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("FiniteMap","FM") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("FlatCurry","TypeExpr") []]]))) (Rule [] (Var 0))] []