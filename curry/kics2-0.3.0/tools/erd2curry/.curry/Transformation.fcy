Prog "Transformation" ["ERD","ERDGoodies","Prelude"] [] [Func ("Transformation","transform") 1 Public (FuncType (TCons ("ERD","ERD") []) (TCons ("ERD","ERD") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("ERD","ERD") [2,3,4]) (Let [(5,Comb FuncCall ("Transformation","transformRel") [Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Transformation","addKey") [],Var 3],Comb ConsCall ("Prelude","[]") []],Var 4]),(6,Comb FuncCall ("Transformation","transform._#selFP2#es") [Var 5]),(7,Comb FuncCall ("Transformation","transform._#selFP3#rs") [Var 5])] (Comb ConsCall ("ERD","ERD") [Var 2,Var 6,Var 7]))])),Func ("Transformation","transform._#selFP2#es") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("ERD","Entity") []],TCons ("Prelude","[]") [TCons ("ERD","Relationship") []]]) (TCons ("Prelude","[]") [TCons ("ERD","Entity") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("Transformation","transform._#selFP3#rs") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("ERD","Entity") []],TCons ("Prelude","[]") [TCons ("ERD","Relationship") []]]) (TCons ("Prelude","[]") [TCons ("ERD","Relationship") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("Transformation","addKey") 1 Private (FuncType (TCons ("ERD","Entity") []) (TCons ("ERD","Entity") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("ERD","Entity") [2,3]) (Comb ConsCall ("ERD","Entity") [Var 2,Comb ConsCall ("Prelude",":") [Comb ConsCall ("ERD","Attribute") [Comb ConsCall ("Prelude",":") [Lit (Charc  'K'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("ERD","IntDom") [Comb ConsCall ("Prelude","Nothing") []],Comb ConsCall ("ERD","PKey") [],Comb ConsCall ("Prelude","False") []],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Transformation","addKey.deleteKey.6") [],Var 3]]])])),Func ("Transformation","addKey.deleteKey.6") 1 Private (FuncType (TCons ("ERD","Attribute") []) (TCons ("ERD","Attribute") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("ERD","Attribute") [2,3,4,5]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 4,Comb ConsCall ("ERD","PKey") []]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("ERD","Attribute") [Var 2,Var 3,Comb ConsCall ("ERD","Unique") [],Var 5]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Var 1),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])),Func ("Transformation","transformRel") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("ERD","Entity") []],TCons ("Prelude","[]") [TCons ("ERD","Relationship") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("ERD","Relationship") []]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("ERD","Entity") []],TCons ("Prelude","[]") [TCons ("ERD","Relationship") []]]))) (Rule [1,2] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Case  Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","(,)") [Var 3,Var 4]),Branch (Pattern ("Prelude",":") [5,6]) (Case  Flex (Var 5) [Branch (Pattern ("ERD","Relationship") [7,8]) (Case  Flex (Var 8) [Branch (Pattern ("Prelude",":") [9,10]) (Case  Flex (Var 9) [Branch (Pattern ("ERD","REnd") [11,12,13]) (Case  Flex (Var 10) [Branch (Pattern ("Prelude",":") [14,15]) (Case  Flex (Var 14) [Branch (Pattern ("ERD","REnd") [16,17,18]) (Case  Flex (Var 15) [Branch (Pattern ("Prelude","[]") []) (Case  Rigid (Var 13) [Branch (Pattern ("ERD","Exactly") [19]) (Case  Rigid (Var 18) [Branch (Pattern ("ERD","Exactly") [20]) (Comb FuncCall ("Prelude","error") [Comb ConsCall ("Prelude",":") [Lit (Charc  '2'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]),Branch (Pattern ("ERD","Between") [21,22]) (Case  Rigid (Var 22) [Branch (Pattern ("ERD","Infinite") []) (Comb FuncCall ("Transformation","transformRel") [Comb FuncCall ("Transformation","eRN") [Var 19,Var 11,Var 16,Comb ConsCall ("Prelude","(,)") [Var 3,Var 4],Var 5],Var 6]),Branch (Pattern ("ERD","Max") [23]) (Comb FuncCall ("Transformation","transformRel") [Comb FuncCall ("Transformation","eRJ") [Var 19,Var 21,Var 23,Var 11,Var 16,Comb ConsCall ("Prelude","(,)") [Var 3,Var 4],Var 5],Var 6])]),Branch (Pattern ("ERD","Range") [24,25]) (Comb FuncCall ("Prelude","failed") [])]),Branch (Pattern ("ERD","Between") [26,27]) (Case  Rigid (Var 27) [Branch (Pattern ("ERD","Infinite") []) (Case  Rigid (Var 18) [Branch (Pattern ("ERD","Exactly") [28]) (Comb FuncCall ("Transformation","transformRel") [Comb FuncCall ("Transformation","eRN") [Var 28,Var 16,Var 11,Comb ConsCall ("Prelude","(,)") [Var 3,Var 4],Var 5],Var 6]),Branch (Pattern ("ERD","Between") [29,30]) (Case  Rigid (Var 30) [Branch (Pattern ("ERD","Infinite") []) (Comb FuncCall ("Transformation","transformRel") [Comb FuncCall ("Transformation","rNRN") [Var 3,Var 4,Var 5],Var 6]),Branch (Pattern ("ERD","Max") [31]) (Comb FuncCall ("Transformation","transformRel") [Comb FuncCall ("Transformation","rNRJ") [Var 26,Var 29,Var 31,Var 11,Var 16,Var 3,Var 4,Var 5],Var 6])]),Branch (Pattern ("ERD","Range") [32,33]) (Comb FuncCall ("Prelude","failed") [])]),Branch (Pattern ("ERD","Max") [34]) (Case  Rigid (Var 18) [Branch (Pattern ("ERD","Exactly") [35]) (Comb FuncCall ("Transformation","transformRel") [Comb FuncCall ("Transformation","eRJ") [Var 35,Var 26,Var 34,Var 16,Var 11,Comb ConsCall ("Prelude","(,)") [Var 3,Var 4],Var 5],Var 6]),Branch (Pattern ("ERD","Between") [36,37]) (Case  Rigid (Var 37) [Branch (Pattern ("ERD","Infinite") []) (Comb FuncCall ("Transformation","transformRel") [Comb FuncCall ("Transformation","rNRJ") [Var 36,Var 26,Var 34,Var 11,Var 16,Var 3,Var 4,Var 5],Var 6]),Branch (Pattern ("ERD","Max") [38]) (Comb FuncCall ("Transformation","transformRel") [Comb FuncCall ("Transformation","rJRJ") [Var 26,Var 34,Var 36,Var 38,Var 11,Var 16,Var 3,Var 4,Var 5],Var 6])]),Branch (Pattern ("ERD","Range") [39,40]) (Comb FuncCall ("Prelude","failed") [])])]),Branch (Pattern ("ERD","Range") [41,42]) (Comb FuncCall ("Prelude","failed") [])])])])])])])])])])),Func ("Transformation","eRN") 5 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("ERD","Entity") []],TCons ("Prelude","[]") [TCons ("ERD","Relationship") []]]) (FuncType (TCons ("ERD","Relationship") []) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("ERD","Entity") []],TCons ("Prelude","[]") [TCons ("ERD","Relationship") []]])))))) (Rule [1,2,3,4,5] (Case  Flex (Var 4) [Branch (Pattern ("Prelude","(,)") [6,7]) (Case  Flex (Var 5) [Branch (Pattern ("ERD","Relationship") [8,9]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 1,Lit (Intc  1)]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Transformation","addFKey") [Var 2,Var 3,Var 8,Comb ConsCall ("Prelude","False") [],Comb ConsCall ("Prelude","False") [],Var 6,Var 6],Comb ConsCall ("Prelude",":") [Var 5,Var 7]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Let [(10,Comb FuncCall ("Transformation","addExtraEntity") [Var 5,Var 6]),(11,Comb FuncCall ("Transformation","eRN._#selFP5#r1") [Var 10]),(12,Comb FuncCall ("Transformation","eRN._#selFP6#e") [Var 10]),(13,Comb FuncCall ("Transformation","eRN._#selFP7#r2") [Var 10])] (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Var 12,Var 6],Comb ConsCall ("Prelude",":") [Var 11,Comb ConsCall ("Prelude",":") [Var 13,Var 7]]])),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])])),Func ("Transformation","eRN._#selFP5#r1") 1 Private (FuncType (TCons ("Prelude","(,,)") [TCons ("ERD","Relationship") [],TCons ("ERD","Entity") [],TCons ("ERD","Relationship") []]) (TCons ("ERD","Relationship") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,)") [2,3,4]) (Var 2)])),Func ("Transformation","eRN._#selFP6#e") 1 Private (FuncType (TCons ("Prelude","(,,)") [TCons ("ERD","Relationship") [],TCons ("ERD","Entity") [],TCons ("ERD","Relationship") []]) (TCons ("ERD","Entity") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,)") [2,3,4]) (Var 3)])),Func ("Transformation","eRN._#selFP7#r2") 1 Private (FuncType (TCons ("Prelude","(,,)") [TCons ("ERD","Relationship") [],TCons ("ERD","Entity") [],TCons ("ERD","Relationship") []]) (TCons ("ERD","Relationship") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,)") [2,3,4]) (Var 4)])),Func ("Transformation","eRJ") 7 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("ERD","Entity") []],TCons ("Prelude","[]") [TCons ("ERD","Relationship") []]]) (FuncType (TCons ("ERD","Relationship") []) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("ERD","Entity") []],TCons ("Prelude","[]") [TCons ("ERD","Relationship") []]])))))))) (Rule [1,2,3,4,5,6,7] (Case  Flex (Var 6) [Branch (Pattern ("Prelude","(,)") [8,9]) (Case  Flex (Var 7) [Branch (Pattern ("ERD","Relationship") [10,11]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 1,Lit (Intc  1)]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Transformation","addFKey") [Var 4,Var 5,Var 10,Comb ConsCall ("Prelude","False") [],Comb FuncCall ("Prelude","==") [Var 3,Lit (Intc  1)],Var 8,Var 8],Comb ConsCall ("Prelude",":") [Var 7,Var 9]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 3,Lit (Intc  1)]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Transformation","addFKey") [Var 5,Var 4,Var 10,Comb ConsCall ("Prelude","True") [],Comb ConsCall ("Prelude","False") [],Var 8,Var 8],Comb ConsCall ("Prelude",":") [Var 7,Var 9]]),Branch (Pattern ("Prelude","False") []) (Let [(12,Comb FuncCall ("Transformation","addExtraEntity") [Var 7,Var 8]),(13,Comb FuncCall ("Transformation","eRJ._#selFP9#r1") [Var 12]),(14,Comb FuncCall ("Transformation","eRJ._#selFP10#e") [Var 12]),(15,Comb FuncCall ("Transformation","eRJ._#selFP11#r2") [Var 12])] (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Var 14,Var 8],Comb ConsCall ("Prelude",":") [Var 13,Comb ConsCall ("Prelude",":") [Var 15,Var 9]]]))]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])])),Func ("Transformation","eRJ._#selFP9#r1") 1 Private (FuncType (TCons ("Prelude","(,,)") [TCons ("ERD","Relationship") [],TCons ("ERD","Entity") [],TCons ("ERD","Relationship") []]) (TCons ("ERD","Relationship") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,)") [2,3,4]) (Var 2)])),Func ("Transformation","eRJ._#selFP10#e") 1 Private (FuncType (TCons ("Prelude","(,,)") [TCons ("ERD","Relationship") [],TCons ("ERD","Entity") [],TCons ("ERD","Relationship") []]) (TCons ("ERD","Entity") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,)") [2,3,4]) (Var 3)])),Func ("Transformation","eRJ._#selFP11#r2") 1 Private (FuncType (TCons ("Prelude","(,,)") [TCons ("ERD","Relationship") [],TCons ("ERD","Entity") [],TCons ("ERD","Relationship") []]) (TCons ("ERD","Relationship") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,)") [2,3,4]) (Var 4)])),Func ("Transformation","rNRN") 3 Private (FuncType (TCons ("Prelude","[]") [TCons ("ERD","Entity") []]) (FuncType (TCons ("Prelude","[]") [TCons ("ERD","Relationship") []]) (FuncType (TCons ("ERD","Relationship") []) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("ERD","Entity") []],TCons ("Prelude","[]") [TCons ("ERD","Relationship") []]])))) (Rule [1,2,3] (Let [(4,Comb FuncCall ("Transformation","addExtraEntity") [Var 3,Var 1]),(5,Comb FuncCall ("Transformation","rNRN._#selFP13#r1") [Var 4]),(6,Comb FuncCall ("Transformation","rNRN._#selFP14#e") [Var 4]),(7,Comb FuncCall ("Transformation","rNRN._#selFP15#r2") [Var 4])] (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Var 6,Var 1],Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude",":") [Var 7,Var 2]]]))),Func ("Transformation","rNRN._#selFP13#r1") 1 Private (FuncType (TCons ("Prelude","(,,)") [TCons ("ERD","Relationship") [],TCons ("ERD","Entity") [],TCons ("ERD","Relationship") []]) (TCons ("ERD","Relationship") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,)") [2,3,4]) (Var 2)])),Func ("Transformation","rNRN._#selFP14#e") 1 Private (FuncType (TCons ("Prelude","(,,)") [TCons ("ERD","Relationship") [],TCons ("ERD","Entity") [],TCons ("ERD","Relationship") []]) (TCons ("ERD","Entity") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,)") [2,3,4]) (Var 3)])),Func ("Transformation","rNRN._#selFP15#r2") 1 Private (FuncType (TCons ("Prelude","(,,)") [TCons ("ERD","Relationship") [],TCons ("ERD","Entity") [],TCons ("ERD","Relationship") []]) (TCons ("ERD","Relationship") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,)") [2,3,4]) (Var 4)])),Func ("Transformation","rNRJ") 8 Private (FuncType (TVar 0) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("ERD","Entity") []]) (FuncType (TCons ("Prelude","[]") [TCons ("ERD","Relationship") []]) (FuncType (TCons ("ERD","Relationship") []) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("ERD","Entity") []],TCons ("Prelude","[]") [TCons ("ERD","Relationship") []]]))))))))) (Rule [1,2,3,4,5,6,7,8] (Case  Flex (Var 8) [Branch (Pattern ("ERD","Relationship") [9,10]) (Case  Rigid (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","==") [Var 2,Lit (Intc  0)],Comb FuncCall ("Prelude","==") [Var 3,Lit (Intc  1)]]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Transformation","addFKey") [Var 4,Var 5,Var 9,Comb ConsCall ("Prelude","True") [],Comb ConsCall ("Prelude","False") [],Var 6,Var 6],Comb ConsCall ("Prelude",":") [Var 8,Var 7]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Let [(11,Comb FuncCall ("Transformation","addExtraEntity") [Var 8,Var 6]),(12,Comb FuncCall ("Transformation","rNRJ._#selFP17#r1") [Var 11]),(13,Comb FuncCall ("Transformation","rNRJ._#selFP18#e") [Var 11]),(14,Comb FuncCall ("Transformation","rNRJ._#selFP19#r2") [Var 11])] (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Var 13,Var 6],Comb ConsCall ("Prelude",":") [Var 12,Comb ConsCall ("Prelude",":") [Var 14,Var 7]]])),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])),Func ("Transformation","rNRJ._#selFP17#r1") 1 Private (FuncType (TCons ("Prelude","(,,)") [TCons ("ERD","Relationship") [],TCons ("ERD","Entity") [],TCons ("ERD","Relationship") []]) (TCons ("ERD","Relationship") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,)") [2,3,4]) (Var 2)])),Func ("Transformation","rNRJ._#selFP18#e") 1 Private (FuncType (TCons ("Prelude","(,,)") [TCons ("ERD","Relationship") [],TCons ("ERD","Entity") [],TCons ("ERD","Relationship") []]) (TCons ("ERD","Entity") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,)") [2,3,4]) (Var 3)])),Func ("Transformation","rNRJ._#selFP19#r2") 1 Private (FuncType (TCons ("Prelude","(,,)") [TCons ("ERD","Relationship") [],TCons ("ERD","Entity") [],TCons ("ERD","Relationship") []]) (TCons ("ERD","Relationship") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,)") [2,3,4]) (Var 4)])),Func ("Transformation","rJRJ") 9 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("ERD","Entity") []]) (FuncType (TCons ("Prelude","[]") [TCons ("ERD","Relationship") []]) (FuncType (TCons ("ERD","Relationship") []) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("ERD","Entity") []],TCons ("Prelude","[]") [TCons ("ERD","Relationship") []]])))))))))) (Rule [1,2,3,4,5,6,7,8,9] (Case  Flex (Var 9) [Branch (Pattern ("ERD","Relationship") [10,11]) (Case  Rigid (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","==") [Var 1,Lit (Intc  0)],Comb FuncCall ("Prelude","==") [Var 2,Lit (Intc  1)]]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Transformation","addFKey") [Var 5,Var 6,Var 10,Comb ConsCall ("Prelude","True") [],Comb FuncCall ("Prelude","==") [Var 4,Lit (Intc  1)],Var 7,Var 7],Comb ConsCall ("Prelude",":") [Var 9,Var 8]]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Let [(12,Comb FuncCall ("Transformation","addExtraEntity") [Var 9,Var 7]),(13,Comb FuncCall ("Transformation","rJRJ._#selFP21#r1") [Var 12]),(14,Comb FuncCall ("Transformation","rJRJ._#selFP22#e") [Var 12]),(15,Comb FuncCall ("Transformation","rJRJ._#selFP23#r2") [Var 12])] (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Var 14,Var 7],Comb ConsCall ("Prelude",":") [Var 13,Comb ConsCall ("Prelude",":") [Var 15,Var 8]]])),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])),Func ("Transformation","rJRJ._#selFP21#r1") 1 Private (FuncType (TCons ("Prelude","(,,)") [TCons ("ERD","Relationship") [],TCons ("ERD","Entity") [],TCons ("ERD","Relationship") []]) (TCons ("ERD","Relationship") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,)") [2,3,4]) (Var 2)])),Func ("Transformation","rJRJ._#selFP22#e") 1 Private (FuncType (TCons ("Prelude","(,,)") [TCons ("ERD","Relationship") [],TCons ("ERD","Entity") [],TCons ("ERD","Relationship") []]) (TCons ("ERD","Entity") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,)") [2,3,4]) (Var 3)])),Func ("Transformation","rJRJ._#selFP23#r2") 1 Private (FuncType (TCons ("Prelude","(,,)") [TCons ("ERD","Relationship") [],TCons ("ERD","Entity") [],TCons ("ERD","Relationship") []]) (TCons ("ERD","Relationship") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","(,,)") [2,3,4]) (Var 4)])),Func ("Transformation","addFKey") 7 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","[]") [TCons ("ERD","Entity") []]) (FuncType (TCons ("Prelude","[]") [TCons ("ERD","Entity") []]) (TCons ("Prelude","[]") [TCons ("ERD","Entity") []])))))))) (Rule [1,2,3,4,5,6,7] (Case  Flex (Var 6) [Branch (Pattern ("Prelude","[]") []) (Var 7),Branch (Pattern ("Prelude",":") [8,9]) (Case  Flex (Var 8) [Branch (Pattern ("ERD","Entity") [10,11]) (Case  Flex (Var 11) [Branch (Pattern ("Prelude",":") [12,13]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 2,Var 10]) [Branch (Pattern ("Prelude","True") []) (Let [(14,Comb FuncCall ("ERDGoodies","attributeName") [Comb FuncCall ("Transformation","getKeyAttribute") [Var 1,Var 7]])] (Comb ConsCall ("Prelude",":") [Comb ConsCall ("ERD","Entity") [Var 10,Comb ConsCall ("Prelude",":") [Var 12,Comb FuncCall ("Prelude","++") [Var 13,Comb ConsCall ("Prelude",":") [Comb ConsCall ("ERD","Attribute") [Comb FuncCall ("Transformation","fKeyName") [Var 1,Var 3,Var 14],Comb ConsCall ("ERD","KeyDom") [Var 1],Case  Rigid (Var 5) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("ERD","Unique") []),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("ERD","NoKey") [])],Var 4],Comb ConsCall ("Prelude","[]") []]]]],Var 9])),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Var 8,Comb FuncCall ("Transformation","addFKey") [Var 1,Var 2,Var 3,Var 4,Var 5,Var 9,Var 7]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])])])),Func ("Transformation","addFKey'") 5 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("ERD","Entity") []) (FuncType (TCons ("Prelude","[]") [TCons ("ERD","Entity") []]) (TCons ("ERD","Entity") [])))))) (Rule [1,2,3,4,5] (Case  Flex (Var 4) [Branch (Pattern ("ERD","Entity") [6,7]) (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Transformation","ensureUniqueAttributeNames") [],Comb ConsCall ("ERD","Entity") [Var 6,Comb ConsCall ("Prelude",":") [Comb ConsCall ("ERD","Attribute") [Comb FuncCall ("Transformation","fKeyName") [Var 1,Var 2,Comb FuncCall ("ERDGoodies","attributeName") [Comb FuncCall ("Transformation","getKeyAttribute") [Var 1,Var 5]]],Comb ConsCall ("ERD","KeyDom") [Var 1],Comb ConsCall ("ERD","PKey") [],Var 3],Var 7]]])])),Func ("Transformation","getKeyAttribute") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("ERD","Entity") []]) (TCons ("ERD","Attribute") []))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Prelude",":") [3,4]) (Case  Flex (Var 3) [Branch (Pattern ("ERD","Entity") [5,6]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 1,Var 5]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Transformation","getKey") [Var 6]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Transformation","getKeyAttribute") [Var 1,Var 4]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])])),Func ("Transformation","getKey") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("ERD","Attribute") []]) (TCons ("ERD","Attribute") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case  Flex (Var 2) [Branch (Pattern ("ERD","Attribute") [4,5,6,7]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Comb ConsCall ("ERD","PKey") [],Var 6]) [Branch (Pattern ("Prelude","True") []) (Var 2),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Transformation","getKey") [Var 3]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])])),Func ("Transformation","addExtraEntity") 2 Private (FuncType (TCons ("ERD","Relationship") []) (FuncType (TCons ("Prelude","[]") [TCons ("ERD","Entity") []]) (TCons ("Prelude","(,,)") [TCons ("ERD","Relationship") [],TCons ("ERD","Entity") [],TCons ("ERD","Relationship") []]))) (Rule [1,2] (Case  Flex (Var 1) [Branch (Pattern ("ERD","Relationship") [3,4]) (Case  Flex (Var 4) [Branch (Pattern ("Prelude",":") [5,6]) (Case  Flex (Var 5) [Branch (Pattern ("ERD","REnd") [7,8,9]) (Case  Flex (Var 6) [Branch (Pattern ("Prelude",":") [10,11]) (Case  Flex (Var 10) [Branch (Pattern ("ERD","REnd") [12,13,14]) (Case  Flex (Var 11) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","(,,)") [Comb ConsCall ("ERD","Relationship") [Comb ConsCall ("Prelude","[]") [],Comb ConsCall ("Prelude",":") [Comb ConsCall ("ERD","REnd") [Var 7,Comb ConsCall ("Prelude","[]") [],Comb ConsCall ("ERD","Exactly") [Lit (Intc  1)]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("ERD","REnd") [Var 3,Var 13,Var 14],Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("Transformation","addFKey'") [Var 7,Var 3,Comb ConsCall ("Prelude","False") [],Comb FuncCall ("Transformation","addFKey'") [Var 12,Var 3,Comb ConsCall ("Prelude","False") [],Comb ConsCall ("ERD","Entity") [Var 3,Comb ConsCall ("Prelude","[]") []],Var 2],Var 2],Comb ConsCall ("ERD","Relationship") [Comb ConsCall ("Prelude","[]") [],Comb ConsCall ("Prelude",":") [Comb ConsCall ("ERD","REnd") [Var 12,Comb ConsCall ("Prelude","[]") [],Comb ConsCall ("ERD","Exactly") [Lit (Intc  1)]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("ERD","REnd") [Var 3,Var 8,Var 9],Comb ConsCall ("Prelude","[]") []]]]])])])])])])])),Func ("Transformation","fKeyName") 3 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1,2,3] (Comb FuncCall ("ERDGoodies","combineIds") [Comb ConsCall ("Prelude",":") [Var 1,Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude",":") [Var 3,Comb ConsCall ("Prelude","[]") []]]]])),Func ("Transformation","ensureUniqueAttributeNames") 1 Private (FuncType (TCons ("ERD","Entity") []) (TCons ("ERD","Entity") [])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("ERD","Entity") [2,3]) (Comb ConsCall ("ERD","Entity") [Var 2,Comb FuncCall ("Transformation","uniqueNames") [Comb ConsCall ("Prelude","[]") [],Var 3]])])),Func ("Transformation","uniqueNames") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("ERD","Attribute") []]) (FuncType (TCons ("Prelude","[]") [TCons ("ERD","Attribute") []]) (TCons ("Prelude","[]") [TCons ("ERD","Attribute") []]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","reverse") [],Var 1]),Branch (Pattern ("Prelude",":") [3,4]) (Case  Flex (Var 3) [Branch (Pattern ("ERD","Attribute") [5,6,7,8]) (Let [(9,Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("ERDGoodies","attributeName") [],Comb FuncCall ("Prelude","++") [Var 1,Var 4]])] (Case  Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","elem") [Var 5],Var 9]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Transformation","uniqueNames") [Comb ConsCall ("Prelude",":") [Comb ConsCall ("ERD","Attribute") [Comb FuncCall ("Transformation","uniqueNames.makeUnique.110") [Var 9,Lit (Intc  1),Var 5],Var 6,Var 7,Var 8],Var 1],Var 4]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Transformation","uniqueNames") [Comb ConsCall ("Prelude",":") [Var 3,Var 1],Var 4])]))])])),Func ("Transformation","uniqueNames.makeUnique.110") 3 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1,2,3] (Let [(4,Comb FuncCall ("Prelude","++") [Var 3,Comb FuncCall ("Prelude","show") [Var 2]])] (Case  Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","elem") [Var 4],Var 1]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Transformation","uniqueNames.makeUnique.110") [Var 1,Comb FuncCall ("Prelude","+") [Var 2,Lit (Intc  1)],Var 3]),Branch (Pattern ("Prelude","False") []) (Var 4)])))] []