Prog "leq" ["Prelude"] [Type ("leq","Nat") Public [] [Cons ("leq","Z") 0 Public [],Cons ("leq","S") 1 Public [TCons ("leq","Nat") []]]] [Func ("leq","add") 2 Public (FuncType (TCons ("leq","Nat") []) (FuncType (TCons ("leq","Nat") []) (TCons ("leq","Nat") []))) (Rule [1,2] (Case  Flex (Var 1) [Branch (Pattern ("leq","Z") []) (Var 2),Branch (Pattern ("leq","S") [3]) (Comb ConsCall ("leq","S") [Comb FuncCall ("leq","add") [Var 3,Var 2]])])),Func ("leq","leq") 2 Public (FuncType (TCons ("leq","Nat") []) (FuncType (TCons ("leq","Nat") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Case  Flex (Var 1) [Branch (Pattern ("leq","Z") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("leq","S") [3]) (Case  Flex (Var 2) [Branch (Pattern ("leq","Z") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("leq","S") [4]) (Comb FuncCall ("leq","leq") [Var 3,Var 4])])]))] []